var dt = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function c0(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function Nm(e) {
  if (e.__esModule) return e;
  var a = e.default;
  if (typeof a == "function") {
    var t = function n() {
      return this instanceof n ? Reflect.construct(a, arguments, this.constructor) : a.apply(this, arguments);
    };
    t.prototype = a.prototype;
  } else t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(e).forEach(function(n) {
    var r = Object.getOwnPropertyDescriptor(e, n);
    Object.defineProperty(t, n, r.get ? r : {
      enumerable: !0,
      get: function() {
        return e[n];
      }
    });
  }), t;
}
var ee = {}, OR = {}, Lm = {}, qi = {};
Object.defineProperty(qi, "__esModule", {
  value: !0
});
qi.isFeatureEnabled = qi.enabledFeatures = qi.enableFeatures = void 0;
const tK = function(e) {
  return self.wpseoFeatureFlags ? self.wpseoFeatureFlags.includes(e) : !1;
};
qi.isFeatureEnabled = tK;
const nK = function(e) {
  self.wpseoFeatureFlags || (self.wpseoFeatureFlags = []), e.forEach((a) => {
    self.wpseoFeatureFlags.includes(a) || self.wpseoFeatureFlags.push(a);
  });
};
qi.enableFeatures = nK;
const rK = function() {
  return self.wpseoFeatureFlags || [];
};
qi.enabledFeatures = rK;
function sK(e, a) {
  var t = 0, n, r;
  a = a || {};
  function o() {
    var l = n, u = arguments.length, c, f;
    n: for (; l; ) {
      if (l.args.length !== arguments.length) {
        l = l.next;
        continue;
      }
      for (f = 0; f < u; f++)
        if (l.args[f] !== arguments[f]) {
          l = l.next;
          continue n;
        }
      return l !== n && (l === r && (r = l.prev), l.prev.next = l.next, l.next && (l.next.prev = l.prev), l.next = n, l.prev = null, n.prev = l, n = l), l.val;
    }
    for (c = new Array(u), f = 0; f < u; f++)
      c[f] = arguments[f];
    return l = {
      args: c,
      // Generate the result from original function
      val: e.apply(null, c)
    }, n ? (n.prev = l, l.next = n) : r = l, t === /** @type {MemizeOptions} */
    a.maxSize ? (r = /** @type {MemizeCacheNode} */
    r.prev, r.next = null) : t++, n = l, l.val;
  }
  return o.clear = function() {
    n = null, r = null, t = 0;
  }, o;
}
var IR = {};
(function(e) {
  (function() {
    var a = {
      not_type: /[^T]/,
      not_primitive: /[^v]/,
      number: /[diefg]/,
      numeric_arg: /[bcdiefguxX]/,
      json: /[j]/,
      text: /^[^\x25]+/,
      modulo: /^\x25{2}/,
      placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
      key: /^([a-z_][a-z_\d]*)/i,
      key_access: /^\.([a-z_][a-z_\d]*)/i,
      index_access: /^\[(\d+)\]/,
      sign: /^[+-]/
    };
    function t(u) {
      return r(l(u), arguments);
    }
    function n(u, c) {
      return t.apply(null, [u].concat(c || []));
    }
    function r(u, c) {
      var f = 1, y = u.length, z, v = "", O, I, A, x, w, j, S, P;
      for (O = 0; O < y; O++)
        if (typeof u[O] == "string")
          v += u[O];
        else if (typeof u[O] == "object") {
          if (A = u[O], A.keys)
            for (z = c[f], I = 0; I < A.keys.length; I++) {
              if (z == null)
                throw new Error(t('[sprintf] Cannot access property "%s" of undefined value "%s"', A.keys[I], A.keys[I - 1]));
              z = z[A.keys[I]];
            }
          else A.param_no ? z = c[A.param_no] : z = c[f++];
          if (a.not_type.test(A.type) && a.not_primitive.test(A.type) && z instanceof Function && (z = z()), a.numeric_arg.test(A.type) && typeof z != "number" && isNaN(z))
            throw new TypeError(t("[sprintf] expecting number but found %T", z));
          switch (a.number.test(A.type) && (S = z >= 0), A.type) {
            case "b":
              z = parseInt(z, 10).toString(2);
              break;
            case "c":
              z = String.fromCharCode(parseInt(z, 10));
              break;
            case "d":
            case "i":
              z = parseInt(z, 10);
              break;
            case "j":
              z = JSON.stringify(z, null, A.width ? parseInt(A.width) : 0);
              break;
            case "e":
              z = A.precision ? parseFloat(z).toExponential(A.precision) : parseFloat(z).toExponential();
              break;
            case "f":
              z = A.precision ? parseFloat(z).toFixed(A.precision) : parseFloat(z);
              break;
            case "g":
              z = A.precision ? String(Number(z.toPrecision(A.precision))) : parseFloat(z);
              break;
            case "o":
              z = (parseInt(z, 10) >>> 0).toString(8);
              break;
            case "s":
              z = String(z), z = A.precision ? z.substring(0, A.precision) : z;
              break;
            case "t":
              z = String(!!z), z = A.precision ? z.substring(0, A.precision) : z;
              break;
            case "T":
              z = Object.prototype.toString.call(z).slice(8, -1).toLowerCase(), z = A.precision ? z.substring(0, A.precision) : z;
              break;
            case "u":
              z = parseInt(z, 10) >>> 0;
              break;
            case "v":
              z = z.valueOf(), z = A.precision ? z.substring(0, A.precision) : z;
              break;
            case "x":
              z = (parseInt(z, 10) >>> 0).toString(16);
              break;
            case "X":
              z = (parseInt(z, 10) >>> 0).toString(16).toUpperCase();
              break;
          }
          a.json.test(A.type) ? v += z : (a.number.test(A.type) && (!S || A.sign) ? (P = S ? "+" : "-", z = z.toString().replace(a.sign, "")) : P = "", w = A.pad_char ? A.pad_char === "0" ? "0" : A.pad_char.charAt(1) : " ", j = A.width - (P + z).length, x = A.width && j > 0 ? w.repeat(j) : "", v += A.align ? P + z + x : w === "0" ? P + x + z : x + P + z);
        }
      return v;
    }
    var o = /* @__PURE__ */ Object.create(null);
    function l(u) {
      if (o[u])
        return o[u];
      for (var c = u, f, y = [], z = 0; c; ) {
        if ((f = a.text.exec(c)) !== null)
          y.push(f[0]);
        else if ((f = a.modulo.exec(c)) !== null)
          y.push("%");
        else if ((f = a.placeholder.exec(c)) !== null) {
          if (f[2]) {
            z |= 1;
            var v = [], O = f[2], I = [];
            if ((I = a.key.exec(O)) !== null)
              for (v.push(I[1]); (O = O.substring(I[0].length)) !== ""; )
                if ((I = a.key_access.exec(O)) !== null)
                  v.push(I[1]);
                else if ((I = a.index_access.exec(O)) !== null)
                  v.push(I[1]);
                else
                  throw new SyntaxError("[sprintf] failed to parse named argument key");
            else
              throw new SyntaxError("[sprintf] failed to parse named argument key");
            f[2] = v;
          } else
            z |= 2;
          if (z === 3)
            throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
          y.push(
            {
              placeholder: f[0],
              param_no: f[1],
              keys: f[2],
              sign: f[3],
              pad_char: f[4],
              align: f[5],
              width: f[6],
              precision: f[7],
              type: f[8]
            }
          );
        } else
          throw new SyntaxError("[sprintf] unexpected placeholder");
        c = c.substring(f[0].length);
      }
      return o[u] = y;
    }
    e.sprintf = t, e.vsprintf = n, typeof window < "u" && (window.sprintf = t, window.vsprintf = n);
  })();
})(IR);
const iK = /* @__PURE__ */ c0(IR), oK = sK(console.error);
function lK(e, ...a) {
  try {
    return iK.sprintf(e, ...a);
  } catch (t) {
    return t instanceof Error && oK(`sprintf error: 

` + t.toString()), e;
  }
}
var Sk, CR, Wu, PR;
Sk = {
  "(": 9,
  "!": 8,
  "*": 7,
  "/": 7,
  "%": 7,
  "+": 6,
  "-": 6,
  "<": 5,
  "<=": 5,
  ">": 5,
  ">=": 5,
  "==": 4,
  "!=": 4,
  "&&": 3,
  "||": 2,
  "?": 1,
  "?:": 1
};
CR = ["(", "?"];
Wu = {
  ")": ["("],
  ":": ["?", "?:"]
};
PR = /<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/;
function dK(e) {
  for (var a = [], t = [], n, r, o, l; n = e.match(PR); ) {
    for (r = n[0], o = e.substr(0, n.index).trim(), o && a.push(o); l = t.pop(); ) {
      if (Wu[r]) {
        if (Wu[r][0] === l) {
          r = Wu[r][1] || r;
          break;
        }
      } else if (CR.indexOf(l) >= 0 || Sk[l] < Sk[r]) {
        t.push(l);
        break;
      }
      a.push(l);
    }
    Wu[r] || t.push(r), e = e.substr(n.index + r.length);
  }
  return e = e.trim(), e && a.push(e), a.concat(t.reverse());
}
var uK = {
  "!": function(e) {
    return !e;
  },
  "*": function(e, a) {
    return e * a;
  },
  "/": function(e, a) {
    return e / a;
  },
  "%": function(e, a) {
    return e % a;
  },
  "+": function(e, a) {
    return e + a;
  },
  "-": function(e, a) {
    return e - a;
  },
  "<": function(e, a) {
    return e < a;
  },
  "<=": function(e, a) {
    return e <= a;
  },
  ">": function(e, a) {
    return e > a;
  },
  ">=": function(e, a) {
    return e >= a;
  },
  "==": function(e, a) {
    return e === a;
  },
  "!=": function(e, a) {
    return e !== a;
  },
  "&&": function(e, a) {
    return e && a;
  },
  "||": function(e, a) {
    return e || a;
  },
  "?:": function(e, a, t) {
    if (e)
      throw a;
    return t;
  }
};
function cK(e, a) {
  var t = [], n, r, o, l, u, c;
  for (n = 0; n < e.length; n++) {
    if (u = e[n], l = uK[u], l) {
      for (r = l.length, o = Array(r); r--; )
        o[r] = t.pop();
      try {
        c = l.apply(null, o);
      } catch (f) {
        return f;
      }
    } else a.hasOwnProperty(u) ? c = a[u] : c = +u;
    t.push(c);
  }
  return t[0];
}
function pK(e) {
  var a = dK(e);
  return function(t) {
    return cK(a, t);
  };
}
function gK(e) {
  var a = pK(e);
  return function(t) {
    return +a({ n: t });
  };
}
var g2 = {
  contextDelimiter: "",
  onMissingKey: null
};
function mK(e) {
  var a, t, n;
  for (a = e.split(";"), t = 0; t < a.length; t++)
    if (n = a[t].trim(), n.indexOf("plural=") === 0)
      return n.substr(7);
}
function p0(e, a) {
  var t;
  this.data = e, this.pluralForms = {}, this.options = {};
  for (t in g2)
    this.options[t] = a !== void 0 && t in a ? a[t] : g2[t];
}
p0.prototype.getPluralForm = function(e, a) {
  var t = this.pluralForms[e], n, r, o;
  return t || (n = this.data[e][""], o = n["Plural-Forms"] || n["plural-forms"] || // Ignore reason: As known, there's no way to document the empty
  // string property on a key to guarantee this as metadata.
  // @ts-ignore
  n.plural_forms, typeof o != "function" && (r = mK(
    n["Plural-Forms"] || n["plural-forms"] || // Ignore reason: As known, there's no way to document the empty
    // string property on a key to guarantee this as metadata.
    // @ts-ignore
    n.plural_forms
  ), o = gK(r)), t = this.pluralForms[e] = o), t(a);
};
p0.prototype.dcnpgettext = function(e, a, t, n, r) {
  var o, l, u;
  return r === void 0 ? o = 0 : o = this.getPluralForm(e, r), l = t, a && (l = a + this.options.contextDelimiter + t), u = this.data[e][l], u && u[o] ? u[o] : (this.options.onMissingKey && this.options.onMissingKey(t, e), o === 0 ? t : n);
};
const m2 = {
  "": {
    /** @param {number} n */
    plural_forms(e) {
      return e === 1 ? 0 : 1;
    }
  }
}, fK = /^i18n\.(n?gettext|has_translation)(_|$)/, RR = (e, a, t) => {
  const n = new p0({}), r = /* @__PURE__ */ new Set(), o = () => {
    r.forEach((P) => P());
  }, l = (P) => (r.add(P), () => r.delete(P)), u = (P = "default") => n.data[P], c = (P, M = "default") => {
    var G;
    n.data[M] = {
      ...n.data[M],
      ...P
    }, n.data[M][""] = {
      ...m2[""],
      ...(G = n.data[M]) == null ? void 0 : G[""]
    }, delete n.pluralForms[M];
  }, f = (P, M) => {
    c(P, M), o();
  }, y = (P, M = "default") => {
    var G;
    n.data[M] = {
      ...n.data[M],
      ...P,
      // Populate default domain configuration (supported locale date which omits
      // a plural forms expression).
      "": {
        ...m2[""],
        ...(G = n.data[M]) == null ? void 0 : G[""],
        ...P == null ? void 0 : P[""]
      }
    }, delete n.pluralForms[M], o();
  }, z = (P, M) => {
    n.data = {}, n.pluralForms = {}, f(P, M);
  }, v = (P = "default", M, G, U, V) => (n.data[P] || c(void 0, P), n.dcnpgettext(P, M, G, U, V)), O = (P = "default") => P, I = (P, M) => {
    let G = v(M, void 0, P);
    return t ? (G = /** @type {string} */
    /** @type {*} */
    t.applyFilters("i18n.gettext", G, P, M), /** @type {string} */
    /** @type {*} */
    t.applyFilters("i18n.gettext_" + O(M), G, P, M)) : G;
  }, A = (P, M, G) => {
    let U = v(G, M, P);
    return t ? (U = /** @type {string} */
    /** @type {*} */
    t.applyFilters("i18n.gettext_with_context", U, P, M, G), /** @type {string} */
    /** @type {*} */
    t.applyFilters("i18n.gettext_with_context_" + O(G), U, P, M, G)) : U;
  }, x = (P, M, G, U) => {
    let V = v(U, void 0, P, M, G);
    return t ? (V = /** @type {string} */
    /** @type {*} */
    t.applyFilters("i18n.ngettext", V, P, M, G, U), /** @type {string} */
    /** @type {*} */
    t.applyFilters("i18n.ngettext_" + O(U), V, P, M, G, U)) : V;
  }, w = (P, M, G, U, V) => {
    let F = v(V, U, P, M, G);
    return t ? (F = /** @type {string} */
    /** @type {*} */
    t.applyFilters("i18n.ngettext_with_context", F, P, M, G, U, V), /** @type {string} */
    /** @type {*} */
    t.applyFilters("i18n.ngettext_with_context_" + O(V), F, P, M, G, U, V)) : F;
  }, j = () => A("ltr", "text direction") === "rtl", S = (P, M, G) => {
    var F, Y;
    const U = M ? M + "" + P : P;
    let V = !!((Y = (F = n.data) == null ? void 0 : F[G ?? "default"]) != null && Y[U]);
    return t && (V = /** @type { boolean } */
    /** @type {*} */
    t.applyFilters("i18n.has_translation", V, P, M, G), V = /** @type { boolean } */
    /** @type {*} */
    t.applyFilters("i18n.has_translation_" + O(G), V, P, M, G)), V;
  };
  if (e && f(e, a), t) {
    const P = (M) => {
      fK.test(M) && o();
    };
    t.addAction("hookAdded", "core/i18n", P), t.addAction("hookRemoved", "core/i18n", P);
  }
  return {
    getLocaleData: u,
    setLocaleData: f,
    addLocaleData: y,
    resetLocaleData: z,
    subscribe: l,
    __: I,
    _x: A,
    _n: x,
    _nx: w,
    isRTL: j,
    hasTranslation: S
  };
};
function DR(e) {
  return typeof e != "string" || e === "" ? (console.error("The namespace must be a non-empty string."), !1) : /^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e) ? !0 : (console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."), !1);
}
function g0(e) {
  return typeof e != "string" || e === "" ? (console.error("The hook name must be a non-empty string."), !1) : /^__/.test(e) ? (console.error("The hook name cannot begin with `__`."), !1) : /^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e) ? !0 : (console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."), !1);
}
function f2(e, a) {
  return function(n, r, o, l = 10) {
    const u = e[a];
    if (!g0(n) || !DR(r))
      return;
    if (typeof o != "function") {
      console.error("The hook callback must be a function.");
      return;
    }
    if (typeof l != "number") {
      console.error("If specified, the hook priority must be a number.");
      return;
    }
    const c = {
      callback: o,
      priority: l,
      namespace: r
    };
    if (u[n]) {
      const f = u[n].handlers;
      let y;
      for (y = f.length; y > 0 && !(l >= f[y - 1].priority); y--)
        ;
      y === f.length ? f[y] = c : f.splice(y, 0, c), u.__current.forEach((z) => {
        z.name === n && z.currentIndex >= y && z.currentIndex++;
      });
    } else
      u[n] = {
        handlers: [c],
        runs: 0
      };
    n !== "hookAdded" && e.doAction("hookAdded", n, r, o, l);
  };
}
function Tg(e, a, t = !1) {
  return function(r, o) {
    const l = e[a];
    if (!g0(r) || !t && !DR(o))
      return;
    if (!l[r])
      return 0;
    let u = 0;
    if (t)
      u = l[r].handlers.length, l[r] = {
        runs: l[r].runs,
        handlers: []
      };
    else {
      const c = l[r].handlers;
      for (let f = c.length - 1; f >= 0; f--)
        c[f].namespace === o && (c.splice(f, 1), u++, l.__current.forEach((y) => {
          y.name === r && y.currentIndex >= f && y.currentIndex--;
        }));
    }
    return r !== "hookRemoved" && e.doAction("hookRemoved", r, o), u;
  };
}
function h2(e, a) {
  return function(n, r) {
    const o = e[a];
    return typeof r < "u" ? n in o && o[n].handlers.some((l) => l.namespace === r) : n in o;
  };
}
function hK(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
var NR = { exports: {} }, Ka = NR.exports = {}, rs, ss;
function Ok() {
  throw new Error("setTimeout has not been defined");
}
function Ik() {
  throw new Error("clearTimeout has not been defined");
}
(function() {
  try {
    typeof setTimeout == "function" ? rs = setTimeout : rs = Ok;
  } catch {
    rs = Ok;
  }
  try {
    typeof clearTimeout == "function" ? ss = clearTimeout : ss = Ik;
  } catch {
    ss = Ik;
  }
})();
function LR(e) {
  if (rs === setTimeout)
    return setTimeout(e, 0);
  if ((rs === Ok || !rs) && setTimeout)
    return rs = setTimeout, setTimeout(e, 0);
  try {
    return rs(e, 0);
  } catch {
    try {
      return rs.call(null, e, 0);
    } catch {
      return rs.call(this, e, 0);
    }
  }
}
function yK(e) {
  if (ss === clearTimeout)
    return clearTimeout(e);
  if ((ss === Ik || !ss) && clearTimeout)
    return ss = clearTimeout, clearTimeout(e);
  try {
    return ss(e);
  } catch {
    try {
      return ss.call(null, e);
    } catch {
      return ss.call(this, e);
    }
  }
}
var Zs = [], Zl = !1, Lo, om = -1;
function zK() {
  !Zl || !Lo || (Zl = !1, Lo.length ? Zs = Lo.concat(Zs) : om = -1, Zs.length && MR());
}
function MR() {
  if (!Zl) {
    var e = LR(zK);
    Zl = !0;
    for (var a = Zs.length; a; ) {
      for (Lo = Zs, Zs = []; ++om < a; )
        Lo && Lo[om].run();
      om = -1, a = Zs.length;
    }
    Lo = null, Zl = !1, yK(e);
  }
}
Ka.nextTick = function(e) {
  var a = new Array(arguments.length - 1);
  if (arguments.length > 1)
    for (var t = 1; t < arguments.length; t++)
      a[t - 1] = arguments[t];
  Zs.push(new qR(e, a)), Zs.length === 1 && !Zl && LR(MR);
};
function qR(e, a) {
  this.fun = e, this.array = a;
}
qR.prototype.run = function() {
  this.fun.apply(null, this.array);
};
Ka.title = "browser";
Ka.browser = !0;
Ka.env = {};
Ka.argv = [];
Ka.version = "";
Ka.versions = {};
function ai() {
}
Ka.on = ai;
Ka.addListener = ai;
Ka.once = ai;
Ka.off = ai;
Ka.removeListener = ai;
Ka.removeAllListeners = ai;
Ka.emit = ai;
Ka.prependListener = ai;
Ka.prependOnceListener = ai;
Ka.listeners = function(e) {
  return [];
};
Ka.binding = function(e) {
  throw new Error("process.binding is not supported");
};
Ka.cwd = function() {
  return "/";
};
Ka.chdir = function(e) {
  throw new Error("process.chdir is not supported");
};
Ka.umask = function() {
  return 0;
};
var bK = NR.exports;
const wK = /* @__PURE__ */ hK(bK);
function $g(e, a, t, n) {
  return function(o, ...l) {
    const u = e[a];
    u[o] || (u[o] = {
      handlers: [],
      runs: 0
    }), u[o].runs++;
    const c = u[o].handlers;
    if (wK.env.NODE_ENV !== "production" && o !== "hookAdded" && u.all && c.push(...u.all.handlers), !c || !c.length)
      return t ? l[0] : void 0;
    const f = {
      name: o,
      currentIndex: 0
    };
    async function y() {
      try {
        u.__current.add(f);
        let v = t ? l[0] : void 0;
        for (; f.currentIndex < c.length; )
          v = await c[f.currentIndex].callback.apply(null, l), t && (l[0] = v), f.currentIndex++;
        return t ? v : void 0;
      } finally {
        u.__current.delete(f);
      }
    }
    function z() {
      try {
        u.__current.add(f);
        let v = t ? l[0] : void 0;
        for (; f.currentIndex < c.length; )
          v = c[f.currentIndex].callback.apply(null, l), t && (l[0] = v), f.currentIndex++;
        return t ? v : void 0;
      } finally {
        u.__current.delete(f);
      }
    }
    return (n ? y : z)();
  };
}
function y2(e, a) {
  return function() {
    var l;
    var n;
    const r = e[a];
    return (n = (l = Array.from(r.__current).at(-1)) == null ? void 0 : l.name) !== null && n !== void 0 ? n : null;
  };
}
function z2(e, a) {
  return function(n) {
    const r = e[a];
    return typeof n > "u" ? r.__current.size > 0 : Array.from(r.__current).some((o) => o.name === n);
  };
}
function b2(e, a) {
  return function(n) {
    const r = e[a];
    if (g0(n))
      return r[n] && r[n].runs ? r[n].runs : 0;
  };
}
class vK {
  constructor() {
    this.actions = /* @__PURE__ */ Object.create(null), this.actions.__current = /* @__PURE__ */ new Set(), this.filters = /* @__PURE__ */ Object.create(null), this.filters.__current = /* @__PURE__ */ new Set(), this.addAction = f2(this, "actions"), this.addFilter = f2(this, "filters"), this.removeAction = Tg(this, "actions"), this.removeFilter = Tg(this, "filters"), this.hasAction = h2(this, "actions"), this.hasFilter = h2(this, "filters"), this.removeAllActions = Tg(this, "actions", !0), this.removeAllFilters = Tg(this, "filters", !0), this.doAction = $g(this, "actions", !1, !1), this.doActionAsync = $g(this, "actions", !1, !0), this.applyFilters = $g(this, "filters", !0, !1), this.applyFiltersAsync = $g(this, "filters", !0, !0), this.currentAction = y2(this, "actions"), this.currentFilter = y2(this, "filters"), this.doingAction = z2(this, "actions"), this.doingFilter = z2(this, "filters"), this.didAction = b2(this, "actions"), this.didFilter = b2(this, "filters");
  }
}
function kK() {
  return new vK();
}
const FR = kK(), {
  addAction: qnt,
  addFilter: Fnt,
  removeAction: Bnt,
  removeFilter: Wnt,
  hasAction: Unt,
  hasFilter: Hnt,
  removeAllActions: Gnt,
  removeAllFilters: Vnt,
  doAction: Knt,
  doActionAsync: Ynt,
  applyFilters: Qnt,
  applyFiltersAsync: Xnt,
  currentAction: Znt,
  currentFilter: Jnt,
  doingAction: ert,
  doingFilter: art,
  didAction: trt,
  didFilter: nrt,
  actions: rrt,
  filters: srt
} = FR, Va = RR(void 0, void 0, FR), _K = Va.getLocaleData.bind(Va), EK = Va.setLocaleData.bind(Va), AK = Va.resetLocaleData.bind(Va), TK = Va.subscribe.bind(Va), $K = Va.__.bind(Va), jK = Va._x.bind(Va), xK = Va._n.bind(Va), SK = Va._nx.bind(Va), OK = Va.isRTL.bind(Va), IK = Va.hasTranslation.bind(Va), CK = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  __: $K,
  _n: xK,
  _nx: SK,
  _x: jK,
  createI18n: RR,
  defaultI18n: Va,
  getLocaleData: _K,
  hasTranslation: IK,
  isRTL: OK,
  resetLocaleData: AK,
  setLocaleData: EK,
  sprintf: lK,
  subscribe: TK
}, Symbol.toStringTag, { value: "Module" })), sa = /* @__PURE__ */ Nm(CK);
var bm = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
bm.exports;
(function(e, a) {
  (function() {
    var t, n = "4.17.21", r = 200, o = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", l = "Expected a function", u = "Invalid `variable` option passed into `_.template`", c = "__lodash_hash_undefined__", f = 500, y = "__lodash_placeholder__", z = 1, v = 2, O = 4, I = 1, A = 2, x = 1, w = 2, j = 4, S = 8, P = 16, M = 32, G = 64, U = 128, V = 256, F = 512, Y = 30, X = "...", D = 800, de = 16, ve = 1, we = 2, Pe = 3, me = 1 / 0, ta = 9007199254740991, Dn = 17976931348623157e292, ze = NaN, Ae = 4294967295, he = Ae - 1, ia = Ae >>> 1, je = [
      ["ary", U],
      ["bind", x],
      ["bindKey", w],
      ["curry", S],
      ["curryRight", P],
      ["flip", F],
      ["partial", M],
      ["partialRight", G],
      ["rearg", V]
    ], be = "[object Arguments]", ke = "[object Array]", $e = "[object AsyncFunction]", De = "[object Boolean]", ga = "[object Date]", va = "[object DOMException]", oa = "[object Error]", Wa = "[object Function]", Da = "[object GeneratorFunction]", za = "[object Map]", $t = "[object Number]", fi = "[object Null]", or = "[object Object]", Pp = "[object Promise]", Cb = "[object Proxy]", fo = "[object RegExp]", vn = "[object Set]", ja = "[object String]", Xa = "[object Symbol]", Rp = "[object Undefined]", hi = "[object WeakMap]", Dp = "[object WeakSet]", yi = "[object ArrayBuffer]", Ss = "[object DataView]", Hr = "[object Float32Array]", ho = "[object Float64Array]", vl = "[object Int8Array]", du = "[object Int16Array]", kl = "[object Int32Array]", Gr = "[object Uint8Array]", Os = "[object Uint8ClampedArray]", uu = "[object Uint16Array]", cu = "[object Uint32Array]", pu = /\b__p \+= '';/g, Pb = /\b(__p \+=) '' \+/g, Rb = /(__e\(.*?\)|\b__t\)) \+\n'';/g, gu = /&(?:amp|lt|gt|quot|#39);/g, yo = /[&<>"']/g, Nn = RegExp(gu.source), mu = RegExp(yo.source), Db = /<%-([\s\S]+?)%>/g, Vr = /<%([\s\S]+?)%>/g, Np = /<%=([\s\S]+?)%>/g, _ = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, m = /^\w*$/, h = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, C = /[\\^$.*+?()[\]{}|]/g, B = RegExp(C.source), Q = /^\s+/, re = /\s/, Be = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, xa = /\{\n\/\* \[wrapped with (.+)\] \*/, ka = /,? & /, Sa = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, ma = /[()=,{}\[\]\/\s]/, q5 = /\\(\\)?/g, F5 = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, Fj = /\w*$/, B5 = /^[-+]0x[0-9a-f]+$/i, W5 = /^0b[01]+$/i, U5 = /^\[object .+?Constructor\]$/, H5 = /^0o[0-7]+$/i, G5 = /^(?:0|[1-9]\d*)$/, V5 = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, Lp = /($^)/, K5 = /['\n\r\u2028\u2029\\]/g, Mp = "\\ud800-\\udfff", Y5 = "\\u0300-\\u036f", Q5 = "\\ufe20-\\ufe2f", X5 = "\\u20d0-\\u20ff", Bj = Y5 + Q5 + X5, Wj = "\\u2700-\\u27bf", Uj = "a-z\\xdf-\\xf6\\xf8-\\xff", Z5 = "\\xac\\xb1\\xd7\\xf7", J5 = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", eW = "\\u2000-\\u206f", aW = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", Hj = "A-Z\\xc0-\\xd6\\xd8-\\xde", Gj = "\\ufe0e\\ufe0f", Vj = Z5 + J5 + eW + aW, Nb = "['’]", tW = "[" + Mp + "]", Kj = "[" + Vj + "]", qp = "[" + Bj + "]", Yj = "\\d+", nW = "[" + Wj + "]", Qj = "[" + Uj + "]", Xj = "[^" + Mp + Vj + Yj + Wj + Uj + Hj + "]", Lb = "\\ud83c[\\udffb-\\udfff]", rW = "(?:" + qp + "|" + Lb + ")", Zj = "[^" + Mp + "]", Mb = "(?:\\ud83c[\\udde6-\\uddff]){2}", qb = "[\\ud800-\\udbff][\\udc00-\\udfff]", _l = "[" + Hj + "]", Jj = "\\u200d", ex = "(?:" + Qj + "|" + Xj + ")", sW = "(?:" + _l + "|" + Xj + ")", ax = "(?:" + Nb + "(?:d|ll|m|re|s|t|ve))?", tx = "(?:" + Nb + "(?:D|LL|M|RE|S|T|VE))?", nx = rW + "?", rx = "[" + Gj + "]?", iW = "(?:" + Jj + "(?:" + [Zj, Mb, qb].join("|") + ")" + rx + nx + ")*", oW = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", lW = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", sx = rx + nx + iW, dW = "(?:" + [nW, Mb, qb].join("|") + ")" + sx, uW = "(?:" + [Zj + qp + "?", qp, Mb, qb, tW].join("|") + ")", cW = RegExp(Nb, "g"), pW = RegExp(qp, "g"), Fb = RegExp(Lb + "(?=" + Lb + ")|" + uW + sx, "g"), gW = RegExp([
      _l + "?" + Qj + "+" + ax + "(?=" + [Kj, _l, "$"].join("|") + ")",
      sW + "+" + tx + "(?=" + [Kj, _l + ex, "$"].join("|") + ")",
      _l + "?" + ex + "+" + ax,
      _l + "+" + tx,
      lW,
      oW,
      Yj,
      dW
    ].join("|"), "g"), mW = RegExp("[" + Jj + Mp + Bj + Gj + "]"), fW = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, hW = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ], yW = -1, Aa = {};
    Aa[Hr] = Aa[ho] = Aa[vl] = Aa[du] = Aa[kl] = Aa[Gr] = Aa[Os] = Aa[uu] = Aa[cu] = !0, Aa[be] = Aa[ke] = Aa[yi] = Aa[De] = Aa[Ss] = Aa[ga] = Aa[oa] = Aa[Wa] = Aa[za] = Aa[$t] = Aa[or] = Aa[fo] = Aa[vn] = Aa[ja] = Aa[hi] = !1;
    var _a = {};
    _a[be] = _a[ke] = _a[yi] = _a[Ss] = _a[De] = _a[ga] = _a[Hr] = _a[ho] = _a[vl] = _a[du] = _a[kl] = _a[za] = _a[$t] = _a[or] = _a[fo] = _a[vn] = _a[ja] = _a[Xa] = _a[Gr] = _a[Os] = _a[uu] = _a[cu] = !0, _a[oa] = _a[Wa] = _a[hi] = !1;
    var zW = {
      // Latin-1 Supplement block.
      À: "A",
      Á: "A",
      Â: "A",
      Ã: "A",
      Ä: "A",
      Å: "A",
      à: "a",
      á: "a",
      â: "a",
      ã: "a",
      ä: "a",
      å: "a",
      Ç: "C",
      ç: "c",
      Ð: "D",
      ð: "d",
      È: "E",
      É: "E",
      Ê: "E",
      Ë: "E",
      è: "e",
      é: "e",
      ê: "e",
      ë: "e",
      Ì: "I",
      Í: "I",
      Î: "I",
      Ï: "I",
      ì: "i",
      í: "i",
      î: "i",
      ï: "i",
      Ñ: "N",
      ñ: "n",
      Ò: "O",
      Ó: "O",
      Ô: "O",
      Õ: "O",
      Ö: "O",
      Ø: "O",
      ò: "o",
      ó: "o",
      ô: "o",
      õ: "o",
      ö: "o",
      ø: "o",
      Ù: "U",
      Ú: "U",
      Û: "U",
      Ü: "U",
      ù: "u",
      ú: "u",
      û: "u",
      ü: "u",
      Ý: "Y",
      ý: "y",
      ÿ: "y",
      Æ: "Ae",
      æ: "ae",
      Þ: "Th",
      þ: "th",
      ß: "ss",
      // Latin Extended-A block.
      Ā: "A",
      Ă: "A",
      Ą: "A",
      ā: "a",
      ă: "a",
      ą: "a",
      Ć: "C",
      Ĉ: "C",
      Ċ: "C",
      Č: "C",
      ć: "c",
      ĉ: "c",
      ċ: "c",
      č: "c",
      Ď: "D",
      Đ: "D",
      ď: "d",
      đ: "d",
      Ē: "E",
      Ĕ: "E",
      Ė: "E",
      Ę: "E",
      Ě: "E",
      ē: "e",
      ĕ: "e",
      ė: "e",
      ę: "e",
      ě: "e",
      Ĝ: "G",
      Ğ: "G",
      Ġ: "G",
      Ģ: "G",
      ĝ: "g",
      ğ: "g",
      ġ: "g",
      ģ: "g",
      Ĥ: "H",
      Ħ: "H",
      ĥ: "h",
      ħ: "h",
      Ĩ: "I",
      Ī: "I",
      Ĭ: "I",
      Į: "I",
      İ: "I",
      ĩ: "i",
      ī: "i",
      ĭ: "i",
      į: "i",
      ı: "i",
      Ĵ: "J",
      ĵ: "j",
      Ķ: "K",
      ķ: "k",
      ĸ: "k",
      Ĺ: "L",
      Ļ: "L",
      Ľ: "L",
      Ŀ: "L",
      Ł: "L",
      ĺ: "l",
      ļ: "l",
      ľ: "l",
      ŀ: "l",
      ł: "l",
      Ń: "N",
      Ņ: "N",
      Ň: "N",
      Ŋ: "N",
      ń: "n",
      ņ: "n",
      ň: "n",
      ŋ: "n",
      Ō: "O",
      Ŏ: "O",
      Ő: "O",
      ō: "o",
      ŏ: "o",
      ő: "o",
      Ŕ: "R",
      Ŗ: "R",
      Ř: "R",
      ŕ: "r",
      ŗ: "r",
      ř: "r",
      Ś: "S",
      Ŝ: "S",
      Ş: "S",
      Š: "S",
      ś: "s",
      ŝ: "s",
      ş: "s",
      š: "s",
      Ţ: "T",
      Ť: "T",
      Ŧ: "T",
      ţ: "t",
      ť: "t",
      ŧ: "t",
      Ũ: "U",
      Ū: "U",
      Ŭ: "U",
      Ů: "U",
      Ű: "U",
      Ų: "U",
      ũ: "u",
      ū: "u",
      ŭ: "u",
      ů: "u",
      ű: "u",
      ų: "u",
      Ŵ: "W",
      ŵ: "w",
      Ŷ: "Y",
      ŷ: "y",
      Ÿ: "Y",
      Ź: "Z",
      Ż: "Z",
      Ž: "Z",
      ź: "z",
      ż: "z",
      ž: "z",
      Ĳ: "IJ",
      ĳ: "ij",
      Œ: "Oe",
      œ: "oe",
      ŉ: "'n",
      ſ: "s"
    }, bW = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    }, wW = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    }, vW = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    }, kW = parseFloat, _W = parseInt, ix = typeof dt == "object" && dt && dt.Object === Object && dt, EW = typeof self == "object" && self && self.Object === Object && self, ht = ix || EW || Function("return this")(), Bb = a && !a.nodeType && a, zo = Bb && !0 && e && !e.nodeType && e, ox = zo && zo.exports === Bb, Wb = ox && ix.process, Ln = function() {
      try {
        var W = zo && zo.require && zo.require("util").types;
        return W || Wb && Wb.binding && Wb.binding("util");
      } catch {
      }
    }(), lx = Ln && Ln.isArrayBuffer, dx = Ln && Ln.isDate, ux = Ln && Ln.isMap, cx = Ln && Ln.isRegExp, px = Ln && Ln.isSet, gx = Ln && Ln.isTypedArray;
    function kn(W, te, Z) {
      switch (Z.length) {
        case 0:
          return W.call(te);
        case 1:
          return W.call(te, Z[0]);
        case 2:
          return W.call(te, Z[0], Z[1]);
        case 3:
          return W.call(te, Z[0], Z[1], Z[2]);
      }
      return W.apply(te, Z);
    }
    function AW(W, te, Z, _e) {
      for (var Ne = -1, la = W == null ? 0 : W.length; ++Ne < la; ) {
        var Za = W[Ne];
        te(_e, Za, Z(Za), W);
      }
      return _e;
    }
    function Mn(W, te) {
      for (var Z = -1, _e = W == null ? 0 : W.length; ++Z < _e && te(W[Z], Z, W) !== !1; )
        ;
      return W;
    }
    function TW(W, te) {
      for (var Z = W == null ? 0 : W.length; Z-- && te(W[Z], Z, W) !== !1; )
        ;
      return W;
    }
    function mx(W, te) {
      for (var Z = -1, _e = W == null ? 0 : W.length; ++Z < _e; )
        if (!te(W[Z], Z, W))
          return !1;
      return !0;
    }
    function zi(W, te) {
      for (var Z = -1, _e = W == null ? 0 : W.length, Ne = 0, la = []; ++Z < _e; ) {
        var Za = W[Z];
        te(Za, Z, W) && (la[Ne++] = Za);
      }
      return la;
    }
    function Fp(W, te) {
      var Z = W == null ? 0 : W.length;
      return !!Z && El(W, te, 0) > -1;
    }
    function Ub(W, te, Z) {
      for (var _e = -1, Ne = W == null ? 0 : W.length; ++_e < Ne; )
        if (Z(te, W[_e]))
          return !0;
      return !1;
    }
    function Oa(W, te) {
      for (var Z = -1, _e = W == null ? 0 : W.length, Ne = Array(_e); ++Z < _e; )
        Ne[Z] = te(W[Z], Z, W);
      return Ne;
    }
    function bi(W, te) {
      for (var Z = -1, _e = te.length, Ne = W.length; ++Z < _e; )
        W[Ne + Z] = te[Z];
      return W;
    }
    function Hb(W, te, Z, _e) {
      var Ne = -1, la = W == null ? 0 : W.length;
      for (_e && la && (Z = W[++Ne]); ++Ne < la; )
        Z = te(Z, W[Ne], Ne, W);
      return Z;
    }
    function $W(W, te, Z, _e) {
      var Ne = W == null ? 0 : W.length;
      for (_e && Ne && (Z = W[--Ne]); Ne--; )
        Z = te(Z, W[Ne], Ne, W);
      return Z;
    }
    function Gb(W, te) {
      for (var Z = -1, _e = W == null ? 0 : W.length; ++Z < _e; )
        if (te(W[Z], Z, W))
          return !0;
      return !1;
    }
    var jW = Vb("length");
    function xW(W) {
      return W.split("");
    }
    function SW(W) {
      return W.match(Sa) || [];
    }
    function fx(W, te, Z) {
      var _e;
      return Z(W, function(Ne, la, Za) {
        if (te(Ne, la, Za))
          return _e = la, !1;
      }), _e;
    }
    function Bp(W, te, Z, _e) {
      for (var Ne = W.length, la = Z + (_e ? 1 : -1); _e ? la-- : ++la < Ne; )
        if (te(W[la], la, W))
          return la;
      return -1;
    }
    function El(W, te, Z) {
      return te === te ? BW(W, te, Z) : Bp(W, hx, Z);
    }
    function OW(W, te, Z, _e) {
      for (var Ne = Z - 1, la = W.length; ++Ne < la; )
        if (_e(W[Ne], te))
          return Ne;
      return -1;
    }
    function hx(W) {
      return W !== W;
    }
    function yx(W, te) {
      var Z = W == null ? 0 : W.length;
      return Z ? Yb(W, te) / Z : ze;
    }
    function Vb(W) {
      return function(te) {
        return te == null ? t : te[W];
      };
    }
    function Kb(W) {
      return function(te) {
        return W == null ? t : W[te];
      };
    }
    function zx(W, te, Z, _e, Ne) {
      return Ne(W, function(la, Za, ba) {
        Z = _e ? (_e = !1, la) : te(Z, la, Za, ba);
      }), Z;
    }
    function IW(W, te) {
      var Z = W.length;
      for (W.sort(te); Z--; )
        W[Z] = W[Z].value;
      return W;
    }
    function Yb(W, te) {
      for (var Z, _e = -1, Ne = W.length; ++_e < Ne; ) {
        var la = te(W[_e]);
        la !== t && (Z = Z === t ? la : Z + la);
      }
      return Z;
    }
    function Qb(W, te) {
      for (var Z = -1, _e = Array(W); ++Z < W; )
        _e[Z] = te(Z);
      return _e;
    }
    function CW(W, te) {
      return Oa(te, function(Z) {
        return [Z, W[Z]];
      });
    }
    function bx(W) {
      return W && W.slice(0, _x(W) + 1).replace(Q, "");
    }
    function _n(W) {
      return function(te) {
        return W(te);
      };
    }
    function Xb(W, te) {
      return Oa(te, function(Z) {
        return W[Z];
      });
    }
    function fu(W, te) {
      return W.has(te);
    }
    function wx(W, te) {
      for (var Z = -1, _e = W.length; ++Z < _e && El(te, W[Z], 0) > -1; )
        ;
      return Z;
    }
    function vx(W, te) {
      for (var Z = W.length; Z-- && El(te, W[Z], 0) > -1; )
        ;
      return Z;
    }
    function PW(W, te) {
      for (var Z = W.length, _e = 0; Z--; )
        W[Z] === te && ++_e;
      return _e;
    }
    var RW = Kb(zW), DW = Kb(bW);
    function NW(W) {
      return "\\" + vW[W];
    }
    function LW(W, te) {
      return W == null ? t : W[te];
    }
    function Al(W) {
      return mW.test(W);
    }
    function MW(W) {
      return fW.test(W);
    }
    function qW(W) {
      for (var te, Z = []; !(te = W.next()).done; )
        Z.push(te.value);
      return Z;
    }
    function Zb(W) {
      var te = -1, Z = Array(W.size);
      return W.forEach(function(_e, Ne) {
        Z[++te] = [Ne, _e];
      }), Z;
    }
    function kx(W, te) {
      return function(Z) {
        return W(te(Z));
      };
    }
    function wi(W, te) {
      for (var Z = -1, _e = W.length, Ne = 0, la = []; ++Z < _e; ) {
        var Za = W[Z];
        (Za === te || Za === y) && (W[Z] = y, la[Ne++] = Z);
      }
      return la;
    }
    function Wp(W) {
      var te = -1, Z = Array(W.size);
      return W.forEach(function(_e) {
        Z[++te] = _e;
      }), Z;
    }
    function FW(W) {
      var te = -1, Z = Array(W.size);
      return W.forEach(function(_e) {
        Z[++te] = [_e, _e];
      }), Z;
    }
    function BW(W, te, Z) {
      for (var _e = Z - 1, Ne = W.length; ++_e < Ne; )
        if (W[_e] === te)
          return _e;
      return -1;
    }
    function WW(W, te, Z) {
      for (var _e = Z + 1; _e--; )
        if (W[_e] === te)
          return _e;
      return _e;
    }
    function Tl(W) {
      return Al(W) ? HW(W) : jW(W);
    }
    function lr(W) {
      return Al(W) ? GW(W) : xW(W);
    }
    function _x(W) {
      for (var te = W.length; te-- && re.test(W.charAt(te)); )
        ;
      return te;
    }
    var UW = Kb(wW);
    function HW(W) {
      for (var te = Fb.lastIndex = 0; Fb.test(W); )
        ++te;
      return te;
    }
    function GW(W) {
      return W.match(Fb) || [];
    }
    function VW(W) {
      return W.match(gW) || [];
    }
    var KW = function W(te) {
      te = te == null ? ht : $l.defaults(ht.Object(), te, $l.pick(ht, hW));
      var Z = te.Array, _e = te.Date, Ne = te.Error, la = te.Function, Za = te.Math, ba = te.Object, Jb = te.RegExp, YW = te.String, qn = te.TypeError, Up = Z.prototype, QW = la.prototype, jl = ba.prototype, Hp = te["__core-js_shared__"], Gp = QW.toString, fa = jl.hasOwnProperty, XW = 0, Ex = function() {
        var s = /[^.]+$/.exec(Hp && Hp.keys && Hp.keys.IE_PROTO || "");
        return s ? "Symbol(src)_1." + s : "";
      }(), Vp = jl.toString, ZW = Gp.call(ba), JW = ht._, eU = Jb(
        "^" + Gp.call(fa).replace(C, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      ), Kp = ox ? te.Buffer : t, vi = te.Symbol, Yp = te.Uint8Array, Ax = Kp ? Kp.allocUnsafe : t, Qp = kx(ba.getPrototypeOf, ba), Tx = ba.create, $x = jl.propertyIsEnumerable, Xp = Up.splice, jx = vi ? vi.isConcatSpreadable : t, hu = vi ? vi.iterator : t, bo = vi ? vi.toStringTag : t, Zp = function() {
        try {
          var s = Eo(ba, "defineProperty");
          return s({}, "", {}), s;
        } catch {
        }
      }(), aU = te.clearTimeout !== ht.clearTimeout && te.clearTimeout, tU = _e && _e.now !== ht.Date.now && _e.now, nU = te.setTimeout !== ht.setTimeout && te.setTimeout, Jp = Za.ceil, eg = Za.floor, ew = ba.getOwnPropertySymbols, rU = Kp ? Kp.isBuffer : t, xx = te.isFinite, sU = Up.join, iU = kx(ba.keys, ba), Ja = Za.max, jt = Za.min, oU = _e.now, lU = te.parseInt, Sx = Za.random, dU = Up.reverse, aw = Eo(te, "DataView"), yu = Eo(te, "Map"), tw = Eo(te, "Promise"), xl = Eo(te, "Set"), zu = Eo(te, "WeakMap"), bu = Eo(ba, "create"), ag = zu && new zu(), Sl = {}, uU = Ao(aw), cU = Ao(yu), pU = Ao(tw), gU = Ao(xl), mU = Ao(zu), tg = vi ? vi.prototype : t, wu = tg ? tg.valueOf : t, Ox = tg ? tg.toString : t;
      function E(s) {
        if (La(s) && !Le(s) && !(s instanceof Xe)) {
          if (s instanceof Fn)
            return s;
          if (fa.call(s, "__wrapped__"))
            return IS(s);
        }
        return new Fn(s);
      }
      var Ol = /* @__PURE__ */ function() {
        function s() {
        }
        return function(i) {
          if (!Na(i))
            return {};
          if (Tx)
            return Tx(i);
          s.prototype = i;
          var d = new s();
          return s.prototype = t, d;
        };
      }();
      function ng() {
      }
      function Fn(s, i) {
        this.__wrapped__ = s, this.__actions__ = [], this.__chain__ = !!i, this.__index__ = 0, this.__values__ = t;
      }
      E.templateSettings = {
        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        escape: Db,
        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        evaluate: Vr,
        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        interpolate: Np,
        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        variable: "",
        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        imports: {
          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          _: E
        }
      }, E.prototype = ng.prototype, E.prototype.constructor = E, Fn.prototype = Ol(ng.prototype), Fn.prototype.constructor = Fn;
      function Xe(s) {
        this.__wrapped__ = s, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = Ae, this.__views__ = [];
      }
      function fU() {
        var s = new Xe(this.__wrapped__);
        return s.__actions__ = rn(this.__actions__), s.__dir__ = this.__dir__, s.__filtered__ = this.__filtered__, s.__iteratees__ = rn(this.__iteratees__), s.__takeCount__ = this.__takeCount__, s.__views__ = rn(this.__views__), s;
      }
      function hU() {
        if (this.__filtered__) {
          var s = new Xe(this);
          s.__dir__ = -1, s.__filtered__ = !0;
        } else
          s = this.clone(), s.__dir__ *= -1;
        return s;
      }
      function yU() {
        var s = this.__wrapped__.value(), i = this.__dir__, d = Le(s), g = i < 0, b = d ? s.length : 0, $ = x9(0, b, this.__views__), N = $.start, q = $.end, H = q - N, se = g ? q : N - 1, ie = this.__iteratees__, le = ie.length, fe = 0, Ee = jt(H, this.__takeCount__);
        if (!d || !g && b == H && Ee == H)
          return aS(s, this.__actions__);
        var Se = [];
        n:
          for (; H-- && fe < Ee; ) {
            se += i;
            for (var Fe = -1, Oe = s[se]; ++Fe < le; ) {
              var Ge = ie[Fe], Je = Ge.iteratee, Tn = Ge.type, qt = Je(Oe);
              if (Tn == we)
                Oe = qt;
              else if (!qt) {
                if (Tn == ve)
                  continue n;
                break n;
              }
            }
            Se[fe++] = Oe;
          }
        return Se;
      }
      Xe.prototype = Ol(ng.prototype), Xe.prototype.constructor = Xe;
      function wo(s) {
        var i = -1, d = s == null ? 0 : s.length;
        for (this.clear(); ++i < d; ) {
          var g = s[i];
          this.set(g[0], g[1]);
        }
      }
      function zU() {
        this.__data__ = bu ? bu(null) : {}, this.size = 0;
      }
      function bU(s) {
        var i = this.has(s) && delete this.__data__[s];
        return this.size -= i ? 1 : 0, i;
      }
      function wU(s) {
        var i = this.__data__;
        if (bu) {
          var d = i[s];
          return d === c ? t : d;
        }
        return fa.call(i, s) ? i[s] : t;
      }
      function vU(s) {
        var i = this.__data__;
        return bu ? i[s] !== t : fa.call(i, s);
      }
      function kU(s, i) {
        var d = this.__data__;
        return this.size += this.has(s) ? 0 : 1, d[s] = bu && i === t ? c : i, this;
      }
      wo.prototype.clear = zU, wo.prototype.delete = bU, wo.prototype.get = wU, wo.prototype.has = vU, wo.prototype.set = kU;
      function Is(s) {
        var i = -1, d = s == null ? 0 : s.length;
        for (this.clear(); ++i < d; ) {
          var g = s[i];
          this.set(g[0], g[1]);
        }
      }
      function _U() {
        this.__data__ = [], this.size = 0;
      }
      function EU(s) {
        var i = this.__data__, d = rg(i, s);
        if (d < 0)
          return !1;
        var g = i.length - 1;
        return d == g ? i.pop() : Xp.call(i, d, 1), --this.size, !0;
      }
      function AU(s) {
        var i = this.__data__, d = rg(i, s);
        return d < 0 ? t : i[d][1];
      }
      function TU(s) {
        return rg(this.__data__, s) > -1;
      }
      function $U(s, i) {
        var d = this.__data__, g = rg(d, s);
        return g < 0 ? (++this.size, d.push([s, i])) : d[g][1] = i, this;
      }
      Is.prototype.clear = _U, Is.prototype.delete = EU, Is.prototype.get = AU, Is.prototype.has = TU, Is.prototype.set = $U;
      function Cs(s) {
        var i = -1, d = s == null ? 0 : s.length;
        for (this.clear(); ++i < d; ) {
          var g = s[i];
          this.set(g[0], g[1]);
        }
      }
      function jU() {
        this.size = 0, this.__data__ = {
          hash: new wo(),
          map: new (yu || Is)(),
          string: new wo()
        };
      }
      function xU(s) {
        var i = hg(this, s).delete(s);
        return this.size -= i ? 1 : 0, i;
      }
      function SU(s) {
        return hg(this, s).get(s);
      }
      function OU(s) {
        return hg(this, s).has(s);
      }
      function IU(s, i) {
        var d = hg(this, s), g = d.size;
        return d.set(s, i), this.size += d.size == g ? 0 : 1, this;
      }
      Cs.prototype.clear = jU, Cs.prototype.delete = xU, Cs.prototype.get = SU, Cs.prototype.has = OU, Cs.prototype.set = IU;
      function vo(s) {
        var i = -1, d = s == null ? 0 : s.length;
        for (this.__data__ = new Cs(); ++i < d; )
          this.add(s[i]);
      }
      function CU(s) {
        return this.__data__.set(s, c), this;
      }
      function PU(s) {
        return this.__data__.has(s);
      }
      vo.prototype.add = vo.prototype.push = CU, vo.prototype.has = PU;
      function dr(s) {
        var i = this.__data__ = new Is(s);
        this.size = i.size;
      }
      function RU() {
        this.__data__ = new Is(), this.size = 0;
      }
      function DU(s) {
        var i = this.__data__, d = i.delete(s);
        return this.size = i.size, d;
      }
      function NU(s) {
        return this.__data__.get(s);
      }
      function LU(s) {
        return this.__data__.has(s);
      }
      function MU(s, i) {
        var d = this.__data__;
        if (d instanceof Is) {
          var g = d.__data__;
          if (!yu || g.length < r - 1)
            return g.push([s, i]), this.size = ++d.size, this;
          d = this.__data__ = new Cs(g);
        }
        return d.set(s, i), this.size = d.size, this;
      }
      dr.prototype.clear = RU, dr.prototype.delete = DU, dr.prototype.get = NU, dr.prototype.has = LU, dr.prototype.set = MU;
      function Ix(s, i) {
        var d = Le(s), g = !d && To(s), b = !d && !g && Ti(s), $ = !d && !g && !b && Rl(s), N = d || g || b || $, q = N ? Qb(s.length, YW) : [], H = q.length;
        for (var se in s)
          (i || fa.call(s, se)) && !(N && // Safari 9 has enumerable `arguments.length` in strict mode.
          (se == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          b && (se == "offset" || se == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          $ && (se == "buffer" || se == "byteLength" || se == "byteOffset") || // Skip index properties.
          Ns(se, H))) && q.push(se);
        return q;
      }
      function Cx(s) {
        var i = s.length;
        return i ? s[gw(0, i - 1)] : t;
      }
      function qU(s, i) {
        return yg(rn(s), ko(i, 0, s.length));
      }
      function FU(s) {
        return yg(rn(s));
      }
      function nw(s, i, d) {
        (d !== t && !ur(s[i], d) || d === t && !(i in s)) && Ps(s, i, d);
      }
      function vu(s, i, d) {
        var g = s[i];
        (!(fa.call(s, i) && ur(g, d)) || d === t && !(i in s)) && Ps(s, i, d);
      }
      function rg(s, i) {
        for (var d = s.length; d--; )
          if (ur(s[d][0], i))
            return d;
        return -1;
      }
      function BU(s, i, d, g) {
        return ki(s, function(b, $, N) {
          i(g, b, d(b), N);
        }), g;
      }
      function Px(s, i) {
        return s && Yr(i, it(i), s);
      }
      function WU(s, i) {
        return s && Yr(i, on(i), s);
      }
      function Ps(s, i, d) {
        i == "__proto__" && Zp ? Zp(s, i, {
          configurable: !0,
          enumerable: !0,
          value: d,
          writable: !0
        }) : s[i] = d;
      }
      function rw(s, i) {
        for (var d = -1, g = i.length, b = Z(g), $ = s == null; ++d < g; )
          b[d] = $ ? t : Lw(s, i[d]);
        return b;
      }
      function ko(s, i, d) {
        return s === s && (d !== t && (s = s <= d ? s : d), i !== t && (s = s >= i ? s : i)), s;
      }
      function Bn(s, i, d, g, b, $) {
        var N, q = i & z, H = i & v, se = i & O;
        if (d && (N = b ? d(s, g, b, $) : d(s)), N !== t)
          return N;
        if (!Na(s))
          return s;
        var ie = Le(s);
        if (ie) {
          if (N = O9(s), !q)
            return rn(s, N);
        } else {
          var le = xt(s), fe = le == Wa || le == Da;
          if (Ti(s))
            return rS(s, q);
          if (le == or || le == be || fe && !b) {
            if (N = H || fe ? {} : _S(s), !q)
              return H ? w9(s, WU(N, s)) : b9(s, Px(N, s));
          } else {
            if (!_a[le])
              return b ? s : {};
            N = I9(s, le, q);
          }
        }
        $ || ($ = new dr());
        var Ee = $.get(s);
        if (Ee)
          return Ee;
        $.set(s, N), ZS(s) ? s.forEach(function(Oe) {
          N.add(Bn(Oe, i, d, Oe, s, $));
        }) : QS(s) && s.forEach(function(Oe, Ge) {
          N.set(Ge, Bn(Oe, i, d, Ge, s, $));
        });
        var Se = se ? H ? Ew : _w : H ? on : it, Fe = ie ? t : Se(s);
        return Mn(Fe || s, function(Oe, Ge) {
          Fe && (Ge = Oe, Oe = s[Ge]), vu(N, Ge, Bn(Oe, i, d, Ge, s, $));
        }), N;
      }
      function UU(s) {
        var i = it(s);
        return function(d) {
          return Rx(d, s, i);
        };
      }
      function Rx(s, i, d) {
        var g = d.length;
        if (s == null)
          return !g;
        for (s = ba(s); g--; ) {
          var b = d[g], $ = i[b], N = s[b];
          if (N === t && !(b in s) || !$(N))
            return !1;
        }
        return !0;
      }
      function Dx(s, i, d) {
        if (typeof s != "function")
          throw new qn(l);
        return ju(function() {
          s.apply(t, d);
        }, i);
      }
      function ku(s, i, d, g) {
        var b = -1, $ = Fp, N = !0, q = s.length, H = [], se = i.length;
        if (!q)
          return H;
        d && (i = Oa(i, _n(d))), g ? ($ = Ub, N = !1) : i.length >= r && ($ = fu, N = !1, i = new vo(i));
        n:
          for (; ++b < q; ) {
            var ie = s[b], le = d == null ? ie : d(ie);
            if (ie = g || ie !== 0 ? ie : 0, N && le === le) {
              for (var fe = se; fe--; )
                if (i[fe] === le)
                  continue n;
              H.push(ie);
            } else $(i, le, g) || H.push(ie);
          }
        return H;
      }
      var ki = dS(Kr), Nx = dS(iw, !0);
      function HU(s, i) {
        var d = !0;
        return ki(s, function(g, b, $) {
          return d = !!i(g, b, $), d;
        }), d;
      }
      function sg(s, i, d) {
        for (var g = -1, b = s.length; ++g < b; ) {
          var $ = s[g], N = i($);
          if (N != null && (q === t ? N === N && !An(N) : d(N, q)))
            var q = N, H = $;
        }
        return H;
      }
      function GU(s, i, d, g) {
        var b = s.length;
        for (d = Me(d), d < 0 && (d = -d > b ? 0 : b + d), g = g === t || g > b ? b : Me(g), g < 0 && (g += b), g = d > g ? 0 : e2(g); d < g; )
          s[d++] = i;
        return s;
      }
      function Lx(s, i) {
        var d = [];
        return ki(s, function(g, b, $) {
          i(g, b, $) && d.push(g);
        }), d;
      }
      function yt(s, i, d, g, b) {
        var $ = -1, N = s.length;
        for (d || (d = P9), b || (b = []); ++$ < N; ) {
          var q = s[$];
          i > 0 && d(q) ? i > 1 ? yt(q, i - 1, d, g, b) : bi(b, q) : g || (b[b.length] = q);
        }
        return b;
      }
      var sw = uS(), Mx = uS(!0);
      function Kr(s, i) {
        return s && sw(s, i, it);
      }
      function iw(s, i) {
        return s && Mx(s, i, it);
      }
      function ig(s, i) {
        return zi(i, function(d) {
          return Ls(s[d]);
        });
      }
      function _o(s, i) {
        i = Ei(i, s);
        for (var d = 0, g = i.length; s != null && d < g; )
          s = s[Qr(i[d++])];
        return d && d == g ? s : t;
      }
      function qx(s, i, d) {
        var g = i(s);
        return Le(s) ? g : bi(g, d(s));
      }
      function Lt(s) {
        return s == null ? s === t ? Rp : fi : bo && bo in ba(s) ? j9(s) : F9(s);
      }
      function ow(s, i) {
        return s > i;
      }
      function VU(s, i) {
        return s != null && fa.call(s, i);
      }
      function KU(s, i) {
        return s != null && i in ba(s);
      }
      function YU(s, i, d) {
        return s >= jt(i, d) && s < Ja(i, d);
      }
      function lw(s, i, d) {
        for (var g = d ? Ub : Fp, b = s[0].length, $ = s.length, N = $, q = Z($), H = 1 / 0, se = []; N--; ) {
          var ie = s[N];
          N && i && (ie = Oa(ie, _n(i))), H = jt(ie.length, H), q[N] = !d && (i || b >= 120 && ie.length >= 120) ? new vo(N && ie) : t;
        }
        ie = s[0];
        var le = -1, fe = q[0];
        n:
          for (; ++le < b && se.length < H; ) {
            var Ee = ie[le], Se = i ? i(Ee) : Ee;
            if (Ee = d || Ee !== 0 ? Ee : 0, !(fe ? fu(fe, Se) : g(se, Se, d))) {
              for (N = $; --N; ) {
                var Fe = q[N];
                if (!(Fe ? fu(Fe, Se) : g(s[N], Se, d)))
                  continue n;
              }
              fe && fe.push(Se), se.push(Ee);
            }
          }
        return se;
      }
      function QU(s, i, d, g) {
        return Kr(s, function(b, $, N) {
          i(g, d(b), $, N);
        }), g;
      }
      function _u(s, i, d) {
        i = Ei(i, s), s = $S(s, i);
        var g = s == null ? s : s[Qr(Un(i))];
        return g == null ? t : kn(g, s, d);
      }
      function Fx(s) {
        return La(s) && Lt(s) == be;
      }
      function XU(s) {
        return La(s) && Lt(s) == yi;
      }
      function ZU(s) {
        return La(s) && Lt(s) == ga;
      }
      function Eu(s, i, d, g, b) {
        return s === i ? !0 : s == null || i == null || !La(s) && !La(i) ? s !== s && i !== i : JU(s, i, d, g, Eu, b);
      }
      function JU(s, i, d, g, b, $) {
        var N = Le(s), q = Le(i), H = N ? ke : xt(s), se = q ? ke : xt(i);
        H = H == be ? or : H, se = se == be ? or : se;
        var ie = H == or, le = se == or, fe = H == se;
        if (fe && Ti(s)) {
          if (!Ti(i))
            return !1;
          N = !0, ie = !1;
        }
        if (fe && !ie)
          return $ || ($ = new dr()), N || Rl(s) ? wS(s, i, d, g, b, $) : T9(s, i, H, d, g, b, $);
        if (!(d & I)) {
          var Ee = ie && fa.call(s, "__wrapped__"), Se = le && fa.call(i, "__wrapped__");
          if (Ee || Se) {
            var Fe = Ee ? s.value() : s, Oe = Se ? i.value() : i;
            return $ || ($ = new dr()), b(Fe, Oe, d, g, $);
          }
        }
        return fe ? ($ || ($ = new dr()), $9(s, i, d, g, b, $)) : !1;
      }
      function e9(s) {
        return La(s) && xt(s) == za;
      }
      function dw(s, i, d, g) {
        var b = d.length, $ = b, N = !g;
        if (s == null)
          return !$;
        for (s = ba(s); b--; ) {
          var q = d[b];
          if (N && q[2] ? q[1] !== s[q[0]] : !(q[0] in s))
            return !1;
        }
        for (; ++b < $; ) {
          q = d[b];
          var H = q[0], se = s[H], ie = q[1];
          if (N && q[2]) {
            if (se === t && !(H in s))
              return !1;
          } else {
            var le = new dr();
            if (g)
              var fe = g(se, ie, H, s, i, le);
            if (!(fe === t ? Eu(ie, se, I | A, g, le) : fe))
              return !1;
          }
        }
        return !0;
      }
      function Bx(s) {
        if (!Na(s) || D9(s))
          return !1;
        var i = Ls(s) ? eU : U5;
        return i.test(Ao(s));
      }
      function a9(s) {
        return La(s) && Lt(s) == fo;
      }
      function t9(s) {
        return La(s) && xt(s) == vn;
      }
      function n9(s) {
        return La(s) && _g(s.length) && !!Aa[Lt(s)];
      }
      function Wx(s) {
        return typeof s == "function" ? s : s == null ? ln : typeof s == "object" ? Le(s) ? Gx(s[0], s[1]) : Hx(s) : c2(s);
      }
      function uw(s) {
        if (!$u(s))
          return iU(s);
        var i = [];
        for (var d in ba(s))
          fa.call(s, d) && d != "constructor" && i.push(d);
        return i;
      }
      function r9(s) {
        if (!Na(s))
          return q9(s);
        var i = $u(s), d = [];
        for (var g in s)
          g == "constructor" && (i || !fa.call(s, g)) || d.push(g);
        return d;
      }
      function cw(s, i) {
        return s < i;
      }
      function Ux(s, i) {
        var d = -1, g = sn(s) ? Z(s.length) : [];
        return ki(s, function(b, $, N) {
          g[++d] = i(b, $, N);
        }), g;
      }
      function Hx(s) {
        var i = Tw(s);
        return i.length == 1 && i[0][2] ? AS(i[0][0], i[0][1]) : function(d) {
          return d === s || dw(d, s, i);
        };
      }
      function Gx(s, i) {
        return jw(s) && ES(i) ? AS(Qr(s), i) : function(d) {
          var g = Lw(d, s);
          return g === t && g === i ? Mw(d, s) : Eu(i, g, I | A);
        };
      }
      function og(s, i, d, g, b) {
        s !== i && sw(i, function($, N) {
          if (b || (b = new dr()), Na($))
            s9(s, i, N, d, og, g, b);
          else {
            var q = g ? g(Sw(s, N), $, N + "", s, i, b) : t;
            q === t && (q = $), nw(s, N, q);
          }
        }, on);
      }
      function s9(s, i, d, g, b, $, N) {
        var q = Sw(s, d), H = Sw(i, d), se = N.get(H);
        if (se) {
          nw(s, d, se);
          return;
        }
        var ie = $ ? $(q, H, d + "", s, i, N) : t, le = ie === t;
        if (le) {
          var fe = Le(H), Ee = !fe && Ti(H), Se = !fe && !Ee && Rl(H);
          ie = H, fe || Ee || Se ? Le(q) ? ie = q : Ua(q) ? ie = rn(q) : Ee ? (le = !1, ie = rS(H, !0)) : Se ? (le = !1, ie = sS(H, !0)) : ie = [] : xu(H) || To(H) ? (ie = q, To(q) ? ie = a2(q) : (!Na(q) || Ls(q)) && (ie = _S(H))) : le = !1;
        }
        le && (N.set(H, ie), b(ie, H, g, $, N), N.delete(H)), nw(s, d, ie);
      }
      function Vx(s, i) {
        var d = s.length;
        if (d)
          return i += i < 0 ? d : 0, Ns(i, d) ? s[i] : t;
      }
      function Kx(s, i, d) {
        i.length ? i = Oa(i, function($) {
          return Le($) ? function(N) {
            return _o(N, $.length === 1 ? $[0] : $);
          } : $;
        }) : i = [ln];
        var g = -1;
        i = Oa(i, _n(xe()));
        var b = Ux(s, function($, N, q) {
          var H = Oa(i, function(se) {
            return se($);
          });
          return { criteria: H, index: ++g, value: $ };
        });
        return IW(b, function($, N) {
          return z9($, N, d);
        });
      }
      function i9(s, i) {
        return Yx(s, i, function(d, g) {
          return Mw(s, g);
        });
      }
      function Yx(s, i, d) {
        for (var g = -1, b = i.length, $ = {}; ++g < b; ) {
          var N = i[g], q = _o(s, N);
          d(q, N) && Au($, Ei(N, s), q);
        }
        return $;
      }
      function o9(s) {
        return function(i) {
          return _o(i, s);
        };
      }
      function pw(s, i, d, g) {
        var b = g ? OW : El, $ = -1, N = i.length, q = s;
        for (s === i && (i = rn(i)), d && (q = Oa(s, _n(d))); ++$ < N; )
          for (var H = 0, se = i[$], ie = d ? d(se) : se; (H = b(q, ie, H, g)) > -1; )
            q !== s && Xp.call(q, H, 1), Xp.call(s, H, 1);
        return s;
      }
      function Qx(s, i) {
        for (var d = s ? i.length : 0, g = d - 1; d--; ) {
          var b = i[d];
          if (d == g || b !== $) {
            var $ = b;
            Ns(b) ? Xp.call(s, b, 1) : hw(s, b);
          }
        }
        return s;
      }
      function gw(s, i) {
        return s + eg(Sx() * (i - s + 1));
      }
      function l9(s, i, d, g) {
        for (var b = -1, $ = Ja(Jp((i - s) / (d || 1)), 0), N = Z($); $--; )
          N[g ? $ : ++b] = s, s += d;
        return N;
      }
      function mw(s, i) {
        var d = "";
        if (!s || i < 1 || i > ta)
          return d;
        do
          i % 2 && (d += s), i = eg(i / 2), i && (s += s);
        while (i);
        return d;
      }
      function We(s, i) {
        return Ow(TS(s, i, ln), s + "");
      }
      function d9(s) {
        return Cx(Dl(s));
      }
      function u9(s, i) {
        var d = Dl(s);
        return yg(d, ko(i, 0, d.length));
      }
      function Au(s, i, d, g) {
        if (!Na(s))
          return s;
        i = Ei(i, s);
        for (var b = -1, $ = i.length, N = $ - 1, q = s; q != null && ++b < $; ) {
          var H = Qr(i[b]), se = d;
          if (H === "__proto__" || H === "constructor" || H === "prototype")
            return s;
          if (b != N) {
            var ie = q[H];
            se = g ? g(ie, H, q) : t, se === t && (se = Na(ie) ? ie : Ns(i[b + 1]) ? [] : {});
          }
          vu(q, H, se), q = q[H];
        }
        return s;
      }
      var Xx = ag ? function(s, i) {
        return ag.set(s, i), s;
      } : ln, c9 = Zp ? function(s, i) {
        return Zp(s, "toString", {
          configurable: !0,
          enumerable: !1,
          value: Fw(i),
          writable: !0
        });
      } : ln;
      function p9(s) {
        return yg(Dl(s));
      }
      function Wn(s, i, d) {
        var g = -1, b = s.length;
        i < 0 && (i = -i > b ? 0 : b + i), d = d > b ? b : d, d < 0 && (d += b), b = i > d ? 0 : d - i >>> 0, i >>>= 0;
        for (var $ = Z(b); ++g < b; )
          $[g] = s[g + i];
        return $;
      }
      function g9(s, i) {
        var d;
        return ki(s, function(g, b, $) {
          return d = i(g, b, $), !d;
        }), !!d;
      }
      function lg(s, i, d) {
        var g = 0, b = s == null ? g : s.length;
        if (typeof i == "number" && i === i && b <= ia) {
          for (; g < b; ) {
            var $ = g + b >>> 1, N = s[$];
            N !== null && !An(N) && (d ? N <= i : N < i) ? g = $ + 1 : b = $;
          }
          return b;
        }
        return fw(s, i, ln, d);
      }
      function fw(s, i, d, g) {
        var b = 0, $ = s == null ? 0 : s.length;
        if ($ === 0)
          return 0;
        i = d(i);
        for (var N = i !== i, q = i === null, H = An(i), se = i === t; b < $; ) {
          var ie = eg((b + $) / 2), le = d(s[ie]), fe = le !== t, Ee = le === null, Se = le === le, Fe = An(le);
          if (N)
            var Oe = g || Se;
          else se ? Oe = Se && (g || fe) : q ? Oe = Se && fe && (g || !Ee) : H ? Oe = Se && fe && !Ee && (g || !Fe) : Ee || Fe ? Oe = !1 : Oe = g ? le <= i : le < i;
          Oe ? b = ie + 1 : $ = ie;
        }
        return jt($, he);
      }
      function Zx(s, i) {
        for (var d = -1, g = s.length, b = 0, $ = []; ++d < g; ) {
          var N = s[d], q = i ? i(N) : N;
          if (!d || !ur(q, H)) {
            var H = q;
            $[b++] = N === 0 ? 0 : N;
          }
        }
        return $;
      }
      function Jx(s) {
        return typeof s == "number" ? s : An(s) ? ze : +s;
      }
      function En(s) {
        if (typeof s == "string")
          return s;
        if (Le(s))
          return Oa(s, En) + "";
        if (An(s))
          return Ox ? Ox.call(s) : "";
        var i = s + "";
        return i == "0" && 1 / s == -me ? "-0" : i;
      }
      function _i(s, i, d) {
        var g = -1, b = Fp, $ = s.length, N = !0, q = [], H = q;
        if (d)
          N = !1, b = Ub;
        else if ($ >= r) {
          var se = i ? null : E9(s);
          if (se)
            return Wp(se);
          N = !1, b = fu, H = new vo();
        } else
          H = i ? [] : q;
        n:
          for (; ++g < $; ) {
            var ie = s[g], le = i ? i(ie) : ie;
            if (ie = d || ie !== 0 ? ie : 0, N && le === le) {
              for (var fe = H.length; fe--; )
                if (H[fe] === le)
                  continue n;
              i && H.push(le), q.push(ie);
            } else b(H, le, d) || (H !== q && H.push(le), q.push(ie));
          }
        return q;
      }
      function hw(s, i) {
        return i = Ei(i, s), s = $S(s, i), s == null || delete s[Qr(Un(i))];
      }
      function eS(s, i, d, g) {
        return Au(s, i, d(_o(s, i)), g);
      }
      function dg(s, i, d, g) {
        for (var b = s.length, $ = g ? b : -1; (g ? $-- : ++$ < b) && i(s[$], $, s); )
          ;
        return d ? Wn(s, g ? 0 : $, g ? $ + 1 : b) : Wn(s, g ? $ + 1 : 0, g ? b : $);
      }
      function aS(s, i) {
        var d = s;
        return d instanceof Xe && (d = d.value()), Hb(i, function(g, b) {
          return b.func.apply(b.thisArg, bi([g], b.args));
        }, d);
      }
      function yw(s, i, d) {
        var g = s.length;
        if (g < 2)
          return g ? _i(s[0]) : [];
        for (var b = -1, $ = Z(g); ++b < g; )
          for (var N = s[b], q = -1; ++q < g; )
            q != b && ($[b] = ku($[b] || N, s[q], i, d));
        return _i(yt($, 1), i, d);
      }
      function tS(s, i, d) {
        for (var g = -1, b = s.length, $ = i.length, N = {}; ++g < b; ) {
          var q = g < $ ? i[g] : t;
          d(N, s[g], q);
        }
        return N;
      }
      function zw(s) {
        return Ua(s) ? s : [];
      }
      function bw(s) {
        return typeof s == "function" ? s : ln;
      }
      function Ei(s, i) {
        return Le(s) ? s : jw(s, i) ? [s] : OS(ua(s));
      }
      var m9 = We;
      function Ai(s, i, d) {
        var g = s.length;
        return d = d === t ? g : d, !i && d >= g ? s : Wn(s, i, d);
      }
      var nS = aU || function(s) {
        return ht.clearTimeout(s);
      };
      function rS(s, i) {
        if (i)
          return s.slice();
        var d = s.length, g = Ax ? Ax(d) : new s.constructor(d);
        return s.copy(g), g;
      }
      function ww(s) {
        var i = new s.constructor(s.byteLength);
        return new Yp(i).set(new Yp(s)), i;
      }
      function f9(s, i) {
        var d = i ? ww(s.buffer) : s.buffer;
        return new s.constructor(d, s.byteOffset, s.byteLength);
      }
      function h9(s) {
        var i = new s.constructor(s.source, Fj.exec(s));
        return i.lastIndex = s.lastIndex, i;
      }
      function y9(s) {
        return wu ? ba(wu.call(s)) : {};
      }
      function sS(s, i) {
        var d = i ? ww(s.buffer) : s.buffer;
        return new s.constructor(d, s.byteOffset, s.length);
      }
      function iS(s, i) {
        if (s !== i) {
          var d = s !== t, g = s === null, b = s === s, $ = An(s), N = i !== t, q = i === null, H = i === i, se = An(i);
          if (!q && !se && !$ && s > i || $ && N && H && !q && !se || g && N && H || !d && H || !b)
            return 1;
          if (!g && !$ && !se && s < i || se && d && b && !g && !$ || q && d && b || !N && b || !H)
            return -1;
        }
        return 0;
      }
      function z9(s, i, d) {
        for (var g = -1, b = s.criteria, $ = i.criteria, N = b.length, q = d.length; ++g < N; ) {
          var H = iS(b[g], $[g]);
          if (H) {
            if (g >= q)
              return H;
            var se = d[g];
            return H * (se == "desc" ? -1 : 1);
          }
        }
        return s.index - i.index;
      }
      function oS(s, i, d, g) {
        for (var b = -1, $ = s.length, N = d.length, q = -1, H = i.length, se = Ja($ - N, 0), ie = Z(H + se), le = !g; ++q < H; )
          ie[q] = i[q];
        for (; ++b < N; )
          (le || b < $) && (ie[d[b]] = s[b]);
        for (; se--; )
          ie[q++] = s[b++];
        return ie;
      }
      function lS(s, i, d, g) {
        for (var b = -1, $ = s.length, N = -1, q = d.length, H = -1, se = i.length, ie = Ja($ - q, 0), le = Z(ie + se), fe = !g; ++b < ie; )
          le[b] = s[b];
        for (var Ee = b; ++H < se; )
          le[Ee + H] = i[H];
        for (; ++N < q; )
          (fe || b < $) && (le[Ee + d[N]] = s[b++]);
        return le;
      }
      function rn(s, i) {
        var d = -1, g = s.length;
        for (i || (i = Z(g)); ++d < g; )
          i[d] = s[d];
        return i;
      }
      function Yr(s, i, d, g) {
        var b = !d;
        d || (d = {});
        for (var $ = -1, N = i.length; ++$ < N; ) {
          var q = i[$], H = g ? g(d[q], s[q], q, d, s) : t;
          H === t && (H = s[q]), b ? Ps(d, q, H) : vu(d, q, H);
        }
        return d;
      }
      function b9(s, i) {
        return Yr(s, $w(s), i);
      }
      function w9(s, i) {
        return Yr(s, vS(s), i);
      }
      function ug(s, i) {
        return function(d, g) {
          var b = Le(d) ? AW : BU, $ = i ? i() : {};
          return b(d, s, xe(g, 2), $);
        };
      }
      function Il(s) {
        return We(function(i, d) {
          var g = -1, b = d.length, $ = b > 1 ? d[b - 1] : t, N = b > 2 ? d[2] : t;
          for ($ = s.length > 3 && typeof $ == "function" ? (b--, $) : t, N && Mt(d[0], d[1], N) && ($ = b < 3 ? t : $, b = 1), i = ba(i); ++g < b; ) {
            var q = d[g];
            q && s(i, q, g, $);
          }
          return i;
        });
      }
      function dS(s, i) {
        return function(d, g) {
          if (d == null)
            return d;
          if (!sn(d))
            return s(d, g);
          for (var b = d.length, $ = i ? b : -1, N = ba(d); (i ? $-- : ++$ < b) && g(N[$], $, N) !== !1; )
            ;
          return d;
        };
      }
      function uS(s) {
        return function(i, d, g) {
          for (var b = -1, $ = ba(i), N = g(i), q = N.length; q--; ) {
            var H = N[s ? q : ++b];
            if (d($[H], H, $) === !1)
              break;
          }
          return i;
        };
      }
      function v9(s, i, d) {
        var g = i & x, b = Tu(s);
        function $() {
          var N = this && this !== ht && this instanceof $ ? b : s;
          return N.apply(g ? d : this, arguments);
        }
        return $;
      }
      function cS(s) {
        return function(i) {
          i = ua(i);
          var d = Al(i) ? lr(i) : t, g = d ? d[0] : i.charAt(0), b = d ? Ai(d, 1).join("") : i.slice(1);
          return g[s]() + b;
        };
      }
      function Cl(s) {
        return function(i) {
          return Hb(d2(l2(i).replace(cW, "")), s, "");
        };
      }
      function Tu(s) {
        return function() {
          var i = arguments;
          switch (i.length) {
            case 0:
              return new s();
            case 1:
              return new s(i[0]);
            case 2:
              return new s(i[0], i[1]);
            case 3:
              return new s(i[0], i[1], i[2]);
            case 4:
              return new s(i[0], i[1], i[2], i[3]);
            case 5:
              return new s(i[0], i[1], i[2], i[3], i[4]);
            case 6:
              return new s(i[0], i[1], i[2], i[3], i[4], i[5]);
            case 7:
              return new s(i[0], i[1], i[2], i[3], i[4], i[5], i[6]);
          }
          var d = Ol(s.prototype), g = s.apply(d, i);
          return Na(g) ? g : d;
        };
      }
      function k9(s, i, d) {
        var g = Tu(s);
        function b() {
          for (var $ = arguments.length, N = Z($), q = $, H = Pl(b); q--; )
            N[q] = arguments[q];
          var se = $ < 3 && N[0] !== H && N[$ - 1] !== H ? [] : wi(N, H);
          if ($ -= se.length, $ < d)
            return hS(
              s,
              i,
              cg,
              b.placeholder,
              t,
              N,
              se,
              t,
              t,
              d - $
            );
          var ie = this && this !== ht && this instanceof b ? g : s;
          return kn(ie, this, N);
        }
        return b;
      }
      function pS(s) {
        return function(i, d, g) {
          var b = ba(i);
          if (!sn(i)) {
            var $ = xe(d, 3);
            i = it(i), d = function(q) {
              return $(b[q], q, b);
            };
          }
          var N = s(i, d, g);
          return N > -1 ? b[$ ? i[N] : N] : t;
        };
      }
      function gS(s) {
        return Ds(function(i) {
          var d = i.length, g = d, b = Fn.prototype.thru;
          for (s && i.reverse(); g--; ) {
            var $ = i[g];
            if (typeof $ != "function")
              throw new qn(l);
            if (b && !N && fg($) == "wrapper")
              var N = new Fn([], !0);
          }
          for (g = N ? g : d; ++g < d; ) {
            $ = i[g];
            var q = fg($), H = q == "wrapper" ? Aw($) : t;
            H && xw(H[0]) && H[1] == (U | S | M | V) && !H[4].length && H[9] == 1 ? N = N[fg(H[0])].apply(N, H[3]) : N = $.length == 1 && xw($) ? N[q]() : N.thru($);
          }
          return function() {
            var se = arguments, ie = se[0];
            if (N && se.length == 1 && Le(ie))
              return N.plant(ie).value();
            for (var le = 0, fe = d ? i[le].apply(this, se) : ie; ++le < d; )
              fe = i[le].call(this, fe);
            return fe;
          };
        });
      }
      function cg(s, i, d, g, b, $, N, q, H, se) {
        var ie = i & U, le = i & x, fe = i & w, Ee = i & (S | P), Se = i & F, Fe = fe ? t : Tu(s);
        function Oe() {
          for (var Ge = arguments.length, Je = Z(Ge), Tn = Ge; Tn--; )
            Je[Tn] = arguments[Tn];
          if (Ee)
            var qt = Pl(Oe), $n = PW(Je, qt);
          if (g && (Je = oS(Je, g, b, Ee)), $ && (Je = lS(Je, $, N, Ee)), Ge -= $n, Ee && Ge < se) {
            var Ha = wi(Je, qt);
            return hS(
              s,
              i,
              cg,
              Oe.placeholder,
              d,
              Je,
              Ha,
              q,
              H,
              se - Ge
            );
          }
          var cr = le ? d : this, qs = fe ? cr[s] : s;
          return Ge = Je.length, q ? Je = B9(Je, q) : Se && Ge > 1 && Je.reverse(), ie && H < Ge && (Je.length = H), this && this !== ht && this instanceof Oe && (qs = Fe || Tu(qs)), qs.apply(cr, Je);
        }
        return Oe;
      }
      function mS(s, i) {
        return function(d, g) {
          return QU(d, s, i(g), {});
        };
      }
      function pg(s, i) {
        return function(d, g) {
          var b;
          if (d === t && g === t)
            return i;
          if (d !== t && (b = d), g !== t) {
            if (b === t)
              return g;
            typeof d == "string" || typeof g == "string" ? (d = En(d), g = En(g)) : (d = Jx(d), g = Jx(g)), b = s(d, g);
          }
          return b;
        };
      }
      function vw(s) {
        return Ds(function(i) {
          return i = Oa(i, _n(xe())), We(function(d) {
            var g = this;
            return s(i, function(b) {
              return kn(b, g, d);
            });
          });
        });
      }
      function gg(s, i) {
        i = i === t ? " " : En(i);
        var d = i.length;
        if (d < 2)
          return d ? mw(i, s) : i;
        var g = mw(i, Jp(s / Tl(i)));
        return Al(i) ? Ai(lr(g), 0, s).join("") : g.slice(0, s);
      }
      function _9(s, i, d, g) {
        var b = i & x, $ = Tu(s);
        function N() {
          for (var q = -1, H = arguments.length, se = -1, ie = g.length, le = Z(ie + H), fe = this && this !== ht && this instanceof N ? $ : s; ++se < ie; )
            le[se] = g[se];
          for (; H--; )
            le[se++] = arguments[++q];
          return kn(fe, b ? d : this, le);
        }
        return N;
      }
      function fS(s) {
        return function(i, d, g) {
          return g && typeof g != "number" && Mt(i, d, g) && (d = g = t), i = Ms(i), d === t ? (d = i, i = 0) : d = Ms(d), g = g === t ? i < d ? 1 : -1 : Ms(g), l9(i, d, g, s);
        };
      }
      function mg(s) {
        return function(i, d) {
          return typeof i == "string" && typeof d == "string" || (i = Hn(i), d = Hn(d)), s(i, d);
        };
      }
      function hS(s, i, d, g, b, $, N, q, H, se) {
        var ie = i & S, le = ie ? N : t, fe = ie ? t : N, Ee = ie ? $ : t, Se = ie ? t : $;
        i |= ie ? M : G, i &= ~(ie ? G : M), i & j || (i &= -4);
        var Fe = [
          s,
          i,
          b,
          Ee,
          le,
          Se,
          fe,
          q,
          H,
          se
        ], Oe = d.apply(t, Fe);
        return xw(s) && jS(Oe, Fe), Oe.placeholder = g, xS(Oe, s, i);
      }
      function kw(s) {
        var i = Za[s];
        return function(d, g) {
          if (d = Hn(d), g = g == null ? 0 : jt(Me(g), 292), g && xx(d)) {
            var b = (ua(d) + "e").split("e"), $ = i(b[0] + "e" + (+b[1] + g));
            return b = (ua($) + "e").split("e"), +(b[0] + "e" + (+b[1] - g));
          }
          return i(d);
        };
      }
      var E9 = xl && 1 / Wp(new xl([, -0]))[1] == me ? function(s) {
        return new xl(s);
      } : Uw;
      function yS(s) {
        return function(i) {
          var d = xt(i);
          return d == za ? Zb(i) : d == vn ? FW(i) : CW(i, s(i));
        };
      }
      function Rs(s, i, d, g, b, $, N, q) {
        var H = i & w;
        if (!H && typeof s != "function")
          throw new qn(l);
        var se = g ? g.length : 0;
        if (se || (i &= -97, g = b = t), N = N === t ? N : Ja(Me(N), 0), q = q === t ? q : Me(q), se -= b ? b.length : 0, i & G) {
          var ie = g, le = b;
          g = b = t;
        }
        var fe = H ? t : Aw(s), Ee = [
          s,
          i,
          d,
          g,
          b,
          ie,
          le,
          $,
          N,
          q
        ];
        if (fe && M9(Ee, fe), s = Ee[0], i = Ee[1], d = Ee[2], g = Ee[3], b = Ee[4], q = Ee[9] = Ee[9] === t ? H ? 0 : s.length : Ja(Ee[9] - se, 0), !q && i & (S | P) && (i &= -25), !i || i == x)
          var Se = v9(s, i, d);
        else i == S || i == P ? Se = k9(s, i, q) : (i == M || i == (x | M)) && !b.length ? Se = _9(s, i, d, g) : Se = cg.apply(t, Ee);
        var Fe = fe ? Xx : jS;
        return xS(Fe(Se, Ee), s, i);
      }
      function zS(s, i, d, g) {
        return s === t || ur(s, jl[d]) && !fa.call(g, d) ? i : s;
      }
      function bS(s, i, d, g, b, $) {
        return Na(s) && Na(i) && ($.set(i, s), og(s, i, t, bS, $), $.delete(i)), s;
      }
      function A9(s) {
        return xu(s) ? t : s;
      }
      function wS(s, i, d, g, b, $) {
        var N = d & I, q = s.length, H = i.length;
        if (q != H && !(N && H > q))
          return !1;
        var se = $.get(s), ie = $.get(i);
        if (se && ie)
          return se == i && ie == s;
        var le = -1, fe = !0, Ee = d & A ? new vo() : t;
        for ($.set(s, i), $.set(i, s); ++le < q; ) {
          var Se = s[le], Fe = i[le];
          if (g)
            var Oe = N ? g(Fe, Se, le, i, s, $) : g(Se, Fe, le, s, i, $);
          if (Oe !== t) {
            if (Oe)
              continue;
            fe = !1;
            break;
          }
          if (Ee) {
            if (!Gb(i, function(Ge, Je) {
              if (!fu(Ee, Je) && (Se === Ge || b(Se, Ge, d, g, $)))
                return Ee.push(Je);
            })) {
              fe = !1;
              break;
            }
          } else if (!(Se === Fe || b(Se, Fe, d, g, $))) {
            fe = !1;
            break;
          }
        }
        return $.delete(s), $.delete(i), fe;
      }
      function T9(s, i, d, g, b, $, N) {
        switch (d) {
          case Ss:
            if (s.byteLength != i.byteLength || s.byteOffset != i.byteOffset)
              return !1;
            s = s.buffer, i = i.buffer;
          case yi:
            return !(s.byteLength != i.byteLength || !$(new Yp(s), new Yp(i)));
          case De:
          case ga:
          case $t:
            return ur(+s, +i);
          case oa:
            return s.name == i.name && s.message == i.message;
          case fo:
          case ja:
            return s == i + "";
          case za:
            var q = Zb;
          case vn:
            var H = g & I;
            if (q || (q = Wp), s.size != i.size && !H)
              return !1;
            var se = N.get(s);
            if (se)
              return se == i;
            g |= A, N.set(s, i);
            var ie = wS(q(s), q(i), g, b, $, N);
            return N.delete(s), ie;
          case Xa:
            if (wu)
              return wu.call(s) == wu.call(i);
        }
        return !1;
      }
      function $9(s, i, d, g, b, $) {
        var N = d & I, q = _w(s), H = q.length, se = _w(i), ie = se.length;
        if (H != ie && !N)
          return !1;
        for (var le = H; le--; ) {
          var fe = q[le];
          if (!(N ? fe in i : fa.call(i, fe)))
            return !1;
        }
        var Ee = $.get(s), Se = $.get(i);
        if (Ee && Se)
          return Ee == i && Se == s;
        var Fe = !0;
        $.set(s, i), $.set(i, s);
        for (var Oe = N; ++le < H; ) {
          fe = q[le];
          var Ge = s[fe], Je = i[fe];
          if (g)
            var Tn = N ? g(Je, Ge, fe, i, s, $) : g(Ge, Je, fe, s, i, $);
          if (!(Tn === t ? Ge === Je || b(Ge, Je, d, g, $) : Tn)) {
            Fe = !1;
            break;
          }
          Oe || (Oe = fe == "constructor");
        }
        if (Fe && !Oe) {
          var qt = s.constructor, $n = i.constructor;
          qt != $n && "constructor" in s && "constructor" in i && !(typeof qt == "function" && qt instanceof qt && typeof $n == "function" && $n instanceof $n) && (Fe = !1);
        }
        return $.delete(s), $.delete(i), Fe;
      }
      function Ds(s) {
        return Ow(TS(s, t, RS), s + "");
      }
      function _w(s) {
        return qx(s, it, $w);
      }
      function Ew(s) {
        return qx(s, on, vS);
      }
      var Aw = ag ? function(s) {
        return ag.get(s);
      } : Uw;
      function fg(s) {
        for (var i = s.name + "", d = Sl[i], g = fa.call(Sl, i) ? d.length : 0; g--; ) {
          var b = d[g], $ = b.func;
          if ($ == null || $ == s)
            return b.name;
        }
        return i;
      }
      function Pl(s) {
        var i = fa.call(E, "placeholder") ? E : s;
        return i.placeholder;
      }
      function xe() {
        var s = E.iteratee || Bw;
        return s = s === Bw ? Wx : s, arguments.length ? s(arguments[0], arguments[1]) : s;
      }
      function hg(s, i) {
        var d = s.__data__;
        return R9(i) ? d[typeof i == "string" ? "string" : "hash"] : d.map;
      }
      function Tw(s) {
        for (var i = it(s), d = i.length; d--; ) {
          var g = i[d], b = s[g];
          i[d] = [g, b, ES(b)];
        }
        return i;
      }
      function Eo(s, i) {
        var d = LW(s, i);
        return Bx(d) ? d : t;
      }
      function j9(s) {
        var i = fa.call(s, bo), d = s[bo];
        try {
          s[bo] = t;
          var g = !0;
        } catch {
        }
        var b = Vp.call(s);
        return g && (i ? s[bo] = d : delete s[bo]), b;
      }
      var $w = ew ? function(s) {
        return s == null ? [] : (s = ba(s), zi(ew(s), function(i) {
          return $x.call(s, i);
        }));
      } : Hw, vS = ew ? function(s) {
        for (var i = []; s; )
          bi(i, $w(s)), s = Qp(s);
        return i;
      } : Hw, xt = Lt;
      (aw && xt(new aw(new ArrayBuffer(1))) != Ss || yu && xt(new yu()) != za || tw && xt(tw.resolve()) != Pp || xl && xt(new xl()) != vn || zu && xt(new zu()) != hi) && (xt = function(s) {
        var i = Lt(s), d = i == or ? s.constructor : t, g = d ? Ao(d) : "";
        if (g)
          switch (g) {
            case uU:
              return Ss;
            case cU:
              return za;
            case pU:
              return Pp;
            case gU:
              return vn;
            case mU:
              return hi;
          }
        return i;
      });
      function x9(s, i, d) {
        for (var g = -1, b = d.length; ++g < b; ) {
          var $ = d[g], N = $.size;
          switch ($.type) {
            case "drop":
              s += N;
              break;
            case "dropRight":
              i -= N;
              break;
            case "take":
              i = jt(i, s + N);
              break;
            case "takeRight":
              s = Ja(s, i - N);
              break;
          }
        }
        return { start: s, end: i };
      }
      function S9(s) {
        var i = s.match(xa);
        return i ? i[1].split(ka) : [];
      }
      function kS(s, i, d) {
        i = Ei(i, s);
        for (var g = -1, b = i.length, $ = !1; ++g < b; ) {
          var N = Qr(i[g]);
          if (!($ = s != null && d(s, N)))
            break;
          s = s[N];
        }
        return $ || ++g != b ? $ : (b = s == null ? 0 : s.length, !!b && _g(b) && Ns(N, b) && (Le(s) || To(s)));
      }
      function O9(s) {
        var i = s.length, d = new s.constructor(i);
        return i && typeof s[0] == "string" && fa.call(s, "index") && (d.index = s.index, d.input = s.input), d;
      }
      function _S(s) {
        return typeof s.constructor == "function" && !$u(s) ? Ol(Qp(s)) : {};
      }
      function I9(s, i, d) {
        var g = s.constructor;
        switch (i) {
          case yi:
            return ww(s);
          case De:
          case ga:
            return new g(+s);
          case Ss:
            return f9(s, d);
          case Hr:
          case ho:
          case vl:
          case du:
          case kl:
          case Gr:
          case Os:
          case uu:
          case cu:
            return sS(s, d);
          case za:
            return new g();
          case $t:
          case ja:
            return new g(s);
          case fo:
            return h9(s);
          case vn:
            return new g();
          case Xa:
            return y9(s);
        }
      }
      function C9(s, i) {
        var d = i.length;
        if (!d)
          return s;
        var g = d - 1;
        return i[g] = (d > 1 ? "& " : "") + i[g], i = i.join(d > 2 ? ", " : " "), s.replace(Be, `{
/* [wrapped with ` + i + `] */
`);
      }
      function P9(s) {
        return Le(s) || To(s) || !!(jx && s && s[jx]);
      }
      function Ns(s, i) {
        var d = typeof s;
        return i = i ?? ta, !!i && (d == "number" || d != "symbol" && G5.test(s)) && s > -1 && s % 1 == 0 && s < i;
      }
      function Mt(s, i, d) {
        if (!Na(d))
          return !1;
        var g = typeof i;
        return (g == "number" ? sn(d) && Ns(i, d.length) : g == "string" && i in d) ? ur(d[i], s) : !1;
      }
      function jw(s, i) {
        if (Le(s))
          return !1;
        var d = typeof s;
        return d == "number" || d == "symbol" || d == "boolean" || s == null || An(s) ? !0 : m.test(s) || !_.test(s) || i != null && s in ba(i);
      }
      function R9(s) {
        var i = typeof s;
        return i == "string" || i == "number" || i == "symbol" || i == "boolean" ? s !== "__proto__" : s === null;
      }
      function xw(s) {
        var i = fg(s), d = E[i];
        if (typeof d != "function" || !(i in Xe.prototype))
          return !1;
        if (s === d)
          return !0;
        var g = Aw(d);
        return !!g && s === g[0];
      }
      function D9(s) {
        return !!Ex && Ex in s;
      }
      var N9 = Hp ? Ls : Gw;
      function $u(s) {
        var i = s && s.constructor, d = typeof i == "function" && i.prototype || jl;
        return s === d;
      }
      function ES(s) {
        return s === s && !Na(s);
      }
      function AS(s, i) {
        return function(d) {
          return d == null ? !1 : d[s] === i && (i !== t || s in ba(d));
        };
      }
      function L9(s) {
        var i = vg(s, function(g) {
          return d.size === f && d.clear(), g;
        }), d = i.cache;
        return i;
      }
      function M9(s, i) {
        var d = s[1], g = i[1], b = d | g, $ = b < (x | w | U), N = g == U && d == S || g == U && d == V && s[7].length <= i[8] || g == (U | V) && i[7].length <= i[8] && d == S;
        if (!($ || N))
          return s;
        g & x && (s[2] = i[2], b |= d & x ? 0 : j);
        var q = i[3];
        if (q) {
          var H = s[3];
          s[3] = H ? oS(H, q, i[4]) : q, s[4] = H ? wi(s[3], y) : i[4];
        }
        return q = i[5], q && (H = s[5], s[5] = H ? lS(H, q, i[6]) : q, s[6] = H ? wi(s[5], y) : i[6]), q = i[7], q && (s[7] = q), g & U && (s[8] = s[8] == null ? i[8] : jt(s[8], i[8])), s[9] == null && (s[9] = i[9]), s[0] = i[0], s[1] = b, s;
      }
      function q9(s) {
        var i = [];
        if (s != null)
          for (var d in ba(s))
            i.push(d);
        return i;
      }
      function F9(s) {
        return Vp.call(s);
      }
      function TS(s, i, d) {
        return i = Ja(i === t ? s.length - 1 : i, 0), function() {
          for (var g = arguments, b = -1, $ = Ja(g.length - i, 0), N = Z($); ++b < $; )
            N[b] = g[i + b];
          b = -1;
          for (var q = Z(i + 1); ++b < i; )
            q[b] = g[b];
          return q[i] = d(N), kn(s, this, q);
        };
      }
      function $S(s, i) {
        return i.length < 2 ? s : _o(s, Wn(i, 0, -1));
      }
      function B9(s, i) {
        for (var d = s.length, g = jt(i.length, d), b = rn(s); g--; ) {
          var $ = i[g];
          s[g] = Ns($, d) ? b[$] : t;
        }
        return s;
      }
      function Sw(s, i) {
        if (!(i === "constructor" && typeof s[i] == "function") && i != "__proto__")
          return s[i];
      }
      var jS = SS(Xx), ju = nU || function(s, i) {
        return ht.setTimeout(s, i);
      }, Ow = SS(c9);
      function xS(s, i, d) {
        var g = i + "";
        return Ow(s, C9(g, W9(S9(g), d)));
      }
      function SS(s) {
        var i = 0, d = 0;
        return function() {
          var g = oU(), b = de - (g - d);
          if (d = g, b > 0) {
            if (++i >= D)
              return arguments[0];
          } else
            i = 0;
          return s.apply(t, arguments);
        };
      }
      function yg(s, i) {
        var d = -1, g = s.length, b = g - 1;
        for (i = i === t ? g : i; ++d < i; ) {
          var $ = gw(d, b), N = s[$];
          s[$] = s[d], s[d] = N;
        }
        return s.length = i, s;
      }
      var OS = L9(function(s) {
        var i = [];
        return s.charCodeAt(0) === 46 && i.push(""), s.replace(h, function(d, g, b, $) {
          i.push(b ? $.replace(q5, "$1") : g || d);
        }), i;
      });
      function Qr(s) {
        if (typeof s == "string" || An(s))
          return s;
        var i = s + "";
        return i == "0" && 1 / s == -me ? "-0" : i;
      }
      function Ao(s) {
        if (s != null) {
          try {
            return Gp.call(s);
          } catch {
          }
          try {
            return s + "";
          } catch {
          }
        }
        return "";
      }
      function W9(s, i) {
        return Mn(je, function(d) {
          var g = "_." + d[0];
          i & d[1] && !Fp(s, g) && s.push(g);
        }), s.sort();
      }
      function IS(s) {
        if (s instanceof Xe)
          return s.clone();
        var i = new Fn(s.__wrapped__, s.__chain__);
        return i.__actions__ = rn(s.__actions__), i.__index__ = s.__index__, i.__values__ = s.__values__, i;
      }
      function U9(s, i, d) {
        (d ? Mt(s, i, d) : i === t) ? i = 1 : i = Ja(Me(i), 0);
        var g = s == null ? 0 : s.length;
        if (!g || i < 1)
          return [];
        for (var b = 0, $ = 0, N = Z(Jp(g / i)); b < g; )
          N[$++] = Wn(s, b, b += i);
        return N;
      }
      function H9(s) {
        for (var i = -1, d = s == null ? 0 : s.length, g = 0, b = []; ++i < d; ) {
          var $ = s[i];
          $ && (b[g++] = $);
        }
        return b;
      }
      function G9() {
        var s = arguments.length;
        if (!s)
          return [];
        for (var i = Z(s - 1), d = arguments[0], g = s; g--; )
          i[g - 1] = arguments[g];
        return bi(Le(d) ? rn(d) : [d], yt(i, 1));
      }
      var V9 = We(function(s, i) {
        return Ua(s) ? ku(s, yt(i, 1, Ua, !0)) : [];
      }), K9 = We(function(s, i) {
        var d = Un(i);
        return Ua(d) && (d = t), Ua(s) ? ku(s, yt(i, 1, Ua, !0), xe(d, 2)) : [];
      }), Y9 = We(function(s, i) {
        var d = Un(i);
        return Ua(d) && (d = t), Ua(s) ? ku(s, yt(i, 1, Ua, !0), t, d) : [];
      });
      function Q9(s, i, d) {
        var g = s == null ? 0 : s.length;
        return g ? (i = d || i === t ? 1 : Me(i), Wn(s, i < 0 ? 0 : i, g)) : [];
      }
      function X9(s, i, d) {
        var g = s == null ? 0 : s.length;
        return g ? (i = d || i === t ? 1 : Me(i), i = g - i, Wn(s, 0, i < 0 ? 0 : i)) : [];
      }
      function Z9(s, i) {
        return s && s.length ? dg(s, xe(i, 3), !0, !0) : [];
      }
      function J9(s, i) {
        return s && s.length ? dg(s, xe(i, 3), !0) : [];
      }
      function e7(s, i, d, g) {
        var b = s == null ? 0 : s.length;
        return b ? (d && typeof d != "number" && Mt(s, i, d) && (d = 0, g = b), GU(s, i, d, g)) : [];
      }
      function CS(s, i, d) {
        var g = s == null ? 0 : s.length;
        if (!g)
          return -1;
        var b = d == null ? 0 : Me(d);
        return b < 0 && (b = Ja(g + b, 0)), Bp(s, xe(i, 3), b);
      }
      function PS(s, i, d) {
        var g = s == null ? 0 : s.length;
        if (!g)
          return -1;
        var b = g - 1;
        return d !== t && (b = Me(d), b = d < 0 ? Ja(g + b, 0) : jt(b, g - 1)), Bp(s, xe(i, 3), b, !0);
      }
      function RS(s) {
        var i = s == null ? 0 : s.length;
        return i ? yt(s, 1) : [];
      }
      function a7(s) {
        var i = s == null ? 0 : s.length;
        return i ? yt(s, me) : [];
      }
      function t7(s, i) {
        var d = s == null ? 0 : s.length;
        return d ? (i = i === t ? 1 : Me(i), yt(s, i)) : [];
      }
      function n7(s) {
        for (var i = -1, d = s == null ? 0 : s.length, g = {}; ++i < d; ) {
          var b = s[i];
          g[b[0]] = b[1];
        }
        return g;
      }
      function DS(s) {
        return s && s.length ? s[0] : t;
      }
      function r7(s, i, d) {
        var g = s == null ? 0 : s.length;
        if (!g)
          return -1;
        var b = d == null ? 0 : Me(d);
        return b < 0 && (b = Ja(g + b, 0)), El(s, i, b);
      }
      function s7(s) {
        var i = s == null ? 0 : s.length;
        return i ? Wn(s, 0, -1) : [];
      }
      var i7 = We(function(s) {
        var i = Oa(s, zw);
        return i.length && i[0] === s[0] ? lw(i) : [];
      }), o7 = We(function(s) {
        var i = Un(s), d = Oa(s, zw);
        return i === Un(d) ? i = t : d.pop(), d.length && d[0] === s[0] ? lw(d, xe(i, 2)) : [];
      }), l7 = We(function(s) {
        var i = Un(s), d = Oa(s, zw);
        return i = typeof i == "function" ? i : t, i && d.pop(), d.length && d[0] === s[0] ? lw(d, t, i) : [];
      });
      function d7(s, i) {
        return s == null ? "" : sU.call(s, i);
      }
      function Un(s) {
        var i = s == null ? 0 : s.length;
        return i ? s[i - 1] : t;
      }
      function u7(s, i, d) {
        var g = s == null ? 0 : s.length;
        if (!g)
          return -1;
        var b = g;
        return d !== t && (b = Me(d), b = b < 0 ? Ja(g + b, 0) : jt(b, g - 1)), i === i ? WW(s, i, b) : Bp(s, hx, b, !0);
      }
      function c7(s, i) {
        return s && s.length ? Vx(s, Me(i)) : t;
      }
      var p7 = We(NS);
      function NS(s, i) {
        return s && s.length && i && i.length ? pw(s, i) : s;
      }
      function g7(s, i, d) {
        return s && s.length && i && i.length ? pw(s, i, xe(d, 2)) : s;
      }
      function m7(s, i, d) {
        return s && s.length && i && i.length ? pw(s, i, t, d) : s;
      }
      var f7 = Ds(function(s, i) {
        var d = s == null ? 0 : s.length, g = rw(s, i);
        return Qx(s, Oa(i, function(b) {
          return Ns(b, d) ? +b : b;
        }).sort(iS)), g;
      });
      function h7(s, i) {
        var d = [];
        if (!(s && s.length))
          return d;
        var g = -1, b = [], $ = s.length;
        for (i = xe(i, 3); ++g < $; ) {
          var N = s[g];
          i(N, g, s) && (d.push(N), b.push(g));
        }
        return Qx(s, b), d;
      }
      function Iw(s) {
        return s == null ? s : dU.call(s);
      }
      function y7(s, i, d) {
        var g = s == null ? 0 : s.length;
        return g ? (d && typeof d != "number" && Mt(s, i, d) ? (i = 0, d = g) : (i = i == null ? 0 : Me(i), d = d === t ? g : Me(d)), Wn(s, i, d)) : [];
      }
      function z7(s, i) {
        return lg(s, i);
      }
      function b7(s, i, d) {
        return fw(s, i, xe(d, 2));
      }
      function w7(s, i) {
        var d = s == null ? 0 : s.length;
        if (d) {
          var g = lg(s, i);
          if (g < d && ur(s[g], i))
            return g;
        }
        return -1;
      }
      function v7(s, i) {
        return lg(s, i, !0);
      }
      function k7(s, i, d) {
        return fw(s, i, xe(d, 2), !0);
      }
      function _7(s, i) {
        var d = s == null ? 0 : s.length;
        if (d) {
          var g = lg(s, i, !0) - 1;
          if (ur(s[g], i))
            return g;
        }
        return -1;
      }
      function E7(s) {
        return s && s.length ? Zx(s) : [];
      }
      function A7(s, i) {
        return s && s.length ? Zx(s, xe(i, 2)) : [];
      }
      function T7(s) {
        var i = s == null ? 0 : s.length;
        return i ? Wn(s, 1, i) : [];
      }
      function $7(s, i, d) {
        return s && s.length ? (i = d || i === t ? 1 : Me(i), Wn(s, 0, i < 0 ? 0 : i)) : [];
      }
      function j7(s, i, d) {
        var g = s == null ? 0 : s.length;
        return g ? (i = d || i === t ? 1 : Me(i), i = g - i, Wn(s, i < 0 ? 0 : i, g)) : [];
      }
      function x7(s, i) {
        return s && s.length ? dg(s, xe(i, 3), !1, !0) : [];
      }
      function S7(s, i) {
        return s && s.length ? dg(s, xe(i, 3)) : [];
      }
      var O7 = We(function(s) {
        return _i(yt(s, 1, Ua, !0));
      }), I7 = We(function(s) {
        var i = Un(s);
        return Ua(i) && (i = t), _i(yt(s, 1, Ua, !0), xe(i, 2));
      }), C7 = We(function(s) {
        var i = Un(s);
        return i = typeof i == "function" ? i : t, _i(yt(s, 1, Ua, !0), t, i);
      });
      function P7(s) {
        return s && s.length ? _i(s) : [];
      }
      function R7(s, i) {
        return s && s.length ? _i(s, xe(i, 2)) : [];
      }
      function D7(s, i) {
        return i = typeof i == "function" ? i : t, s && s.length ? _i(s, t, i) : [];
      }
      function Cw(s) {
        if (!(s && s.length))
          return [];
        var i = 0;
        return s = zi(s, function(d) {
          if (Ua(d))
            return i = Ja(d.length, i), !0;
        }), Qb(i, function(d) {
          return Oa(s, Vb(d));
        });
      }
      function LS(s, i) {
        if (!(s && s.length))
          return [];
        var d = Cw(s);
        return i == null ? d : Oa(d, function(g) {
          return kn(i, t, g);
        });
      }
      var N7 = We(function(s, i) {
        return Ua(s) ? ku(s, i) : [];
      }), L7 = We(function(s) {
        return yw(zi(s, Ua));
      }), M7 = We(function(s) {
        var i = Un(s);
        return Ua(i) && (i = t), yw(zi(s, Ua), xe(i, 2));
      }), q7 = We(function(s) {
        var i = Un(s);
        return i = typeof i == "function" ? i : t, yw(zi(s, Ua), t, i);
      }), F7 = We(Cw);
      function B7(s, i) {
        return tS(s || [], i || [], vu);
      }
      function W7(s, i) {
        return tS(s || [], i || [], Au);
      }
      var U7 = We(function(s) {
        var i = s.length, d = i > 1 ? s[i - 1] : t;
        return d = typeof d == "function" ? (s.pop(), d) : t, LS(s, d);
      });
      function MS(s) {
        var i = E(s);
        return i.__chain__ = !0, i;
      }
      function H7(s, i) {
        return i(s), s;
      }
      function zg(s, i) {
        return i(s);
      }
      var G7 = Ds(function(s) {
        var i = s.length, d = i ? s[0] : 0, g = this.__wrapped__, b = function($) {
          return rw($, s);
        };
        return i > 1 || this.__actions__.length || !(g instanceof Xe) || !Ns(d) ? this.thru(b) : (g = g.slice(d, +d + (i ? 1 : 0)), g.__actions__.push({
          func: zg,
          args: [b],
          thisArg: t
        }), new Fn(g, this.__chain__).thru(function($) {
          return i && !$.length && $.push(t), $;
        }));
      });
      function V7() {
        return MS(this);
      }
      function K7() {
        return new Fn(this.value(), this.__chain__);
      }
      function Y7() {
        this.__values__ === t && (this.__values__ = JS(this.value()));
        var s = this.__index__ >= this.__values__.length, i = s ? t : this.__values__[this.__index__++];
        return { done: s, value: i };
      }
      function Q7() {
        return this;
      }
      function X7(s) {
        for (var i, d = this; d instanceof ng; ) {
          var g = IS(d);
          g.__index__ = 0, g.__values__ = t, i ? b.__wrapped__ = g : i = g;
          var b = g;
          d = d.__wrapped__;
        }
        return b.__wrapped__ = s, i;
      }
      function Z7() {
        var s = this.__wrapped__;
        if (s instanceof Xe) {
          var i = s;
          return this.__actions__.length && (i = new Xe(this)), i = i.reverse(), i.__actions__.push({
            func: zg,
            args: [Iw],
            thisArg: t
          }), new Fn(i, this.__chain__);
        }
        return this.thru(Iw);
      }
      function J7() {
        return aS(this.__wrapped__, this.__actions__);
      }
      var eH = ug(function(s, i, d) {
        fa.call(s, d) ? ++s[d] : Ps(s, d, 1);
      });
      function aH(s, i, d) {
        var g = Le(s) ? mx : HU;
        return d && Mt(s, i, d) && (i = t), g(s, xe(i, 3));
      }
      function tH(s, i) {
        var d = Le(s) ? zi : Lx;
        return d(s, xe(i, 3));
      }
      var nH = pS(CS), rH = pS(PS);
      function sH(s, i) {
        return yt(bg(s, i), 1);
      }
      function iH(s, i) {
        return yt(bg(s, i), me);
      }
      function oH(s, i, d) {
        return d = d === t ? 1 : Me(d), yt(bg(s, i), d);
      }
      function qS(s, i) {
        var d = Le(s) ? Mn : ki;
        return d(s, xe(i, 3));
      }
      function FS(s, i) {
        var d = Le(s) ? TW : Nx;
        return d(s, xe(i, 3));
      }
      var lH = ug(function(s, i, d) {
        fa.call(s, d) ? s[d].push(i) : Ps(s, d, [i]);
      });
      function dH(s, i, d, g) {
        s = sn(s) ? s : Dl(s), d = d && !g ? Me(d) : 0;
        var b = s.length;
        return d < 0 && (d = Ja(b + d, 0)), Eg(s) ? d <= b && s.indexOf(i, d) > -1 : !!b && El(s, i, d) > -1;
      }
      var uH = We(function(s, i, d) {
        var g = -1, b = typeof i == "function", $ = sn(s) ? Z(s.length) : [];
        return ki(s, function(N) {
          $[++g] = b ? kn(i, N, d) : _u(N, i, d);
        }), $;
      }), cH = ug(function(s, i, d) {
        Ps(s, d, i);
      });
      function bg(s, i) {
        var d = Le(s) ? Oa : Ux;
        return d(s, xe(i, 3));
      }
      function pH(s, i, d, g) {
        return s == null ? [] : (Le(i) || (i = i == null ? [] : [i]), d = g ? t : d, Le(d) || (d = d == null ? [] : [d]), Kx(s, i, d));
      }
      var gH = ug(function(s, i, d) {
        s[d ? 0 : 1].push(i);
      }, function() {
        return [[], []];
      });
      function mH(s, i, d) {
        var g = Le(s) ? Hb : zx, b = arguments.length < 3;
        return g(s, xe(i, 4), d, b, ki);
      }
      function fH(s, i, d) {
        var g = Le(s) ? $W : zx, b = arguments.length < 3;
        return g(s, xe(i, 4), d, b, Nx);
      }
      function hH(s, i) {
        var d = Le(s) ? zi : Lx;
        return d(s, kg(xe(i, 3)));
      }
      function yH(s) {
        var i = Le(s) ? Cx : d9;
        return i(s);
      }
      function zH(s, i, d) {
        (d ? Mt(s, i, d) : i === t) ? i = 1 : i = Me(i);
        var g = Le(s) ? qU : u9;
        return g(s, i);
      }
      function bH(s) {
        var i = Le(s) ? FU : p9;
        return i(s);
      }
      function wH(s) {
        if (s == null)
          return 0;
        if (sn(s))
          return Eg(s) ? Tl(s) : s.length;
        var i = xt(s);
        return i == za || i == vn ? s.size : uw(s).length;
      }
      function vH(s, i, d) {
        var g = Le(s) ? Gb : g9;
        return d && Mt(s, i, d) && (i = t), g(s, xe(i, 3));
      }
      var kH = We(function(s, i) {
        if (s == null)
          return [];
        var d = i.length;
        return d > 1 && Mt(s, i[0], i[1]) ? i = [] : d > 2 && Mt(i[0], i[1], i[2]) && (i = [i[0]]), Kx(s, yt(i, 1), []);
      }), wg = tU || function() {
        return ht.Date.now();
      };
      function _H(s, i) {
        if (typeof i != "function")
          throw new qn(l);
        return s = Me(s), function() {
          if (--s < 1)
            return i.apply(this, arguments);
        };
      }
      function BS(s, i, d) {
        return i = d ? t : i, i = s && i == null ? s.length : i, Rs(s, U, t, t, t, t, i);
      }
      function WS(s, i) {
        var d;
        if (typeof i != "function")
          throw new qn(l);
        return s = Me(s), function() {
          return --s > 0 && (d = i.apply(this, arguments)), s <= 1 && (i = t), d;
        };
      }
      var Pw = We(function(s, i, d) {
        var g = x;
        if (d.length) {
          var b = wi(d, Pl(Pw));
          g |= M;
        }
        return Rs(s, g, i, d, b);
      }), US = We(function(s, i, d) {
        var g = x | w;
        if (d.length) {
          var b = wi(d, Pl(US));
          g |= M;
        }
        return Rs(i, g, s, d, b);
      });
      function HS(s, i, d) {
        i = d ? t : i;
        var g = Rs(s, S, t, t, t, t, t, i);
        return g.placeholder = HS.placeholder, g;
      }
      function GS(s, i, d) {
        i = d ? t : i;
        var g = Rs(s, P, t, t, t, t, t, i);
        return g.placeholder = GS.placeholder, g;
      }
      function VS(s, i, d) {
        var g, b, $, N, q, H, se = 0, ie = !1, le = !1, fe = !0;
        if (typeof s != "function")
          throw new qn(l);
        i = Hn(i) || 0, Na(d) && (ie = !!d.leading, le = "maxWait" in d, $ = le ? Ja(Hn(d.maxWait) || 0, i) : $, fe = "trailing" in d ? !!d.trailing : fe);
        function Ee(Ha) {
          var cr = g, qs = b;
          return g = b = t, se = Ha, N = s.apply(qs, cr), N;
        }
        function Se(Ha) {
          return se = Ha, q = ju(Ge, i), ie ? Ee(Ha) : N;
        }
        function Fe(Ha) {
          var cr = Ha - H, qs = Ha - se, p2 = i - cr;
          return le ? jt(p2, $ - qs) : p2;
        }
        function Oe(Ha) {
          var cr = Ha - H, qs = Ha - se;
          return H === t || cr >= i || cr < 0 || le && qs >= $;
        }
        function Ge() {
          var Ha = wg();
          if (Oe(Ha))
            return Je(Ha);
          q = ju(Ge, Fe(Ha));
        }
        function Je(Ha) {
          return q = t, fe && g ? Ee(Ha) : (g = b = t, N);
        }
        function Tn() {
          q !== t && nS(q), se = 0, g = H = b = q = t;
        }
        function qt() {
          return q === t ? N : Je(wg());
        }
        function $n() {
          var Ha = wg(), cr = Oe(Ha);
          if (g = arguments, b = this, H = Ha, cr) {
            if (q === t)
              return Se(H);
            if (le)
              return nS(q), q = ju(Ge, i), Ee(H);
          }
          return q === t && (q = ju(Ge, i)), N;
        }
        return $n.cancel = Tn, $n.flush = qt, $n;
      }
      var EH = We(function(s, i) {
        return Dx(s, 1, i);
      }), AH = We(function(s, i, d) {
        return Dx(s, Hn(i) || 0, d);
      });
      function TH(s) {
        return Rs(s, F);
      }
      function vg(s, i) {
        if (typeof s != "function" || i != null && typeof i != "function")
          throw new qn(l);
        var d = function() {
          var g = arguments, b = i ? i.apply(this, g) : g[0], $ = d.cache;
          if ($.has(b))
            return $.get(b);
          var N = s.apply(this, g);
          return d.cache = $.set(b, N) || $, N;
        };
        return d.cache = new (vg.Cache || Cs)(), d;
      }
      vg.Cache = Cs;
      function kg(s) {
        if (typeof s != "function")
          throw new qn(l);
        return function() {
          var i = arguments;
          switch (i.length) {
            case 0:
              return !s.call(this);
            case 1:
              return !s.call(this, i[0]);
            case 2:
              return !s.call(this, i[0], i[1]);
            case 3:
              return !s.call(this, i[0], i[1], i[2]);
          }
          return !s.apply(this, i);
        };
      }
      function $H(s) {
        return WS(2, s);
      }
      var jH = m9(function(s, i) {
        i = i.length == 1 && Le(i[0]) ? Oa(i[0], _n(xe())) : Oa(yt(i, 1), _n(xe()));
        var d = i.length;
        return We(function(g) {
          for (var b = -1, $ = jt(g.length, d); ++b < $; )
            g[b] = i[b].call(this, g[b]);
          return kn(s, this, g);
        });
      }), Rw = We(function(s, i) {
        var d = wi(i, Pl(Rw));
        return Rs(s, M, t, i, d);
      }), KS = We(function(s, i) {
        var d = wi(i, Pl(KS));
        return Rs(s, G, t, i, d);
      }), xH = Ds(function(s, i) {
        return Rs(s, V, t, t, t, i);
      });
      function SH(s, i) {
        if (typeof s != "function")
          throw new qn(l);
        return i = i === t ? i : Me(i), We(s, i);
      }
      function OH(s, i) {
        if (typeof s != "function")
          throw new qn(l);
        return i = i == null ? 0 : Ja(Me(i), 0), We(function(d) {
          var g = d[i], b = Ai(d, 0, i);
          return g && bi(b, g), kn(s, this, b);
        });
      }
      function IH(s, i, d) {
        var g = !0, b = !0;
        if (typeof s != "function")
          throw new qn(l);
        return Na(d) && (g = "leading" in d ? !!d.leading : g, b = "trailing" in d ? !!d.trailing : b), VS(s, i, {
          leading: g,
          maxWait: i,
          trailing: b
        });
      }
      function CH(s) {
        return BS(s, 1);
      }
      function PH(s, i) {
        return Rw(bw(i), s);
      }
      function RH() {
        if (!arguments.length)
          return [];
        var s = arguments[0];
        return Le(s) ? s : [s];
      }
      function DH(s) {
        return Bn(s, O);
      }
      function NH(s, i) {
        return i = typeof i == "function" ? i : t, Bn(s, O, i);
      }
      function LH(s) {
        return Bn(s, z | O);
      }
      function MH(s, i) {
        return i = typeof i == "function" ? i : t, Bn(s, z | O, i);
      }
      function qH(s, i) {
        return i == null || Rx(s, i, it(i));
      }
      function ur(s, i) {
        return s === i || s !== s && i !== i;
      }
      var FH = mg(ow), BH = mg(function(s, i) {
        return s >= i;
      }), To = Fx(/* @__PURE__ */ function() {
        return arguments;
      }()) ? Fx : function(s) {
        return La(s) && fa.call(s, "callee") && !$x.call(s, "callee");
      }, Le = Z.isArray, WH = lx ? _n(lx) : XU;
      function sn(s) {
        return s != null && _g(s.length) && !Ls(s);
      }
      function Ua(s) {
        return La(s) && sn(s);
      }
      function UH(s) {
        return s === !0 || s === !1 || La(s) && Lt(s) == De;
      }
      var Ti = rU || Gw, HH = dx ? _n(dx) : ZU;
      function GH(s) {
        return La(s) && s.nodeType === 1 && !xu(s);
      }
      function VH(s) {
        if (s == null)
          return !0;
        if (sn(s) && (Le(s) || typeof s == "string" || typeof s.splice == "function" || Ti(s) || Rl(s) || To(s)))
          return !s.length;
        var i = xt(s);
        if (i == za || i == vn)
          return !s.size;
        if ($u(s))
          return !uw(s).length;
        for (var d in s)
          if (fa.call(s, d))
            return !1;
        return !0;
      }
      function KH(s, i) {
        return Eu(s, i);
      }
      function YH(s, i, d) {
        d = typeof d == "function" ? d : t;
        var g = d ? d(s, i) : t;
        return g === t ? Eu(s, i, t, d) : !!g;
      }
      function Dw(s) {
        if (!La(s))
          return !1;
        var i = Lt(s);
        return i == oa || i == va || typeof s.message == "string" && typeof s.name == "string" && !xu(s);
      }
      function QH(s) {
        return typeof s == "number" && xx(s);
      }
      function Ls(s) {
        if (!Na(s))
          return !1;
        var i = Lt(s);
        return i == Wa || i == Da || i == $e || i == Cb;
      }
      function YS(s) {
        return typeof s == "number" && s == Me(s);
      }
      function _g(s) {
        return typeof s == "number" && s > -1 && s % 1 == 0 && s <= ta;
      }
      function Na(s) {
        var i = typeof s;
        return s != null && (i == "object" || i == "function");
      }
      function La(s) {
        return s != null && typeof s == "object";
      }
      var QS = ux ? _n(ux) : e9;
      function XH(s, i) {
        return s === i || dw(s, i, Tw(i));
      }
      function ZH(s, i, d) {
        return d = typeof d == "function" ? d : t, dw(s, i, Tw(i), d);
      }
      function JH(s) {
        return XS(s) && s != +s;
      }
      function eG(s) {
        if (N9(s))
          throw new Ne(o);
        return Bx(s);
      }
      function aG(s) {
        return s === null;
      }
      function tG(s) {
        return s == null;
      }
      function XS(s) {
        return typeof s == "number" || La(s) && Lt(s) == $t;
      }
      function xu(s) {
        if (!La(s) || Lt(s) != or)
          return !1;
        var i = Qp(s);
        if (i === null)
          return !0;
        var d = fa.call(i, "constructor") && i.constructor;
        return typeof d == "function" && d instanceof d && Gp.call(d) == ZW;
      }
      var Nw = cx ? _n(cx) : a9;
      function nG(s) {
        return YS(s) && s >= -ta && s <= ta;
      }
      var ZS = px ? _n(px) : t9;
      function Eg(s) {
        return typeof s == "string" || !Le(s) && La(s) && Lt(s) == ja;
      }
      function An(s) {
        return typeof s == "symbol" || La(s) && Lt(s) == Xa;
      }
      var Rl = gx ? _n(gx) : n9;
      function rG(s) {
        return s === t;
      }
      function sG(s) {
        return La(s) && xt(s) == hi;
      }
      function iG(s) {
        return La(s) && Lt(s) == Dp;
      }
      var oG = mg(cw), lG = mg(function(s, i) {
        return s <= i;
      });
      function JS(s) {
        if (!s)
          return [];
        if (sn(s))
          return Eg(s) ? lr(s) : rn(s);
        if (hu && s[hu])
          return qW(s[hu]());
        var i = xt(s), d = i == za ? Zb : i == vn ? Wp : Dl;
        return d(s);
      }
      function Ms(s) {
        if (!s)
          return s === 0 ? s : 0;
        if (s = Hn(s), s === me || s === -me) {
          var i = s < 0 ? -1 : 1;
          return i * Dn;
        }
        return s === s ? s : 0;
      }
      function Me(s) {
        var i = Ms(s), d = i % 1;
        return i === i ? d ? i - d : i : 0;
      }
      function e2(s) {
        return s ? ko(Me(s), 0, Ae) : 0;
      }
      function Hn(s) {
        if (typeof s == "number")
          return s;
        if (An(s))
          return ze;
        if (Na(s)) {
          var i = typeof s.valueOf == "function" ? s.valueOf() : s;
          s = Na(i) ? i + "" : i;
        }
        if (typeof s != "string")
          return s === 0 ? s : +s;
        s = bx(s);
        var d = W5.test(s);
        return d || H5.test(s) ? _W(s.slice(2), d ? 2 : 8) : B5.test(s) ? ze : +s;
      }
      function a2(s) {
        return Yr(s, on(s));
      }
      function dG(s) {
        return s ? ko(Me(s), -ta, ta) : s === 0 ? s : 0;
      }
      function ua(s) {
        return s == null ? "" : En(s);
      }
      var uG = Il(function(s, i) {
        if ($u(i) || sn(i)) {
          Yr(i, it(i), s);
          return;
        }
        for (var d in i)
          fa.call(i, d) && vu(s, d, i[d]);
      }), t2 = Il(function(s, i) {
        Yr(i, on(i), s);
      }), Ag = Il(function(s, i, d, g) {
        Yr(i, on(i), s, g);
      }), cG = Il(function(s, i, d, g) {
        Yr(i, it(i), s, g);
      }), pG = Ds(rw);
      function gG(s, i) {
        var d = Ol(s);
        return i == null ? d : Px(d, i);
      }
      var mG = We(function(s, i) {
        s = ba(s);
        var d = -1, g = i.length, b = g > 2 ? i[2] : t;
        for (b && Mt(i[0], i[1], b) && (g = 1); ++d < g; )
          for (var $ = i[d], N = on($), q = -1, H = N.length; ++q < H; ) {
            var se = N[q], ie = s[se];
            (ie === t || ur(ie, jl[se]) && !fa.call(s, se)) && (s[se] = $[se]);
          }
        return s;
      }), fG = We(function(s) {
        return s.push(t, bS), kn(n2, t, s);
      });
      function hG(s, i) {
        return fx(s, xe(i, 3), Kr);
      }
      function yG(s, i) {
        return fx(s, xe(i, 3), iw);
      }
      function zG(s, i) {
        return s == null ? s : sw(s, xe(i, 3), on);
      }
      function bG(s, i) {
        return s == null ? s : Mx(s, xe(i, 3), on);
      }
      function wG(s, i) {
        return s && Kr(s, xe(i, 3));
      }
      function vG(s, i) {
        return s && iw(s, xe(i, 3));
      }
      function kG(s) {
        return s == null ? [] : ig(s, it(s));
      }
      function _G(s) {
        return s == null ? [] : ig(s, on(s));
      }
      function Lw(s, i, d) {
        var g = s == null ? t : _o(s, i);
        return g === t ? d : g;
      }
      function EG(s, i) {
        return s != null && kS(s, i, VU);
      }
      function Mw(s, i) {
        return s != null && kS(s, i, KU);
      }
      var AG = mS(function(s, i, d) {
        i != null && typeof i.toString != "function" && (i = Vp.call(i)), s[i] = d;
      }, Fw(ln)), TG = mS(function(s, i, d) {
        i != null && typeof i.toString != "function" && (i = Vp.call(i)), fa.call(s, i) ? s[i].push(d) : s[i] = [d];
      }, xe), $G = We(_u);
      function it(s) {
        return sn(s) ? Ix(s) : uw(s);
      }
      function on(s) {
        return sn(s) ? Ix(s, !0) : r9(s);
      }
      function jG(s, i) {
        var d = {};
        return i = xe(i, 3), Kr(s, function(g, b, $) {
          Ps(d, i(g, b, $), g);
        }), d;
      }
      function xG(s, i) {
        var d = {};
        return i = xe(i, 3), Kr(s, function(g, b, $) {
          Ps(d, b, i(g, b, $));
        }), d;
      }
      var SG = Il(function(s, i, d) {
        og(s, i, d);
      }), n2 = Il(function(s, i, d, g) {
        og(s, i, d, g);
      }), OG = Ds(function(s, i) {
        var d = {};
        if (s == null)
          return d;
        var g = !1;
        i = Oa(i, function($) {
          return $ = Ei($, s), g || (g = $.length > 1), $;
        }), Yr(s, Ew(s), d), g && (d = Bn(d, z | v | O, A9));
        for (var b = i.length; b--; )
          hw(d, i[b]);
        return d;
      });
      function IG(s, i) {
        return r2(s, kg(xe(i)));
      }
      var CG = Ds(function(s, i) {
        return s == null ? {} : i9(s, i);
      });
      function r2(s, i) {
        if (s == null)
          return {};
        var d = Oa(Ew(s), function(g) {
          return [g];
        });
        return i = xe(i), Yx(s, d, function(g, b) {
          return i(g, b[0]);
        });
      }
      function PG(s, i, d) {
        i = Ei(i, s);
        var g = -1, b = i.length;
        for (b || (b = 1, s = t); ++g < b; ) {
          var $ = s == null ? t : s[Qr(i[g])];
          $ === t && (g = b, $ = d), s = Ls($) ? $.call(s) : $;
        }
        return s;
      }
      function RG(s, i, d) {
        return s == null ? s : Au(s, i, d);
      }
      function DG(s, i, d, g) {
        return g = typeof g == "function" ? g : t, s == null ? s : Au(s, i, d, g);
      }
      var s2 = yS(it), i2 = yS(on);
      function NG(s, i, d) {
        var g = Le(s), b = g || Ti(s) || Rl(s);
        if (i = xe(i, 4), d == null) {
          var $ = s && s.constructor;
          b ? d = g ? new $() : [] : Na(s) ? d = Ls($) ? Ol(Qp(s)) : {} : d = {};
        }
        return (b ? Mn : Kr)(s, function(N, q, H) {
          return i(d, N, q, H);
        }), d;
      }
      function LG(s, i) {
        return s == null ? !0 : hw(s, i);
      }
      function MG(s, i, d) {
        return s == null ? s : eS(s, i, bw(d));
      }
      function qG(s, i, d, g) {
        return g = typeof g == "function" ? g : t, s == null ? s : eS(s, i, bw(d), g);
      }
      function Dl(s) {
        return s == null ? [] : Xb(s, it(s));
      }
      function FG(s) {
        return s == null ? [] : Xb(s, on(s));
      }
      function BG(s, i, d) {
        return d === t && (d = i, i = t), d !== t && (d = Hn(d), d = d === d ? d : 0), i !== t && (i = Hn(i), i = i === i ? i : 0), ko(Hn(s), i, d);
      }
      function WG(s, i, d) {
        return i = Ms(i), d === t ? (d = i, i = 0) : d = Ms(d), s = Hn(s), YU(s, i, d);
      }
      function UG(s, i, d) {
        if (d && typeof d != "boolean" && Mt(s, i, d) && (i = d = t), d === t && (typeof i == "boolean" ? (d = i, i = t) : typeof s == "boolean" && (d = s, s = t)), s === t && i === t ? (s = 0, i = 1) : (s = Ms(s), i === t ? (i = s, s = 0) : i = Ms(i)), s > i) {
          var g = s;
          s = i, i = g;
        }
        if (d || s % 1 || i % 1) {
          var b = Sx();
          return jt(s + b * (i - s + kW("1e-" + ((b + "").length - 1))), i);
        }
        return gw(s, i);
      }
      var HG = Cl(function(s, i, d) {
        return i = i.toLowerCase(), s + (d ? o2(i) : i);
      });
      function o2(s) {
        return qw(ua(s).toLowerCase());
      }
      function l2(s) {
        return s = ua(s), s && s.replace(V5, RW).replace(pW, "");
      }
      function GG(s, i, d) {
        s = ua(s), i = En(i);
        var g = s.length;
        d = d === t ? g : ko(Me(d), 0, g);
        var b = d;
        return d -= i.length, d >= 0 && s.slice(d, b) == i;
      }
      function VG(s) {
        return s = ua(s), s && mu.test(s) ? s.replace(yo, DW) : s;
      }
      function KG(s) {
        return s = ua(s), s && B.test(s) ? s.replace(C, "\\$&") : s;
      }
      var YG = Cl(function(s, i, d) {
        return s + (d ? "-" : "") + i.toLowerCase();
      }), QG = Cl(function(s, i, d) {
        return s + (d ? " " : "") + i.toLowerCase();
      }), XG = cS("toLowerCase");
      function ZG(s, i, d) {
        s = ua(s), i = Me(i);
        var g = i ? Tl(s) : 0;
        if (!i || g >= i)
          return s;
        var b = (i - g) / 2;
        return gg(eg(b), d) + s + gg(Jp(b), d);
      }
      function JG(s, i, d) {
        s = ua(s), i = Me(i);
        var g = i ? Tl(s) : 0;
        return i && g < i ? s + gg(i - g, d) : s;
      }
      function eV(s, i, d) {
        s = ua(s), i = Me(i);
        var g = i ? Tl(s) : 0;
        return i && g < i ? gg(i - g, d) + s : s;
      }
      function aV(s, i, d) {
        return d || i == null ? i = 0 : i && (i = +i), lU(ua(s).replace(Q, ""), i || 0);
      }
      function tV(s, i, d) {
        return (d ? Mt(s, i, d) : i === t) ? i = 1 : i = Me(i), mw(ua(s), i);
      }
      function nV() {
        var s = arguments, i = ua(s[0]);
        return s.length < 3 ? i : i.replace(s[1], s[2]);
      }
      var rV = Cl(function(s, i, d) {
        return s + (d ? "_" : "") + i.toLowerCase();
      });
      function sV(s, i, d) {
        return d && typeof d != "number" && Mt(s, i, d) && (i = d = t), d = d === t ? Ae : d >>> 0, d ? (s = ua(s), s && (typeof i == "string" || i != null && !Nw(i)) && (i = En(i), !i && Al(s)) ? Ai(lr(s), 0, d) : s.split(i, d)) : [];
      }
      var iV = Cl(function(s, i, d) {
        return s + (d ? " " : "") + qw(i);
      });
      function oV(s, i, d) {
        return s = ua(s), d = d == null ? 0 : ko(Me(d), 0, s.length), i = En(i), s.slice(d, d + i.length) == i;
      }
      function lV(s, i, d) {
        var g = E.templateSettings;
        d && Mt(s, i, d) && (i = t), s = ua(s), i = Ag({}, i, g, zS);
        var b = Ag({}, i.imports, g.imports, zS), $ = it(b), N = Xb(b, $), q, H, se = 0, ie = i.interpolate || Lp, le = "__p += '", fe = Jb(
          (i.escape || Lp).source + "|" + ie.source + "|" + (ie === Np ? F5 : Lp).source + "|" + (i.evaluate || Lp).source + "|$",
          "g"
        ), Ee = "//# sourceURL=" + (fa.call(i, "sourceURL") ? (i.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++yW + "]") + `
`;
        s.replace(fe, function(Oe, Ge, Je, Tn, qt, $n) {
          return Je || (Je = Tn), le += s.slice(se, $n).replace(K5, NW), Ge && (q = !0, le += `' +
__e(` + Ge + `) +
'`), qt && (H = !0, le += `';
` + qt + `;
__p += '`), Je && (le += `' +
((__t = (` + Je + `)) == null ? '' : __t) +
'`), se = $n + Oe.length, Oe;
        }), le += `';
`;
        var Se = fa.call(i, "variable") && i.variable;
        if (!Se)
          le = `with (obj) {
` + le + `
}
`;
        else if (ma.test(Se))
          throw new Ne(u);
        le = (H ? le.replace(pu, "") : le).replace(Pb, "$1").replace(Rb, "$1;"), le = "function(" + (Se || "obj") + `) {
` + (Se ? "" : `obj || (obj = {});
`) + "var __t, __p = ''" + (q ? ", __e = _.escape" : "") + (H ? `, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
` : `;
`) + le + `return __p
}`;
        var Fe = u2(function() {
          return la($, Ee + "return " + le).apply(t, N);
        });
        if (Fe.source = le, Dw(Fe))
          throw Fe;
        return Fe;
      }
      function dV(s) {
        return ua(s).toLowerCase();
      }
      function uV(s) {
        return ua(s).toUpperCase();
      }
      function cV(s, i, d) {
        if (s = ua(s), s && (d || i === t))
          return bx(s);
        if (!s || !(i = En(i)))
          return s;
        var g = lr(s), b = lr(i), $ = wx(g, b), N = vx(g, b) + 1;
        return Ai(g, $, N).join("");
      }
      function pV(s, i, d) {
        if (s = ua(s), s && (d || i === t))
          return s.slice(0, _x(s) + 1);
        if (!s || !(i = En(i)))
          return s;
        var g = lr(s), b = vx(g, lr(i)) + 1;
        return Ai(g, 0, b).join("");
      }
      function gV(s, i, d) {
        if (s = ua(s), s && (d || i === t))
          return s.replace(Q, "");
        if (!s || !(i = En(i)))
          return s;
        var g = lr(s), b = wx(g, lr(i));
        return Ai(g, b).join("");
      }
      function mV(s, i) {
        var d = Y, g = X;
        if (Na(i)) {
          var b = "separator" in i ? i.separator : b;
          d = "length" in i ? Me(i.length) : d, g = "omission" in i ? En(i.omission) : g;
        }
        s = ua(s);
        var $ = s.length;
        if (Al(s)) {
          var N = lr(s);
          $ = N.length;
        }
        if (d >= $)
          return s;
        var q = d - Tl(g);
        if (q < 1)
          return g;
        var H = N ? Ai(N, 0, q).join("") : s.slice(0, q);
        if (b === t)
          return H + g;
        if (N && (q += H.length - q), Nw(b)) {
          if (s.slice(q).search(b)) {
            var se, ie = H;
            for (b.global || (b = Jb(b.source, ua(Fj.exec(b)) + "g")), b.lastIndex = 0; se = b.exec(ie); )
              var le = se.index;
            H = H.slice(0, le === t ? q : le);
          }
        } else if (s.indexOf(En(b), q) != q) {
          var fe = H.lastIndexOf(b);
          fe > -1 && (H = H.slice(0, fe));
        }
        return H + g;
      }
      function fV(s) {
        return s = ua(s), s && Nn.test(s) ? s.replace(gu, UW) : s;
      }
      var hV = Cl(function(s, i, d) {
        return s + (d ? " " : "") + i.toUpperCase();
      }), qw = cS("toUpperCase");
      function d2(s, i, d) {
        return s = ua(s), i = d ? t : i, i === t ? MW(s) ? VW(s) : SW(s) : s.match(i) || [];
      }
      var u2 = We(function(s, i) {
        try {
          return kn(s, t, i);
        } catch (d) {
          return Dw(d) ? d : new Ne(d);
        }
      }), yV = Ds(function(s, i) {
        return Mn(i, function(d) {
          d = Qr(d), Ps(s, d, Pw(s[d], s));
        }), s;
      });
      function zV(s) {
        var i = s == null ? 0 : s.length, d = xe();
        return s = i ? Oa(s, function(g) {
          if (typeof g[1] != "function")
            throw new qn(l);
          return [d(g[0]), g[1]];
        }) : [], We(function(g) {
          for (var b = -1; ++b < i; ) {
            var $ = s[b];
            if (kn($[0], this, g))
              return kn($[1], this, g);
          }
        });
      }
      function bV(s) {
        return UU(Bn(s, z));
      }
      function Fw(s) {
        return function() {
          return s;
        };
      }
      function wV(s, i) {
        return s == null || s !== s ? i : s;
      }
      var vV = gS(), kV = gS(!0);
      function ln(s) {
        return s;
      }
      function Bw(s) {
        return Wx(typeof s == "function" ? s : Bn(s, z));
      }
      function _V(s) {
        return Hx(Bn(s, z));
      }
      function EV(s, i) {
        return Gx(s, Bn(i, z));
      }
      var AV = We(function(s, i) {
        return function(d) {
          return _u(d, s, i);
        };
      }), TV = We(function(s, i) {
        return function(d) {
          return _u(s, d, i);
        };
      });
      function Ww(s, i, d) {
        var g = it(i), b = ig(i, g);
        d == null && !(Na(i) && (b.length || !g.length)) && (d = i, i = s, s = this, b = ig(i, it(i)));
        var $ = !(Na(d) && "chain" in d) || !!d.chain, N = Ls(s);
        return Mn(b, function(q) {
          var H = i[q];
          s[q] = H, N && (s.prototype[q] = function() {
            var se = this.__chain__;
            if ($ || se) {
              var ie = s(this.__wrapped__), le = ie.__actions__ = rn(this.__actions__);
              return le.push({ func: H, args: arguments, thisArg: s }), ie.__chain__ = se, ie;
            }
            return H.apply(s, bi([this.value()], arguments));
          });
        }), s;
      }
      function $V() {
        return ht._ === this && (ht._ = JW), this;
      }
      function Uw() {
      }
      function jV(s) {
        return s = Me(s), We(function(i) {
          return Vx(i, s);
        });
      }
      var xV = vw(Oa), SV = vw(mx), OV = vw(Gb);
      function c2(s) {
        return jw(s) ? Vb(Qr(s)) : o9(s);
      }
      function IV(s) {
        return function(i) {
          return s == null ? t : _o(s, i);
        };
      }
      var CV = fS(), PV = fS(!0);
      function Hw() {
        return [];
      }
      function Gw() {
        return !1;
      }
      function RV() {
        return {};
      }
      function DV() {
        return "";
      }
      function NV() {
        return !0;
      }
      function LV(s, i) {
        if (s = Me(s), s < 1 || s > ta)
          return [];
        var d = Ae, g = jt(s, Ae);
        i = xe(i), s -= Ae;
        for (var b = Qb(g, i); ++d < s; )
          i(d);
        return b;
      }
      function MV(s) {
        return Le(s) ? Oa(s, Qr) : An(s) ? [s] : rn(OS(ua(s)));
      }
      function qV(s) {
        var i = ++XW;
        return ua(s) + i;
      }
      var FV = pg(function(s, i) {
        return s + i;
      }, 0), BV = kw("ceil"), WV = pg(function(s, i) {
        return s / i;
      }, 1), UV = kw("floor");
      function HV(s) {
        return s && s.length ? sg(s, ln, ow) : t;
      }
      function GV(s, i) {
        return s && s.length ? sg(s, xe(i, 2), ow) : t;
      }
      function VV(s) {
        return yx(s, ln);
      }
      function KV(s, i) {
        return yx(s, xe(i, 2));
      }
      function YV(s) {
        return s && s.length ? sg(s, ln, cw) : t;
      }
      function QV(s, i) {
        return s && s.length ? sg(s, xe(i, 2), cw) : t;
      }
      var XV = pg(function(s, i) {
        return s * i;
      }, 1), ZV = kw("round"), JV = pg(function(s, i) {
        return s - i;
      }, 0);
      function eK(s) {
        return s && s.length ? Yb(s, ln) : 0;
      }
      function aK(s, i) {
        return s && s.length ? Yb(s, xe(i, 2)) : 0;
      }
      return E.after = _H, E.ary = BS, E.assign = uG, E.assignIn = t2, E.assignInWith = Ag, E.assignWith = cG, E.at = pG, E.before = WS, E.bind = Pw, E.bindAll = yV, E.bindKey = US, E.castArray = RH, E.chain = MS, E.chunk = U9, E.compact = H9, E.concat = G9, E.cond = zV, E.conforms = bV, E.constant = Fw, E.countBy = eH, E.create = gG, E.curry = HS, E.curryRight = GS, E.debounce = VS, E.defaults = mG, E.defaultsDeep = fG, E.defer = EH, E.delay = AH, E.difference = V9, E.differenceBy = K9, E.differenceWith = Y9, E.drop = Q9, E.dropRight = X9, E.dropRightWhile = Z9, E.dropWhile = J9, E.fill = e7, E.filter = tH, E.flatMap = sH, E.flatMapDeep = iH, E.flatMapDepth = oH, E.flatten = RS, E.flattenDeep = a7, E.flattenDepth = t7, E.flip = TH, E.flow = vV, E.flowRight = kV, E.fromPairs = n7, E.functions = kG, E.functionsIn = _G, E.groupBy = lH, E.initial = s7, E.intersection = i7, E.intersectionBy = o7, E.intersectionWith = l7, E.invert = AG, E.invertBy = TG, E.invokeMap = uH, E.iteratee = Bw, E.keyBy = cH, E.keys = it, E.keysIn = on, E.map = bg, E.mapKeys = jG, E.mapValues = xG, E.matches = _V, E.matchesProperty = EV, E.memoize = vg, E.merge = SG, E.mergeWith = n2, E.method = AV, E.methodOf = TV, E.mixin = Ww, E.negate = kg, E.nthArg = jV, E.omit = OG, E.omitBy = IG, E.once = $H, E.orderBy = pH, E.over = xV, E.overArgs = jH, E.overEvery = SV, E.overSome = OV, E.partial = Rw, E.partialRight = KS, E.partition = gH, E.pick = CG, E.pickBy = r2, E.property = c2, E.propertyOf = IV, E.pull = p7, E.pullAll = NS, E.pullAllBy = g7, E.pullAllWith = m7, E.pullAt = f7, E.range = CV, E.rangeRight = PV, E.rearg = xH, E.reject = hH, E.remove = h7, E.rest = SH, E.reverse = Iw, E.sampleSize = zH, E.set = RG, E.setWith = DG, E.shuffle = bH, E.slice = y7, E.sortBy = kH, E.sortedUniq = E7, E.sortedUniqBy = A7, E.split = sV, E.spread = OH, E.tail = T7, E.take = $7, E.takeRight = j7, E.takeRightWhile = x7, E.takeWhile = S7, E.tap = H7, E.throttle = IH, E.thru = zg, E.toArray = JS, E.toPairs = s2, E.toPairsIn = i2, E.toPath = MV, E.toPlainObject = a2, E.transform = NG, E.unary = CH, E.union = O7, E.unionBy = I7, E.unionWith = C7, E.uniq = P7, E.uniqBy = R7, E.uniqWith = D7, E.unset = LG, E.unzip = Cw, E.unzipWith = LS, E.update = MG, E.updateWith = qG, E.values = Dl, E.valuesIn = FG, E.without = N7, E.words = d2, E.wrap = PH, E.xor = L7, E.xorBy = M7, E.xorWith = q7, E.zip = F7, E.zipObject = B7, E.zipObjectDeep = W7, E.zipWith = U7, E.entries = s2, E.entriesIn = i2, E.extend = t2, E.extendWith = Ag, Ww(E, E), E.add = FV, E.attempt = u2, E.camelCase = HG, E.capitalize = o2, E.ceil = BV, E.clamp = BG, E.clone = DH, E.cloneDeep = LH, E.cloneDeepWith = MH, E.cloneWith = NH, E.conformsTo = qH, E.deburr = l2, E.defaultTo = wV, E.divide = WV, E.endsWith = GG, E.eq = ur, E.escape = VG, E.escapeRegExp = KG, E.every = aH, E.find = nH, E.findIndex = CS, E.findKey = hG, E.findLast = rH, E.findLastIndex = PS, E.findLastKey = yG, E.floor = UV, E.forEach = qS, E.forEachRight = FS, E.forIn = zG, E.forInRight = bG, E.forOwn = wG, E.forOwnRight = vG, E.get = Lw, E.gt = FH, E.gte = BH, E.has = EG, E.hasIn = Mw, E.head = DS, E.identity = ln, E.includes = dH, E.indexOf = r7, E.inRange = WG, E.invoke = $G, E.isArguments = To, E.isArray = Le, E.isArrayBuffer = WH, E.isArrayLike = sn, E.isArrayLikeObject = Ua, E.isBoolean = UH, E.isBuffer = Ti, E.isDate = HH, E.isElement = GH, E.isEmpty = VH, E.isEqual = KH, E.isEqualWith = YH, E.isError = Dw, E.isFinite = QH, E.isFunction = Ls, E.isInteger = YS, E.isLength = _g, E.isMap = QS, E.isMatch = XH, E.isMatchWith = ZH, E.isNaN = JH, E.isNative = eG, E.isNil = tG, E.isNull = aG, E.isNumber = XS, E.isObject = Na, E.isObjectLike = La, E.isPlainObject = xu, E.isRegExp = Nw, E.isSafeInteger = nG, E.isSet = ZS, E.isString = Eg, E.isSymbol = An, E.isTypedArray = Rl, E.isUndefined = rG, E.isWeakMap = sG, E.isWeakSet = iG, E.join = d7, E.kebabCase = YG, E.last = Un, E.lastIndexOf = u7, E.lowerCase = QG, E.lowerFirst = XG, E.lt = oG, E.lte = lG, E.max = HV, E.maxBy = GV, E.mean = VV, E.meanBy = KV, E.min = YV, E.minBy = QV, E.stubArray = Hw, E.stubFalse = Gw, E.stubObject = RV, E.stubString = DV, E.stubTrue = NV, E.multiply = XV, E.nth = c7, E.noConflict = $V, E.noop = Uw, E.now = wg, E.pad = ZG, E.padEnd = JG, E.padStart = eV, E.parseInt = aV, E.random = UG, E.reduce = mH, E.reduceRight = fH, E.repeat = tV, E.replace = nV, E.result = PG, E.round = ZV, E.runInContext = W, E.sample = yH, E.size = wH, E.snakeCase = rV, E.some = vH, E.sortedIndex = z7, E.sortedIndexBy = b7, E.sortedIndexOf = w7, E.sortedLastIndex = v7, E.sortedLastIndexBy = k7, E.sortedLastIndexOf = _7, E.startCase = iV, E.startsWith = oV, E.subtract = JV, E.sum = eK, E.sumBy = aK, E.template = lV, E.times = LV, E.toFinite = Ms, E.toInteger = Me, E.toLength = e2, E.toLower = dV, E.toNumber = Hn, E.toSafeInteger = dG, E.toString = ua, E.toUpper = uV, E.trim = cV, E.trimEnd = pV, E.trimStart = gV, E.truncate = mV, E.unescape = fV, E.uniqueId = qV, E.upperCase = hV, E.upperFirst = qw, E.each = qS, E.eachRight = FS, E.first = DS, Ww(E, function() {
        var s = {};
        return Kr(E, function(i, d) {
          fa.call(E.prototype, d) || (s[d] = i);
        }), s;
      }(), { chain: !1 }), E.VERSION = n, Mn(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(s) {
        E[s].placeholder = E;
      }), Mn(["drop", "take"], function(s, i) {
        Xe.prototype[s] = function(d) {
          d = d === t ? 1 : Ja(Me(d), 0);
          var g = this.__filtered__ && !i ? new Xe(this) : this.clone();
          return g.__filtered__ ? g.__takeCount__ = jt(d, g.__takeCount__) : g.__views__.push({
            size: jt(d, Ae),
            type: s + (g.__dir__ < 0 ? "Right" : "")
          }), g;
        }, Xe.prototype[s + "Right"] = function(d) {
          return this.reverse()[s](d).reverse();
        };
      }), Mn(["filter", "map", "takeWhile"], function(s, i) {
        var d = i + 1, g = d == ve || d == Pe;
        Xe.prototype[s] = function(b) {
          var $ = this.clone();
          return $.__iteratees__.push({
            iteratee: xe(b, 3),
            type: d
          }), $.__filtered__ = $.__filtered__ || g, $;
        };
      }), Mn(["head", "last"], function(s, i) {
        var d = "take" + (i ? "Right" : "");
        Xe.prototype[s] = function() {
          return this[d](1).value()[0];
        };
      }), Mn(["initial", "tail"], function(s, i) {
        var d = "drop" + (i ? "" : "Right");
        Xe.prototype[s] = function() {
          return this.__filtered__ ? new Xe(this) : this[d](1);
        };
      }), Xe.prototype.compact = function() {
        return this.filter(ln);
      }, Xe.prototype.find = function(s) {
        return this.filter(s).head();
      }, Xe.prototype.findLast = function(s) {
        return this.reverse().find(s);
      }, Xe.prototype.invokeMap = We(function(s, i) {
        return typeof s == "function" ? new Xe(this) : this.map(function(d) {
          return _u(d, s, i);
        });
      }), Xe.prototype.reject = function(s) {
        return this.filter(kg(xe(s)));
      }, Xe.prototype.slice = function(s, i) {
        s = Me(s);
        var d = this;
        return d.__filtered__ && (s > 0 || i < 0) ? new Xe(d) : (s < 0 ? d = d.takeRight(-s) : s && (d = d.drop(s)), i !== t && (i = Me(i), d = i < 0 ? d.dropRight(-i) : d.take(i - s)), d);
      }, Xe.prototype.takeRightWhile = function(s) {
        return this.reverse().takeWhile(s).reverse();
      }, Xe.prototype.toArray = function() {
        return this.take(Ae);
      }, Kr(Xe.prototype, function(s, i) {
        var d = /^(?:filter|find|map|reject)|While$/.test(i), g = /^(?:head|last)$/.test(i), b = E[g ? "take" + (i == "last" ? "Right" : "") : i], $ = g || /^find/.test(i);
        b && (E.prototype[i] = function() {
          var N = this.__wrapped__, q = g ? [1] : arguments, H = N instanceof Xe, se = q[0], ie = H || Le(N), le = function(Ge) {
            var Je = b.apply(E, bi([Ge], q));
            return g && fe ? Je[0] : Je;
          };
          ie && d && typeof se == "function" && se.length != 1 && (H = ie = !1);
          var fe = this.__chain__, Ee = !!this.__actions__.length, Se = $ && !fe, Fe = H && !Ee;
          if (!$ && ie) {
            N = Fe ? N : new Xe(this);
            var Oe = s.apply(N, q);
            return Oe.__actions__.push({ func: zg, args: [le], thisArg: t }), new Fn(Oe, fe);
          }
          return Se && Fe ? s.apply(this, q) : (Oe = this.thru(le), Se ? g ? Oe.value()[0] : Oe.value() : Oe);
        });
      }), Mn(["pop", "push", "shift", "sort", "splice", "unshift"], function(s) {
        var i = Up[s], d = /^(?:push|sort|unshift)$/.test(s) ? "tap" : "thru", g = /^(?:pop|shift)$/.test(s);
        E.prototype[s] = function() {
          var b = arguments;
          if (g && !this.__chain__) {
            var $ = this.value();
            return i.apply(Le($) ? $ : [], b);
          }
          return this[d](function(N) {
            return i.apply(Le(N) ? N : [], b);
          });
        };
      }), Kr(Xe.prototype, function(s, i) {
        var d = E[i];
        if (d) {
          var g = d.name + "";
          fa.call(Sl, g) || (Sl[g] = []), Sl[g].push({ name: i, func: d });
        }
      }), Sl[cg(t, w).name] = [{
        name: "wrapper",
        func: t
      }], Xe.prototype.clone = fU, Xe.prototype.reverse = hU, Xe.prototype.value = yU, E.prototype.at = G7, E.prototype.chain = V7, E.prototype.commit = K7, E.prototype.next = Y7, E.prototype.plant = X7, E.prototype.reverse = Z7, E.prototype.toJSON = E.prototype.valueOf = E.prototype.value = J7, E.prototype.first = E.prototype.head, hu && (E.prototype[hu] = Q7), E;
    }, $l = KW();
    zo ? ((zo.exports = $l)._ = $l, Bb._ = $l) : ht._ = $l;
  }).call(dt);
})(bm, bm.exports);
var K = bm.exports, BR = { exports: {} };
(function(e) {
  (function(a, t) {
    e.exports ? e.exports = t() : a.log = t();
  })(dt, function() {
    var a = function() {
    }, t = "undefined", n = typeof window !== t && typeof window.navigator !== t && /Trident\/|MSIE /.test(window.navigator.userAgent), r = [
      "trace",
      "debug",
      "info",
      "warn",
      "error"
    ], o = {}, l = null;
    function u(A, x) {
      var w = A[x];
      if (typeof w.bind == "function")
        return w.bind(A);
      try {
        return Function.prototype.bind.call(w, A);
      } catch {
        return function() {
          return Function.prototype.apply.apply(w, [A, arguments]);
        };
      }
    }
    function c() {
      console.log && (console.log.apply ? console.log.apply(console, arguments) : Function.prototype.apply.apply(console.log, [console, arguments])), console.trace && console.trace();
    }
    function f(A) {
      return A === "debug" && (A = "log"), typeof console === t ? !1 : A === "trace" && n ? c : console[A] !== void 0 ? u(console, A) : console.log !== void 0 ? u(console, "log") : a;
    }
    function y() {
      for (var A = this.getLevel(), x = 0; x < r.length; x++) {
        var w = r[x];
        this[w] = x < A ? a : this.methodFactory(w, A, this.name);
      }
      if (this.log = this.debug, typeof console === t && A < this.levels.SILENT)
        return "No console available for logging";
    }
    function z(A) {
      return function() {
        typeof console !== t && (y.call(this), this[A].apply(this, arguments));
      };
    }
    function v(A, x, w) {
      return f(A) || z.apply(this, arguments);
    }
    function O(A, x) {
      var w = this, j, S, P, M = "loglevel";
      typeof A == "string" ? M += ":" + A : typeof A == "symbol" && (M = void 0);
      function G(X) {
        var D = (r[X] || "silent").toUpperCase();
        if (!(typeof window === t || !M)) {
          try {
            window.localStorage[M] = D;
            return;
          } catch {
          }
          try {
            window.document.cookie = encodeURIComponent(M) + "=" + D + ";";
          } catch {
          }
        }
      }
      function U() {
        var X;
        if (!(typeof window === t || !M)) {
          try {
            X = window.localStorage[M];
          } catch {
          }
          if (typeof X === t)
            try {
              var D = window.document.cookie, de = encodeURIComponent(M), ve = D.indexOf(de + "=");
              ve !== -1 && (X = /^([^;]+)/.exec(
                D.slice(ve + de.length + 1)
              )[1]);
            } catch {
            }
          return w.levels[X] === void 0 && (X = void 0), X;
        }
      }
      function V() {
        if (!(typeof window === t || !M)) {
          try {
            window.localStorage.removeItem(M);
          } catch {
          }
          try {
            window.document.cookie = encodeURIComponent(M) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch {
          }
        }
      }
      function F(X) {
        var D = X;
        if (typeof D == "string" && w.levels[D.toUpperCase()] !== void 0 && (D = w.levels[D.toUpperCase()]), typeof D == "number" && D >= 0 && D <= w.levels.SILENT)
          return D;
        throw new TypeError("log.setLevel() called with invalid level: " + X);
      }
      w.name = A, w.levels = {
        TRACE: 0,
        DEBUG: 1,
        INFO: 2,
        WARN: 3,
        ERROR: 4,
        SILENT: 5
      }, w.methodFactory = x || v, w.getLevel = function() {
        return P ?? S ?? j;
      }, w.setLevel = function(X, D) {
        return P = F(X), D !== !1 && G(P), y.call(w);
      }, w.setDefaultLevel = function(X) {
        S = F(X), U() || w.setLevel(X, !1);
      }, w.resetLevel = function() {
        P = null, V(), y.call(w);
      }, w.enableAll = function(X) {
        w.setLevel(w.levels.TRACE, X);
      }, w.disableAll = function(X) {
        w.setLevel(w.levels.SILENT, X);
      }, w.rebuild = function() {
        if (l !== w && (j = F(l.getLevel())), y.call(w), l === w)
          for (var X in o)
            o[X].rebuild();
      }, j = F(
        l ? l.getLevel() : "WARN"
      );
      var Y = U();
      Y != null && (P = F(Y)), y.call(w);
    }
    l = new O(), l.getLogger = function(x) {
      if (typeof x != "symbol" && typeof x != "string" || x === "")
        throw new TypeError("You must supply a name when creating a logger.");
      var w = o[x];
      return w || (w = o[x] = new O(
        x,
        l.methodFactory
      )), w;
    };
    var I = typeof window !== t ? window.log : void 0;
    return l.noConflict = function() {
      return typeof window !== t && window.log === l && (window.log = I), l;
    }, l.getLoggers = function() {
      return o;
    }, l.default = l, l;
  });
})(BR);
var PK = BR.exports, m0 = {}, f0 = {}, WR = {}, oc = {}, qo = {}, Mm = {}, Qt = {};
Object.defineProperty(Qt, "__esModule", { value: !0 });
Qt.SEQUENCES = Qt.CODE_POINTS = Qt.REPLACEMENT_CHARACTER = void 0;
Qt.isSurrogate = DK;
Qt.isSurrogatePair = NK;
Qt.getSurrogatePairCodePoint = LK;
Qt.isControlCodePoint = MK;
Qt.isUndefinedCodePoint = qK;
const RK = /* @__PURE__ */ new Set([
  65534,
  65535,
  131070,
  131071,
  196606,
  196607,
  262142,
  262143,
  327678,
  327679,
  393214,
  393215,
  458750,
  458751,
  524286,
  524287,
  589822,
  589823,
  655358,
  655359,
  720894,
  720895,
  786430,
  786431,
  851966,
  851967,
  917502,
  917503,
  983038,
  983039,
  1048574,
  1048575,
  1114110,
  1114111
]);
Qt.REPLACEMENT_CHARACTER = "�";
var w2;
(function(e) {
  e[e.EOF = -1] = "EOF", e[e.NULL = 0] = "NULL", e[e.TABULATION = 9] = "TABULATION", e[e.CARRIAGE_RETURN = 13] = "CARRIAGE_RETURN", e[e.LINE_FEED = 10] = "LINE_FEED", e[e.FORM_FEED = 12] = "FORM_FEED", e[e.SPACE = 32] = "SPACE", e[e.EXCLAMATION_MARK = 33] = "EXCLAMATION_MARK", e[e.QUOTATION_MARK = 34] = "QUOTATION_MARK", e[e.AMPERSAND = 38] = "AMPERSAND", e[e.APOSTROPHE = 39] = "APOSTROPHE", e[e.HYPHEN_MINUS = 45] = "HYPHEN_MINUS", e[e.SOLIDUS = 47] = "SOLIDUS", e[e.DIGIT_0 = 48] = "DIGIT_0", e[e.DIGIT_9 = 57] = "DIGIT_9", e[e.SEMICOLON = 59] = "SEMICOLON", e[e.LESS_THAN_SIGN = 60] = "LESS_THAN_SIGN", e[e.EQUALS_SIGN = 61] = "EQUALS_SIGN", e[e.GREATER_THAN_SIGN = 62] = "GREATER_THAN_SIGN", e[e.QUESTION_MARK = 63] = "QUESTION_MARK", e[e.LATIN_CAPITAL_A = 65] = "LATIN_CAPITAL_A", e[e.LATIN_CAPITAL_Z = 90] = "LATIN_CAPITAL_Z", e[e.RIGHT_SQUARE_BRACKET = 93] = "RIGHT_SQUARE_BRACKET", e[e.GRAVE_ACCENT = 96] = "GRAVE_ACCENT", e[e.LATIN_SMALL_A = 97] = "LATIN_SMALL_A", e[e.LATIN_SMALL_Z = 122] = "LATIN_SMALL_Z";
})(w2 || (Qt.CODE_POINTS = w2 = {}));
Qt.SEQUENCES = {
  DASH_DASH: "--",
  CDATA_START: "[CDATA[",
  DOCTYPE: "doctype",
  SCRIPT: "script",
  PUBLIC: "public",
  SYSTEM: "system"
};
function DK(e) {
  return e >= 55296 && e <= 57343;
}
function NK(e) {
  return e >= 56320 && e <= 57343;
}
function LK(e, a) {
  return (e - 55296) * 1024 + 9216 + a;
}
function MK(e) {
  return e !== 32 && e !== 10 && e !== 13 && e !== 9 && e !== 12 && e >= 1 && e <= 31 || e >= 127 && e <= 159;
}
function qK(e) {
  return e >= 64976 && e <= 65007 || RK.has(e);
}
var Go = {};
Object.defineProperty(Go, "__esModule", { value: !0 });
Go.ERR = void 0;
var v2;
(function(e) {
  e.controlCharacterInInputStream = "control-character-in-input-stream", e.noncharacterInInputStream = "noncharacter-in-input-stream", e.surrogateInInputStream = "surrogate-in-input-stream", e.nonVoidHtmlElementStartTagWithTrailingSolidus = "non-void-html-element-start-tag-with-trailing-solidus", e.endTagWithAttributes = "end-tag-with-attributes", e.endTagWithTrailingSolidus = "end-tag-with-trailing-solidus", e.unexpectedSolidusInTag = "unexpected-solidus-in-tag", e.unexpectedNullCharacter = "unexpected-null-character", e.unexpectedQuestionMarkInsteadOfTagName = "unexpected-question-mark-instead-of-tag-name", e.invalidFirstCharacterOfTagName = "invalid-first-character-of-tag-name", e.unexpectedEqualsSignBeforeAttributeName = "unexpected-equals-sign-before-attribute-name", e.missingEndTagName = "missing-end-tag-name", e.unexpectedCharacterInAttributeName = "unexpected-character-in-attribute-name", e.unknownNamedCharacterReference = "unknown-named-character-reference", e.missingSemicolonAfterCharacterReference = "missing-semicolon-after-character-reference", e.unexpectedCharacterAfterDoctypeSystemIdentifier = "unexpected-character-after-doctype-system-identifier", e.unexpectedCharacterInUnquotedAttributeValue = "unexpected-character-in-unquoted-attribute-value", e.eofBeforeTagName = "eof-before-tag-name", e.eofInTag = "eof-in-tag", e.missingAttributeValue = "missing-attribute-value", e.missingWhitespaceBetweenAttributes = "missing-whitespace-between-attributes", e.missingWhitespaceAfterDoctypePublicKeyword = "missing-whitespace-after-doctype-public-keyword", e.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers = "missing-whitespace-between-doctype-public-and-system-identifiers", e.missingWhitespaceAfterDoctypeSystemKeyword = "missing-whitespace-after-doctype-system-keyword", e.missingQuoteBeforeDoctypePublicIdentifier = "missing-quote-before-doctype-public-identifier", e.missingQuoteBeforeDoctypeSystemIdentifier = "missing-quote-before-doctype-system-identifier", e.missingDoctypePublicIdentifier = "missing-doctype-public-identifier", e.missingDoctypeSystemIdentifier = "missing-doctype-system-identifier", e.abruptDoctypePublicIdentifier = "abrupt-doctype-public-identifier", e.abruptDoctypeSystemIdentifier = "abrupt-doctype-system-identifier", e.cdataInHtmlContent = "cdata-in-html-content", e.incorrectlyOpenedComment = "incorrectly-opened-comment", e.eofInScriptHtmlCommentLikeText = "eof-in-script-html-comment-like-text", e.eofInDoctype = "eof-in-doctype", e.nestedComment = "nested-comment", e.abruptClosingOfEmptyComment = "abrupt-closing-of-empty-comment", e.eofInComment = "eof-in-comment", e.incorrectlyClosedComment = "incorrectly-closed-comment", e.eofInCdata = "eof-in-cdata", e.absenceOfDigitsInNumericCharacterReference = "absence-of-digits-in-numeric-character-reference", e.nullCharacterReference = "null-character-reference", e.surrogateCharacterReference = "surrogate-character-reference", e.characterReferenceOutsideUnicodeRange = "character-reference-outside-unicode-range", e.controlCharacterReference = "control-character-reference", e.noncharacterCharacterReference = "noncharacter-character-reference", e.missingWhitespaceBeforeDoctypeName = "missing-whitespace-before-doctype-name", e.missingDoctypeName = "missing-doctype-name", e.invalidCharacterSequenceAfterDoctypeName = "invalid-character-sequence-after-doctype-name", e.duplicateAttribute = "duplicate-attribute", e.nonConformingDoctype = "non-conforming-doctype", e.missingDoctype = "missing-doctype", e.misplacedDoctype = "misplaced-doctype", e.endTagWithoutMatchingOpenElement = "end-tag-without-matching-open-element", e.closingOfElementWithOpenChildElements = "closing-of-element-with-open-child-elements", e.disallowedContentInNoscriptInHead = "disallowed-content-in-noscript-in-head", e.openElementsLeftAfterEof = "open-elements-left-after-eof", e.abandonedHeadElementChild = "abandoned-head-element-child", e.misplacedStartTagForHeadElement = "misplaced-start-tag-for-head-element", e.nestedNoscriptInHead = "nested-noscript-in-head", e.eofInElementThatCanContainOnlyText = "eof-in-element-that-can-contain-only-text";
})(v2 || (Go.ERR = v2 = {}));
Object.defineProperty(Mm, "__esModule", { value: !0 });
Mm.Preprocessor = void 0;
const Ft = Qt, Vw = Go, FK = 65536;
class BK {
  constructor(a) {
    this.handler = a, this.html = "", this.pos = -1, this.lastGapPos = -2, this.gapStack = [], this.skipNextNewLine = !1, this.lastChunkWritten = !1, this.endOfChunkHit = !1, this.bufferWaterline = FK, this.isEol = !1, this.lineStartPos = 0, this.droppedBufferSize = 0, this.line = 1, this.lastErrOffset = -1;
  }
  /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */
  get col() {
    return this.pos - this.lineStartPos + +(this.lastGapPos !== this.pos);
  }
  get offset() {
    return this.droppedBufferSize + this.pos;
  }
  getError(a, t) {
    const { line: n, col: r, offset: o } = this, l = r + t, u = o + t;
    return {
      code: a,
      startLine: n,
      endLine: n,
      startCol: l,
      endCol: l,
      startOffset: u,
      endOffset: u
    };
  }
  _err(a) {
    this.handler.onParseError && this.lastErrOffset !== this.offset && (this.lastErrOffset = this.offset, this.handler.onParseError(this.getError(a, 0)));
  }
  _addGap() {
    this.gapStack.push(this.lastGapPos), this.lastGapPos = this.pos;
  }
  _processSurrogate(a) {
    if (this.pos !== this.html.length - 1) {
      const t = this.html.charCodeAt(this.pos + 1);
      if ((0, Ft.isSurrogatePair)(t))
        return this.pos++, this._addGap(), (0, Ft.getSurrogatePairCodePoint)(a, t);
    } else if (!this.lastChunkWritten)
      return this.endOfChunkHit = !0, Ft.CODE_POINTS.EOF;
    return this._err(Vw.ERR.surrogateInInputStream), a;
  }
  willDropParsedChunk() {
    return this.pos > this.bufferWaterline;
  }
  dropParsedChunk() {
    this.willDropParsedChunk() && (this.html = this.html.substring(this.pos), this.lineStartPos -= this.pos, this.droppedBufferSize += this.pos, this.pos = 0, this.lastGapPos = -2, this.gapStack.length = 0);
  }
  write(a, t) {
    this.html.length > 0 ? this.html += a : this.html = a, this.endOfChunkHit = !1, this.lastChunkWritten = t;
  }
  insertHtmlAtCurrentPos(a) {
    this.html = this.html.substring(0, this.pos + 1) + a + this.html.substring(this.pos + 1), this.endOfChunkHit = !1;
  }
  startsWith(a, t) {
    if (this.pos + a.length > this.html.length)
      return this.endOfChunkHit = !this.lastChunkWritten, !1;
    if (t)
      return this.html.startsWith(a, this.pos);
    for (let n = 0; n < a.length; n++)
      if ((this.html.charCodeAt(this.pos + n) | 32) !== a.charCodeAt(n))
        return !1;
    return !0;
  }
  peek(a) {
    const t = this.pos + a;
    if (t >= this.html.length)
      return this.endOfChunkHit = !this.lastChunkWritten, Ft.CODE_POINTS.EOF;
    const n = this.html.charCodeAt(t);
    return n === Ft.CODE_POINTS.CARRIAGE_RETURN ? Ft.CODE_POINTS.LINE_FEED : n;
  }
  advance() {
    if (this.pos++, this.isEol && (this.isEol = !1, this.line++, this.lineStartPos = this.pos), this.pos >= this.html.length)
      return this.endOfChunkHit = !this.lastChunkWritten, Ft.CODE_POINTS.EOF;
    let a = this.html.charCodeAt(this.pos);
    return a === Ft.CODE_POINTS.CARRIAGE_RETURN ? (this.isEol = !0, this.skipNextNewLine = !0, Ft.CODE_POINTS.LINE_FEED) : a === Ft.CODE_POINTS.LINE_FEED && (this.isEol = !0, this.skipNextNewLine) ? (this.line--, this.skipNextNewLine = !1, this._addGap(), this.advance()) : (this.skipNextNewLine = !1, (0, Ft.isSurrogate)(a) && (a = this._processSurrogate(a)), this.handler.onParseError === null || a > 31 && a < 127 || a === Ft.CODE_POINTS.LINE_FEED || a === Ft.CODE_POINTS.CARRIAGE_RETURN || a > 159 && a < 64976 || this._checkForProblematicCharacters(a), a);
  }
  _checkForProblematicCharacters(a) {
    (0, Ft.isControlCodePoint)(a) ? this._err(Vw.ERR.controlCharacterInInputStream) : (0, Ft.isUndefinedCodePoint)(a) && this._err(Vw.ERR.noncharacterInInputStream);
  }
  retreat(a) {
    for (this.pos -= a; this.pos < this.lastGapPos; )
      this.lastGapPos = this.gapStack.pop(), this.pos--;
    this.isEol = !1;
  }
}
Mm.Preprocessor = BK;
var Vo = {};
Object.defineProperty(Vo, "__esModule", { value: !0 });
Vo.TokenType = void 0;
Vo.getTokenAttr = WK;
var k2;
(function(e) {
  e[e.CHARACTER = 0] = "CHARACTER", e[e.NULL_CHARACTER = 1] = "NULL_CHARACTER", e[e.WHITESPACE_CHARACTER = 2] = "WHITESPACE_CHARACTER", e[e.START_TAG = 3] = "START_TAG", e[e.END_TAG = 4] = "END_TAG", e[e.COMMENT = 5] = "COMMENT", e[e.DOCTYPE = 6] = "DOCTYPE", e[e.EOF = 7] = "EOF", e[e.HIBERNATION = 8] = "HIBERNATION";
})(k2 || (Vo.TokenType = k2 = {}));
function WK(e, a) {
  for (let t = e.attrs.length - 1; t >= 0; t--)
    if (e.attrs[t].name === a)
      return e.attrs[t].value;
  return null;
}
var UR = {}, lc = {};
Object.defineProperty(lc, "__esModule", { value: !0 });
lc.htmlDecodeTree = void 0;
lc.htmlDecodeTree = new Uint16Array(
  // prettier-ignore
  /* @__PURE__ */ 'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((e) => e.charCodeAt(0))
);
var dc = {};
Object.defineProperty(dc, "__esModule", { value: !0 });
dc.xmlDecodeTree = void 0;
dc.xmlDecodeTree = new Uint16Array(
  // prettier-ignore
  /* @__PURE__ */ "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((e) => e.charCodeAt(0))
);
var Ck = {};
(function(e) {
  var a;
  Object.defineProperty(e, "__esModule", { value: !0 }), e.fromCodePoint = void 0, e.replaceCodePoint = n, e.decodeCodePoint = r;
  const t = /* @__PURE__ */ new Map([
    [0, 65533],
    // C1 Unicode control character reference replacements
    [128, 8364],
    [130, 8218],
    [131, 402],
    [132, 8222],
    [133, 8230],
    [134, 8224],
    [135, 8225],
    [136, 710],
    [137, 8240],
    [138, 352],
    [139, 8249],
    [140, 338],
    [142, 381],
    [145, 8216],
    [146, 8217],
    [147, 8220],
    [148, 8221],
    [149, 8226],
    [150, 8211],
    [151, 8212],
    [152, 732],
    [153, 8482],
    [154, 353],
    [155, 8250],
    [156, 339],
    [158, 382],
    [159, 376]
  ]);
  e.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, n/no-unsupported-features/es-builtins
  (a = String.fromCodePoint) !== null && a !== void 0 ? a : function(o) {
    let l = "";
    return o > 65535 && (o -= 65536, l += String.fromCharCode(o >>> 10 & 1023 | 55296), o = 56320 | o & 1023), l += String.fromCharCode(o), l;
  };
  function n(o) {
    var l;
    return o >= 55296 && o <= 57343 || o > 1114111 ? 65533 : (l = t.get(o)) !== null && l !== void 0 ? l : o;
  }
  function r(o) {
    return (0, e.fromCodePoint)(n(o));
  }
})(Ck);
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.fromCodePoint = e.replaceCodePoint = e.decodeCodePoint = e.xmlDecodeTree = e.htmlDecodeTree = e.EntityDecoder = e.DecodingMode = e.BinTrieFlags = void 0, e.determineBranch = A, e.decodeHTML = j, e.decodeHTMLAttribute = S, e.decodeHTMLStrict = P, e.decodeXML = M;
  const a = lc, t = dc, n = Ck;
  var r;
  (function(F) {
    F[F.NUM = 35] = "NUM", F[F.SEMI = 59] = "SEMI", F[F.EQUALS = 61] = "EQUALS", F[F.ZERO = 48] = "ZERO", F[F.NINE = 57] = "NINE", F[F.LOWER_A = 97] = "LOWER_A", F[F.LOWER_F = 102] = "LOWER_F", F[F.LOWER_X = 120] = "LOWER_X", F[F.LOWER_Z = 122] = "LOWER_Z", F[F.UPPER_A = 65] = "UPPER_A", F[F.UPPER_F = 70] = "UPPER_F", F[F.UPPER_Z = 90] = "UPPER_Z";
  })(r || (r = {}));
  const o = 32;
  var l;
  (function(F) {
    F[F.VALUE_LENGTH = 49152] = "VALUE_LENGTH", F[F.BRANCH_LENGTH = 16256] = "BRANCH_LENGTH", F[F.JUMP_TABLE = 127] = "JUMP_TABLE";
  })(l || (e.BinTrieFlags = l = {}));
  function u(F) {
    return F >= r.ZERO && F <= r.NINE;
  }
  function c(F) {
    return F >= r.UPPER_A && F <= r.UPPER_F || F >= r.LOWER_A && F <= r.LOWER_F;
  }
  function f(F) {
    return F >= r.UPPER_A && F <= r.UPPER_Z || F >= r.LOWER_A && F <= r.LOWER_Z || u(F);
  }
  function y(F) {
    return F === r.EQUALS || f(F);
  }
  var z;
  (function(F) {
    F[F.EntityStart = 0] = "EntityStart", F[F.NumericStart = 1] = "NumericStart", F[F.NumericDecimal = 2] = "NumericDecimal", F[F.NumericHex = 3] = "NumericHex", F[F.NamedEntity = 4] = "NamedEntity";
  })(z || (z = {}));
  var v;
  (function(F) {
    F[F.Legacy = 0] = "Legacy", F[F.Strict = 1] = "Strict", F[F.Attribute = 2] = "Attribute";
  })(v || (e.DecodingMode = v = {}));
  class O {
    constructor(Y, X, D) {
      this.decodeTree = Y, this.emitCodePoint = X, this.errors = D, this.state = z.EntityStart, this.consumed = 1, this.result = 0, this.treeIndex = 0, this.excess = 1, this.decodeMode = v.Strict;
    }
    /** Resets the instance to make it reusable. */
    startEntity(Y) {
      this.decodeMode = Y, this.state = z.EntityStart, this.result = 0, this.treeIndex = 0, this.excess = 1, this.consumed = 1;
    }
    /**
     * Write an entity to the decoder. This can be called multiple times with partial entities.
     * If the entity is incomplete, the decoder will return -1.
     *
     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
     * entity is incomplete, and resume when the next string is written.
     *
     * @param input The string containing the entity (or a continuation of the entity).
     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    write(Y, X) {
      switch (this.state) {
        case z.EntityStart:
          return Y.charCodeAt(X) === r.NUM ? (this.state = z.NumericStart, this.consumed += 1, this.stateNumericStart(Y, X + 1)) : (this.state = z.NamedEntity, this.stateNamedEntity(Y, X));
        case z.NumericStart:
          return this.stateNumericStart(Y, X);
        case z.NumericDecimal:
          return this.stateNumericDecimal(Y, X);
        case z.NumericHex:
          return this.stateNumericHex(Y, X);
        case z.NamedEntity:
          return this.stateNamedEntity(Y, X);
      }
    }
    /**
     * Switches between the numeric decimal and hexadecimal states.
     *
     * Equivalent to the `Numeric character reference state` in the HTML spec.
     *
     * @param input The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNumericStart(Y, X) {
      return X >= Y.length ? -1 : (Y.charCodeAt(X) | o) === r.LOWER_X ? (this.state = z.NumericHex, this.consumed += 1, this.stateNumericHex(Y, X + 1)) : (this.state = z.NumericDecimal, this.stateNumericDecimal(Y, X));
    }
    addToNumericResult(Y, X, D, de) {
      if (X !== D) {
        const ve = D - X;
        this.result = this.result * Math.pow(de, ve) + Number.parseInt(Y.substr(X, ve), de), this.consumed += ve;
      }
    }
    /**
     * Parses a hexadecimal numeric entity.
     *
     * Equivalent to the `Hexademical character reference state` in the HTML spec.
     *
     * @param input The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNumericHex(Y, X) {
      const D = X;
      for (; X < Y.length; ) {
        const de = Y.charCodeAt(X);
        if (u(de) || c(de))
          X += 1;
        else
          return this.addToNumericResult(Y, D, X, 16), this.emitNumericEntity(de, 3);
      }
      return this.addToNumericResult(Y, D, X, 16), -1;
    }
    /**
     * Parses a decimal numeric entity.
     *
     * Equivalent to the `Decimal character reference state` in the HTML spec.
     *
     * @param input The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNumericDecimal(Y, X) {
      const D = X;
      for (; X < Y.length; ) {
        const de = Y.charCodeAt(X);
        if (u(de))
          X += 1;
        else
          return this.addToNumericResult(Y, D, X, 10), this.emitNumericEntity(de, 2);
      }
      return this.addToNumericResult(Y, D, X, 10), -1;
    }
    /**
     * Validate and emit a numeric entity.
     *
     * Implements the logic from the `Hexademical character reference start
     * state` and `Numeric character reference end state` in the HTML spec.
     *
     * @param lastCp The last code point of the entity. Used to see if the
     *               entity was terminated with a semicolon.
     * @param expectedLength The minimum number of characters that should be
     *                       consumed. Used to validate that at least one digit
     *                       was consumed.
     * @returns The number of characters that were consumed.
     */
    emitNumericEntity(Y, X) {
      var D;
      if (this.consumed <= X)
        return (D = this.errors) === null || D === void 0 || D.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
      if (Y === r.SEMI)
        this.consumed += 1;
      else if (this.decodeMode === v.Strict)
        return 0;
      return this.emitCodePoint((0, n.replaceCodePoint)(this.result), this.consumed), this.errors && (Y !== r.SEMI && this.errors.missingSemicolonAfterCharacterReference(), this.errors.validateNumericCharacterReference(this.result)), this.consumed;
    }
    /**
     * Parses a named entity.
     *
     * Equivalent to the `Named character reference state` in the HTML spec.
     *
     * @param input The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNamedEntity(Y, X) {
      const { decodeTree: D } = this;
      let de = D[this.treeIndex], ve = (de & l.VALUE_LENGTH) >> 14;
      for (; X < Y.length; X++, this.excess++) {
        const we = Y.charCodeAt(X);
        if (this.treeIndex = A(D, de, this.treeIndex + Math.max(1, ve), we), this.treeIndex < 0)
          return this.result === 0 || // If we are parsing an attribute
          this.decodeMode === v.Attribute && // We shouldn't have consumed any characters after the entity,
          (ve === 0 || // And there should be no invalid characters.
          y(we)) ? 0 : this.emitNotTerminatedNamedEntity();
        if (de = D[this.treeIndex], ve = (de & l.VALUE_LENGTH) >> 14, ve !== 0) {
          if (we === r.SEMI)
            return this.emitNamedEntityData(this.treeIndex, ve, this.consumed + this.excess);
          this.decodeMode !== v.Strict && (this.result = this.treeIndex, this.consumed += this.excess, this.excess = 0);
        }
      }
      return -1;
    }
    /**
     * Emit a named entity that was not terminated with a semicolon.
     *
     * @returns The number of characters consumed.
     */
    emitNotTerminatedNamedEntity() {
      var Y;
      const { result: X, decodeTree: D } = this, de = (D[X] & l.VALUE_LENGTH) >> 14;
      return this.emitNamedEntityData(X, de, this.consumed), (Y = this.errors) === null || Y === void 0 || Y.missingSemicolonAfterCharacterReference(), this.consumed;
    }
    /**
     * Emit a named entity.
     *
     * @param result The index of the entity in the decode tree.
     * @param valueLength The number of bytes in the entity.
     * @param consumed The number of characters consumed.
     *
     * @returns The number of characters consumed.
     */
    emitNamedEntityData(Y, X, D) {
      const { decodeTree: de } = this;
      return this.emitCodePoint(X === 1 ? de[Y] & ~l.VALUE_LENGTH : de[Y + 1], D), X === 3 && this.emitCodePoint(de[Y + 2], D), D;
    }
    /**
     * Signal to the parser that the end of the input was reached.
     *
     * Remaining data will be emitted and relevant errors will be produced.
     *
     * @returns The number of characters consumed.
     */
    end() {
      var Y;
      switch (this.state) {
        case z.NamedEntity:
          return this.result !== 0 && (this.decodeMode !== v.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
        case z.NumericDecimal:
          return this.emitNumericEntity(0, 2);
        case z.NumericHex:
          return this.emitNumericEntity(0, 3);
        case z.NumericStart:
          return (Y = this.errors) === null || Y === void 0 || Y.absenceOfDigitsInNumericCharacterReference(this.consumed), 0;
        case z.EntityStart:
          return 0;
      }
    }
  }
  e.EntityDecoder = O;
  function I(F) {
    let Y = "";
    const X = new O(F, (D) => Y += (0, n.fromCodePoint)(D));
    return function(de, ve) {
      let we = 0, Pe = 0;
      for (; (Pe = de.indexOf("&", Pe)) >= 0; ) {
        Y += de.slice(we, Pe), X.startEntity(ve);
        const ta = X.write(
          de,
          // Skip the "&"
          Pe + 1
        );
        if (ta < 0) {
          we = Pe + X.end();
          break;
        }
        we = Pe + ta, Pe = ta === 0 ? we + 1 : we;
      }
      const me = Y + de.slice(we);
      return Y = "", me;
    };
  }
  function A(F, Y, X, D) {
    const de = (Y & l.BRANCH_LENGTH) >> 7, ve = Y & l.JUMP_TABLE;
    if (de === 0)
      return ve !== 0 && D === ve ? X : -1;
    if (ve) {
      const me = D - ve;
      return me < 0 || me >= de ? -1 : F[X + me] - 1;
    }
    let we = X, Pe = we + de - 1;
    for (; we <= Pe; ) {
      const me = we + Pe >>> 1, ta = F[me];
      if (ta < D)
        we = me + 1;
      else if (ta > D)
        Pe = me - 1;
      else
        return F[me + de];
    }
    return -1;
  }
  const x = /* @__PURE__ */ I(a.htmlDecodeTree), w = /* @__PURE__ */ I(t.xmlDecodeTree);
  function j(F, Y = v.Legacy) {
    return x(F, Y);
  }
  function S(F) {
    return x(F, v.Attribute);
  }
  function P(F) {
    return x(F, v.Strict);
  }
  function M(F) {
    return w(F, v.Strict);
  }
  var G = lc;
  Object.defineProperty(e, "htmlDecodeTree", { enumerable: !0, get: function() {
    return G.htmlDecodeTree;
  } });
  var U = dc;
  Object.defineProperty(e, "xmlDecodeTree", { enumerable: !0, get: function() {
    return U.xmlDecodeTree;
  } });
  var V = Ck;
  Object.defineProperty(e, "decodeCodePoint", { enumerable: !0, get: function() {
    return V.decodeCodePoint;
  } }), Object.defineProperty(e, "replaceCodePoint", { enumerable: !0, get: function() {
    return V.replaceCodePoint;
  } }), Object.defineProperty(e, "fromCodePoint", { enumerable: !0, get: function() {
    return V.fromCodePoint;
  } });
})(UR);
var Ta = {};
Object.defineProperty(Ta, "__esModule", { value: !0 });
Ta.NUMBERED_HEADERS = Ta.SPECIAL_ELEMENTS = Ta.TAG_ID = Ta.TAG_NAMES = Ta.DOCUMENT_MODE = Ta.ATTRS = Ta.NS = void 0;
Ta.getTagID = HK;
Ta.hasUnescapedText = VK;
var Li;
(function(e) {
  e.HTML = "http://www.w3.org/1999/xhtml", e.MATHML = "http://www.w3.org/1998/Math/MathML", e.SVG = "http://www.w3.org/2000/svg", e.XLINK = "http://www.w3.org/1999/xlink", e.XML = "http://www.w3.org/XML/1998/namespace", e.XMLNS = "http://www.w3.org/2000/xmlns/";
})(Li || (Ta.NS = Li = {}));
var _2;
(function(e) {
  e.TYPE = "type", e.ACTION = "action", e.ENCODING = "encoding", e.PROMPT = "prompt", e.NAME = "name", e.COLOR = "color", e.FACE = "face", e.SIZE = "size";
})(_2 || (Ta.ATTRS = _2 = {}));
var E2;
(function(e) {
  e.NO_QUIRKS = "no-quirks", e.QUIRKS = "quirks", e.LIMITED_QUIRKS = "limited-quirks";
})(E2 || (Ta.DOCUMENT_MODE = E2 = {}));
var J;
(function(e) {
  e.A = "a", e.ADDRESS = "address", e.ANNOTATION_XML = "annotation-xml", e.APPLET = "applet", e.AREA = "area", e.ARTICLE = "article", e.ASIDE = "aside", e.B = "b", e.BASE = "base", e.BASEFONT = "basefont", e.BGSOUND = "bgsound", e.BIG = "big", e.BLOCKQUOTE = "blockquote", e.BODY = "body", e.BR = "br", e.BUTTON = "button", e.CAPTION = "caption", e.CENTER = "center", e.CODE = "code", e.COL = "col", e.COLGROUP = "colgroup", e.DD = "dd", e.DESC = "desc", e.DETAILS = "details", e.DIALOG = "dialog", e.DIR = "dir", e.DIV = "div", e.DL = "dl", e.DT = "dt", e.EM = "em", e.EMBED = "embed", e.FIELDSET = "fieldset", e.FIGCAPTION = "figcaption", e.FIGURE = "figure", e.FONT = "font", e.FOOTER = "footer", e.FOREIGN_OBJECT = "foreignObject", e.FORM = "form", e.FRAME = "frame", e.FRAMESET = "frameset", e.H1 = "h1", e.H2 = "h2", e.H3 = "h3", e.H4 = "h4", e.H5 = "h5", e.H6 = "h6", e.HEAD = "head", e.HEADER = "header", e.HGROUP = "hgroup", e.HR = "hr", e.HTML = "html", e.I = "i", e.IMG = "img", e.IMAGE = "image", e.INPUT = "input", e.IFRAME = "iframe", e.KEYGEN = "keygen", e.LABEL = "label", e.LI = "li", e.LINK = "link", e.LISTING = "listing", e.MAIN = "main", e.MALIGNMARK = "malignmark", e.MARQUEE = "marquee", e.MATH = "math", e.MENU = "menu", e.META = "meta", e.MGLYPH = "mglyph", e.MI = "mi", e.MO = "mo", e.MN = "mn", e.MS = "ms", e.MTEXT = "mtext", e.NAV = "nav", e.NOBR = "nobr", e.NOFRAMES = "noframes", e.NOEMBED = "noembed", e.NOSCRIPT = "noscript", e.OBJECT = "object", e.OL = "ol", e.OPTGROUP = "optgroup", e.OPTION = "option", e.P = "p", e.PARAM = "param", e.PLAINTEXT = "plaintext", e.PRE = "pre", e.RB = "rb", e.RP = "rp", e.RT = "rt", e.RTC = "rtc", e.RUBY = "ruby", e.S = "s", e.SCRIPT = "script", e.SEARCH = "search", e.SECTION = "section", e.SELECT = "select", e.SOURCE = "source", e.SMALL = "small", e.SPAN = "span", e.STRIKE = "strike", e.STRONG = "strong", e.STYLE = "style", e.SUB = "sub", e.SUMMARY = "summary", e.SUP = "sup", e.TABLE = "table", e.TBODY = "tbody", e.TEMPLATE = "template", e.TEXTAREA = "textarea", e.TFOOT = "tfoot", e.TD = "td", e.TH = "th", e.THEAD = "thead", e.TITLE = "title", e.TR = "tr", e.TRACK = "track", e.TT = "tt", e.U = "u", e.UL = "ul", e.SVG = "svg", e.VAR = "var", e.WBR = "wbr", e.XMP = "xmp";
})(J || (Ta.TAG_NAMES = J = {}));
var ae;
(function(e) {
  e[e.UNKNOWN = 0] = "UNKNOWN", e[e.A = 1] = "A", e[e.ADDRESS = 2] = "ADDRESS", e[e.ANNOTATION_XML = 3] = "ANNOTATION_XML", e[e.APPLET = 4] = "APPLET", e[e.AREA = 5] = "AREA", e[e.ARTICLE = 6] = "ARTICLE", e[e.ASIDE = 7] = "ASIDE", e[e.B = 8] = "B", e[e.BASE = 9] = "BASE", e[e.BASEFONT = 10] = "BASEFONT", e[e.BGSOUND = 11] = "BGSOUND", e[e.BIG = 12] = "BIG", e[e.BLOCKQUOTE = 13] = "BLOCKQUOTE", e[e.BODY = 14] = "BODY", e[e.BR = 15] = "BR", e[e.BUTTON = 16] = "BUTTON", e[e.CAPTION = 17] = "CAPTION", e[e.CENTER = 18] = "CENTER", e[e.CODE = 19] = "CODE", e[e.COL = 20] = "COL", e[e.COLGROUP = 21] = "COLGROUP", e[e.DD = 22] = "DD", e[e.DESC = 23] = "DESC", e[e.DETAILS = 24] = "DETAILS", e[e.DIALOG = 25] = "DIALOG", e[e.DIR = 26] = "DIR", e[e.DIV = 27] = "DIV", e[e.DL = 28] = "DL", e[e.DT = 29] = "DT", e[e.EM = 30] = "EM", e[e.EMBED = 31] = "EMBED", e[e.FIELDSET = 32] = "FIELDSET", e[e.FIGCAPTION = 33] = "FIGCAPTION", e[e.FIGURE = 34] = "FIGURE", e[e.FONT = 35] = "FONT", e[e.FOOTER = 36] = "FOOTER", e[e.FOREIGN_OBJECT = 37] = "FOREIGN_OBJECT", e[e.FORM = 38] = "FORM", e[e.FRAME = 39] = "FRAME", e[e.FRAMESET = 40] = "FRAMESET", e[e.H1 = 41] = "H1", e[e.H2 = 42] = "H2", e[e.H3 = 43] = "H3", e[e.H4 = 44] = "H4", e[e.H5 = 45] = "H5", e[e.H6 = 46] = "H6", e[e.HEAD = 47] = "HEAD", e[e.HEADER = 48] = "HEADER", e[e.HGROUP = 49] = "HGROUP", e[e.HR = 50] = "HR", e[e.HTML = 51] = "HTML", e[e.I = 52] = "I", e[e.IMG = 53] = "IMG", e[e.IMAGE = 54] = "IMAGE", e[e.INPUT = 55] = "INPUT", e[e.IFRAME = 56] = "IFRAME", e[e.KEYGEN = 57] = "KEYGEN", e[e.LABEL = 58] = "LABEL", e[e.LI = 59] = "LI", e[e.LINK = 60] = "LINK", e[e.LISTING = 61] = "LISTING", e[e.MAIN = 62] = "MAIN", e[e.MALIGNMARK = 63] = "MALIGNMARK", e[e.MARQUEE = 64] = "MARQUEE", e[e.MATH = 65] = "MATH", e[e.MENU = 66] = "MENU", e[e.META = 67] = "META", e[e.MGLYPH = 68] = "MGLYPH", e[e.MI = 69] = "MI", e[e.MO = 70] = "MO", e[e.MN = 71] = "MN", e[e.MS = 72] = "MS", e[e.MTEXT = 73] = "MTEXT", e[e.NAV = 74] = "NAV", e[e.NOBR = 75] = "NOBR", e[e.NOFRAMES = 76] = "NOFRAMES", e[e.NOEMBED = 77] = "NOEMBED", e[e.NOSCRIPT = 78] = "NOSCRIPT", e[e.OBJECT = 79] = "OBJECT", e[e.OL = 80] = "OL", e[e.OPTGROUP = 81] = "OPTGROUP", e[e.OPTION = 82] = "OPTION", e[e.P = 83] = "P", e[e.PARAM = 84] = "PARAM", e[e.PLAINTEXT = 85] = "PLAINTEXT", e[e.PRE = 86] = "PRE", e[e.RB = 87] = "RB", e[e.RP = 88] = "RP", e[e.RT = 89] = "RT", e[e.RTC = 90] = "RTC", e[e.RUBY = 91] = "RUBY", e[e.S = 92] = "S", e[e.SCRIPT = 93] = "SCRIPT", e[e.SEARCH = 94] = "SEARCH", e[e.SECTION = 95] = "SECTION", e[e.SELECT = 96] = "SELECT", e[e.SOURCE = 97] = "SOURCE", e[e.SMALL = 98] = "SMALL", e[e.SPAN = 99] = "SPAN", e[e.STRIKE = 100] = "STRIKE", e[e.STRONG = 101] = "STRONG", e[e.STYLE = 102] = "STYLE", e[e.SUB = 103] = "SUB", e[e.SUMMARY = 104] = "SUMMARY", e[e.SUP = 105] = "SUP", e[e.TABLE = 106] = "TABLE", e[e.TBODY = 107] = "TBODY", e[e.TEMPLATE = 108] = "TEMPLATE", e[e.TEXTAREA = 109] = "TEXTAREA", e[e.TFOOT = 110] = "TFOOT", e[e.TD = 111] = "TD", e[e.TH = 112] = "TH", e[e.THEAD = 113] = "THEAD", e[e.TITLE = 114] = "TITLE", e[e.TR = 115] = "TR", e[e.TRACK = 116] = "TRACK", e[e.TT = 117] = "TT", e[e.U = 118] = "U", e[e.UL = 119] = "UL", e[e.SVG = 120] = "SVG", e[e.VAR = 121] = "VAR", e[e.WBR = 122] = "WBR", e[e.XMP = 123] = "XMP";
})(ae || (Ta.TAG_ID = ae = {}));
const UK = /* @__PURE__ */ new Map([
  [J.A, ae.A],
  [J.ADDRESS, ae.ADDRESS],
  [J.ANNOTATION_XML, ae.ANNOTATION_XML],
  [J.APPLET, ae.APPLET],
  [J.AREA, ae.AREA],
  [J.ARTICLE, ae.ARTICLE],
  [J.ASIDE, ae.ASIDE],
  [J.B, ae.B],
  [J.BASE, ae.BASE],
  [J.BASEFONT, ae.BASEFONT],
  [J.BGSOUND, ae.BGSOUND],
  [J.BIG, ae.BIG],
  [J.BLOCKQUOTE, ae.BLOCKQUOTE],
  [J.BODY, ae.BODY],
  [J.BR, ae.BR],
  [J.BUTTON, ae.BUTTON],
  [J.CAPTION, ae.CAPTION],
  [J.CENTER, ae.CENTER],
  [J.CODE, ae.CODE],
  [J.COL, ae.COL],
  [J.COLGROUP, ae.COLGROUP],
  [J.DD, ae.DD],
  [J.DESC, ae.DESC],
  [J.DETAILS, ae.DETAILS],
  [J.DIALOG, ae.DIALOG],
  [J.DIR, ae.DIR],
  [J.DIV, ae.DIV],
  [J.DL, ae.DL],
  [J.DT, ae.DT],
  [J.EM, ae.EM],
  [J.EMBED, ae.EMBED],
  [J.FIELDSET, ae.FIELDSET],
  [J.FIGCAPTION, ae.FIGCAPTION],
  [J.FIGURE, ae.FIGURE],
  [J.FONT, ae.FONT],
  [J.FOOTER, ae.FOOTER],
  [J.FOREIGN_OBJECT, ae.FOREIGN_OBJECT],
  [J.FORM, ae.FORM],
  [J.FRAME, ae.FRAME],
  [J.FRAMESET, ae.FRAMESET],
  [J.H1, ae.H1],
  [J.H2, ae.H2],
  [J.H3, ae.H3],
  [J.H4, ae.H4],
  [J.H5, ae.H5],
  [J.H6, ae.H6],
  [J.HEAD, ae.HEAD],
  [J.HEADER, ae.HEADER],
  [J.HGROUP, ae.HGROUP],
  [J.HR, ae.HR],
  [J.HTML, ae.HTML],
  [J.I, ae.I],
  [J.IMG, ae.IMG],
  [J.IMAGE, ae.IMAGE],
  [J.INPUT, ae.INPUT],
  [J.IFRAME, ae.IFRAME],
  [J.KEYGEN, ae.KEYGEN],
  [J.LABEL, ae.LABEL],
  [J.LI, ae.LI],
  [J.LINK, ae.LINK],
  [J.LISTING, ae.LISTING],
  [J.MAIN, ae.MAIN],
  [J.MALIGNMARK, ae.MALIGNMARK],
  [J.MARQUEE, ae.MARQUEE],
  [J.MATH, ae.MATH],
  [J.MENU, ae.MENU],
  [J.META, ae.META],
  [J.MGLYPH, ae.MGLYPH],
  [J.MI, ae.MI],
  [J.MO, ae.MO],
  [J.MN, ae.MN],
  [J.MS, ae.MS],
  [J.MTEXT, ae.MTEXT],
  [J.NAV, ae.NAV],
  [J.NOBR, ae.NOBR],
  [J.NOFRAMES, ae.NOFRAMES],
  [J.NOEMBED, ae.NOEMBED],
  [J.NOSCRIPT, ae.NOSCRIPT],
  [J.OBJECT, ae.OBJECT],
  [J.OL, ae.OL],
  [J.OPTGROUP, ae.OPTGROUP],
  [J.OPTION, ae.OPTION],
  [J.P, ae.P],
  [J.PARAM, ae.PARAM],
  [J.PLAINTEXT, ae.PLAINTEXT],
  [J.PRE, ae.PRE],
  [J.RB, ae.RB],
  [J.RP, ae.RP],
  [J.RT, ae.RT],
  [J.RTC, ae.RTC],
  [J.RUBY, ae.RUBY],
  [J.S, ae.S],
  [J.SCRIPT, ae.SCRIPT],
  [J.SEARCH, ae.SEARCH],
  [J.SECTION, ae.SECTION],
  [J.SELECT, ae.SELECT],
  [J.SOURCE, ae.SOURCE],
  [J.SMALL, ae.SMALL],
  [J.SPAN, ae.SPAN],
  [J.STRIKE, ae.STRIKE],
  [J.STRONG, ae.STRONG],
  [J.STYLE, ae.STYLE],
  [J.SUB, ae.SUB],
  [J.SUMMARY, ae.SUMMARY],
  [J.SUP, ae.SUP],
  [J.TABLE, ae.TABLE],
  [J.TBODY, ae.TBODY],
  [J.TEMPLATE, ae.TEMPLATE],
  [J.TEXTAREA, ae.TEXTAREA],
  [J.TFOOT, ae.TFOOT],
  [J.TD, ae.TD],
  [J.TH, ae.TH],
  [J.THEAD, ae.THEAD],
  [J.TITLE, ae.TITLE],
  [J.TR, ae.TR],
  [J.TRACK, ae.TRACK],
  [J.TT, ae.TT],
  [J.U, ae.U],
  [J.UL, ae.UL],
  [J.SVG, ae.SVG],
  [J.VAR, ae.VAR],
  [J.WBR, ae.WBR],
  [J.XMP, ae.XMP]
]);
function HK(e) {
  var a;
  return (a = UK.get(e)) !== null && a !== void 0 ? a : ae.UNKNOWN;
}
const ue = ae;
Ta.SPECIAL_ELEMENTS = {
  [Li.HTML]: /* @__PURE__ */ new Set([
    ue.ADDRESS,
    ue.APPLET,
    ue.AREA,
    ue.ARTICLE,
    ue.ASIDE,
    ue.BASE,
    ue.BASEFONT,
    ue.BGSOUND,
    ue.BLOCKQUOTE,
    ue.BODY,
    ue.BR,
    ue.BUTTON,
    ue.CAPTION,
    ue.CENTER,
    ue.COL,
    ue.COLGROUP,
    ue.DD,
    ue.DETAILS,
    ue.DIR,
    ue.DIV,
    ue.DL,
    ue.DT,
    ue.EMBED,
    ue.FIELDSET,
    ue.FIGCAPTION,
    ue.FIGURE,
    ue.FOOTER,
    ue.FORM,
    ue.FRAME,
    ue.FRAMESET,
    ue.H1,
    ue.H2,
    ue.H3,
    ue.H4,
    ue.H5,
    ue.H6,
    ue.HEAD,
    ue.HEADER,
    ue.HGROUP,
    ue.HR,
    ue.HTML,
    ue.IFRAME,
    ue.IMG,
    ue.INPUT,
    ue.LI,
    ue.LINK,
    ue.LISTING,
    ue.MAIN,
    ue.MARQUEE,
    ue.MENU,
    ue.META,
    ue.NAV,
    ue.NOEMBED,
    ue.NOFRAMES,
    ue.NOSCRIPT,
    ue.OBJECT,
    ue.OL,
    ue.P,
    ue.PARAM,
    ue.PLAINTEXT,
    ue.PRE,
    ue.SCRIPT,
    ue.SECTION,
    ue.SELECT,
    ue.SOURCE,
    ue.STYLE,
    ue.SUMMARY,
    ue.TABLE,
    ue.TBODY,
    ue.TD,
    ue.TEMPLATE,
    ue.TEXTAREA,
    ue.TFOOT,
    ue.TH,
    ue.THEAD,
    ue.TITLE,
    ue.TR,
    ue.TRACK,
    ue.UL,
    ue.WBR,
    ue.XMP
  ]),
  [Li.MATHML]: /* @__PURE__ */ new Set([ue.MI, ue.MO, ue.MN, ue.MS, ue.MTEXT, ue.ANNOTATION_XML]),
  [Li.SVG]: /* @__PURE__ */ new Set([ue.TITLE, ue.FOREIGN_OBJECT, ue.DESC]),
  [Li.XLINK]: /* @__PURE__ */ new Set(),
  [Li.XML]: /* @__PURE__ */ new Set(),
  [Li.XMLNS]: /* @__PURE__ */ new Set()
};
Ta.NUMBERED_HEADERS = /* @__PURE__ */ new Set([ue.H1, ue.H2, ue.H3, ue.H4, ue.H5, ue.H6]);
const GK = /* @__PURE__ */ new Set([
  J.STYLE,
  J.SCRIPT,
  J.XMP,
  J.IFRAME,
  J.NOEMBED,
  J.NOFRAMES,
  J.PLAINTEXT
]);
function VK(e, a) {
  return GK.has(e) || a && e === J.NOSCRIPT;
}
Object.defineProperty(qo, "__esModule", { value: !0 });
qo.Tokenizer = qo.TokenizerMode = void 0;
const KK = Mm, T = Qt, dn = Vo, jg = UR, oe = Go, Kw = Ta;
var R;
(function(e) {
  e[e.DATA = 0] = "DATA", e[e.RCDATA = 1] = "RCDATA", e[e.RAWTEXT = 2] = "RAWTEXT", e[e.SCRIPT_DATA = 3] = "SCRIPT_DATA", e[e.PLAINTEXT = 4] = "PLAINTEXT", e[e.TAG_OPEN = 5] = "TAG_OPEN", e[e.END_TAG_OPEN = 6] = "END_TAG_OPEN", e[e.TAG_NAME = 7] = "TAG_NAME", e[e.RCDATA_LESS_THAN_SIGN = 8] = "RCDATA_LESS_THAN_SIGN", e[e.RCDATA_END_TAG_OPEN = 9] = "RCDATA_END_TAG_OPEN", e[e.RCDATA_END_TAG_NAME = 10] = "RCDATA_END_TAG_NAME", e[e.RAWTEXT_LESS_THAN_SIGN = 11] = "RAWTEXT_LESS_THAN_SIGN", e[e.RAWTEXT_END_TAG_OPEN = 12] = "RAWTEXT_END_TAG_OPEN", e[e.RAWTEXT_END_TAG_NAME = 13] = "RAWTEXT_END_TAG_NAME", e[e.SCRIPT_DATA_LESS_THAN_SIGN = 14] = "SCRIPT_DATA_LESS_THAN_SIGN", e[e.SCRIPT_DATA_END_TAG_OPEN = 15] = "SCRIPT_DATA_END_TAG_OPEN", e[e.SCRIPT_DATA_END_TAG_NAME = 16] = "SCRIPT_DATA_END_TAG_NAME", e[e.SCRIPT_DATA_ESCAPE_START = 17] = "SCRIPT_DATA_ESCAPE_START", e[e.SCRIPT_DATA_ESCAPE_START_DASH = 18] = "SCRIPT_DATA_ESCAPE_START_DASH", e[e.SCRIPT_DATA_ESCAPED = 19] = "SCRIPT_DATA_ESCAPED", e[e.SCRIPT_DATA_ESCAPED_DASH = 20] = "SCRIPT_DATA_ESCAPED_DASH", e[e.SCRIPT_DATA_ESCAPED_DASH_DASH = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH", e[e.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN", e[e.SCRIPT_DATA_ESCAPED_END_TAG_OPEN = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN", e[e.SCRIPT_DATA_ESCAPED_END_TAG_NAME = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME", e[e.SCRIPT_DATA_DOUBLE_ESCAPE_START = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START", e[e.SCRIPT_DATA_DOUBLE_ESCAPED = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED", e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH", e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH", e[e.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN", e[e.SCRIPT_DATA_DOUBLE_ESCAPE_END = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END", e[e.BEFORE_ATTRIBUTE_NAME = 31] = "BEFORE_ATTRIBUTE_NAME", e[e.ATTRIBUTE_NAME = 32] = "ATTRIBUTE_NAME", e[e.AFTER_ATTRIBUTE_NAME = 33] = "AFTER_ATTRIBUTE_NAME", e[e.BEFORE_ATTRIBUTE_VALUE = 34] = "BEFORE_ATTRIBUTE_VALUE", e[e.ATTRIBUTE_VALUE_DOUBLE_QUOTED = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED", e[e.ATTRIBUTE_VALUE_SINGLE_QUOTED = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED", e[e.ATTRIBUTE_VALUE_UNQUOTED = 37] = "ATTRIBUTE_VALUE_UNQUOTED", e[e.AFTER_ATTRIBUTE_VALUE_QUOTED = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED", e[e.SELF_CLOSING_START_TAG = 39] = "SELF_CLOSING_START_TAG", e[e.BOGUS_COMMENT = 40] = "BOGUS_COMMENT", e[e.MARKUP_DECLARATION_OPEN = 41] = "MARKUP_DECLARATION_OPEN", e[e.COMMENT_START = 42] = "COMMENT_START", e[e.COMMENT_START_DASH = 43] = "COMMENT_START_DASH", e[e.COMMENT = 44] = "COMMENT", e[e.COMMENT_LESS_THAN_SIGN = 45] = "COMMENT_LESS_THAN_SIGN", e[e.COMMENT_LESS_THAN_SIGN_BANG = 46] = "COMMENT_LESS_THAN_SIGN_BANG", e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH", e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH", e[e.COMMENT_END_DASH = 49] = "COMMENT_END_DASH", e[e.COMMENT_END = 50] = "COMMENT_END", e[e.COMMENT_END_BANG = 51] = "COMMENT_END_BANG", e[e.DOCTYPE = 52] = "DOCTYPE", e[e.BEFORE_DOCTYPE_NAME = 53] = "BEFORE_DOCTYPE_NAME", e[e.DOCTYPE_NAME = 54] = "DOCTYPE_NAME", e[e.AFTER_DOCTYPE_NAME = 55] = "AFTER_DOCTYPE_NAME", e[e.AFTER_DOCTYPE_PUBLIC_KEYWORD = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD", e[e.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER", e[e.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED", e[e.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED", e[e.AFTER_DOCTYPE_PUBLIC_IDENTIFIER = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER", e[e.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS", e[e.AFTER_DOCTYPE_SYSTEM_KEYWORD = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD", e[e.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER", e[e.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED", e[e.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED", e[e.AFTER_DOCTYPE_SYSTEM_IDENTIFIER = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER", e[e.BOGUS_DOCTYPE = 67] = "BOGUS_DOCTYPE", e[e.CDATA_SECTION = 68] = "CDATA_SECTION", e[e.CDATA_SECTION_BRACKET = 69] = "CDATA_SECTION_BRACKET", e[e.CDATA_SECTION_END = 70] = "CDATA_SECTION_END", e[e.CHARACTER_REFERENCE = 71] = "CHARACTER_REFERENCE", e[e.AMBIGUOUS_AMPERSAND = 72] = "AMBIGUOUS_AMPERSAND";
})(R || (R = {}));
qo.TokenizerMode = {
  DATA: R.DATA,
  RCDATA: R.RCDATA,
  RAWTEXT: R.RAWTEXT,
  SCRIPT_DATA: R.SCRIPT_DATA,
  PLAINTEXT: R.PLAINTEXT,
  CDATA_SECTION: R.CDATA_SECTION
};
function YK(e) {
  return e >= T.CODE_POINTS.DIGIT_0 && e <= T.CODE_POINTS.DIGIT_9;
}
function Uu(e) {
  return e >= T.CODE_POINTS.LATIN_CAPITAL_A && e <= T.CODE_POINTS.LATIN_CAPITAL_Z;
}
function QK(e) {
  return e >= T.CODE_POINTS.LATIN_SMALL_A && e <= T.CODE_POINTS.LATIN_SMALL_Z;
}
function Ni(e) {
  return QK(e) || Uu(e);
}
function A2(e) {
  return Ni(e) || YK(e);
}
function xg(e) {
  return e + 32;
}
function HR(e) {
  return e === T.CODE_POINTS.SPACE || e === T.CODE_POINTS.LINE_FEED || e === T.CODE_POINTS.TABULATION || e === T.CODE_POINTS.FORM_FEED;
}
function T2(e) {
  return HR(e) || e === T.CODE_POINTS.SOLIDUS || e === T.CODE_POINTS.GREATER_THAN_SIGN;
}
function XK(e) {
  return e === T.CODE_POINTS.NULL ? oe.ERR.nullCharacterReference : e > 1114111 ? oe.ERR.characterReferenceOutsideUnicodeRange : (0, T.isSurrogate)(e) ? oe.ERR.surrogateCharacterReference : (0, T.isUndefinedCodePoint)(e) ? oe.ERR.noncharacterCharacterReference : (0, T.isControlCodePoint)(e) || e === T.CODE_POINTS.CARRIAGE_RETURN ? oe.ERR.controlCharacterReference : null;
}
let ZK = class {
  constructor(a, t) {
    this.options = a, this.handler = t, this.paused = !1, this.inLoop = !1, this.inForeignNode = !1, this.lastStartTagName = "", this.active = !1, this.state = R.DATA, this.returnState = R.DATA, this.entityStartPos = 0, this.consumedAfterSnapshot = -1, this.currentCharacterToken = null, this.currentToken = null, this.currentAttr = { name: "", value: "" }, this.preprocessor = new KK.Preprocessor(t), this.currentLocation = this.getCurrentLocation(-1), this.entityDecoder = new jg.EntityDecoder(jg.htmlDecodeTree, (n, r) => {
      this.preprocessor.pos = this.entityStartPos + r - 1, this._flushCodePointConsumedAsCharacterReference(n);
    }, t.onParseError ? {
      missingSemicolonAfterCharacterReference: () => {
        this._err(oe.ERR.missingSemicolonAfterCharacterReference, 1);
      },
      absenceOfDigitsInNumericCharacterReference: (n) => {
        this._err(oe.ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + n);
      },
      validateNumericCharacterReference: (n) => {
        const r = XK(n);
        r && this._err(r, 1);
      }
    } : void 0);
  }
  //Errors
  _err(a, t = 0) {
    var n, r;
    (r = (n = this.handler).onParseError) === null || r === void 0 || r.call(n, this.preprocessor.getError(a, t));
  }
  // NOTE: `offset` may never run across line boundaries.
  getCurrentLocation(a) {
    return this.options.sourceCodeLocationInfo ? {
      startLine: this.preprocessor.line,
      startCol: this.preprocessor.col - a,
      startOffset: this.preprocessor.offset - a,
      endLine: -1,
      endCol: -1,
      endOffset: -1
    } : null;
  }
  _runParsingLoop() {
    if (!this.inLoop) {
      for (this.inLoop = !0; this.active && !this.paused; ) {
        this.consumedAfterSnapshot = 0;
        const a = this._consume();
        this._ensureHibernation() || this._callState(a);
      }
      this.inLoop = !1;
    }
  }
  //API
  pause() {
    this.paused = !0;
  }
  resume(a) {
    if (!this.paused)
      throw new Error("Parser was already resumed");
    this.paused = !1, !this.inLoop && (this._runParsingLoop(), this.paused || a == null || a());
  }
  write(a, t, n) {
    this.active = !0, this.preprocessor.write(a, t), this._runParsingLoop(), this.paused || n == null || n();
  }
  insertHtmlAtCurrentPos(a) {
    this.active = !0, this.preprocessor.insertHtmlAtCurrentPos(a), this._runParsingLoop();
  }
  //Hibernation
  _ensureHibernation() {
    return this.preprocessor.endOfChunkHit ? (this.preprocessor.retreat(this.consumedAfterSnapshot), this.consumedAfterSnapshot = 0, this.active = !1, !0) : !1;
  }
  //Consumption
  _consume() {
    return this.consumedAfterSnapshot++, this.preprocessor.advance();
  }
  _advanceBy(a) {
    this.consumedAfterSnapshot += a;
    for (let t = 0; t < a; t++)
      this.preprocessor.advance();
  }
  _consumeSequenceIfMatch(a, t) {
    return this.preprocessor.startsWith(a, t) ? (this._advanceBy(a.length - 1), !0) : !1;
  }
  //Token creation
  _createStartTagToken() {
    this.currentToken = {
      type: dn.TokenType.START_TAG,
      tagName: "",
      tagID: Kw.TAG_ID.UNKNOWN,
      selfClosing: !1,
      ackSelfClosing: !1,
      attrs: [],
      location: this.getCurrentLocation(1)
    };
  }
  _createEndTagToken() {
    this.currentToken = {
      type: dn.TokenType.END_TAG,
      tagName: "",
      tagID: Kw.TAG_ID.UNKNOWN,
      selfClosing: !1,
      ackSelfClosing: !1,
      attrs: [],
      location: this.getCurrentLocation(2)
    };
  }
  _createCommentToken(a) {
    this.currentToken = {
      type: dn.TokenType.COMMENT,
      data: "",
      location: this.getCurrentLocation(a)
    };
  }
  _createDoctypeToken(a) {
    this.currentToken = {
      type: dn.TokenType.DOCTYPE,
      name: a,
      forceQuirks: !1,
      publicId: null,
      systemId: null,
      location: this.currentLocation
    };
  }
  _createCharacterToken(a, t) {
    this.currentCharacterToken = {
      type: a,
      chars: t,
      location: this.currentLocation
    };
  }
  //Tag attributes
  _createAttr(a) {
    this.currentAttr = {
      name: a,
      value: ""
    }, this.currentLocation = this.getCurrentLocation(0);
  }
  _leaveAttrName() {
    var a, t;
    const n = this.currentToken;
    if ((0, dn.getTokenAttr)(n, this.currentAttr.name) === null) {
      if (n.attrs.push(this.currentAttr), n.location && this.currentLocation) {
        const r = (a = (t = n.location).attrs) !== null && a !== void 0 ? a : t.attrs = /* @__PURE__ */ Object.create(null);
        r[this.currentAttr.name] = this.currentLocation, this._leaveAttrValue();
      }
    } else
      this._err(oe.ERR.duplicateAttribute);
  }
  _leaveAttrValue() {
    this.currentLocation && (this.currentLocation.endLine = this.preprocessor.line, this.currentLocation.endCol = this.preprocessor.col, this.currentLocation.endOffset = this.preprocessor.offset);
  }
  //Token emission
  prepareToken(a) {
    this._emitCurrentCharacterToken(a.location), this.currentToken = null, a.location && (a.location.endLine = this.preprocessor.line, a.location.endCol = this.preprocessor.col + 1, a.location.endOffset = this.preprocessor.offset + 1), this.currentLocation = this.getCurrentLocation(-1);
  }
  emitCurrentTagToken() {
    const a = this.currentToken;
    this.prepareToken(a), a.tagID = (0, Kw.getTagID)(a.tagName), a.type === dn.TokenType.START_TAG ? (this.lastStartTagName = a.tagName, this.handler.onStartTag(a)) : (a.attrs.length > 0 && this._err(oe.ERR.endTagWithAttributes), a.selfClosing && this._err(oe.ERR.endTagWithTrailingSolidus), this.handler.onEndTag(a)), this.preprocessor.dropParsedChunk();
  }
  emitCurrentComment(a) {
    this.prepareToken(a), this.handler.onComment(a), this.preprocessor.dropParsedChunk();
  }
  emitCurrentDoctype(a) {
    this.prepareToken(a), this.handler.onDoctype(a), this.preprocessor.dropParsedChunk();
  }
  _emitCurrentCharacterToken(a) {
    if (this.currentCharacterToken) {
      switch (a && this.currentCharacterToken.location && (this.currentCharacterToken.location.endLine = a.startLine, this.currentCharacterToken.location.endCol = a.startCol, this.currentCharacterToken.location.endOffset = a.startOffset), this.currentCharacterToken.type) {
        case dn.TokenType.CHARACTER: {
          this.handler.onCharacter(this.currentCharacterToken);
          break;
        }
        case dn.TokenType.NULL_CHARACTER: {
          this.handler.onNullCharacter(this.currentCharacterToken);
          break;
        }
        case dn.TokenType.WHITESPACE_CHARACTER: {
          this.handler.onWhitespaceCharacter(this.currentCharacterToken);
          break;
        }
      }
      this.currentCharacterToken = null;
    }
  }
  _emitEOFToken() {
    const a = this.getCurrentLocation(0);
    a && (a.endLine = a.startLine, a.endCol = a.startCol, a.endOffset = a.startOffset), this._emitCurrentCharacterToken(a), this.handler.onEof({ type: dn.TokenType.EOF, location: a }), this.active = !1;
  }
  //Characters emission
  //OPTIMIZATION: The specification uses only one type of character token (one token per character).
  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
  //If we have a sequence of characters that belong to the same group, the parser can process it
  //as a single solid character token.
  //So, there are 3 types of character tokens in parse5:
  //1)TokenType.NULL_CHARACTER - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
  //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
  //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
  _appendCharToCurrentCharacterToken(a, t) {
    if (this.currentCharacterToken)
      if (this.currentCharacterToken.type === a) {
        this.currentCharacterToken.chars += t;
        return;
      } else
        this.currentLocation = this.getCurrentLocation(0), this._emitCurrentCharacterToken(this.currentLocation), this.preprocessor.dropParsedChunk();
    this._createCharacterToken(a, t);
  }
  _emitCodePoint(a) {
    const t = HR(a) ? dn.TokenType.WHITESPACE_CHARACTER : a === T.CODE_POINTS.NULL ? dn.TokenType.NULL_CHARACTER : dn.TokenType.CHARACTER;
    this._appendCharToCurrentCharacterToken(t, String.fromCodePoint(a));
  }
  //NOTE: used when we emit characters explicitly.
  //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.
  _emitChars(a) {
    this._appendCharToCurrentCharacterToken(dn.TokenType.CHARACTER, a);
  }
  // Character reference helpers
  _startCharacterReference() {
    this.returnState = this.state, this.state = R.CHARACTER_REFERENCE, this.entityStartPos = this.preprocessor.pos, this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? jg.DecodingMode.Attribute : jg.DecodingMode.Legacy);
  }
  _isCharacterReferenceInAttribute() {
    return this.returnState === R.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === R.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === R.ATTRIBUTE_VALUE_UNQUOTED;
  }
  _flushCodePointConsumedAsCharacterReference(a) {
    this._isCharacterReferenceInAttribute() ? this.currentAttr.value += String.fromCodePoint(a) : this._emitCodePoint(a);
  }
  // Calling states this way turns out to be much faster than any other approach.
  _callState(a) {
    switch (this.state) {
      case R.DATA: {
        this._stateData(a);
        break;
      }
      case R.RCDATA: {
        this._stateRcdata(a);
        break;
      }
      case R.RAWTEXT: {
        this._stateRawtext(a);
        break;
      }
      case R.SCRIPT_DATA: {
        this._stateScriptData(a);
        break;
      }
      case R.PLAINTEXT: {
        this._statePlaintext(a);
        break;
      }
      case R.TAG_OPEN: {
        this._stateTagOpen(a);
        break;
      }
      case R.END_TAG_OPEN: {
        this._stateEndTagOpen(a);
        break;
      }
      case R.TAG_NAME: {
        this._stateTagName(a);
        break;
      }
      case R.RCDATA_LESS_THAN_SIGN: {
        this._stateRcdataLessThanSign(a);
        break;
      }
      case R.RCDATA_END_TAG_OPEN: {
        this._stateRcdataEndTagOpen(a);
        break;
      }
      case R.RCDATA_END_TAG_NAME: {
        this._stateRcdataEndTagName(a);
        break;
      }
      case R.RAWTEXT_LESS_THAN_SIGN: {
        this._stateRawtextLessThanSign(a);
        break;
      }
      case R.RAWTEXT_END_TAG_OPEN: {
        this._stateRawtextEndTagOpen(a);
        break;
      }
      case R.RAWTEXT_END_TAG_NAME: {
        this._stateRawtextEndTagName(a);
        break;
      }
      case R.SCRIPT_DATA_LESS_THAN_SIGN: {
        this._stateScriptDataLessThanSign(a);
        break;
      }
      case R.SCRIPT_DATA_END_TAG_OPEN: {
        this._stateScriptDataEndTagOpen(a);
        break;
      }
      case R.SCRIPT_DATA_END_TAG_NAME: {
        this._stateScriptDataEndTagName(a);
        break;
      }
      case R.SCRIPT_DATA_ESCAPE_START: {
        this._stateScriptDataEscapeStart(a);
        break;
      }
      case R.SCRIPT_DATA_ESCAPE_START_DASH: {
        this._stateScriptDataEscapeStartDash(a);
        break;
      }
      case R.SCRIPT_DATA_ESCAPED: {
        this._stateScriptDataEscaped(a);
        break;
      }
      case R.SCRIPT_DATA_ESCAPED_DASH: {
        this._stateScriptDataEscapedDash(a);
        break;
      }
      case R.SCRIPT_DATA_ESCAPED_DASH_DASH: {
        this._stateScriptDataEscapedDashDash(a);
        break;
      }
      case R.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataEscapedLessThanSign(a);
        break;
      }
      case R.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
        this._stateScriptDataEscapedEndTagOpen(a);
        break;
      }
      case R.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
        this._stateScriptDataEscapedEndTagName(a);
        break;
      }
      case R.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
        this._stateScriptDataDoubleEscapeStart(a);
        break;
      }
      case R.SCRIPT_DATA_DOUBLE_ESCAPED: {
        this._stateScriptDataDoubleEscaped(a);
        break;
      }
      case R.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
        this._stateScriptDataDoubleEscapedDash(a);
        break;
      }
      case R.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
        this._stateScriptDataDoubleEscapedDashDash(a);
        break;
      }
      case R.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataDoubleEscapedLessThanSign(a);
        break;
      }
      case R.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
        this._stateScriptDataDoubleEscapeEnd(a);
        break;
      }
      case R.BEFORE_ATTRIBUTE_NAME: {
        this._stateBeforeAttributeName(a);
        break;
      }
      case R.ATTRIBUTE_NAME: {
        this._stateAttributeName(a);
        break;
      }
      case R.AFTER_ATTRIBUTE_NAME: {
        this._stateAfterAttributeName(a);
        break;
      }
      case R.BEFORE_ATTRIBUTE_VALUE: {
        this._stateBeforeAttributeValue(a);
        break;
      }
      case R.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
        this._stateAttributeValueDoubleQuoted(a);
        break;
      }
      case R.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
        this._stateAttributeValueSingleQuoted(a);
        break;
      }
      case R.ATTRIBUTE_VALUE_UNQUOTED: {
        this._stateAttributeValueUnquoted(a);
        break;
      }
      case R.AFTER_ATTRIBUTE_VALUE_QUOTED: {
        this._stateAfterAttributeValueQuoted(a);
        break;
      }
      case R.SELF_CLOSING_START_TAG: {
        this._stateSelfClosingStartTag(a);
        break;
      }
      case R.BOGUS_COMMENT: {
        this._stateBogusComment(a);
        break;
      }
      case R.MARKUP_DECLARATION_OPEN: {
        this._stateMarkupDeclarationOpen(a);
        break;
      }
      case R.COMMENT_START: {
        this._stateCommentStart(a);
        break;
      }
      case R.COMMENT_START_DASH: {
        this._stateCommentStartDash(a);
        break;
      }
      case R.COMMENT: {
        this._stateComment(a);
        break;
      }
      case R.COMMENT_LESS_THAN_SIGN: {
        this._stateCommentLessThanSign(a);
        break;
      }
      case R.COMMENT_LESS_THAN_SIGN_BANG: {
        this._stateCommentLessThanSignBang(a);
        break;
      }
      case R.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
        this._stateCommentLessThanSignBangDash(a);
        break;
      }
      case R.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
        this._stateCommentLessThanSignBangDashDash(a);
        break;
      }
      case R.COMMENT_END_DASH: {
        this._stateCommentEndDash(a);
        break;
      }
      case R.COMMENT_END: {
        this._stateCommentEnd(a);
        break;
      }
      case R.COMMENT_END_BANG: {
        this._stateCommentEndBang(a);
        break;
      }
      case R.DOCTYPE: {
        this._stateDoctype(a);
        break;
      }
      case R.BEFORE_DOCTYPE_NAME: {
        this._stateBeforeDoctypeName(a);
        break;
      }
      case R.DOCTYPE_NAME: {
        this._stateDoctypeName(a);
        break;
      }
      case R.AFTER_DOCTYPE_NAME: {
        this._stateAfterDoctypeName(a);
        break;
      }
      case R.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
        this._stateAfterDoctypePublicKeyword(a);
        break;
      }
      case R.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateBeforeDoctypePublicIdentifier(a);
        break;
      }
      case R.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypePublicIdentifierDoubleQuoted(a);
        break;
      }
      case R.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypePublicIdentifierSingleQuoted(a);
        break;
      }
      case R.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateAfterDoctypePublicIdentifier(a);
        break;
      }
      case R.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
        this._stateBetweenDoctypePublicAndSystemIdentifiers(a);
        break;
      }
      case R.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
        this._stateAfterDoctypeSystemKeyword(a);
        break;
      }
      case R.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateBeforeDoctypeSystemIdentifier(a);
        break;
      }
      case R.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypeSystemIdentifierDoubleQuoted(a);
        break;
      }
      case R.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypeSystemIdentifierSingleQuoted(a);
        break;
      }
      case R.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateAfterDoctypeSystemIdentifier(a);
        break;
      }
      case R.BOGUS_DOCTYPE: {
        this._stateBogusDoctype(a);
        break;
      }
      case R.CDATA_SECTION: {
        this._stateCdataSection(a);
        break;
      }
      case R.CDATA_SECTION_BRACKET: {
        this._stateCdataSectionBracket(a);
        break;
      }
      case R.CDATA_SECTION_END: {
        this._stateCdataSectionEnd(a);
        break;
      }
      case R.CHARACTER_REFERENCE: {
        this._stateCharacterReference();
        break;
      }
      case R.AMBIGUOUS_AMPERSAND: {
        this._stateAmbiguousAmpersand(a);
        break;
      }
      default:
        throw new Error("Unknown state");
    }
  }
  // State machine
  // Data state
  //------------------------------------------------------------------
  _stateData(a) {
    switch (a) {
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.TAG_OPEN;
        break;
      }
      case T.CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this._emitCodePoint(a);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(a);
    }
  }
  //  RCDATA state
  //------------------------------------------------------------------
  _stateRcdata(a) {
    switch (a) {
      case T.CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.RCDATA_LESS_THAN_SIGN;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(a);
    }
  }
  // RAWTEXT state
  //------------------------------------------------------------------
  _stateRawtext(a) {
    switch (a) {
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.RAWTEXT_LESS_THAN_SIGN;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(a);
    }
  }
  // Script data state
  //------------------------------------------------------------------
  _stateScriptData(a) {
    switch (a) {
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.SCRIPT_DATA_LESS_THAN_SIGN;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(a);
    }
  }
  // PLAINTEXT state
  //------------------------------------------------------------------
  _statePlaintext(a) {
    switch (a) {
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(a);
    }
  }
  // Tag open state
  //------------------------------------------------------------------
  _stateTagOpen(a) {
    if (Ni(a))
      this._createStartTagToken(), this.state = R.TAG_NAME, this._stateTagName(a);
    else
      switch (a) {
        case T.CODE_POINTS.EXCLAMATION_MARK: {
          this.state = R.MARKUP_DECLARATION_OPEN;
          break;
        }
        case T.CODE_POINTS.SOLIDUS: {
          this.state = R.END_TAG_OPEN;
          break;
        }
        case T.CODE_POINTS.QUESTION_MARK: {
          this._err(oe.ERR.unexpectedQuestionMarkInsteadOfTagName), this._createCommentToken(1), this.state = R.BOGUS_COMMENT, this._stateBogusComment(a);
          break;
        }
        case T.CODE_POINTS.EOF: {
          this._err(oe.ERR.eofBeforeTagName), this._emitChars("<"), this._emitEOFToken();
          break;
        }
        default:
          this._err(oe.ERR.invalidFirstCharacterOfTagName), this._emitChars("<"), this.state = R.DATA, this._stateData(a);
      }
  }
  // End tag open state
  //------------------------------------------------------------------
  _stateEndTagOpen(a) {
    if (Ni(a))
      this._createEndTagToken(), this.state = R.TAG_NAME, this._stateTagName(a);
    else
      switch (a) {
        case T.CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(oe.ERR.missingEndTagName), this.state = R.DATA;
          break;
        }
        case T.CODE_POINTS.EOF: {
          this._err(oe.ERR.eofBeforeTagName), this._emitChars("</"), this._emitEOFToken();
          break;
        }
        default:
          this._err(oe.ERR.invalidFirstCharacterOfTagName), this._createCommentToken(2), this.state = R.BOGUS_COMMENT, this._stateBogusComment(a);
      }
  }
  // Tag name state
  //------------------------------------------------------------------
  _stateTagName(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED: {
        this.state = R.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case T.CODE_POINTS.SOLIDUS: {
        this.state = R.SELF_CLOSING_START_TAG;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.DATA, this.emitCurrentTagToken();
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), t.tagName += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        t.tagName += String.fromCodePoint(Uu(a) ? xg(a) : a);
    }
  }
  // RCDATA less-than sign state
  //------------------------------------------------------------------
  _stateRcdataLessThanSign(a) {
    a === T.CODE_POINTS.SOLIDUS ? this.state = R.RCDATA_END_TAG_OPEN : (this._emitChars("<"), this.state = R.RCDATA, this._stateRcdata(a));
  }
  // RCDATA end tag open state
  //------------------------------------------------------------------
  _stateRcdataEndTagOpen(a) {
    Ni(a) ? (this.state = R.RCDATA_END_TAG_NAME, this._stateRcdataEndTagName(a)) : (this._emitChars("</"), this.state = R.RCDATA, this._stateRcdata(a));
  }
  handleSpecialEndTag(a) {
    if (!this.preprocessor.startsWith(this.lastStartTagName, !1))
      return !this._ensureHibernation();
    this._createEndTagToken();
    const t = this.currentToken;
    switch (t.tagName = this.lastStartTagName, this.preprocessor.peek(this.lastStartTagName.length)) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
        return this._advanceBy(this.lastStartTagName.length), this.state = R.BEFORE_ATTRIBUTE_NAME, !1;
      case T.CODE_POINTS.SOLIDUS:
        return this._advanceBy(this.lastStartTagName.length), this.state = R.SELF_CLOSING_START_TAG, !1;
      case T.CODE_POINTS.GREATER_THAN_SIGN:
        return this._advanceBy(this.lastStartTagName.length), this.emitCurrentTagToken(), this.state = R.DATA, !1;
      default:
        return !this._ensureHibernation();
    }
  }
  // RCDATA end tag name state
  //------------------------------------------------------------------
  _stateRcdataEndTagName(a) {
    this.handleSpecialEndTag(a) && (this._emitChars("</"), this.state = R.RCDATA, this._stateRcdata(a));
  }
  // RAWTEXT less-than sign state
  //------------------------------------------------------------------
  _stateRawtextLessThanSign(a) {
    a === T.CODE_POINTS.SOLIDUS ? this.state = R.RAWTEXT_END_TAG_OPEN : (this._emitChars("<"), this.state = R.RAWTEXT, this._stateRawtext(a));
  }
  // RAWTEXT end tag open state
  //------------------------------------------------------------------
  _stateRawtextEndTagOpen(a) {
    Ni(a) ? (this.state = R.RAWTEXT_END_TAG_NAME, this._stateRawtextEndTagName(a)) : (this._emitChars("</"), this.state = R.RAWTEXT, this._stateRawtext(a));
  }
  // RAWTEXT end tag name state
  //------------------------------------------------------------------
  _stateRawtextEndTagName(a) {
    this.handleSpecialEndTag(a) && (this._emitChars("</"), this.state = R.RAWTEXT, this._stateRawtext(a));
  }
  // Script data less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataLessThanSign(a) {
    switch (a) {
      case T.CODE_POINTS.SOLIDUS: {
        this.state = R.SCRIPT_DATA_END_TAG_OPEN;
        break;
      }
      case T.CODE_POINTS.EXCLAMATION_MARK: {
        this.state = R.SCRIPT_DATA_ESCAPE_START, this._emitChars("<!");
        break;
      }
      default:
        this._emitChars("<"), this.state = R.SCRIPT_DATA, this._stateScriptData(a);
    }
  }
  // Script data end tag open state
  //------------------------------------------------------------------
  _stateScriptDataEndTagOpen(a) {
    Ni(a) ? (this.state = R.SCRIPT_DATA_END_TAG_NAME, this._stateScriptDataEndTagName(a)) : (this._emitChars("</"), this.state = R.SCRIPT_DATA, this._stateScriptData(a));
  }
  // Script data end tag name state
  //------------------------------------------------------------------
  _stateScriptDataEndTagName(a) {
    this.handleSpecialEndTag(a) && (this._emitChars("</"), this.state = R.SCRIPT_DATA, this._stateScriptData(a));
  }
  // Script data escape start state
  //------------------------------------------------------------------
  _stateScriptDataEscapeStart(a) {
    a === T.CODE_POINTS.HYPHEN_MINUS ? (this.state = R.SCRIPT_DATA_ESCAPE_START_DASH, this._emitChars("-")) : (this.state = R.SCRIPT_DATA, this._stateScriptData(a));
  }
  // Script data escape start dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapeStartDash(a) {
    a === T.CODE_POINTS.HYPHEN_MINUS ? (this.state = R.SCRIPT_DATA_ESCAPED_DASH_DASH, this._emitChars("-")) : (this.state = R.SCRIPT_DATA, this._stateScriptData(a));
  }
  // Script data escaped state
  //------------------------------------------------------------------
  _stateScriptDataEscaped(a) {
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this.state = R.SCRIPT_DATA_ESCAPED_DASH, this._emitChars("-");
        break;
      }
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(a);
    }
  }
  // Script data escaped dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapedDash(a) {
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this.state = R.SCRIPT_DATA_ESCAPED_DASH_DASH, this._emitChars("-");
        break;
      }
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this.state = R.SCRIPT_DATA_ESCAPED, this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this.state = R.SCRIPT_DATA_ESCAPED, this._emitCodePoint(a);
    }
  }
  // Script data escaped dash dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapedDashDash(a) {
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.SCRIPT_DATA, this._emitChars(">");
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this.state = R.SCRIPT_DATA_ESCAPED, this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this.state = R.SCRIPT_DATA_ESCAPED, this._emitCodePoint(a);
    }
  }
  // Script data escaped less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataEscapedLessThanSign(a) {
    a === T.CODE_POINTS.SOLIDUS ? this.state = R.SCRIPT_DATA_ESCAPED_END_TAG_OPEN : Ni(a) ? (this._emitChars("<"), this.state = R.SCRIPT_DATA_DOUBLE_ESCAPE_START, this._stateScriptDataDoubleEscapeStart(a)) : (this._emitChars("<"), this.state = R.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(a));
  }
  // Script data escaped end tag open state
  //------------------------------------------------------------------
  _stateScriptDataEscapedEndTagOpen(a) {
    Ni(a) ? (this.state = R.SCRIPT_DATA_ESCAPED_END_TAG_NAME, this._stateScriptDataEscapedEndTagName(a)) : (this._emitChars("</"), this.state = R.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(a));
  }
  // Script data escaped end tag name state
  //------------------------------------------------------------------
  _stateScriptDataEscapedEndTagName(a) {
    this.handleSpecialEndTag(a) && (this._emitChars("</"), this.state = R.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(a));
  }
  // Script data double escape start state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapeStart(a) {
    if (this.preprocessor.startsWith(T.SEQUENCES.SCRIPT, !1) && T2(this.preprocessor.peek(T.SEQUENCES.SCRIPT.length))) {
      this._emitCodePoint(a);
      for (let t = 0; t < T.SEQUENCES.SCRIPT.length; t++)
        this._emitCodePoint(this._consume());
      this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED;
    } else this._ensureHibernation() || (this.state = R.SCRIPT_DATA_ESCAPED, this._stateScriptDataEscaped(a));
  }
  // Script data double escaped state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscaped(a) {
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED_DASH, this._emitChars("-");
        break;
      }
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN, this._emitChars("<");
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(a);
    }
  }
  // Script data double escaped dash state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedDash(a) {
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH, this._emitChars("-");
        break;
      }
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN, this._emitChars("<");
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitCodePoint(a);
    }
  }
  // Script data double escaped dash dash state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedDashDash(a) {
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN, this._emitChars("<");
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.SCRIPT_DATA, this._emitChars(">");
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitChars(T.REPLACEMENT_CHARACTER);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInScriptHtmlCommentLikeText), this._emitEOFToken();
        break;
      }
      default:
        this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED, this._emitCodePoint(a);
    }
  }
  // Script data double escaped less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedLessThanSign(a) {
    a === T.CODE_POINTS.SOLIDUS ? (this.state = R.SCRIPT_DATA_DOUBLE_ESCAPE_END, this._emitChars("/")) : (this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED, this._stateScriptDataDoubleEscaped(a));
  }
  // Script data double escape end state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapeEnd(a) {
    if (this.preprocessor.startsWith(T.SEQUENCES.SCRIPT, !1) && T2(this.preprocessor.peek(T.SEQUENCES.SCRIPT.length))) {
      this._emitCodePoint(a);
      for (let t = 0; t < T.SEQUENCES.SCRIPT.length; t++)
        this._emitCodePoint(this._consume());
      this.state = R.SCRIPT_DATA_ESCAPED;
    } else this._ensureHibernation() || (this.state = R.SCRIPT_DATA_DOUBLE_ESCAPED, this._stateScriptDataDoubleEscaped(a));
  }
  // Before attribute name state
  //------------------------------------------------------------------
  _stateBeforeAttributeName(a) {
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
        break;
      case T.CODE_POINTS.SOLIDUS:
      case T.CODE_POINTS.GREATER_THAN_SIGN:
      case T.CODE_POINTS.EOF: {
        this.state = R.AFTER_ATTRIBUTE_NAME, this._stateAfterAttributeName(a);
        break;
      }
      case T.CODE_POINTS.EQUALS_SIGN: {
        this._err(oe.ERR.unexpectedEqualsSignBeforeAttributeName), this._createAttr("="), this.state = R.ATTRIBUTE_NAME;
        break;
      }
      default:
        this._createAttr(""), this.state = R.ATTRIBUTE_NAME, this._stateAttributeName(a);
    }
  }
  // Attribute name state
  //------------------------------------------------------------------
  _stateAttributeName(a) {
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
      case T.CODE_POINTS.SOLIDUS:
      case T.CODE_POINTS.GREATER_THAN_SIGN:
      case T.CODE_POINTS.EOF: {
        this._leaveAttrName(), this.state = R.AFTER_ATTRIBUTE_NAME, this._stateAfterAttributeName(a);
        break;
      }
      case T.CODE_POINTS.EQUALS_SIGN: {
        this._leaveAttrName(), this.state = R.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case T.CODE_POINTS.QUOTATION_MARK:
      case T.CODE_POINTS.APOSTROPHE:
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        this._err(oe.ERR.unexpectedCharacterInAttributeName), this.currentAttr.name += String.fromCodePoint(a);
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this.currentAttr.name += T.REPLACEMENT_CHARACTER;
        break;
      }
      default:
        this.currentAttr.name += String.fromCodePoint(Uu(a) ? xg(a) : a);
    }
  }
  // After attribute name state
  //------------------------------------------------------------------
  _stateAfterAttributeName(a) {
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
        break;
      case T.CODE_POINTS.SOLIDUS: {
        this.state = R.SELF_CLOSING_START_TAG;
        break;
      }
      case T.CODE_POINTS.EQUALS_SIGN: {
        this.state = R.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.DATA, this.emitCurrentTagToken();
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this._createAttr(""), this.state = R.ATTRIBUTE_NAME, this._stateAttributeName(a);
    }
  }
  // Before attribute value state
  //------------------------------------------------------------------
  _stateBeforeAttributeValue(a) {
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
        break;
      case T.CODE_POINTS.QUOTATION_MARK: {
        this.state = R.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.APOSTROPHE: {
        this.state = R.ATTRIBUTE_VALUE_SINGLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.missingAttributeValue), this.state = R.DATA, this.emitCurrentTagToken();
        break;
      }
      default:
        this.state = R.ATTRIBUTE_VALUE_UNQUOTED, this._stateAttributeValueUnquoted(a);
    }
  }
  // Attribute value (double-quoted) state
  //------------------------------------------------------------------
  _stateAttributeValueDoubleQuoted(a) {
    switch (a) {
      case T.CODE_POINTS.QUOTATION_MARK: {
        this.state = R.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case T.CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this.currentAttr.value += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this.currentAttr.value += String.fromCodePoint(a);
    }
  }
  // Attribute value (single-quoted) state
  //------------------------------------------------------------------
  _stateAttributeValueSingleQuoted(a) {
    switch (a) {
      case T.CODE_POINTS.APOSTROPHE: {
        this.state = R.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case T.CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this.currentAttr.value += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this.currentAttr.value += String.fromCodePoint(a);
    }
  }
  // Attribute value (unquoted) state
  //------------------------------------------------------------------
  _stateAttributeValueUnquoted(a) {
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED: {
        this._leaveAttrValue(), this.state = R.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case T.CODE_POINTS.AMPERSAND: {
        this._startCharacterReference();
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._leaveAttrValue(), this.state = R.DATA, this.emitCurrentTagToken();
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), this.currentAttr.value += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.QUOTATION_MARK:
      case T.CODE_POINTS.APOSTROPHE:
      case T.CODE_POINTS.LESS_THAN_SIGN:
      case T.CODE_POINTS.EQUALS_SIGN:
      case T.CODE_POINTS.GRAVE_ACCENT: {
        this._err(oe.ERR.unexpectedCharacterInUnquotedAttributeValue), this.currentAttr.value += String.fromCodePoint(a);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this.currentAttr.value += String.fromCodePoint(a);
    }
  }
  // After attribute value (quoted) state
  //------------------------------------------------------------------
  _stateAfterAttributeValueQuoted(a) {
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED: {
        this._leaveAttrValue(), this.state = R.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case T.CODE_POINTS.SOLIDUS: {
        this._leaveAttrValue(), this.state = R.SELF_CLOSING_START_TAG;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._leaveAttrValue(), this.state = R.DATA, this.emitCurrentTagToken();
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.missingWhitespaceBetweenAttributes), this.state = R.BEFORE_ATTRIBUTE_NAME, this._stateBeforeAttributeName(a);
    }
  }
  // Self-closing start tag state
  //------------------------------------------------------------------
  _stateSelfClosingStartTag(a) {
    switch (a) {
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        const t = this.currentToken;
        t.selfClosing = !0, this.state = R.DATA, this.emitCurrentTagToken();
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInTag), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.unexpectedSolidusInTag), this.state = R.BEFORE_ATTRIBUTE_NAME, this._stateBeforeAttributeName(a);
    }
  }
  // Bogus comment state
  //------------------------------------------------------------------
  _stateBogusComment(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.DATA, this.emitCurrentComment(t);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this.emitCurrentComment(t), this._emitEOFToken();
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), t.data += T.REPLACEMENT_CHARACTER;
        break;
      }
      default:
        t.data += String.fromCodePoint(a);
    }
  }
  // Markup declaration open state
  //------------------------------------------------------------------
  _stateMarkupDeclarationOpen(a) {
    this._consumeSequenceIfMatch(T.SEQUENCES.DASH_DASH, !0) ? (this._createCommentToken(T.SEQUENCES.DASH_DASH.length + 1), this.state = R.COMMENT_START) : this._consumeSequenceIfMatch(T.SEQUENCES.DOCTYPE, !1) ? (this.currentLocation = this.getCurrentLocation(T.SEQUENCES.DOCTYPE.length + 1), this.state = R.DOCTYPE) : this._consumeSequenceIfMatch(T.SEQUENCES.CDATA_START, !0) ? this.inForeignNode ? this.state = R.CDATA_SECTION : (this._err(oe.ERR.cdataInHtmlContent), this._createCommentToken(T.SEQUENCES.CDATA_START.length + 1), this.currentToken.data = "[CDATA[", this.state = R.BOGUS_COMMENT) : this._ensureHibernation() || (this._err(oe.ERR.incorrectlyOpenedComment), this._createCommentToken(2), this.state = R.BOGUS_COMMENT, this._stateBogusComment(a));
  }
  // Comment start state
  //------------------------------------------------------------------
  _stateCommentStart(a) {
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this.state = R.COMMENT_START_DASH;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.abruptClosingOfEmptyComment), this.state = R.DATA;
        const t = this.currentToken;
        this.emitCurrentComment(t);
        break;
      }
      default:
        this.state = R.COMMENT, this._stateComment(a);
    }
  }
  // Comment start dash state
  //------------------------------------------------------------------
  _stateCommentStartDash(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this.state = R.COMMENT_END;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.abruptClosingOfEmptyComment), this.state = R.DATA, this.emitCurrentComment(t);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInComment), this.emitCurrentComment(t), this._emitEOFToken();
        break;
      }
      default:
        t.data += "-", this.state = R.COMMENT, this._stateComment(a);
    }
  }
  // Comment state
  //------------------------------------------------------------------
  _stateComment(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this.state = R.COMMENT_END_DASH;
        break;
      }
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        t.data += "<", this.state = R.COMMENT_LESS_THAN_SIGN;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), t.data += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInComment), this.emitCurrentComment(t), this._emitEOFToken();
        break;
      }
      default:
        t.data += String.fromCodePoint(a);
    }
  }
  // Comment less-than sign state
  //------------------------------------------------------------------
  _stateCommentLessThanSign(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.EXCLAMATION_MARK: {
        t.data += "!", this.state = R.COMMENT_LESS_THAN_SIGN_BANG;
        break;
      }
      case T.CODE_POINTS.LESS_THAN_SIGN: {
        t.data += "<";
        break;
      }
      default:
        this.state = R.COMMENT, this._stateComment(a);
    }
  }
  // Comment less-than sign bang state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBang(a) {
    a === T.CODE_POINTS.HYPHEN_MINUS ? this.state = R.COMMENT_LESS_THAN_SIGN_BANG_DASH : (this.state = R.COMMENT, this._stateComment(a));
  }
  // Comment less-than sign bang dash state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBangDash(a) {
    a === T.CODE_POINTS.HYPHEN_MINUS ? this.state = R.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH : (this.state = R.COMMENT_END_DASH, this._stateCommentEndDash(a));
  }
  // Comment less-than sign bang dash dash state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBangDashDash(a) {
    a !== T.CODE_POINTS.GREATER_THAN_SIGN && a !== T.CODE_POINTS.EOF && this._err(oe.ERR.nestedComment), this.state = R.COMMENT_END, this._stateCommentEnd(a);
  }
  // Comment end dash state
  //------------------------------------------------------------------
  _stateCommentEndDash(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        this.state = R.COMMENT_END;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInComment), this.emitCurrentComment(t), this._emitEOFToken();
        break;
      }
      default:
        t.data += "-", this.state = R.COMMENT, this._stateComment(a);
    }
  }
  // Comment end state
  //------------------------------------------------------------------
  _stateCommentEnd(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.DATA, this.emitCurrentComment(t);
        break;
      }
      case T.CODE_POINTS.EXCLAMATION_MARK: {
        this.state = R.COMMENT_END_BANG;
        break;
      }
      case T.CODE_POINTS.HYPHEN_MINUS: {
        t.data += "-";
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInComment), this.emitCurrentComment(t), this._emitEOFToken();
        break;
      }
      default:
        t.data += "--", this.state = R.COMMENT, this._stateComment(a);
    }
  }
  // Comment end bang state
  //------------------------------------------------------------------
  _stateCommentEndBang(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.HYPHEN_MINUS: {
        t.data += "--!", this.state = R.COMMENT_END_DASH;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.incorrectlyClosedComment), this.state = R.DATA, this.emitCurrentComment(t);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInComment), this.emitCurrentComment(t), this._emitEOFToken();
        break;
      }
      default:
        t.data += "--!", this.state = R.COMMENT, this._stateComment(a);
    }
  }
  // DOCTYPE state
  //------------------------------------------------------------------
  _stateDoctype(a) {
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED: {
        this.state = R.BEFORE_DOCTYPE_NAME;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.BEFORE_DOCTYPE_NAME, this._stateBeforeDoctypeName(a);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), this._createDoctypeToken(null);
        const t = this.currentToken;
        t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.missingWhitespaceBeforeDoctypeName), this.state = R.BEFORE_DOCTYPE_NAME, this._stateBeforeDoctypeName(a);
    }
  }
  // Before DOCTYPE name state
  //------------------------------------------------------------------
  _stateBeforeDoctypeName(a) {
    if (Uu(a))
      this._createDoctypeToken(String.fromCharCode(xg(a))), this.state = R.DOCTYPE_NAME;
    else
      switch (a) {
        case T.CODE_POINTS.SPACE:
        case T.CODE_POINTS.LINE_FEED:
        case T.CODE_POINTS.TABULATION:
        case T.CODE_POINTS.FORM_FEED:
          break;
        case T.CODE_POINTS.NULL: {
          this._err(oe.ERR.unexpectedNullCharacter), this._createDoctypeToken(T.REPLACEMENT_CHARACTER), this.state = R.DOCTYPE_NAME;
          break;
        }
        case T.CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(oe.ERR.missingDoctypeName), this._createDoctypeToken(null);
          const t = this.currentToken;
          t.forceQuirks = !0, this.emitCurrentDoctype(t), this.state = R.DATA;
          break;
        }
        case T.CODE_POINTS.EOF: {
          this._err(oe.ERR.eofInDoctype), this._createDoctypeToken(null);
          const t = this.currentToken;
          t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
          break;
        }
        default:
          this._createDoctypeToken(String.fromCodePoint(a)), this.state = R.DOCTYPE_NAME;
      }
  }
  // DOCTYPE name state
  //------------------------------------------------------------------
  _stateDoctypeName(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED: {
        this.state = R.AFTER_DOCTYPE_NAME;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.DATA, this.emitCurrentDoctype(t);
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), t.name += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        t.name += String.fromCodePoint(Uu(a) ? xg(a) : a);
    }
  }
  // After DOCTYPE name state
  //------------------------------------------------------------------
  _stateAfterDoctypeName(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
        break;
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.DATA, this.emitCurrentDoctype(t);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        this._consumeSequenceIfMatch(T.SEQUENCES.PUBLIC, !1) ? this.state = R.AFTER_DOCTYPE_PUBLIC_KEYWORD : this._consumeSequenceIfMatch(T.SEQUENCES.SYSTEM, !1) ? this.state = R.AFTER_DOCTYPE_SYSTEM_KEYWORD : this._ensureHibernation() || (this._err(oe.ERR.invalidCharacterSequenceAfterDoctypeName), t.forceQuirks = !0, this.state = R.BOGUS_DOCTYPE, this._stateBogusDoctype(a));
    }
  }
  // After DOCTYPE public keyword state
  //------------------------------------------------------------------
  _stateAfterDoctypePublicKeyword(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED: {
        this.state = R.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case T.CODE_POINTS.QUOTATION_MARK: {
        this._err(oe.ERR.missingWhitespaceAfterDoctypePublicKeyword), t.publicId = "", this.state = R.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.APOSTROPHE: {
        this._err(oe.ERR.missingWhitespaceAfterDoctypePublicKeyword), t.publicId = "", this.state = R.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.missingDoctypePublicIdentifier), t.forceQuirks = !0, this.state = R.DATA, this.emitCurrentDoctype(t);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.missingQuoteBeforeDoctypePublicIdentifier), t.forceQuirks = !0, this.state = R.BOGUS_DOCTYPE, this._stateBogusDoctype(a);
    }
  }
  // Before DOCTYPE public identifier state
  //------------------------------------------------------------------
  _stateBeforeDoctypePublicIdentifier(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
        break;
      case T.CODE_POINTS.QUOTATION_MARK: {
        t.publicId = "", this.state = R.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.APOSTROPHE: {
        t.publicId = "", this.state = R.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.missingDoctypePublicIdentifier), t.forceQuirks = !0, this.state = R.DATA, this.emitCurrentDoctype(t);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.missingQuoteBeforeDoctypePublicIdentifier), t.forceQuirks = !0, this.state = R.BOGUS_DOCTYPE, this._stateBogusDoctype(a);
    }
  }
  // DOCTYPE public identifier (double-quoted) state
  //------------------------------------------------------------------
  _stateDoctypePublicIdentifierDoubleQuoted(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.QUOTATION_MARK: {
        this.state = R.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), t.publicId += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.abruptDoctypePublicIdentifier), t.forceQuirks = !0, this.emitCurrentDoctype(t), this.state = R.DATA;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        t.publicId += String.fromCodePoint(a);
    }
  }
  // DOCTYPE public identifier (single-quoted) state
  //------------------------------------------------------------------
  _stateDoctypePublicIdentifierSingleQuoted(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.APOSTROPHE: {
        this.state = R.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), t.publicId += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.abruptDoctypePublicIdentifier), t.forceQuirks = !0, this.emitCurrentDoctype(t), this.state = R.DATA;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        t.publicId += String.fromCodePoint(a);
    }
  }
  // After DOCTYPE public identifier state
  //------------------------------------------------------------------
  _stateAfterDoctypePublicIdentifier(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED: {
        this.state = R.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.DATA, this.emitCurrentDoctype(t);
        break;
      }
      case T.CODE_POINTS.QUOTATION_MARK: {
        this._err(oe.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers), t.systemId = "", this.state = R.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.APOSTROPHE: {
        this._err(oe.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers), t.systemId = "", this.state = R.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.missingQuoteBeforeDoctypeSystemIdentifier), t.forceQuirks = !0, this.state = R.BOGUS_DOCTYPE, this._stateBogusDoctype(a);
    }
  }
  // Between DOCTYPE public and system identifiers state
  //------------------------------------------------------------------
  _stateBetweenDoctypePublicAndSystemIdentifiers(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
        break;
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(t), this.state = R.DATA;
        break;
      }
      case T.CODE_POINTS.QUOTATION_MARK: {
        t.systemId = "", this.state = R.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.APOSTROPHE: {
        t.systemId = "", this.state = R.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.missingQuoteBeforeDoctypeSystemIdentifier), t.forceQuirks = !0, this.state = R.BOGUS_DOCTYPE, this._stateBogusDoctype(a);
    }
  }
  // After DOCTYPE system keyword state
  //------------------------------------------------------------------
  _stateAfterDoctypeSystemKeyword(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED: {
        this.state = R.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case T.CODE_POINTS.QUOTATION_MARK: {
        this._err(oe.ERR.missingWhitespaceAfterDoctypeSystemKeyword), t.systemId = "", this.state = R.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.APOSTROPHE: {
        this._err(oe.ERR.missingWhitespaceAfterDoctypeSystemKeyword), t.systemId = "", this.state = R.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.missingDoctypeSystemIdentifier), t.forceQuirks = !0, this.state = R.DATA, this.emitCurrentDoctype(t);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.missingQuoteBeforeDoctypeSystemIdentifier), t.forceQuirks = !0, this.state = R.BOGUS_DOCTYPE, this._stateBogusDoctype(a);
    }
  }
  // Before DOCTYPE system identifier state
  //------------------------------------------------------------------
  _stateBeforeDoctypeSystemIdentifier(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
        break;
      case T.CODE_POINTS.QUOTATION_MARK: {
        t.systemId = "", this.state = R.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.APOSTROPHE: {
        t.systemId = "", this.state = R.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.missingDoctypeSystemIdentifier), t.forceQuirks = !0, this.state = R.DATA, this.emitCurrentDoctype(t);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.missingQuoteBeforeDoctypeSystemIdentifier), t.forceQuirks = !0, this.state = R.BOGUS_DOCTYPE, this._stateBogusDoctype(a);
    }
  }
  // DOCTYPE system identifier (double-quoted) state
  //------------------------------------------------------------------
  _stateDoctypeSystemIdentifierDoubleQuoted(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.QUOTATION_MARK: {
        this.state = R.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), t.systemId += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.abruptDoctypeSystemIdentifier), t.forceQuirks = !0, this.emitCurrentDoctype(t), this.state = R.DATA;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        t.systemId += String.fromCodePoint(a);
    }
  }
  // DOCTYPE system identifier (single-quoted) state
  //------------------------------------------------------------------
  _stateDoctypeSystemIdentifierSingleQuoted(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.APOSTROPHE: {
        this.state = R.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter), t.systemId += T.REPLACEMENT_CHARACTER;
        break;
      }
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(oe.ERR.abruptDoctypeSystemIdentifier), t.forceQuirks = !0, this.emitCurrentDoctype(t), this.state = R.DATA;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        t.systemId += String.fromCodePoint(a);
    }
  }
  // After DOCTYPE system identifier state
  //------------------------------------------------------------------
  _stateAfterDoctypeSystemIdentifier(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.SPACE:
      case T.CODE_POINTS.LINE_FEED:
      case T.CODE_POINTS.TABULATION:
      case T.CODE_POINTS.FORM_FEED:
        break;
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(t), this.state = R.DATA;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInDoctype), t.forceQuirks = !0, this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
      default:
        this._err(oe.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier), this.state = R.BOGUS_DOCTYPE, this._stateBogusDoctype(a);
    }
  }
  // Bogus DOCTYPE state
  //------------------------------------------------------------------
  _stateBogusDoctype(a) {
    const t = this.currentToken;
    switch (a) {
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(t), this.state = R.DATA;
        break;
      }
      case T.CODE_POINTS.NULL: {
        this._err(oe.ERR.unexpectedNullCharacter);
        break;
      }
      case T.CODE_POINTS.EOF: {
        this.emitCurrentDoctype(t), this._emitEOFToken();
        break;
      }
    }
  }
  // CDATA section state
  //------------------------------------------------------------------
  _stateCdataSection(a) {
    switch (a) {
      case T.CODE_POINTS.RIGHT_SQUARE_BRACKET: {
        this.state = R.CDATA_SECTION_BRACKET;
        break;
      }
      case T.CODE_POINTS.EOF: {
        this._err(oe.ERR.eofInCdata), this._emitEOFToken();
        break;
      }
      default:
        this._emitCodePoint(a);
    }
  }
  // CDATA section bracket state
  //------------------------------------------------------------------
  _stateCdataSectionBracket(a) {
    a === T.CODE_POINTS.RIGHT_SQUARE_BRACKET ? this.state = R.CDATA_SECTION_END : (this._emitChars("]"), this.state = R.CDATA_SECTION, this._stateCdataSection(a));
  }
  // CDATA section end state
  //------------------------------------------------------------------
  _stateCdataSectionEnd(a) {
    switch (a) {
      case T.CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = R.DATA;
        break;
      }
      case T.CODE_POINTS.RIGHT_SQUARE_BRACKET: {
        this._emitChars("]");
        break;
      }
      default:
        this._emitChars("]]"), this.state = R.CDATA_SECTION, this._stateCdataSection(a);
    }
  }
  // Character reference state
  //------------------------------------------------------------------
  _stateCharacterReference() {
    let a = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);
    if (a < 0)
      if (this.preprocessor.lastChunkWritten)
        a = this.entityDecoder.end();
      else {
        this.active = !1, this.preprocessor.pos = this.preprocessor.html.length - 1, this.consumedAfterSnapshot = 0, this.preprocessor.endOfChunkHit = !0;
        return;
      }
    a === 0 ? (this.preprocessor.pos = this.entityStartPos, this._flushCodePointConsumedAsCharacterReference(T.CODE_POINTS.AMPERSAND), this.state = !this._isCharacterReferenceInAttribute() && A2(this.preprocessor.peek(1)) ? R.AMBIGUOUS_AMPERSAND : this.returnState) : this.state = this.returnState;
  }
  // Ambiguos ampersand state
  //------------------------------------------------------------------
  _stateAmbiguousAmpersand(a) {
    A2(a) ? this._flushCodePointConsumedAsCharacterReference(a) : (a === T.CODE_POINTS.SEMICOLON && this._err(oe.ERR.unknownNamedCharacterReference), this.state = this.returnState, this._callState(a));
  }
};
qo.Tokenizer = ZK;
var qm = {};
Object.defineProperty(qm, "__esModule", { value: !0 });
qm.OpenElementStack = void 0;
const pe = Ta, GR = /* @__PURE__ */ new Set([pe.TAG_ID.DD, pe.TAG_ID.DT, pe.TAG_ID.LI, pe.TAG_ID.OPTGROUP, pe.TAG_ID.OPTION, pe.TAG_ID.P, pe.TAG_ID.RB, pe.TAG_ID.RP, pe.TAG_ID.RT, pe.TAG_ID.RTC]), $2 = /* @__PURE__ */ new Set([
  ...GR,
  pe.TAG_ID.CAPTION,
  pe.TAG_ID.COLGROUP,
  pe.TAG_ID.TBODY,
  pe.TAG_ID.TD,
  pe.TAG_ID.TFOOT,
  pe.TAG_ID.TH,
  pe.TAG_ID.THEAD,
  pe.TAG_ID.TR
]), wm = /* @__PURE__ */ new Set([
  pe.TAG_ID.APPLET,
  pe.TAG_ID.CAPTION,
  pe.TAG_ID.HTML,
  pe.TAG_ID.MARQUEE,
  pe.TAG_ID.OBJECT,
  pe.TAG_ID.TABLE,
  pe.TAG_ID.TD,
  pe.TAG_ID.TEMPLATE,
  pe.TAG_ID.TH
]), JK = /* @__PURE__ */ new Set([...wm, pe.TAG_ID.OL, pe.TAG_ID.UL]), eY = /* @__PURE__ */ new Set([...wm, pe.TAG_ID.BUTTON]), j2 = /* @__PURE__ */ new Set([pe.TAG_ID.ANNOTATION_XML, pe.TAG_ID.MI, pe.TAG_ID.MN, pe.TAG_ID.MO, pe.TAG_ID.MS, pe.TAG_ID.MTEXT]), x2 = /* @__PURE__ */ new Set([pe.TAG_ID.DESC, pe.TAG_ID.FOREIGN_OBJECT, pe.TAG_ID.TITLE]), aY = /* @__PURE__ */ new Set([pe.TAG_ID.TR, pe.TAG_ID.TEMPLATE, pe.TAG_ID.HTML]), tY = /* @__PURE__ */ new Set([pe.TAG_ID.TBODY, pe.TAG_ID.TFOOT, pe.TAG_ID.THEAD, pe.TAG_ID.TEMPLATE, pe.TAG_ID.HTML]), nY = /* @__PURE__ */ new Set([pe.TAG_ID.TABLE, pe.TAG_ID.TEMPLATE, pe.TAG_ID.HTML]), rY = /* @__PURE__ */ new Set([pe.TAG_ID.TD, pe.TAG_ID.TH]);
class sY {
  get currentTmplContentOrNode() {
    return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
  }
  constructor(a, t, n) {
    this.treeAdapter = t, this.handler = n, this.items = [], this.tagIDs = [], this.stackTop = -1, this.tmplCount = 0, this.currentTagId = pe.TAG_ID.UNKNOWN, this.current = a;
  }
  //Index of element
  _indexOf(a) {
    return this.items.lastIndexOf(a, this.stackTop);
  }
  //Update current element
  _isInTemplate() {
    return this.currentTagId === pe.TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === pe.NS.HTML;
  }
  _updateCurrentElement() {
    this.current = this.items[this.stackTop], this.currentTagId = this.tagIDs[this.stackTop];
  }
  //Mutations
  push(a, t) {
    this.stackTop++, this.items[this.stackTop] = a, this.current = a, this.tagIDs[this.stackTop] = t, this.currentTagId = t, this._isInTemplate() && this.tmplCount++, this.handler.onItemPush(a, t, !0);
  }
  pop() {
    const a = this.current;
    this.tmplCount > 0 && this._isInTemplate() && this.tmplCount--, this.stackTop--, this._updateCurrentElement(), this.handler.onItemPop(a, !0);
  }
  replace(a, t) {
    const n = this._indexOf(a);
    this.items[n] = t, n === this.stackTop && (this.current = t);
  }
  insertAfter(a, t, n) {
    const r = this._indexOf(a) + 1;
    this.items.splice(r, 0, t), this.tagIDs.splice(r, 0, n), this.stackTop++, r === this.stackTop && this._updateCurrentElement(), this.current && this.currentTagId !== void 0 && this.handler.onItemPush(this.current, this.currentTagId, r === this.stackTop);
  }
  popUntilTagNamePopped(a) {
    let t = this.stackTop + 1;
    do
      t = this.tagIDs.lastIndexOf(a, t - 1);
    while (t > 0 && this.treeAdapter.getNamespaceURI(this.items[t]) !== pe.NS.HTML);
    this.shortenToLength(Math.max(t, 0));
  }
  shortenToLength(a) {
    for (; this.stackTop >= a; ) {
      const t = this.current;
      this.tmplCount > 0 && this._isInTemplate() && (this.tmplCount -= 1), this.stackTop--, this._updateCurrentElement(), this.handler.onItemPop(t, this.stackTop < a);
    }
  }
  popUntilElementPopped(a) {
    const t = this._indexOf(a);
    this.shortenToLength(Math.max(t, 0));
  }
  popUntilPopped(a, t) {
    const n = this._indexOfTagNames(a, t);
    this.shortenToLength(Math.max(n, 0));
  }
  popUntilNumberedHeaderPopped() {
    this.popUntilPopped(pe.NUMBERED_HEADERS, pe.NS.HTML);
  }
  popUntilTableCellPopped() {
    this.popUntilPopped(rY, pe.NS.HTML);
  }
  popAllUpToHtmlElement() {
    this.tmplCount = 0, this.shortenToLength(1);
  }
  _indexOfTagNames(a, t) {
    for (let n = this.stackTop; n >= 0; n--)
      if (a.has(this.tagIDs[n]) && this.treeAdapter.getNamespaceURI(this.items[n]) === t)
        return n;
    return -1;
  }
  clearBackTo(a, t) {
    const n = this._indexOfTagNames(a, t);
    this.shortenToLength(n + 1);
  }
  clearBackToTableContext() {
    this.clearBackTo(nY, pe.NS.HTML);
  }
  clearBackToTableBodyContext() {
    this.clearBackTo(tY, pe.NS.HTML);
  }
  clearBackToTableRowContext() {
    this.clearBackTo(aY, pe.NS.HTML);
  }
  remove(a) {
    const t = this._indexOf(a);
    t >= 0 && (t === this.stackTop ? this.pop() : (this.items.splice(t, 1), this.tagIDs.splice(t, 1), this.stackTop--, this._updateCurrentElement(), this.handler.onItemPop(a, !1)));
  }
  //Search
  tryPeekProperlyNestedBodyElement() {
    return this.stackTop >= 1 && this.tagIDs[1] === pe.TAG_ID.BODY ? this.items[1] : null;
  }
  contains(a) {
    return this._indexOf(a) > -1;
  }
  getCommonAncestor(a) {
    const t = this._indexOf(a) - 1;
    return t >= 0 ? this.items[t] : null;
  }
  isRootHtmlElementCurrent() {
    return this.stackTop === 0 && this.tagIDs[0] === pe.TAG_ID.HTML;
  }
  //Element in scope
  hasInDynamicScope(a, t) {
    for (let n = this.stackTop; n >= 0; n--) {
      const r = this.tagIDs[n];
      switch (this.treeAdapter.getNamespaceURI(this.items[n])) {
        case pe.NS.HTML: {
          if (r === a)
            return !0;
          if (t.has(r))
            return !1;
          break;
        }
        case pe.NS.SVG: {
          if (x2.has(r))
            return !1;
          break;
        }
        case pe.NS.MATHML: {
          if (j2.has(r))
            return !1;
          break;
        }
      }
    }
    return !0;
  }
  hasInScope(a) {
    return this.hasInDynamicScope(a, wm);
  }
  hasInListItemScope(a) {
    return this.hasInDynamicScope(a, JK);
  }
  hasInButtonScope(a) {
    return this.hasInDynamicScope(a, eY);
  }
  hasNumberedHeaderInScope() {
    for (let a = this.stackTop; a >= 0; a--) {
      const t = this.tagIDs[a];
      switch (this.treeAdapter.getNamespaceURI(this.items[a])) {
        case pe.NS.HTML: {
          if (pe.NUMBERED_HEADERS.has(t))
            return !0;
          if (wm.has(t))
            return !1;
          break;
        }
        case pe.NS.SVG: {
          if (x2.has(t))
            return !1;
          break;
        }
        case pe.NS.MATHML: {
          if (j2.has(t))
            return !1;
          break;
        }
      }
    }
    return !0;
  }
  hasInTableScope(a) {
    for (let t = this.stackTop; t >= 0; t--)
      if (this.treeAdapter.getNamespaceURI(this.items[t]) === pe.NS.HTML)
        switch (this.tagIDs[t]) {
          case a:
            return !0;
          case pe.TAG_ID.TABLE:
          case pe.TAG_ID.HTML:
            return !1;
        }
    return !0;
  }
  hasTableBodyContextInTableScope() {
    for (let a = this.stackTop; a >= 0; a--)
      if (this.treeAdapter.getNamespaceURI(this.items[a]) === pe.NS.HTML)
        switch (this.tagIDs[a]) {
          case pe.TAG_ID.TBODY:
          case pe.TAG_ID.THEAD:
          case pe.TAG_ID.TFOOT:
            return !0;
          case pe.TAG_ID.TABLE:
          case pe.TAG_ID.HTML:
            return !1;
        }
    return !0;
  }
  hasInSelectScope(a) {
    for (let t = this.stackTop; t >= 0; t--)
      if (this.treeAdapter.getNamespaceURI(this.items[t]) === pe.NS.HTML)
        switch (this.tagIDs[t]) {
          case a:
            return !0;
          case pe.TAG_ID.OPTION:
          case pe.TAG_ID.OPTGROUP:
            break;
          default:
            return !1;
        }
    return !0;
  }
  //Implied end tags
  generateImpliedEndTags() {
    for (; this.currentTagId !== void 0 && GR.has(this.currentTagId); )
      this.pop();
  }
  generateImpliedEndTagsThoroughly() {
    for (; this.currentTagId !== void 0 && $2.has(this.currentTagId); )
      this.pop();
  }
  generateImpliedEndTagsWithExclusion(a) {
    for (; this.currentTagId !== void 0 && this.currentTagId !== a && $2.has(this.currentTagId); )
      this.pop();
  }
}
qm.OpenElementStack = sY;
var nd = {};
Object.defineProperty(nd, "__esModule", { value: !0 });
nd.FormattingElementList = nd.EntryType = void 0;
const Yw = 3;
var Xs;
(function(e) {
  e[e.Marker = 0] = "Marker", e[e.Element = 1] = "Element";
})(Xs || (nd.EntryType = Xs = {}));
const S2 = { type: Xs.Marker };
class iY {
  constructor(a) {
    this.treeAdapter = a, this.entries = [], this.bookmark = null;
  }
  //Noah Ark's condition
  //OPTIMIZATION: at first we try to find possible candidates for exclusion using
  //lightweight heuristics without thorough attributes check.
  _getNoahArkConditionCandidates(a, t) {
    const n = [], r = t.length, o = this.treeAdapter.getTagName(a), l = this.treeAdapter.getNamespaceURI(a);
    for (let u = 0; u < this.entries.length; u++) {
      const c = this.entries[u];
      if (c.type === Xs.Marker)
        break;
      const { element: f } = c;
      if (this.treeAdapter.getTagName(f) === o && this.treeAdapter.getNamespaceURI(f) === l) {
        const y = this.treeAdapter.getAttrList(f);
        y.length === r && n.push({ idx: u, attrs: y });
      }
    }
    return n;
  }
  _ensureNoahArkCondition(a) {
    if (this.entries.length < Yw)
      return;
    const t = this.treeAdapter.getAttrList(a), n = this._getNoahArkConditionCandidates(a, t);
    if (n.length < Yw)
      return;
    const r = new Map(t.map((l) => [l.name, l.value]));
    let o = 0;
    for (let l = 0; l < n.length; l++) {
      const u = n[l];
      u.attrs.every((c) => r.get(c.name) === c.value) && (o += 1, o >= Yw && this.entries.splice(u.idx, 1));
    }
  }
  //Mutations
  insertMarker() {
    this.entries.unshift(S2);
  }
  pushElement(a, t) {
    this._ensureNoahArkCondition(a), this.entries.unshift({
      type: Xs.Element,
      element: a,
      token: t
    });
  }
  insertElementAfterBookmark(a, t) {
    const n = this.entries.indexOf(this.bookmark);
    this.entries.splice(n, 0, {
      type: Xs.Element,
      element: a,
      token: t
    });
  }
  removeEntry(a) {
    const t = this.entries.indexOf(a);
    t !== -1 && this.entries.splice(t, 1);
  }
  /**
   * Clears the list of formatting elements up to the last marker.
   *
   * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker
   */
  clearToLastMarker() {
    const a = this.entries.indexOf(S2);
    a === -1 ? this.entries.length = 0 : this.entries.splice(0, a + 1);
  }
  //Search
  getElementEntryInScopeWithTagName(a) {
    const t = this.entries.find((n) => n.type === Xs.Marker || this.treeAdapter.getTagName(n.element) === a);
    return t && t.type === Xs.Element ? t : null;
  }
  getElementEntry(a) {
    return this.entries.find((t) => t.type === Xs.Element && t.element === a);
  }
}
nd.FormattingElementList = iY;
var Fm = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.defaultTreeAdapter = void 0;
  const a = Ta;
  e.defaultTreeAdapter = {
    //Node construction
    createDocument() {
      return {
        nodeName: "#document",
        mode: a.DOCUMENT_MODE.NO_QUIRKS,
        childNodes: []
      };
    },
    createDocumentFragment() {
      return {
        nodeName: "#document-fragment",
        childNodes: []
      };
    },
    createElement(t, n, r) {
      return {
        nodeName: t,
        tagName: t,
        attrs: r,
        namespaceURI: n,
        childNodes: [],
        parentNode: null
      };
    },
    createCommentNode(t) {
      return {
        nodeName: "#comment",
        data: t,
        parentNode: null
      };
    },
    createTextNode(t) {
      return {
        nodeName: "#text",
        value: t,
        parentNode: null
      };
    },
    //Tree mutation
    appendChild(t, n) {
      t.childNodes.push(n), n.parentNode = t;
    },
    insertBefore(t, n, r) {
      const o = t.childNodes.indexOf(r);
      t.childNodes.splice(o, 0, n), n.parentNode = t;
    },
    setTemplateContent(t, n) {
      t.content = n;
    },
    getTemplateContent(t) {
      return t.content;
    },
    setDocumentType(t, n, r, o) {
      const l = t.childNodes.find((u) => u.nodeName === "#documentType");
      if (l)
        l.name = n, l.publicId = r, l.systemId = o;
      else {
        const u = {
          nodeName: "#documentType",
          name: n,
          publicId: r,
          systemId: o,
          parentNode: null
        };
        e.defaultTreeAdapter.appendChild(t, u);
      }
    },
    setDocumentMode(t, n) {
      t.mode = n;
    },
    getDocumentMode(t) {
      return t.mode;
    },
    detachNode(t) {
      if (t.parentNode) {
        const n = t.parentNode.childNodes.indexOf(t);
        t.parentNode.childNodes.splice(n, 1), t.parentNode = null;
      }
    },
    insertText(t, n) {
      if (t.childNodes.length > 0) {
        const r = t.childNodes[t.childNodes.length - 1];
        if (e.defaultTreeAdapter.isTextNode(r)) {
          r.value += n;
          return;
        }
      }
      e.defaultTreeAdapter.appendChild(t, e.defaultTreeAdapter.createTextNode(n));
    },
    insertTextBefore(t, n, r) {
      const o = t.childNodes[t.childNodes.indexOf(r) - 1];
      o && e.defaultTreeAdapter.isTextNode(o) ? o.value += n : e.defaultTreeAdapter.insertBefore(t, e.defaultTreeAdapter.createTextNode(n), r);
    },
    adoptAttributes(t, n) {
      const r = new Set(t.attrs.map((o) => o.name));
      for (let o = 0; o < n.length; o++)
        r.has(n[o].name) || t.attrs.push(n[o]);
    },
    //Tree traversing
    getFirstChild(t) {
      return t.childNodes[0];
    },
    getChildNodes(t) {
      return t.childNodes;
    },
    getParentNode(t) {
      return t.parentNode;
    },
    getAttrList(t) {
      return t.attrs;
    },
    //Node data
    getTagName(t) {
      return t.tagName;
    },
    getNamespaceURI(t) {
      return t.namespaceURI;
    },
    getTextNodeContent(t) {
      return t.value;
    },
    getCommentNodeContent(t) {
      return t.data;
    },
    getDocumentTypeNodeName(t) {
      return t.name;
    },
    getDocumentTypeNodePublicId(t) {
      return t.publicId;
    },
    getDocumentTypeNodeSystemId(t) {
      return t.systemId;
    },
    //Node types
    isTextNode(t) {
      return t.nodeName === "#text";
    },
    isCommentNode(t) {
      return t.nodeName === "#comment";
    },
    isDocumentTypeNode(t) {
      return t.nodeName === "#documentType";
    },
    isElementNode(t) {
      return Object.prototype.hasOwnProperty.call(t, "tagName");
    },
    // Source code location
    setNodeSourceCodeLocation(t, n) {
      t.sourceCodeLocation = n;
    },
    getNodeSourceCodeLocation(t) {
      return t.sourceCodeLocation;
    },
    updateNodeSourceCodeLocation(t, n) {
      t.sourceCodeLocation = Object.assign(Object.assign({}, t.sourceCodeLocation), n);
    }
  };
})(Fm);
var Bm = {};
Object.defineProperty(Bm, "__esModule", { value: !0 });
Bm.isConforming = pY;
Bm.getDocumentMode = gY;
const Nl = Ta, VR = "html", oY = "about:legacy-compat", lY = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd", KR = [
  "+//silmaril//dtd html pro v0r11 19970101//",
  "-//as//dtd html 3.0 aswedit + extensions//",
  "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
  "-//ietf//dtd html 2.0 level 1//",
  "-//ietf//dtd html 2.0 level 2//",
  "-//ietf//dtd html 2.0 strict level 1//",
  "-//ietf//dtd html 2.0 strict level 2//",
  "-//ietf//dtd html 2.0 strict//",
  "-//ietf//dtd html 2.0//",
  "-//ietf//dtd html 2.1e//",
  "-//ietf//dtd html 3.0//",
  "-//ietf//dtd html 3.2 final//",
  "-//ietf//dtd html 3.2//",
  "-//ietf//dtd html 3//",
  "-//ietf//dtd html level 0//",
  "-//ietf//dtd html level 1//",
  "-//ietf//dtd html level 2//",
  "-//ietf//dtd html level 3//",
  "-//ietf//dtd html strict level 0//",
  "-//ietf//dtd html strict level 1//",
  "-//ietf//dtd html strict level 2//",
  "-//ietf//dtd html strict level 3//",
  "-//ietf//dtd html strict//",
  "-//ietf//dtd html//",
  "-//metrius//dtd metrius presentational//",
  "-//microsoft//dtd internet explorer 2.0 html strict//",
  "-//microsoft//dtd internet explorer 2.0 html//",
  "-//microsoft//dtd internet explorer 2.0 tables//",
  "-//microsoft//dtd internet explorer 3.0 html strict//",
  "-//microsoft//dtd internet explorer 3.0 html//",
  "-//microsoft//dtd internet explorer 3.0 tables//",
  "-//netscape comm. corp.//dtd html//",
  "-//netscape comm. corp.//dtd strict html//",
  "-//o'reilly and associates//dtd html 2.0//",
  "-//o'reilly and associates//dtd html extended 1.0//",
  "-//o'reilly and associates//dtd html extended relaxed 1.0//",
  "-//sq//dtd html 2.0 hotmetal + extensions//",
  "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
  "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
  "-//spyglass//dtd html 2.0 extended//",
  "-//sun microsystems corp.//dtd hotjava html//",
  "-//sun microsystems corp.//dtd hotjava strict html//",
  "-//w3c//dtd html 3 1995-03-24//",
  "-//w3c//dtd html 3.2 draft//",
  "-//w3c//dtd html 3.2 final//",
  "-//w3c//dtd html 3.2//",
  "-//w3c//dtd html 3.2s draft//",
  "-//w3c//dtd html 4.0 frameset//",
  "-//w3c//dtd html 4.0 transitional//",
  "-//w3c//dtd html experimental 19960712//",
  "-//w3c//dtd html experimental 970421//",
  "-//w3c//dtd w3 html//",
  "-//w3o//dtd w3 html 3.0//",
  "-//webtechs//dtd mozilla html 2.0//",
  "-//webtechs//dtd mozilla html//"
], dY = [
  ...KR,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
], uY = /* @__PURE__ */ new Set([
  "-//w3o//dtd w3 html strict 3.0//en//",
  "-/w3c/dtd html 4.0 transitional/en",
  "html"
]), YR = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"], cY = [
  ...YR,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
];
function O2(e, a) {
  return a.some((t) => e.startsWith(t));
}
function pY(e) {
  return e.name === VR && e.publicId === null && (e.systemId === null || e.systemId === oY);
}
function gY(e) {
  if (e.name !== VR)
    return Nl.DOCUMENT_MODE.QUIRKS;
  const { systemId: a } = e;
  if (a && a.toLowerCase() === lY)
    return Nl.DOCUMENT_MODE.QUIRKS;
  let { publicId: t } = e;
  if (t !== null) {
    if (t = t.toLowerCase(), uY.has(t))
      return Nl.DOCUMENT_MODE.QUIRKS;
    let n = a === null ? dY : KR;
    if (O2(t, n))
      return Nl.DOCUMENT_MODE.QUIRKS;
    if (n = a === null ? YR : cY, O2(t, n))
      return Nl.DOCUMENT_MODE.LIMITED_QUIRKS;
  }
  return Nl.DOCUMENT_MODE.NO_QUIRKS;
}
var h0 = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.SVG_TAG_NAMES_ADJUSTMENT_MAP = void 0, e.causesExit = c, e.adjustTokenMathMLAttrs = f, e.adjustTokenSVGAttrs = y, e.adjustTokenXMLAttrs = z, e.adjustTokenSVGTagName = v, e.isIntegrationPoint = A;
  const a = Ta, t = {
    TEXT_HTML: "text/html",
    APPLICATION_XML: "application/xhtml+xml"
  }, n = "definitionurl", r = "definitionURL", o = new Map([
    "attributeName",
    "attributeType",
    "baseFrequency",
    "baseProfile",
    "calcMode",
    "clipPathUnits",
    "diffuseConstant",
    "edgeMode",
    "filterUnits",
    "glyphRef",
    "gradientTransform",
    "gradientUnits",
    "kernelMatrix",
    "kernelUnitLength",
    "keyPoints",
    "keySplines",
    "keyTimes",
    "lengthAdjust",
    "limitingConeAngle",
    "markerHeight",
    "markerUnits",
    "markerWidth",
    "maskContentUnits",
    "maskUnits",
    "numOctaves",
    "pathLength",
    "patternContentUnits",
    "patternTransform",
    "patternUnits",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "preserveAlpha",
    "preserveAspectRatio",
    "primitiveUnits",
    "refX",
    "refY",
    "repeatCount",
    "repeatDur",
    "requiredExtensions",
    "requiredFeatures",
    "specularConstant",
    "specularExponent",
    "spreadMethod",
    "startOffset",
    "stdDeviation",
    "stitchTiles",
    "surfaceScale",
    "systemLanguage",
    "tableValues",
    "targetX",
    "targetY",
    "textLength",
    "viewBox",
    "viewTarget",
    "xChannelSelector",
    "yChannelSelector",
    "zoomAndPan"
  ].map((x) => [x.toLowerCase(), x])), l = /* @__PURE__ */ new Map([
    ["xlink:actuate", { prefix: "xlink", name: "actuate", namespace: a.NS.XLINK }],
    ["xlink:arcrole", { prefix: "xlink", name: "arcrole", namespace: a.NS.XLINK }],
    ["xlink:href", { prefix: "xlink", name: "href", namespace: a.NS.XLINK }],
    ["xlink:role", { prefix: "xlink", name: "role", namespace: a.NS.XLINK }],
    ["xlink:show", { prefix: "xlink", name: "show", namespace: a.NS.XLINK }],
    ["xlink:title", { prefix: "xlink", name: "title", namespace: a.NS.XLINK }],
    ["xlink:type", { prefix: "xlink", name: "type", namespace: a.NS.XLINK }],
    ["xml:lang", { prefix: "xml", name: "lang", namespace: a.NS.XML }],
    ["xml:space", { prefix: "xml", name: "space", namespace: a.NS.XML }],
    ["xmlns", { prefix: "", name: "xmlns", namespace: a.NS.XMLNS }],
    ["xmlns:xlink", { prefix: "xmlns", name: "xlink", namespace: a.NS.XMLNS }]
  ]);
  e.SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "clipPath",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "foreignObject",
    "glyphRef",
    "linearGradient",
    "radialGradient",
    "textPath"
  ].map((x) => [x.toLowerCase(), x]));
  const u = /* @__PURE__ */ new Set([
    a.TAG_ID.B,
    a.TAG_ID.BIG,
    a.TAG_ID.BLOCKQUOTE,
    a.TAG_ID.BODY,
    a.TAG_ID.BR,
    a.TAG_ID.CENTER,
    a.TAG_ID.CODE,
    a.TAG_ID.DD,
    a.TAG_ID.DIV,
    a.TAG_ID.DL,
    a.TAG_ID.DT,
    a.TAG_ID.EM,
    a.TAG_ID.EMBED,
    a.TAG_ID.H1,
    a.TAG_ID.H2,
    a.TAG_ID.H3,
    a.TAG_ID.H4,
    a.TAG_ID.H5,
    a.TAG_ID.H6,
    a.TAG_ID.HEAD,
    a.TAG_ID.HR,
    a.TAG_ID.I,
    a.TAG_ID.IMG,
    a.TAG_ID.LI,
    a.TAG_ID.LISTING,
    a.TAG_ID.MENU,
    a.TAG_ID.META,
    a.TAG_ID.NOBR,
    a.TAG_ID.OL,
    a.TAG_ID.P,
    a.TAG_ID.PRE,
    a.TAG_ID.RUBY,
    a.TAG_ID.S,
    a.TAG_ID.SMALL,
    a.TAG_ID.SPAN,
    a.TAG_ID.STRONG,
    a.TAG_ID.STRIKE,
    a.TAG_ID.SUB,
    a.TAG_ID.SUP,
    a.TAG_ID.TABLE,
    a.TAG_ID.TT,
    a.TAG_ID.U,
    a.TAG_ID.UL,
    a.TAG_ID.VAR
  ]);
  function c(x) {
    const w = x.tagID;
    return w === a.TAG_ID.FONT && x.attrs.some(({ name: S }) => S === a.ATTRS.COLOR || S === a.ATTRS.SIZE || S === a.ATTRS.FACE) || u.has(w);
  }
  function f(x) {
    for (let w = 0; w < x.attrs.length; w++)
      if (x.attrs[w].name === n) {
        x.attrs[w].name = r;
        break;
      }
  }
  function y(x) {
    for (let w = 0; w < x.attrs.length; w++) {
      const j = o.get(x.attrs[w].name);
      j != null && (x.attrs[w].name = j);
    }
  }
  function z(x) {
    for (let w = 0; w < x.attrs.length; w++) {
      const j = l.get(x.attrs[w].name);
      j && (x.attrs[w].prefix = j.prefix, x.attrs[w].name = j.name, x.attrs[w].namespace = j.namespace);
    }
  }
  function v(x) {
    const w = e.SVG_TAG_NAMES_ADJUSTMENT_MAP.get(x.tagName);
    w != null && (x.tagName = w, x.tagID = (0, a.getTagID)(x.tagName));
  }
  function O(x, w) {
    return w === a.NS.MATHML && (x === a.TAG_ID.MI || x === a.TAG_ID.MO || x === a.TAG_ID.MN || x === a.TAG_ID.MS || x === a.TAG_ID.MTEXT);
  }
  function I(x, w, j) {
    if (w === a.NS.MATHML && x === a.TAG_ID.ANNOTATION_XML) {
      for (let S = 0; S < j.length; S++)
        if (j[S].name === a.ATTRS.ENCODING) {
          const P = j[S].value.toLowerCase();
          return P === t.TEXT_HTML || P === t.APPLICATION_XML;
        }
    }
    return w === a.NS.SVG && (x === a.TAG_ID.FOREIGN_OBJECT || x === a.TAG_ID.DESC || x === a.TAG_ID.TITLE);
  }
  function A(x, w, j, S) {
    return (!S || S === a.NS.HTML) && I(x, w, j) || (!S || S === a.NS.MATHML) && O(x, w);
  }
})(h0);
Object.defineProperty(oc, "__esModule", { value: !0 });
oc.Parser = void 0;
const Ht = qo, mY = qm, I2 = nd, fY = Fm, C2 = Bm, us = h0, _t = Go, QR = Qt, p = Ta, at = Vo, hY = "hidden", yY = 8, zY = 3;
var L;
(function(e) {
  e[e.INITIAL = 0] = "INITIAL", e[e.BEFORE_HTML = 1] = "BEFORE_HTML", e[e.BEFORE_HEAD = 2] = "BEFORE_HEAD", e[e.IN_HEAD = 3] = "IN_HEAD", e[e.IN_HEAD_NO_SCRIPT = 4] = "IN_HEAD_NO_SCRIPT", e[e.AFTER_HEAD = 5] = "AFTER_HEAD", e[e.IN_BODY = 6] = "IN_BODY", e[e.TEXT = 7] = "TEXT", e[e.IN_TABLE = 8] = "IN_TABLE", e[e.IN_TABLE_TEXT = 9] = "IN_TABLE_TEXT", e[e.IN_CAPTION = 10] = "IN_CAPTION", e[e.IN_COLUMN_GROUP = 11] = "IN_COLUMN_GROUP", e[e.IN_TABLE_BODY = 12] = "IN_TABLE_BODY", e[e.IN_ROW = 13] = "IN_ROW", e[e.IN_CELL = 14] = "IN_CELL", e[e.IN_SELECT = 15] = "IN_SELECT", e[e.IN_SELECT_IN_TABLE = 16] = "IN_SELECT_IN_TABLE", e[e.IN_TEMPLATE = 17] = "IN_TEMPLATE", e[e.AFTER_BODY = 18] = "AFTER_BODY", e[e.IN_FRAMESET = 19] = "IN_FRAMESET", e[e.AFTER_FRAMESET = 20] = "AFTER_FRAMESET", e[e.AFTER_AFTER_BODY = 21] = "AFTER_AFTER_BODY", e[e.AFTER_AFTER_FRAMESET = 22] = "AFTER_AFTER_FRAMESET";
})(L || (L = {}));
const bY = {
  startLine: -1,
  startCol: -1,
  startOffset: -1,
  endLine: -1,
  endCol: -1,
  endOffset: -1
}, XR = /* @__PURE__ */ new Set([p.TAG_ID.TABLE, p.TAG_ID.TBODY, p.TAG_ID.TFOOT, p.TAG_ID.THEAD, p.TAG_ID.TR]), P2 = {
  scriptingEnabled: !0,
  sourceCodeLocationInfo: !1,
  treeAdapter: fY.defaultTreeAdapter,
  onParseError: null
};
let wY = class {
  constructor(a, t, n = null, r = null) {
    this.fragmentContext = n, this.scriptHandler = r, this.currentToken = null, this.stopped = !1, this.insertionMode = L.INITIAL, this.originalInsertionMode = L.INITIAL, this.headElement = null, this.formElement = null, this.currentNotInHTML = !1, this.tmplInsertionModeStack = [], this.pendingCharacterTokens = [], this.hasNonWhitespacePendingCharacterToken = !1, this.framesetOk = !0, this.skipNextNewLine = !1, this.fosterParentingEnabled = !1, this.options = Object.assign(Object.assign({}, P2), a), this.treeAdapter = this.options.treeAdapter, this.onParseError = this.options.onParseError, this.onParseError && (this.options.sourceCodeLocationInfo = !0), this.document = t ?? this.treeAdapter.createDocument(), this.tokenizer = new Ht.Tokenizer(this.options, this), this.activeFormattingElements = new I2.FormattingElementList(this.treeAdapter), this.fragmentContextID = n ? (0, p.getTagID)(this.treeAdapter.getTagName(n)) : p.TAG_ID.UNKNOWN, this._setContextModes(n ?? this.document, this.fragmentContextID), this.openElements = new mY.OpenElementStack(this.document, this.treeAdapter, this);
  }
  // API
  static parse(a, t) {
    const n = new this(t);
    return n.tokenizer.write(a, !0), n.document;
  }
  static getFragmentParser(a, t) {
    const n = Object.assign(Object.assign({}, P2), t);
    a ?? (a = n.treeAdapter.createElement(p.TAG_NAMES.TEMPLATE, p.NS.HTML, []));
    const r = n.treeAdapter.createElement("documentmock", p.NS.HTML, []), o = new this(n, r, a);
    return o.fragmentContextID === p.TAG_ID.TEMPLATE && o.tmplInsertionModeStack.unshift(L.IN_TEMPLATE), o._initTokenizerForFragmentParsing(), o._insertFakeRootElement(), o._resetInsertionMode(), o._findFormInFragmentContext(), o;
  }
  getFragment() {
    const a = this.treeAdapter.getFirstChild(this.document), t = this.treeAdapter.createDocumentFragment();
    return this._adoptNodes(a, t), t;
  }
  //Errors
  /** @internal */
  _err(a, t, n) {
    var r;
    if (!this.onParseError)
      return;
    const o = (r = a.location) !== null && r !== void 0 ? r : bY, l = {
      code: t,
      startLine: o.startLine,
      startCol: o.startCol,
      startOffset: o.startOffset,
      endLine: n ? o.startLine : o.endLine,
      endCol: n ? o.startCol : o.endCol,
      endOffset: n ? o.startOffset : o.endOffset
    };
    this.onParseError(l);
  }
  //Stack events
  /** @internal */
  onItemPush(a, t, n) {
    var r, o;
    (o = (r = this.treeAdapter).onItemPush) === null || o === void 0 || o.call(r, a), n && this.openElements.stackTop > 0 && this._setContextModes(a, t);
  }
  /** @internal */
  onItemPop(a, t) {
    var n, r;
    if (this.options.sourceCodeLocationInfo && this._setEndLocation(a, this.currentToken), (r = (n = this.treeAdapter).onItemPop) === null || r === void 0 || r.call(n, a, this.openElements.current), t) {
      let o, l;
      this.openElements.stackTop === 0 && this.fragmentContext ? (o = this.fragmentContext, l = this.fragmentContextID) : { current: o, currentTagId: l } = this.openElements, this._setContextModes(o, l);
    }
  }
  _setContextModes(a, t) {
    const n = a === this.document || a && this.treeAdapter.getNamespaceURI(a) === p.NS.HTML;
    this.currentNotInHTML = !n, this.tokenizer.inForeignNode = !n && a !== void 0 && t !== void 0 && !this._isIntegrationPoint(t, a);
  }
  /** @protected */
  _switchToTextParsing(a, t) {
    this._insertElement(a, p.NS.HTML), this.tokenizer.state = t, this.originalInsertionMode = this.insertionMode, this.insertionMode = L.TEXT;
  }
  switchToPlaintextParsing() {
    this.insertionMode = L.TEXT, this.originalInsertionMode = L.IN_BODY, this.tokenizer.state = Ht.TokenizerMode.PLAINTEXT;
  }
  //Fragment parsing
  /** @protected */
  _getAdjustedCurrentElement() {
    return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
  }
  /** @protected */
  _findFormInFragmentContext() {
    let a = this.fragmentContext;
    for (; a; ) {
      if (this.treeAdapter.getTagName(a) === p.TAG_NAMES.FORM) {
        this.formElement = a;
        break;
      }
      a = this.treeAdapter.getParentNode(a);
    }
  }
  _initTokenizerForFragmentParsing() {
    if (!(!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== p.NS.HTML))
      switch (this.fragmentContextID) {
        case p.TAG_ID.TITLE:
        case p.TAG_ID.TEXTAREA: {
          this.tokenizer.state = Ht.TokenizerMode.RCDATA;
          break;
        }
        case p.TAG_ID.STYLE:
        case p.TAG_ID.XMP:
        case p.TAG_ID.IFRAME:
        case p.TAG_ID.NOEMBED:
        case p.TAG_ID.NOFRAMES:
        case p.TAG_ID.NOSCRIPT: {
          this.tokenizer.state = Ht.TokenizerMode.RAWTEXT;
          break;
        }
        case p.TAG_ID.SCRIPT: {
          this.tokenizer.state = Ht.TokenizerMode.SCRIPT_DATA;
          break;
        }
        case p.TAG_ID.PLAINTEXT: {
          this.tokenizer.state = Ht.TokenizerMode.PLAINTEXT;
          break;
        }
      }
  }
  //Tree mutation
  /** @protected */
  _setDocumentType(a) {
    const t = a.name || "", n = a.publicId || "", r = a.systemId || "";
    if (this.treeAdapter.setDocumentType(this.document, t, n, r), a.location) {
      const l = this.treeAdapter.getChildNodes(this.document).find((u) => this.treeAdapter.isDocumentTypeNode(u));
      l && this.treeAdapter.setNodeSourceCodeLocation(l, a.location);
    }
  }
  /** @protected */
  _attachElementToTree(a, t) {
    if (this.options.sourceCodeLocationInfo) {
      const n = t && Object.assign(Object.assign({}, t), { startTag: t });
      this.treeAdapter.setNodeSourceCodeLocation(a, n);
    }
    if (this._shouldFosterParentOnInsertion())
      this._fosterParentElement(a);
    else {
      const n = this.openElements.currentTmplContentOrNode;
      this.treeAdapter.appendChild(n ?? this.document, a);
    }
  }
  /**
   * For self-closing tags. Add an element to the tree, but skip adding it
   * to the stack.
   */
  /** @protected */
  _appendElement(a, t) {
    const n = this.treeAdapter.createElement(a.tagName, t, a.attrs);
    this._attachElementToTree(n, a.location);
  }
  /** @protected */
  _insertElement(a, t) {
    const n = this.treeAdapter.createElement(a.tagName, t, a.attrs);
    this._attachElementToTree(n, a.location), this.openElements.push(n, a.tagID);
  }
  /** @protected */
  _insertFakeElement(a, t) {
    const n = this.treeAdapter.createElement(a, p.NS.HTML, []);
    this._attachElementToTree(n, null), this.openElements.push(n, t);
  }
  /** @protected */
  _insertTemplate(a) {
    const t = this.treeAdapter.createElement(a.tagName, p.NS.HTML, a.attrs), n = this.treeAdapter.createDocumentFragment();
    this.treeAdapter.setTemplateContent(t, n), this._attachElementToTree(t, a.location), this.openElements.push(t, a.tagID), this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(n, null);
  }
  /** @protected */
  _insertFakeRootElement() {
    const a = this.treeAdapter.createElement(p.TAG_NAMES.HTML, p.NS.HTML, []);
    this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(a, null), this.treeAdapter.appendChild(this.openElements.current, a), this.openElements.push(a, p.TAG_ID.HTML);
  }
  /** @protected */
  _appendCommentNode(a, t) {
    const n = this.treeAdapter.createCommentNode(a.data);
    this.treeAdapter.appendChild(t, n), this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(n, a.location);
  }
  /** @protected */
  _insertCharacters(a) {
    let t, n;
    if (this._shouldFosterParentOnInsertion() ? ({ parent: t, beforeElement: n } = this._findFosterParentingLocation(), n ? this.treeAdapter.insertTextBefore(t, a.chars, n) : this.treeAdapter.insertText(t, a.chars)) : (t = this.openElements.currentTmplContentOrNode, this.treeAdapter.insertText(t, a.chars)), !a.location)
      return;
    const r = this.treeAdapter.getChildNodes(t), o = n ? r.lastIndexOf(n) : r.length, l = r[o - 1];
    if (this.treeAdapter.getNodeSourceCodeLocation(l)) {
      const { endLine: c, endCol: f, endOffset: y } = a.location;
      this.treeAdapter.updateNodeSourceCodeLocation(l, { endLine: c, endCol: f, endOffset: y });
    } else this.options.sourceCodeLocationInfo && this.treeAdapter.setNodeSourceCodeLocation(l, a.location);
  }
  /** @protected */
  _adoptNodes(a, t) {
    for (let n = this.treeAdapter.getFirstChild(a); n; n = this.treeAdapter.getFirstChild(a))
      this.treeAdapter.detachNode(n), this.treeAdapter.appendChild(t, n);
  }
  /** @protected */
  _setEndLocation(a, t) {
    if (this.treeAdapter.getNodeSourceCodeLocation(a) && t.location) {
      const n = t.location, r = this.treeAdapter.getTagName(a), o = (
        // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
        // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
        t.type === at.TokenType.END_TAG && r === t.tagName ? {
          endTag: Object.assign({}, n),
          endLine: n.endLine,
          endCol: n.endCol,
          endOffset: n.endOffset
        } : {
          endLine: n.startLine,
          endCol: n.startCol,
          endOffset: n.startOffset
        }
      );
      this.treeAdapter.updateNodeSourceCodeLocation(a, o);
    }
  }
  //Token processing
  shouldProcessStartTagTokenInForeignContent(a) {
    if (!this.currentNotInHTML)
      return !1;
    let t, n;
    return this.openElements.stackTop === 0 && this.fragmentContext ? (t = this.fragmentContext, n = this.fragmentContextID) : { current: t, currentTagId: n } = this.openElements, a.tagID === p.TAG_ID.SVG && this.treeAdapter.getTagName(t) === p.TAG_NAMES.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(t) === p.NS.MATHML ? !1 : (
      // Check that `current` is not an integration point for HTML or MathML elements.
      this.tokenizer.inForeignNode || // If it _is_ an integration point, then we might have to check that it is not an HTML
      // integration point.
      (a.tagID === p.TAG_ID.MGLYPH || a.tagID === p.TAG_ID.MALIGNMARK) && n !== void 0 && !this._isIntegrationPoint(n, t, p.NS.HTML)
    );
  }
  /** @protected */
  _processToken(a) {
    switch (a.type) {
      case at.TokenType.CHARACTER: {
        this.onCharacter(a);
        break;
      }
      case at.TokenType.NULL_CHARACTER: {
        this.onNullCharacter(a);
        break;
      }
      case at.TokenType.COMMENT: {
        this.onComment(a);
        break;
      }
      case at.TokenType.DOCTYPE: {
        this.onDoctype(a);
        break;
      }
      case at.TokenType.START_TAG: {
        this._processStartTag(a);
        break;
      }
      case at.TokenType.END_TAG: {
        this.onEndTag(a);
        break;
      }
      case at.TokenType.EOF: {
        this.onEof(a);
        break;
      }
      case at.TokenType.WHITESPACE_CHARACTER: {
        this.onWhitespaceCharacter(a);
        break;
      }
    }
  }
  //Integration points
  /** @protected */
  _isIntegrationPoint(a, t, n) {
    const r = this.treeAdapter.getNamespaceURI(t), o = this.treeAdapter.getAttrList(t);
    return us.isIntegrationPoint(a, r, o, n);
  }
  //Active formatting elements reconstruction
  /** @protected */
  _reconstructActiveFormattingElements() {
    const a = this.activeFormattingElements.entries.length;
    if (a) {
      const t = this.activeFormattingElements.entries.findIndex((r) => r.type === I2.EntryType.Marker || this.openElements.contains(r.element)), n = t === -1 ? a - 1 : t - 1;
      for (let r = n; r >= 0; r--) {
        const o = this.activeFormattingElements.entries[r];
        this._insertElement(o.token, this.treeAdapter.getNamespaceURI(o.element)), o.element = this.openElements.current;
      }
    }
  }
  //Close elements
  /** @protected */
  _closeTableCell() {
    this.openElements.generateImpliedEndTags(), this.openElements.popUntilTableCellPopped(), this.activeFormattingElements.clearToLastMarker(), this.insertionMode = L.IN_ROW;
  }
  /** @protected */
  _closePElement() {
    this.openElements.generateImpliedEndTagsWithExclusion(p.TAG_ID.P), this.openElements.popUntilTagNamePopped(p.TAG_ID.P);
  }
  //Insertion modes
  /** @protected */
  _resetInsertionMode() {
    for (let a = this.openElements.stackTop; a >= 0; a--)
      switch (a === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[a]) {
        case p.TAG_ID.TR: {
          this.insertionMode = L.IN_ROW;
          return;
        }
        case p.TAG_ID.TBODY:
        case p.TAG_ID.THEAD:
        case p.TAG_ID.TFOOT: {
          this.insertionMode = L.IN_TABLE_BODY;
          return;
        }
        case p.TAG_ID.CAPTION: {
          this.insertionMode = L.IN_CAPTION;
          return;
        }
        case p.TAG_ID.COLGROUP: {
          this.insertionMode = L.IN_COLUMN_GROUP;
          return;
        }
        case p.TAG_ID.TABLE: {
          this.insertionMode = L.IN_TABLE;
          return;
        }
        case p.TAG_ID.BODY: {
          this.insertionMode = L.IN_BODY;
          return;
        }
        case p.TAG_ID.FRAMESET: {
          this.insertionMode = L.IN_FRAMESET;
          return;
        }
        case p.TAG_ID.SELECT: {
          this._resetInsertionModeForSelect(a);
          return;
        }
        case p.TAG_ID.TEMPLATE: {
          this.insertionMode = this.tmplInsertionModeStack[0];
          return;
        }
        case p.TAG_ID.HTML: {
          this.insertionMode = this.headElement ? L.AFTER_HEAD : L.BEFORE_HEAD;
          return;
        }
        case p.TAG_ID.TD:
        case p.TAG_ID.TH: {
          if (a > 0) {
            this.insertionMode = L.IN_CELL;
            return;
          }
          break;
        }
        case p.TAG_ID.HEAD: {
          if (a > 0) {
            this.insertionMode = L.IN_HEAD;
            return;
          }
          break;
        }
      }
    this.insertionMode = L.IN_BODY;
  }
  /** @protected */
  _resetInsertionModeForSelect(a) {
    if (a > 0)
      for (let t = a - 1; t > 0; t--) {
        const n = this.openElements.tagIDs[t];
        if (n === p.TAG_ID.TEMPLATE)
          break;
        if (n === p.TAG_ID.TABLE) {
          this.insertionMode = L.IN_SELECT_IN_TABLE;
          return;
        }
      }
    this.insertionMode = L.IN_SELECT;
  }
  //Foster parenting
  /** @protected */
  _isElementCausesFosterParenting(a) {
    return XR.has(a);
  }
  /** @protected */
  _shouldFosterParentOnInsertion() {
    return this.fosterParentingEnabled && this.openElements.currentTagId !== void 0 && this._isElementCausesFosterParenting(this.openElements.currentTagId);
  }
  /** @protected */
  _findFosterParentingLocation() {
    for (let a = this.openElements.stackTop; a >= 0; a--) {
      const t = this.openElements.items[a];
      switch (this.openElements.tagIDs[a]) {
        case p.TAG_ID.TEMPLATE: {
          if (this.treeAdapter.getNamespaceURI(t) === p.NS.HTML)
            return { parent: this.treeAdapter.getTemplateContent(t), beforeElement: null };
          break;
        }
        case p.TAG_ID.TABLE: {
          const n = this.treeAdapter.getParentNode(t);
          return n ? { parent: n, beforeElement: t } : { parent: this.openElements.items[a - 1], beforeElement: null };
        }
      }
    }
    return { parent: this.openElements.items[0], beforeElement: null };
  }
  /** @protected */
  _fosterParentElement(a) {
    const t = this._findFosterParentingLocation();
    t.beforeElement ? this.treeAdapter.insertBefore(t.parent, a, t.beforeElement) : this.treeAdapter.appendChild(t.parent, a);
  }
  //Special elements
  /** @protected */
  _isSpecialElement(a, t) {
    const n = this.treeAdapter.getNamespaceURI(a);
    return p.SPECIAL_ELEMENTS[n].has(t);
  }
  /** @internal */
  onCharacter(a) {
    if (this.skipNextNewLine = !1, this.tokenizer.inForeignNode) {
      QQ(this, a);
      return;
    }
    switch (this.insertionMode) {
      case L.INITIAL: {
        Su(this, a);
        break;
      }
      case L.BEFORE_HTML: {
        Ku(this, a);
        break;
      }
      case L.BEFORE_HEAD: {
        Yu(this, a);
        break;
      }
      case L.IN_HEAD: {
        Qu(this, a);
        break;
      }
      case L.IN_HEAD_NO_SCRIPT: {
        Xu(this, a);
        break;
      }
      case L.AFTER_HEAD: {
        Zu(this, a);
        break;
      }
      case L.IN_BODY:
      case L.IN_CAPTION:
      case L.IN_CELL:
      case L.IN_TEMPLATE: {
        JR(this, a);
        break;
      }
      case L.TEXT:
      case L.IN_SELECT:
      case L.IN_SELECT_IN_TABLE: {
        this._insertCharacters(a);
        break;
      }
      case L.IN_TABLE:
      case L.IN_TABLE_BODY:
      case L.IN_ROW: {
        Qw(this, a);
        break;
      }
      case L.IN_TABLE_TEXT: {
        s3(this, a);
        break;
      }
      case L.IN_COLUMN_GROUP: {
        vm(this, a);
        break;
      }
      case L.AFTER_BODY: {
        km(this, a);
        break;
      }
      case L.AFTER_AFTER_BODY: {
        lm(this, a);
        break;
      }
    }
  }
  /** @internal */
  onNullCharacter(a) {
    if (this.skipNextNewLine = !1, this.tokenizer.inForeignNode) {
      YQ(this, a);
      return;
    }
    switch (this.insertionMode) {
      case L.INITIAL: {
        Su(this, a);
        break;
      }
      case L.BEFORE_HTML: {
        Ku(this, a);
        break;
      }
      case L.BEFORE_HEAD: {
        Yu(this, a);
        break;
      }
      case L.IN_HEAD: {
        Qu(this, a);
        break;
      }
      case L.IN_HEAD_NO_SCRIPT: {
        Xu(this, a);
        break;
      }
      case L.AFTER_HEAD: {
        Zu(this, a);
        break;
      }
      case L.TEXT: {
        this._insertCharacters(a);
        break;
      }
      case L.IN_TABLE:
      case L.IN_TABLE_BODY:
      case L.IN_ROW: {
        Qw(this, a);
        break;
      }
      case L.IN_COLUMN_GROUP: {
        vm(this, a);
        break;
      }
      case L.AFTER_BODY: {
        km(this, a);
        break;
      }
      case L.AFTER_AFTER_BODY: {
        lm(this, a);
        break;
      }
    }
  }
  /** @internal */
  onComment(a) {
    if (this.skipNextNewLine = !1, this.currentNotInHTML) {
      Pk(this, a);
      return;
    }
    switch (this.insertionMode) {
      case L.INITIAL:
      case L.BEFORE_HTML:
      case L.BEFORE_HEAD:
      case L.IN_HEAD:
      case L.IN_HEAD_NO_SCRIPT:
      case L.AFTER_HEAD:
      case L.IN_BODY:
      case L.IN_TABLE:
      case L.IN_CAPTION:
      case L.IN_COLUMN_GROUP:
      case L.IN_TABLE_BODY:
      case L.IN_ROW:
      case L.IN_CELL:
      case L.IN_SELECT:
      case L.IN_SELECT_IN_TABLE:
      case L.IN_TEMPLATE:
      case L.IN_FRAMESET:
      case L.AFTER_FRAMESET: {
        Pk(this, a);
        break;
      }
      case L.IN_TABLE_TEXT: {
        Ou(this, a);
        break;
      }
      case L.AFTER_BODY: {
        $Y(this, a);
        break;
      }
      case L.AFTER_AFTER_BODY:
      case L.AFTER_AFTER_FRAMESET: {
        jY(this, a);
        break;
      }
    }
  }
  /** @internal */
  onDoctype(a) {
    switch (this.skipNextNewLine = !1, this.insertionMode) {
      case L.INITIAL: {
        xY(this, a);
        break;
      }
      case L.BEFORE_HEAD:
      case L.IN_HEAD:
      case L.IN_HEAD_NO_SCRIPT:
      case L.AFTER_HEAD: {
        this._err(a, _t.ERR.misplacedDoctype);
        break;
      }
      case L.IN_TABLE_TEXT: {
        Ou(this, a);
        break;
      }
    }
  }
  /** @internal */
  onStartTag(a) {
    this.skipNextNewLine = !1, this.currentToken = a, this._processStartTag(a), a.selfClosing && !a.ackSelfClosing && this._err(a, _t.ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
  }
  /**
   * Processes a given start tag.
   *
   * `onStartTag` checks if a self-closing tag was recognized. When a token
   * is moved inbetween multiple insertion modes, this check for self-closing
   * could lead to false positives. To avoid this, `_processStartTag` is used
   * for nested calls.
   *
   * @param token The token to process.
   * @protected
   */
  _processStartTag(a) {
    this.shouldProcessStartTagTokenInForeignContent(a) ? XQ(this, a) : this._startTagOutsideForeignContent(a);
  }
  /** @protected */
  _startTagOutsideForeignContent(a) {
    switch (this.insertionMode) {
      case L.INITIAL: {
        Su(this, a);
        break;
      }
      case L.BEFORE_HTML: {
        SY(this, a);
        break;
      }
      case L.BEFORE_HEAD: {
        IY(this, a);
        break;
      }
      case L.IN_HEAD: {
        qr(this, a);
        break;
      }
      case L.IN_HEAD_NO_SCRIPT: {
        RY(this, a);
        break;
      }
      case L.AFTER_HEAD: {
        NY(this, a);
        break;
      }
      case L.IN_BODY: {
        Dt(this, a);
        break;
      }
      case L.IN_TABLE: {
        rd(this, a);
        break;
      }
      case L.IN_TABLE_TEXT: {
        Ou(this, a);
        break;
      }
      case L.IN_CAPTION: {
        CQ(this, a);
        break;
      }
      case L.IN_COLUMN_GROUP: {
        b0(this, a);
        break;
      }
      case L.IN_TABLE_BODY: {
        Hm(this, a);
        break;
      }
      case L.IN_ROW: {
        Gm(this, a);
        break;
      }
      case L.IN_CELL: {
        DQ(this, a);
        break;
      }
      case L.IN_SELECT: {
        l3(this, a);
        break;
      }
      case L.IN_SELECT_IN_TABLE: {
        LQ(this, a);
        break;
      }
      case L.IN_TEMPLATE: {
        qQ(this, a);
        break;
      }
      case L.AFTER_BODY: {
        BQ(this, a);
        break;
      }
      case L.IN_FRAMESET: {
        WQ(this, a);
        break;
      }
      case L.AFTER_FRAMESET: {
        HQ(this, a);
        break;
      }
      case L.AFTER_AFTER_BODY: {
        VQ(this, a);
        break;
      }
      case L.AFTER_AFTER_FRAMESET: {
        KQ(this, a);
        break;
      }
    }
  }
  /** @internal */
  onEndTag(a) {
    this.skipNextNewLine = !1, this.currentToken = a, this.currentNotInHTML ? ZQ(this, a) : this._endTagOutsideForeignContent(a);
  }
  /** @protected */
  _endTagOutsideForeignContent(a) {
    switch (this.insertionMode) {
      case L.INITIAL: {
        Su(this, a);
        break;
      }
      case L.BEFORE_HTML: {
        OY(this, a);
        break;
      }
      case L.BEFORE_HEAD: {
        CY(this, a);
        break;
      }
      case L.IN_HEAD: {
        PY(this, a);
        break;
      }
      case L.IN_HEAD_NO_SCRIPT: {
        DY(this, a);
        break;
      }
      case L.AFTER_HEAD: {
        LY(this, a);
        break;
      }
      case L.IN_BODY: {
        Um(this, a);
        break;
      }
      case L.TEXT: {
        _Q(this, a);
        break;
      }
      case L.IN_TABLE: {
        uc(this, a);
        break;
      }
      case L.IN_TABLE_TEXT: {
        Ou(this, a);
        break;
      }
      case L.IN_CAPTION: {
        PQ(this, a);
        break;
      }
      case L.IN_COLUMN_GROUP: {
        RQ(this, a);
        break;
      }
      case L.IN_TABLE_BODY: {
        Rk(this, a);
        break;
      }
      case L.IN_ROW: {
        o3(this, a);
        break;
      }
      case L.IN_CELL: {
        NQ(this, a);
        break;
      }
      case L.IN_SELECT: {
        d3(this, a);
        break;
      }
      case L.IN_SELECT_IN_TABLE: {
        MQ(this, a);
        break;
      }
      case L.IN_TEMPLATE: {
        FQ(this, a);
        break;
      }
      case L.AFTER_BODY: {
        c3(this, a);
        break;
      }
      case L.IN_FRAMESET: {
        UQ(this, a);
        break;
      }
      case L.AFTER_FRAMESET: {
        GQ(this, a);
        break;
      }
      case L.AFTER_AFTER_BODY: {
        lm(this, a);
        break;
      }
    }
  }
  /** @internal */
  onEof(a) {
    switch (this.insertionMode) {
      case L.INITIAL: {
        Su(this, a);
        break;
      }
      case L.BEFORE_HTML: {
        Ku(this, a);
        break;
      }
      case L.BEFORE_HEAD: {
        Yu(this, a);
        break;
      }
      case L.IN_HEAD: {
        Qu(this, a);
        break;
      }
      case L.IN_HEAD_NO_SCRIPT: {
        Xu(this, a);
        break;
      }
      case L.AFTER_HEAD: {
        Zu(this, a);
        break;
      }
      case L.IN_BODY:
      case L.IN_TABLE:
      case L.IN_CAPTION:
      case L.IN_COLUMN_GROUP:
      case L.IN_TABLE_BODY:
      case L.IN_ROW:
      case L.IN_CELL:
      case L.IN_SELECT:
      case L.IN_SELECT_IN_TABLE: {
        n3(this, a);
        break;
      }
      case L.TEXT: {
        EQ(this, a);
        break;
      }
      case L.IN_TABLE_TEXT: {
        Ou(this, a);
        break;
      }
      case L.IN_TEMPLATE: {
        u3(this, a);
        break;
      }
      case L.AFTER_BODY:
      case L.IN_FRAMESET:
      case L.AFTER_FRAMESET:
      case L.AFTER_AFTER_BODY:
      case L.AFTER_AFTER_FRAMESET: {
        z0(this, a);
        break;
      }
    }
  }
  /** @internal */
  onWhitespaceCharacter(a) {
    if (this.skipNextNewLine && (this.skipNextNewLine = !1, a.chars.charCodeAt(0) === QR.CODE_POINTS.LINE_FEED)) {
      if (a.chars.length === 1)
        return;
      a.chars = a.chars.substr(1);
    }
    if (this.tokenizer.inForeignNode) {
      this._insertCharacters(a);
      return;
    }
    switch (this.insertionMode) {
      case L.IN_HEAD:
      case L.IN_HEAD_NO_SCRIPT:
      case L.AFTER_HEAD:
      case L.TEXT:
      case L.IN_COLUMN_GROUP:
      case L.IN_SELECT:
      case L.IN_SELECT_IN_TABLE:
      case L.IN_FRAMESET:
      case L.AFTER_FRAMESET: {
        this._insertCharacters(a);
        break;
      }
      case L.IN_BODY:
      case L.IN_CAPTION:
      case L.IN_CELL:
      case L.IN_TEMPLATE:
      case L.AFTER_BODY:
      case L.AFTER_AFTER_BODY:
      case L.AFTER_AFTER_FRAMESET: {
        ZR(this, a);
        break;
      }
      case L.IN_TABLE:
      case L.IN_TABLE_BODY:
      case L.IN_ROW: {
        Qw(this, a);
        break;
      }
      case L.IN_TABLE_TEXT: {
        r3(this, a);
        break;
      }
    }
  }
};
oc.Parser = wY;
function vY(e, a) {
  let t = e.activeFormattingElements.getElementEntryInScopeWithTagName(a.tagName);
  return t ? e.openElements.contains(t.element) ? e.openElements.hasInScope(a.tagID) || (t = null) : (e.activeFormattingElements.removeEntry(t), t = null) : t3(e, a), t;
}
function kY(e, a) {
  let t = null, n = e.openElements.stackTop;
  for (; n >= 0; n--) {
    const r = e.openElements.items[n];
    if (r === a.element)
      break;
    e._isSpecialElement(r, e.openElements.tagIDs[n]) && (t = r);
  }
  return t || (e.openElements.shortenToLength(Math.max(n, 0)), e.activeFormattingElements.removeEntry(a)), t;
}
function _Y(e, a, t) {
  let n = a, r = e.openElements.getCommonAncestor(a);
  for (let o = 0, l = r; l !== t; o++, l = r) {
    r = e.openElements.getCommonAncestor(l);
    const u = e.activeFormattingElements.getElementEntry(l), c = u && o >= zY;
    !u || c ? (c && e.activeFormattingElements.removeEntry(u), e.openElements.remove(l)) : (l = EY(e, u), n === a && (e.activeFormattingElements.bookmark = u), e.treeAdapter.detachNode(n), e.treeAdapter.appendChild(l, n), n = l);
  }
  return n;
}
function EY(e, a) {
  const t = e.treeAdapter.getNamespaceURI(a.element), n = e.treeAdapter.createElement(a.token.tagName, t, a.token.attrs);
  return e.openElements.replace(a.element, n), a.element = n, n;
}
function AY(e, a, t) {
  const n = e.treeAdapter.getTagName(a), r = (0, p.getTagID)(n);
  if (e._isElementCausesFosterParenting(r))
    e._fosterParentElement(t);
  else {
    const o = e.treeAdapter.getNamespaceURI(a);
    r === p.TAG_ID.TEMPLATE && o === p.NS.HTML && (a = e.treeAdapter.getTemplateContent(a)), e.treeAdapter.appendChild(a, t);
  }
}
function TY(e, a, t) {
  const n = e.treeAdapter.getNamespaceURI(t.element), { token: r } = t, o = e.treeAdapter.createElement(r.tagName, n, r.attrs);
  e._adoptNodes(a, o), e.treeAdapter.appendChild(a, o), e.activeFormattingElements.insertElementAfterBookmark(o, r), e.activeFormattingElements.removeEntry(t), e.openElements.remove(t.element), e.openElements.insertAfter(a, o, r.tagID);
}
function y0(e, a) {
  for (let t = 0; t < yY; t++) {
    const n = vY(e, a);
    if (!n)
      break;
    const r = kY(e, n);
    if (!r)
      break;
    e.activeFormattingElements.bookmark = n;
    const o = _Y(e, r, n.element), l = e.openElements.getCommonAncestor(n.element);
    e.treeAdapter.detachNode(o), l && AY(e, l, o), TY(e, r, n);
  }
}
function Pk(e, a) {
  e._appendCommentNode(a, e.openElements.currentTmplContentOrNode);
}
function $Y(e, a) {
  e._appendCommentNode(a, e.openElements.items[0]);
}
function jY(e, a) {
  e._appendCommentNode(a, e.document);
}
function z0(e, a) {
  if (e.stopped = !0, a.location) {
    const t = e.fragmentContext ? 0 : 2;
    for (let n = e.openElements.stackTop; n >= t; n--)
      e._setEndLocation(e.openElements.items[n], a);
    if (!e.fragmentContext && e.openElements.stackTop >= 0) {
      const n = e.openElements.items[0], r = e.treeAdapter.getNodeSourceCodeLocation(n);
      if (r && !r.endTag && (e._setEndLocation(n, a), e.openElements.stackTop >= 1)) {
        const o = e.openElements.items[1], l = e.treeAdapter.getNodeSourceCodeLocation(o);
        l && !l.endTag && e._setEndLocation(o, a);
      }
    }
  }
}
function xY(e, a) {
  e._setDocumentType(a);
  const t = a.forceQuirks ? p.DOCUMENT_MODE.QUIRKS : C2.getDocumentMode(a);
  C2.isConforming(a) || e._err(a, _t.ERR.nonConformingDoctype), e.treeAdapter.setDocumentMode(e.document, t), e.insertionMode = L.BEFORE_HTML;
}
function Su(e, a) {
  e._err(a, _t.ERR.missingDoctype, !0), e.treeAdapter.setDocumentMode(e.document, p.DOCUMENT_MODE.QUIRKS), e.insertionMode = L.BEFORE_HTML, e._processToken(a);
}
function SY(e, a) {
  a.tagID === p.TAG_ID.HTML ? (e._insertElement(a, p.NS.HTML), e.insertionMode = L.BEFORE_HEAD) : Ku(e, a);
}
function OY(e, a) {
  const t = a.tagID;
  (t === p.TAG_ID.HTML || t === p.TAG_ID.HEAD || t === p.TAG_ID.BODY || t === p.TAG_ID.BR) && Ku(e, a);
}
function Ku(e, a) {
  e._insertFakeRootElement(), e.insertionMode = L.BEFORE_HEAD, e._processToken(a);
}
function IY(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HTML: {
      Dt(e, a);
      break;
    }
    case p.TAG_ID.HEAD: {
      e._insertElement(a, p.NS.HTML), e.headElement = e.openElements.current, e.insertionMode = L.IN_HEAD;
      break;
    }
    default:
      Yu(e, a);
  }
}
function CY(e, a) {
  const t = a.tagID;
  t === p.TAG_ID.HEAD || t === p.TAG_ID.BODY || t === p.TAG_ID.HTML || t === p.TAG_ID.BR ? Yu(e, a) : e._err(a, _t.ERR.endTagWithoutMatchingOpenElement);
}
function Yu(e, a) {
  e._insertFakeElement(p.TAG_NAMES.HEAD, p.TAG_ID.HEAD), e.headElement = e.openElements.current, e.insertionMode = L.IN_HEAD, e._processToken(a);
}
function qr(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HTML: {
      Dt(e, a);
      break;
    }
    case p.TAG_ID.BASE:
    case p.TAG_ID.BASEFONT:
    case p.TAG_ID.BGSOUND:
    case p.TAG_ID.LINK:
    case p.TAG_ID.META: {
      e._appendElement(a, p.NS.HTML), a.ackSelfClosing = !0;
      break;
    }
    case p.TAG_ID.TITLE: {
      e._switchToTextParsing(a, Ht.TokenizerMode.RCDATA);
      break;
    }
    case p.TAG_ID.NOSCRIPT: {
      e.options.scriptingEnabled ? e._switchToTextParsing(a, Ht.TokenizerMode.RAWTEXT) : (e._insertElement(a, p.NS.HTML), e.insertionMode = L.IN_HEAD_NO_SCRIPT);
      break;
    }
    case p.TAG_ID.NOFRAMES:
    case p.TAG_ID.STYLE: {
      e._switchToTextParsing(a, Ht.TokenizerMode.RAWTEXT);
      break;
    }
    case p.TAG_ID.SCRIPT: {
      e._switchToTextParsing(a, Ht.TokenizerMode.SCRIPT_DATA);
      break;
    }
    case p.TAG_ID.TEMPLATE: {
      e._insertTemplate(a), e.activeFormattingElements.insertMarker(), e.framesetOk = !1, e.insertionMode = L.IN_TEMPLATE, e.tmplInsertionModeStack.unshift(L.IN_TEMPLATE);
      break;
    }
    case p.TAG_ID.HEAD: {
      e._err(a, _t.ERR.misplacedStartTagForHeadElement);
      break;
    }
    default:
      Qu(e, a);
  }
}
function PY(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HEAD: {
      e.openElements.pop(), e.insertionMode = L.AFTER_HEAD;
      break;
    }
    case p.TAG_ID.BODY:
    case p.TAG_ID.BR:
    case p.TAG_ID.HTML: {
      Qu(e, a);
      break;
    }
    case p.TAG_ID.TEMPLATE: {
      Ko(e, a);
      break;
    }
    default:
      e._err(a, _t.ERR.endTagWithoutMatchingOpenElement);
  }
}
function Ko(e, a) {
  e.openElements.tmplCount > 0 ? (e.openElements.generateImpliedEndTagsThoroughly(), e.openElements.currentTagId !== p.TAG_ID.TEMPLATE && e._err(a, _t.ERR.closingOfElementWithOpenChildElements), e.openElements.popUntilTagNamePopped(p.TAG_ID.TEMPLATE), e.activeFormattingElements.clearToLastMarker(), e.tmplInsertionModeStack.shift(), e._resetInsertionMode()) : e._err(a, _t.ERR.endTagWithoutMatchingOpenElement);
}
function Qu(e, a) {
  e.openElements.pop(), e.insertionMode = L.AFTER_HEAD, e._processToken(a);
}
function RY(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HTML: {
      Dt(e, a);
      break;
    }
    case p.TAG_ID.BASEFONT:
    case p.TAG_ID.BGSOUND:
    case p.TAG_ID.HEAD:
    case p.TAG_ID.LINK:
    case p.TAG_ID.META:
    case p.TAG_ID.NOFRAMES:
    case p.TAG_ID.STYLE: {
      qr(e, a);
      break;
    }
    case p.TAG_ID.NOSCRIPT: {
      e._err(a, _t.ERR.nestedNoscriptInHead);
      break;
    }
    default:
      Xu(e, a);
  }
}
function DY(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.NOSCRIPT: {
      e.openElements.pop(), e.insertionMode = L.IN_HEAD;
      break;
    }
    case p.TAG_ID.BR: {
      Xu(e, a);
      break;
    }
    default:
      e._err(a, _t.ERR.endTagWithoutMatchingOpenElement);
  }
}
function Xu(e, a) {
  const t = a.type === at.TokenType.EOF ? _t.ERR.openElementsLeftAfterEof : _t.ERR.disallowedContentInNoscriptInHead;
  e._err(a, t), e.openElements.pop(), e.insertionMode = L.IN_HEAD, e._processToken(a);
}
function NY(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HTML: {
      Dt(e, a);
      break;
    }
    case p.TAG_ID.BODY: {
      e._insertElement(a, p.NS.HTML), e.framesetOk = !1, e.insertionMode = L.IN_BODY;
      break;
    }
    case p.TAG_ID.FRAMESET: {
      e._insertElement(a, p.NS.HTML), e.insertionMode = L.IN_FRAMESET;
      break;
    }
    case p.TAG_ID.BASE:
    case p.TAG_ID.BASEFONT:
    case p.TAG_ID.BGSOUND:
    case p.TAG_ID.LINK:
    case p.TAG_ID.META:
    case p.TAG_ID.NOFRAMES:
    case p.TAG_ID.SCRIPT:
    case p.TAG_ID.STYLE:
    case p.TAG_ID.TEMPLATE:
    case p.TAG_ID.TITLE: {
      e._err(a, _t.ERR.abandonedHeadElementChild), e.openElements.push(e.headElement, p.TAG_ID.HEAD), qr(e, a), e.openElements.remove(e.headElement);
      break;
    }
    case p.TAG_ID.HEAD: {
      e._err(a, _t.ERR.misplacedStartTagForHeadElement);
      break;
    }
    default:
      Zu(e, a);
  }
}
function LY(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.BODY:
    case p.TAG_ID.HTML:
    case p.TAG_ID.BR: {
      Zu(e, a);
      break;
    }
    case p.TAG_ID.TEMPLATE: {
      Ko(e, a);
      break;
    }
    default:
      e._err(a, _t.ERR.endTagWithoutMatchingOpenElement);
  }
}
function Zu(e, a) {
  e._insertFakeElement(p.TAG_NAMES.BODY, p.TAG_ID.BODY), e.insertionMode = L.IN_BODY, Wm(e, a);
}
function Wm(e, a) {
  switch (a.type) {
    case at.TokenType.CHARACTER: {
      JR(e, a);
      break;
    }
    case at.TokenType.WHITESPACE_CHARACTER: {
      ZR(e, a);
      break;
    }
    case at.TokenType.COMMENT: {
      Pk(e, a);
      break;
    }
    case at.TokenType.START_TAG: {
      Dt(e, a);
      break;
    }
    case at.TokenType.END_TAG: {
      Um(e, a);
      break;
    }
    case at.TokenType.EOF: {
      n3(e, a);
      break;
    }
  }
}
function ZR(e, a) {
  e._reconstructActiveFormattingElements(), e._insertCharacters(a);
}
function JR(e, a) {
  e._reconstructActiveFormattingElements(), e._insertCharacters(a), e.framesetOk = !1;
}
function MY(e, a) {
  e.openElements.tmplCount === 0 && e.treeAdapter.adoptAttributes(e.openElements.items[0], a.attrs);
}
function qY(e, a) {
  const t = e.openElements.tryPeekProperlyNestedBodyElement();
  t && e.openElements.tmplCount === 0 && (e.framesetOk = !1, e.treeAdapter.adoptAttributes(t, a.attrs));
}
function FY(e, a) {
  const t = e.openElements.tryPeekProperlyNestedBodyElement();
  e.framesetOk && t && (e.treeAdapter.detachNode(t), e.openElements.popAllUpToHtmlElement(), e._insertElement(a, p.NS.HTML), e.insertionMode = L.IN_FRAMESET);
}
function BY(e, a) {
  e.openElements.hasInButtonScope(p.TAG_ID.P) && e._closePElement(), e._insertElement(a, p.NS.HTML);
}
function WY(e, a) {
  e.openElements.hasInButtonScope(p.TAG_ID.P) && e._closePElement(), e.openElements.currentTagId !== void 0 && p.NUMBERED_HEADERS.has(e.openElements.currentTagId) && e.openElements.pop(), e._insertElement(a, p.NS.HTML);
}
function UY(e, a) {
  e.openElements.hasInButtonScope(p.TAG_ID.P) && e._closePElement(), e._insertElement(a, p.NS.HTML), e.skipNextNewLine = !0, e.framesetOk = !1;
}
function HY(e, a) {
  const t = e.openElements.tmplCount > 0;
  (!e.formElement || t) && (e.openElements.hasInButtonScope(p.TAG_ID.P) && e._closePElement(), e._insertElement(a, p.NS.HTML), t || (e.formElement = e.openElements.current));
}
function GY(e, a) {
  e.framesetOk = !1;
  const t = a.tagID;
  for (let n = e.openElements.stackTop; n >= 0; n--) {
    const r = e.openElements.tagIDs[n];
    if (t === p.TAG_ID.LI && r === p.TAG_ID.LI || (t === p.TAG_ID.DD || t === p.TAG_ID.DT) && (r === p.TAG_ID.DD || r === p.TAG_ID.DT)) {
      e.openElements.generateImpliedEndTagsWithExclusion(r), e.openElements.popUntilTagNamePopped(r);
      break;
    }
    if (r !== p.TAG_ID.ADDRESS && r !== p.TAG_ID.DIV && r !== p.TAG_ID.P && e._isSpecialElement(e.openElements.items[n], r))
      break;
  }
  e.openElements.hasInButtonScope(p.TAG_ID.P) && e._closePElement(), e._insertElement(a, p.NS.HTML);
}
function VY(e, a) {
  e.openElements.hasInButtonScope(p.TAG_ID.P) && e._closePElement(), e._insertElement(a, p.NS.HTML), e.tokenizer.state = Ht.TokenizerMode.PLAINTEXT;
}
function KY(e, a) {
  e.openElements.hasInScope(p.TAG_ID.BUTTON) && (e.openElements.generateImpliedEndTags(), e.openElements.popUntilTagNamePopped(p.TAG_ID.BUTTON)), e._reconstructActiveFormattingElements(), e._insertElement(a, p.NS.HTML), e.framesetOk = !1;
}
function YY(e, a) {
  const t = e.activeFormattingElements.getElementEntryInScopeWithTagName(p.TAG_NAMES.A);
  t && (y0(e, a), e.openElements.remove(t.element), e.activeFormattingElements.removeEntry(t)), e._reconstructActiveFormattingElements(), e._insertElement(a, p.NS.HTML), e.activeFormattingElements.pushElement(e.openElements.current, a);
}
function QY(e, a) {
  e._reconstructActiveFormattingElements(), e._insertElement(a, p.NS.HTML), e.activeFormattingElements.pushElement(e.openElements.current, a);
}
function XY(e, a) {
  e._reconstructActiveFormattingElements(), e.openElements.hasInScope(p.TAG_ID.NOBR) && (y0(e, a), e._reconstructActiveFormattingElements()), e._insertElement(a, p.NS.HTML), e.activeFormattingElements.pushElement(e.openElements.current, a);
}
function ZY(e, a) {
  e._reconstructActiveFormattingElements(), e._insertElement(a, p.NS.HTML), e.activeFormattingElements.insertMarker(), e.framesetOk = !1;
}
function JY(e, a) {
  e.treeAdapter.getDocumentMode(e.document) !== p.DOCUMENT_MODE.QUIRKS && e.openElements.hasInButtonScope(p.TAG_ID.P) && e._closePElement(), e._insertElement(a, p.NS.HTML), e.framesetOk = !1, e.insertionMode = L.IN_TABLE;
}
function e3(e, a) {
  e._reconstructActiveFormattingElements(), e._appendElement(a, p.NS.HTML), e.framesetOk = !1, a.ackSelfClosing = !0;
}
function a3(e) {
  const a = (0, at.getTokenAttr)(e, p.ATTRS.TYPE);
  return a != null && a.toLowerCase() === hY;
}
function eQ(e, a) {
  e._reconstructActiveFormattingElements(), e._appendElement(a, p.NS.HTML), a3(a) || (e.framesetOk = !1), a.ackSelfClosing = !0;
}
function aQ(e, a) {
  e._appendElement(a, p.NS.HTML), a.ackSelfClosing = !0;
}
function tQ(e, a) {
  e.openElements.hasInButtonScope(p.TAG_ID.P) && e._closePElement(), e._appendElement(a, p.NS.HTML), e.framesetOk = !1, a.ackSelfClosing = !0;
}
function nQ(e, a) {
  a.tagName = p.TAG_NAMES.IMG, a.tagID = p.TAG_ID.IMG, e3(e, a);
}
function rQ(e, a) {
  e._insertElement(a, p.NS.HTML), e.skipNextNewLine = !0, e.tokenizer.state = Ht.TokenizerMode.RCDATA, e.originalInsertionMode = e.insertionMode, e.framesetOk = !1, e.insertionMode = L.TEXT;
}
function sQ(e, a) {
  e.openElements.hasInButtonScope(p.TAG_ID.P) && e._closePElement(), e._reconstructActiveFormattingElements(), e.framesetOk = !1, e._switchToTextParsing(a, Ht.TokenizerMode.RAWTEXT);
}
function iQ(e, a) {
  e.framesetOk = !1, e._switchToTextParsing(a, Ht.TokenizerMode.RAWTEXT);
}
function R2(e, a) {
  e._switchToTextParsing(a, Ht.TokenizerMode.RAWTEXT);
}
function oQ(e, a) {
  e._reconstructActiveFormattingElements(), e._insertElement(a, p.NS.HTML), e.framesetOk = !1, e.insertionMode = e.insertionMode === L.IN_TABLE || e.insertionMode === L.IN_CAPTION || e.insertionMode === L.IN_TABLE_BODY || e.insertionMode === L.IN_ROW || e.insertionMode === L.IN_CELL ? L.IN_SELECT_IN_TABLE : L.IN_SELECT;
}
function lQ(e, a) {
  e.openElements.currentTagId === p.TAG_ID.OPTION && e.openElements.pop(), e._reconstructActiveFormattingElements(), e._insertElement(a, p.NS.HTML);
}
function dQ(e, a) {
  e.openElements.hasInScope(p.TAG_ID.RUBY) && e.openElements.generateImpliedEndTags(), e._insertElement(a, p.NS.HTML);
}
function uQ(e, a) {
  e.openElements.hasInScope(p.TAG_ID.RUBY) && e.openElements.generateImpliedEndTagsWithExclusion(p.TAG_ID.RTC), e._insertElement(a, p.NS.HTML);
}
function cQ(e, a) {
  e._reconstructActiveFormattingElements(), us.adjustTokenMathMLAttrs(a), us.adjustTokenXMLAttrs(a), a.selfClosing ? e._appendElement(a, p.NS.MATHML) : e._insertElement(a, p.NS.MATHML), a.ackSelfClosing = !0;
}
function pQ(e, a) {
  e._reconstructActiveFormattingElements(), us.adjustTokenSVGAttrs(a), us.adjustTokenXMLAttrs(a), a.selfClosing ? e._appendElement(a, p.NS.SVG) : e._insertElement(a, p.NS.SVG), a.ackSelfClosing = !0;
}
function D2(e, a) {
  e._reconstructActiveFormattingElements(), e._insertElement(a, p.NS.HTML);
}
function Dt(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.I:
    case p.TAG_ID.S:
    case p.TAG_ID.B:
    case p.TAG_ID.U:
    case p.TAG_ID.EM:
    case p.TAG_ID.TT:
    case p.TAG_ID.BIG:
    case p.TAG_ID.CODE:
    case p.TAG_ID.FONT:
    case p.TAG_ID.SMALL:
    case p.TAG_ID.STRIKE:
    case p.TAG_ID.STRONG: {
      QY(e, a);
      break;
    }
    case p.TAG_ID.A: {
      YY(e, a);
      break;
    }
    case p.TAG_ID.H1:
    case p.TAG_ID.H2:
    case p.TAG_ID.H3:
    case p.TAG_ID.H4:
    case p.TAG_ID.H5:
    case p.TAG_ID.H6: {
      WY(e, a);
      break;
    }
    case p.TAG_ID.P:
    case p.TAG_ID.DL:
    case p.TAG_ID.OL:
    case p.TAG_ID.UL:
    case p.TAG_ID.DIV:
    case p.TAG_ID.DIR:
    case p.TAG_ID.NAV:
    case p.TAG_ID.MAIN:
    case p.TAG_ID.MENU:
    case p.TAG_ID.ASIDE:
    case p.TAG_ID.CENTER:
    case p.TAG_ID.FIGURE:
    case p.TAG_ID.FOOTER:
    case p.TAG_ID.HEADER:
    case p.TAG_ID.HGROUP:
    case p.TAG_ID.DIALOG:
    case p.TAG_ID.DETAILS:
    case p.TAG_ID.ADDRESS:
    case p.TAG_ID.ARTICLE:
    case p.TAG_ID.SEARCH:
    case p.TAG_ID.SECTION:
    case p.TAG_ID.SUMMARY:
    case p.TAG_ID.FIELDSET:
    case p.TAG_ID.BLOCKQUOTE:
    case p.TAG_ID.FIGCAPTION: {
      BY(e, a);
      break;
    }
    case p.TAG_ID.LI:
    case p.TAG_ID.DD:
    case p.TAG_ID.DT: {
      GY(e, a);
      break;
    }
    case p.TAG_ID.BR:
    case p.TAG_ID.IMG:
    case p.TAG_ID.WBR:
    case p.TAG_ID.AREA:
    case p.TAG_ID.EMBED:
    case p.TAG_ID.KEYGEN: {
      e3(e, a);
      break;
    }
    case p.TAG_ID.HR: {
      tQ(e, a);
      break;
    }
    case p.TAG_ID.RB:
    case p.TAG_ID.RTC: {
      dQ(e, a);
      break;
    }
    case p.TAG_ID.RT:
    case p.TAG_ID.RP: {
      uQ(e, a);
      break;
    }
    case p.TAG_ID.PRE:
    case p.TAG_ID.LISTING: {
      UY(e, a);
      break;
    }
    case p.TAG_ID.XMP: {
      sQ(e, a);
      break;
    }
    case p.TAG_ID.SVG: {
      pQ(e, a);
      break;
    }
    case p.TAG_ID.HTML: {
      MY(e, a);
      break;
    }
    case p.TAG_ID.BASE:
    case p.TAG_ID.LINK:
    case p.TAG_ID.META:
    case p.TAG_ID.STYLE:
    case p.TAG_ID.TITLE:
    case p.TAG_ID.SCRIPT:
    case p.TAG_ID.BGSOUND:
    case p.TAG_ID.BASEFONT:
    case p.TAG_ID.TEMPLATE: {
      qr(e, a);
      break;
    }
    case p.TAG_ID.BODY: {
      qY(e, a);
      break;
    }
    case p.TAG_ID.FORM: {
      HY(e, a);
      break;
    }
    case p.TAG_ID.NOBR: {
      XY(e, a);
      break;
    }
    case p.TAG_ID.MATH: {
      cQ(e, a);
      break;
    }
    case p.TAG_ID.TABLE: {
      JY(e, a);
      break;
    }
    case p.TAG_ID.INPUT: {
      eQ(e, a);
      break;
    }
    case p.TAG_ID.PARAM:
    case p.TAG_ID.TRACK:
    case p.TAG_ID.SOURCE: {
      aQ(e, a);
      break;
    }
    case p.TAG_ID.IMAGE: {
      nQ(e, a);
      break;
    }
    case p.TAG_ID.BUTTON: {
      KY(e, a);
      break;
    }
    case p.TAG_ID.APPLET:
    case p.TAG_ID.OBJECT:
    case p.TAG_ID.MARQUEE: {
      ZY(e, a);
      break;
    }
    case p.TAG_ID.IFRAME: {
      iQ(e, a);
      break;
    }
    case p.TAG_ID.SELECT: {
      oQ(e, a);
      break;
    }
    case p.TAG_ID.OPTION:
    case p.TAG_ID.OPTGROUP: {
      lQ(e, a);
      break;
    }
    case p.TAG_ID.NOEMBED:
    case p.TAG_ID.NOFRAMES: {
      R2(e, a);
      break;
    }
    case p.TAG_ID.FRAMESET: {
      FY(e, a);
      break;
    }
    case p.TAG_ID.TEXTAREA: {
      rQ(e, a);
      break;
    }
    case p.TAG_ID.NOSCRIPT: {
      e.options.scriptingEnabled ? R2(e, a) : D2(e, a);
      break;
    }
    case p.TAG_ID.PLAINTEXT: {
      VY(e, a);
      break;
    }
    case p.TAG_ID.COL:
    case p.TAG_ID.TH:
    case p.TAG_ID.TD:
    case p.TAG_ID.TR:
    case p.TAG_ID.HEAD:
    case p.TAG_ID.FRAME:
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.THEAD:
    case p.TAG_ID.CAPTION:
    case p.TAG_ID.COLGROUP:
      break;
    default:
      D2(e, a);
  }
}
function gQ(e, a) {
  if (e.openElements.hasInScope(p.TAG_ID.BODY) && (e.insertionMode = L.AFTER_BODY, e.options.sourceCodeLocationInfo)) {
    const t = e.openElements.tryPeekProperlyNestedBodyElement();
    t && e._setEndLocation(t, a);
  }
}
function mQ(e, a) {
  e.openElements.hasInScope(p.TAG_ID.BODY) && (e.insertionMode = L.AFTER_BODY, c3(e, a));
}
function fQ(e, a) {
  const t = a.tagID;
  e.openElements.hasInScope(t) && (e.openElements.generateImpliedEndTags(), e.openElements.popUntilTagNamePopped(t));
}
function hQ(e) {
  const a = e.openElements.tmplCount > 0, { formElement: t } = e;
  a || (e.formElement = null), (t || a) && e.openElements.hasInScope(p.TAG_ID.FORM) && (e.openElements.generateImpliedEndTags(), a ? e.openElements.popUntilTagNamePopped(p.TAG_ID.FORM) : t && e.openElements.remove(t));
}
function yQ(e) {
  e.openElements.hasInButtonScope(p.TAG_ID.P) || e._insertFakeElement(p.TAG_NAMES.P, p.TAG_ID.P), e._closePElement();
}
function zQ(e) {
  e.openElements.hasInListItemScope(p.TAG_ID.LI) && (e.openElements.generateImpliedEndTagsWithExclusion(p.TAG_ID.LI), e.openElements.popUntilTagNamePopped(p.TAG_ID.LI));
}
function bQ(e, a) {
  const t = a.tagID;
  e.openElements.hasInScope(t) && (e.openElements.generateImpliedEndTagsWithExclusion(t), e.openElements.popUntilTagNamePopped(t));
}
function wQ(e) {
  e.openElements.hasNumberedHeaderInScope() && (e.openElements.generateImpliedEndTags(), e.openElements.popUntilNumberedHeaderPopped());
}
function vQ(e, a) {
  const t = a.tagID;
  e.openElements.hasInScope(t) && (e.openElements.generateImpliedEndTags(), e.openElements.popUntilTagNamePopped(t), e.activeFormattingElements.clearToLastMarker());
}
function kQ(e) {
  e._reconstructActiveFormattingElements(), e._insertFakeElement(p.TAG_NAMES.BR, p.TAG_ID.BR), e.openElements.pop(), e.framesetOk = !1;
}
function t3(e, a) {
  const t = a.tagName, n = a.tagID;
  for (let r = e.openElements.stackTop; r > 0; r--) {
    const o = e.openElements.items[r], l = e.openElements.tagIDs[r];
    if (n === l && (n !== p.TAG_ID.UNKNOWN || e.treeAdapter.getTagName(o) === t)) {
      e.openElements.generateImpliedEndTagsWithExclusion(n), e.openElements.stackTop >= r && e.openElements.shortenToLength(r);
      break;
    }
    if (e._isSpecialElement(o, l))
      break;
  }
}
function Um(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.A:
    case p.TAG_ID.B:
    case p.TAG_ID.I:
    case p.TAG_ID.S:
    case p.TAG_ID.U:
    case p.TAG_ID.EM:
    case p.TAG_ID.TT:
    case p.TAG_ID.BIG:
    case p.TAG_ID.CODE:
    case p.TAG_ID.FONT:
    case p.TAG_ID.NOBR:
    case p.TAG_ID.SMALL:
    case p.TAG_ID.STRIKE:
    case p.TAG_ID.STRONG: {
      y0(e, a);
      break;
    }
    case p.TAG_ID.P: {
      yQ(e);
      break;
    }
    case p.TAG_ID.DL:
    case p.TAG_ID.UL:
    case p.TAG_ID.OL:
    case p.TAG_ID.DIR:
    case p.TAG_ID.DIV:
    case p.TAG_ID.NAV:
    case p.TAG_ID.PRE:
    case p.TAG_ID.MAIN:
    case p.TAG_ID.MENU:
    case p.TAG_ID.ASIDE:
    case p.TAG_ID.BUTTON:
    case p.TAG_ID.CENTER:
    case p.TAG_ID.FIGURE:
    case p.TAG_ID.FOOTER:
    case p.TAG_ID.HEADER:
    case p.TAG_ID.HGROUP:
    case p.TAG_ID.DIALOG:
    case p.TAG_ID.ADDRESS:
    case p.TAG_ID.ARTICLE:
    case p.TAG_ID.DETAILS:
    case p.TAG_ID.SEARCH:
    case p.TAG_ID.SECTION:
    case p.TAG_ID.SUMMARY:
    case p.TAG_ID.LISTING:
    case p.TAG_ID.FIELDSET:
    case p.TAG_ID.BLOCKQUOTE:
    case p.TAG_ID.FIGCAPTION: {
      fQ(e, a);
      break;
    }
    case p.TAG_ID.LI: {
      zQ(e);
      break;
    }
    case p.TAG_ID.DD:
    case p.TAG_ID.DT: {
      bQ(e, a);
      break;
    }
    case p.TAG_ID.H1:
    case p.TAG_ID.H2:
    case p.TAG_ID.H3:
    case p.TAG_ID.H4:
    case p.TAG_ID.H5:
    case p.TAG_ID.H6: {
      wQ(e);
      break;
    }
    case p.TAG_ID.BR: {
      kQ(e);
      break;
    }
    case p.TAG_ID.BODY: {
      gQ(e, a);
      break;
    }
    case p.TAG_ID.HTML: {
      mQ(e, a);
      break;
    }
    case p.TAG_ID.FORM: {
      hQ(e);
      break;
    }
    case p.TAG_ID.APPLET:
    case p.TAG_ID.OBJECT:
    case p.TAG_ID.MARQUEE: {
      vQ(e, a);
      break;
    }
    case p.TAG_ID.TEMPLATE: {
      Ko(e, a);
      break;
    }
    default:
      t3(e, a);
  }
}
function n3(e, a) {
  e.tmplInsertionModeStack.length > 0 ? u3(e, a) : z0(e, a);
}
function _Q(e, a) {
  var t;
  a.tagID === p.TAG_ID.SCRIPT && ((t = e.scriptHandler) === null || t === void 0 || t.call(e, e.openElements.current)), e.openElements.pop(), e.insertionMode = e.originalInsertionMode;
}
function EQ(e, a) {
  e._err(a, _t.ERR.eofInElementThatCanContainOnlyText), e.openElements.pop(), e.insertionMode = e.originalInsertionMode, e.onEof(a);
}
function Qw(e, a) {
  if (e.openElements.currentTagId !== void 0 && XR.has(e.openElements.currentTagId))
    switch (e.pendingCharacterTokens.length = 0, e.hasNonWhitespacePendingCharacterToken = !1, e.originalInsertionMode = e.insertionMode, e.insertionMode = L.IN_TABLE_TEXT, a.type) {
      case at.TokenType.CHARACTER: {
        s3(e, a);
        break;
      }
      case at.TokenType.WHITESPACE_CHARACTER: {
        r3(e, a);
        break;
      }
    }
  else
    gc(e, a);
}
function AQ(e, a) {
  e.openElements.clearBackToTableContext(), e.activeFormattingElements.insertMarker(), e._insertElement(a, p.NS.HTML), e.insertionMode = L.IN_CAPTION;
}
function TQ(e, a) {
  e.openElements.clearBackToTableContext(), e._insertElement(a, p.NS.HTML), e.insertionMode = L.IN_COLUMN_GROUP;
}
function $Q(e, a) {
  e.openElements.clearBackToTableContext(), e._insertFakeElement(p.TAG_NAMES.COLGROUP, p.TAG_ID.COLGROUP), e.insertionMode = L.IN_COLUMN_GROUP, b0(e, a);
}
function jQ(e, a) {
  e.openElements.clearBackToTableContext(), e._insertElement(a, p.NS.HTML), e.insertionMode = L.IN_TABLE_BODY;
}
function xQ(e, a) {
  e.openElements.clearBackToTableContext(), e._insertFakeElement(p.TAG_NAMES.TBODY, p.TAG_ID.TBODY), e.insertionMode = L.IN_TABLE_BODY, Hm(e, a);
}
function SQ(e, a) {
  e.openElements.hasInTableScope(p.TAG_ID.TABLE) && (e.openElements.popUntilTagNamePopped(p.TAG_ID.TABLE), e._resetInsertionMode(), e._processStartTag(a));
}
function OQ(e, a) {
  a3(a) ? e._appendElement(a, p.NS.HTML) : gc(e, a), a.ackSelfClosing = !0;
}
function IQ(e, a) {
  !e.formElement && e.openElements.tmplCount === 0 && (e._insertElement(a, p.NS.HTML), e.formElement = e.openElements.current, e.openElements.pop());
}
function rd(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.TD:
    case p.TAG_ID.TH:
    case p.TAG_ID.TR: {
      xQ(e, a);
      break;
    }
    case p.TAG_ID.STYLE:
    case p.TAG_ID.SCRIPT:
    case p.TAG_ID.TEMPLATE: {
      qr(e, a);
      break;
    }
    case p.TAG_ID.COL: {
      $Q(e, a);
      break;
    }
    case p.TAG_ID.FORM: {
      IQ(e, a);
      break;
    }
    case p.TAG_ID.TABLE: {
      SQ(e, a);
      break;
    }
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.THEAD: {
      jQ(e, a);
      break;
    }
    case p.TAG_ID.INPUT: {
      OQ(e, a);
      break;
    }
    case p.TAG_ID.CAPTION: {
      AQ(e, a);
      break;
    }
    case p.TAG_ID.COLGROUP: {
      TQ(e, a);
      break;
    }
    default:
      gc(e, a);
  }
}
function uc(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.TABLE: {
      e.openElements.hasInTableScope(p.TAG_ID.TABLE) && (e.openElements.popUntilTagNamePopped(p.TAG_ID.TABLE), e._resetInsertionMode());
      break;
    }
    case p.TAG_ID.TEMPLATE: {
      Ko(e, a);
      break;
    }
    case p.TAG_ID.BODY:
    case p.TAG_ID.CAPTION:
    case p.TAG_ID.COL:
    case p.TAG_ID.COLGROUP:
    case p.TAG_ID.HTML:
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TD:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.TH:
    case p.TAG_ID.THEAD:
    case p.TAG_ID.TR:
      break;
    default:
      gc(e, a);
  }
}
function gc(e, a) {
  const t = e.fosterParentingEnabled;
  e.fosterParentingEnabled = !0, Wm(e, a), e.fosterParentingEnabled = t;
}
function r3(e, a) {
  e.pendingCharacterTokens.push(a);
}
function s3(e, a) {
  e.pendingCharacterTokens.push(a), e.hasNonWhitespacePendingCharacterToken = !0;
}
function Ou(e, a) {
  let t = 0;
  if (e.hasNonWhitespacePendingCharacterToken)
    for (; t < e.pendingCharacterTokens.length; t++)
      gc(e, e.pendingCharacterTokens[t]);
  else
    for (; t < e.pendingCharacterTokens.length; t++)
      e._insertCharacters(e.pendingCharacterTokens[t]);
  e.insertionMode = e.originalInsertionMode, e._processToken(a);
}
const i3 = /* @__PURE__ */ new Set([p.TAG_ID.CAPTION, p.TAG_ID.COL, p.TAG_ID.COLGROUP, p.TAG_ID.TBODY, p.TAG_ID.TD, p.TAG_ID.TFOOT, p.TAG_ID.TH, p.TAG_ID.THEAD, p.TAG_ID.TR]);
function CQ(e, a) {
  const t = a.tagID;
  i3.has(t) ? e.openElements.hasInTableScope(p.TAG_ID.CAPTION) && (e.openElements.generateImpliedEndTags(), e.openElements.popUntilTagNamePopped(p.TAG_ID.CAPTION), e.activeFormattingElements.clearToLastMarker(), e.insertionMode = L.IN_TABLE, rd(e, a)) : Dt(e, a);
}
function PQ(e, a) {
  const t = a.tagID;
  switch (t) {
    case p.TAG_ID.CAPTION:
    case p.TAG_ID.TABLE: {
      e.openElements.hasInTableScope(p.TAG_ID.CAPTION) && (e.openElements.generateImpliedEndTags(), e.openElements.popUntilTagNamePopped(p.TAG_ID.CAPTION), e.activeFormattingElements.clearToLastMarker(), e.insertionMode = L.IN_TABLE, t === p.TAG_ID.TABLE && uc(e, a));
      break;
    }
    case p.TAG_ID.BODY:
    case p.TAG_ID.COL:
    case p.TAG_ID.COLGROUP:
    case p.TAG_ID.HTML:
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TD:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.TH:
    case p.TAG_ID.THEAD:
    case p.TAG_ID.TR:
      break;
    default:
      Um(e, a);
  }
}
function b0(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HTML: {
      Dt(e, a);
      break;
    }
    case p.TAG_ID.COL: {
      e._appendElement(a, p.NS.HTML), a.ackSelfClosing = !0;
      break;
    }
    case p.TAG_ID.TEMPLATE: {
      qr(e, a);
      break;
    }
    default:
      vm(e, a);
  }
}
function RQ(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.COLGROUP: {
      e.openElements.currentTagId === p.TAG_ID.COLGROUP && (e.openElements.pop(), e.insertionMode = L.IN_TABLE);
      break;
    }
    case p.TAG_ID.TEMPLATE: {
      Ko(e, a);
      break;
    }
    case p.TAG_ID.COL:
      break;
    default:
      vm(e, a);
  }
}
function vm(e, a) {
  e.openElements.currentTagId === p.TAG_ID.COLGROUP && (e.openElements.pop(), e.insertionMode = L.IN_TABLE, e._processToken(a));
}
function Hm(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.TR: {
      e.openElements.clearBackToTableBodyContext(), e._insertElement(a, p.NS.HTML), e.insertionMode = L.IN_ROW;
      break;
    }
    case p.TAG_ID.TH:
    case p.TAG_ID.TD: {
      e.openElements.clearBackToTableBodyContext(), e._insertFakeElement(p.TAG_NAMES.TR, p.TAG_ID.TR), e.insertionMode = L.IN_ROW, Gm(e, a);
      break;
    }
    case p.TAG_ID.CAPTION:
    case p.TAG_ID.COL:
    case p.TAG_ID.COLGROUP:
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.THEAD: {
      e.openElements.hasTableBodyContextInTableScope() && (e.openElements.clearBackToTableBodyContext(), e.openElements.pop(), e.insertionMode = L.IN_TABLE, rd(e, a));
      break;
    }
    default:
      rd(e, a);
  }
}
function Rk(e, a) {
  const t = a.tagID;
  switch (a.tagID) {
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.THEAD: {
      e.openElements.hasInTableScope(t) && (e.openElements.clearBackToTableBodyContext(), e.openElements.pop(), e.insertionMode = L.IN_TABLE);
      break;
    }
    case p.TAG_ID.TABLE: {
      e.openElements.hasTableBodyContextInTableScope() && (e.openElements.clearBackToTableBodyContext(), e.openElements.pop(), e.insertionMode = L.IN_TABLE, uc(e, a));
      break;
    }
    case p.TAG_ID.BODY:
    case p.TAG_ID.CAPTION:
    case p.TAG_ID.COL:
    case p.TAG_ID.COLGROUP:
    case p.TAG_ID.HTML:
    case p.TAG_ID.TD:
    case p.TAG_ID.TH:
    case p.TAG_ID.TR:
      break;
    default:
      uc(e, a);
  }
}
function Gm(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.TH:
    case p.TAG_ID.TD: {
      e.openElements.clearBackToTableRowContext(), e._insertElement(a, p.NS.HTML), e.insertionMode = L.IN_CELL, e.activeFormattingElements.insertMarker();
      break;
    }
    case p.TAG_ID.CAPTION:
    case p.TAG_ID.COL:
    case p.TAG_ID.COLGROUP:
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.THEAD:
    case p.TAG_ID.TR: {
      e.openElements.hasInTableScope(p.TAG_ID.TR) && (e.openElements.clearBackToTableRowContext(), e.openElements.pop(), e.insertionMode = L.IN_TABLE_BODY, Hm(e, a));
      break;
    }
    default:
      rd(e, a);
  }
}
function o3(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.TR: {
      e.openElements.hasInTableScope(p.TAG_ID.TR) && (e.openElements.clearBackToTableRowContext(), e.openElements.pop(), e.insertionMode = L.IN_TABLE_BODY);
      break;
    }
    case p.TAG_ID.TABLE: {
      e.openElements.hasInTableScope(p.TAG_ID.TR) && (e.openElements.clearBackToTableRowContext(), e.openElements.pop(), e.insertionMode = L.IN_TABLE_BODY, Rk(e, a));
      break;
    }
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.THEAD: {
      (e.openElements.hasInTableScope(a.tagID) || e.openElements.hasInTableScope(p.TAG_ID.TR)) && (e.openElements.clearBackToTableRowContext(), e.openElements.pop(), e.insertionMode = L.IN_TABLE_BODY, Rk(e, a));
      break;
    }
    case p.TAG_ID.BODY:
    case p.TAG_ID.CAPTION:
    case p.TAG_ID.COL:
    case p.TAG_ID.COLGROUP:
    case p.TAG_ID.HTML:
    case p.TAG_ID.TD:
    case p.TAG_ID.TH:
      break;
    default:
      uc(e, a);
  }
}
function DQ(e, a) {
  const t = a.tagID;
  i3.has(t) ? (e.openElements.hasInTableScope(p.TAG_ID.TD) || e.openElements.hasInTableScope(p.TAG_ID.TH)) && (e._closeTableCell(), Gm(e, a)) : Dt(e, a);
}
function NQ(e, a) {
  const t = a.tagID;
  switch (t) {
    case p.TAG_ID.TD:
    case p.TAG_ID.TH: {
      e.openElements.hasInTableScope(t) && (e.openElements.generateImpliedEndTags(), e.openElements.popUntilTagNamePopped(t), e.activeFormattingElements.clearToLastMarker(), e.insertionMode = L.IN_ROW);
      break;
    }
    case p.TAG_ID.TABLE:
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.THEAD:
    case p.TAG_ID.TR: {
      e.openElements.hasInTableScope(t) && (e._closeTableCell(), o3(e, a));
      break;
    }
    case p.TAG_ID.BODY:
    case p.TAG_ID.CAPTION:
    case p.TAG_ID.COL:
    case p.TAG_ID.COLGROUP:
    case p.TAG_ID.HTML:
      break;
    default:
      Um(e, a);
  }
}
function l3(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HTML: {
      Dt(e, a);
      break;
    }
    case p.TAG_ID.OPTION: {
      e.openElements.currentTagId === p.TAG_ID.OPTION && e.openElements.pop(), e._insertElement(a, p.NS.HTML);
      break;
    }
    case p.TAG_ID.OPTGROUP: {
      e.openElements.currentTagId === p.TAG_ID.OPTION && e.openElements.pop(), e.openElements.currentTagId === p.TAG_ID.OPTGROUP && e.openElements.pop(), e._insertElement(a, p.NS.HTML);
      break;
    }
    case p.TAG_ID.HR: {
      e.openElements.currentTagId === p.TAG_ID.OPTION && e.openElements.pop(), e.openElements.currentTagId === p.TAG_ID.OPTGROUP && e.openElements.pop(), e._appendElement(a, p.NS.HTML), a.ackSelfClosing = !0;
      break;
    }
    case p.TAG_ID.INPUT:
    case p.TAG_ID.KEYGEN:
    case p.TAG_ID.TEXTAREA:
    case p.TAG_ID.SELECT: {
      e.openElements.hasInSelectScope(p.TAG_ID.SELECT) && (e.openElements.popUntilTagNamePopped(p.TAG_ID.SELECT), e._resetInsertionMode(), a.tagID !== p.TAG_ID.SELECT && e._processStartTag(a));
      break;
    }
    case p.TAG_ID.SCRIPT:
    case p.TAG_ID.TEMPLATE: {
      qr(e, a);
      break;
    }
  }
}
function d3(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.OPTGROUP: {
      e.openElements.stackTop > 0 && e.openElements.currentTagId === p.TAG_ID.OPTION && e.openElements.tagIDs[e.openElements.stackTop - 1] === p.TAG_ID.OPTGROUP && e.openElements.pop(), e.openElements.currentTagId === p.TAG_ID.OPTGROUP && e.openElements.pop();
      break;
    }
    case p.TAG_ID.OPTION: {
      e.openElements.currentTagId === p.TAG_ID.OPTION && e.openElements.pop();
      break;
    }
    case p.TAG_ID.SELECT: {
      e.openElements.hasInSelectScope(p.TAG_ID.SELECT) && (e.openElements.popUntilTagNamePopped(p.TAG_ID.SELECT), e._resetInsertionMode());
      break;
    }
    case p.TAG_ID.TEMPLATE: {
      Ko(e, a);
      break;
    }
  }
}
function LQ(e, a) {
  const t = a.tagID;
  t === p.TAG_ID.CAPTION || t === p.TAG_ID.TABLE || t === p.TAG_ID.TBODY || t === p.TAG_ID.TFOOT || t === p.TAG_ID.THEAD || t === p.TAG_ID.TR || t === p.TAG_ID.TD || t === p.TAG_ID.TH ? (e.openElements.popUntilTagNamePopped(p.TAG_ID.SELECT), e._resetInsertionMode(), e._processStartTag(a)) : l3(e, a);
}
function MQ(e, a) {
  const t = a.tagID;
  t === p.TAG_ID.CAPTION || t === p.TAG_ID.TABLE || t === p.TAG_ID.TBODY || t === p.TAG_ID.TFOOT || t === p.TAG_ID.THEAD || t === p.TAG_ID.TR || t === p.TAG_ID.TD || t === p.TAG_ID.TH ? e.openElements.hasInTableScope(t) && (e.openElements.popUntilTagNamePopped(p.TAG_ID.SELECT), e._resetInsertionMode(), e.onEndTag(a)) : d3(e, a);
}
function qQ(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.BASE:
    case p.TAG_ID.BASEFONT:
    case p.TAG_ID.BGSOUND:
    case p.TAG_ID.LINK:
    case p.TAG_ID.META:
    case p.TAG_ID.NOFRAMES:
    case p.TAG_ID.SCRIPT:
    case p.TAG_ID.STYLE:
    case p.TAG_ID.TEMPLATE:
    case p.TAG_ID.TITLE: {
      qr(e, a);
      break;
    }
    case p.TAG_ID.CAPTION:
    case p.TAG_ID.COLGROUP:
    case p.TAG_ID.TBODY:
    case p.TAG_ID.TFOOT:
    case p.TAG_ID.THEAD: {
      e.tmplInsertionModeStack[0] = L.IN_TABLE, e.insertionMode = L.IN_TABLE, rd(e, a);
      break;
    }
    case p.TAG_ID.COL: {
      e.tmplInsertionModeStack[0] = L.IN_COLUMN_GROUP, e.insertionMode = L.IN_COLUMN_GROUP, b0(e, a);
      break;
    }
    case p.TAG_ID.TR: {
      e.tmplInsertionModeStack[0] = L.IN_TABLE_BODY, e.insertionMode = L.IN_TABLE_BODY, Hm(e, a);
      break;
    }
    case p.TAG_ID.TD:
    case p.TAG_ID.TH: {
      e.tmplInsertionModeStack[0] = L.IN_ROW, e.insertionMode = L.IN_ROW, Gm(e, a);
      break;
    }
    default:
      e.tmplInsertionModeStack[0] = L.IN_BODY, e.insertionMode = L.IN_BODY, Dt(e, a);
  }
}
function FQ(e, a) {
  a.tagID === p.TAG_ID.TEMPLATE && Ko(e, a);
}
function u3(e, a) {
  e.openElements.tmplCount > 0 ? (e.openElements.popUntilTagNamePopped(p.TAG_ID.TEMPLATE), e.activeFormattingElements.clearToLastMarker(), e.tmplInsertionModeStack.shift(), e._resetInsertionMode(), e.onEof(a)) : z0(e, a);
}
function BQ(e, a) {
  a.tagID === p.TAG_ID.HTML ? Dt(e, a) : km(e, a);
}
function c3(e, a) {
  var t;
  if (a.tagID === p.TAG_ID.HTML) {
    if (e.fragmentContext || (e.insertionMode = L.AFTER_AFTER_BODY), e.options.sourceCodeLocationInfo && e.openElements.tagIDs[0] === p.TAG_ID.HTML) {
      e._setEndLocation(e.openElements.items[0], a);
      const n = e.openElements.items[1];
      n && !(!((t = e.treeAdapter.getNodeSourceCodeLocation(n)) === null || t === void 0) && t.endTag) && e._setEndLocation(n, a);
    }
  } else
    km(e, a);
}
function km(e, a) {
  e.insertionMode = L.IN_BODY, Wm(e, a);
}
function WQ(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HTML: {
      Dt(e, a);
      break;
    }
    case p.TAG_ID.FRAMESET: {
      e._insertElement(a, p.NS.HTML);
      break;
    }
    case p.TAG_ID.FRAME: {
      e._appendElement(a, p.NS.HTML), a.ackSelfClosing = !0;
      break;
    }
    case p.TAG_ID.NOFRAMES: {
      qr(e, a);
      break;
    }
  }
}
function UQ(e, a) {
  a.tagID === p.TAG_ID.FRAMESET && !e.openElements.isRootHtmlElementCurrent() && (e.openElements.pop(), !e.fragmentContext && e.openElements.currentTagId !== p.TAG_ID.FRAMESET && (e.insertionMode = L.AFTER_FRAMESET));
}
function HQ(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HTML: {
      Dt(e, a);
      break;
    }
    case p.TAG_ID.NOFRAMES: {
      qr(e, a);
      break;
    }
  }
}
function GQ(e, a) {
  a.tagID === p.TAG_ID.HTML && (e.insertionMode = L.AFTER_AFTER_FRAMESET);
}
function VQ(e, a) {
  a.tagID === p.TAG_ID.HTML ? Dt(e, a) : lm(e, a);
}
function lm(e, a) {
  e.insertionMode = L.IN_BODY, Wm(e, a);
}
function KQ(e, a) {
  switch (a.tagID) {
    case p.TAG_ID.HTML: {
      Dt(e, a);
      break;
    }
    case p.TAG_ID.NOFRAMES: {
      qr(e, a);
      break;
    }
  }
}
function YQ(e, a) {
  a.chars = QR.REPLACEMENT_CHARACTER, e._insertCharacters(a);
}
function QQ(e, a) {
  e._insertCharacters(a), e.framesetOk = !1;
}
function p3(e) {
  for (; e.treeAdapter.getNamespaceURI(e.openElements.current) !== p.NS.HTML && e.openElements.currentTagId !== void 0 && !e._isIntegrationPoint(e.openElements.currentTagId, e.openElements.current); )
    e.openElements.pop();
}
function XQ(e, a) {
  if (us.causesExit(a))
    p3(e), e._startTagOutsideForeignContent(a);
  else {
    const t = e._getAdjustedCurrentElement(), n = e.treeAdapter.getNamespaceURI(t);
    n === p.NS.MATHML ? us.adjustTokenMathMLAttrs(a) : n === p.NS.SVG && (us.adjustTokenSVGTagName(a), us.adjustTokenSVGAttrs(a)), us.adjustTokenXMLAttrs(a), a.selfClosing ? e._appendElement(a, n) : e._insertElement(a, n), a.ackSelfClosing = !0;
  }
}
function ZQ(e, a) {
  if (a.tagID === p.TAG_ID.P || a.tagID === p.TAG_ID.BR) {
    p3(e), e._endTagOutsideForeignContent(a);
    return;
  }
  for (let t = e.openElements.stackTop; t > 0; t--) {
    const n = e.openElements.items[t];
    if (e.treeAdapter.getNamespaceURI(n) === p.NS.HTML) {
      e._endTagOutsideForeignContent(a);
      break;
    }
    const r = e.treeAdapter.getTagName(n);
    if (r.toLowerCase() === a.tagName) {
      a.tagName = r, e.openElements.shortenToLength(t);
      break;
    }
  }
}
var Vm = {}, g3 = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.escapeText = e.escapeAttribute = e.escapeUTF8 = e.escape = e.getCodePoint = e.xmlReplacer = void 0, e.encodeXML = t, e.xmlReplacer = /["$&'<>\u0080-\uFFFF]/g;
  const a = /* @__PURE__ */ new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [39, "&apos;"],
    [60, "&lt;"],
    [62, "&gt;"]
  ]);
  e.getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  String.prototype.codePointAt == null ? (r, o) => (r.charCodeAt(o) & 64512) === 55296 ? (r.charCodeAt(o) - 55296) * 1024 + r.charCodeAt(o + 1) - 56320 + 65536 : r.charCodeAt(o) : (
    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    (r, o) => r.codePointAt(o)
  );
  function t(r) {
    let o = "", l = 0, u;
    for (; (u = e.xmlReplacer.exec(r)) !== null; ) {
      const { index: c } = u, f = r.charCodeAt(c), y = a.get(f);
      y === void 0 ? (o += `${r.substring(l, c)}&#x${(0, e.getCodePoint)(r, c).toString(16)};`, l = e.xmlReplacer.lastIndex += +((f & 64512) === 55296)) : (o += r.substring(l, c) + y, l = c + 1);
    }
    return o + r.substr(l);
  }
  e.escape = t;
  function n(r, o) {
    return function(u) {
      let c, f = 0, y = "";
      for (; c = r.exec(u); )
        f !== c.index && (y += u.substring(f, c.index)), y += o.get(c[0].charCodeAt(0)), f = c.index + 1;
      return y + u.substring(f);
    };
  }
  e.escapeUTF8 = n(/["&'<>]/g, a), e.escapeAttribute = /* @__PURE__ */ n(/["&\u00A0]/g, /* @__PURE__ */ new Map([
    [34, "&quot;"],
    [38, "&amp;"],
    [160, "&nbsp;"]
  ])), e.escapeText = n(/[&<>\u00A0]/g, /* @__PURE__ */ new Map([
    [38, "&amp;"],
    [60, "&lt;"],
    [62, "&gt;"],
    [160, "&nbsp;"]
  ]));
})(g3);
Object.defineProperty(Vm, "__esModule", { value: !0 });
Vm.serialize = aX;
Vm.serializeOuter = tX;
const Ea = Ta, m3 = g3, JQ = Fm, eX = /* @__PURE__ */ new Set([
  Ea.TAG_NAMES.AREA,
  Ea.TAG_NAMES.BASE,
  Ea.TAG_NAMES.BASEFONT,
  Ea.TAG_NAMES.BGSOUND,
  Ea.TAG_NAMES.BR,
  Ea.TAG_NAMES.COL,
  Ea.TAG_NAMES.EMBED,
  Ea.TAG_NAMES.FRAME,
  Ea.TAG_NAMES.HR,
  Ea.TAG_NAMES.IMG,
  Ea.TAG_NAMES.INPUT,
  Ea.TAG_NAMES.KEYGEN,
  Ea.TAG_NAMES.LINK,
  Ea.TAG_NAMES.META,
  Ea.TAG_NAMES.PARAM,
  Ea.TAG_NAMES.SOURCE,
  Ea.TAG_NAMES.TRACK,
  Ea.TAG_NAMES.WBR
]);
function f3(e, a) {
  return a.treeAdapter.isElementNode(e) && a.treeAdapter.getNamespaceURI(e) === Ea.NS.HTML && eX.has(a.treeAdapter.getTagName(e));
}
const h3 = { treeAdapter: JQ.defaultTreeAdapter, scriptingEnabled: !0 };
function aX(e, a) {
  const t = Object.assign(Object.assign({}, h3), a);
  return f3(e, t) ? "" : y3(e, t);
}
function tX(e, a) {
  const t = Object.assign(Object.assign({}, h3), a);
  return z3(e, t);
}
function y3(e, a) {
  let t = "";
  const n = a.treeAdapter.isElementNode(e) && a.treeAdapter.getTagName(e) === Ea.TAG_NAMES.TEMPLATE && a.treeAdapter.getNamespaceURI(e) === Ea.NS.HTML ? a.treeAdapter.getTemplateContent(e) : e, r = a.treeAdapter.getChildNodes(n);
  if (r)
    for (const o of r)
      t += z3(o, a);
  return t;
}
function z3(e, a) {
  return a.treeAdapter.isElementNode(e) ? nX(e, a) : a.treeAdapter.isTextNode(e) ? sX(e, a) : a.treeAdapter.isCommentNode(e) ? iX(e, a) : a.treeAdapter.isDocumentTypeNode(e) ? oX(e, a) : "";
}
function nX(e, a) {
  const t = a.treeAdapter.getTagName(e);
  return `<${t}${rX(e, a)}>${f3(e, a) ? "" : `${y3(e, a)}</${t}>`}`;
}
function rX(e, { treeAdapter: a }) {
  let t = "";
  for (const n of a.getAttrList(e)) {
    if (t += " ", n.namespace)
      switch (n.namespace) {
        case Ea.NS.XML: {
          t += `xml:${n.name}`;
          break;
        }
        case Ea.NS.XMLNS: {
          n.name !== "xmlns" && (t += "xmlns:"), t += n.name;
          break;
        }
        case Ea.NS.XLINK: {
          t += `xlink:${n.name}`;
          break;
        }
        default:
          t += `${n.prefix}:${n.name}`;
      }
    else
      t += n.name;
    t += `="${(0, m3.escapeAttribute)(n.value)}"`;
  }
  return t;
}
function sX(e, a) {
  const { treeAdapter: t } = a, n = t.getTextNodeContent(e), r = t.getParentNode(e), o = r && t.isElementNode(r) && t.getTagName(r);
  return o && t.getNamespaceURI(r) === Ea.NS.HTML && (0, Ea.hasUnescapedText)(o, a.scriptingEnabled) ? n : (0, m3.escapeText)(n);
}
function iX(e, { treeAdapter: a }) {
  return `<!--${a.getCommentNodeContent(e)}-->`;
}
function oX(e, { treeAdapter: a }) {
  return `<!DOCTYPE ${a.getDocumentTypeNodeName(e)}>`;
}
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.TokenizerMode = e.Tokenizer = e.Token = e.html = e.foreignContent = e.ErrorCodes = e.serializeOuter = e.serialize = e.Parser = e.defaultTreeAdapter = void 0, e.parse = u, e.parseFragment = c;
  const a = oc;
  var t = Fm;
  Object.defineProperty(e, "defaultTreeAdapter", { enumerable: !0, get: function() {
    return t.defaultTreeAdapter;
  } });
  var n = oc;
  Object.defineProperty(e, "Parser", { enumerable: !0, get: function() {
    return n.Parser;
  } });
  var r = Vm;
  Object.defineProperty(e, "serialize", { enumerable: !0, get: function() {
    return r.serialize;
  } }), Object.defineProperty(e, "serializeOuter", { enumerable: !0, get: function() {
    return r.serializeOuter;
  } });
  var o = Go;
  Object.defineProperty(e, "ErrorCodes", { enumerable: !0, get: function() {
    return o.ERR;
  } }), e.foreignContent = h0, e.html = Ta, e.Token = Vo;
  var l = qo;
  Object.defineProperty(e, "Tokenizer", { enumerable: !0, get: function() {
    return l.Tokenizer;
  } }), Object.defineProperty(e, "TokenizerMode", { enumerable: !0, get: function() {
    return l.TokenizerMode;
  } });
  function u(f, y) {
    return a.Parser.parse(f, y);
  }
  function c(f, y, z) {
    typeof f == "string" && (z = y, y = f, f = null);
    const v = a.Parser.getFragmentParser(f, z);
    return v.tokenizer.write(y, !0), v.getFragment();
  }
})(WR);
var w0 = {}, Km = {}, mc = {};
Object.defineProperty(mc, "__esModule", {
  value: !0
});
mc.default = void 0;
const lX = ["b", "big", "i", "small", "tt", "abbr", "acronym", "cite", "code", "dfn", "em", "kbd", "strong", "samp", "time", "var", "a", "bdo", "br", "img", "map", "object", "q", "script", "span", "sub", "sup", "button", "input", "label", "select", "textarea"];
function dX(e) {
  return lX.includes(e) || e === "#text";
}
mc.default = dX;
var kd = {}, _d = {}, b3 = {}, v0 = {};
Object.defineProperty(v0, "__esModule", {
  value: !0
});
v0.default = Dk;
function Dk(e, a, t = !1) {
  const n = [];
  return e.childNodes && e.childNodes.forEach((r) => {
    a(r) ? (n.push(r), t && n.push(...Dk(r, a, t))) : n.push(...Dk(r, a, t));
  }), n;
}
var k0 = {};
Object.defineProperty(k0, "__esModule", {
  value: !0
});
k0.default = uX;
function uX(e, a) {
  return e.findAll((t) => {
    var n;
    return (n = t.childNodes) == null ? void 0 : n.includes(a);
  })[0] || a;
}
var _0 = {};
Object.defineProperty(_0, "__esModule", {
  value: !0
});
_0.default = w3;
var cX = K;
function w3(e) {
  let a = "";
  return (0, cX.isEmpty)(e.childNodes) || e.childNodes.forEach((t) => {
    t.name === "#text" ? a += t.value : t.name === "br" ? a += `
` : a += w3(t);
  }), a;
}
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "findAllInTree", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  }), Object.defineProperty(e, "getParentNode", {
    enumerable: !0,
    get: function() {
      return t.default;
    }
  }), Object.defineProperty(e, "innerText", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  });
  var a = r(v0), t = r(k0), n = r(_0);
  function r(o) {
    return o && o.__esModule ? o : { default: o };
  }
})(b3);
var Ed = {};
Object.defineProperty(Ed, "__esModule", {
  value: !0
});
Ed.default = void 0;
class pX {
  /**
   * Creates a new SourceCodeLocation.
   *
   * @param {Object} sourceCodeLocationInfo This node's location in the source code, from parse5.
   */
  constructor(a) {
    a.startTag && (this.startTag = {
      startOffset: a.startTag.startOffset,
      endOffset: a.startTag.endOffset
    }), a.endTag && (this.endTag = {
      startOffset: a.endTag.startOffset,
      endOffset: a.endTag.endOffset
    }), this.startOffset = a.startOffset, this.endOffset = a.endOffset;
  }
}
Ed.default = pX;
Object.defineProperty(_d, "__esModule", {
  value: !0
});
_d.default = void 0;
var Xw = b3, gX = fX(Ed), mX = K;
function fX(e) {
  return e && e.__esModule ? e : { default: e };
}
class hX {
  /**
   * Creates a new node.
   *
   * @param {string} 			name 					The node's name or tag.
   * @param {Object} 			attributes 				This node's attributes.
   * @param {(Node|Text)[]} 	childNodes 				This node's child nodes.
   * @param {Object} 			sourceCodeLocationInfo 	This node's location in the source code, from parse5.
   */
  constructor(a, t = {}, n = [], r = {}) {
    this.name = a, this.attributes = t, this.childNodes = n, (0, mX.isEmpty)(r) || (this.sourceCodeLocation = new gX.default(r));
  }
  /**
   * Finds all nodes in the tree that satisfies the given condition.
   *
   * @param {function} 	condition 					The condition that a node should satisfy to end up in the list.
   * @param {boolean} 	recurseFoundNodes=false 	Whether to recurse into found nodes to see if the condition
   *  also applies to sub-nodes of the found node.
   *
   * @returns {(Node|Text)[]} The list of nodes that satisfy the condition.
   */
  findAll(a, t = !1) {
    return (0, Xw.findAllInTree)(this, a, t);
  }
  /**
   * Retrieves the parent node for the current node.
   * @param {Node} tree The full tree for this node.
   * @returns {Node} The parent node.
   */
  getParentNode(a) {
    return (0, Xw.getParentNode)(a, this);
  }
  /**
   * Returns the inner text (text without any markup) from this node.
   *
   * @returns {string} The inner text from this node.
   */
  innerText() {
    return (0, Xw.innerText)(this);
  }
  /**
   * Retrieves the start offset for this node.
   * @returns {number} The start offset.
   */
  getStartOffset() {
    var a, t, n;
    return ((t = (a = this.sourceCodeLocation) == null ? void 0 : a.startTag) == null ? void 0 : t.endOffset) || ((n = this.sourceCodeLocation) == null ? void 0 : n.startOffset) || 0;
  }
}
_d.default = hX;
var Ym = {};
Object.defineProperty(Ym, "__esModule", {
  value: !0
});
Ym.default = void 0;
var yX = zX(_d);
function zX(e) {
  return e && e.__esModule ? e : { default: e };
}
class bX extends yX.default {
  /**
   * Creates a new heading.
   *
   * @param {1|2|3|4|5|6} level The heading level (e.g. `1` for `h1` up to `6` for `h6`).
   * @param {Object} attributes This heading's attributes.
   * @param {(Node|Text)[]} childNodes This heading's child nodes.
   * @param {Object} sourceCodeLocationInfo This heading's location in the source code, from parse5.
   */
  constructor(a, t = {}, n = [], r = {}) {
    super(`h${a}`, t, n, r), this.level = a;
  }
}
Ym.default = bX;
var Qm = {};
Object.defineProperty(Qm, "__esModule", {
  value: !0
});
Qm.default = void 0;
var wX = vX(_d);
function vX(e) {
  return e && e.__esModule ? e : { default: e };
}
class E0 extends wX.default {
  /**
   * Creates a new paragraph.
   *
   * @param {Object} attributes The paragraph's attributes.
   * @param {(Node|Text)[]} childNodes This paragraph's child nodes.
   * @param {Object} sourceCodeLocationInfo This paragraph's location in the source code, from parse5.
   * @param {boolean} isImplicit Whether this paragraph is an implicit paragraph, or an explicit paragraph.
   * @param {boolean} isOverarching Whether this paragraph is overarching text that is separated by double line breaks.
   */
  constructor(a = {}, t = [], n = {}, r = !1, o = !1) {
    const l = o ? "p-overarching" : "p";
    super(l, a, t, n), this.isImplicit = r;
  }
  /**
   * Creates and returns a new implicit paragraph.
   *
   * @param {Object} attributes The paragraph's attributes.
   * @param {(Node|Text)[]} childNodes This paragraph's child nodes.
   * @param {Object} sourceCodeLocationInfo This paragraph's location in the source code, from parse5.
   *
   * @returns {Paragraph} A new implicit paragraph.
   */
  static createImplicit(a = {}, t = [], n = {}) {
    return new E0(a, t, n, !0);
  }
}
Qm.default = E0;
var Xm = {};
Object.defineProperty(Xm, "__esModule", {
  value: !0
});
Xm.default = void 0;
var kX = _X(Ed);
function _X(e) {
  return e && e.__esModule ? e : { default: e };
}
class EX {
  /**
   * Creates a new Text object, that consist of some text and a source code range.
   *
   * @param {object} textNode The current #text node in the parse5 tree.
   */
  constructor(a) {
    this.name = "#text", this.value = a.value, this.sourceCodeRange = new kX.default({
      startOffset: a.sourceCodeLocation.startOffset,
      endOffset: a.sourceCodeLocation.endOffset
    });
  }
}
Xm.default = EX;
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "Heading", {
    enumerable: !0,
    get: function() {
      return t.default;
    }
  }), Object.defineProperty(e, "Node", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  }), Object.defineProperty(e, "Paragraph", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  }), Object.defineProperty(e, "Text", {
    enumerable: !0,
    get: function() {
      return r.default;
    }
  });
  var a = o(_d), t = o(Ym), n = o(Qm), r = o(Xm);
  function o(l) {
    return l && l.__esModule ? l : { default: l };
  }
})(kd);
Object.defineProperty(Km, "__esModule", {
  value: !0
});
Km.default = void 0;
var AX = v3(mc), N2 = kd, TX = K, Nk = v3(Ed);
function v3(e) {
  return e && e.__esModule ? e : { default: e };
}
function $X(e) {
  return e.name === "#text" && e.value && e.value.match(/^[\n\s]+$/g);
}
function L2(e) {
  return e && e.childNodes.length > 0;
}
const M2 = (e) => {
  const [a] = e.childNodes.slice(0), [t] = e.childNodes.slice(-1);
  if ((a.sourceCodeRange || a.sourceCodeLocation) && (t.sourceCodeRange || t.sourceCodeLocation)) {
    const n = a.sourceCodeRange ? a.sourceCodeRange.startOffset : a.sourceCodeLocation.startOffset, r = t.sourceCodeRange ? t.sourceCodeRange.endOffset : t.sourceCodeLocation.endOffset;
    e.sourceCodeLocation = new Nk.default({
      startOffset: n,
      endOffset: r
    });
  }
}, jX = (e, a, t) => {
  const n = a && a.name === "br", r = t && t.name === "br";
  return e.name === "br" && (n || r);
};
function xX(e, a = {}) {
  const t = [];
  let n = {};
  if ((0, TX.isEmpty)(a)) {
    const o = e[0], l = e[e.length - 1];
    o && l && o.sourceCodeLocation && l.sourceCodeLocation && (n = new Nk.default({
      startOffset: o.sourceCodeLocation.startOffset,
      endOffset: l.sourceCodeLocation.endOffset
    }));
  } else
    n = new Nk.default({
      startOffset: a.startTag ? a.startTag.endOffset : a.startOffset,
      endOffset: a.endTag ? a.endTag.startOffset : a.endOffset
    });
  let r = N2.Paragraph.createImplicit({}, [], n);
  return e.forEach((o, l, u) => {
    const c = l !== 0 && u[l - 1], f = u.length - 1 !== l && u[l + 1];
    (0, AX.default)(o.name) && !$X(o) && !jX(o, c, f) ? r.childNodes.push(o) : (L2(r) && (M2(r), o.sourceCodeLocation && (n.startOffset = o.sourceCodeLocation.endOffset), t.push(r), r = N2.Paragraph.createImplicit({}, [], n)), t.push(o));
  }), L2(r) && (M2(r), t.push(r)), t;
}
Km.default = xX;
var Zm = {}, A0 = {};
Object.defineProperty(A0, "__esModule", {
  value: !0
});
A0.default = SX;
function SX(e) {
  return new Set(e.split(" "));
}
Object.defineProperty(Zm, "__esModule", {
  value: !0
});
Zm.default = void 0;
var OX = IX(A0);
function IX(e) {
  return e && e.__esModule ? e : { default: e };
}
function CX(e) {
  if (!e)
    return {};
  const a = {};
  return e.forEach(({
    name: t,
    value: n
  }) => {
    t === "class" && (n = (0, OX.default)(n)), a[t] = n;
  }), a;
}
Zm.default = CX;
Object.defineProperty(w0, "__esModule", {
  value: !0
});
w0.default = _3;
var q2 = T0(Km), PX = T0(Zm), RX = T0(mc), DX = K, Sg = kd;
function T0(e) {
  return e && e.__esModule ? e : { default: e };
}
function $0(e) {
  return e === "p";
}
function k3(e) {
  return ["h1", "h2", "h3", "h4", "h5", "h6"].includes(e);
}
function NX(e) {
  return e === "#text";
}
function LX(e) {
  return !($0(e) || (0, RX.default)(e) || k3(e));
}
function MX(e, a) {
  return $0(e) && a.some((t, n, r) => {
    const o = r.length - 1 !== n && r[n + 1];
    return t.name === "br" && o && o.name === "br";
  });
}
function _3(e) {
  if (NX(e.nodeName))
    return new Sg.Text(e);
  let a = [], t = !1;
  (0, DX.isEmpty)(e.childNodes) || (a = e.childNodes.map(_3), LX(e.nodeName) && (a = (0, q2.default)(a, e.sourceCodeLocation)), MX(e.nodeName, a) && (t = !0, a = (0, q2.default)(a, e.sourceCodeLocation)));
  const n = (0, PX.default)(e.attrs);
  if ($0(e.nodeName))
    return new Sg.Paragraph(n, a, e.sourceCodeLocation, !1, t);
  if (k3(e.nodeName)) {
    const r = parseInt(e.nodeName[1], 10);
    return new Sg.Heading(r, n, a, e.sourceCodeLocation);
  }
  return new Sg.Node(e.nodeName, n, a, e.sourceCodeLocation);
}
var Jm = {}, j0 = {}, Vi = {}, Ad = {};
Object.defineProperty(Ad, "__esModule", {
  value: !0
});
Ad.elementHasClass = FX;
Ad.elementHasID = BX;
Ad.elementHasName = qX;
function qX(e) {
  return (a) => a.name === e;
}
function FX(e) {
  return (a) => !!a.attributes.class && a.attributes.class.has(e);
}
function BX(e) {
  return (a) => a.attributes.id === e;
}
Object.defineProperty(Vi, "__esModule", {
  value: !0
});
Vi.default = Vi.canBeChildOfParagraph = void 0;
var Ie = Ad;
Vi.canBeChildOfParagraph = ["code", "kbd", "math", "q", "samp", "script", "var", "#comment", "cite", "form", "map", "noscript", "output"];
const WX = [
  // Filters out Yoast blocks that don't need to be part of the analysis.
  // The only Yoast blocks that are not filtered out are the FAQ and the How-to block.
  // The other Yoast blocks we want to filter (i.e. Yoast siblings, Yoast subpages, Yoast breadcrumbs) enter the Paper as HTML comments.
  // Comments are filtered out in `filterBeforeTokenizing.js` step.
  (0, Ie.elementHasClass)("yoast-table-of-contents"),
  (0, Ie.elementHasClass)("yoast-reading-time__wrapper"),
  // Filters for Elementor widgets
  (0, Ie.elementHasID)("breadcrumbs"),
  (0, Ie.elementHasClass)("elementor-button-wrapper"),
  (0, Ie.elementHasClass)("elementor-divider"),
  (0, Ie.elementHasClass)("elementor-spacer"),
  (0, Ie.elementHasClass)("elementor-custom-embed"),
  (0, Ie.elementHasClass)("elementor-icon-wrapper"),
  (0, Ie.elementHasClass)("elementor-icon-box-wrapper"),
  (0, Ie.elementHasClass)("elementor-counter"),
  (0, Ie.elementHasClass)("elementor-progress-wrapper"),
  // This element is used for the progress bar widget title.
  (0, Ie.elementHasClass)("elementor-title"),
  (0, Ie.elementHasClass)("elementor-alert"),
  (0, Ie.elementHasClass)("elementor-soundcloud-wrapper"),
  (0, Ie.elementHasClass)("elementor-shortcode"),
  (0, Ie.elementHasClass)("elementor-menu-anchor"),
  (0, Ie.elementHasClass)("e-rating"),
  // Filters out HTML elements.
  /* Elements are filtered out when: they contain content outside of the author's control (incl. quotes and embedded
  content); their content isn't natural language (e.g. code); they contain metadata hidden from the page visitor
  (e.g. <style>); they are used to accept input from the visitor. Deprecated HTML elements are not included.*/
  (0, Ie.elementHasName)("base"),
  (0, Ie.elementHasName)("blockquote"),
  (0, Ie.elementHasName)("canvas"),
  (0, Ie.elementHasName)("code"),
  // It seems that the <head> element is filtered out by the parser we employ, but it's included here for completeness.
  (0, Ie.elementHasName)("head"),
  (0, Ie.elementHasName)("iframe"),
  (0, Ie.elementHasName)("input"),
  (0, Ie.elementHasName)("kbd"),
  (0, Ie.elementHasName)("link"),
  (0, Ie.elementHasName)("math"),
  (0, Ie.elementHasName)("meta"),
  (0, Ie.elementHasName)("meter"),
  (0, Ie.elementHasName)("noscript"),
  (0, Ie.elementHasName)("object"),
  (0, Ie.elementHasName)("portal"),
  (0, Ie.elementHasName)("pre"),
  (0, Ie.elementHasName)("progress"),
  (0, Ie.elementHasName)("q"),
  (0, Ie.elementHasName)("samp"),
  (0, Ie.elementHasName)("script"),
  (0, Ie.elementHasName)("slot"),
  (0, Ie.elementHasName)("style"),
  (0, Ie.elementHasName)("svg"),
  (0, Ie.elementHasName)("template"),
  (0, Ie.elementHasName)("textarea"),
  (0, Ie.elementHasName)("title"),
  (0, Ie.elementHasName)("var"),
  (0, Ie.elementHasName)("#comment"),
  (0, Ie.elementHasName)("cite"),
  (0, Ie.elementHasName)("form"),
  (0, Ie.elementHasName)("map"),
  (0, Ie.elementHasName)("noscript"),
  (0, Ie.elementHasName)("output")
];
Vi.default = WX;
Object.defineProperty(j0, "__esModule", {
  value: !0
});
j0.default = QX;
var UX = kd, HX = Vi;
function GX(e) {
  const a = [];
  return e.forEach((t) => {
    if (HX.canBeChildOfParagraph.includes(t.name))
      a.push(t.sourceCodeLocation);
    else {
      if (t.sourceCodeLocation.startTag) {
        const n = {
          startOffset: t.sourceCodeLocation.startTag.startOffset,
          endOffset: t.sourceCodeLocation.startTag.endOffset
        };
        t.name === "br" && (n.endOffset = n.endOffset - 1), a.push(n);
      }
      t.sourceCodeLocation.endTag && a.push(t.sourceCodeLocation.endTag);
    }
  }), a.sort((t, n) => t.startOffset - n.startOffset), a;
}
function VX(e, a, t) {
  return e.forEach((n) => {
    n.startOffset >= a && n.startOffset < t && (t += n.endOffset - n.startOffset);
  }), t;
}
function KX(e, a) {
  return e.forEach((t) => {
    t.startOffset === a && (a += t.endOffset - t.startOffset);
  }), a;
}
const YX = (e) => e instanceof UX.Paragraph && e.isImplicit ? e.sourceCodeLocation.startOffset : e.sourceCodeLocation.startTag.endOffset;
function QX(e, a, t = -1) {
  if (a.length === 0 || !e.sourceCodeLocation)
    return a;
  let n = t >= 0 ? t : YX(e), r, o = [];
  if (e.findAll) {
    const l = e.findAll((u) => u.sourceCodeLocation, !0);
    l.length > 0 && (o = GX(l));
  }
  return a.forEach((l) => {
    r = n + l.text.length, o.length > 0 && (r = VX(o, n, r), n = KX(o, n)), l.sourceCodeRange = {
      startOffset: n,
      endOffset: r
    }, n = r;
  }), a;
}
var Vt = {};
Object.defineProperty(Vt, "__esModule", {
  value: !0
});
Vt.htmlEntitiesRegex = Vt.htmlEntities = Vt.hashedHtmlEntitiesRegexStart = Vt.hashedHtmlEntitiesRegexEnd = Vt.hashedHtmlEntities = void 0;
const E3 = Vt.htmlEntities = /* @__PURE__ */ new Map([["amp;", "&"], ["lt;", "<"], ["gt;", ">"], ["quot;", '"'], ["apos;", "'"], ["ndash;", "–"], ["mdash;", "—"], ["copy;", "©"], ["reg;", "®"], ["trade;", "™"], ["pound;", "£"], ["yen;", "¥"], ["euro;", "€"], ["dollar;", "$"], ["deg;", "°"], ["asymp;", "≈"], ["ne;", "≠"], ["nbsp;", " "]]);
Vt.htmlEntitiesRegex = new RegExp("&(" + [...E3.keys()].join("|") + ")", "ig");
const x0 = Vt.hashedHtmlEntities = /* @__PURE__ */ new Map();
E3.forEach((e, a) => x0.set("#" + a, e));
Vt.hashedHtmlEntitiesRegexStart = new RegExp("^(" + [...x0.keys()].join("|") + ")");
Vt.hashedHtmlEntitiesRegexEnd = new RegExp("(" + [...x0.keys()].join("|") + ")$");
Object.defineProperty(Jm, "__esModule", {
  value: !0
});
Jm.default = void 0;
var F2 = kd, A3 = ZX(j0), XX = Vt;
function ZX(e) {
  return e && e.__esModule ? e : { default: e };
}
function JX(e, a, t) {
  return a.tokens = t.splitIntoTokens(a), a.tokens = (0, A3.default)(e, a.tokens, a.sourceCodeRange.startOffset), a;
}
function eZ(e, a) {
  let t = a.splitIntoSentences(e.innerText());
  return t = (0, A3.default)(e, t), t.map((n) => (n = JX(e, n, a), XX.hashedHtmlEntities.forEach((r, o) => {
    const l = new RegExp(o, "g");
    n.text = n.text.replace(l, r), n.tokens.map((u) => (u.text = u.text.replace(l, r), u));
  }), n));
}
function T3(e, a) {
  return (e instanceof F2.Paragraph && e.name !== "p-overarching" || e instanceof F2.Heading) && (e.sentences = eZ(e, a)), e.childNodes && (e.childNodes = e.childNodes.map((t) => T3(t, a))), e;
}
Jm.default = T3;
var ef = {};
Object.defineProperty(ef, "__esModule", {
  value: !0
});
ef.default = $3;
var aZ = kd;
function tZ(e, a) {
  return e.name === "#text" ? !1 : a.some((t) => t(e));
}
function $3(e, a) {
  if (!tZ(e, a) && !(e.childNodes && (e.childNodes = e.childNodes.filter((t) => $3(t, a)), e.childNodes.length === 0 && e instanceof aZ.Paragraph && e.isImplicit)))
    return e;
}
var S0 = {};
Object.defineProperty(S0, "__esModule", {
  value: !0
});
S0.filterBeforeTokenizing = j3;
var nZ = K, rZ = Vi;
function j3(e) {
  return rZ.canBeChildOfParagraph.includes(e.name) && (e.childNodes = []), (0, nZ.isEmpty)(e.childNodes) || e.childNodes.map(j3), e;
}
var af = {};
Object.defineProperty(af, "__esModule", {
  value: !0
});
af.default = oZ;
af.updateBlocksOffset = O0;
var sZ = K;
const x3 = /<!--\s+wp:([a-z][a-z0-9_-]*\/)?([a-z][a-z0-9_-]*)\s+({(?:(?=([^}]+|}+(?=})|(?!}\s+\/?-->)[^])*)\5|[^]*?)}\s+)?(\/)?-->/g, iZ = (e) => {
  const a = e._attributes.wpBlocks, t = [];
  return a && a.length > 0 ? (a.forEach((n) => {
    if (n.innerBlocks.length > 0) {
      const r = n.innerBlocks;
      t.push(n, ...r);
    } else
      t.push(n);
  }), t) : [];
};
function O0(e, a) {
  e.length !== 0 && e.forEach((t, n) => {
    const r = x3.exec(a);
    if (t.name === "core/freeform") {
      const o = e[n - 1];
      if (o) {
        const u = o.endOffset + 2;
        t.startOffset = u, t.endOffset = u + t.blockLength, t.contentOffset = u;
      } else
        t.startOffset = 0, t.endOffset = 0 + t.blockLength, t.contentOffset = 0;
    } else {
      if (r === null)
        return;
      const [o] = r, l = r.index, u = o.length;
      t.startOffset = l, t.endOffset = l + t.blockLength, t.contentOffset = l + u + 1;
    }
    t.innerBlocks && t.innerBlocks.length > 0 && O0(t.innerBlocks, a);
  });
}
function S3(e, a, t) {
  if (!e)
    return;
  let n = t;
  if (e.sourceCodeLocation && !(0, sZ.isUndefined)(e.sourceCodeLocation.startOffset)) {
    const r = a.find((o) => o.contentOffset === e.sourceCodeLocation.startOffset);
    r && (n = r.clientId);
  }
  n && (e.clientId = n), (e.childNodes || []).forEach((r) => {
    r.attributes && r.attributes.id && r.childNodes && r.childNodes.length > 3 && (r.childNodes[0].attributeId = r.attributes.id, r.childNodes[0].isFirstSection = !0, r.childNodes[2].attributeId = r.attributes.id, r.childNodes[2].isFirstSection = !1), S3(r, a, n);
  });
}
function oZ(e, a) {
  const t = e._attributes.wpBlocks || [];
  x3.lastIndex = 0, O0(t, e.getText());
  const n = iZ(e);
  S3(a, n, void 0);
}
var fs = {};
Object.defineProperty(fs, "__esModule", {
  value: !0
});
fs.filterShortcodesFromHTML = fs.default = fs.createShortcodeTagsRegex = void 0;
const I0 = (e) => {
  const a = `\\[\\/?(${e.join("|")})[^\\]]*\\]`;
  return new RegExp(a, "g");
};
fs.createShortcodeTagsRegex = I0;
const lZ = (e, a) => {
  if (!a || a.length === 0)
    return e;
  const t = I0(a);
  return e.replace(t, "");
};
fs.filterShortcodesFromHTML = lZ;
const dZ = (e, a) => e[a - 1] && e[a - 1].text === "[", uZ = (e, a) => e[a - 1] && e[a - 1].text === "/" && e[a - 2] && e[a - 2].text === "[", cZ = (e, a, t, n) => n && t.includes(e[a].text) && (dZ(e, a) || uZ(e, a)), pZ = (e, a, t) => {
  const n = e.tokens;
  let r = !1;
  for (let o = n.length - 1; o >= 0; o--)
    if (n[o].text === "]" && (r = !0), cZ(n, o, a, r)) {
      for (; n[o].text !== "]"; )
        n.splice(o, 1);
      for (n.splice(o, 1), r = !1; n[o - 1] && "[/".includes(n[o - 1].text); )
        n.splice(o - 1, 1), o--;
    }
  e.tokens = n, e.text = e.text.replace(t, "");
}, O3 = (e, a, t) => {
  e.sentences && e.sentences.forEach((n) => {
    pZ(n, a, t);
  }), e.childNodes && e.childNodes.forEach((n) => {
    O3(n, a, t);
  });
}, gZ = (e, a) => {
  if (!a || a.length === 0)
    return;
  const t = I0(a);
  O3(e, a, t);
};
fs.default = gZ;
Object.defineProperty(f0, "__esModule", {
  value: !0
});
f0.default = _Z;
var mZ = WR, fZ = Td(w0), hZ = Td(Jm), yZ = Td(ef), zZ = Td(Vi), bZ = S0, wZ = Td(af), vZ = Td(fs), kZ = Vt;
function Td(e) {
  return e && e.__esModule ? e : { default: e };
}
function _Z(e, a, t) {
  let n = e.getText();
  n = n.replace(kZ.htmlEntitiesRegex, "#$1");
  let r = (0, fZ.default)((0, mZ.parseFragment)(n, {
    sourceCodeLocationInfo: !0
  }));
  return r.childNodes && r.childNodes.length > 0 && (0, wZ.default)(e, r), r = (0, bZ.filterBeforeTokenizing)(r), r = (0, hZ.default)(r, a), t && (0, vZ.default)(r, t), (0, yZ.default)(r, zZ.default);
}
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "build", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  });
  var a = t(f0);
  function t(n) {
    return n && n.__esModule ? n : { default: n };
  }
})(m0);
var ws = {}, fc = {}, tf = {};
Object.defineProperty(tf, "__esModule", {
  value: !0
});
tf.default = void 0;
class C0 {
  /**
   * Initialize the Shortlinker class.
   *
   * @param {Object} [config={}] Optional configuration.
   */
  constructor(a = {}) {
    this.configure(a);
  }
  /**
   * Saves the passed configuration.
   *
   * @param {Object} config             The configuration.
   * @param {Object} [config.params={}] The default params to create the query string with.
   *
   * @returns {void}
   */
  configure(a) {
    this._config = {
      params: {},
      ...a
    };
  }
  /**
   * Creates a query string from a params object.
   *
   * @param {Object} params Params for in the query string.
   *
   * @returns {string} URI encoded query string.
   */
  static createQueryString(a) {
    return Object.keys(a).map((t) => `${encodeURIComponent(t)}=${encodeURIComponent(a[t])}`).join("&");
  }
  /**
   * Creates a link by combining the params from the config and appending them to the url.
   *
   * @param {string} url         The base url.
   * @param {Object} [params={}] Optional params for in the url.
   *
   * @returns {string} The url with query string.
   */
  append(a, t = {}) {
    let n = encodeURI(a);
    const r = C0.createQueryString({
      ...this._config.params,
      ...t
    });
    return r !== "" && (n += "?" + r), n;
  }
  /**
   * Creates an anchor opening tag; uses the append function to create the url.
   *
   * @param {string} url         The base url.
   * @param {Object} [params={}] Optional params for in the url.
   *
   * @returns {string} The anchor opening tag.
   */
  createAnchorOpeningTag(a, t = {}) {
    return `<a href='${this.append(a, t)}' target='_blank'>`;
  }
}
tf.default = C0;
Object.defineProperty(fc, "__esModule", {
  value: !0
});
fc.configureShortlinker = TZ;
fc.createAnchorOpeningTag = jZ;
fc.createShortlink = $Z;
var EZ = AZ(tf);
function AZ(e) {
  return e && e.__esModule ? e : { default: e };
}
let hs;
typeof window > "u" ? typeof self > "u" ? hs = dt : hs = self : hs = window;
hs.yoast = hs.yoast || {};
hs.yoast.shortlinker = hs.yoast.shortlinker || null;
function P0() {
  return hs.yoast.shortlinker === null && (hs.yoast.shortlinker = new EZ.default()), hs.yoast.shortlinker;
}
function TZ(e) {
  P0().configure(e);
}
function $Z(e, a = {}) {
  return P0().append(e, a);
}
function jZ(e, a = {}) {
  return P0().createAnchorOpeningTag(e, a);
}
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  });
  var a = fc;
  Object.keys(a).forEach(function(t) {
    t === "default" || t === "__esModule" || t in e && e[t] === a[t] || Object.defineProperty(e, t, {
      enumerable: !0,
      get: function() {
        return a[t];
      }
    });
  });
})(ws);
var $d = {};
Object.defineProperty($d, "__esModule", {
  value: !0
});
$d.default = void 0;
class xZ extends Error {
  /**
   * Constructs an InvalidTypeError.
   * @param {string} message The message to show when the error is thrown.
   * @constructor
   */
  constructor(a) {
    super(a), this.name = "InvalidTypeError";
  }
}
$d.default = xZ;
var R0 = {};
Object.defineProperty(R0, "__esModule", {
  value: !0
});
R0.default = OZ;
var SZ = K;
function OZ(e, a) {
  for (let t = 0; t < a.length; t++)
    if ((0, SZ.includes)(e, a[t]))
      return !0;
  return !1;
}
var hc = {}, nf = {};
Object.defineProperty(nf, "__esModule", {
  value: !0
});
nf.default = void 0;
let IZ = class {
  /**
   * Creates a sentence.
   *
   * @param {string} text The sentence's text.
   */
  constructor(a) {
    this.text = a, this.tokens = [], this.sourceCodeRange = {};
  }
  /**
   * Retrieves the first non-space token in the sentence.
   * @returns {Token|undefined} The first non-space token in the sentence.
   */
  getFirstToken() {
    return this.tokens.find(({
      text: a
    }) => a !== " ");
  }
  /**
   * Retrieves the last non-space token in the sentence.
   * @returns {Token|undefined} The last non-space token in the sentence.
   */
  getLastToken() {
    return this.tokens.findLast(({
      text: a
    }) => a !== " ");
  }
  /**
   * Sets the parent attributes for this sentence.
   * @param {Node} parentNode The parent node.
   * @param {Node} tree The full tree.
   */
  setParentAttributes(a, t) {
    const n = a;
    a.isImplicit && (a = a.getParentNode(t)), this.parentStartOffset = a.getStartOffset(), this.parentClientId = a.clientId || "", this.parentAttributeId = n.attributeId || "", this.isParentFirstSectionOfBlock = n.isFirstSection || !1;
  }
};
nf.default = IZ;
var rf = {}, Zw = {}, sf = {}, D0 = {};
Object.defineProperty(D0, "__esModule", {
  value: !0
});
D0.default = CZ;
function CZ() {
  return [{
    base: "a",
    letters: /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g
  }, {
    base: "aa",
    letters: /[\uA733]/g
  }, {
    base: "ae",
    letters: /[\u00E6\u01FD\u01E3]/g
  }, {
    base: "ao",
    letters: /[\uA735]/g
  }, {
    base: "au",
    letters: /[\uA737]/g
  }, {
    base: "av",
    letters: /[\uA739\uA73B]/g
  }, {
    base: "ay",
    letters: /[\uA73D]/g
  }, {
    base: "b",
    letters: /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g
  }, {
    base: "c",
    letters: /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g
  }, {
    base: "d",
    letters: /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g
  }, {
    base: "dz",
    letters: /[\u01F3\u01C6]/g
  }, {
    base: "e",
    letters: /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g
  }, {
    base: "f",
    letters: /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g
  }, {
    base: "g",
    letters: /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g
  }, {
    base: "h",
    letters: /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g
  }, {
    base: "hv",
    letters: /[\u0195]/g
  }, {
    base: "i",
    letters: /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g
  }, {
    base: "j",
    letters: /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g
  }, {
    base: "k",
    letters: /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g
  }, {
    base: "l",
    letters: /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g
  }, {
    base: "lj",
    letters: /[\u01C9]/g
  }, {
    base: "m",
    letters: /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g
  }, {
    base: "n",
    letters: /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g
  }, {
    base: "nj",
    letters: /[\u01CC]/g
  }, {
    base: "o",
    letters: /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g
  }, {
    base: "oi",
    letters: /[\u01A3]/g
  }, {
    base: "ou",
    letters: /[\u0223]/g
  }, {
    base: "oo",
    letters: /[\uA74F]/g
  }, {
    base: "p",
    letters: /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g
  }, {
    base: "q",
    letters: /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g
  }, {
    base: "r",
    letters: /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g
  }, {
    base: "s",
    letters: /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g
  }, {
    base: "t",
    letters: /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g
  }, {
    base: "tz",
    letters: /[\uA729]/g
  }, {
    base: "u",
    letters: /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g
  }, {
    base: "v",
    letters: /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g
  }, {
    base: "vy",
    letters: /[\uA761]/g
  }, {
    base: "w",
    letters: /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g
  }, {
    base: "x",
    letters: /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g
  }, {
    base: "y",
    letters: /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g
  }, {
    base: "z",
    letters: /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g
  }];
}
Object.defineProperty(sf, "__esModule", {
  value: !0
});
sf.default = DZ;
var PZ = RZ(D0);
function RZ(e) {
  return e && e.__esModule ? e : { default: e };
}
function DZ(e) {
  const a = (0, PZ.default)();
  for (let t = 0; t < a.length; t++)
    e = e.replace(a[t].letters, a[t].base);
  return e;
}
var of = {}, yc = {}, Qi = {};
Object.defineProperty(Qi, "__esModule", {
  value: !0
});
Qi.default = NZ;
function NZ(e) {
  return e.split("_")[0];
}
Object.defineProperty(yc, "__esModule", {
  value: !0
});
yc.default = FZ;
yc.transliterations = void 0;
var LZ = qZ(Qi), MZ = K;
function qZ(e) {
  return e && e.__esModule ? e : { default: e };
}
const Jw = yc.transliterations = {
  // Language: Spanish.
  // Source: https://en.wikipedia.org/wiki/Spanish_orthography
  es: [{
    letter: /[\u00F1]/g,
    alternative: "n"
  }, {
    letter: /[\u00D1]/g,
    alternative: "N"
  }, {
    letter: /[\u00E1]/g,
    alternative: "a"
  }, {
    letter: /[\u00C1]/g,
    alternative: "A"
  }, {
    letter: /[\u00E9]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9]/g,
    alternative: "E"
  }, {
    letter: /[\u00ED]/g,
    alternative: "i"
  }, {
    letter: /[\u00CD]/g,
    alternative: "I"
  }, {
    letter: /[\u00F3]/g,
    alternative: "o"
  }, {
    letter: /[\u00D3]/g,
    alternative: "O"
  }, {
    letter: /[\u00FA\u00FC]/g,
    alternative: "u"
  }, {
    letter: /[\u00DA\u00DC]/g,
    alternative: "U"
  }],
  // Language: Polish.
  // Source: https://en.wikipedia.org/wiki/Polish_orthography
  pl: [{
    letter: /[\u0105]/g,
    alternative: "a"
  }, {
    letter: /[\u0104]/g,
    alternative: "A"
  }, {
    letter: /[\u0107]/g,
    alternative: "c"
  }, {
    letter: /[\u0106]/g,
    alternative: "C"
  }, {
    letter: /[\u0119]/g,
    alternative: "e"
  }, {
    letter: /[\u0118]/g,
    alternative: "E"
  }, {
    letter: /[\u0142]/g,
    alternative: "l"
  }, {
    letter: /[\u0141]/g,
    alternative: "L"
  }, {
    letter: /[\u0144]/g,
    alternative: "n"
  }, {
    letter: /[\u0143]/g,
    alternative: "N"
  }, {
    letter: /[\u00F3]/g,
    alternative: "o"
  }, {
    letter: /[\u00D3]/g,
    alternative: "O"
  }, {
    letter: /[\u015B]/g,
    alternative: "s"
  }, {
    letter: /[\u015A]/g,
    alternative: "S"
  }, {
    letter: /[\u017A\u017C]/g,
    alternative: "z"
  }, {
    letter: /[\u0179\u017B]/g,
    alternative: "Z"
  }],
  // Language: German.
  // Source: https://en.wikipedia.org/wiki/German_orthography#Special_characters
  de: [{
    letter: /[\u00E4]/g,
    alternative: "ae"
  }, {
    letter: /[\u00C4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00FC]/g,
    alternative: "ue"
  }, {
    letter: /[\u00DC]/g,
    alternative: "Ue"
  }, {
    letter: /[\u00F6]/g,
    alternative: "oe"
  }, {
    letter: /[\u00D6]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00DF]/g,
    alternative: "ss"
  }, {
    letter: /[\u1E9E]/g,
    alternative: "SS"
  }],
  // Language Bokmål
  // Source: http://www.dagbladet.no/2011/12/30/tema/reise/reiseeksperter/forbrukerrettigheter/19494227/
  // Language Nynorks
  // Source: http://www.dagbladet.no/2011/12/30/tema/reise/reiseeksperter/forbrukerrettigheter/19494227/
  // Bokmål and Nynorks use the same transliterations
  nbnn: [{
    letter: /[\u00E6\u04D5]/g,
    alternative: "ae"
  }, {
    letter: /[\u00C6\u04D4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00E5]/g,
    alternative: "aa"
  }, {
    letter: /[\u00C5]/g,
    alternative: "Aa"
  }, {
    letter: /[\u00F8]/g,
    alternative: "oe"
  }, {
    letter: /[\u00D8]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00E9\u00E8\u00EA]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9\u00C8\u00CA]/g,
    alternative: "E"
  }, {
    letter: /[\u00F3\u00F2\u00F4]/g,
    alternative: "o"
  }, {
    letter: /[\u00D3\u00D2\u00D4]/g,
    alternative: "O"
  }],
  // Language: Swedish.
  // Sources: https://sv.wikipedia.org/wiki/%C3%85#Historia
  // http://forum.wordreference.com/threads/swedish-%C3%A4-ae-%C3%B6-oe-acceptable.1451839/
  sv: [{
    letter: /[\u00E5]/g,
    alternative: "aa"
  }, {
    letter: /[\u00C5]/g,
    alternative: "Aa"
  }, {
    letter: /[\u00E4]/g,
    alternative: "ae"
  }, {
    letter: /[\u00C4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00F6]/g,
    alternative: "oe"
  }, {
    letter: /[\u00D6]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00E9]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9]/g,
    alternative: "E"
  }, {
    letter: /[\u00E0]/g,
    alternative: "a"
  }, {
    letter: /[\u00C0]/g,
    alternative: "A"
  }],
  // Language: Finnish.
  // Sources: https://www.cs.tut.fi/~jkorpela/lang/finnish-letters.html
  // https://en.wikipedia.org/wiki/Finnish_orthography
  fi: [{
    letter: /[\u00E5]/g,
    alternative: "aa"
  }, {
    letter: /[\u00C5]/g,
    alternative: "Aa"
  }, {
    letter: /[\u00E4]/g,
    alternative: "a"
  }, {
    letter: /[\u00C4]/g,
    alternative: "A"
  }, {
    letter: /[\u00F6]/g,
    alternative: "o"
  }, {
    letter: /[\u00D6]/g,
    alternative: "O"
  }, {
    letter: /[\u017E]/g,
    alternative: "zh"
  }, {
    letter: /[\u017D]/g,
    alternative: "Zh"
  }, {
    letter: /[\u0161]/g,
    alternative: "sh"
  }, {
    letter: /[\u0160]/g,
    alternative: "Sh"
  }],
  // Language: Danish.
  // Sources: https://sv.wikipedia.org/wiki/%C3%85#Historia
  // https://en.wikipedia.org/wiki/Danish_orthography
  da: [{
    letter: /[\u00E5]/g,
    alternative: "aa"
  }, {
    letter: /[\u00C5]/g,
    alternative: "Aa"
  }, {
    letter: /[\u00E6\u04D5]/g,
    alternative: "ae"
  }, {
    letter: /[\u00C6\u04D4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00C4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00F8]/g,
    alternative: "oe"
  }, {
    letter: /[\u00D8]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00E9]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9]/g,
    alternative: "E"
  }],
  // Language: Turkish.
  // Source: https://en.wikipedia.org/wiki/Turkish_alphabet
  // ‘İ’ is the capital dotted ‘i’. Its lowercase counterpart is the ‘regular’ ‘i’.
  tr: [{
    letter: /[\u00E7]/g,
    alternative: "c"
  }, {
    letter: /[\u00C7]/g,
    alternative: "C"
  }, {
    letter: /[\u011F]/g,
    alternative: "g"
  }, {
    letter: /[\u011E]/g,
    alternative: "G"
  }, {
    letter: /[\u00F6]/g,
    alternative: "o"
  }, {
    letter: /[\u00D6]/g,
    alternative: "O"
  }, {
    letter: /[\u015F]/g,
    alternative: "s"
  }, {
    letter: /[\u015E]/g,
    alternative: "S"
  }, {
    letter: /[\u00E2]/g,
    alternative: "a"
  }, {
    letter: /[\u00C2]/g,
    alternative: "A"
  }, {
    letter: /[\u0131\u00EE]/g,
    alternative: "i"
  }, {
    letter: /[\u0130\u00CE]/g,
    alternative: "I"
  }, {
    letter: /[\u00FC\u00FB]/g,
    alternative: "u"
  }, {
    letter: /[\u00DC\u00DB]/g,
    alternative: "U"
  }],
  // Language: Latvian.
  // Source: https://en.wikipedia.org/wiki/Latvian_orthography
  lv: [{
    letter: /[\u0101]/g,
    alternative: "a"
  }, {
    letter: /[\u0100]/g,
    alternative: "A"
  }, {
    letter: /[\u010D]/g,
    alternative: "c"
  }, {
    letter: /[\u010C]/g,
    alternative: "C"
  }, {
    letter: /[\u0113]/g,
    alternative: "e"
  }, {
    letter: /[\u0112]/g,
    alternative: "E"
  }, {
    letter: /[\u0123]/g,
    alternative: "g"
  }, {
    letter: /[\u0122]/g,
    alternative: "G"
  }, {
    letter: /[\u012B]/g,
    alternative: "i"
  }, {
    letter: /[\u012A]/g,
    alternative: "I"
  }, {
    letter: /[\u0137]/g,
    alternative: "k"
  }, {
    letter: /[\u0136]/g,
    alternative: "K"
  }, {
    letter: /[\u013C]/g,
    alternative: "l"
  }, {
    letter: /[\u013B]/g,
    alternative: "L"
  }, {
    letter: /[\u0146]/g,
    alternative: "n"
  }, {
    letter: /[\u0145]/g,
    alternative: "N"
  }, {
    letter: /[\u0161]/g,
    alternative: "s"
  }, {
    letter: /[\u0160]/g,
    alternative: "S"
  }, {
    letter: /[\u016B]/g,
    alternative: "u"
  }, {
    letter: /[\u016A]/g,
    alternative: "U"
  }, {
    letter: /[\u017E]/g,
    alternative: "z"
  }, {
    letter: /[\u017D]/g,
    alternative: "Z"
  }],
  // Language: Icelandic.
  // Sources: https://en.wikipedia.org/wiki/Thorn_(letter),
  // https://en.wikipedia.org/wiki/Eth,  https://en.wikipedia.org/wiki/Icelandic_orthography
  is: [{
    letter: /[\u00E1]/g,
    alternative: "a"
  }, {
    letter: /[\u00C1]/g,
    alternative: "A"
  }, {
    letter: /[\u00F0]/g,
    alternative: "d"
  }, {
    letter: /[\u00D0]/g,
    alternative: "D"
  }, {
    letter: /[\u00E9]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9]/g,
    alternative: "E"
  }, {
    letter: /[\u00ED]/g,
    alternative: "i"
  }, {
    letter: /[\u00CD]/g,
    alternative: "I"
  }, {
    letter: /[\u00F3\u00F6]/g,
    alternative: "o"
  }, {
    letter: /[\u00D3\u00D6]/g,
    alternative: "O"
  }, {
    letter: /[\u00FA]/g,
    alternative: "u"
  }, {
    letter: /[\u00DA]/g,
    alternative: "U"
  }, {
    letter: /[\u00FD]/g,
    alternative: "y"
  }, {
    letter: /[\u00DD]/g,
    alternative: "Y"
  }, {
    letter: /[\u00FE]/g,
    alternative: "th"
  }, {
    letter: /[\u00DE]/g,
    alternative: "Th"
  }, {
    letter: /[\u00E6\u04D5]/g,
    alternative: "ae"
  }, {
    letter: /[\u00C6\u04D4]/g,
    alternative: "Ae"
  }],
  // Language: Faroese.
  // Source: https://www.facebook.com/groups/1557965757758234/permalink/1749847165236758/
  // (conversation in private Facebook Group ‘Faroese Language Learning Enthusiasts’)
  // Depending on the word, ð can be d, g, j, v, ng or nothing. However, ‘d’ is most frequent.
  // When writing text messages or using a foreign keyboard, í is sometimes written as ij, ý as yj, ú as uv, ó as ov, ø as oe, and á as aa or oa.
  // However, in website URLs the alternatives mentioned below are by far the most common.
  fa: [{
    letter: /[\u00E1]/g,
    alternative: "a"
  }, {
    letter: /[\u00C1]/g,
    alternative: "A"
  }, {
    letter: /[\u00F0]/g,
    alternative: "d"
  }, {
    letter: /[\u00D0]/g,
    alternative: "D"
  }, {
    letter: /[\u00ED]/g,
    alternative: "i"
  }, {
    letter: /[\u00CD]/g,
    alternative: "I"
  }, {
    letter: /[\u00FD]/g,
    alternative: "y"
  }, {
    letter: /[\u00DD]/g,
    alternative: "Y"
  }, {
    letter: /[\u00FA]/g,
    alternative: "u"
  }, {
    letter: /[\u00DA]/g,
    alternative: "U"
  }, {
    letter: /[\u00F3\u00F8]/g,
    alternative: "o"
  }, {
    letter: /[\u00D3\u00D8]/g,
    alternative: "O"
  }, {
    letter: /[\u00E6\u04D5]/g,
    alternative: "ae"
  }, {
    letter: /[\u00C6\u04D4]/g,
    alternative: "Ae"
  }],
  // Language: Czech.
  // Source: https://en.wikipedia.org/wiki/Czech_orthography
  cs: [{
    letter: /[\u00E1]/g,
    alternative: "a"
  }, {
    letter: /[\u00C1]/g,
    alternative: "A"
  }, {
    letter: /[\u010D]/g,
    alternative: "c"
  }, {
    letter: /[\u010C]/g,
    alternative: "C"
  }, {
    letter: /[\u010F]/g,
    alternative: "d"
  }, {
    letter: /[\u010E]/g,
    alternative: "D"
  }, {
    letter: /[\u00ED]/g,
    alternative: "i"
  }, {
    letter: /[\u00CD]/g,
    alternative: "I"
  }, {
    letter: /[\u0148]/g,
    alternative: "n"
  }, {
    letter: /[\u0147]/g,
    alternative: "N"
  }, {
    letter: /[\u00F3]/g,
    alternative: "o"
  }, {
    letter: /[\u00D3]/g,
    alternative: "O"
  }, {
    letter: /[\u0159]/g,
    alternative: "r"
  }, {
    letter: /[\u0158]/g,
    alternative: "R"
  }, {
    letter: /[\u0161]/g,
    alternative: "s"
  }, {
    letter: /[\u0160]/g,
    alternative: "S"
  }, {
    letter: /[\u0165]/g,
    alternative: "t"
  }, {
    letter: /[\u0164]/g,
    alternative: "T"
  }, {
    letter: /[\u00FD]/g,
    alternative: "y"
  }, {
    letter: /[\u00DD]/g,
    alternative: "Y"
  }, {
    letter: /[\u017E]/g,
    alternative: "z"
  }, {
    letter: /[\u017D]/g,
    alternative: "Z"
  }, {
    letter: /[\u00E9\u011B]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9\u011A]/g,
    alternative: "E"
  }, {
    letter: /[\u00FA\u016F]/g,
    alternative: "u"
  }, {
    letter: /[\u00DA\u016E]/g,
    alternative: "U"
  }],
  // Language: Russian.
  // Source:  Machine Readable Travel Documents, Doc 9303, Part 1, Volume 1 (PDF) (Sixth ed.).
  // ICAO. 2006. p. IV-50—IV-52. http://www.icao.int/publications/Documents/9303_p3_cons_en.pdf
  // ‘ь’ is the so-called soft sign, indicating a sound change (palatalization) of the preceding consonant.
  // In a text, it is transliterated to a character similar to an apostrophe: ′.
  // I recommend omittance in slugs. (https://en.wikipedia.org/wiki/Romanization_of_Russian)
  ru: [{
    letter: /[\u0430]/g,
    alternative: "a"
  }, {
    letter: /[\u0410]/g,
    alternative: "A"
  }, {
    letter: /[\u0431]/g,
    alternative: "b"
  }, {
    letter: /[\u0411]/g,
    alternative: "B"
  }, {
    letter: /[\u0432]/g,
    alternative: "v"
  }, {
    letter: /[\u0412]/g,
    alternative: "V"
  }, {
    letter: /[\u0433]/g,
    alternative: "g"
  }, {
    letter: /[\u0413]/g,
    alternative: "G"
  }, {
    letter: /[\u0434]/g,
    alternative: "d"
  }, {
    letter: /[\u0414]/g,
    alternative: "D"
  }, {
    letter: /[\u0435]/g,
    alternative: "e"
  }, {
    letter: /[\u0415]/g,
    alternative: "E"
  }, {
    letter: /[\u0436]/g,
    alternative: "zh"
  }, {
    letter: /[\u0416]/g,
    alternative: "Zh"
  }, {
    letter: /[\u0437]/g,
    alternative: "z"
  }, {
    letter: /[\u0417]/g,
    alternative: "Z"
  }, {
    letter: /[\u0456\u0438\u0439]/g,
    alternative: "i"
  }, {
    letter: /[\u0406\u0418\u0419]/g,
    alternative: "I"
  }, {
    letter: /[\u043A]/g,
    alternative: "k"
  }, {
    letter: /[\u041A]/g,
    alternative: "K"
  }, {
    letter: /[\u043B]/g,
    alternative: "l"
  }, {
    letter: /[\u041B]/g,
    alternative: "L"
  }, {
    letter: /[\u043C]/g,
    alternative: "m"
  }, {
    letter: /[\u041C]/g,
    alternative: "M"
  }, {
    letter: /[\u043D]/g,
    alternative: "n"
  }, {
    letter: /[\u041D]/g,
    alternative: "N"
  }, {
    letter: /[\u0440]/g,
    alternative: "r"
  }, {
    letter: /[\u0420]/g,
    alternative: "R"
  }, {
    letter: /[\u043E]/g,
    alternative: "o"
  }, {
    letter: /[\u041E]/g,
    alternative: "O"
  }, {
    letter: /[\u043F]/g,
    alternative: "p"
  }, {
    letter: /[\u041F]/g,
    alternative: "P"
  }, {
    letter: /[\u0441]/g,
    alternative: "s"
  }, {
    letter: /[\u0421]/g,
    alternative: "S"
  }, {
    letter: /[\u0442]/g,
    alternative: "t"
  }, {
    letter: /[\u0422]/g,
    alternative: "T"
  }, {
    letter: /[\u0443]/g,
    alternative: "u"
  }, {
    letter: /[\u0423]/g,
    alternative: "U"
  }, {
    letter: /[\u0444]/g,
    alternative: "f"
  }, {
    letter: /[\u0424]/g,
    alternative: "F"
  }, {
    letter: /[\u0445]/g,
    alternative: "kh"
  }, {
    letter: /[\u0425]/g,
    alternative: "Kh"
  }, {
    letter: /[\u0446]/g,
    alternative: "ts"
  }, {
    letter: /[\u0426]/g,
    alternative: "Ts"
  }, {
    letter: /[\u0447]/g,
    alternative: "ch"
  }, {
    letter: /[\u0427]/g,
    alternative: "Ch"
  }, {
    letter: /[\u0448]/g,
    alternative: "sh"
  }, {
    letter: /[\u0428]/g,
    alternative: "Sh"
  }, {
    letter: /[\u0449]/g,
    alternative: "shch"
  }, {
    letter: /[\u0429]/g,
    alternative: "Shch"
  }, {
    letter: /[\u044A]/g,
    alternative: "ie"
  }, {
    letter: /[\u042A]/g,
    alternative: "Ie"
  }, {
    letter: /[\u044B]/g,
    alternative: "y"
  }, {
    letter: /[\u042B]/g,
    alternative: "Y"
  }, {
    letter: /[\u044C]/g,
    alternative: ""
  }, {
    letter: /[\u042C]/g,
    alternative: ""
  }, {
    letter: /[\u0451\u044D]/g,
    alternative: "e"
  }, {
    letter: /[\u0401\u042D]/g,
    alternative: "E"
  }, {
    letter: /[\u044E]/g,
    alternative: "iu"
  }, {
    letter: /[\u042E]/g,
    alternative: "Iu"
  }, {
    letter: /[\u044F]/g,
    alternative: "ia"
  }, {
    letter: /[\u042F]/g,
    alternative: "Ia"
  }],
  // Language: Esperanto.
  // Source: https://en.wikipedia.org/wiki/Esperanto#Writing_diacritics
  eo: [{
    letter: /[\u0109]/g,
    alternative: "ch"
  }, {
    letter: /[\u0108]/g,
    alternative: "Ch"
  }, {
    letter: /[\u011d]/g,
    alternative: "gh"
  }, {
    letter: /[\u011c]/g,
    alternative: "Gh"
  }, {
    letter: /[\u0125]/g,
    alternative: "hx"
  }, {
    letter: /[\u0124]/g,
    alternative: "Hx"
  }, {
    letter: /[\u0135]/g,
    alternative: "jx"
  }, {
    letter: /[\u0134]/g,
    alternative: "Jx"
  }, {
    letter: /[\u015d]/g,
    alternative: "sx"
  }, {
    letter: /[\u015c]/g,
    alternative: "Sx"
  }, {
    letter: /[\u016d]/g,
    alternative: "ux"
  }, {
    letter: /[\u016c]/g,
    alternative: "Ux"
  }],
  // Language: Afrikaans.
  // Source: https://en.wikipedia.org/wiki/Afrikaans#Orthography
  af: [{
    letter: /[\u00E8\u00EA\u00EB]/g,
    alternative: "e"
  }, {
    letter: /[\u00CB\u00C8\u00CA]/g,
    alternative: "E"
  }, {
    letter: /[\u00EE\u00EF]/g,
    alternative: "i"
  }, {
    letter: /[\u00CE\u00CF]/g,
    alternative: "I"
  }, {
    letter: /[\u00F4\u00F6]/g,
    alternative: "o"
  }, {
    letter: /[\u00D4\u00D6]/g,
    alternative: "O"
  }, {
    letter: /[\u00FB\u00FC]/g,
    alternative: "u"
  }, {
    letter: /[\u00DB\u00DC]/g,
    alternative: "U"
  }],
  // Language: Catalan.
  // Source: https://en.wikipedia.org/wiki/Catalan_orthography
  ca: [{
    letter: /[\u00E0]/g,
    alternative: "a"
  }, {
    letter: /[\u00C0]/g,
    alternative: "A"
  }, {
    letter: /[\u00E9|\u00E8]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9|\u00C8]/g,
    alternative: "E"
  }, {
    letter: /[\u00ED|\u00EF]/g,
    alternative: "i"
  }, {
    letter: /[\u00CD|\u00CF]/g,
    alternative: "I"
  }, {
    letter: /[\u00F3|\u00F2]/g,
    alternative: "o"
  }, {
    letter: /[\u00D3|\u00D2]/g,
    alternative: "O"
  }, {
    letter: /[\u00FA|\u00FC]/g,
    alternative: "u"
  }, {
    letter: /[\u00DA|\u00DC]/g,
    alternative: "U"
  }, {
    letter: /[\u00E7]/g,
    alternative: "c"
  }, {
    letter: /[\u00C7]/g,
    alternative: "C"
  }],
  // Language: Asturian.
  // Source: http://www.orbilat.com/Languages/Asturian/Grammar/Asturian-Alphabet.html
  ast: [{
    letter: /[\u00F1]/g,
    alternative: "n"
  }, {
    letter: /[\u00D1]/g,
    alternative: "N"
  }],
  // Language: Aragonese.
  // Source: https://en.wikipedia.org/wiki/Aragonese_language#Orthography
  an: [{
    letter: /[\u00FC]/g,
    alternative: "u"
  }, {
    letter: /[\u00F1]/g,
    alternative: "ny"
  }, {
    letter: /[\u00E7]/g,
    alternative: "c"
  }, {
    letter: /[\u00ED]/g,
    alternative: "i"
  }, {
    letter: /[\u00F3]/g,
    alternative: "o"
  }, {
    letter: /[\u00E1]/g,
    alternative: "a"
  }, {
    letter: /[\u00DC]/g,
    alternative: "U"
  }, {
    letter: /[\u00D1]/g,
    alternative: "Ny"
  }, {
    letter: /[\u00C7]/g,
    alternative: "C"
  }, {
    letter: /[\u00CD]/g,
    alternative: "I"
  }, {
    letter: /[\u00D3]/g,
    alternative: "O"
  }, {
    letter: /[\u00C1]/g,
    alternative: "A"
  }],
  // Language: Aymara.
  // Source: http://www.omniglot.com/writing/aymara.htm
  ay: [{
    letter: /(([\u00EF])|([\u00ED]))/g,
    alternative: "i"
  }, {
    letter: /(([\u00CF])|([\u00CD]))/g,
    alternative: "I"
  }, {
    letter: /[\u00E4]/g,
    alternative: "a"
  }, {
    letter: /[\u00C4]/g,
    alternative: "A"
  }, {
    letter: /[\u00FC]/g,
    alternative: "u"
  }, {
    letter: /[\u00DC]/g,
    alternative: "U"
  }, {
    letter: /[\u0027]/g,
    alternative: ""
  }, {
    letter: /[\u00F1]/g,
    alternative: "n"
  }, {
    letter: /[\u00D1]/g,
    alternative: "N"
  }],
  // Language: English.
  // Sources: https://en.wikipedia.org/wiki/English_terms_with_diacritical_marks https://en.wikipedia.org/wiki/English_orthography
  en: [{
    letter: /[\u00E6\u04D5]/g,
    alternative: "ae"
  }, {
    letter: /[\u00C6\u04D4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u0153]/g,
    alternative: "oe"
  }, {
    letter: /[\u0152]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00EB\u00E9]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9\u00CB]/g,
    alternative: "E"
  }, {
    letter: /[\u00F4\u00F6]/g,
    alternative: "o"
  }, {
    letter: /[\u00D4\u00D6]/g,
    alternative: "O"
  }, {
    letter: /[\u00EF]/g,
    alternative: "i"
  }, {
    letter: /[\u00CF]/g,
    alternative: "I"
  }, {
    letter: /[\u00E7]/g,
    alternative: "c"
  }, {
    letter: /[\u00C7]/g,
    alternative: "C"
  }, {
    letter: /[\u00F1]/g,
    alternative: "n"
  }, {
    letter: /[\u00D1]/g,
    alternative: "N"
  }, {
    letter: /[\u00FC]/g,
    alternative: "u"
  }, {
    letter: /[\u00DC]/g,
    alternative: "U"
  }, {
    letter: /[\u00E4]/g,
    alternative: "a"
  }, {
    letter: /[\u00C4]/g,
    alternative: "A"
  }],
  // Language: French.
  // Sources: https://en.wikipedia.org/wiki/French_orthography#Ligatures https://en.wikipedia.org/wiki/French_orthography#Diacritics
  fr: [{
    letter: /[\u00E6\u04D5]/g,
    alternative: "ae"
  }, {
    letter: /[\u00C6\u04D4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u0153]/g,
    alternative: "oe"
  }, {
    letter: /[\u0152]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00E9\u00E8\u00EB\u00EA]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9\u00C8\u00CB\u00CA]/g,
    alternative: "E"
  }, {
    letter: /[\u00E0\u00E2]/g,
    alternative: "a"
  }, {
    letter: /[\u00C0\u00C2]/g,
    alternative: "A"
  }, {
    letter: /[\u00EF\u00EE]/g,
    alternative: "i"
  }, {
    letter: /[\u00CF\u00CE]/g,
    alternative: "I"
  }, {
    letter: /[\u00F9\u00FB\u00FC]/g,
    alternative: "u"
  }, {
    letter: /[\u00D9\u00DB\u00DC]/g,
    alternative: "U"
  }, {
    letter: /[\u00F4]/g,
    alternative: "o"
  }, {
    letter: /[\u00D4]/g,
    alternative: "O"
  }, {
    letter: /[\u00FF]/g,
    alternative: "y"
  }, {
    letter: /[\u0178]/g,
    alternative: "Y"
  }, {
    letter: /[\u00E7]/g,
    alternative: "c"
  }, {
    letter: /[\u00C7]/g,
    alternative: "C"
  }, {
    letter: /[\u00F1]/g,
    alternative: "n"
  }, {
    letter: /[\u00D1]/g,
    alternative: "N"
  }],
  // Language: Italian.
  // Source: https://en.wikipedia.org/wiki/Italian_orthography
  it: [{
    letter: /[\u00E0]/g,
    alternative: "a"
  }, {
    letter: /[\u00C0]/g,
    alternative: "A"
  }, {
    letter: /[\u00E9\u00E8]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9\u00C8]/g,
    alternative: "E"
  }, {
    letter: /[\u00EC\u00ED\u00EE]/g,
    alternative: "i"
  }, {
    letter: /[\u00CC\u00CD\u00CE]/g,
    alternative: "I"
  }, {
    letter: /[\u00F3\u00F2]/g,
    alternative: "o"
  }, {
    letter: /[\u00D3\u00D2]/g,
    alternative: "O"
  }, {
    letter: /[\u00F9\u00FA]/g,
    alternative: "u"
  }, {
    letter: /[\u00D9\u00DA]/g,
    alternative: "U"
  }],
  // Language: Dutch.
  // Sources: https://en.wikipedia.org/wiki/Dutch_orthography https://nl.wikipedia.org/wiki/Trema_in_de_Nederlandse_spelling
  nl: [{
    letter: /[\u00E7]/g,
    alternative: "c"
  }, {
    letter: /[\u00C7]/g,
    alternative: "C"
  }, {
    letter: /[\u00F1]/g,
    alternative: "n"
  }, {
    letter: /[\u00D1]/g,
    alternative: "N"
  }, {
    letter: /[\u00E9\u00E8\u00EA\u00EB]/g,
    alternative: "e"
  }, {
    letter: /[\u00C9\u00C8\u00CA\u00CB]/g,
    alternative: "E"
  }, {
    letter: /[\u00F4\u00F6]/g,
    alternative: "o"
  }, {
    letter: /[\u00D4\u00D6]/g,
    alternative: "O"
  }, {
    letter: /[\u00EF]/g,
    alternative: "i"
  }, {
    letter: /[\u00CF]/g,
    alternative: "I"
  }, {
    letter: /[\u00FC]/g,
    alternative: "u"
  }, {
    letter: /[\u00DC]/g,
    alternative: "U"
  }, {
    letter: /[\u00E4]/g,
    alternative: "a"
  }, {
    letter: /[\u00C4]/g,
    alternative: "A"
  }],
  // Language: Bambara.
  // Sources: http://www.omniglot.com/writing/bambara.htm https://en.wikipedia.org/wiki/Bambara_language
  bm: [{
    letter: /[\u025B]/g,
    alternative: "e"
  }, {
    letter: /[\u0190]/g,
    alternative: "E"
  }, {
    letter: /[\u0272]/g,
    alternative: "ny"
  }, {
    letter: /[\u019D]/g,
    alternative: "Ny"
  }, {
    letter: /[\u014B]/g,
    alternative: "ng"
  }, {
    letter: /[\u014A]/g,
    alternative: "Ng"
  }, {
    letter: /[\u0254]/g,
    alternative: "o"
  }, {
    letter: /[\u0186]/g,
    alternative: "O"
  }],
  // Language: Ukrainian.
  // Source: Resolution no. 55 of the Cabinet of Ministers of Ukraine, January 27, 2010 http://zakon2.rada.gov.ua/laws/show/55-2010-%D0%BF
  // ‘ь’ is the so-called soft sign, indicating a sound change (palatalization) of the preceding consonant. In a text, it is sometimes transliterated
  // To a character similar to an apostrophe: ′. Omittance is recommended in slugs (https://en.wikipedia.org/wiki/Romanization_of_Ukrainian).
  uk: [{
    letter: /[\u0431]/g,
    alternative: "b"
  }, {
    letter: /[\u0411]/g,
    alternative: "B"
  }, {
    letter: /[\u0432]/g,
    alternative: "v"
  }, {
    letter: /[\u0412]/g,
    alternative: "V"
  }, {
    letter: /[\u0433]/g,
    alternative: "h"
  }, {
    letter: /[\u0413]/g,
    alternative: "H"
  }, {
    letter: /[\u0491]/g,
    alternative: "g"
  }, {
    letter: /[\u0490]/g,
    alternative: "G"
  }, {
    letter: /[\u0434]/g,
    alternative: "d"
  }, {
    letter: /[\u0414]/g,
    alternative: "D"
  }, {
    letter: /[\u043A]/g,
    alternative: "k"
  }, {
    letter: /[\u041A]/g,
    alternative: "K"
  }, {
    letter: /[\u043B]/g,
    alternative: "l"
  }, {
    letter: /[\u041B]/g,
    alternative: "L"
  }, {
    letter: /[\u043C]/g,
    alternative: "m"
  }, {
    letter: /[\u041C]/g,
    alternative: "M"
  }, {
    letter: /[\u0070]/g,
    alternative: "r"
  }, {
    letter: /[\u0050]/g,
    alternative: "R"
  }, {
    letter: /[\u043F]/g,
    alternative: "p"
  }, {
    letter: /[\u041F]/g,
    alternative: "P"
  }, {
    letter: /[\u0441]/g,
    alternative: "s"
  }, {
    letter: /[\u0421]/g,
    alternative: "S"
  }, {
    letter: /[\u0442]/g,
    alternative: "t"
  }, {
    letter: /[\u0422]/g,
    alternative: "T"
  }, {
    letter: /[\u0443]/g,
    alternative: "u"
  }, {
    letter: /[\u0423]/g,
    alternative: "U"
  }, {
    letter: /[\u0444]/g,
    alternative: "f"
  }, {
    letter: /[\u0424]/g,
    alternative: "F"
  }, {
    letter: /[\u0445]/g,
    alternative: "kh"
  }, {
    letter: /[\u0425]/g,
    alternative: "Kh"
  }, {
    letter: /[\u0446]/g,
    alternative: "ts"
  }, {
    letter: /[\u0426]/g,
    alternative: "Ts"
  }, {
    letter: /[\u0447]/g,
    alternative: "ch"
  }, {
    letter: /[\u0427]/g,
    alternative: "Ch"
  }, {
    letter: /[\u0448]/g,
    alternative: "sh"
  }, {
    letter: /[\u0428]/g,
    alternative: "Sh"
  }, {
    letter: /[\u0449]/g,
    alternative: "shch"
  }, {
    letter: /[\u0429]/g,
    alternative: "Shch"
  }, {
    letter: /[\u044C\u042C]/g,
    alternative: ""
  }, {
    letter: /[\u0436]/g,
    alternative: "zh"
  }, {
    letter: /[\u0416]/g,
    alternative: "Zh"
  }, {
    letter: /[\u0437]/g,
    alternative: "z"
  }, {
    letter: /[\u0417]/g,
    alternative: "Z"
  }, {
    letter: /[\u0438]/g,
    alternative: "y"
  }, {
    letter: /[\u0418]/g,
    alternative: "Y"
  }, {
    letter: /^[\u0454]/g,
    alternative: "ye"
  }, {
    letter: /[\s][\u0454]/g,
    alternative: " ye"
  }, {
    letter: /[\u0454]/g,
    alternative: "ie"
  }, {
    letter: /^[\u0404]/g,
    alternative: "Ye"
  }, {
    letter: /[\s][\u0404]/g,
    alternative: " Ye"
  }, {
    letter: /[\u0404]/g,
    alternative: "IE"
  }, {
    letter: /^[\u0457]/g,
    alternative: "yi"
  }, {
    letter: /[\s][\u0457]/g,
    alternative: " yi"
  }, {
    letter: /[\u0457]/g,
    alternative: "i"
  }, {
    letter: /^[\u0407]/g,
    alternative: "Yi"
  }, {
    letter: /[\s][\u0407]/g,
    alternative: " Yi"
  }, {
    letter: /[\u0407]/g,
    alternative: "I"
  }, {
    letter: /^[\u0439]/g,
    alternative: "y"
  }, {
    letter: /[\s][\u0439]/g,
    alternative: " y"
  }, {
    letter: /[\u0439]/g,
    alternative: "i"
  }, {
    letter: /^[\u0419]/g,
    alternative: "Y"
  }, {
    letter: /[\s][\u0419]/g,
    alternative: " Y"
  }, {
    letter: /[\u0419]/g,
    alternative: "I"
  }, {
    letter: /^[\u044E]/g,
    alternative: "yu"
  }, {
    letter: /[\s][\u044E]/g,
    alternative: " yu"
  }, {
    letter: /[\u044E]/g,
    alternative: "iu"
  }, {
    letter: /^[\u042E]/g,
    alternative: "Yu"
  }, {
    letter: /[\s][\u042E]/g,
    alternative: " Yu"
  }, {
    letter: /[\u042E]/g,
    alternative: "IU"
  }, {
    letter: /^[\u044F]/g,
    alternative: "ya"
  }, {
    letter: /[\s][\u044F]/g,
    alternative: " ya"
  }, {
    letter: /[\u044F]/g,
    alternative: "ia"
  }, {
    letter: /^[\u042F]/g,
    alternative: "Ya"
  }, {
    letter: /[\s][\u042F]/g,
    alternative: " Ya"
  }, {
    letter: /[\u042F]/g,
    alternative: "IA"
  }],
  // Language: Breton
  // Source: http://www.omniglot.com/writing/breton.htm
  br: [{
    letter: /\u0063\u0027\u0068/g,
    alternative: "ch"
  }, {
    letter: /\u0043\u0027\u0048/g,
    alternative: "CH"
  }, {
    letter: /[\u00e2]/g,
    alternative: "a"
  }, {
    letter: /[\u00c2]/g,
    alternative: "A"
  }, {
    letter: /[\u00ea]/g,
    alternative: "e"
  }, {
    letter: /[\u00ca]/g,
    alternative: "E"
  }, {
    letter: /[\u00ee]/g,
    alternative: "i"
  }, {
    letter: /[\u00ce]/g,
    alternative: "I"
  }, {
    letter: /[\u00f4]/g,
    alternative: "o"
  }, {
    letter: /[\u00d4]/g,
    alternative: "O"
  }, {
    letter: /[\u00fb\u00f9\u00fc]/g,
    alternative: "u"
  }, {
    letter: /[\u00db\u00d9\u00dc]/g,
    alternative: "U"
  }, {
    letter: /[\u00f1]/g,
    alternative: "n"
  }, {
    letter: /[\u00d1]/g,
    alternative: "N"
  }],
  // Language: Chamorro
  // Source: http://www.omniglot.com/writing/chamorro.htm
  ch: [{
    letter: /[\u0027]/g,
    alternative: ""
  }, {
    letter: /[\u00e5]/g,
    alternative: "a"
  }, {
    letter: /[\u00c5]/g,
    alternative: "A"
  }, {
    letter: /[\u00f1]/g,
    alternative: "n"
  }, {
    letter: /[\u00d1]/g,
    alternative: "N"
  }],
  // Language: Corsican
  // Sources: http://www.omniglot.com/writing/corsican.htm https://en.wikipedia.org/wiki/Corsican_alphabet
  co: [{
    letter: /[\u00e2\u00e0]/g,
    alternative: "a"
  }, {
    letter: /[\u00c2\u00c0]/g,
    alternative: "A"
  }, {
    letter: /[\u00e6\u04d5]/g,
    alternative: "ae"
  }, {
    letter: /[\u00c6\u04d4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /[\u00e9\u00ea\u00e8\u00eb]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9\u00ca\u00c8\u00cb]/g,
    alternative: "E"
  }, {
    letter: /[\u00ec\u00ee\u00ef]/g,
    alternative: "i"
  }, {
    letter: /[\u00cc\u00ce\u00cf]/g,
    alternative: "I"
  }, {
    letter: /[\u00f1]/g,
    alternative: "n"
  }, {
    letter: /[\u00d1]/g,
    alternative: "N"
  }, {
    letter: /[\u00f4\u00f2]/g,
    alternative: "o"
  }, {
    letter: /[\u00d4\u00d2]/g,
    alternative: "O"
  }, {
    letter: /[\u0153]/g,
    alternative: "oe"
  }, {
    letter: /[\u0152]]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00f9\u00fc]/g,
    alternative: "u"
  }, {
    letter: /[\u00d9\u00dc]/g,
    alternative: "U"
  }, {
    letter: /[\u00ff]/g,
    alternative: "y"
  }, {
    letter: /[\u0178]/g,
    alternative: "Y"
  }],
  // Language: Kashubian
  // Sources: http://www.omniglot.com/writing/kashubian.htm https://en.wikipedia.org/wiki/Kashubian_language
  csb: [{
    letter: /[\u0105\u00e3]/g,
    alternative: "a"
  }, {
    letter: /[\u0104\u00c3]/g,
    alternative: "A"
  }, {
    letter: /[\u00e9\u00eb]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9\u00cb]/g,
    alternative: "E"
  }, {
    letter: /[\u0142]/g,
    alternative: "l"
  }, {
    letter: /[\u0141]/g,
    alternative: "L"
  }, {
    letter: /[\u0144]/g,
    alternative: "n"
  }, {
    letter: /[\u0143]/g,
    alternative: "N"
  }, {
    letter: /[\u00f2\u00f3\u00f4]/g,
    alternative: "o"
  }, {
    letter: /[\u00d2\u00d3\u00d4]/g,
    alternative: "O"
  }, {
    letter: /[\u00f9]/g,
    alternative: "u"
  }, {
    letter: /[\u00d9]/g,
    alternative: "U"
  }, {
    letter: /[\u017c]/g,
    alternative: "z"
  }, {
    letter: /[\u017b]/g,
    alternative: "Z"
  }],
  // Language: Welsh
  // Sources: http://www.omniglot.com/writing/welsh.htm https://en.wikipedia.org/wiki/Welsh_orthography#Diacritics
  cy: [{
    letter: /[\u00e2]/g,
    alternative: "a"
  }, {
    letter: /[\u00c2]/g,
    alternative: "A"
  }, {
    letter: /[\u00ea]/g,
    alternative: "e"
  }, {
    letter: /[\u00ca]/g,
    alternative: "E"
  }, {
    letter: /[\u00ee]/g,
    alternative: "i"
  }, {
    letter: /[\u00ce]/g,
    alternative: "I"
  }, {
    letter: /[\u00f4]/g,
    alternative: "o"
  }, {
    letter: /[\u00d4]/g,
    alternative: "O"
  }, {
    letter: /[\u00fb]/g,
    alternative: "u"
  }, {
    letter: /[\u00db]/g,
    alternative: "U"
  }, {
    letter: /[\u0175]/g,
    alternative: "w"
  }, {
    letter: /[\u0174]/g,
    alternative: "W"
  }, {
    letter: /[\u0177]/g,
    alternative: "y"
  }, {
    letter: /[\u0176]/g,
    alternative: "Y"
  }],
  // Language: Ewe
  // Sources: http://www.omniglot.com/writing/ewe.htm https://en.wikipedia.org/wiki/Ewe_language#Writing_system
  ee: [{
    letter: /[\u0256]/g,
    alternative: "d"
  }, {
    letter: /[\u0189]/g,
    alternative: "D"
  }, {
    letter: /[\u025b]/g,
    alternative: "e"
  }, {
    letter: /[\u0190]/g,
    alternative: "E"
  }, {
    letter: /[\u0192]/g,
    alternative: "f"
  }, {
    letter: /[\u0191]/g,
    alternative: "F"
  }, {
    letter: /[\u0263]/g,
    alternative: "g"
  }, {
    letter: /[\u0194]/g,
    alternative: "G"
  }, {
    letter: /[\u014b]/g,
    alternative: "ng"
  }, {
    letter: /[\u014a]/g,
    alternative: "Ng"
  }, {
    letter: /[\u0254]/g,
    alternative: "o"
  }, {
    letter: /[\u0186]/g,
    alternative: "O"
  }, {
    letter: /[\u028b]/g,
    alternative: "w"
  }, {
    letter: /[\u01b2]/g,
    alternative: "W"
  }, {
    letter: /\u0061\u0303/g,
    alternative: "a"
  }, {
    letter: /[\u00e1\u00e0\u01ce\u00e2\u00e3]/g,
    alternative: "a"
  }, {
    letter: /\u0041\u0303/g,
    alternative: "A"
  }, {
    letter: /[\u00c1\u00c0\u01cd\u00c2\u00c3]/g,
    alternative: "A"
  }, {
    letter: /[\u00e9\u00e8\u011b\u00ea]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9\u00c8\u011a\u00ca]/g,
    alternative: "E"
  }, {
    letter: /[\u00f3\u00f2\u01d2\u00f4]/g,
    alternative: "o"
  }, {
    letter: /[\u00d3\u00d2\u01d1\u00d4]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa\u00f9\u01d4\u00fb]/g,
    alternative: "u"
  }, {
    letter: /[\u00da\u00d9\u01d3\u00db]/g,
    alternative: "U"
  }, {
    letter: /[\u00ed\u00ec\u01d0\u00ee]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd\u00cc\u01cf\u00ce]/g,
    alternative: "I"
  }],
  // Language: Estonian
  // Sources: http://www.omniglot.com/writing/estonian.htm https://en.wikipedia.org/wiki/Estonian_orthography
  // https://en.wikipedia.org/wiki/%C5%BD https://en.wikipedia.org/wiki/%C5%A0
  et: [{
    letter: /[\u0161]/g,
    alternative: "sh"
  }, {
    letter: /[\u0160]/g,
    alternative: "Sh"
  }, {
    letter: /[\u017e]/g,
    alternative: "zh"
  }, {
    letter: /[\u017d]/g,
    alternative: "Zh"
  }, {
    letter: /[\u00f5\u00f6]/g,
    alternative: "o"
  }, {
    letter: /[\u00d6\u00d5]/g,
    alternative: "O"
  }, {
    letter: /[\u00e4]/g,
    alternative: "a"
  }, {
    letter: /[\u00c4]/g,
    alternative: "A"
  }, {
    letter: /[\u00fc]/g,
    alternative: "u"
  }, {
    letter: /[\u00dc]/g,
    alternative: "U"
  }],
  // Language: Basque
  // Sources: http://www.omniglot.com/writing/basque.htm https://en.wikipedia.org/wiki/Basque_language#Writing_system
  // https://en.wikipedia.org/wiki/Basque_alphabet
  eu: [{
    letter: /[\u00f1]/g,
    alternative: "n"
  }, {
    letter: /[\u00d1]/g,
    alternative: "N"
  }, {
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /[\u00fc]/g,
    alternative: "u"
  }, {
    letter: /[\u00dc]/g,
    alternative: "U"
  }],
  // Language: Fulah
  // Sources: http://www.omniglot.com/writing/fula.htm https://en.wikipedia.org/wiki/Fula_language#Writing_systems
  fuc: [{
    letter: /[\u0253]/g,
    alternative: "b"
  }, {
    letter: /[\u0181]/g,
    alternative: "B"
  }, {
    letter: /[\u0257]/g,
    alternative: "d"
  }, {
    letter: /[\u018a]/g,
    alternative: "D"
  }, {
    letter: /[\u014b]/g,
    alternative: "ng"
  }, {
    letter: /[\u014a]/g,
    alternative: "Ng"
  }, {
    letter: /[\u0272\u00f1]/g,
    alternative: "ny"
  }, {
    letter: /[\u019d\u00d1]/g,
    alternative: "Ny"
  }, {
    letter: /[\u01b4]/g,
    alternative: "y"
  }, {
    letter: /[\u01b3]/g,
    alternative: "Y"
  }, {
    letter: /[\u0260]/g,
    alternative: "g"
  }, {
    letter: /[\u0193]/g,
    alternative: "G"
  }],
  // Language: Fijian
  // Source: http://www.omniglot.com/writing/fijian.htm
  fj: [{
    letter: /[\u0101]/g,
    alternative: "a"
  }, {
    letter: /[\u0100]/g,
    alternative: "A"
  }, {
    letter: /[\u0113]/g,
    alternative: "e"
  }, {
    letter: /[\u0112]/g,
    alternative: "E"
  }, {
    letter: /[\u012b]/g,
    alternative: "i"
  }, {
    letter: /[\u012a]/g,
    alternative: "I"
  }, {
    letter: /[\u016b]/g,
    alternative: "u"
  }, {
    letter: /[\u016a]/g,
    alternative: "U"
  }, {
    letter: /[\u014d]/g,
    alternative: "o"
  }, {
    letter: /[\u014c]/g,
    alternative: "O"
  }],
  // Language: Arpitan (Franco-Provençal language)
  // Source: http://www.omniglot.com/writing/francoprovencal.htm
  frp: [{
    letter: /[\u00e2]/g,
    alternative: "a"
  }, {
    letter: /[\u00c2]/g,
    alternative: "A"
  }, {
    letter: /[\u00ea\u00e8\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u00ca\u00c8\u00c9]/g,
    alternative: "E"
  }, {
    letter: /[\u00ee]/g,
    alternative: "i"
  }, {
    letter: /[\u00ce]/g,
    alternative: "I"
  }, {
    letter: /[\u00fb\u00fc]/g,
    alternative: "u"
  }, {
    letter: /[\u00db\u00dc]/g,
    alternative: "U"
  }, {
    letter: /[\u00f4]/g,
    alternative: "o"
  }, {
    letter: /[\u00d4]/g,
    alternative: "O"
  }],
  // Language: Friulian
  // Sources: https://en.wikipedia.org/wiki/Friulian_language https://en.wikipedia.org/wiki/Faggin-Nazzi_alphabet
  // http://www.omniglot.com/writing/friulian.htm
  fur: [{
    letter: /[\u00E7]/g,
    alternative: "c"
  }, {
    letter: /[\u00C7]/g,
    alternative: "C"
  }, {
    letter: /[\u00e0\u00e2]/g,
    alternative: "a"
  }, {
    letter: /[\u00c0\u00c2]/g,
    alternative: "A"
  }, {
    letter: /[\u00e8\u00ea]/g,
    alternative: "e"
  }, {
    letter: /[\u00c8\u00ca]/g,
    alternative: "E"
  }, {
    letter: /[\u00ec\u00ee]/g,
    alternative: "i"
  }, {
    letter: /[\u00cc\u00ce]/g,
    alternative: "I"
  }, {
    letter: /[\u00f2\u00f4]/g,
    alternative: "o"
  }, {
    letter: /[\u00d2\u00d4]/g,
    alternative: "O"
  }, {
    letter: /[\u00f9\u00fb]/g,
    alternative: "u"
  }, {
    letter: /[\u00d9\u00db]/g,
    alternative: "U"
  }, {
    letter: /[\u010d]/g,
    alternative: "c"
  }, {
    letter: /[\u010c]/g,
    alternative: "C"
  }, {
    letter: /[\u011f]/g,
    alternative: "g"
  }, {
    letter: /[\u011e]/g,
    alternative: "G"
  }, {
    letter: /[\u0161]/g,
    alternative: "s"
  }, {
    letter: /[\u0160]/g,
    alternative: "S"
  }],
  // Language: Frisian
  // Sources: https://en.wikipedia.org/wiki/West_Frisian_alphabet http://www.omniglot.com/writing/frisian.htm
  fy: [{
    letter: /[\u00e2\u0101\u00e4\u00e5]/g,
    alternative: "a"
  }, {
    letter: /[\u00c2\u0100\u00c4\u00c5]/g,
    alternative: "A"
  }, {
    letter: /[\u00ea\u00e9\u0113]/g,
    alternative: "e"
  }, {
    letter: /[\u00ca\u00c9\u0112]/g,
    alternative: "E"
  }, {
    letter: /[\u00f4\u00f6]/g,
    alternative: "o"
  }, {
    letter: /[\u00d4\u00d6]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa\u00fb\u00fc]/g,
    alternative: "u"
  }, {
    letter: /[\u00da\u00db\u00dc]/g,
    alternative: "U"
  }, {
    letter: /[\u00ed]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd]/g,
    alternative: "I"
  }, {
    letter: /[\u0111\u00f0]/g,
    alternative: "d"
  }, {
    letter: /[\u0110\u00d0]/g,
    alternative: "D"
  }],
  // Language: Irish
  // Source: https://en.wikipedia.org/wiki/Irish_orthography
  ga: [{
    letter: /[\u00e1]/g,
    alternative: "a"
  }, {
    letter: /[\u00c1]/g,
    alternative: "A"
  }, {
    letter: /[\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9]/g,
    alternative: "E"
  }, {
    letter: /[\u00f3]/g,
    alternative: "o"
  }, {
    letter: /[\u00d3]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa]/g,
    alternative: "u"
  }, {
    letter: /[\u00da]/g,
    alternative: "U"
  }, {
    letter: /[\u00ed]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd]/g,
    alternative: "I"
  }],
  // Language: Scottish Gaelic
  // Sources: https://en.wikipedia.org/wiki/Scottish_Gaelic_orthography http://www.omniglot.com/writing/gaelic.htm
  gd: [{
    letter: /[\u00e0]/g,
    alternative: "a"
  }, {
    letter: /[\u00c0]/g,
    alternative: "A"
  }, {
    letter: /[\u00e8]/g,
    alternative: "e"
  }, {
    letter: /[\u00c8]/g,
    alternative: "E"
  }, {
    letter: /[\u00f2]/g,
    alternative: "o"
  }, {
    letter: /[\u00d2]/g,
    alternative: "O"
  }, {
    letter: /[\u00f9]/g,
    alternative: "u"
  }, {
    letter: /[\u00d9]/g,
    alternative: "U"
  }, {
    letter: /[\u00ec]/g,
    alternative: "i"
  }, {
    letter: /[\u00cc]/g,
    alternative: "I"
  }],
  // Language: Galician
  // Sources: https://en.wikipedia.org/wiki/Diacritic https://en.wikipedia.org/wiki/Galician_Alphabet
  gl: [{
    letter: /[\u00e1\u00e0]/g,
    alternative: "a"
  }, {
    letter: /[\u00c1\u00c0]/g,
    alternative: "A"
  }, {
    letter: /[\u00e9\u00ea]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9\u00ca]/g,
    alternative: "E"
  }, {
    letter: /[\u00ed\u00ef]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd\u00cf]/g,
    alternative: "I"
  }, {
    letter: /[\u00f3]/g,
    alternative: "o"
  }, {
    letter: /[\u00d3]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa\u00fc]/g,
    alternative: "u"
  }, {
    letter: /[\u00da\u00dc]/g,
    alternative: "U"
  }, {
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /[\u00f1]/g,
    alternative: "n"
  }, {
    letter: /[\u00d1]/g,
    alternative: "N"
  }],
  // Language: Guarani
  // Sources: https://en.wikipedia.org/wiki/Guarani_alphabet http://www.omniglot.com/writing/guarani.htm
  gn: [{
    letter: /[\u2019]/g,
    alternative: ""
  }, {
    letter: /\u0067\u0303/g,
    alternative: "g"
  }, {
    letter: /\u0047\u0303/g,
    alternative: "G"
  }, {
    letter: /[\u00e3]/g,
    alternative: "a"
  }, {
    letter: /[\u00c3]/g,
    alternative: "A"
  }, {
    letter: /[\u1ebd]/g,
    alternative: "e"
  }, {
    letter: /[\u1ebc]/g,
    alternative: "E"
  }, {
    letter: /[\u0129]/g,
    alternative: "i"
  }, {
    letter: /[\u0128]/g,
    alternative: "I"
  }, {
    letter: /[\u00f5]/g,
    alternative: "o"
  }, {
    letter: /[\u00d5]/g,
    alternative: "O"
  }, {
    letter: /[\u00f1]/g,
    alternative: "n"
  }, {
    letter: /[\u00d1]/g,
    alternative: "N"
  }, {
    letter: /[\u0169]/g,
    alternative: "u"
  }, {
    letter: /[\u0168]/g,
    alternative: "U"
  }, {
    letter: /[\u1ef9]/g,
    alternative: "y"
  }, {
    letter: /[\u1ef8]/g,
    alternative: "Y"
  }],
  // Language: Swiss German
  // Source: http://www.omniglot.com/writing/swissgerman.htm
  gsw: [{
    letter: /[\u00e4]/g,
    alternative: "a"
  }, {
    letter: /[\u00c4]/g,
    alternative: "A"
  }, {
    letter: /[\u00f6]/g,
    alternative: "o"
  }, {
    letter: /[\u00d6]/g,
    alternative: "O"
  }, {
    letter: /[\u00fc]/g,
    alternative: "u"
  }, {
    letter: /[\u00dc]/g,
    alternative: "U"
  }],
  // Language: Haitian Creole
  // Sources: https://en.wikipedia.org/wiki/Haitian_Creole http://www.omniglot.com/writing/haitiancreole.htm
  hat: [{
    letter: /[\u00e8]/g,
    alternative: "e"
  }, {
    letter: /[\u00c8]/g,
    alternative: "E"
  }, {
    letter: /[\u00f2]/g,
    alternative: "o"
  }, {
    letter: /[\u00d2]/g,
    alternative: "O"
  }],
  // Language: Hawaiian
  // Sources: https://en.wikipedia.org/wiki/Hawaiian_language#Macron http://www.omniglot.com/writing/hawaiian.htm
  haw: [{
    letter: /[\u02bb\u0027\u2019]/g,
    alternative: ""
  }, {
    letter: /[\u0101]/g,
    alternative: "a"
  }, {
    letter: /[\u0113]/g,
    alternative: "e"
  }, {
    letter: /[\u012b]/g,
    alternative: "i"
  }, {
    letter: /[\u014d]/g,
    alternative: "o"
  }, {
    letter: /[\u016b]/g,
    alternative: "u"
  }, {
    letter: /[\u0100]/g,
    alternative: "A"
  }, {
    letter: /[\u0112]/g,
    alternative: "E"
  }, {
    letter: /[\u012a]/g,
    alternative: "I"
  }, {
    letter: /[\u014c]/g,
    alternative: "O"
  }, {
    letter: /[\u016a]/g,
    alternative: "U"
  }],
  // Language: Croatian
  // Sources: https://en.wikipedia.org/wiki/Gaj%27s_Latin_alphabet https://en.wikipedia.org/wiki/D_with_stroke
  // http://www.omniglot.com/writing/croatian.htm
  hr: [{
    letter: /[\u010d\u0107]/g,
    alternative: "c"
  }, {
    letter: /[\u010c\u0106]/g,
    alternative: "C"
  }, {
    letter: /[\u0111]/g,
    alternative: "dj"
  }, {
    letter: /[\u0110]/g,
    alternative: "Dj"
  }, {
    letter: /[\u0161]/g,
    alternative: "s"
  }, {
    letter: /[\u0160]/g,
    alternative: "S"
  }, {
    letter: /[\u017e]/g,
    alternative: "z"
  }, {
    letter: /[\u017d]/g,
    alternative: "Z"
  }, {
    letter: /[\u01c4]/g,
    alternative: "DZ"
  }, {
    letter: /[\u01c5]/g,
    alternative: "Dz"
  }, {
    letter: /[\u01c6]/g,
    alternative: "dz"
  }],
  // Language: Georgian
  // The Georgian language does not use capital letters.
  // Sources: https://en.wikipedia.org/wiki/Romanization_of_Georgian (national system)
  ka: [{
    letter: /[\u10d0]/g,
    alternative: "a"
  }, {
    letter: /[\u10d1]/g,
    alternative: "b"
  }, {
    letter: /[\u10d2]/g,
    alternative: "g"
  }, {
    letter: /[\u10d3]/g,
    alternative: "d"
  }, {
    letter: /[\u10d4]/g,
    alternative: "e"
  }, {
    letter: /[\u10d5]/g,
    alternative: "v"
  }, {
    letter: /[\u10d6]/g,
    alternative: "z"
  }, {
    letter: /[\u10d7]/g,
    alternative: "t"
  }, {
    letter: /[\u10d8]/g,
    alternative: "i"
  }, {
    letter: /[\u10d9]/g,
    alternative: "k"
  }, {
    letter: /[\u10da]/g,
    alternative: "l"
  }, {
    letter: /[\u10db]/g,
    alternative: "m"
  }, {
    letter: /[\u10dc]/g,
    alternative: "n"
  }, {
    letter: /[\u10dd]/g,
    alternative: "o"
  }, {
    letter: /[\u10de]/g,
    alternative: "p"
  }, {
    letter: /[\u10df]/g,
    alternative: "zh"
  }, {
    letter: /[\u10e0]/g,
    alternative: "r"
  }, {
    letter: /[\u10e1]/g,
    alternative: "s"
  }, {
    letter: /[\u10e2]/g,
    alternative: "t"
  }, {
    letter: /[\u10e3]/g,
    alternative: "u"
  }, {
    letter: /[\u10e4]/g,
    alternative: "p"
  }, {
    letter: /[\u10e5]/g,
    alternative: "k"
  }, {
    letter: /[\u10e6]/g,
    alternative: "gh"
  }, {
    letter: /[\u10e7]/g,
    alternative: "q"
  }, {
    letter: /[\u10e8]/g,
    alternative: "sh"
  }, {
    letter: /[\u10e9]/g,
    alternative: "ch"
  }, {
    letter: /[\u10ea]/g,
    alternative: "ts"
  }, {
    letter: /[\u10eb]/g,
    alternative: "dz"
  }, {
    letter: /[\u10ec]/g,
    alternative: "ts"
  }, {
    letter: /[\u10ed]/g,
    alternative: "ch"
  }, {
    letter: /[\u10ee]/g,
    alternative: "kh"
  }, {
    letter: /[\u10ef]/g,
    alternative: "j"
  }, {
    letter: /[\u10f0]/g,
    alternative: "h"
  }],
  // Language: Greenlandic.
  // Source: https://en.wikipedia.org/wiki/Greenlandic_language#Orthography
  kal: [{
    letter: /[\u00E5]/g,
    alternative: "aa"
  }, {
    letter: /[\u00C5]/g,
    alternative: "Aa"
  }, {
    letter: /[\u00E6\u04D5]/g,
    alternative: "ae"
  }, {
    letter: /[\u00C6\u04D4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00C4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00F8]/g,
    alternative: "oe"
  }, {
    letter: /[\u00D8]/g,
    alternative: "Oe"
  }],
  // Language: Kinyarwanda.
  // Source: https://en.wikipedia.org/wiki/Kinyarwanda
  kin: [{
    letter: /[\u2019\u0027]/g,
    alternative: ""
  }],
  // Language: Luxembourgish.
  // Source: http://www.omniglot.com/writing/luxembourgish.htm
  lb: [{
    letter: /[\u00e4]/g,
    alternative: "a"
  }, {
    letter: /[\u00c4]/g,
    alternative: "A"
  }, {
    letter: /[\u00eb\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u00cb\u00c9]/g,
    alternative: "E"
  }],
  // Language: Limburgish.
  // Source: http://www.omniglot.com/writing/limburgish.htm
  li: [{
    letter: /[\u00e1\u00e2\u00e0\u00e4]/g,
    alternative: "a"
  }, {
    letter: /[\u00c1\u00c2\u00c0\u00c4]/g,
    alternative: "A"
  }, {
    letter: /[\u00eb\u00e8\u00ea]/g,
    alternative: "e"
  }, {
    letter: /[\u00cb\u00c8\u00ca]/g,
    alternative: "E"
  }, {
    letter: /[\u00f6\u00f3]/g,
    alternative: "o"
  }, {
    letter: /[\u00d6\u00d3]/g,
    alternative: "O"
  }],
  // Language: Lingala.
  // Sources: https://en.wikipedia.org/wiki/Lingala#Writing_system http://www.omniglot.com/writing/lingala.htm
  lin: [{
    letter: /[\u00e1\u00e2\u01ce]/g,
    alternative: "a"
  }, {
    letter: /[\u00c1\u00c2\u01cd]/g,
    alternative: "A"
  }, {
    letter: /\u025b\u0301/g,
    alternative: "e"
  }, {
    letter: /\u025b\u0302/g,
    alternative: "e"
  }, {
    letter: /\u025b\u030c/g,
    alternative: "e"
  }, {
    letter: /[\u00e9\u00ea\u011b\u025b]/g,
    alternative: "e"
  }, {
    letter: /\u0190\u0301/g,
    alternative: "E"
  }, {
    letter: /\u0190\u0302/g,
    alternative: "E"
  }, {
    letter: /\u0190\u030c/g,
    alternative: "E"
  }, {
    letter: /[\u00c9\u00ca\u011a\u0190]/g,
    alternative: "E"
  }, {
    letter: /[\u00ed\u00ee\u01d0]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd\u00ce\u01cf]/g,
    alternative: "I"
  }, {
    letter: /\u0254\u0301/g,
    alternative: "o"
  }, {
    letter: /\u0254\u0302/g,
    alternative: "o"
  }, {
    letter: /\u0254\u030c/g,
    alternative: "o"
  }, {
    letter: /[\u00f3\u00f4\u01d2\u0254]/g,
    alternative: "o"
  }, {
    letter: /\u0186\u0301/g,
    alternative: "O"
  }, {
    letter: /\u0186\u0302/g,
    alternative: "O"
  }, {
    letter: /\u0186\u030c/g,
    alternative: "O"
  }, {
    letter: /[\u00d3\u00d4\u01d1\u0186]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa]/g,
    alternative: "u"
  }, {
    letter: /[\u00da]/g,
    alternative: "U"
  }],
  // Language: Lithuanian.
  // Sources: https://en.wikipedia.org/wiki/Lithuanian_orthography http://www.omniglot.com/writing/lithuanian.htm
  lt: [{
    letter: /[\u0105]/g,
    alternative: "a"
  }, {
    letter: /[\u0104]/g,
    alternative: "A"
  }, {
    letter: /[\u010d]/g,
    alternative: "c"
  }, {
    letter: /[\u010c]/g,
    alternative: "C"
  }, {
    letter: /[\u0119\u0117]/g,
    alternative: "e"
  }, {
    letter: /[\u0118\u0116]/g,
    alternative: "E"
  }, {
    letter: /[\u012f]/g,
    alternative: "i"
  }, {
    letter: /[\u012e]/g,
    alternative: "I"
  }, {
    letter: /[\u0161]/g,
    alternative: "s"
  }, {
    letter: /[\u0160]/g,
    alternative: "S"
  }, {
    letter: /[\u0173\u016b]/g,
    alternative: "u"
  }, {
    letter: /[\u0172\u016a]/g,
    alternative: "U"
  }, {
    letter: /[\u017e]/g,
    alternative: "z"
  }, {
    letter: /[\u017d]/g,
    alternative: "Z"
  }],
  // Language: Malagasy.
  // Source: http://www.omniglot.com/writing/malagasy.htm
  mg: [{
    letter: /[\u00f4]/g,
    alternative: "ao"
  }, {
    letter: /[\u00d4]/g,
    alternative: "Ao"
  }],
  // Language: Macedonian.
  // Source: http://www.omniglot.com/writing/macedonian.htm
  mk: [{
    letter: /[\u0430]/g,
    alternative: "a"
  }, {
    letter: /[\u0410]/g,
    alternative: "A"
  }, {
    letter: /[\u0431]/g,
    alternative: "b"
  }, {
    letter: /[\u0411]/g,
    alternative: "B"
  }, {
    letter: /[\u0432]/g,
    alternative: "v"
  }, {
    letter: /[\u0412]/g,
    alternative: "V"
  }, {
    letter: /[\u0433]/g,
    alternative: "g"
  }, {
    letter: /[\u0413]/g,
    alternative: "G"
  }, {
    letter: /[\u0434]/g,
    alternative: "d"
  }, {
    letter: /[\u0414]/g,
    alternative: "D"
  }, {
    letter: /[\u0453]/g,
    alternative: "gj"
  }, {
    letter: /[\u0403]/g,
    alternative: "Gj"
  }, {
    letter: /[\u0435]/g,
    alternative: "e"
  }, {
    letter: /[\u0415]/g,
    alternative: "E"
  }, {
    letter: /[\u0436]/g,
    alternative: "zh"
  }, {
    letter: /[\u0416]/g,
    alternative: "Zh"
  }, {
    letter: /[\u0437]/g,
    alternative: "z"
  }, {
    letter: /[\u0417]/g,
    alternative: "Z"
  }, {
    letter: /[\u0455]/g,
    alternative: "dz"
  }, {
    letter: /[\u0405]/g,
    alternative: "Dz"
  }, {
    letter: /[\u0438]/g,
    alternative: "i"
  }, {
    letter: /[\u0418]/g,
    alternative: "I"
  }, {
    letter: /[\u0458]/g,
    alternative: "j"
  }, {
    letter: /[\u0408]/g,
    alternative: "J"
  }, {
    letter: /[\u043A]/g,
    alternative: "k"
  }, {
    letter: /[\u041A]/g,
    alternative: "K"
  }, {
    letter: /[\u043B]/g,
    alternative: "l"
  }, {
    letter: /[\u041B]/g,
    alternative: "L"
  }, {
    letter: /[\u0459]/g,
    alternative: "lj"
  }, {
    letter: /[\u0409]/g,
    alternative: "Lj"
  }, {
    letter: /[\u043C]/g,
    alternative: "m"
  }, {
    letter: /[\u041C]/g,
    alternative: "M"
  }, {
    letter: /[\u043D]/g,
    alternative: "n"
  }, {
    letter: /[\u041D]/g,
    alternative: "N"
  }, {
    letter: /[\u045A]/g,
    alternative: "nj"
  }, {
    letter: /[\u040A]/g,
    alternative: "Nj"
  }, {
    letter: /[\u043E]/g,
    alternative: "o"
  }, {
    letter: /[\u041E]/g,
    alternative: "O"
  }, {
    letter: /[\u0440]/g,
    alternative: "r"
  }, {
    letter: /[\u0420]/g,
    alternative: "R"
  }, {
    letter: /[\u043F]/g,
    alternative: "p"
  }, {
    letter: /[\u041F]/g,
    alternative: "P"
  }, {
    letter: /[\u0441]/g,
    alternative: "s"
  }, {
    letter: /[\u0421]/g,
    alternative: "S"
  }, {
    letter: /[\u0442]/g,
    alternative: "t"
  }, {
    letter: /[\u0422]/g,
    alternative: "T"
  }, {
    letter: /[\u045C]/g,
    alternative: "kj"
  }, {
    letter: /[\u040C]/g,
    alternative: "Kj"
  }, {
    letter: /[\u0443]/g,
    alternative: "u"
  }, {
    letter: /[\u0423]/g,
    alternative: "U"
  }, {
    letter: /[\u0444]/g,
    alternative: "f"
  }, {
    letter: /[\u0424]/g,
    alternative: "F"
  }, {
    letter: /[\u0445]/g,
    alternative: "h"
  }, {
    letter: /[\u0425]/g,
    alternative: "H"
  }, {
    letter: /[\u0446]/g,
    alternative: "c"
  }, {
    letter: /[\u0426]/g,
    alternative: "C"
  }, {
    letter: /[\u0447]/g,
    alternative: "ch"
  }, {
    letter: /[\u0427]/g,
    alternative: "Ch"
  }, {
    letter: /[\u045F]/g,
    alternative: "dj"
  }, {
    letter: /[\u040F]/g,
    alternative: "Dj"
  }, {
    letter: /[\u0448]/g,
    alternative: "sh"
  }, {
    letter: /[\u0428]/g,
    alternative: "Sh"
  }],
  // Language: Maori.
  // Source: http://www.omniglot.com/writing/maori.htm
  mri: [{
    letter: /[\u0101]/g,
    alternative: "aa"
  }, {
    letter: /[\u0100]/g,
    alternative: "Aa"
  }, {
    letter: /[\u0113]/g,
    alternative: "ee"
  }, {
    letter: /[\u0112]/g,
    alternative: "Ee"
  }, {
    letter: /[\u012b]/g,
    alternative: "ii"
  }, {
    letter: /[\u012a]/g,
    alternative: "Ii"
  }, {
    letter: /[\u014d]/g,
    alternative: "oo"
  }, {
    letter: /[\u014c]/g,
    alternative: "Oo"
  }, {
    letter: /[\u016b]/g,
    alternative: "uu"
  }, {
    letter: /[\u016a]/g,
    alternative: "Uu"
  }],
  // Language: Mirandese.
  // Source: http://www.omniglot.com/writing/mirandese.htm
  mwl: [{
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /[\u00e1]/g,
    alternative: "a"
  }, {
    letter: /[\u00c1]/g,
    alternative: "A"
  }, {
    letter: /[\u00e9\u00ea]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9\u00ca]/g,
    alternative: "E"
  }, {
    letter: /[\u00ed]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd]/g,
    alternative: "I"
  }, {
    letter: /[\u00f3\u00f4]/g,
    alternative: "o"
  }, {
    letter: /[\u00d3\u00d4]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa\u0169]/g,
    alternative: "u"
  }, {
    letter: /[\u00da\u0168]/g,
    alternative: "U"
  }],
  // Language: Occitan.
  // Sources: http://www.omniglot.com/writing/oromo.htm https://en.wikipedia.org/wiki/Occitan_alphabet
  oci: [{
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /[\u00e0\u00e1]/g,
    alternative: "a"
  }, {
    letter: /[\u00c0\u00c1]/g,
    alternative: "A"
  }, {
    letter: /[\u00e8\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u00c8\u00c9]/g,
    alternative: "E"
  }, {
    letter: /[\u00ed\u00ef]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd\u00cf]/g,
    alternative: "I"
  }, {
    letter: /[\u00f2\u00f3]/g,
    alternative: "o"
  }, {
    letter: /[\u00d2\u00d3]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa\u00fc]/g,
    alternative: "u"
  }, {
    letter: /[\u00da\u00dc]/g,
    alternative: "U"
  }, {
    letter: /[\u00b7]/g,
    alternative: ""
  }],
  // Language: Oromo.
  // Source: http://www.omniglot.com/writing/occitan.htm
  orm: [{
    letter: /[\u0027]/g,
    alternative: ""
  }],
  // Language: Portuguese.
  // Source: https://en.wikipedia.org/wiki/Portuguese_orthography http://www.omniglot.com/writing/portuguese.htm
  pt: [{
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /[\u00e1\u00e2\u00e3\u00e0]/g,
    alternative: "a"
  }, {
    letter: /[\u00c1\u00c2\u00c3\u00c0]/g,
    alternative: "A"
  }, {
    letter: /[\u00e9\u00ea]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9\u00ca]/g,
    alternative: "E"
  }, {
    letter: /[\u00ed]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd]/g,
    alternative: "I"
  }, {
    letter: /[\u00f3\u00f4\u00f5]/g,
    alternative: "o"
  }, {
    letter: /[\u00d3\u00d4\u00d5]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa]/g,
    alternative: "u"
  }, {
    letter: /[\u00da]/g,
    alternative: "U"
  }],
  // Language: Romansh Vallader.
  // Source: https://en.wikipedia.org/wiki/Romansh_language#Orthography http://www.omniglot.com/writing/romansh.htm
  roh: [{
    letter: /[\u00e9\u00e8\u00ea]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9\u00c8\u00ca]/g,
    alternative: "E"
  }, {
    letter: /[\u00ef]/g,
    alternative: "i"
  }, {
    letter: /[\u00cf]/g,
    alternative: "I"
  }, {
    letter: /[\u00f6]/g,
    alternative: "oe"
  }, {
    letter: /[\u00d6]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00fc]/g,
    alternative: "ue"
  }, {
    letter: /[\u00dc]/g,
    alternative: "Ue"
  }, {
    letter: /[\u00e4]/g,
    alternative: "ae"
  }, {
    letter: /[\u00c4]/g,
    alternative: "Ae"
  }],
  // Language: Aromanian.
  // Sources: https://en.wikipedia.org/wiki/Aromanian_alphabet http://www.omniglot.com/writing/aromanian.htm
  rup: [{
    letter: /[\u00e3]/g,
    alternative: "a"
  }, {
    letter: /[\u00c3]/g,
    alternative: "A"
  }],
  // Language: Romanian.
  // Sources: http://forum.wordreference.com/threads/romanian-transliteration.3193544/#post-16161251
  // https://en.wikipedia.org/wiki/Romanian_alphabet http://www.omniglot.com/writing/romanian.htm
  ro: [{
    letter: /[\u0103\u00e2]/g,
    alternative: "a"
  }, {
    letter: /[\u0102\u00c2]/g,
    alternative: "A"
  }, {
    letter: /[\u00ee]/g,
    alternative: "i"
  }, {
    letter: /[\u00ce]/g,
    alternative: "I"
  }, {
    letter: /[\u0219\u015f]/g,
    alternative: "s"
  }, {
    letter: /[\u0218\u015e]/g,
    alternative: "S"
  }, {
    letter: /[\u021b\u0163]/g,
    alternative: "t"
  }, {
    letter: /[\u021a\u0162]/g,
    alternative: "T"
  }],
  // Language: Klingon.
  // Sources: http://www.omniglot.com/conscripts/klingon.htm https://en.wikipedia.org/wiki/Klingon_language#Writing_systems
  // This translation module only works for Klingon written in Latin characters. KLI PlqaD script is not supported yet.
  tlh: [{
    letter: /[\u2019\u0027]/g,
    alternative: ""
  }],
  // Language: Slovak.
  // Sources: https://en.wikipedia.org/wiki/Dz_(digraph) https://en.wikipedia.org/wiki/Slovak_orthography
  // http://www.omniglot.com/writing/slovak.htm
  sk: [{
    letter: /[\u01c4]/g,
    alternative: "DZ"
  }, {
    letter: /[\u01c5]/g,
    alternative: "Dz"
  }, {
    letter: /[\u01c6]/g,
    alternative: "dz"
  }, {
    letter: /[\u00e1\u00e4]/g,
    alternative: "a"
  }, {
    letter: /[\u00c1\u00c4]/g,
    alternative: "A"
  }, {
    letter: /[\u010d]/g,
    alternative: "c"
  }, {
    letter: /[\u010c]/g,
    alternative: "C"
  }, {
    letter: /[\u010f]/g,
    alternative: "d"
  }, {
    letter: /[\u010e]/g,
    alternative: "D"
  }, {
    letter: /[\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9]/g,
    alternative: "E"
  }, {
    letter: /[\u00ed]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd]/g,
    alternative: "I"
  }, {
    letter: /[\u013e\u013a]/g,
    alternative: "l"
  }, {
    letter: /[\u013d\u0139]/g,
    alternative: "L"
  }, {
    letter: /[\u0148]/g,
    alternative: "n"
  }, {
    letter: /[\u0147]/g,
    alternative: "N"
  }, {
    letter: /[\u00f3\u00f4]/g,
    alternative: "o"
  }, {
    letter: /[\u00d3\u00d4]/g,
    alternative: "O"
  }, {
    letter: /[\u0155]/g,
    alternative: "r"
  }, {
    letter: /[\u0154]/g,
    alternative: "R"
  }, {
    letter: /[\u0161]/g,
    alternative: "s"
  }, {
    letter: /[\u0160]/g,
    alternative: "S"
  }, {
    letter: /[\u0165]/g,
    alternative: "t"
  }, {
    letter: /[\u0164]/g,
    alternative: "T"
  }, {
    letter: /[\u00fa]/g,
    alternative: "u"
  }, {
    letter: /[\u00da]/g,
    alternative: "U"
  }, {
    letter: /[\u00fd]/g,
    alternative: "y"
  }, {
    letter: /[\u00dd]/g,
    alternative: "Y"
  }, {
    letter: /[\u017e]/g,
    alternative: "z"
  }, {
    letter: /[\u017d]/g,
    alternative: "Z"
  }],
  // Language: Slovenian.
  // Sources: https://en.wikipedia.org/wiki/Slovene_alphabet http://www.omniglot.com/writing/slovene.htm
  sl: [{
    letter: /[\u010d\u0107]/g,
    alternative: "c"
  }, {
    letter: /[\u010c\u0106]/g,
    alternative: "C"
  }, {
    letter: /[\u0111]/g,
    alternative: "d"
  }, {
    letter: /[\u0110]/g,
    alternative: "D"
  }, {
    letter: /[\u0161]/g,
    alternative: "s"
  }, {
    letter: /[\u0160]/g,
    alternative: "S"
  }, {
    letter: /[\u017e]/g,
    alternative: "z"
  }, {
    letter: /[\u017d]/g,
    alternative: "Z"
  }, {
    letter: /[\u00e0\u00e1\u0203\u0201]/g,
    alternative: "a"
  }, {
    letter: /[\u00c0\u00c1\u0202\u0200]/g,
    alternative: "A"
  }, {
    letter: /[\u00e8\u00e9\u0207\u0205]/g,
    alternative: "e"
  }, {
    letter: /\u01dd\u0300/g,
    alternative: "e"
  }, {
    letter: /\u01dd\u030f/g,
    alternative: "e"
  }, {
    letter: /\u1eb9\u0301/g,
    alternative: "e"
  }, {
    letter: /\u1eb9\u0311/g,
    alternative: "e"
  }, {
    letter: /[\u00c8\u00c9\u0206\u0204]/g,
    alternative: "E"
  }, {
    letter: /\u018e\u030f/g,
    alternative: "E"
  }, {
    letter: /\u018e\u0300/g,
    alternative: "E"
  }, {
    letter: /\u1eb8\u0311/g,
    alternative: "E"
  }, {
    letter: /\u1eb8\u0301/g,
    alternative: "E"
  }, {
    letter: /[\u00ec\u00ed\u020b\u0209]/g,
    alternative: "i"
  }, {
    letter: /[\u00cc\u00cd\u020a\u0208]/g,
    alternative: "I"
  }, {
    letter: /[\u00f2\u00f3\u020f\u020d]/g,
    alternative: "o"
  }, {
    letter: /\u1ecd\u0311/g,
    alternative: "o"
  }, {
    letter: /\u1ecd\u0301/g,
    alternative: "o"
  }, {
    letter: /\u1ecc\u0311/g,
    alternative: "O"
  }, {
    letter: /\u1ecc\u0301/g,
    alternative: "O"
  }, {
    letter: /[\u00d2\u00d3\u020e\u020c]/g,
    alternative: "O"
  }, {
    letter: /[\u00f9\u00fa\u0217\u0215]/g,
    alternative: "u"
  }, {
    letter: /[\u00d9\u00da\u0216\u0214]/g,
    alternative: "U"
  }, {
    letter: /[\u0155\u0213]/g,
    alternative: "r"
  }, {
    letter: /[\u0154\u0212]/g,
    alternative: "R"
  }],
  // Language: Albanian.
  // Sources: https://en.wikipedia.org/wiki/Albanian_alphabet http://www.omniglot.com/writing/albanian.htm
  sq: [{
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /[\u00eb]/g,
    alternative: "e"
  }, {
    letter: /[\u00cb]/g,
    alternative: "E"
  }],
  // Language: Hungarian.
  // Sources: http://forum.wordreference.com/threads/hungarian-transliteration.3193022/#post-16166901
  // http://www.omniglot.com/writing/hungarian.htm
  hu: [{
    letter: /[\u00e1]/g,
    alternative: "a"
  }, {
    letter: /[\u00c1]/g,
    alternative: "A"
  }, {
    letter: /[\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9]/g,
    alternative: "E"
  }, {
    letter: /[\u00ed]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd]/g,
    alternative: "I"
  }, {
    letter: /[\u00f3\u00f6\u0151]/g,
    alternative: "o"
  }, {
    letter: /[\u00d3\u00d6\u0150]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa\u00fc\u0171]/g,
    alternative: "u"
  }, {
    letter: /[\u00da\u00dc\u0170]/g,
    alternative: "U"
  }],
  // Language: Sardinian.
  // Sources: http://www.omniglot.com/writing/sardinian.htm https://en.wikipedia.org/wiki/Sardinian_language
  srd: [{
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /[\u00e0\u00e1]/g,
    alternative: "a"
  }, {
    letter: /[\u00c0\u00c1]/g,
    alternative: "A"
  }, {
    letter: /[\u00e8\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u00c8\u00c9]/g,
    alternative: "E"
  }, {
    letter: /[\u00ed\u00ef]/g,
    alternative: "i"
  }, {
    letter: /[\u00cd\u00cf]/g,
    alternative: "I"
  }, {
    letter: /[\u00f2\u00f3]/g,
    alternative: "o"
  }, {
    letter: /[\u00d2\u00d3]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa\u00f9]/g,
    alternative: "u"
  }, {
    letter: /[\u00da\u00d9]/g,
    alternative: "U"
  }],
  // Language: Silesian.
  // Source: https://en.wikipedia.org/wiki/Silesian_language#Writing_system
  szl: [{
    letter: /[\u0107]/g,
    alternative: "c"
  }, {
    letter: /[\u0106]/g,
    alternative: "C"
  }, {
    letter: /[\u00e3]/g,
    alternative: "a"
  }, {
    letter: /[\u00c3]/g,
    alternative: "A"
  }, {
    letter: /[\u0142]/g,
    alternative: "u"
  }, {
    letter: /[\u0141]/g,
    alternative: "U"
  }, {
    letter: /[\u006e]/g,
    alternative: "n"
  }, {
    letter: /[\u004e]/g,
    alternative: "N"
  }, {
    letter: /[\u014f\u014d\u00f4\u00f5]/g,
    alternative: "o"
  }, {
    letter: /[\u014e\u014c\u00d4\u00d5]/g,
    alternative: "O"
  }, {
    letter: /[\u015b]/g,
    alternative: "s"
  }, {
    letter: /[\u015a]/g,
    alternative: "S"
  }, {
    letter: /[\u017a\u017c\u017e]/g,
    alternative: "z"
  }, {
    letter: /[\u0179\u017b\u017d]/g,
    alternative: "Z"
  }, {
    letter: /[\u016f]/g,
    alternative: "u"
  }, {
    letter: /[\u016e]/g,
    alternative: "U"
  }, {
    letter: /[\u010d]/g,
    alternative: "cz"
  }, {
    letter: /[\u010c]/g,
    alternative: "Cz"
  }, {
    letter: /[\u0159]/g,
    alternative: "rz"
  }, {
    letter: /[\u0158]/g,
    alternative: "Rz"
  }, {
    letter: /[\u0161]/g,
    alternative: "sz"
  }, {
    letter: /[\u0160]/g,
    alternative: "Sz"
  }],
  // Language: Tahitian.
  // Sources: https://en.wikipedia.org/wiki/Tahitian_language#Phonology http://www.omniglot.com/writing/tahitian.htm
  tah: [{
    letter: /[\u0101\u00e2\u00e0]/g,
    alternative: "a"
  }, {
    letter: /[\u0100\u00c2\u00c0]/g,
    alternative: "A"
  }, {
    letter: /[\u00ef\u00ee\u00ec]/g,
    alternative: "i"
  }, {
    letter: /[\u00cf\u00ce\u00cc]/g,
    alternative: "I"
  }, {
    letter: /[\u0113\u00ea\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u0112\u00ca\u00c9]/g,
    alternative: "E"
  }, {
    letter: /[\u016b\u00fb\u00fa]/g,
    alternative: "u"
  }, {
    letter: /[\u016a\u00db\u00da]/g,
    alternative: "U"
  }, {
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /[\u00f2\u00f4\u014d]/g,
    alternative: "o"
  }, {
    letter: /[\u00d2\u00d4\u014c]/g,
    alternative: "O"
  }, {
    letter: /[\u2019\u0027\u2018]/g,
    alternative: ""
  }],
  // Language: Venetian.
  // Sources: http://www.omniglot.com/writing/venetian.htm https://en.wikipedia.org/wiki/Venetian_language#Spelling_systems
  // http://www.venipedia.org/wiki/index.php?title=Venetian_Language
  vec: [{
    letter: /\u0073\u002d\u0063/g,
    alternative: "sc"
  }, {
    letter: /\u0053\u002d\u0043/g,
    alternative: "SC"
  }, {
    letter: /\u0073\u0027\u0063/g,
    alternative: "sc"
  }, {
    letter: /\u0053\u0027\u0043/g,
    alternative: "SC"
  }, {
    letter: /\u0073\u2019\u0063/g,
    alternative: "sc"
  }, {
    letter: /\u0053\u2019\u0043/g,
    alternative: "SC"
  }, {
    letter: /\u0073\u2018\u0063/g,
    alternative: "sc"
  }, {
    letter: /\u0053\u2018\u0043/g,
    alternative: "SC"
  }, {
    letter: /\u0053\u002d\u0063/g,
    alternative: "Sc"
  }, {
    letter: /\u0053\u0027\u0063/g,
    alternative: "Sc"
  }, {
    letter: /\u0053\u2019\u0063/g,
    alternative: "Sc"
  }, {
    letter: /\u0053\u2018\u0063/g,
    alternative: "Sc"
  }, {
    letter: /\u0063\u2019/g,
    alternative: "c"
  }, {
    letter: /\u0043\u2019/g,
    alternative: "C"
  }, {
    letter: /\u0063\u2018/g,
    alternative: "c"
  }, {
    letter: /\u0043\u2018/g,
    alternative: "C"
  }, {
    letter: /\u0063\u0027/g,
    alternative: "c"
  }, {
    letter: /\u0043\u0027/g,
    alternative: "C"
  }, {
    letter: /[\u00e0\u00e1\u00e2]/g,
    alternative: "a"
  }, {
    letter: /[\u00c0\u00c1\u00c2]/g,
    alternative: "A"
  }, {
    letter: /[\u00e8\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u00c8\u00c9]/g,
    alternative: "E"
  }, {
    letter: /[\u00f2\u00f3]/g,
    alternative: "o"
  }, {
    letter: /[\u00d2\u00d3]/g,
    alternative: "O"
  }, {
    letter: /[\u00f9\u00fa]/g,
    alternative: "u"
  }, {
    letter: /[\u00d9\u00da]/g,
    alternative: "U"
  }, {
    letter: /[\u00e7\u010d\u010b]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7\u010c\u010a]/g,
    alternative: "C"
  }, {
    letter: /[\u0142]/g,
    alternative: "l"
  }, {
    letter: /[\u00a3\u0141]/g,
    alternative: "L"
  }, {
    letter: /\ud835\udeff/g,
    alternative: "dh"
  }, {
    letter: /[\u0111\u03b4]/g,
    alternative: "dh"
  }, {
    letter: /[\u0110\u0394]/g,
    alternative: "Dh"
  }],
  // Language: Walloon.
  // Sources: http://www.omniglot.com/writing/walloon.htm https://en.wikipedia.org/wiki/Walloon_alphabet
  wa: [{
    letter: /[\u00e2\u00e5]/g,
    alternative: "a"
  }, {
    letter: /[\u00c2\u00c5]/g,
    alternative: "A"
  }, {
    letter: /[\u00e7]/g,
    alternative: "c"
  }, {
    letter: /[\u00c7]/g,
    alternative: "C"
  }, {
    letter: /\u0065\u030a/g,
    alternative: "e"
  }, {
    letter: /\u0045\u030a/g,
    alternative: "E"
  }, {
    letter: /[\u00eb\u00ea\u00e8\u00e9]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9\u00c8\u00ca\u00cb]/g,
    alternative: "E"
  }, {
    letter: /[\u00ee]/g,
    alternative: "i"
  }, {
    letter: /[\u00ce]/g,
    alternative: "I"
  }, {
    letter: /[\u00f4\u00f6]/g,
    alternative: "o"
  }, {
    letter: /[\u00d6\u00d4]/g,
    alternative: "O"
  }, {
    letter: /[\u00fb]/g,
    alternative: "u"
  }, {
    letter: /[\u00db]/g,
    alternative: "U"
  }],
  // Language: Yoruba.
  // Sources: http://www.omniglot.com/writing/yoruba.htm https://en.wikipedia.org/wiki/Yoruba_language
  yor: [{
    letter: /[\u00e1\u00e0]/g,
    alternative: "a"
  }, {
    letter: /[\u00c1\u00c0]/g,
    alternative: "A"
  }, {
    letter: /[\u00ec\u00ed]/g,
    alternative: "i"
  }, {
    letter: /[\u00cc\u00cd]/g,
    alternative: "I"
  }, {
    letter: /\u1ecd\u0301/g,
    alternative: "o"
  }, {
    letter: /\u1ecc\u0301/g,
    alternative: "O"
  }, {
    letter: /\u1ecd\u0300/g,
    alternative: "o"
  }, {
    letter: /\u1ecc\u0300/g,
    alternative: "O"
  }, {
    letter: /[\u00f3\u00f2\u1ecd]/g,
    alternative: "o"
  }, {
    letter: /[\u00d3\u00d2\u1ecc]/g,
    alternative: "O"
  }, {
    letter: /[\u00fa\u00f9]/g,
    alternative: "u"
  }, {
    letter: /[\u00da\u00d9]/g,
    alternative: "U"
  }, {
    letter: /\u1eb9\u0301/g,
    alternative: "e"
  }, {
    letter: /\u1eb8\u0301/g,
    alternative: "E"
  }, {
    letter: /\u1eb9\u0300/g,
    alternative: "e"
  }, {
    letter: /\u1eb8\u0300/g,
    alternative: "E"
  }, {
    letter: /[\u00e9\u00e8\u1eb9]/g,
    alternative: "e"
  }, {
    letter: /[\u00c9\u00c8\u1eb8]/g,
    alternative: "E"
  }, {
    letter: /[\u1e63]/g,
    alternative: "s"
  }, {
    letter: /[\u1e62]/g,
    alternative: "S"
  }]
};
function FZ(e) {
  if ((0, MZ.isUndefined)(e))
    return [];
  const a = (0, LZ.default)(e);
  return a === "nb" || a === "nn" ? Jw.nbnn : a === "bal" || a === "ca" ? Jw.ca : Jw[a] || [];
}
Object.defineProperty(of, "__esModule", {
  value: !0
});
of.default = UZ;
var BZ = WZ(yc);
function WZ(e) {
  return e && e.__esModule ? e : { default: e };
}
function UZ(e, a) {
  const t = (0, BZ.default)(a);
  for (let n = 0; n < t.length; n++)
    e = e.replace(t[n].letter, t[n].alternative);
  return e;
}
var Yo = {}, jd = {};
Object.defineProperty(jd, "__esModule", {
  value: !0
});
jd.default = HZ;
function HZ(e, a = !1, t = "", n = "") {
  let r, o;
  n === "id" ? r = '[ \\u00a0\\n\\r\\t.,()”“〝〞〟‟„"+;!¡?¿:/»«‹›' + t + "<>" : r = '[ \\u00a0\\u2014\\u06d4\\u061f\\u060C\\u061B\\n\\r\\t.,()”“〝〞〟‟„"+\\-;!¡?¿:/»«‹›' + t + "<>";
  const l = "(^|" + r + "'‘’‛`])";
  return a ? o = "($|((?=" + r + "]))|((['‘’‛`])(" + r + "])))" : o = "($|(" + r + "])|((['‘’‛`])(" + r + "])))", l + e + o;
}
var zc = {}, Ct = {}, Xt = {};
Object.defineProperty(Xt, "__esModule", {
  value: !0
});
Xt.default = GZ;
function GZ(e) {
  return e = e.replace(/\s{2,}/g, " "), e = e.replace(/\s\.$/, "."), e = e.replace(/^\s+|\s+$/g, ""), e = e.replace(/\s。/g, "。"), e = e.replace(/。\s/g, "。"), e;
}
var On = {}, I3 = function(e, a) {
  var t;
  for (t = 0; t < e.length; t++)
    if (e[t].regex.test(a))
      return e[t];
}, B2 = function(e, a) {
  var t, n, r;
  for (t = 0; t < a.length; t++)
    if (n = I3(e, a.substring(0, t + 1)), n)
      r = n;
    else if (r)
      return { max_index: t, rule: r };
  return r ? { max_index: a.length, rule: r } : void 0;
}, C3 = function(e) {
  var a = "", t = [], n = 1, r = 1, o = function(l, u) {
    e({
      type: u,
      src: l,
      line: n,
      col: r
    });
    var c = l.split(`
`);
    n += c.length - 1, r = (c.length > 1 ? 1 : r) + c[c.length - 1].length;
  };
  return {
    addRule: function(l, u) {
      t.push({ regex: l, type: u });
    },
    onText: function(l) {
      for (var u = a + l, c = B2(t, u); c && c.max_index !== u.length; )
        o(u.substring(0, c.max_index), c.rule.type), u = u.substring(c.max_index), c = B2(t, u);
      a = u;
    },
    end: function() {
      if (a.length !== 0) {
        var l = I3(t, a);
        if (!l) {
          var u = new Error("unable to tokenize");
          throw u.tokenizer2 = {
            buffer: a,
            line: n,
            col: r
          }, u;
        }
        o(a, l.type);
      }
    }
  };
};
Object.defineProperty(On, "__esModule", {
  value: !0
});
On.inlineElements = On.getBlocks = On.default = On.blockElements = void 0;
On.isBlockElement = R3;
On.isInlineElement = D3;
var P3 = K, VZ = KZ(C3);
function KZ(e) {
  return e && e.__esModule ? e : { default: e };
}
const lf = On.blockElements = ["address", "article", "aside", "blockquote", "canvas", "dd", "div", "dl", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "li", "main", "nav", "noscript", "ol", "output", "p", "pre", "section", "table", "tfoot", "ul", "video"], df = On.inlineElements = ["b", "big", "i", "small", "tt", "abbr", "acronym", "cite", "code", "dfn", "em", "kbd", "strong", "samp", "time", "var", "a", "bdo", "br", "img", "map", "object", "q", "script", "span", "sub", "sup", "button", "input", "label", "select", "textarea"], YZ = new RegExp("^(" + lf.join("|") + ")$", "i"), QZ = new RegExp("^(" + df.join("|") + ")$", "i"), XZ = new RegExp("^<(" + lf.join("|") + ")[^>]*?>$", "i"), ZZ = new RegExp("^</(" + lf.join("|") + ")[^>]*?>$", "i"), JZ = new RegExp("^<(" + df.join("|") + ")[^>]*>$", "i"), eJ = new RegExp("^</(" + df.join("|") + ")[^>]*>$", "i"), aJ = /^<([^>\s/]+)[^>]*>$/, tJ = /^<\/([^>\s]+)[^>]*>$/, nJ = /^[^<]+$/, rJ = /^<[^><]*$/, sJ = /<!--(.|[\r\n])*?-->/g;
let _m = [], zr;
function iJ() {
  _m = [], zr = (0, VZ.default)(function(e) {
    _m.push(e);
  }), zr.addRule(nJ, "content"), zr.addRule(rJ, "greater-than-sign-content"), zr.addRule(XZ, "block-start"), zr.addRule(ZZ, "block-end"), zr.addRule(JZ, "inline-start"), zr.addRule(eJ, "inline-end"), zr.addRule(aJ, "other-element-start"), zr.addRule(tJ, "other-element-end");
}
function R3(e) {
  return YZ.test(e);
}
function D3(e) {
  return QZ.test(e);
}
function oJ(e) {
  const a = [];
  let t = 0, n = "", r = "", o = "";
  return e = e.replace(sJ, ""), iJ(), zr.onText(e), zr.end(), (0, P3.forEach)(_m, function(l, u) {
    const c = _m[u + 1];
    switch (l.type) {
      case "content":
      case "greater-than-sign-content":
      case "inline-start":
      case "inline-end":
      case "other-tag":
      case "other-element-start":
      case "other-element-end":
      case "greater than sign":
        !c || t === 0 && (c.type === "block-start" || c.type === "block-end") ? (r += l.src, a.push(r), n = "", r = "", o = "") : r += l.src;
        break;
      case "block-start":
        t !== 0 && (r.trim() !== "" && a.push(r), r = "", o = ""), t++, n = l.src;
        break;
      case "block-end":
        t--, o = l.src, n !== "" && o !== "" ? a.push(n + r + o) : r.trim() !== "" && a.push(r), n = "", r = "", o = "";
        break;
    }
    t < 0 && (t = 0);
  }), a;
}
const lJ = On.getBlocks = (0, P3.memoize)(oJ);
On.default = {
  blockElements: lf,
  inlineElements: df,
  isBlockElement: R3,
  isInlineElement: D3,
  getBlocks: lJ
};
Object.defineProperty(Ct, "__esModule", {
  value: !0
});
Ct.stripIncompleteTags = Ct.stripFullTags = Ct.stripBlockTagsAtStartEnd = Ct.default = void 0;
var dJ = uJ(Xt), N3 = On;
function uJ(e) {
  return e && e.__esModule ? e : { default: e };
}
const cJ = new RegExp("^<(" + N3.blockElements.join("|") + ")[^>]*?>", "i"), pJ = new RegExp("</(" + N3.blockElements.join("|") + ")[^>]*?>$", "i"), L3 = function(e) {
  return e = e.replace(/^(<\/([^>]+)>)+/i, ""), e = e.replace(/(<([^/>]+)>)+$/i, ""), e;
};
Ct.stripIncompleteTags = L3;
const M3 = function(e) {
  return e = e.replace(cJ, ""), e = e.replace(pJ, ""), e;
};
Ct.stripBlockTagsAtStartEnd = M3;
const q3 = function(e) {
  return e = e.replace(/(<([^>]+)>)/ig, " "), e = (0, dJ.default)(e), e;
};
Ct.stripFullTags = q3;
Ct.default = {
  stripFullTags: q3,
  stripIncompleteTags: L3,
  stripBlockTagsAtStartEnd: M3
};
var kt = {};
Object.defineProperty(kt, "__esModule", {
  value: !0
});
kt.unifyWhiteSpace = kt.unifyNonBreakingSpace = kt.unifyEmDash = kt.unifyAllSpaces = kt.default = void 0;
const N0 = function(e) {
  return e.replace(/&nbsp;/g, " ");
};
kt.unifyNonBreakingSpace = N0;
const L0 = function(e) {
  return e.replace(/\u2014/g, " ");
};
kt.unifyEmDash = L0;
const M0 = function(e) {
  return e.replace(/\s/g, " ");
};
kt.unifyWhiteSpace = M0;
const F3 = function(e) {
  return e = N0(e), e = L0(e), M0(e);
};
kt.unifyAllSpaces = F3;
kt.default = {
  unifyNonBreakingSpace: N0,
  unifyEmDash: L0,
  unifyWhiteSpace: M0,
  unifyAllSpaces: F3
};
Object.defineProperty(zc, "__esModule", {
  value: !0
});
zc.default = fJ;
var gJ = Ct, mJ = kt;
function fJ(e) {
  return e = (0, mJ.unifyAllSpaces)(e), e = (0, gJ.stripFullTags)(e), e;
}
Object.defineProperty(Yo, "__esModule", {
  value: !0
});
Yo.default = wJ;
var hJ = K, yJ = q0(jd), zJ = q0(sf), bJ = q0(zc);
function q0(e) {
  return e && e.__esModule ? e : { default: e };
}
function wJ(e, a = !1, t = "", n = !1) {
  e = (0, hJ.map)(e, function(o) {
    return n && (o = (0, zJ.default)(o)), o = (0, bJ.default)(o), a ? o : (0, yJ.default)(o, !0, t);
  });
  const r = "(" + e.join(")|(") + ")";
  return new RegExp(r, "ig");
}
var xd = {}, F0 = {};
Object.defineProperty(F0, "__esModule", {
  value: !0
});
F0.default = vJ;
function vJ(e, a) {
  let t = e.match(a);
  return t === null && (t = []), t;
}
Object.defineProperty(xd, "__esModule", {
  value: !0
});
xd.default = AJ;
xd.imageRegex = void 0;
var kJ = _J(F0);
function _J(e) {
  return e && e.__esModule ? e : { default: e };
}
const EJ = xd.imageRegex = new RegExp("<img(?:[^>]+)?>(</img>)*", "ig");
function AJ(e) {
  return (0, kJ.default)(e, EJ);
}
var uf = {};
Object.defineProperty(uf, "__esModule", {
  value: !0
});
uf.default = TJ;
function TJ(e) {
  return e;
}
var gt = {}, Pt = {};
Object.defineProperty(Pt, "__esModule", {
  value: !0
});
Pt.default = SJ;
Pt.punctuationRegexString = Pt.punctuationRegexStart = Pt.punctuationRegexEnd = Pt.punctuationList = void 0;
var $J = kt;
const B0 = Pt.punctuationRegexString = `\\–\\-\\(\\)_\\[\\]’‘“”〝〞〟‟„"'.?!:;,¿¡«»‹›—×+&۔؟،؛。｡！‼？⁇⁉⁈‥…・ー、〃〄〆〇〈〉《》「」『』【】〒〓〔〕〖〗〘〙〚〛〜〝〞〟〠〶〼〽｛｝｜～｟｠｢｣､［］･￥＄％＠＆＇（）＊／：；＜＞＼\\<>`;
Pt.punctuationList = B0.split("");
const jJ = Pt.punctuationRegexStart = new RegExp("^[" + B0 + "]+"), xJ = Pt.punctuationRegexEnd = new RegExp("[" + B0 + "]+$");
function SJ(e) {
  e = (0, $J.unifyNonBreakingSpace)(e), e = e.replace("&amp", "");
  const a = new RegExp("(\\\\)", "g");
  return e = e.replace(a, ""), e = e.replace(jJ, ""), e = e.replace(xJ, ""), e;
}
Object.defineProperty(gt, "__esModule", {
  value: !0
});
gt.default = RJ;
var OJ = CJ(zc), W2 = K, B3 = IJ(Pt);
function W3(e) {
  if (typeof WeakMap != "function") return null;
  var a = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (W3 = function(n) {
    return n ? t : a;
  })(e);
}
function IJ(e, a) {
  if (e && e.__esModule) return e;
  if (e === null || typeof e != "object" && typeof e != "function") return { default: e };
  var t = W3(a);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, r = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var o in e) if (o !== "default" && {}.hasOwnProperty.call(e, o)) {
    var l = r ? Object.getOwnPropertyDescriptor(e, o) : null;
    l && (l.get || l.set) ? Object.defineProperty(n, o, l) : n[o] = e[o];
  }
  return n.default = e, t && t.set(e, n), n;
}
function CJ(e) {
  return e && e.__esModule ? e : { default: e };
}
const PJ = new RegExp(`([${B3.punctuationRegexString}])`, "g");
function RJ(e, a = "\\s", t = !0) {
  if (e = (0, OJ.default)(e), e === "")
    return [];
  const n = new RegExp(a, "g");
  let r = e.split(n);
  return t ? r = r.map(B3.default) : r = (0, W2.flatMap)(r, (o) => o.replace(PJ, " $1 ").split(" ")), (0, W2.filter)(r, function(o) {
    return o.trim() !== "";
  });
}
var Iu = {}, Xi = {};
Object.defineProperty(Xi, "__esModule", {
  value: !0
});
Xi.default = void 0;
class DJ extends Error {
  /**
   * Constructs a MissingArgumentError.
   * @param {string} message The message to show when the error is thrown.
   * @constructor
   */
  constructor(a) {
    super(a), this.name = "MissingArgumentError";
  }
}
Xi.default = DJ;
var Og = {}, cf = {};
Object.defineProperty(cf, "__esModule", {
  value: !0
});
cf.default = MJ;
var NJ = LJ(Xt);
function LJ(e) {
  return e && e.__esModule ? e : { default: e };
}
function MJ(e) {
  let a = "";
  return e.name === "img" && (a = (0, NJ.default)(e.attributes.alt || ""), a = a.replace(/&quot;/g, '"'), a = a.replace(/&#039;/g, "'")), a;
}
var $o = {}, Ig = {}, Cg = {}, pf = {};
Object.defineProperty(pf, "__esModule", {
  value: !0
});
pf.default = BJ;
var qJ = FJ(Xt);
function FJ(e) {
  return e && e.__esModule ? e : { default: e };
}
function BJ(e) {
  return e = e.replace(/<(?!li|\/li|p|\/p|h1|\/h1|h2|\/h2|h3|\/h3|h4|\/h4|h5|\/h5|h6|\/h6|dd).*?>/g, ""), e = (0, qJ.default)(e), e;
}
var Pg = {}, W0 = {}, U0 = {};
Object.defineProperty(U0, "__esModule", {
  value: !0
});
U0.default = KJ;
var WJ = HJ(Qi), UJ = K;
function HJ(e) {
  return e && e.__esModule ? e : { default: e };
}
const GJ = [
  /*
   * These transliteration objects are not language-specific, and will be applied independently on the locale.
   *
   * Currency signs:
   *
   * |   Code   | Glyph | Replacement |     Description     |
   * | -------- | ----- | ----------- | ------------------- |
   * | U+00A3   | £     | (empty)     | British Pound sign  |
   * | U+20AC   | €     | E           | Euro sign           |
   *
   * Decompositions for Latin-1 Supplement:
   *
   * |  Code   | Glyph | Replacement |               Description              |
   * | ------- | ----- | ----------- | -------------------------------------- |
   * | U+00AA  | ª     | a           | Feminine ordinal indicator             |
   * | U+00BA  | º     | o           | Masculine ordinal indicator            |
   * | U+00C0  | À     | A           | Latin capital letter A with grave      |
   * | U+00C1  | Á     | A           | Latin capital letter A with acute      |
   * | U+00C2  | Â     | A           | Latin capital letter A with circumflex |
   * | U+00C3  | Ã     | A           | Latin capital letter A with tilde      |
   * | U+00C4  | Ä     | A           | Latin capital letter A with diaeresis  |
   * | U+00C5  | Å     | A           | Latin capital letter A with ring above |
   * | U+00C6  | Æ     | AE          | Latin capital letter AE                |
   * | U+00C7  | Ç     | C           | Latin capital letter C with cedilla    |
   * | U+00C8  | È     | E           | Latin capital letter E with grave      |
   * | U+00C9  | É     | E           | Latin capital letter E with acute      |
   * | U+00CA  | Ê     | E           | Latin capital letter E with circumflex |
   * | U+00CB  | Ë     | E           | Latin capital letter E with diaeresis  |
   * | U+00CC  | Ì     | I           | Latin capital letter I with grave      |
   * | U+00CD  | Í     | I           | Latin capital letter I with acute      |
   * | U+00CE  | Î     | I           | Latin capital letter I with circumflex |
   * | U+00CF  | Ï     | I           | Latin capital letter I with diaeresis  |
   * | U+00D0  | Ð     | D           | Latin capital letter Eth               |
   * | U+00D1  | Ñ     | N           | Latin capital letter N with tilde      |
   * | U+00D2  | Ò     | O           | Latin capital letter O with grave      |
   * | U+00D3  | Ó     | O           | Latin capital letter O with acute      |
   * | U+00D4  | Ô     | O           | Latin capital letter O with circumflex |
   * | U+00D5  | Õ     | O           | Latin capital letter O with tilde      |
   * | U+00D6  | Ö     | O           | Latin capital letter O with diaeresis  |
   * | U+00D8  | Ø     | O           | Latin capital letter O with stroke     |
   * | U+00D9  | Ù     | U           | Latin capital letter U with grave      |
   * | U+00DA  | Ú     | U           | Latin capital letter U with acute      |
   * | U+00DB  | Û     | U           | Latin capital letter U with circumflex |
   * | U+00DC  | Ü     | U           | Latin capital letter U with diaeresis  |
   * | U+00DD  | Ý     | Y           | Latin capital letter Y with acute      |
   * | U+00DE  | Þ     | TH          | Latin capital letter Thorn             |
   * | U+00DF  | ß     | s           | Latin small letter sharp s             |
   * | U+00E0  | à     | a           | Latin small letter a with grave        |
   * | U+00E1  | á     | a           | Latin small letter a with acute        |
   * | U+00E2  | â     | a           | Latin small letter a with circumflex   |
   * | U+00E3  | ã     | a           | Latin small letter a with tilde        |
   * | U+00E4  | ä     | a           | Latin small letter a with diaeresis    |
   * | U+00E5  | å     | a           | Latin small letter a with ring above   |
   * | U+00E6  | æ     | ae          | Latin small letter ae                  |
   * | U+00E7  | ç     | c           | Latin small letter c with cedilla      |
   * | U+00E8  | è     | e           | Latin small letter e with grave        |
   * | U+00E9  | é     | e           | Latin small letter e with acute        |
   * | U+00EA  | ê     | e           | Latin small letter e with circumflex   |
   * | U+00EB  | ë     | e           | Latin small letter e with diaeresis    |
   * | U+00EC  | ì     | i           | Latin small letter i with grave        |
   * | U+00ED  | í     | i           | Latin small letter i with acute        |
   * | U+00EE  | î     | i           | Latin small letter i with circumflex   |
   * | U+00EF  | ï     | i           | Latin small letter i with diaeresis    |
   * | U+00F0  | ð     | d           | Latin small letter Eth                 |
   * | U+00F1  | ñ     | n           | Latin small letter n with tilde        |
   * | U+00F2  | ò     | o           | Latin small letter o with grave        |
   * | U+00F3  | ó     | o           | Latin small letter o with acute        |
   * | U+00F4  | ô     | o           | Latin small letter o with circumflex   |
   * | U+00F5  | õ     | o           | Latin small letter o with tilde        |
   * | U+00F6  | ö     | o           | Latin small letter o with diaeresis    |
   * | U+00F8  | ø     | o           | Latin small letter o with stroke       |
   * | U+00F9  | ù     | u           | Latin small letter u with grave        |
   * | U+00FA  | ú     | u           | Latin small letter u with acute        |
   * | U+00FB  | û     | u           | Latin small letter u with circumflex   |
   * | U+00FC  | ü     | u           | Latin small letter u with diaeresis    |
   * | U+00FD  | ý     | y           | Latin small letter y with acute        |
   * | U+00FE  | þ     | th          | Latin small letter Thorn               |
   * | U+00FF  | ÿ     | y           | Latin small letter y with diaeresis    |
   *
   * Decompositions for Latin Extended-A:
   *
   * |  Code   | Glyph | Replacement |                    Description                    |
   * | ------- | ----- | ----------- | ------------------------------------------------- |
   * | U+0100  | Ā     | A           | Latin capital letter A with macron                |
   * | U+0101  | ā     | a           | Latin small letter a with macron                  |
   * | U+0102  | Ă     | A           | Latin capital letter A with breve                 |
   * | U+0103  | ă     | a           | Latin small letter a with breve                   |
   * | U+0104  | Ą     | A           | Latin capital letter A with ogonek                |
   * | U+0105  | ą     | a           | Latin small letter a with ogonek                  |
   * | U+0106  | Ć     | C           | Latin capital letter C with acute                 |
   * | U+0107  | ć     | c           | Latin small letter c with acute                   |
   * | U+0108  | Ĉ     | C           | Latin capital letter C with circumflex            |
   * | U+0109  | ĉ     | c           | Latin small letter c with circumflex              |
   * | U+010A  | Ċ     | C           | Latin capital letter C with dot above             |
   * | U+010B  | ċ     | c           | Latin small letter c with dot above               |
   * | U+010C  | Č     | C           | Latin capital letter C with caron                 |
   * | U+010D  | č     | c           | Latin small letter c with caron                   |
   * | U+010E  | Ď     | D           | Latin capital letter D with caron                 |
   * | U+010F  | ď     | d           | Latin small letter d with caron                   |
   * | U+0110  | Đ     | D           | Latin capital letter D with stroke                |
   * | U+0111  | đ     | d           | Latin small letter d with stroke                  |
   * | U+0112  | Ē     | E           | Latin capital letter E with macron                |
   * | U+0113  | ē     | e           | Latin small letter e with macron                  |
   * | U+0114  | Ĕ     | E           | Latin capital letter E with breve                 |
   * | U+0115  | ĕ     | e           | Latin small letter e with breve                   |
   * | U+0116  | Ė     | E           | Latin capital letter E with dot above             |
   * | U+0117  | ė     | e           | Latin small letter e with dot above               |
   * | U+0118  | Ę     | E           | Latin capital letter E with ogonek                |
   * | U+0119  | ę     | e           | Latin small letter e with ogonek                  |
   * | U+011A  | Ě     | E           | Latin capital letter E with caron                 |
   * | U+011B  | ě     | e           | Latin small letter e with caron                   |
   * | U+011C  | Ĝ     | G           | Latin capital letter G with circumflex            |
   * | U+011D  | ĝ     | g           | Latin small letter g with circumflex              |
   * | U+011E  | Ğ     | G           | Latin capital letter G with breve                 |
   * | U+011F  | ğ     | g           | Latin small letter g with breve                   |
   * | U+0120  | Ġ     | G           | Latin capital letter G with dot above             |
   * | U+0121  | ġ     | g           | Latin small letter g with dot above               |
   * | U+0122  | Ģ     | G           | Latin capital letter G with cedilla               |
   * | U+0123  | ģ     | g           | Latin small letter g with cedilla                 |
   * | U+0124  | Ĥ     | H           | Latin capital letter H with circumflex            |
   * | U+0125  | ĥ     | h           | Latin small letter h with circumflex              |
   * | U+0126  | Ħ     | H           | Latin capital letter H with stroke                |
   * | U+0127  | ħ     | h           | Latin small letter h with stroke                  |
   * | U+0128  | Ĩ     | I           | Latin capital letter I with tilde                 |
   * | U+0129  | ĩ     | i           | Latin small letter i with tilde                   |
   * | U+012A  | Ī     | I           | Latin capital letter I with macron                |
   * | U+012B  | ī     | i           | Latin small letter i with macron                  |
   * | U+012C  | Ĭ     | I           | Latin capital letter I with breve                 |
   * | U+012D  | ĭ     | i           | Latin small letter i with breve                   |
   * | U+012E  | Į     | I           | Latin capital letter I with ogonek                |
   * | U+012F  | į     | i           | Latin small letter i with ogonek                  |
   * | U+0130  | İ     | I           | Latin capital letter I with dot above             |
   * | U+0131  | ı     | i           | Latin small letter dotless i                      |
   * | U+0132  | Ĳ     | IJ          | Latin capital ligature IJ                         |
   * | U+0133  | ĳ     | ij          | Latin small ligature ij                           |
   * | U+0134  | Ĵ     | J           | Latin capital letter J with circumflex            |
   * | U+0135  | ĵ     | j           | Latin small letter j with circumflex              |
   * | U+0136  | Ķ     | K           | Latin capital letter K with cedilla               |
   * | U+0137  | ķ     | k           | Latin small letter k with cedilla                 |
   * | U+0138  | ĸ     | k           | Latin small letter Kra                            |
   * | U+0139  | Ĺ     | L           | Latin capital letter L with acute                 |
   * | U+013A  | ĺ     | l           | Latin small letter l with acute                   |
   * | U+013B  | Ļ     | L           | Latin capital letter L with cedilla               |
   * | U+013C  | ļ     | l           | Latin small letter l with cedilla                 |
   * | U+013D  | Ľ     | L           | Latin capital letter L with caron                 |
   * | U+013E  | ľ     | l           | Latin small letter l with caron                   |
   * | U+013F  | Ŀ     | L           | Latin capital letter L with middle dot            |
   * | U+0140  | ŀ     | l           | Latin small letter l with middle dot              |
   * | U+0141  | Ł     | L           | Latin capital letter L with stroke                |
   * | U+0142  | ł     | l           | Latin small letter l with stroke                  |
   * | U+0143  | Ń     | N           | Latin capital letter N with acute                 |
   * | U+0144  | ń     | n           | Latin small letter N with acute                   |
   * | U+0145  | Ņ     | N           | Latin capital letter N with cedilla               |
   * | U+0146  | ņ     | n           | Latin small letter n with cedilla                 |
   * | U+0147  | Ň     | N           | Latin capital letter N with caron                 |
   * | U+0148  | ň     | n           | Latin small letter n with caron                   |
   * | U+0149  | ŉ     | n           | Latin small letter n preceded by apostrophe       |
   * | U+014A  | Ŋ     | N           | Latin capital letter Eng                          |
   * | U+014B  | ŋ     | n           | Latin small letter Eng                            |
   * | U+014C  | Ō     | O           | Latin capital letter O with macron                |
   * | U+014D  | ō     | o           | Latin small letter o with macron                  |
   * | U+014E  | Ŏ     | O           | Latin capital letter O with breve                 |
   * | U+014F  | ŏ     | o           | Latin small letter o with breve                   |
   * | U+0150  | Ő     | O           | Latin capital letter O with double acute          |
   * | U+0151  | ő     | o           | Latin small letter o with double acute            |
   * | U+0152  | Œ     | OE          | Latin capital ligature OE                         |
   * | U+0153  | œ     | oe          | Latin small ligature oe                           |
   * | U+0154  | Ŕ     | R           | Latin capital letter R with acute                 |
   * | U+0155  | ŕ     | r           | Latin small letter r with acute                   |
   * | U+0156  | Ŗ     | R           | Latin capital letter R with cedilla               |
   * | U+0157  | ŗ     | r           | Latin small letter r with cedilla                 |
   * | U+0158  | Ř     | R           | Latin capital letter R with caron                 |
   * | U+0159  | ř     | r           | Latin small letter r with caron                   |
   * | U+015A  | Ś     | S           | Latin capital letter S with acute                 |
   * | U+015B  | ś     | s           | Latin small letter s with acute                   |
   * | U+015C  | Ŝ     | S           | Latin capital letter S with circumflex            |
   * | U+015D  | ŝ     | s           | Latin small letter s with circumflex              |
   * | U+015E  | Ş     | S           | Latin capital letter S with cedilla               |
   * | U+015F  | ş     | s           | Latin small letter s with cedilla                 |
   * | U+0160  | Š     | S           | Latin capital letter S with caron                 |
   * | U+0161  | š     | s           | Latin small letter s with caron                   |
   * | U+0162  | Ţ     | T           | Latin capital letter T with cedilla               |
   * | U+0163  | ţ     | t           | Latin small letter t with cedilla                 |
   * | U+0164  | Ť     | T           | Latin capital letter T with caron                 |
   * | U+0165  | ť     | t           | Latin small letter t with caron                   |
   * | U+0166  | Ŧ     | T           | Latin capital letter T with stroke                |
   * | U+0167  | ŧ     | t           | Latin small letter t with stroke                  |
   * | U+0168  | Ũ     | U           | Latin capital letter U with tilde                 |
   * | U+0169  | ũ     | u           | Latin small letter u with tilde                   |
   * | U+016A  | Ū     | U           | Latin capital letter U with macron                |
   * | U+016B  | ū     | u           | Latin small letter u with macron                  |
   * | U+016C  | Ŭ     | U           | Latin capital letter U with breve                 |
   * | U+016D  | ŭ     | u           | Latin small letter u with breve                   |
   * | U+016E  | Ů     | U           | Latin capital letter U with ring above            |
   * | U+016F  | ů     | u           | Latin small letter u with ring above              |
   * | U+0170  | Ű     | U           | Latin capital letter U with double acute          |
   * | U+0171  | ű     | u           | Latin small letter u with double acute            |
   * | U+0172  | Ų     | U           | Latin capital letter U with ogonek                |
   * | U+0173  | ų     | u           | Latin small letter u with ogonek                  |
   * | U+0174  | Ŵ     | W           | Latin capital letter W with circumflex            |
   * | U+0175  | ŵ     | w           | Latin small letter w with circumflex              |
   * | U+0176  | Ŷ     | Y           | Latin capital letter Y with circumflex            |
   * | U+0177  | ŷ     | y           | Latin small letter y with circumflex              |
   * | U+0178  | Ÿ     | Y           | Latin capital letter Y with diaeresis             |
   * | U+0179  | Ź     | Z           | Latin capital letter Z with acute                 |
   * | U+017A  | ź     | z           | Latin small letter z with acute                   |
   * | U+017B  | Ż     | Z           | Latin capital letter Z with dot above             |
   * | U+017C  | ż     | z           | Latin small letter z with dot above               |
   * | U+017D  | Ž     | Z           | Latin capital letter Z with caron                 |
   * | U+017E  | ž     | z           | Latin small letter z with caron                   |
   * | U+017F  | ſ     | s           | Latin small letter long s                         |
   * | U+01A0  | Ơ     | O           | Latin capital letter O with horn                  |
   * | U+01A1  | ơ     | o           | Latin small letter o with horn                    |
   * | U+01AF  | Ư     | U           | Latin capital letter U with horn                  |
   * | U+01B0  | ư     | u           | Latin small letter u with horn                    |
   * | U+01CD  | Ǎ     | A           | Latin capital letter A with caron                 |
   * | U+01CE  | ǎ     | a           | Latin small letter a with caron                   |
   * | U+01CF  | Ǐ     | I           | Latin capital letter I with caron                 |
   * | U+01D0  | ǐ     | i           | Latin small letter i with caron                   |
   * | U+01D1  | Ǒ     | O           | Latin capital letter O with caron                 |
   * | U+01D2  | ǒ     | o           | Latin small letter o with caron                   |
   * | U+01D3  | Ǔ     | U           | Latin capital letter U with caron                 |
   * | U+01D4  | ǔ     | u           | Latin small letter u with caron                   |
   * | U+01D5  | Ǖ     | U           | Latin capital letter U with diaeresis and macron  |
   * | U+01D6  | ǖ     | u           | Latin small letter u with diaeresis and macron    |
   * | U+01D7  | Ǘ     | U           | Latin capital letter U with diaeresis and acute   |
   * | U+01D8  | ǘ     | u           | Latin small letter u with diaeresis and acute     |
   * | U+01D9  | Ǚ     | U           | Latin capital letter U with diaeresis and caron   |
   * | U+01DA  | ǚ     | u           | Latin small letter u with diaeresis and caron     |
   * | U+01DB  | Ǜ     | U           | Latin capital letter U with diaeresis and grave   |
   * | U+01DC  | ǜ     | u           | Latin small letter u with diaeresis and grave     |
   *
   * Decompositions for Latin Extended-B:
   *
   * |   Code   | Glyph | Replacement |                Description                |
   * | -------- | ----- | ----------- | ----------------------------------------- |
   * | U+0218   | Ș     | S           | Latin capital letter S with comma below   |
   * | U+0219   | ș     | s           | Latin small letter s with comma below     |
   * | U+021A   | Ț     | T           | Latin capital letter T with comma below   |
   * | U+021B   | ț     | t           | Latin small letter t with comma below     |
   *
   * Vowels with diacritic (Chinese, Hanyu Pinyin):
   *
   * |   Code   | Glyph | Replacement |                      Description                      |
   * | -------- | ----- | ----------- | ----------------------------------------------------- |
   * | U+0251   | ɑ     | a           | Latin small letter alpha                              |
   * | U+1EA0   | Ạ     | A           | Latin capital letter A with dot below                 |
   * | U+1EA1   | ạ     | a           | Latin small letter a with dot below                   |
   * | U+1EA2   | Ả     | A           | Latin capital letter A with hook above                |
   * | U+1EA3   | ả     | a           | Latin small letter a with hook above                  |
   * | U+1EA4   | Ấ     | A           | Latin capital letter A with circumflex and acute      |
   * | U+1EA5   | ấ     | a           | Latin small letter a with circumflex and acute        |
   * | U+1EA6   | Ầ     | A           | Latin capital letter A with circumflex and grave      |
   * | U+1EA7   | ầ     | a           | Latin small letter a with circumflex and grave        |
   * | U+1EA8   | Ẩ     | A           | Latin capital letter A with circumflex and hook above |
   * | U+1EA9   | ẩ     | a           | Latin small letter a with circumflex and hook above   |
   * | U+1EAA   | Ẫ     | A           | Latin capital letter A with circumflex and tilde      |
   * | U+1EAB   | ẫ     | a           | Latin small letter a with circumflex and tilde        |
   * | U+1EA6   | Ậ     | A           | Latin capital letter A with circumflex and dot below  |
   * | U+1EAD   | ậ     | a           | Latin small letter a with circumflex and dot below    |
   * | U+1EAE   | Ắ     | A           | Latin capital letter A with breve and acute           |
   * | U+1EAF   | ắ     | a           | Latin small letter a with breve and acute             |
   * | U+1EB0   | Ằ     | A           | Latin capital letter A with breve and grave           |
   * | U+1EB1   | ằ     | a           | Latin small letter a with breve and grave             |
   * | U+1EB2   | Ẳ     | A           | Latin capital letter A with breve and hook above      |
   * | U+1EB3   | ẳ     | a           | Latin small letter a with breve and hook above        |
   * | U+1EB4   | Ẵ     | A           | Latin capital letter A with breve and tilde           |
   * | U+1EB5   | ẵ     | a           | Latin small letter a with breve and tilde             |
   * | U+1EB6   | Ặ     | A           | Latin capital letter A with breve and dot below       |
   * | U+1EB7   | ặ     | a           | Latin small letter a with breve and dot below         |
   * | U+1EB8   | Ẹ     | E           | Latin capital letter E with dot below                 |
   * | U+1EB9   | ẹ     | e           | Latin small letter e with dot below                   |
   * | U+1EBA   | Ẻ     | E           | Latin capital letter E with hook above                |
   * | U+1EBB   | ẻ     | e           | Latin small letter e with hook above                  |
   * | U+1EBC   | Ẽ     | E           | Latin capital letter E with tilde                     |
   * | U+1EBD   | ẽ     | e           | Latin small letter e with tilde                       |
   * | U+1EBE   | Ế     | E           | Latin capital letter E with circumflex and acute      |
   * | U+1EBF   | ế     | e           | Latin small letter e with circumflex and acute        |
   * | U+1EC0   | Ề     | E           | Latin capital letter E with circumflex and grave      |
   * | U+1EC1   | ề     | e           | Latin small letter e with circumflex and grave        |
   * | U+1EC2   | Ể     | E           | Latin capital letter E with circumflex and hook above |
   * | U+1EC3   | ể     | e           | Latin small letter e with circumflex and hook above   |
   * | U+1EC4   | Ễ     | E           | Latin capital letter E with circumflex and tilde      |
   * | U+1EC5   | ễ     | e           | Latin small letter e with circumflex and tilde        |
   * | U+1EC6   | Ệ     | E           | Latin capital letter E with circumflex and dot below  |
   * | U+1EC7   | ệ     | e           | Latin small letter e with circumflex and dot below    |
   * | U+1EC8   | Ỉ     | I           | Latin capital letter I with hook above                |
   * | U+1EC9   | ỉ     | i           | Latin small letter i with hook above                  |
   * | U+1ECA   | Ị     | I           | Latin capital letter I with dot below                 |
   * | U+1ECB   | ị     | i           | Latin small letter i with dot below                   |
   * | U+1ECC   | Ọ     | O           | Latin capital letter O with dot below                 |
   * | U+1ECD   | ọ     | o           | Latin small letter o with dot below                   |
   * | U+1ECE   | Ỏ     | O           | Latin capital letter O with hook above                |
   * | U+1ECF   | ỏ     | o           | Latin small letter o with hook above                  |
   * | U+1ED0   | Ố     | O           | Latin capital letter O with circumflex and acute      |
   * | U+1ED1   | ố     | o           | Latin small letter o with circumflex and acute        |
   * | U+1ED2   | Ồ     | O           | Latin capital letter O with circumflex and grave      |
   * | U+1ED3   | ồ     | o           | Latin small letter o with circumflex and grave        |
   * | U+1ED4   | Ổ     | O           | Latin capital letter O with circumflex and hook above |
   * | U+1ED5   | ổ     | o           | Latin small letter o with circumflex and hook above   |
   * | U+1ED6   | Ỗ     | O           | Latin capital letter O with circumflex and tilde      |
   * | U+1ED7   | ỗ     | o           | Latin small letter o with circumflex and tilde        |
   * | U+1ED8   | Ộ     | O           | Latin capital letter O with circumflex and dot below  |
   * | U+1ED9   | ộ     | o           | Latin small letter o with circumflex and dot below    |
   * | U+1EDA   | Ớ     | O           | Latin capital letter O with horn and acute            |
   * | U+1EDB   | ớ     | o           | Latin small letter o with horn and acute              |
   * | U+1EDC   | Ờ     | O           | Latin capital letter O with horn and grave            |
   * | U+1EDD   | ờ     | o           | Latin small letter o with horn and grave              |
   * | U+1EDE   | Ở     | O           | Latin capital letter O with horn and hook above       |
   * | U+1EDF   | ở     | o           | Latin small letter o with horn and hook above         |
   * | U+1EE0   | Ỡ     | O           | Latin capital letter O with horn and tilde            |
   * | U+1EE1   | ỡ     | o           | Latin small letter o with horn and tilde              |
   * | U+1EE2   | Ợ     | O           | Latin capital letter O with horn and dot below        |
   * | U+1EE3   | ợ     | o           | Latin small letter o with horn and dot below          |
   * | U+1EE4   | Ụ     | U           | Latin capital letter U with dot below                 |
   * | U+1EE5   | ụ     | u           | Latin small letter u with dot below                   |
   * | U+1EE6   | Ủ     | U           | Latin capital letter U with hook above                |
   * | U+1EE7   | ủ     | u           | Latin small letter u with hook above                  |
   * | U+1EE8   | Ứ     | U           | Latin capital letter U with horn and acute            |
   * | U+1EE9   | ứ     | u           | Latin small letter u with horn and acute              |
   * | U+1EEA   | Ừ     | U           | Latin capital letter U with horn and grave            |
   * | U+1EEB   | ừ     | u           | Latin small letter u with horn and grave              |
   * | U+1EEC   | Ử     | U           | Latin capital letter U with horn and hook above       |
   * | U+1EED   | ử     | u           | Latin small letter u with horn and hook above         |
   * | U+1EEE   | Ữ     | U           | Latin capital letter U with horn and tilde            |
   * | U+1EEF   | ữ     | u           | Latin small letter u with horn and tilde              |
   * | U+1EF0   | Ự     | U           | Latin capital letter U with horn and dot below        |
   * | U+1EF1   | ự     | u           | Latin small letter u with horn and dot below          |
   * | U+1EF2   | Ỳ     | Y           | Latin capital letter Y with grave                     |
   * | U+1EF3   | ỳ     | y           | Latin small letter y with grave                       |
   * | U+1EF4   | Ỵ     | Y           | Latin capital letter Y with dot below                 |
   * | U+1EF5   | ỵ     | y           | Latin small letter y with dot below                   |
   * | U+1EF6   | Ỷ     | Y           | Latin capital letter Y with hook above                |
   * | U+1EF7   | ỷ     | y           | Latin small letter y with hook above                  |
   * | U+1EF8   | Ỹ     | Y           | Latin capital letter Y with tilde                     |
   * | U+1EF9   | ỹ     | y           | Latin small letter y with tilde                       |
   */
  // Currency signs:
  {
    letter: /[\u00A3]/g,
    alternative: ""
  },
  {
    letter: /[\u20AC]/g,
    alternative: "E"
  },
  // Decompositions for Latin-1 Supplement:
  {
    letter: /[\u00AA]/g,
    alternative: "a"
  },
  {
    letter: /[\u00BA]/g,
    alternative: "o"
  },
  {
    letter: /[\u00C0]/g,
    alternative: "A"
  },
  {
    letter: /[\u00C1]/g,
    alternative: "A"
  },
  {
    letter: /[\u00C2]/g,
    alternative: "A"
  },
  {
    letter: /[\u00C3]/g,
    alternative: "A"
  },
  {
    letter: /[\u00C4]/g,
    alternative: "A"
  },
  {
    letter: /[\u00C5]/g,
    alternative: "A"
  },
  {
    letter: /[\u00C6]/g,
    alternative: "AE"
  },
  {
    letter: /[\u00C7]/g,
    alternative: "C"
  },
  {
    letter: /[\u00C8]/g,
    alternative: "E"
  },
  {
    letter: /[\u00C9]/g,
    alternative: "E"
  },
  {
    letter: /[\u00CA]/g,
    alternative: "E"
  },
  {
    letter: /[\u00CB]/g,
    alternative: "E"
  },
  {
    letter: /[\u00CC]/g,
    alternative: "I"
  },
  {
    letter: /[\u00CD]/g,
    alternative: "I"
  },
  {
    letter: /[\u00CE]/g,
    alternative: "I"
  },
  {
    letter: /[\u00CF]/g,
    alternative: "I"
  },
  {
    letter: /[\u00D0]/g,
    alternative: "D"
  },
  {
    letter: /[\u00D1]/g,
    alternative: "N"
  },
  {
    letter: /[\u00D2]/g,
    alternative: "O"
  },
  {
    letter: /[\u00D3]/g,
    alternative: "O"
  },
  {
    letter: /[\u00D4]/g,
    alternative: "O"
  },
  {
    letter: /[\u00D5]/g,
    alternative: "O"
  },
  {
    letter: /[\u00D6]/g,
    alternative: "O"
  },
  {
    letter: /[\u00D8]/g,
    alternative: "O"
  },
  {
    letter: /[\u00D9]/g,
    alternative: "U"
  },
  {
    letter: /[\u00DA]/g,
    alternative: "U"
  },
  {
    letter: /[\u00DB]/g,
    alternative: "U"
  },
  {
    letter: /[\u00DC]/g,
    alternative: "U"
  },
  {
    letter: /[\u00DD]/g,
    alternative: "Y"
  },
  {
    letter: /[\u00DE]/g,
    alternative: "TH"
  },
  {
    letter: /[\u00DF]/g,
    alternative: "s"
  },
  {
    letter: /[\u00E0]/g,
    alternative: "a"
  },
  {
    letter: /[\u00E1]/g,
    alternative: "a"
  },
  {
    letter: /[\u00E2]/g,
    alternative: "a"
  },
  {
    letter: /[\u00E3]/g,
    alternative: "a"
  },
  {
    letter: /[\u00E4]/g,
    alternative: "a"
  },
  {
    letter: /[\u00E5]/g,
    alternative: "a"
  },
  {
    letter: /[\u00E6]/g,
    alternative: "ae"
  },
  {
    letter: /[\u00E7]/g,
    alternative: "c"
  },
  {
    letter: /[\u00E8]/g,
    alternative: "e"
  },
  {
    letter: /[\u00E9]/g,
    alternative: "e"
  },
  {
    letter: /[\u00EA]/g,
    alternative: "e"
  },
  {
    letter: /[\u00EB]/g,
    alternative: "e"
  },
  {
    letter: /[\u00EC]/g,
    alternative: "i"
  },
  {
    letter: /[\u00ED]/g,
    alternative: "i"
  },
  {
    letter: /[\u00EE]/g,
    alternative: "i"
  },
  {
    letter: /[\u00EF]/g,
    alternative: "i"
  },
  {
    letter: /[\u00F0]/g,
    alternative: "d"
  },
  {
    letter: /[\u00F1]/g,
    alternative: "n"
  },
  {
    letter: /[\u00F2]/g,
    alternative: "o"
  },
  {
    letter: /[\u00F3]/g,
    alternative: "o"
  },
  {
    letter: /[\u00F4]/g,
    alternative: "o"
  },
  {
    letter: /[\u00F5]/g,
    alternative: "o"
  },
  {
    letter: /[\u00F6]/g,
    alternative: "o"
  },
  {
    letter: /[\u00F8]/g,
    alternative: "o"
  },
  {
    letter: /[\u00F9]/g,
    alternative: "u"
  },
  {
    letter: /[\u00FA]/g,
    alternative: "u"
  },
  {
    letter: /[\u00FB]/g,
    alternative: "u"
  },
  {
    letter: /[\u00FC]/g,
    alternative: "u"
  },
  {
    letter: /[\u00FD]/g,
    alternative: "y"
  },
  {
    letter: /[\u00FE]/g,
    alternative: "th"
  },
  {
    letter: /[\u00FF]/g,
    alternative: "y"
  },
  // Decompositions for Latin Extended-A:
  {
    letter: /[\u0100]/g,
    alternative: "A"
  },
  {
    letter: /[\u0101]/g,
    alternative: "a"
  },
  {
    letter: /[\u0102]/g,
    alternative: "A"
  },
  {
    letter: /[\u0103]/g,
    alternative: "a"
  },
  {
    letter: /[\u0104]/g,
    alternative: "A"
  },
  {
    letter: /[\u0105]/g,
    alternative: "a"
  },
  {
    letter: /[\u0106]/g,
    alternative: "C"
  },
  {
    letter: /[\u0107]/g,
    alternative: "c"
  },
  {
    letter: /[\u0108]/g,
    alternative: "C"
  },
  {
    letter: /[\u0109]/g,
    alternative: "c"
  },
  {
    letter: /[\u010A]/g,
    alternative: "C"
  },
  {
    letter: /[\u010B]/g,
    alternative: "c"
  },
  {
    letter: /[\u010C]/g,
    alternative: "C"
  },
  {
    letter: /[\u010D]/g,
    alternative: "c"
  },
  {
    letter: /[\u010E]/g,
    alternative: "D"
  },
  {
    letter: /[\u010F]/g,
    alternative: "d"
  },
  {
    letter: /[\u0110]/g,
    alternative: "D"
  },
  {
    letter: /[\u0111]/g,
    alternative: "d"
  },
  {
    letter: /[\u0112]/g,
    alternative: "E"
  },
  {
    letter: /[\u0113]/g,
    alternative: "e"
  },
  {
    letter: /[\u0114]/g,
    alternative: "E"
  },
  {
    letter: /[\u0115]/g,
    alternative: "e"
  },
  {
    letter: /[\u0116]/g,
    alternative: "E"
  },
  {
    letter: /[\u0117]/g,
    alternative: "e"
  },
  {
    letter: /[\u0118]/g,
    alternative: "E"
  },
  {
    letter: /[\u0119]/g,
    alternative: "e"
  },
  {
    letter: /[\u011A]/g,
    alternative: "E"
  },
  {
    letter: /[\u011B]/g,
    alternative: "e"
  },
  {
    letter: /[\u011C]/g,
    alternative: "G"
  },
  {
    letter: /[\u011D]/g,
    alternative: "g"
  },
  {
    letter: /[\u011E]/g,
    alternative: "G"
  },
  {
    letter: /[\u011F]/g,
    alternative: "g"
  },
  {
    letter: /[\u0120]/g,
    alternative: "G"
  },
  {
    letter: /[\u0121]/g,
    alternative: "g"
  },
  {
    letter: /[\u0122]/g,
    alternative: "G"
  },
  {
    letter: /[\u0123]/g,
    alternative: "g"
  },
  {
    letter: /[\u0124]/g,
    alternative: "H"
  },
  {
    letter: /[\u0125]/g,
    alternative: "h"
  },
  {
    letter: /[\u0126]/g,
    alternative: "H"
  },
  {
    letter: /[\u0127]/g,
    alternative: "h"
  },
  {
    letter: /[\u0128]/g,
    alternative: "I"
  },
  {
    letter: /[\u0129]/g,
    alternative: "i"
  },
  {
    letter: /[\u012A]/g,
    alternative: "I"
  },
  {
    letter: /[\u012B]/g,
    alternative: "i"
  },
  {
    letter: /[\u012C]/g,
    alternative: "I"
  },
  {
    letter: /[\u012D]/g,
    alternative: "i"
  },
  {
    letter: /[\u012E]/g,
    alternative: "I"
  },
  {
    letter: /[\u012F]/g,
    alternative: "i"
  },
  {
    letter: /[\u0130]/g,
    alternative: "I"
  },
  {
    letter: /[\u0131]/g,
    alternative: "i"
  },
  {
    letter: /[\u0132]/g,
    alternative: "IJ"
  },
  {
    letter: /[\u0133]/g,
    alternative: "ij"
  },
  {
    letter: /[\u0134]/g,
    alternative: "J"
  },
  {
    letter: /[\u0135]/g,
    alternative: "j"
  },
  {
    letter: /[\u0136]/g,
    alternative: "K"
  },
  {
    letter: /[\u0137]/g,
    alternative: "k"
  },
  {
    letter: /[\u0138]/g,
    alternative: "k"
  },
  {
    letter: /[\u0139]/g,
    alternative: "L"
  },
  {
    letter: /[\u013A]/g,
    alternative: "l"
  },
  {
    letter: /[\u013B]/g,
    alternative: "L"
  },
  {
    letter: /[\u013C]/g,
    alternative: "l"
  },
  {
    letter: /[\u013D]/g,
    alternative: "L"
  },
  {
    letter: /[\u013E]/g,
    alternative: "l"
  },
  {
    letter: /[\u013F]/g,
    alternative: "L"
  },
  {
    letter: /[\u0140]/g,
    alternative: "l"
  },
  {
    letter: /[\u0141]/g,
    alternative: "L"
  },
  {
    letter: /[\u0142]/g,
    alternative: "l"
  },
  {
    letter: /[\u0143]/g,
    alternative: "N"
  },
  {
    letter: /[\u0144]/g,
    alternative: "n"
  },
  {
    letter: /[\u0145]/g,
    alternative: "N"
  },
  {
    letter: /[\u0146]/g,
    alternative: "n"
  },
  {
    letter: /[\u0147]/g,
    alternative: "N"
  },
  {
    letter: /[\u0148]/g,
    alternative: "n"
  },
  {
    letter: /[\u0149]/g,
    alternative: "n"
  },
  {
    letter: /[\u014A]/g,
    alternative: "N"
  },
  {
    letter: /[\u014B]/g,
    alternative: "n"
  },
  {
    letter: /[\u014C]/g,
    alternative: "O"
  },
  {
    letter: /[\u014D]/g,
    alternative: "o"
  },
  {
    letter: /[\u014E]/g,
    alternative: "O"
  },
  {
    letter: /[\u014F]/g,
    alternative: "o"
  },
  {
    letter: /[\u0150]/g,
    alternative: "O"
  },
  {
    letter: /[\u0151]/g,
    alternative: "o"
  },
  {
    letter: /[\u0152]/g,
    alternative: "OE"
  },
  {
    letter: /[\u0153]/g,
    alternative: "oe"
  },
  {
    letter: /[\u0154]/g,
    alternative: "R"
  },
  {
    letter: /[\u0155]/g,
    alternative: "r"
  },
  {
    letter: /[\u0156]/g,
    alternative: "R"
  },
  {
    letter: /[\u0157]/g,
    alternative: "r"
  },
  {
    letter: /[\u0158]/g,
    alternative: "R"
  },
  {
    letter: /[\u0159]/g,
    alternative: "r"
  },
  {
    letter: /[\u015A]/g,
    alternative: "S"
  },
  {
    letter: /[\u015B]/g,
    alternative: "s"
  },
  {
    letter: /[\u015C]/g,
    alternative: "S"
  },
  {
    letter: /[\u015D]/g,
    alternative: "s"
  },
  {
    letter: /[\u015E]/g,
    alternative: "S"
  },
  {
    letter: /[\u015F]/g,
    alternative: "s"
  },
  {
    letter: /[\u0160]/g,
    alternative: "S"
  },
  {
    letter: /[\u0161]/g,
    alternative: "s"
  },
  {
    letter: /[\u0162]/g,
    alternative: "T"
  },
  {
    letter: /[\u0163]/g,
    alternative: "t"
  },
  {
    letter: /[\u0164]/g,
    alternative: "T"
  },
  {
    letter: /[\u0165]/g,
    alternative: "t"
  },
  {
    letter: /[\u0166]/g,
    alternative: "T"
  },
  {
    letter: /[\u0167]/g,
    alternative: "t"
  },
  {
    letter: /[\u0168]/g,
    alternative: "U"
  },
  {
    letter: /[\u0169]/g,
    alternative: "u"
  },
  {
    letter: /[\u016A]/g,
    alternative: "U"
  },
  {
    letter: /[\u016B]/g,
    alternative: "u"
  },
  {
    letter: /[\u016C]/g,
    alternative: "U"
  },
  {
    letter: /[\u016D]/g,
    alternative: "u"
  },
  {
    letter: /[\u016E]/g,
    alternative: "U"
  },
  {
    letter: /[\u016F]/g,
    alternative: "u"
  },
  {
    letter: /[\u0170]/g,
    alternative: "U"
  },
  {
    letter: /[\u0171]/g,
    alternative: "u"
  },
  {
    letter: /[\u0172]/g,
    alternative: "U"
  },
  {
    letter: /[\u0173]/g,
    alternative: "u"
  },
  {
    letter: /[\u0174]/g,
    alternative: "W"
  },
  {
    letter: /[\u0175]/g,
    alternative: "w"
  },
  {
    letter: /[\u0176]/g,
    alternative: "Y"
  },
  {
    letter: /[\u0177]/g,
    alternative: "y"
  },
  {
    letter: /[\u0178]/g,
    alternative: "Y"
  },
  {
    letter: /[\u0179]/g,
    alternative: "Z"
  },
  {
    letter: /[\u017A]/g,
    alternative: "z"
  },
  {
    letter: /[\u017B]/g,
    alternative: "Z"
  },
  {
    letter: /[\u017C]/g,
    alternative: "z"
  },
  {
    letter: /[\u017D]/g,
    alternative: "Z"
  },
  {
    letter: /[\u017E]/g,
    alternative: "z"
  },
  {
    letter: /[\u017F]/g,
    alternative: "s"
  },
  {
    letter: /[\u01A0]/g,
    alternative: "O"
  },
  {
    letter: /[\u01A1]/g,
    alternative: "o"
  },
  {
    letter: /[\u01AF]/g,
    alternative: "U"
  },
  {
    letter: /[\u01B0]/g,
    alternative: "u"
  },
  {
    letter: /[\u01CD]/g,
    alternative: "A"
  },
  {
    letter: /[\u01CE]/g,
    alternative: "a"
  },
  {
    letter: /[\u01CF]/g,
    alternative: "I"
  },
  {
    letter: /[\u01D0]/g,
    alternative: "i"
  },
  {
    letter: /[\u01D1]/g,
    alternative: "O"
  },
  {
    letter: /[\u01D2]/g,
    alternative: "o"
  },
  {
    letter: /[\u01D3]/g,
    alternative: "U"
  },
  {
    letter: /[\u01D4]/g,
    alternative: "u"
  },
  {
    letter: /[\u01D5]/g,
    alternative: "U"
  },
  {
    letter: /[\u01D6]/g,
    alternative: "u"
  },
  {
    letter: /[\u01D7]/g,
    alternative: "U"
  },
  {
    letter: /[\u01D8]/g,
    alternative: "u"
  },
  {
    letter: /[\u01D9]/g,
    alternative: "U"
  },
  {
    letter: /[\u01DA]/g,
    alternative: "u"
  },
  {
    letter: /[\u01DB]/g,
    alternative: "U"
  },
  {
    letter: /[\u01DC]/g,
    alternative: "u"
  },
  // Decompositions for Latin Extended-B:
  {
    letter: /[\u0218]/g,
    alternative: "S"
  },
  {
    letter: /[\u0219]/g,
    alternative: "s"
  },
  {
    letter: /[\u021A]/g,
    alternative: "T"
  },
  {
    letter: /[\u021B]/g,
    alternative: "t"
  },
  // Vowels with diacritic (Chinese, Hanyu Pinyin):
  {
    letter: /[\u0251]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EA0]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EA1]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EA2]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EA3]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EA4]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EA5]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EA6]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EA7]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EA8]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EA9]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EAA]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EAB]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EA6]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EAD]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EAE]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EAF]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EB0]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EB1]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EB2]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EB3]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EB4]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EB5]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EB6]/g,
    alternative: "A"
  },
  {
    letter: /[\u1EB7]/g,
    alternative: "a"
  },
  {
    letter: /[\u1EB8]/g,
    alternative: "E"
  },
  {
    letter: /[\u1EB9]/g,
    alternative: "e"
  },
  {
    letter: /[\u1EBA]/g,
    alternative: "E"
  },
  {
    letter: /[\u1EBB]/g,
    alternative: "e"
  },
  {
    letter: /[\u1EBC]/g,
    alternative: "E"
  },
  {
    letter: /[\u1EBD]/g,
    alternative: "e"
  },
  {
    letter: /[\u1EBE]/g,
    alternative: "E"
  },
  {
    letter: /[\u1EBF]/g,
    alternative: "e"
  },
  {
    letter: /[\u1EC0]/g,
    alternative: "E"
  },
  {
    letter: /[\u1EC1]/g,
    alternative: "e"
  },
  {
    letter: /[\u1EC2]/g,
    alternative: "E"
  },
  {
    letter: /[\u1EC3]/g,
    alternative: "e"
  },
  {
    letter: /[\u1EC4]/g,
    alternative: "E"
  },
  {
    letter: /[\u1EC5]/g,
    alternative: "e"
  },
  {
    letter: /[\u1EC6]/g,
    alternative: "E"
  },
  {
    letter: /[\u1EC7]/g,
    alternative: "e"
  },
  {
    letter: /[\u1EC8]/g,
    alternative: "I"
  },
  {
    letter: /[\u1EC9]/g,
    alternative: "i"
  },
  {
    letter: /[\u1ECA]/g,
    alternative: "I"
  },
  {
    letter: /[\u1ECB]/g,
    alternative: "i"
  },
  {
    letter: /[\u1ECC]/g,
    alternative: "O"
  },
  {
    letter: /[\u1ECD]/g,
    alternative: "o"
  },
  {
    letter: /[\u1ECE]/g,
    alternative: "O"
  },
  {
    letter: /[\u1ECF]/g,
    alternative: "o"
  },
  {
    letter: /[\u1ED0]/g,
    alternative: "O"
  },
  {
    letter: /[\u1ED1]/g,
    alternative: "o"
  },
  {
    letter: /[\u1ED2]/g,
    alternative: "O"
  },
  {
    letter: /[\u1ED3]/g,
    alternative: "o"
  },
  {
    letter: /[\u1ED4]/g,
    alternative: "O"
  },
  {
    letter: /[\u1ED5]/g,
    alternative: "o"
  },
  {
    letter: /[\u1ED6]/g,
    alternative: "O"
  },
  {
    letter: /[\u1ED7]/g,
    alternative: "o"
  },
  {
    letter: /[\u1ED8]/g,
    alternative: "O"
  },
  {
    letter: /[\u1ED9]/g,
    alternative: "o"
  },
  {
    letter: /[\u1EDA]/g,
    alternative: "O"
  },
  {
    letter: /[\u1EDB]/g,
    alternative: "o"
  },
  {
    letter: /[\u1EDC]/g,
    alternative: "O"
  },
  {
    letter: /[\u1EDD]/g,
    alternative: "o"
  },
  {
    letter: /[\u1EDE]/g,
    alternative: "O"
  },
  {
    letter: /[\u1EDF]/g,
    alternative: "o"
  },
  {
    letter: /[\u1EE0]/g,
    alternative: "O"
  },
  {
    letter: /[\u1EE1]/g,
    alternative: "o"
  },
  {
    letter: /[\u1EE2]/g,
    alternative: "O"
  },
  {
    letter: /[\u1EE3]/g,
    alternative: "o"
  },
  {
    letter: /[\u1EE4]/g,
    alternative: "U"
  },
  {
    letter: /[\u1EE5]/g,
    alternative: "u"
  },
  {
    letter: /[\u1EE6]/g,
    alternative: "U"
  },
  {
    letter: /[\u1EE7]/g,
    alternative: "u"
  },
  {
    letter: /[\u1EE8]/g,
    alternative: "U"
  },
  {
    letter: /[\u1EE9]/g,
    alternative: "u"
  },
  {
    letter: /[\u1EEA]/g,
    alternative: "U"
  },
  {
    letter: /[\u1EEB]/g,
    alternative: "u"
  },
  {
    letter: /[\u1EEC]/g,
    alternative: "U"
  },
  {
    letter: /[\u1EED]/g,
    alternative: "u"
  },
  {
    letter: /[\u1EEE]/g,
    alternative: "U"
  },
  {
    letter: /[\u1EEF]/g,
    alternative: "u"
  },
  {
    letter: /[\u1EF0]/g,
    alternative: "U"
  },
  {
    letter: /[\u1EF1]/g,
    alternative: "u"
  },
  {
    letter: /[\u1EF2]/g,
    alternative: "Y"
  },
  {
    letter: /[\u1EF3]/g,
    alternative: "y"
  },
  {
    letter: /[\u1EF4]/g,
    alternative: "Y"
  },
  {
    letter: /[\u1EF5]/g,
    alternative: "y"
  },
  {
    letter: /[\u1EF6]/g,
    alternative: "Y"
  },
  {
    letter: /[\u1EF7]/g,
    alternative: "y"
  },
  {
    letter: /[\u1EF8]/g,
    alternative: "Y"
  },
  {
    letter: /[\u1EF9]/g,
    alternative: "y"
  }
], Cu = {
  /*
   * Language: German.
   * |   Code   | Glyph | Replacement |               Description               |
   * | -------- | ----- | ----------- | --------------------------------------- |
   * | U+00C4   | Ä     | Ae          | Latin capital letter A with diaeresis   |
   * | U+00E4   | ä     | ae          | Latin small letter a with diaeresis     |
   * | U+00D6   | Ö     | Oe          | Latin capital letter O with diaeresis   |
   * | U+00F6   | ö     | oe          | Latin small letter o with diaeresis     |
   * | U+00DC   | Ü     | Ue          | Latin capital letter U with diaeresis   |
   * | U+00FC   | ü     | ue          | Latin small letter u with diaeresis     |
   * | U+1E9E   | ẞ     | ss          | Latin big letter sharp s                | This letter is not in the original WP list, was added for consistency.
   * | U+00DF   | ß     | ss          | Latin small letter sharp s              |
   */
  de: [{
    letter: /[\u00C4]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00E4]/g,
    alternative: "ae"
  }, {
    letter: /[\u00D6]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00F6]/g,
    alternative: "oe"
  }, {
    letter: /[\u00DC]/g,
    alternative: "Ue"
  }, {
    letter: /[\u00FC]/g,
    alternative: "ue"
  }, {
    letter: /[\u1E9E]/g,
    alternative: "SS"
  }, {
    letter: /[\u00DF]/g,
    alternative: "ss"
  }],
  /*
   * Language: Danish.
   * |   Code   | Glyph | Replacement |               Description               |
      * | -------- | ----- | ----------- | --------------------------------------- |
      * | U+00C6   | Æ     | Ae          | Latin capital letter AE                 |
      * | U+00E6   | æ     | ae          | Latin small letter ae                   |
      * | U+00D8   | Ø     | Oe          | Latin capital letter O with stroke      |
      * | U+00F8   | ø     | oe          | Latin small letter o with stroke        |
      * | U+00C5   | Å     | Aa          | Latin capital letter A with ring above  |
      * | U+00E5   | å     | aa          | Latin small letter a with ring above    |
   */
  da: [{
    letter: /[\u00C6]/g,
    alternative: "Ae"
  }, {
    letter: /[\u00E6]/g,
    alternative: "ae"
  }, {
    letter: /[\u00D8]/g,
    alternative: "Oe"
  }, {
    letter: /[\u00F8]/g,
    alternative: "oe"
  }, {
    letter: /[\u00C5]/g,
    alternative: "Aa"
  }, {
    letter: /[\u00E5]/g,
    alternative: "aa"
  }],
  /*
   * Language: Catalan.
   * |   Code   | Glyph | Replacement |               Description               |
      * | -------- | ----- | ----------- | --------------------------------------- |
      * | U+00B7   | l·l   | ll          | Flown dot (between two Ls)              |
   */
  ca: [{
    letter: /[\u00B7]/g,
    alternative: "ll"
  }],
  /*
   * Language: Serbian and Bosnian.
   * |   Code   | Glyph | Replacement |               Description               |
      * | -------- | ----- | ----------- | --------------------------------------- |
      * | U+0110   | Đ     | DJ          | Latin capital letter D with stroke      |
      * | U+0111   | đ     | dj          | Latin small letter d with stroke        |
   */
  srAndBs: [{
    letter: /[\u0110]/g,
    alternative: "DJ"
  }, {
    letter: /[\u0111]/g,
    alternative: "dj"
  }]
}, VJ = function(e) {
  switch (e) {
    case "de":
      return Cu.de;
    case "da":
      return Cu.da;
    case "ca":
      return Cu.ca;
    case "sr":
      return Cu.srAndBs;
    case "bs":
      return Cu.srAndBs;
    default:
      return [];
  }
};
function KJ(e) {
  if ((0, UJ.isUndefined)(e))
    return [];
  let a = GJ;
  return a = a.concat(VJ((0, WJ.default)(e))), a;
}
Object.defineProperty(W0, "__esModule", {
  value: !0
});
W0.default = XJ;
var YJ = QJ(U0);
function QJ(e) {
  return e && e.__esModule ? e : { default: e };
}
function XJ(e, a) {
  const t = (0, YJ.default)(a);
  for (let n = t.length - 1; n >= 0; n--)
    e = e.replace(t[n].letter, t[n].alternative);
  return e;
}
var vs = {};
Object.defineProperty(vs, "__esModule", {
  value: !0
});
vs.arraysDifference = dm;
vs.arraysOverlap = H3;
vs.combinations = um;
vs.getIndicesOfCharacter = Hu;
vs.getIndicesOfWords = U3;
vs.replaceTurkishIs = G3;
vs.replaceTurkishIsMemoized = void 0;
var Fi = K, ZJ = JJ(gt);
function JJ(e) {
  return e && e.__esModule ? e : { default: e };
}
function U3(e) {
  const a = [], t = (0, ZJ.default)(e);
  let n = 0;
  return t.forEach(function(r) {
    const o = e.indexOf(r, n);
    a.push(o), n = o + r.length;
  }), a;
}
function Hu(e, a) {
  const t = [];
  if (e.indexOf(a) > -1)
    for (let n = 0; n < e.length; n++)
      e[n] === a && t.push(n);
  return t;
}
function dm(e, a) {
  return (0, Fi.filter)(e, function(t) {
    return !(0, Fi.includes)(a, t);
  });
}
function H3(e, a) {
  return (0, Fi.filter)(e, function(t) {
    return (0, Fi.includes)(a, t);
  });
}
function um(e) {
  function a(t, n) {
    const r = t[0];
    if (typeof r > "u")
      return n;
    for (let o = 0, l = n.length; o < l; ++o)
      n.push(n[o].concat(r));
    return a(t.slice(1), n);
  }
  return a(e, [[]]).slice(1).concat([[]]);
}
function Rg(e, a, t) {
  const n = e.split("");
  return a.forEach(function(r) {
    n.splice(r, 1, t);
  }), n.join("");
}
function G3(e) {
  const a = Hu(e, "İ").concat(Hu(e, "I"), Hu(e, "i"), Hu(e, "ı"));
  if (a.sort(), a.length === 0)
    return [e];
  const t = H3(U3(e), a), n = [];
  um(t).forEach(function(l) {
    if ((0, Fi.isEqual)(l, t))
      n.push([l, [], [], []]);
    else {
      const u = dm(t, l);
      um(u).forEach(function(f) {
        if ((0, Fi.isEqual)(f, u))
          n.push([l, f, [], []]);
        else {
          const y = dm(u, f);
          um(y).forEach(function(v) {
            if ((0, Fi.isEqual)(v, y))
              n.push([l, f, v, []]);
            else {
              const O = dm(y, v);
              n.push([l, f, v, O]);
            }
          });
        }
      });
    }
  });
  const o = [];
  return n.forEach(function(l) {
    const u = Rg(e, l[0], "İ"), c = Rg(u, l[1], "I"), f = Rg(c, l[2], "i"), y = Rg(f, l[3], "ı");
    o.push(y);
  }), o;
}
vs.replaceTurkishIsMemoized = (0, Fi.memoize)(G3);
var U2;
function V3() {
  if (U2) return Pg;
  U2 = 1, Object.defineProperty(Pg, "__esModule", {
    value: !0
  }), Pg.default = f;
  var e = K, a = u(jd), t = u(Xt), n = u(of), r = u(W0), o = vs, l = eo();
  function u(y) {
    return y && y.__esModule ? y : { default: y };
  }
  const c = function(y, z) {
    return y = (0, a.default)(y, !1, "", z), new RegExp(y, "ig");
  };
  function f(y, z, v) {
    const O = (0, l.getLanguage)(v);
    let I = c(z, O);
    if (O === "tr") {
      const M = (0, o.replaceTurkishIsMemoized)(z);
      I = new RegExp(M.map((G) => (0, a.default)(G)).join("|"), "ig");
    }
    const A = y.match(I) || [];
    y = y.replace(I, "");
    const x = (0, n.default)(z, v), w = c(x, O), j = y.match(w) || [];
    let S = A.concat(j);
    const P = (0, r.default)(z, v);
    if (P !== x) {
      const M = c(P, O), G = y.match(M) || [];
      S = S.concat(G);
    }
    return (0, e.map)(S, function(M) {
      return (0, t.default)(M);
    });
  }
  return Pg;
}
var $a = {};
Object.defineProperty($a, "__esModule", {
  value: !0
});
$a.default = $a.SINGLE_QUOTES_REGEX = $a.SINGLE_QUOTES_ARRAY = void 0;
$a.normalize = K3;
$a.normalizeDouble = G0;
$a.normalizeSingle = H0;
const eee = $a.SINGLE_QUOTES_ARRAY = ["'", "‘", "’", "‛", "`", "‹", "›"], aee = $a.SINGLE_QUOTES_REGEX = new RegExp("[" + eee.join("") + "]", "g");
function H0(e) {
  return e.replace(aee, "'");
}
function G0(e) {
  return e.replace(/[“”〝〞〟‟„『』«»]/g, '"');
}
function K3(e) {
  return G0(H0(e));
}
$a.default = {
  normalizeSingle: H0,
  normalizeDouble: G0,
  normalize: K3
};
var H2;
function Y3() {
  if (H2) return Cg;
  H2 = 1, Object.defineProperty(Cg, "__esModule", {
    value: !0
  }), Cg.default = c;
  var e = u(pf), a = u(Xt), t = u(Pt), n = kt, r = u(V3()), o = $a, l = K;
  function u(f) {
    return f && f.__esModule ? f : { default: f };
  }
  function c(f, y, z, v) {
    f = (0, e.default)(f), f = (0, n.unifyAllSpaces)(f), f = (0, o.normalize)(f), y = (0, o.normalize)(y);
    let O = v ? v(f, y) : (0, r.default)(f, y, z);
    O = (0, l.map)(O, function(A) {
      return (0, a.default)((0, t.default)(A));
    });
    const I = (0, l.map)(O, function(A) {
      return f.indexOf(A);
    });
    return {
      count: O.length,
      matches: O,
      position: I.length === 0 ? -1 : Math.min(...I)
    };
  }
  return Cg;
}
var G2;
function bc() {
  if (G2) return Ig;
  G2 = 1, Object.defineProperty(Ig, "__esModule", {
    value: !0
  }), Ig.default = n;
  var e = t(Y3()), a = K;
  function t(r) {
    return r && r.__esModule ? r : { default: r };
  }
  function n(r, o, l = "en_EN", u) {
    let c = 0, f = [], y = [];
    return (0, a.uniq)(o).forEach(function(z) {
      const v = (0, e.default)(r, z, l, u);
      c += v.count, f = f.concat(v.matches), y.push(v.position);
    }), y = y.filter((z) => z >= 0), {
      count: c,
      matches: f,
      position: y.length === 0 ? -1 : Math.min(...y)
    };
  }
  return Ig;
}
var V2;
function ks() {
  if (V2) return $o;
  V2 = 1, Object.defineProperty($o, "__esModule", {
    value: !0
  }), $o.findWordFormsInString = $o.findTopicFormsInString = void 0;
  var e = K, a = t(bc());
  function t(o) {
    return o && o.__esModule ? o : { default: o };
  }
  const n = function(o, l, u, c) {
    const f = o.length, y = Array(f);
    let z = [], v = [];
    for (let A = 0; A < f; A++) {
      const x = (0, a.default)(l, o[A], u, c);
      y[A] = x.count > 0 ? 1 : 0, z.push(x.position), v = v.concat(x.matches);
    }
    const O = (0, e.sum)(y), I = {
      countWordMatches: O,
      percentWordMatches: 0,
      matches: v
    };
    return f > 0 && (I.percentWordMatches = Math.round(O / f * 100)), z = z.filter((A) => A >= 0), I.position = z.length === 0 ? -1 : Math.min(...z), I;
  };
  $o.findWordFormsInString = n;
  const r = function(o, l, u, c, f) {
    let y = n(o.keyphraseForms, l, c, f);
    if (y.keyphraseOrSynonym = "keyphrase", y.percentWordMatches === 100 || u === !1 || (0, e.isEmpty)(o.synonymsForms))
      return y;
    const z = [];
    for (let I = 0; I < o.synonymsForms.length; I++) {
      const A = o.synonymsForms[I];
      z[I] = n(A, l, c, f);
    }
    const v = z.map((I) => I.percentWordMatches), O = v.indexOf(Math.max(...v));
    return y.percentWordMatches >= z[O].percentWordMatches || (y = z[O], y.keyphraseOrSynonym = "synonym"), y;
  };
  return $o.findTopicFormsInString = r, $o;
}
var wc = {};
Object.defineProperty(wc, "__esModule", {
  value: !0
});
wc.default = tee;
function tee(e) {
  const a = e.getTree();
  return a ? a.findAll((t) => t.name === "img") : [];
}
var K2;
function nee() {
  if (K2) return Og;
  K2 = 1, Object.defineProperty(Og, "__esModule", {
    value: !0
  }), Og.default = l;
  var e = r(cf), a = ks(), t = K, n = r(wc);
  function r(u) {
    return u && u.__esModule ? u : { default: u };
  }
  const o = function(u, c, f, y) {
    const z = {
      noAlt: 0,
      withAlt: 0,
      withAltKeyword: 0,
      withAltNonKeyword: 0
    };
    return u.forEach((v) => {
      const O = (0, e.default)(v);
      if (O === "") {
        z.noAlt++;
        return;
      }
      if ((0, t.isEmpty)(c.keyphraseForms)) {
        z.withAlt++;
        return;
      }
      if ((0, a.findTopicFormsInString)(c, O, !0, f, y).percentWordMatches >= 50) {
        z.withAltKeyword++;
        return;
      }
      z.withAltNonKeyword++;
    }), z;
  };
  function l(u, c) {
    const f = (0, n.default)(u), y = c.getResearch("morphology"), z = c.getHelper("matchWordCustomHelper");
    return o(f, y, u.getLocale(), z);
  }
  return Og;
}
var V0 = {}, K0 = {}, ti = {}, Sd = {};
Object.defineProperty(Sd, "__esModule", {
  value: !0
});
Sd.default = ree;
function ree(e) {
  return e.findAll((t) => !!t.sentences).flatMap((t) => t.sentences.map((n) => (n.setParentAttributes(t, e), n)));
}
Object.defineProperty(ti, "__esModule", {
  value: !0
});
ti.default = dee;
ti.getWordsFromTokens = X3;
var see = Q3(Sd), iee = K, oee = Q3(Pt);
function Q3(e) {
  return e && e.__esModule ? e : { default: e };
}
function lee(e, a) {
  for (; e.indexOf(a) !== -1; ) {
    if (e.indexOf(a) === 0 || e.indexOf(a) === e.length - 1) {
      e.splice(e.indexOf(a), 1);
      continue;
    }
    const t = e.indexOf(a), n = e[t - 1], r = e[t + 1];
    e.splice(t - 1, 3, n + a + r);
  }
}
function X3(e, a = !0) {
  let t = e.map((n) => n.text);
  return a || lee(t, "-"), t = t.map((n) => (0, oee.default)(n)), t.filter((n) => n.trim() !== "");
}
function dee(e) {
  const a = (0, see.default)(e.getTree()), t = (0, iee.flatMap)(a.map((n) => n.tokens));
  return X3(t);
}
Object.defineProperty(K0, "__esModule", {
  value: !0
});
K0.default = cee;
var uee = ti;
function cee(e, a) {
  const t = a.getHelper("customCountLength");
  return e.map((n) => {
    const r = t ? t(n.text) : (0, uee.getWordsFromTokens)(n.tokens, !1).length;
    if (r > 0)
      return {
        sentence: n,
        sentenceLength: r,
        firstToken: n.getFirstToken() || null,
        lastToken: n.getLastToken() || null
      };
  }).filter(Boolean);
}
Object.defineProperty(V0, "__esModule", {
  value: !0
});
V0.default = mee;
var pee = Z3(K0), gee = Z3(Sd);
function Z3(e) {
  return e && e.__esModule ? e : { default: e };
}
function mee(e, a) {
  const t = (0, gee.default)(e.getTree());
  return (0, pee.default)(t, a);
}
var Dg = {}, Zt = {}, ni = {}, Od = {}, vc = {};
Object.defineProperty(vc, "__esModule", {
  value: !0
});
vc.default = void 0;
vc.default = ["“", "”", "〝", "〞", "〟", "‟", "„", '"', "「", "」", "『", "』"];
Object.defineProperty(Od, "__esModule", {
  value: !0
});
Od.default = void 0;
var Y2 = fee(vc), Q2 = K;
function fee(e) {
  return e && e.__esModule ? e : { default: e };
}
const hee = (e) => (0, Q2.includes)(Y2.default, e[0]) && (0, Q2.includes)(Y2.default, e[e.length - 1]);
Od.default = hee;
Object.defineProperty(ni, "__esModule", {
  value: !0
});
ni.default = bee;
var yee = zee(Od);
function zee(e) {
  return e && e.__esModule ? e : { default: e };
}
function bee(e) {
  const a = {
    exactMatchRequested: !1,
    keyphrase: e
  };
  return (0, yee.default)(e) && (a.keyphrase = e.substring(1, e.length - 1), a.exactMatchRequested = !0), a;
}
var Jt = {}, ev = { exports: {} };
const wee = {
  0: 65533,
  128: 8364,
  130: 8218,
  131: 402,
  132: 8222,
  133: 8230,
  134: 8224,
  135: 8225,
  136: 710,
  137: 8240,
  138: 352,
  139: 8249,
  140: 338,
  142: 381,
  145: 8216,
  146: 8217,
  147: 8220,
  148: 8221,
  149: 8226,
  150: 8211,
  151: 8212,
  152: 732,
  153: 8482,
  154: 353,
  155: 8250,
  156: 339,
  158: 382,
  159: 376
};
var X2 = wee, vee = kee;
function kee(e) {
  if (e >= 55296 && e <= 57343 || e > 1114111)
    return "�";
  e in X2 && (e = X2[e]);
  var a = "";
  return e > 65535 && (e -= 65536, a += String.fromCharCode(e >>> 10 & 1023 | 55296), e = 56320 | e & 1023), a += String.fromCharCode(e), a;
}
const _ee = "Á", Eee = "á", Aee = "Ă", Tee = "ă", $ee = "∾", jee = "∿", xee = "∾̳", See = "Â", Oee = "â", Iee = "´", Cee = "А", Pee = "а", Ree = "Æ", Dee = "æ", Nee = "⁡", Lee = "𝔄", Mee = "𝔞", qee = "À", Fee = "à", Bee = "ℵ", Wee = "ℵ", Uee = "Α", Hee = "α", Gee = "Ā", Vee = "ā", Kee = "⨿", Yee = "&", Qee = "&", Xee = "⩕", Zee = "⩓", Jee = "∧", eae = "⩜", aae = "⩘", tae = "⩚", nae = "∠", rae = "⦤", sae = "∠", iae = "⦨", oae = "⦩", lae = "⦪", dae = "⦫", uae = "⦬", cae = "⦭", pae = "⦮", gae = "⦯", mae = "∡", fae = "∟", hae = "⊾", yae = "⦝", zae = "∢", bae = "Å", wae = "⍼", vae = "Ą", kae = "ą", _ae = "𝔸", Eae = "𝕒", Aae = "⩯", Tae = "≈", $ae = "⩰", jae = "≊", xae = "≋", Sae = "'", Oae = "⁡", Iae = "≈", Cae = "≊", Pae = "Å", Rae = "å", Dae = "𝒜", Nae = "𝒶", Lae = "≔", Mae = "*", qae = "≈", Fae = "≍", Bae = "Ã", Wae = "ã", Uae = "Ä", Hae = "ä", Gae = "∳", Vae = "⨑", Kae = "≌", Yae = "϶", Qae = "‵", Xae = "∽", Zae = "⋍", Jae = "∖", ete = "⫧", ate = "⊽", tte = "⌅", nte = "⌆", rte = "⌅", ste = "⎵", ite = "⎶", ote = "≌", lte = "Б", dte = "б", ute = "„", cte = "∵", pte = "∵", gte = "∵", mte = "⦰", fte = "϶", hte = "ℬ", yte = "ℬ", zte = "Β", bte = "β", wte = "ℶ", vte = "≬", kte = "𝔅", _te = "𝔟", Ete = "⋂", Ate = "◯", Tte = "⋃", $te = "⨀", jte = "⨁", xte = "⨂", Ste = "⨆", Ote = "★", Ite = "▽", Cte = "△", Pte = "⨄", Rte = "⋁", Dte = "⋀", Nte = "⤍", Lte = "⧫", Mte = "▪", qte = "▴", Fte = "▾", Bte = "◂", Wte = "▸", Ute = "␣", Hte = "▒", Gte = "░", Vte = "▓", Kte = "█", Yte = "=⃥", Qte = "≡⃥", Xte = "⫭", Zte = "⌐", Jte = "𝔹", ene = "𝕓", ane = "⊥", tne = "⊥", nne = "⋈", rne = "⧉", sne = "┐", ine = "╕", one = "╖", lne = "╗", dne = "┌", une = "╒", cne = "╓", pne = "╔", gne = "─", mne = "═", fne = "┬", hne = "╤", yne = "╥", zne = "╦", bne = "┴", wne = "╧", vne = "╨", kne = "╩", _ne = "⊟", Ene = "⊞", Ane = "⊠", Tne = "┘", $ne = "╛", jne = "╜", xne = "╝", Sne = "└", One = "╘", Ine = "╙", Cne = "╚", Pne = "│", Rne = "║", Dne = "┼", Nne = "╪", Lne = "╫", Mne = "╬", qne = "┤", Fne = "╡", Bne = "╢", Wne = "╣", Une = "├", Hne = "╞", Gne = "╟", Vne = "╠", Kne = "‵", Yne = "˘", Qne = "˘", Xne = "¦", Zne = "𝒷", Jne = "ℬ", ere = "⁏", are = "∽", tre = "⋍", nre = "⧅", rre = "\\", sre = "⟈", ire = "•", ore = "•", lre = "≎", dre = "⪮", ure = "≏", cre = "≎", pre = "≏", gre = "Ć", mre = "ć", fre = "⩄", hre = "⩉", yre = "⩋", zre = "∩", bre = "⋒", wre = "⩇", vre = "⩀", kre = "ⅅ", _re = "∩︀", Ere = "⁁", Are = "ˇ", Tre = "ℭ", $re = "⩍", jre = "Č", xre = "č", Sre = "Ç", Ore = "ç", Ire = "Ĉ", Cre = "ĉ", Pre = "∰", Rre = "⩌", Dre = "⩐", Nre = "Ċ", Lre = "ċ", Mre = "¸", qre = "¸", Fre = "⦲", Bre = "¢", Wre = "·", Ure = "·", Hre = "𝔠", Gre = "ℭ", Vre = "Ч", Kre = "ч", Yre = "✓", Qre = "✓", Xre = "Χ", Zre = "χ", Jre = "ˆ", ese = "≗", ase = "↺", tse = "↻", nse = "⊛", rse = "⊚", sse = "⊝", ise = "⊙", ose = "®", lse = "Ⓢ", dse = "⊖", use = "⊕", cse = "⊗", pse = "○", gse = "⧃", mse = "≗", fse = "⨐", hse = "⫯", yse = "⧂", zse = "∲", bse = "”", wse = "’", vse = "♣", kse = "♣", _se = ":", Ese = "∷", Ase = "⩴", Tse = "≔", $se = "≔", jse = ",", xse = "@", Sse = "∁", Ose = "∘", Ise = "∁", Cse = "ℂ", Pse = "≅", Rse = "⩭", Dse = "≡", Nse = "∮", Lse = "∯", Mse = "∮", qse = "𝕔", Fse = "ℂ", Bse = "∐", Wse = "∐", Use = "©", Hse = "©", Gse = "℗", Vse = "∳", Kse = "↵", Yse = "✗", Qse = "⨯", Xse = "𝒞", Zse = "𝒸", Jse = "⫏", eie = "⫑", aie = "⫐", tie = "⫒", nie = "⋯", rie = "⤸", sie = "⤵", iie = "⋞", oie = "⋟", lie = "↶", die = "⤽", uie = "⩈", cie = "⩆", pie = "≍", gie = "∪", mie = "⋓", fie = "⩊", hie = "⊍", yie = "⩅", zie = "∪︀", bie = "↷", wie = "⤼", vie = "⋞", kie = "⋟", _ie = "⋎", Eie = "⋏", Aie = "¤", Tie = "↶", $ie = "↷", jie = "⋎", xie = "⋏", Sie = "∲", Oie = "∱", Iie = "⌭", Cie = "†", Pie = "‡", Rie = "ℸ", Die = "↓", Nie = "↡", Lie = "⇓", Mie = "‐", qie = "⫤", Fie = "⊣", Bie = "⤏", Wie = "˝", Uie = "Ď", Hie = "ď", Gie = "Д", Vie = "д", Kie = "‡", Yie = "⇊", Qie = "ⅅ", Xie = "ⅆ", Zie = "⤑", Jie = "⩷", eoe = "°", aoe = "∇", toe = "Δ", noe = "δ", roe = "⦱", soe = "⥿", ioe = "𝔇", ooe = "𝔡", loe = "⥥", doe = "⇃", uoe = "⇂", coe = "´", poe = "˙", goe = "˝", moe = "`", foe = "˜", hoe = "⋄", yoe = "⋄", zoe = "⋄", boe = "♦", woe = "♦", voe = "¨", koe = "ⅆ", _oe = "ϝ", Eoe = "⋲", Aoe = "÷", Toe = "÷", $oe = "⋇", joe = "⋇", xoe = "Ђ", Soe = "ђ", Ooe = "⌞", Ioe = "⌍", Coe = "$", Poe = "𝔻", Roe = "𝕕", Doe = "¨", Noe = "˙", Loe = "⃜", Moe = "≐", qoe = "≑", Foe = "≐", Boe = "∸", Woe = "∔", Uoe = "⊡", Hoe = "⌆", Goe = "∯", Voe = "¨", Koe = "⇓", Yoe = "⇐", Qoe = "⇔", Xoe = "⫤", Zoe = "⟸", Joe = "⟺", ele = "⟹", ale = "⇒", tle = "⊨", nle = "⇑", rle = "⇕", sle = "∥", ile = "⤓", ole = "↓", lle = "↓", dle = "⇓", ule = "⇵", cle = "̑", ple = "⇊", gle = "⇃", mle = "⇂", fle = "⥐", hle = "⥞", yle = "⥖", zle = "↽", ble = "⥟", wle = "⥗", vle = "⇁", kle = "↧", _le = "⊤", Ele = "⤐", Ale = "⌟", Tle = "⌌", $le = "𝒟", jle = "𝒹", xle = "Ѕ", Sle = "ѕ", Ole = "⧶", Ile = "Đ", Cle = "đ", Ple = "⋱", Rle = "▿", Dle = "▾", Nle = "⇵", Lle = "⥯", Mle = "⦦", qle = "Џ", Fle = "џ", Ble = "⟿", Wle = "É", Ule = "é", Hle = "⩮", Gle = "Ě", Vle = "ě", Kle = "Ê", Yle = "ê", Qle = "≖", Xle = "≕", Zle = "Э", Jle = "э", ede = "⩷", ade = "Ė", tde = "ė", nde = "≑", rde = "ⅇ", sde = "≒", ide = "𝔈", ode = "𝔢", lde = "⪚", dde = "È", ude = "è", cde = "⪖", pde = "⪘", gde = "⪙", mde = "∈", fde = "⏧", hde = "ℓ", yde = "⪕", zde = "⪗", bde = "Ē", wde = "ē", vde = "∅", kde = "∅", _de = "◻", Ede = "∅", Ade = "▫", Tde = " ", $de = " ", jde = " ", xde = "Ŋ", Sde = "ŋ", Ode = " ", Ide = "Ę", Cde = "ę", Pde = "𝔼", Rde = "𝕖", Dde = "⋕", Nde = "⧣", Lde = "⩱", Mde = "ε", qde = "Ε", Fde = "ε", Bde = "ϵ", Wde = "≖", Ude = "≕", Hde = "≂", Gde = "⪖", Vde = "⪕", Kde = "⩵", Yde = "=", Qde = "≂", Xde = "≟", Zde = "⇌", Jde = "≡", eue = "⩸", aue = "⧥", tue = "⥱", nue = "≓", rue = "ℯ", sue = "ℰ", iue = "≐", oue = "⩳", lue = "≂", due = "Η", uue = "η", cue = "Ð", pue = "ð", gue = "Ë", mue = "ë", fue = "€", hue = "!", yue = "∃", zue = "∃", bue = "ℰ", wue = "ⅇ", vue = "ⅇ", kue = "≒", _ue = "Ф", Eue = "ф", Aue = "♀", Tue = "ﬃ", $ue = "ﬀ", jue = "ﬄ", xue = "𝔉", Sue = "𝔣", Oue = "ﬁ", Iue = "◼", Cue = "▪", Pue = "fj", Rue = "♭", Due = "ﬂ", Nue = "▱", Lue = "ƒ", Mue = "𝔽", que = "𝕗", Fue = "∀", Bue = "∀", Wue = "⋔", Uue = "⫙", Hue = "ℱ", Gue = "⨍", Vue = "½", Kue = "⅓", Yue = "¼", Que = "⅕", Xue = "⅙", Zue = "⅛", Jue = "⅔", ece = "⅖", ace = "¾", tce = "⅗", nce = "⅜", rce = "⅘", sce = "⅚", ice = "⅝", oce = "⅞", lce = "⁄", dce = "⌢", uce = "𝒻", cce = "ℱ", pce = "ǵ", gce = "Γ", mce = "γ", fce = "Ϝ", hce = "ϝ", yce = "⪆", zce = "Ğ", bce = "ğ", wce = "Ģ", vce = "Ĝ", kce = "ĝ", _ce = "Г", Ece = "г", Ace = "Ġ", Tce = "ġ", $ce = "≥", jce = "≧", xce = "⪌", Sce = "⋛", Oce = "≥", Ice = "≧", Cce = "⩾", Pce = "⪩", Rce = "⩾", Dce = "⪀", Nce = "⪂", Lce = "⪄", Mce = "⋛︀", qce = "⪔", Fce = "𝔊", Bce = "𝔤", Wce = "≫", Uce = "⋙", Hce = "⋙", Gce = "ℷ", Vce = "Ѓ", Kce = "ѓ", Yce = "⪥", Qce = "≷", Xce = "⪒", Zce = "⪤", Jce = "⪊", epe = "⪊", ape = "⪈", tpe = "≩", npe = "⪈", rpe = "≩", spe = "⋧", ipe = "𝔾", ope = "𝕘", lpe = "`", dpe = "≥", upe = "⋛", cpe = "≧", ppe = "⪢", gpe = "≷", mpe = "⩾", fpe = "≳", hpe = "𝒢", ype = "ℊ", zpe = "≳", bpe = "⪎", wpe = "⪐", vpe = "⪧", kpe = "⩺", _pe = ">", Epe = ">", Ape = "≫", Tpe = "⋗", $pe = "⦕", jpe = "⩼", xpe = "⪆", Spe = "⥸", Ope = "⋗", Ipe = "⋛", Cpe = "⪌", Ppe = "≷", Rpe = "≳", Dpe = "≩︀", Npe = "≩︀", Lpe = "ˇ", Mpe = " ", qpe = "½", Fpe = "ℋ", Bpe = "Ъ", Wpe = "ъ", Upe = "⥈", Hpe = "↔", Gpe = "⇔", Vpe = "↭", Kpe = "^", Ype = "ℏ", Qpe = "Ĥ", Xpe = "ĥ", Zpe = "♥", Jpe = "♥", ege = "…", age = "⊹", tge = "𝔥", nge = "ℌ", rge = "ℋ", sge = "⤥", ige = "⤦", oge = "⇿", lge = "∻", dge = "↩", uge = "↪", cge = "𝕙", pge = "ℍ", gge = "―", mge = "─", fge = "𝒽", hge = "ℋ", yge = "ℏ", zge = "Ħ", bge = "ħ", wge = "≎", vge = "≏", kge = "⁃", _ge = "‐", Ege = "Í", Age = "í", Tge = "⁣", $ge = "Î", jge = "î", xge = "И", Sge = "и", Oge = "İ", Ige = "Е", Cge = "е", Pge = "¡", Rge = "⇔", Dge = "𝔦", Nge = "ℑ", Lge = "Ì", Mge = "ì", qge = "ⅈ", Fge = "⨌", Bge = "∭", Wge = "⧜", Uge = "℩", Hge = "Ĳ", Gge = "ĳ", Vge = "Ī", Kge = "ī", Yge = "ℑ", Qge = "ⅈ", Xge = "ℐ", Zge = "ℑ", Jge = "ı", eme = "ℑ", ame = "⊷", tme = "Ƶ", nme = "⇒", rme = "℅", sme = "∞", ime = "⧝", ome = "ı", lme = "⊺", dme = "∫", ume = "∬", cme = "ℤ", pme = "∫", gme = "⊺", mme = "⋂", fme = "⨗", hme = "⨼", yme = "⁣", zme = "⁢", bme = "Ё", wme = "ё", vme = "Į", kme = "į", _me = "𝕀", Eme = "𝕚", Ame = "Ι", Tme = "ι", $me = "⨼", jme = "¿", xme = "𝒾", Sme = "ℐ", Ome = "∈", Ime = "⋵", Cme = "⋹", Pme = "⋴", Rme = "⋳", Dme = "∈", Nme = "⁢", Lme = "Ĩ", Mme = "ĩ", qme = "І", Fme = "і", Bme = "Ï", Wme = "ï", Ume = "Ĵ", Hme = "ĵ", Gme = "Й", Vme = "й", Kme = "𝔍", Yme = "𝔧", Qme = "ȷ", Xme = "𝕁", Zme = "𝕛", Jme = "𝒥", efe = "𝒿", afe = "Ј", tfe = "ј", nfe = "Є", rfe = "є", sfe = "Κ", ife = "κ", ofe = "ϰ", lfe = "Ķ", dfe = "ķ", ufe = "К", cfe = "к", pfe = "𝔎", gfe = "𝔨", mfe = "ĸ", ffe = "Х", hfe = "х", yfe = "Ќ", zfe = "ќ", bfe = "𝕂", wfe = "𝕜", vfe = "𝒦", kfe = "𝓀", _fe = "⇚", Efe = "Ĺ", Afe = "ĺ", Tfe = "⦴", $fe = "ℒ", jfe = "Λ", xfe = "λ", Sfe = "⟨", Ofe = "⟪", Ife = "⦑", Cfe = "⟨", Pfe = "⪅", Rfe = "ℒ", Dfe = "«", Nfe = "⇤", Lfe = "⤟", Mfe = "←", qfe = "↞", Ffe = "⇐", Bfe = "⤝", Wfe = "↩", Ufe = "↫", Hfe = "⤹", Gfe = "⥳", Vfe = "↢", Kfe = "⤙", Yfe = "⤛", Qfe = "⪫", Xfe = "⪭", Zfe = "⪭︀", Jfe = "⤌", ehe = "⤎", ahe = "❲", the = "{", nhe = "[", rhe = "⦋", she = "⦏", ihe = "⦍", ohe = "Ľ", lhe = "ľ", dhe = "Ļ", uhe = "ļ", che = "⌈", phe = "{", ghe = "Л", mhe = "л", fhe = "⤶", hhe = "“", yhe = "„", zhe = "⥧", bhe = "⥋", whe = "↲", vhe = "≤", khe = "≦", _he = "⟨", Ehe = "⇤", Ahe = "←", The = "←", $he = "⇐", jhe = "⇆", xhe = "↢", She = "⌈", Ohe = "⟦", Ihe = "⥡", Che = "⥙", Phe = "⇃", Rhe = "⌊", Dhe = "↽", Nhe = "↼", Lhe = "⇇", Mhe = "↔", qhe = "↔", Fhe = "⇔", Bhe = "⇆", Whe = "⇋", Uhe = "↭", Hhe = "⥎", Ghe = "↤", Vhe = "⊣", Khe = "⥚", Yhe = "⋋", Qhe = "⧏", Xhe = "⊲", Zhe = "⊴", Jhe = "⥑", eye = "⥠", aye = "⥘", tye = "↿", nye = "⥒", rye = "↼", sye = "⪋", iye = "⋚", oye = "≤", lye = "≦", dye = "⩽", uye = "⪨", cye = "⩽", pye = "⩿", gye = "⪁", mye = "⪃", fye = "⋚︀", hye = "⪓", yye = "⪅", zye = "⋖", bye = "⋚", wye = "⪋", vye = "⋚", kye = "≦", _ye = "≶", Eye = "≶", Aye = "⪡", Tye = "≲", $ye = "⩽", jye = "≲", xye = "⥼", Sye = "⌊", Oye = "𝔏", Iye = "𝔩", Cye = "≶", Pye = "⪑", Rye = "⥢", Dye = "↽", Nye = "↼", Lye = "⥪", Mye = "▄", qye = "Љ", Fye = "љ", Bye = "⇇", Wye = "≪", Uye = "⋘", Hye = "⌞", Gye = "⇚", Vye = "⥫", Kye = "◺", Yye = "Ŀ", Qye = "ŀ", Xye = "⎰", Zye = "⎰", Jye = "⪉", eze = "⪉", aze = "⪇", tze = "≨", nze = "⪇", rze = "≨", sze = "⋦", ize = "⟬", oze = "⇽", lze = "⟦", dze = "⟵", uze = "⟵", cze = "⟸", pze = "⟷", gze = "⟷", mze = "⟺", fze = "⟼", hze = "⟶", yze = "⟶", zze = "⟹", bze = "↫", wze = "↬", vze = "⦅", kze = "𝕃", _ze = "𝕝", Eze = "⨭", Aze = "⨴", Tze = "∗", $ze = "_", jze = "↙", xze = "↘", Sze = "◊", Oze = "◊", Ize = "⧫", Cze = "(", Pze = "⦓", Rze = "⇆", Dze = "⌟", Nze = "⇋", Lze = "⥭", Mze = "‎", qze = "⊿", Fze = "‹", Bze = "𝓁", Wze = "ℒ", Uze = "↰", Hze = "↰", Gze = "≲", Vze = "⪍", Kze = "⪏", Yze = "[", Qze = "‘", Xze = "‚", Zze = "Ł", Jze = "ł", ebe = "⪦", abe = "⩹", tbe = "<", nbe = "<", rbe = "≪", sbe = "⋖", ibe = "⋋", obe = "⋉", lbe = "⥶", dbe = "⩻", ube = "◃", cbe = "⊴", pbe = "◂", gbe = "⦖", mbe = "⥊", fbe = "⥦", hbe = "≨︀", ybe = "≨︀", zbe = "¯", bbe = "♂", wbe = "✠", vbe = "✠", kbe = "↦", _be = "↦", Ebe = "↧", Abe = "↤", Tbe = "↥", $be = "▮", jbe = "⨩", xbe = "М", Sbe = "м", Obe = "—", Ibe = "∺", Cbe = "∡", Pbe = " ", Rbe = "ℳ", Dbe = "𝔐", Nbe = "𝔪", Lbe = "℧", Mbe = "µ", qbe = "*", Fbe = "⫰", Bbe = "∣", Wbe = "·", Ube = "⊟", Hbe = "−", Gbe = "∸", Vbe = "⨪", Kbe = "∓", Ybe = "⫛", Qbe = "…", Xbe = "∓", Zbe = "⊧", Jbe = "𝕄", ewe = "𝕞", awe = "∓", twe = "𝓂", nwe = "ℳ", rwe = "∾", swe = "Μ", iwe = "μ", owe = "⊸", lwe = "⊸", dwe = "∇", uwe = "Ń", cwe = "ń", pwe = "∠⃒", gwe = "≉", mwe = "⩰̸", fwe = "≋̸", hwe = "ŉ", ywe = "≉", zwe = "♮", bwe = "ℕ", wwe = "♮", vwe = " ", kwe = "≎̸", _we = "≏̸", Ewe = "⩃", Awe = "Ň", Twe = "ň", $we = "Ņ", jwe = "ņ", xwe = "≇", Swe = "⩭̸", Owe = "⩂", Iwe = "Н", Cwe = "н", Pwe = "–", Rwe = "⤤", Dwe = "↗", Nwe = "⇗", Lwe = "↗", Mwe = "≠", qwe = "≐̸", Fwe = "​", Bwe = "​", Wwe = "​", Uwe = "​", Hwe = "≢", Gwe = "⤨", Vwe = "≂̸", Kwe = "≫", Ywe = "≪", Qwe = `
`, Xwe = "∄", Zwe = "∄", Jwe = "𝔑", eve = "𝔫", ave = "≧̸", tve = "≱", nve = "≱", rve = "≧̸", sve = "⩾̸", ive = "⩾̸", ove = "⋙̸", lve = "≵", dve = "≫⃒", uve = "≯", cve = "≯", pve = "≫̸", gve = "↮", mve = "⇎", fve = "⫲", hve = "∋", yve = "⋼", zve = "⋺", bve = "∋", wve = "Њ", vve = "њ", kve = "↚", _ve = "⇍", Eve = "‥", Ave = "≦̸", Tve = "≰", $ve = "↚", jve = "⇍", xve = "↮", Sve = "⇎", Ove = "≰", Ive = "≦̸", Cve = "⩽̸", Pve = "⩽̸", Rve = "≮", Dve = "⋘̸", Nve = "≴", Lve = "≪⃒", Mve = "≮", qve = "⋪", Fve = "⋬", Bve = "≪̸", Wve = "∤", Uve = "⁠", Hve = " ", Gve = "𝕟", Vve = "ℕ", Kve = "⫬", Yve = "¬", Qve = "≢", Xve = "≭", Zve = "∦", Jve = "∉", eke = "≠", ake = "≂̸", tke = "∄", nke = "≯", rke = "≱", ske = "≧̸", ike = "≫̸", oke = "≹", lke = "⩾̸", dke = "≵", uke = "≎̸", cke = "≏̸", pke = "∉", gke = "⋵̸", mke = "⋹̸", fke = "∉", hke = "⋷", yke = "⋶", zke = "⧏̸", bke = "⋪", wke = "⋬", vke = "≮", kke = "≰", _ke = "≸", Eke = "≪̸", Ake = "⩽̸", Tke = "≴", $ke = "⪢̸", jke = "⪡̸", xke = "∌", Ske = "∌", Oke = "⋾", Ike = "⋽", Cke = "⊀", Pke = "⪯̸", Rke = "⋠", Dke = "∌", Nke = "⧐̸", Lke = "⋫", Mke = "⋭", qke = "⊏̸", Fke = "⋢", Bke = "⊐̸", Wke = "⋣", Uke = "⊂⃒", Hke = "⊈", Gke = "⊁", Vke = "⪰̸", Kke = "⋡", Yke = "≿̸", Qke = "⊃⃒", Xke = "⊉", Zke = "≁", Jke = "≄", e0e = "≇", a0e = "≉", t0e = "∤", n0e = "∦", r0e = "∦", s0e = "⫽⃥", i0e = "∂̸", o0e = "⨔", l0e = "⊀", d0e = "⋠", u0e = "⊀", c0e = "⪯̸", p0e = "⪯̸", g0e = "⤳̸", m0e = "↛", f0e = "⇏", h0e = "↝̸", y0e = "↛", z0e = "⇏", b0e = "⋫", w0e = "⋭", v0e = "⊁", k0e = "⋡", _0e = "⪰̸", E0e = "𝒩", A0e = "𝓃", T0e = "∤", $0e = "∦", j0e = "≁", x0e = "≄", S0e = "≄", O0e = "∤", I0e = "∦", C0e = "⋢", P0e = "⋣", R0e = "⊄", D0e = "⫅̸", N0e = "⊈", L0e = "⊂⃒", M0e = "⊈", q0e = "⫅̸", F0e = "⊁", B0e = "⪰̸", W0e = "⊅", U0e = "⫆̸", H0e = "⊉", G0e = "⊃⃒", V0e = "⊉", K0e = "⫆̸", Y0e = "≹", Q0e = "Ñ", X0e = "ñ", Z0e = "≸", J0e = "⋪", e_e = "⋬", a_e = "⋫", t_e = "⋭", n_e = "Ν", r_e = "ν", s_e = "#", i_e = "№", o_e = " ", l_e = "≍⃒", d_e = "⊬", u_e = "⊭", c_e = "⊮", p_e = "⊯", g_e = "≥⃒", m_e = ">⃒", f_e = "⤄", h_e = "⧞", y_e = "⤂", z_e = "≤⃒", b_e = "<⃒", w_e = "⊴⃒", v_e = "⤃", k_e = "⊵⃒", __e = "∼⃒", E_e = "⤣", A_e = "↖", T_e = "⇖", $_e = "↖", j_e = "⤧", x_e = "Ó", S_e = "ó", O_e = "⊛", I_e = "Ô", C_e = "ô", P_e = "⊚", R_e = "О", D_e = "о", N_e = "⊝", L_e = "Ő", M_e = "ő", q_e = "⨸", F_e = "⊙", B_e = "⦼", W_e = "Œ", U_e = "œ", H_e = "⦿", G_e = "𝔒", V_e = "𝔬", K_e = "˛", Y_e = "Ò", Q_e = "ò", X_e = "⧁", Z_e = "⦵", J_e = "Ω", e1e = "∮", a1e = "↺", t1e = "⦾", n1e = "⦻", r1e = "‾", s1e = "⧀", i1e = "Ō", o1e = "ō", l1e = "Ω", d1e = "ω", u1e = "Ο", c1e = "ο", p1e = "⦶", g1e = "⊖", m1e = "𝕆", f1e = "𝕠", h1e = "⦷", y1e = "“", z1e = "‘", b1e = "⦹", w1e = "⊕", v1e = "↻", k1e = "⩔", _1e = "∨", E1e = "⩝", A1e = "ℴ", T1e = "ℴ", $1e = "ª", j1e = "º", x1e = "⊶", S1e = "⩖", O1e = "⩗", I1e = "⩛", C1e = "Ⓢ", P1e = "𝒪", R1e = "ℴ", D1e = "Ø", N1e = "ø", L1e = "⊘", M1e = "Õ", q1e = "õ", F1e = "⨶", B1e = "⨷", W1e = "⊗", U1e = "Ö", H1e = "ö", G1e = "⌽", V1e = "‾", K1e = "⏞", Y1e = "⎴", Q1e = "⏜", X1e = "¶", Z1e = "∥", J1e = "∥", eEe = "⫳", aEe = "⫽", tEe = "∂", nEe = "∂", rEe = "П", sEe = "п", iEe = "%", oEe = ".", lEe = "‰", dEe = "⊥", uEe = "‱", cEe = "𝔓", pEe = "𝔭", gEe = "Φ", mEe = "φ", fEe = "ϕ", hEe = "ℳ", yEe = "☎", zEe = "Π", bEe = "π", wEe = "⋔", vEe = "ϖ", kEe = "ℏ", _Ee = "ℎ", EEe = "ℏ", AEe = "⨣", TEe = "⊞", $Ee = "⨢", jEe = "+", xEe = "∔", SEe = "⨥", OEe = "⩲", IEe = "±", CEe = "±", PEe = "⨦", REe = "⨧", DEe = "±", NEe = "ℌ", LEe = "⨕", MEe = "𝕡", qEe = "ℙ", FEe = "£", BEe = "⪷", WEe = "⪻", UEe = "≺", HEe = "≼", GEe = "⪷", VEe = "≺", KEe = "≼", YEe = "≺", QEe = "⪯", XEe = "≼", ZEe = "≾", JEe = "⪯", eAe = "⪹", aAe = "⪵", tAe = "⋨", nAe = "⪯", rAe = "⪳", sAe = "≾", iAe = "′", oAe = "″", lAe = "ℙ", dAe = "⪹", uAe = "⪵", cAe = "⋨", pAe = "∏", gAe = "∏", mAe = "⌮", fAe = "⌒", hAe = "⌓", yAe = "∝", zAe = "∝", bAe = "∷", wAe = "∝", vAe = "≾", kAe = "⊰", _Ae = "𝒫", EAe = "𝓅", AAe = "Ψ", TAe = "ψ", $Ae = " ", jAe = "𝔔", xAe = "𝔮", SAe = "⨌", OAe = "𝕢", IAe = "ℚ", CAe = "⁗", PAe = "𝒬", RAe = "𝓆", DAe = "ℍ", NAe = "⨖", LAe = "?", MAe = "≟", qAe = '"', FAe = '"', BAe = "⇛", WAe = "∽̱", UAe = "Ŕ", HAe = "ŕ", GAe = "√", VAe = "⦳", KAe = "⟩", YAe = "⟫", QAe = "⦒", XAe = "⦥", ZAe = "⟩", JAe = "»", eTe = "⥵", aTe = "⇥", tTe = "⤠", nTe = "⤳", rTe = "→", sTe = "↠", iTe = "⇒", oTe = "⤞", lTe = "↪", dTe = "↬", uTe = "⥅", cTe = "⥴", pTe = "⤖", gTe = "↣", mTe = "↝", fTe = "⤚", hTe = "⤜", yTe = "∶", zTe = "ℚ", bTe = "⤍", wTe = "⤏", vTe = "⤐", kTe = "❳", _Te = "}", ETe = "]", ATe = "⦌", TTe = "⦎", $Te = "⦐", jTe = "Ř", xTe = "ř", STe = "Ŗ", OTe = "ŗ", ITe = "⌉", CTe = "}", PTe = "Р", RTe = "р", DTe = "⤷", NTe = "⥩", LTe = "”", MTe = "”", qTe = "↳", FTe = "ℜ", BTe = "ℛ", WTe = "ℜ", UTe = "ℝ", HTe = "ℜ", GTe = "▭", VTe = "®", KTe = "®", YTe = "∋", QTe = "⇋", XTe = "⥯", ZTe = "⥽", JTe = "⌋", e$e = "𝔯", a$e = "ℜ", t$e = "⥤", n$e = "⇁", r$e = "⇀", s$e = "⥬", i$e = "Ρ", o$e = "ρ", l$e = "ϱ", d$e = "⟩", u$e = "⇥", c$e = "→", p$e = "→", g$e = "⇒", m$e = "⇄", f$e = "↣", h$e = "⌉", y$e = "⟧", z$e = "⥝", b$e = "⥕", w$e = "⇂", v$e = "⌋", k$e = "⇁", _$e = "⇀", E$e = "⇄", A$e = "⇌", T$e = "⇉", $$e = "↝", j$e = "↦", x$e = "⊢", S$e = "⥛", O$e = "⋌", I$e = "⧐", C$e = "⊳", P$e = "⊵", R$e = "⥏", D$e = "⥜", N$e = "⥔", L$e = "↾", M$e = "⥓", q$e = "⇀", F$e = "˚", B$e = "≓", W$e = "⇄", U$e = "⇌", H$e = "‏", G$e = "⎱", V$e = "⎱", K$e = "⫮", Y$e = "⟭", Q$e = "⇾", X$e = "⟧", Z$e = "⦆", J$e = "𝕣", eje = "ℝ", aje = "⨮", tje = "⨵", nje = "⥰", rje = ")", sje = "⦔", ije = "⨒", oje = "⇉", lje = "⇛", dje = "›", uje = "𝓇", cje = "ℛ", pje = "↱", gje = "↱", mje = "]", fje = "’", hje = "’", yje = "⋌", zje = "⋊", bje = "▹", wje = "⊵", vje = "▸", kje = "⧎", _je = "⧴", Eje = "⥨", Aje = "℞", Tje = "Ś", $je = "ś", jje = "‚", xje = "⪸", Sje = "Š", Oje = "š", Ije = "⪼", Cje = "≻", Pje = "≽", Rje = "⪰", Dje = "⪴", Nje = "Ş", Lje = "ş", Mje = "Ŝ", qje = "ŝ", Fje = "⪺", Bje = "⪶", Wje = "⋩", Uje = "⨓", Hje = "≿", Gje = "С", Vje = "с", Kje = "⊡", Yje = "⋅", Qje = "⩦", Xje = "⤥", Zje = "↘", Jje = "⇘", exe = "↘", axe = "§", txe = ";", nxe = "⤩", rxe = "∖", sxe = "∖", ixe = "✶", oxe = "𝔖", lxe = "𝔰", dxe = "⌢", uxe = "♯", cxe = "Щ", pxe = "щ", gxe = "Ш", mxe = "ш", fxe = "↓", hxe = "←", yxe = "∣", zxe = "∥", bxe = "→", wxe = "↑", vxe = "­", kxe = "Σ", _xe = "σ", Exe = "ς", Axe = "ς", Txe = "∼", $xe = "⩪", jxe = "≃", xxe = "≃", Sxe = "⪞", Oxe = "⪠", Ixe = "⪝", Cxe = "⪟", Pxe = "≆", Rxe = "⨤", Dxe = "⥲", Nxe = "←", Lxe = "∘", Mxe = "∖", qxe = "⨳", Fxe = "⧤", Bxe = "∣", Wxe = "⌣", Uxe = "⪪", Hxe = "⪬", Gxe = "⪬︀", Vxe = "Ь", Kxe = "ь", Yxe = "⌿", Qxe = "⧄", Xxe = "/", Zxe = "𝕊", Jxe = "𝕤", eSe = "♠", aSe = "♠", tSe = "∥", nSe = "⊓", rSe = "⊓︀", sSe = "⊔", iSe = "⊔︀", oSe = "√", lSe = "⊏", dSe = "⊑", uSe = "⊏", cSe = "⊑", pSe = "⊐", gSe = "⊒", mSe = "⊐", fSe = "⊒", hSe = "□", ySe = "□", zSe = "⊓", bSe = "⊏", wSe = "⊑", vSe = "⊐", kSe = "⊒", _Se = "⊔", ESe = "▪", ASe = "□", TSe = "▪", $Se = "→", jSe = "𝒮", xSe = "𝓈", SSe = "∖", OSe = "⌣", ISe = "⋆", CSe = "⋆", PSe = "☆", RSe = "★", DSe = "ϵ", NSe = "ϕ", LSe = "¯", MSe = "⊂", qSe = "⋐", FSe = "⪽", BSe = "⫅", WSe = "⊆", USe = "⫃", HSe = "⫁", GSe = "⫋", VSe = "⊊", KSe = "⪿", YSe = "⥹", QSe = "⊂", XSe = "⋐", ZSe = "⊆", JSe = "⫅", e2e = "⊆", a2e = "⊊", t2e = "⫋", n2e = "⫇", r2e = "⫕", s2e = "⫓", i2e = "⪸", o2e = "≻", l2e = "≽", d2e = "≻", u2e = "⪰", c2e = "≽", p2e = "≿", g2e = "⪰", m2e = "⪺", f2e = "⪶", h2e = "⋩", y2e = "≿", z2e = "∋", b2e = "∑", w2e = "∑", v2e = "♪", k2e = "¹", _2e = "²", E2e = "³", A2e = "⊃", T2e = "⋑", $2e = "⪾", j2e = "⫘", x2e = "⫆", S2e = "⊇", O2e = "⫄", I2e = "⊃", C2e = "⊇", P2e = "⟉", R2e = "⫗", D2e = "⥻", N2e = "⫂", L2e = "⫌", M2e = "⊋", q2e = "⫀", F2e = "⊃", B2e = "⋑", W2e = "⊇", U2e = "⫆", H2e = "⊋", G2e = "⫌", V2e = "⫈", K2e = "⫔", Y2e = "⫖", Q2e = "⤦", X2e = "↙", Z2e = "⇙", J2e = "↙", eOe = "⤪", aOe = "ß", tOe = "	", nOe = "⌖", rOe = "Τ", sOe = "τ", iOe = "⎴", oOe = "Ť", lOe = "ť", dOe = "Ţ", uOe = "ţ", cOe = "Т", pOe = "т", gOe = "⃛", mOe = "⌕", fOe = "𝔗", hOe = "𝔱", yOe = "∴", zOe = "∴", bOe = "∴", wOe = "Θ", vOe = "θ", kOe = "ϑ", _Oe = "ϑ", EOe = "≈", AOe = "∼", TOe = "  ", $Oe = " ", jOe = " ", xOe = "≈", SOe = "∼", OOe = "Þ", IOe = "þ", COe = "˜", POe = "∼", ROe = "≃", DOe = "≅", NOe = "≈", LOe = "⨱", MOe = "⊠", qOe = "×", FOe = "⨰", BOe = "∭", WOe = "⤨", UOe = "⌶", HOe = "⫱", GOe = "⊤", VOe = "𝕋", KOe = "𝕥", YOe = "⫚", QOe = "⤩", XOe = "‴", ZOe = "™", JOe = "™", eIe = "▵", aIe = "▿", tIe = "◃", nIe = "⊴", rIe = "≜", sIe = "▹", iIe = "⊵", oIe = "◬", lIe = "≜", dIe = "⨺", uIe = "⃛", cIe = "⨹", pIe = "⧍", gIe = "⨻", mIe = "⏢", fIe = "𝒯", hIe = "𝓉", yIe = "Ц", zIe = "ц", bIe = "Ћ", wIe = "ћ", vIe = "Ŧ", kIe = "ŧ", _Ie = "≬", EIe = "↞", AIe = "↠", TIe = "Ú", $Ie = "ú", jIe = "↑", xIe = "↟", SIe = "⇑", OIe = "⥉", IIe = "Ў", CIe = "ў", PIe = "Ŭ", RIe = "ŭ", DIe = "Û", NIe = "û", LIe = "У", MIe = "у", qIe = "⇅", FIe = "Ű", BIe = "ű", WIe = "⥮", UIe = "⥾", HIe = "𝔘", GIe = "𝔲", VIe = "Ù", KIe = "ù", YIe = "⥣", QIe = "↿", XIe = "↾", ZIe = "▀", JIe = "⌜", eCe = "⌜", aCe = "⌏", tCe = "◸", nCe = "Ū", rCe = "ū", sCe = "¨", iCe = "_", oCe = "⏟", lCe = "⎵", dCe = "⏝", uCe = "⋃", cCe = "⊎", pCe = "Ų", gCe = "ų", mCe = "𝕌", fCe = "𝕦", hCe = "⤒", yCe = "↑", zCe = "↑", bCe = "⇑", wCe = "⇅", vCe = "↕", kCe = "↕", _Ce = "⇕", ECe = "⥮", ACe = "↿", TCe = "↾", $Ce = "⊎", jCe = "↖", xCe = "↗", SCe = "υ", OCe = "ϒ", ICe = "ϒ", CCe = "Υ", PCe = "υ", RCe = "↥", DCe = "⊥", NCe = "⇈", LCe = "⌝", MCe = "⌝", qCe = "⌎", FCe = "Ů", BCe = "ů", WCe = "◹", UCe = "𝒰", HCe = "𝓊", GCe = "⋰", VCe = "Ũ", KCe = "ũ", YCe = "▵", QCe = "▴", XCe = "⇈", ZCe = "Ü", JCe = "ü", ePe = "⦧", aPe = "⦜", tPe = "ϵ", nPe = "ϰ", rPe = "∅", sPe = "ϕ", iPe = "ϖ", oPe = "∝", lPe = "↕", dPe = "⇕", uPe = "ϱ", cPe = "ς", pPe = "⊊︀", gPe = "⫋︀", mPe = "⊋︀", fPe = "⫌︀", hPe = "ϑ", yPe = "⊲", zPe = "⊳", bPe = "⫨", wPe = "⫫", vPe = "⫩", kPe = "В", _Pe = "в", EPe = "⊢", APe = "⊨", TPe = "⊩", $Pe = "⊫", jPe = "⫦", xPe = "⊻", SPe = "∨", OPe = "⋁", IPe = "≚", CPe = "⋮", PPe = "|", RPe = "‖", DPe = "|", NPe = "‖", LPe = "∣", MPe = "|", qPe = "❘", FPe = "≀", BPe = " ", WPe = "𝔙", UPe = "𝔳", HPe = "⊲", GPe = "⊂⃒", VPe = "⊃⃒", KPe = "𝕍", YPe = "𝕧", QPe = "∝", XPe = "⊳", ZPe = "𝒱", JPe = "𝓋", eRe = "⫋︀", aRe = "⊊︀", tRe = "⫌︀", nRe = "⊋︀", rRe = "⊪", sRe = "⦚", iRe = "Ŵ", oRe = "ŵ", lRe = "⩟", dRe = "∧", uRe = "⋀", cRe = "≙", pRe = "℘", gRe = "𝔚", mRe = "𝔴", fRe = "𝕎", hRe = "𝕨", yRe = "℘", zRe = "≀", bRe = "≀", wRe = "𝒲", vRe = "𝓌", kRe = "⋂", _Re = "◯", ERe = "⋃", ARe = "▽", TRe = "𝔛", $Re = "𝔵", jRe = "⟷", xRe = "⟺", SRe = "Ξ", ORe = "ξ", IRe = "⟵", CRe = "⟸", PRe = "⟼", RRe = "⋻", DRe = "⨀", NRe = "𝕏", LRe = "𝕩", MRe = "⨁", qRe = "⨂", FRe = "⟶", BRe = "⟹", WRe = "𝒳", URe = "𝓍", HRe = "⨆", GRe = "⨄", VRe = "△", KRe = "⋁", YRe = "⋀", QRe = "Ý", XRe = "ý", ZRe = "Я", JRe = "я", e3e = "Ŷ", a3e = "ŷ", t3e = "Ы", n3e = "ы", r3e = "¥", s3e = "𝔜", i3e = "𝔶", o3e = "Ї", l3e = "ї", d3e = "𝕐", u3e = "𝕪", c3e = "𝒴", p3e = "𝓎", g3e = "Ю", m3e = "ю", f3e = "ÿ", h3e = "Ÿ", y3e = "Ź", z3e = "ź", b3e = "Ž", w3e = "ž", v3e = "З", k3e = "з", _3e = "Ż", E3e = "ż", A3e = "ℨ", T3e = "​", $3e = "Ζ", j3e = "ζ", x3e = "𝔷", S3e = "ℨ", O3e = "Ж", I3e = "ж", C3e = "⇝", P3e = "𝕫", R3e = "ℤ", D3e = "𝒵", N3e = "𝓏", L3e = "‍", M3e = "‌", q3e = {
  Aacute: _ee,
  aacute: Eee,
  Abreve: Aee,
  abreve: Tee,
  ac: $ee,
  acd: jee,
  acE: xee,
  Acirc: See,
  acirc: Oee,
  acute: Iee,
  Acy: Cee,
  acy: Pee,
  AElig: Ree,
  aelig: Dee,
  af: Nee,
  Afr: Lee,
  afr: Mee,
  Agrave: qee,
  agrave: Fee,
  alefsym: Bee,
  aleph: Wee,
  Alpha: Uee,
  alpha: Hee,
  Amacr: Gee,
  amacr: Vee,
  amalg: Kee,
  amp: Yee,
  AMP: Qee,
  andand: Xee,
  And: Zee,
  and: Jee,
  andd: eae,
  andslope: aae,
  andv: tae,
  ang: nae,
  ange: rae,
  angle: sae,
  angmsdaa: iae,
  angmsdab: oae,
  angmsdac: lae,
  angmsdad: dae,
  angmsdae: uae,
  angmsdaf: cae,
  angmsdag: pae,
  angmsdah: gae,
  angmsd: mae,
  angrt: fae,
  angrtvb: hae,
  angrtvbd: yae,
  angsph: zae,
  angst: bae,
  angzarr: wae,
  Aogon: vae,
  aogon: kae,
  Aopf: _ae,
  aopf: Eae,
  apacir: Aae,
  ap: Tae,
  apE: $ae,
  ape: jae,
  apid: xae,
  apos: Sae,
  ApplyFunction: Oae,
  approx: Iae,
  approxeq: Cae,
  Aring: Pae,
  aring: Rae,
  Ascr: Dae,
  ascr: Nae,
  Assign: Lae,
  ast: Mae,
  asymp: qae,
  asympeq: Fae,
  Atilde: Bae,
  atilde: Wae,
  Auml: Uae,
  auml: Hae,
  awconint: Gae,
  awint: Vae,
  backcong: Kae,
  backepsilon: Yae,
  backprime: Qae,
  backsim: Xae,
  backsimeq: Zae,
  Backslash: Jae,
  Barv: ete,
  barvee: ate,
  barwed: tte,
  Barwed: nte,
  barwedge: rte,
  bbrk: ste,
  bbrktbrk: ite,
  bcong: ote,
  Bcy: lte,
  bcy: dte,
  bdquo: ute,
  becaus: cte,
  because: pte,
  Because: gte,
  bemptyv: mte,
  bepsi: fte,
  bernou: hte,
  Bernoullis: yte,
  Beta: zte,
  beta: bte,
  beth: wte,
  between: vte,
  Bfr: kte,
  bfr: _te,
  bigcap: Ete,
  bigcirc: Ate,
  bigcup: Tte,
  bigodot: $te,
  bigoplus: jte,
  bigotimes: xte,
  bigsqcup: Ste,
  bigstar: Ote,
  bigtriangledown: Ite,
  bigtriangleup: Cte,
  biguplus: Pte,
  bigvee: Rte,
  bigwedge: Dte,
  bkarow: Nte,
  blacklozenge: Lte,
  blacksquare: Mte,
  blacktriangle: qte,
  blacktriangledown: Fte,
  blacktriangleleft: Bte,
  blacktriangleright: Wte,
  blank: Ute,
  blk12: Hte,
  blk14: Gte,
  blk34: Vte,
  block: Kte,
  bne: Yte,
  bnequiv: Qte,
  bNot: Xte,
  bnot: Zte,
  Bopf: Jte,
  bopf: ene,
  bot: ane,
  bottom: tne,
  bowtie: nne,
  boxbox: rne,
  boxdl: sne,
  boxdL: ine,
  boxDl: one,
  boxDL: lne,
  boxdr: dne,
  boxdR: une,
  boxDr: cne,
  boxDR: pne,
  boxh: gne,
  boxH: mne,
  boxhd: fne,
  boxHd: hne,
  boxhD: yne,
  boxHD: zne,
  boxhu: bne,
  boxHu: wne,
  boxhU: vne,
  boxHU: kne,
  boxminus: _ne,
  boxplus: Ene,
  boxtimes: Ane,
  boxul: Tne,
  boxuL: $ne,
  boxUl: jne,
  boxUL: xne,
  boxur: Sne,
  boxuR: One,
  boxUr: Ine,
  boxUR: Cne,
  boxv: Pne,
  boxV: Rne,
  boxvh: Dne,
  boxvH: Nne,
  boxVh: Lne,
  boxVH: Mne,
  boxvl: qne,
  boxvL: Fne,
  boxVl: Bne,
  boxVL: Wne,
  boxvr: Une,
  boxvR: Hne,
  boxVr: Gne,
  boxVR: Vne,
  bprime: Kne,
  breve: Yne,
  Breve: Qne,
  brvbar: Xne,
  bscr: Zne,
  Bscr: Jne,
  bsemi: ere,
  bsim: are,
  bsime: tre,
  bsolb: nre,
  bsol: rre,
  bsolhsub: sre,
  bull: ire,
  bullet: ore,
  bump: lre,
  bumpE: dre,
  bumpe: ure,
  Bumpeq: cre,
  bumpeq: pre,
  Cacute: gre,
  cacute: mre,
  capand: fre,
  capbrcup: hre,
  capcap: yre,
  cap: zre,
  Cap: bre,
  capcup: wre,
  capdot: vre,
  CapitalDifferentialD: kre,
  caps: _re,
  caret: Ere,
  caron: Are,
  Cayleys: Tre,
  ccaps: $re,
  Ccaron: jre,
  ccaron: xre,
  Ccedil: Sre,
  ccedil: Ore,
  Ccirc: Ire,
  ccirc: Cre,
  Cconint: Pre,
  ccups: Rre,
  ccupssm: Dre,
  Cdot: Nre,
  cdot: Lre,
  cedil: Mre,
  Cedilla: qre,
  cemptyv: Fre,
  cent: Bre,
  centerdot: Wre,
  CenterDot: Ure,
  cfr: Hre,
  Cfr: Gre,
  CHcy: Vre,
  chcy: Kre,
  check: Yre,
  checkmark: Qre,
  Chi: Xre,
  chi: Zre,
  circ: Jre,
  circeq: ese,
  circlearrowleft: ase,
  circlearrowright: tse,
  circledast: nse,
  circledcirc: rse,
  circleddash: sse,
  CircleDot: ise,
  circledR: ose,
  circledS: lse,
  CircleMinus: dse,
  CirclePlus: use,
  CircleTimes: cse,
  cir: pse,
  cirE: gse,
  cire: mse,
  cirfnint: fse,
  cirmid: hse,
  cirscir: yse,
  ClockwiseContourIntegral: zse,
  CloseCurlyDoubleQuote: bse,
  CloseCurlyQuote: wse,
  clubs: vse,
  clubsuit: kse,
  colon: _se,
  Colon: Ese,
  Colone: Ase,
  colone: Tse,
  coloneq: $se,
  comma: jse,
  commat: xse,
  comp: Sse,
  compfn: Ose,
  complement: Ise,
  complexes: Cse,
  cong: Pse,
  congdot: Rse,
  Congruent: Dse,
  conint: Nse,
  Conint: Lse,
  ContourIntegral: Mse,
  copf: qse,
  Copf: Fse,
  coprod: Bse,
  Coproduct: Wse,
  copy: Use,
  COPY: Hse,
  copysr: Gse,
  CounterClockwiseContourIntegral: Vse,
  crarr: Kse,
  cross: Yse,
  Cross: Qse,
  Cscr: Xse,
  cscr: Zse,
  csub: Jse,
  csube: eie,
  csup: aie,
  csupe: tie,
  ctdot: nie,
  cudarrl: rie,
  cudarrr: sie,
  cuepr: iie,
  cuesc: oie,
  cularr: lie,
  cularrp: die,
  cupbrcap: uie,
  cupcap: cie,
  CupCap: pie,
  cup: gie,
  Cup: mie,
  cupcup: fie,
  cupdot: hie,
  cupor: yie,
  cups: zie,
  curarr: bie,
  curarrm: wie,
  curlyeqprec: vie,
  curlyeqsucc: kie,
  curlyvee: _ie,
  curlywedge: Eie,
  curren: Aie,
  curvearrowleft: Tie,
  curvearrowright: $ie,
  cuvee: jie,
  cuwed: xie,
  cwconint: Sie,
  cwint: Oie,
  cylcty: Iie,
  dagger: Cie,
  Dagger: Pie,
  daleth: Rie,
  darr: Die,
  Darr: Nie,
  dArr: Lie,
  dash: Mie,
  Dashv: qie,
  dashv: Fie,
  dbkarow: Bie,
  dblac: Wie,
  Dcaron: Uie,
  dcaron: Hie,
  Dcy: Gie,
  dcy: Vie,
  ddagger: Kie,
  ddarr: Yie,
  DD: Qie,
  dd: Xie,
  DDotrahd: Zie,
  ddotseq: Jie,
  deg: eoe,
  Del: aoe,
  Delta: toe,
  delta: noe,
  demptyv: roe,
  dfisht: soe,
  Dfr: ioe,
  dfr: ooe,
  dHar: loe,
  dharl: doe,
  dharr: uoe,
  DiacriticalAcute: coe,
  DiacriticalDot: poe,
  DiacriticalDoubleAcute: goe,
  DiacriticalGrave: moe,
  DiacriticalTilde: foe,
  diam: hoe,
  diamond: yoe,
  Diamond: zoe,
  diamondsuit: boe,
  diams: woe,
  die: voe,
  DifferentialD: koe,
  digamma: _oe,
  disin: Eoe,
  div: Aoe,
  divide: Toe,
  divideontimes: $oe,
  divonx: joe,
  DJcy: xoe,
  djcy: Soe,
  dlcorn: Ooe,
  dlcrop: Ioe,
  dollar: Coe,
  Dopf: Poe,
  dopf: Roe,
  Dot: Doe,
  dot: Noe,
  DotDot: Loe,
  doteq: Moe,
  doteqdot: qoe,
  DotEqual: Foe,
  dotminus: Boe,
  dotplus: Woe,
  dotsquare: Uoe,
  doublebarwedge: Hoe,
  DoubleContourIntegral: Goe,
  DoubleDot: Voe,
  DoubleDownArrow: Koe,
  DoubleLeftArrow: Yoe,
  DoubleLeftRightArrow: Qoe,
  DoubleLeftTee: Xoe,
  DoubleLongLeftArrow: Zoe,
  DoubleLongLeftRightArrow: Joe,
  DoubleLongRightArrow: ele,
  DoubleRightArrow: ale,
  DoubleRightTee: tle,
  DoubleUpArrow: nle,
  DoubleUpDownArrow: rle,
  DoubleVerticalBar: sle,
  DownArrowBar: ile,
  downarrow: ole,
  DownArrow: lle,
  Downarrow: dle,
  DownArrowUpArrow: ule,
  DownBreve: cle,
  downdownarrows: ple,
  downharpoonleft: gle,
  downharpoonright: mle,
  DownLeftRightVector: fle,
  DownLeftTeeVector: hle,
  DownLeftVectorBar: yle,
  DownLeftVector: zle,
  DownRightTeeVector: ble,
  DownRightVectorBar: wle,
  DownRightVector: vle,
  DownTeeArrow: kle,
  DownTee: _le,
  drbkarow: Ele,
  drcorn: Ale,
  drcrop: Tle,
  Dscr: $le,
  dscr: jle,
  DScy: xle,
  dscy: Sle,
  dsol: Ole,
  Dstrok: Ile,
  dstrok: Cle,
  dtdot: Ple,
  dtri: Rle,
  dtrif: Dle,
  duarr: Nle,
  duhar: Lle,
  dwangle: Mle,
  DZcy: qle,
  dzcy: Fle,
  dzigrarr: Ble,
  Eacute: Wle,
  eacute: Ule,
  easter: Hle,
  Ecaron: Gle,
  ecaron: Vle,
  Ecirc: Kle,
  ecirc: Yle,
  ecir: Qle,
  ecolon: Xle,
  Ecy: Zle,
  ecy: Jle,
  eDDot: ede,
  Edot: ade,
  edot: tde,
  eDot: nde,
  ee: rde,
  efDot: sde,
  Efr: ide,
  efr: ode,
  eg: lde,
  Egrave: dde,
  egrave: ude,
  egs: cde,
  egsdot: pde,
  el: gde,
  Element: mde,
  elinters: fde,
  ell: hde,
  els: yde,
  elsdot: zde,
  Emacr: bde,
  emacr: wde,
  empty: vde,
  emptyset: kde,
  EmptySmallSquare: _de,
  emptyv: Ede,
  EmptyVerySmallSquare: Ade,
  emsp13: Tde,
  emsp14: $de,
  emsp: jde,
  ENG: xde,
  eng: Sde,
  ensp: Ode,
  Eogon: Ide,
  eogon: Cde,
  Eopf: Pde,
  eopf: Rde,
  epar: Dde,
  eparsl: Nde,
  eplus: Lde,
  epsi: Mde,
  Epsilon: qde,
  epsilon: Fde,
  epsiv: Bde,
  eqcirc: Wde,
  eqcolon: Ude,
  eqsim: Hde,
  eqslantgtr: Gde,
  eqslantless: Vde,
  Equal: Kde,
  equals: Yde,
  EqualTilde: Qde,
  equest: Xde,
  Equilibrium: Zde,
  equiv: Jde,
  equivDD: eue,
  eqvparsl: aue,
  erarr: tue,
  erDot: nue,
  escr: rue,
  Escr: sue,
  esdot: iue,
  Esim: oue,
  esim: lue,
  Eta: due,
  eta: uue,
  ETH: cue,
  eth: pue,
  Euml: gue,
  euml: mue,
  euro: fue,
  excl: hue,
  exist: yue,
  Exists: zue,
  expectation: bue,
  exponentiale: wue,
  ExponentialE: vue,
  fallingdotseq: kue,
  Fcy: _ue,
  fcy: Eue,
  female: Aue,
  ffilig: Tue,
  fflig: $ue,
  ffllig: jue,
  Ffr: xue,
  ffr: Sue,
  filig: Oue,
  FilledSmallSquare: Iue,
  FilledVerySmallSquare: Cue,
  fjlig: Pue,
  flat: Rue,
  fllig: Due,
  fltns: Nue,
  fnof: Lue,
  Fopf: Mue,
  fopf: que,
  forall: Fue,
  ForAll: Bue,
  fork: Wue,
  forkv: Uue,
  Fouriertrf: Hue,
  fpartint: Gue,
  frac12: Vue,
  frac13: Kue,
  frac14: Yue,
  frac15: Que,
  frac16: Xue,
  frac18: Zue,
  frac23: Jue,
  frac25: ece,
  frac34: ace,
  frac35: tce,
  frac38: nce,
  frac45: rce,
  frac56: sce,
  frac58: ice,
  frac78: oce,
  frasl: lce,
  frown: dce,
  fscr: uce,
  Fscr: cce,
  gacute: pce,
  Gamma: gce,
  gamma: mce,
  Gammad: fce,
  gammad: hce,
  gap: yce,
  Gbreve: zce,
  gbreve: bce,
  Gcedil: wce,
  Gcirc: vce,
  gcirc: kce,
  Gcy: _ce,
  gcy: Ece,
  Gdot: Ace,
  gdot: Tce,
  ge: $ce,
  gE: jce,
  gEl: xce,
  gel: Sce,
  geq: Oce,
  geqq: Ice,
  geqslant: Cce,
  gescc: Pce,
  ges: Rce,
  gesdot: Dce,
  gesdoto: Nce,
  gesdotol: Lce,
  gesl: Mce,
  gesles: qce,
  Gfr: Fce,
  gfr: Bce,
  gg: Wce,
  Gg: Uce,
  ggg: Hce,
  gimel: Gce,
  GJcy: Vce,
  gjcy: Kce,
  gla: Yce,
  gl: Qce,
  glE: Xce,
  glj: Zce,
  gnap: Jce,
  gnapprox: epe,
  gne: ape,
  gnE: tpe,
  gneq: npe,
  gneqq: rpe,
  gnsim: spe,
  Gopf: ipe,
  gopf: ope,
  grave: lpe,
  GreaterEqual: dpe,
  GreaterEqualLess: upe,
  GreaterFullEqual: cpe,
  GreaterGreater: ppe,
  GreaterLess: gpe,
  GreaterSlantEqual: mpe,
  GreaterTilde: fpe,
  Gscr: hpe,
  gscr: ype,
  gsim: zpe,
  gsime: bpe,
  gsiml: wpe,
  gtcc: vpe,
  gtcir: kpe,
  gt: _pe,
  GT: Epe,
  Gt: Ape,
  gtdot: Tpe,
  gtlPar: $pe,
  gtquest: jpe,
  gtrapprox: xpe,
  gtrarr: Spe,
  gtrdot: Ope,
  gtreqless: Ipe,
  gtreqqless: Cpe,
  gtrless: Ppe,
  gtrsim: Rpe,
  gvertneqq: Dpe,
  gvnE: Npe,
  Hacek: Lpe,
  hairsp: Mpe,
  half: qpe,
  hamilt: Fpe,
  HARDcy: Bpe,
  hardcy: Wpe,
  harrcir: Upe,
  harr: Hpe,
  hArr: Gpe,
  harrw: Vpe,
  Hat: Kpe,
  hbar: Ype,
  Hcirc: Qpe,
  hcirc: Xpe,
  hearts: Zpe,
  heartsuit: Jpe,
  hellip: ege,
  hercon: age,
  hfr: tge,
  Hfr: nge,
  HilbertSpace: rge,
  hksearow: sge,
  hkswarow: ige,
  hoarr: oge,
  homtht: lge,
  hookleftarrow: dge,
  hookrightarrow: uge,
  hopf: cge,
  Hopf: pge,
  horbar: gge,
  HorizontalLine: mge,
  hscr: fge,
  Hscr: hge,
  hslash: yge,
  Hstrok: zge,
  hstrok: bge,
  HumpDownHump: wge,
  HumpEqual: vge,
  hybull: kge,
  hyphen: _ge,
  Iacute: Ege,
  iacute: Age,
  ic: Tge,
  Icirc: $ge,
  icirc: jge,
  Icy: xge,
  icy: Sge,
  Idot: Oge,
  IEcy: Ige,
  iecy: Cge,
  iexcl: Pge,
  iff: Rge,
  ifr: Dge,
  Ifr: Nge,
  Igrave: Lge,
  igrave: Mge,
  ii: qge,
  iiiint: Fge,
  iiint: Bge,
  iinfin: Wge,
  iiota: Uge,
  IJlig: Hge,
  ijlig: Gge,
  Imacr: Vge,
  imacr: Kge,
  image: Yge,
  ImaginaryI: Qge,
  imagline: Xge,
  imagpart: Zge,
  imath: Jge,
  Im: eme,
  imof: ame,
  imped: tme,
  Implies: nme,
  incare: rme,
  in: "∈",
  infin: sme,
  infintie: ime,
  inodot: ome,
  intcal: lme,
  int: dme,
  Int: ume,
  integers: cme,
  Integral: pme,
  intercal: gme,
  Intersection: mme,
  intlarhk: fme,
  intprod: hme,
  InvisibleComma: yme,
  InvisibleTimes: zme,
  IOcy: bme,
  iocy: wme,
  Iogon: vme,
  iogon: kme,
  Iopf: _me,
  iopf: Eme,
  Iota: Ame,
  iota: Tme,
  iprod: $me,
  iquest: jme,
  iscr: xme,
  Iscr: Sme,
  isin: Ome,
  isindot: Ime,
  isinE: Cme,
  isins: Pme,
  isinsv: Rme,
  isinv: Dme,
  it: Nme,
  Itilde: Lme,
  itilde: Mme,
  Iukcy: qme,
  iukcy: Fme,
  Iuml: Bme,
  iuml: Wme,
  Jcirc: Ume,
  jcirc: Hme,
  Jcy: Gme,
  jcy: Vme,
  Jfr: Kme,
  jfr: Yme,
  jmath: Qme,
  Jopf: Xme,
  jopf: Zme,
  Jscr: Jme,
  jscr: efe,
  Jsercy: afe,
  jsercy: tfe,
  Jukcy: nfe,
  jukcy: rfe,
  Kappa: sfe,
  kappa: ife,
  kappav: ofe,
  Kcedil: lfe,
  kcedil: dfe,
  Kcy: ufe,
  kcy: cfe,
  Kfr: pfe,
  kfr: gfe,
  kgreen: mfe,
  KHcy: ffe,
  khcy: hfe,
  KJcy: yfe,
  kjcy: zfe,
  Kopf: bfe,
  kopf: wfe,
  Kscr: vfe,
  kscr: kfe,
  lAarr: _fe,
  Lacute: Efe,
  lacute: Afe,
  laemptyv: Tfe,
  lagran: $fe,
  Lambda: jfe,
  lambda: xfe,
  lang: Sfe,
  Lang: Ofe,
  langd: Ife,
  langle: Cfe,
  lap: Pfe,
  Laplacetrf: Rfe,
  laquo: Dfe,
  larrb: Nfe,
  larrbfs: Lfe,
  larr: Mfe,
  Larr: qfe,
  lArr: Ffe,
  larrfs: Bfe,
  larrhk: Wfe,
  larrlp: Ufe,
  larrpl: Hfe,
  larrsim: Gfe,
  larrtl: Vfe,
  latail: Kfe,
  lAtail: Yfe,
  lat: Qfe,
  late: Xfe,
  lates: Zfe,
  lbarr: Jfe,
  lBarr: ehe,
  lbbrk: ahe,
  lbrace: the,
  lbrack: nhe,
  lbrke: rhe,
  lbrksld: she,
  lbrkslu: ihe,
  Lcaron: ohe,
  lcaron: lhe,
  Lcedil: dhe,
  lcedil: uhe,
  lceil: che,
  lcub: phe,
  Lcy: ghe,
  lcy: mhe,
  ldca: fhe,
  ldquo: hhe,
  ldquor: yhe,
  ldrdhar: zhe,
  ldrushar: bhe,
  ldsh: whe,
  le: vhe,
  lE: khe,
  LeftAngleBracket: _he,
  LeftArrowBar: Ehe,
  leftarrow: Ahe,
  LeftArrow: The,
  Leftarrow: $he,
  LeftArrowRightArrow: jhe,
  leftarrowtail: xhe,
  LeftCeiling: She,
  LeftDoubleBracket: Ohe,
  LeftDownTeeVector: Ihe,
  LeftDownVectorBar: Che,
  LeftDownVector: Phe,
  LeftFloor: Rhe,
  leftharpoondown: Dhe,
  leftharpoonup: Nhe,
  leftleftarrows: Lhe,
  leftrightarrow: Mhe,
  LeftRightArrow: qhe,
  Leftrightarrow: Fhe,
  leftrightarrows: Bhe,
  leftrightharpoons: Whe,
  leftrightsquigarrow: Uhe,
  LeftRightVector: Hhe,
  LeftTeeArrow: Ghe,
  LeftTee: Vhe,
  LeftTeeVector: Khe,
  leftthreetimes: Yhe,
  LeftTriangleBar: Qhe,
  LeftTriangle: Xhe,
  LeftTriangleEqual: Zhe,
  LeftUpDownVector: Jhe,
  LeftUpTeeVector: eye,
  LeftUpVectorBar: aye,
  LeftUpVector: tye,
  LeftVectorBar: nye,
  LeftVector: rye,
  lEg: sye,
  leg: iye,
  leq: oye,
  leqq: lye,
  leqslant: dye,
  lescc: uye,
  les: cye,
  lesdot: pye,
  lesdoto: gye,
  lesdotor: mye,
  lesg: fye,
  lesges: hye,
  lessapprox: yye,
  lessdot: zye,
  lesseqgtr: bye,
  lesseqqgtr: wye,
  LessEqualGreater: vye,
  LessFullEqual: kye,
  LessGreater: _ye,
  lessgtr: Eye,
  LessLess: Aye,
  lesssim: Tye,
  LessSlantEqual: $ye,
  LessTilde: jye,
  lfisht: xye,
  lfloor: Sye,
  Lfr: Oye,
  lfr: Iye,
  lg: Cye,
  lgE: Pye,
  lHar: Rye,
  lhard: Dye,
  lharu: Nye,
  lharul: Lye,
  lhblk: Mye,
  LJcy: qye,
  ljcy: Fye,
  llarr: Bye,
  ll: Wye,
  Ll: Uye,
  llcorner: Hye,
  Lleftarrow: Gye,
  llhard: Vye,
  lltri: Kye,
  Lmidot: Yye,
  lmidot: Qye,
  lmoustache: Xye,
  lmoust: Zye,
  lnap: Jye,
  lnapprox: eze,
  lne: aze,
  lnE: tze,
  lneq: nze,
  lneqq: rze,
  lnsim: sze,
  loang: ize,
  loarr: oze,
  lobrk: lze,
  longleftarrow: dze,
  LongLeftArrow: uze,
  Longleftarrow: cze,
  longleftrightarrow: pze,
  LongLeftRightArrow: gze,
  Longleftrightarrow: mze,
  longmapsto: fze,
  longrightarrow: hze,
  LongRightArrow: yze,
  Longrightarrow: zze,
  looparrowleft: bze,
  looparrowright: wze,
  lopar: vze,
  Lopf: kze,
  lopf: _ze,
  loplus: Eze,
  lotimes: Aze,
  lowast: Tze,
  lowbar: $ze,
  LowerLeftArrow: jze,
  LowerRightArrow: xze,
  loz: Sze,
  lozenge: Oze,
  lozf: Ize,
  lpar: Cze,
  lparlt: Pze,
  lrarr: Rze,
  lrcorner: Dze,
  lrhar: Nze,
  lrhard: Lze,
  lrm: Mze,
  lrtri: qze,
  lsaquo: Fze,
  lscr: Bze,
  Lscr: Wze,
  lsh: Uze,
  Lsh: Hze,
  lsim: Gze,
  lsime: Vze,
  lsimg: Kze,
  lsqb: Yze,
  lsquo: Qze,
  lsquor: Xze,
  Lstrok: Zze,
  lstrok: Jze,
  ltcc: ebe,
  ltcir: abe,
  lt: tbe,
  LT: nbe,
  Lt: rbe,
  ltdot: sbe,
  lthree: ibe,
  ltimes: obe,
  ltlarr: lbe,
  ltquest: dbe,
  ltri: ube,
  ltrie: cbe,
  ltrif: pbe,
  ltrPar: gbe,
  lurdshar: mbe,
  luruhar: fbe,
  lvertneqq: hbe,
  lvnE: ybe,
  macr: zbe,
  male: bbe,
  malt: wbe,
  maltese: vbe,
  Map: "⤅",
  map: kbe,
  mapsto: _be,
  mapstodown: Ebe,
  mapstoleft: Abe,
  mapstoup: Tbe,
  marker: $be,
  mcomma: jbe,
  Mcy: xbe,
  mcy: Sbe,
  mdash: Obe,
  mDDot: Ibe,
  measuredangle: Cbe,
  MediumSpace: Pbe,
  Mellintrf: Rbe,
  Mfr: Dbe,
  mfr: Nbe,
  mho: Lbe,
  micro: Mbe,
  midast: qbe,
  midcir: Fbe,
  mid: Bbe,
  middot: Wbe,
  minusb: Ube,
  minus: Hbe,
  minusd: Gbe,
  minusdu: Vbe,
  MinusPlus: Kbe,
  mlcp: Ybe,
  mldr: Qbe,
  mnplus: Xbe,
  models: Zbe,
  Mopf: Jbe,
  mopf: ewe,
  mp: awe,
  mscr: twe,
  Mscr: nwe,
  mstpos: rwe,
  Mu: swe,
  mu: iwe,
  multimap: owe,
  mumap: lwe,
  nabla: dwe,
  Nacute: uwe,
  nacute: cwe,
  nang: pwe,
  nap: gwe,
  napE: mwe,
  napid: fwe,
  napos: hwe,
  napprox: ywe,
  natural: zwe,
  naturals: bwe,
  natur: wwe,
  nbsp: vwe,
  nbump: kwe,
  nbumpe: _we,
  ncap: Ewe,
  Ncaron: Awe,
  ncaron: Twe,
  Ncedil: $we,
  ncedil: jwe,
  ncong: xwe,
  ncongdot: Swe,
  ncup: Owe,
  Ncy: Iwe,
  ncy: Cwe,
  ndash: Pwe,
  nearhk: Rwe,
  nearr: Dwe,
  neArr: Nwe,
  nearrow: Lwe,
  ne: Mwe,
  nedot: qwe,
  NegativeMediumSpace: Fwe,
  NegativeThickSpace: Bwe,
  NegativeThinSpace: Wwe,
  NegativeVeryThinSpace: Uwe,
  nequiv: Hwe,
  nesear: Gwe,
  nesim: Vwe,
  NestedGreaterGreater: Kwe,
  NestedLessLess: Ywe,
  NewLine: Qwe,
  nexist: Xwe,
  nexists: Zwe,
  Nfr: Jwe,
  nfr: eve,
  ngE: ave,
  nge: tve,
  ngeq: nve,
  ngeqq: rve,
  ngeqslant: sve,
  nges: ive,
  nGg: ove,
  ngsim: lve,
  nGt: dve,
  ngt: uve,
  ngtr: cve,
  nGtv: pve,
  nharr: gve,
  nhArr: mve,
  nhpar: fve,
  ni: hve,
  nis: yve,
  nisd: zve,
  niv: bve,
  NJcy: wve,
  njcy: vve,
  nlarr: kve,
  nlArr: _ve,
  nldr: Eve,
  nlE: Ave,
  nle: Tve,
  nleftarrow: $ve,
  nLeftarrow: jve,
  nleftrightarrow: xve,
  nLeftrightarrow: Sve,
  nleq: Ove,
  nleqq: Ive,
  nleqslant: Cve,
  nles: Pve,
  nless: Rve,
  nLl: Dve,
  nlsim: Nve,
  nLt: Lve,
  nlt: Mve,
  nltri: qve,
  nltrie: Fve,
  nLtv: Bve,
  nmid: Wve,
  NoBreak: Uve,
  NonBreakingSpace: Hve,
  nopf: Gve,
  Nopf: Vve,
  Not: Kve,
  not: Yve,
  NotCongruent: Qve,
  NotCupCap: Xve,
  NotDoubleVerticalBar: Zve,
  NotElement: Jve,
  NotEqual: eke,
  NotEqualTilde: ake,
  NotExists: tke,
  NotGreater: nke,
  NotGreaterEqual: rke,
  NotGreaterFullEqual: ske,
  NotGreaterGreater: ike,
  NotGreaterLess: oke,
  NotGreaterSlantEqual: lke,
  NotGreaterTilde: dke,
  NotHumpDownHump: uke,
  NotHumpEqual: cke,
  notin: pke,
  notindot: gke,
  notinE: mke,
  notinva: fke,
  notinvb: hke,
  notinvc: yke,
  NotLeftTriangleBar: zke,
  NotLeftTriangle: bke,
  NotLeftTriangleEqual: wke,
  NotLess: vke,
  NotLessEqual: kke,
  NotLessGreater: _ke,
  NotLessLess: Eke,
  NotLessSlantEqual: Ake,
  NotLessTilde: Tke,
  NotNestedGreaterGreater: $ke,
  NotNestedLessLess: jke,
  notni: xke,
  notniva: Ske,
  notnivb: Oke,
  notnivc: Ike,
  NotPrecedes: Cke,
  NotPrecedesEqual: Pke,
  NotPrecedesSlantEqual: Rke,
  NotReverseElement: Dke,
  NotRightTriangleBar: Nke,
  NotRightTriangle: Lke,
  NotRightTriangleEqual: Mke,
  NotSquareSubset: qke,
  NotSquareSubsetEqual: Fke,
  NotSquareSuperset: Bke,
  NotSquareSupersetEqual: Wke,
  NotSubset: Uke,
  NotSubsetEqual: Hke,
  NotSucceeds: Gke,
  NotSucceedsEqual: Vke,
  NotSucceedsSlantEqual: Kke,
  NotSucceedsTilde: Yke,
  NotSuperset: Qke,
  NotSupersetEqual: Xke,
  NotTilde: Zke,
  NotTildeEqual: Jke,
  NotTildeFullEqual: e0e,
  NotTildeTilde: a0e,
  NotVerticalBar: t0e,
  nparallel: n0e,
  npar: r0e,
  nparsl: s0e,
  npart: i0e,
  npolint: o0e,
  npr: l0e,
  nprcue: d0e,
  nprec: u0e,
  npreceq: c0e,
  npre: p0e,
  nrarrc: g0e,
  nrarr: m0e,
  nrArr: f0e,
  nrarrw: h0e,
  nrightarrow: y0e,
  nRightarrow: z0e,
  nrtri: b0e,
  nrtrie: w0e,
  nsc: v0e,
  nsccue: k0e,
  nsce: _0e,
  Nscr: E0e,
  nscr: A0e,
  nshortmid: T0e,
  nshortparallel: $0e,
  nsim: j0e,
  nsime: x0e,
  nsimeq: S0e,
  nsmid: O0e,
  nspar: I0e,
  nsqsube: C0e,
  nsqsupe: P0e,
  nsub: R0e,
  nsubE: D0e,
  nsube: N0e,
  nsubset: L0e,
  nsubseteq: M0e,
  nsubseteqq: q0e,
  nsucc: F0e,
  nsucceq: B0e,
  nsup: W0e,
  nsupE: U0e,
  nsupe: H0e,
  nsupset: G0e,
  nsupseteq: V0e,
  nsupseteqq: K0e,
  ntgl: Y0e,
  Ntilde: Q0e,
  ntilde: X0e,
  ntlg: Z0e,
  ntriangleleft: J0e,
  ntrianglelefteq: e_e,
  ntriangleright: a_e,
  ntrianglerighteq: t_e,
  Nu: n_e,
  nu: r_e,
  num: s_e,
  numero: i_e,
  numsp: o_e,
  nvap: l_e,
  nvdash: d_e,
  nvDash: u_e,
  nVdash: c_e,
  nVDash: p_e,
  nvge: g_e,
  nvgt: m_e,
  nvHarr: f_e,
  nvinfin: h_e,
  nvlArr: y_e,
  nvle: z_e,
  nvlt: b_e,
  nvltrie: w_e,
  nvrArr: v_e,
  nvrtrie: k_e,
  nvsim: __e,
  nwarhk: E_e,
  nwarr: A_e,
  nwArr: T_e,
  nwarrow: $_e,
  nwnear: j_e,
  Oacute: x_e,
  oacute: S_e,
  oast: O_e,
  Ocirc: I_e,
  ocirc: C_e,
  ocir: P_e,
  Ocy: R_e,
  ocy: D_e,
  odash: N_e,
  Odblac: L_e,
  odblac: M_e,
  odiv: q_e,
  odot: F_e,
  odsold: B_e,
  OElig: W_e,
  oelig: U_e,
  ofcir: H_e,
  Ofr: G_e,
  ofr: V_e,
  ogon: K_e,
  Ograve: Y_e,
  ograve: Q_e,
  ogt: X_e,
  ohbar: Z_e,
  ohm: J_e,
  oint: e1e,
  olarr: a1e,
  olcir: t1e,
  olcross: n1e,
  oline: r1e,
  olt: s1e,
  Omacr: i1e,
  omacr: o1e,
  Omega: l1e,
  omega: d1e,
  Omicron: u1e,
  omicron: c1e,
  omid: p1e,
  ominus: g1e,
  Oopf: m1e,
  oopf: f1e,
  opar: h1e,
  OpenCurlyDoubleQuote: y1e,
  OpenCurlyQuote: z1e,
  operp: b1e,
  oplus: w1e,
  orarr: v1e,
  Or: k1e,
  or: _1e,
  ord: E1e,
  order: A1e,
  orderof: T1e,
  ordf: $1e,
  ordm: j1e,
  origof: x1e,
  oror: S1e,
  orslope: O1e,
  orv: I1e,
  oS: C1e,
  Oscr: P1e,
  oscr: R1e,
  Oslash: D1e,
  oslash: N1e,
  osol: L1e,
  Otilde: M1e,
  otilde: q1e,
  otimesas: F1e,
  Otimes: B1e,
  otimes: W1e,
  Ouml: U1e,
  ouml: H1e,
  ovbar: G1e,
  OverBar: V1e,
  OverBrace: K1e,
  OverBracket: Y1e,
  OverParenthesis: Q1e,
  para: X1e,
  parallel: Z1e,
  par: J1e,
  parsim: eEe,
  parsl: aEe,
  part: tEe,
  PartialD: nEe,
  Pcy: rEe,
  pcy: sEe,
  percnt: iEe,
  period: oEe,
  permil: lEe,
  perp: dEe,
  pertenk: uEe,
  Pfr: cEe,
  pfr: pEe,
  Phi: gEe,
  phi: mEe,
  phiv: fEe,
  phmmat: hEe,
  phone: yEe,
  Pi: zEe,
  pi: bEe,
  pitchfork: wEe,
  piv: vEe,
  planck: kEe,
  planckh: _Ee,
  plankv: EEe,
  plusacir: AEe,
  plusb: TEe,
  pluscir: $Ee,
  plus: jEe,
  plusdo: xEe,
  plusdu: SEe,
  pluse: OEe,
  PlusMinus: IEe,
  plusmn: CEe,
  plussim: PEe,
  plustwo: REe,
  pm: DEe,
  Poincareplane: NEe,
  pointint: LEe,
  popf: MEe,
  Popf: qEe,
  pound: FEe,
  prap: BEe,
  Pr: WEe,
  pr: UEe,
  prcue: HEe,
  precapprox: GEe,
  prec: VEe,
  preccurlyeq: KEe,
  Precedes: YEe,
  PrecedesEqual: QEe,
  PrecedesSlantEqual: XEe,
  PrecedesTilde: ZEe,
  preceq: JEe,
  precnapprox: eAe,
  precneqq: aAe,
  precnsim: tAe,
  pre: nAe,
  prE: rAe,
  precsim: sAe,
  prime: iAe,
  Prime: oAe,
  primes: lAe,
  prnap: dAe,
  prnE: uAe,
  prnsim: cAe,
  prod: pAe,
  Product: gAe,
  profalar: mAe,
  profline: fAe,
  profsurf: hAe,
  prop: yAe,
  Proportional: zAe,
  Proportion: bAe,
  propto: wAe,
  prsim: vAe,
  prurel: kAe,
  Pscr: _Ae,
  pscr: EAe,
  Psi: AAe,
  psi: TAe,
  puncsp: $Ae,
  Qfr: jAe,
  qfr: xAe,
  qint: SAe,
  qopf: OAe,
  Qopf: IAe,
  qprime: CAe,
  Qscr: PAe,
  qscr: RAe,
  quaternions: DAe,
  quatint: NAe,
  quest: LAe,
  questeq: MAe,
  quot: qAe,
  QUOT: FAe,
  rAarr: BAe,
  race: WAe,
  Racute: UAe,
  racute: HAe,
  radic: GAe,
  raemptyv: VAe,
  rang: KAe,
  Rang: YAe,
  rangd: QAe,
  range: XAe,
  rangle: ZAe,
  raquo: JAe,
  rarrap: eTe,
  rarrb: aTe,
  rarrbfs: tTe,
  rarrc: nTe,
  rarr: rTe,
  Rarr: sTe,
  rArr: iTe,
  rarrfs: oTe,
  rarrhk: lTe,
  rarrlp: dTe,
  rarrpl: uTe,
  rarrsim: cTe,
  Rarrtl: pTe,
  rarrtl: gTe,
  rarrw: mTe,
  ratail: fTe,
  rAtail: hTe,
  ratio: yTe,
  rationals: zTe,
  rbarr: bTe,
  rBarr: wTe,
  RBarr: vTe,
  rbbrk: kTe,
  rbrace: _Te,
  rbrack: ETe,
  rbrke: ATe,
  rbrksld: TTe,
  rbrkslu: $Te,
  Rcaron: jTe,
  rcaron: xTe,
  Rcedil: STe,
  rcedil: OTe,
  rceil: ITe,
  rcub: CTe,
  Rcy: PTe,
  rcy: RTe,
  rdca: DTe,
  rdldhar: NTe,
  rdquo: LTe,
  rdquor: MTe,
  rdsh: qTe,
  real: FTe,
  realine: BTe,
  realpart: WTe,
  reals: UTe,
  Re: HTe,
  rect: GTe,
  reg: VTe,
  REG: KTe,
  ReverseElement: YTe,
  ReverseEquilibrium: QTe,
  ReverseUpEquilibrium: XTe,
  rfisht: ZTe,
  rfloor: JTe,
  rfr: e$e,
  Rfr: a$e,
  rHar: t$e,
  rhard: n$e,
  rharu: r$e,
  rharul: s$e,
  Rho: i$e,
  rho: o$e,
  rhov: l$e,
  RightAngleBracket: d$e,
  RightArrowBar: u$e,
  rightarrow: c$e,
  RightArrow: p$e,
  Rightarrow: g$e,
  RightArrowLeftArrow: m$e,
  rightarrowtail: f$e,
  RightCeiling: h$e,
  RightDoubleBracket: y$e,
  RightDownTeeVector: z$e,
  RightDownVectorBar: b$e,
  RightDownVector: w$e,
  RightFloor: v$e,
  rightharpoondown: k$e,
  rightharpoonup: _$e,
  rightleftarrows: E$e,
  rightleftharpoons: A$e,
  rightrightarrows: T$e,
  rightsquigarrow: $$e,
  RightTeeArrow: j$e,
  RightTee: x$e,
  RightTeeVector: S$e,
  rightthreetimes: O$e,
  RightTriangleBar: I$e,
  RightTriangle: C$e,
  RightTriangleEqual: P$e,
  RightUpDownVector: R$e,
  RightUpTeeVector: D$e,
  RightUpVectorBar: N$e,
  RightUpVector: L$e,
  RightVectorBar: M$e,
  RightVector: q$e,
  ring: F$e,
  risingdotseq: B$e,
  rlarr: W$e,
  rlhar: U$e,
  rlm: H$e,
  rmoustache: G$e,
  rmoust: V$e,
  rnmid: K$e,
  roang: Y$e,
  roarr: Q$e,
  robrk: X$e,
  ropar: Z$e,
  ropf: J$e,
  Ropf: eje,
  roplus: aje,
  rotimes: tje,
  RoundImplies: nje,
  rpar: rje,
  rpargt: sje,
  rppolint: ije,
  rrarr: oje,
  Rrightarrow: lje,
  rsaquo: dje,
  rscr: uje,
  Rscr: cje,
  rsh: pje,
  Rsh: gje,
  rsqb: mje,
  rsquo: fje,
  rsquor: hje,
  rthree: yje,
  rtimes: zje,
  rtri: bje,
  rtrie: wje,
  rtrif: vje,
  rtriltri: kje,
  RuleDelayed: _je,
  ruluhar: Eje,
  rx: Aje,
  Sacute: Tje,
  sacute: $je,
  sbquo: jje,
  scap: xje,
  Scaron: Sje,
  scaron: Oje,
  Sc: Ije,
  sc: Cje,
  sccue: Pje,
  sce: Rje,
  scE: Dje,
  Scedil: Nje,
  scedil: Lje,
  Scirc: Mje,
  scirc: qje,
  scnap: Fje,
  scnE: Bje,
  scnsim: Wje,
  scpolint: Uje,
  scsim: Hje,
  Scy: Gje,
  scy: Vje,
  sdotb: Kje,
  sdot: Yje,
  sdote: Qje,
  searhk: Xje,
  searr: Zje,
  seArr: Jje,
  searrow: exe,
  sect: axe,
  semi: txe,
  seswar: nxe,
  setminus: rxe,
  setmn: sxe,
  sext: ixe,
  Sfr: oxe,
  sfr: lxe,
  sfrown: dxe,
  sharp: uxe,
  SHCHcy: cxe,
  shchcy: pxe,
  SHcy: gxe,
  shcy: mxe,
  ShortDownArrow: fxe,
  ShortLeftArrow: hxe,
  shortmid: yxe,
  shortparallel: zxe,
  ShortRightArrow: bxe,
  ShortUpArrow: wxe,
  shy: vxe,
  Sigma: kxe,
  sigma: _xe,
  sigmaf: Exe,
  sigmav: Axe,
  sim: Txe,
  simdot: $xe,
  sime: jxe,
  simeq: xxe,
  simg: Sxe,
  simgE: Oxe,
  siml: Ixe,
  simlE: Cxe,
  simne: Pxe,
  simplus: Rxe,
  simrarr: Dxe,
  slarr: Nxe,
  SmallCircle: Lxe,
  smallsetminus: Mxe,
  smashp: qxe,
  smeparsl: Fxe,
  smid: Bxe,
  smile: Wxe,
  smt: Uxe,
  smte: Hxe,
  smtes: Gxe,
  SOFTcy: Vxe,
  softcy: Kxe,
  solbar: Yxe,
  solb: Qxe,
  sol: Xxe,
  Sopf: Zxe,
  sopf: Jxe,
  spades: eSe,
  spadesuit: aSe,
  spar: tSe,
  sqcap: nSe,
  sqcaps: rSe,
  sqcup: sSe,
  sqcups: iSe,
  Sqrt: oSe,
  sqsub: lSe,
  sqsube: dSe,
  sqsubset: uSe,
  sqsubseteq: cSe,
  sqsup: pSe,
  sqsupe: gSe,
  sqsupset: mSe,
  sqsupseteq: fSe,
  square: hSe,
  Square: ySe,
  SquareIntersection: zSe,
  SquareSubset: bSe,
  SquareSubsetEqual: wSe,
  SquareSuperset: vSe,
  SquareSupersetEqual: kSe,
  SquareUnion: _Se,
  squarf: ESe,
  squ: ASe,
  squf: TSe,
  srarr: $Se,
  Sscr: jSe,
  sscr: xSe,
  ssetmn: SSe,
  ssmile: OSe,
  sstarf: ISe,
  Star: CSe,
  star: PSe,
  starf: RSe,
  straightepsilon: DSe,
  straightphi: NSe,
  strns: LSe,
  sub: MSe,
  Sub: qSe,
  subdot: FSe,
  subE: BSe,
  sube: WSe,
  subedot: USe,
  submult: HSe,
  subnE: GSe,
  subne: VSe,
  subplus: KSe,
  subrarr: YSe,
  subset: QSe,
  Subset: XSe,
  subseteq: ZSe,
  subseteqq: JSe,
  SubsetEqual: e2e,
  subsetneq: a2e,
  subsetneqq: t2e,
  subsim: n2e,
  subsub: r2e,
  subsup: s2e,
  succapprox: i2e,
  succ: o2e,
  succcurlyeq: l2e,
  Succeeds: d2e,
  SucceedsEqual: u2e,
  SucceedsSlantEqual: c2e,
  SucceedsTilde: p2e,
  succeq: g2e,
  succnapprox: m2e,
  succneqq: f2e,
  succnsim: h2e,
  succsim: y2e,
  SuchThat: z2e,
  sum: b2e,
  Sum: w2e,
  sung: v2e,
  sup1: k2e,
  sup2: _2e,
  sup3: E2e,
  sup: A2e,
  Sup: T2e,
  supdot: $2e,
  supdsub: j2e,
  supE: x2e,
  supe: S2e,
  supedot: O2e,
  Superset: I2e,
  SupersetEqual: C2e,
  suphsol: P2e,
  suphsub: R2e,
  suplarr: D2e,
  supmult: N2e,
  supnE: L2e,
  supne: M2e,
  supplus: q2e,
  supset: F2e,
  Supset: B2e,
  supseteq: W2e,
  supseteqq: U2e,
  supsetneq: H2e,
  supsetneqq: G2e,
  supsim: V2e,
  supsub: K2e,
  supsup: Y2e,
  swarhk: Q2e,
  swarr: X2e,
  swArr: Z2e,
  swarrow: J2e,
  swnwar: eOe,
  szlig: aOe,
  Tab: tOe,
  target: nOe,
  Tau: rOe,
  tau: sOe,
  tbrk: iOe,
  Tcaron: oOe,
  tcaron: lOe,
  Tcedil: dOe,
  tcedil: uOe,
  Tcy: cOe,
  tcy: pOe,
  tdot: gOe,
  telrec: mOe,
  Tfr: fOe,
  tfr: hOe,
  there4: yOe,
  therefore: zOe,
  Therefore: bOe,
  Theta: wOe,
  theta: vOe,
  thetasym: kOe,
  thetav: _Oe,
  thickapprox: EOe,
  thicksim: AOe,
  ThickSpace: TOe,
  ThinSpace: $Oe,
  thinsp: jOe,
  thkap: xOe,
  thksim: SOe,
  THORN: OOe,
  thorn: IOe,
  tilde: COe,
  Tilde: POe,
  TildeEqual: ROe,
  TildeFullEqual: DOe,
  TildeTilde: NOe,
  timesbar: LOe,
  timesb: MOe,
  times: qOe,
  timesd: FOe,
  tint: BOe,
  toea: WOe,
  topbot: UOe,
  topcir: HOe,
  top: GOe,
  Topf: VOe,
  topf: KOe,
  topfork: YOe,
  tosa: QOe,
  tprime: XOe,
  trade: ZOe,
  TRADE: JOe,
  triangle: eIe,
  triangledown: aIe,
  triangleleft: tIe,
  trianglelefteq: nIe,
  triangleq: rIe,
  triangleright: sIe,
  trianglerighteq: iIe,
  tridot: oIe,
  trie: lIe,
  triminus: dIe,
  TripleDot: uIe,
  triplus: cIe,
  trisb: pIe,
  tritime: gIe,
  trpezium: mIe,
  Tscr: fIe,
  tscr: hIe,
  TScy: yIe,
  tscy: zIe,
  TSHcy: bIe,
  tshcy: wIe,
  Tstrok: vIe,
  tstrok: kIe,
  twixt: _Ie,
  twoheadleftarrow: EIe,
  twoheadrightarrow: AIe,
  Uacute: TIe,
  uacute: $Ie,
  uarr: jIe,
  Uarr: xIe,
  uArr: SIe,
  Uarrocir: OIe,
  Ubrcy: IIe,
  ubrcy: CIe,
  Ubreve: PIe,
  ubreve: RIe,
  Ucirc: DIe,
  ucirc: NIe,
  Ucy: LIe,
  ucy: MIe,
  udarr: qIe,
  Udblac: FIe,
  udblac: BIe,
  udhar: WIe,
  ufisht: UIe,
  Ufr: HIe,
  ufr: GIe,
  Ugrave: VIe,
  ugrave: KIe,
  uHar: YIe,
  uharl: QIe,
  uharr: XIe,
  uhblk: ZIe,
  ulcorn: JIe,
  ulcorner: eCe,
  ulcrop: aCe,
  ultri: tCe,
  Umacr: nCe,
  umacr: rCe,
  uml: sCe,
  UnderBar: iCe,
  UnderBrace: oCe,
  UnderBracket: lCe,
  UnderParenthesis: dCe,
  Union: uCe,
  UnionPlus: cCe,
  Uogon: pCe,
  uogon: gCe,
  Uopf: mCe,
  uopf: fCe,
  UpArrowBar: hCe,
  uparrow: yCe,
  UpArrow: zCe,
  Uparrow: bCe,
  UpArrowDownArrow: wCe,
  updownarrow: vCe,
  UpDownArrow: kCe,
  Updownarrow: _Ce,
  UpEquilibrium: ECe,
  upharpoonleft: ACe,
  upharpoonright: TCe,
  uplus: $Ce,
  UpperLeftArrow: jCe,
  UpperRightArrow: xCe,
  upsi: SCe,
  Upsi: OCe,
  upsih: ICe,
  Upsilon: CCe,
  upsilon: PCe,
  UpTeeArrow: RCe,
  UpTee: DCe,
  upuparrows: NCe,
  urcorn: LCe,
  urcorner: MCe,
  urcrop: qCe,
  Uring: FCe,
  uring: BCe,
  urtri: WCe,
  Uscr: UCe,
  uscr: HCe,
  utdot: GCe,
  Utilde: VCe,
  utilde: KCe,
  utri: YCe,
  utrif: QCe,
  uuarr: XCe,
  Uuml: ZCe,
  uuml: JCe,
  uwangle: ePe,
  vangrt: aPe,
  varepsilon: tPe,
  varkappa: nPe,
  varnothing: rPe,
  varphi: sPe,
  varpi: iPe,
  varpropto: oPe,
  varr: lPe,
  vArr: dPe,
  varrho: uPe,
  varsigma: cPe,
  varsubsetneq: pPe,
  varsubsetneqq: gPe,
  varsupsetneq: mPe,
  varsupsetneqq: fPe,
  vartheta: hPe,
  vartriangleleft: yPe,
  vartriangleright: zPe,
  vBar: bPe,
  Vbar: wPe,
  vBarv: vPe,
  Vcy: kPe,
  vcy: _Pe,
  vdash: EPe,
  vDash: APe,
  Vdash: TPe,
  VDash: $Pe,
  Vdashl: jPe,
  veebar: xPe,
  vee: SPe,
  Vee: OPe,
  veeeq: IPe,
  vellip: CPe,
  verbar: PPe,
  Verbar: RPe,
  vert: DPe,
  Vert: NPe,
  VerticalBar: LPe,
  VerticalLine: MPe,
  VerticalSeparator: qPe,
  VerticalTilde: FPe,
  VeryThinSpace: BPe,
  Vfr: WPe,
  vfr: UPe,
  vltri: HPe,
  vnsub: GPe,
  vnsup: VPe,
  Vopf: KPe,
  vopf: YPe,
  vprop: QPe,
  vrtri: XPe,
  Vscr: ZPe,
  vscr: JPe,
  vsubnE: eRe,
  vsubne: aRe,
  vsupnE: tRe,
  vsupne: nRe,
  Vvdash: rRe,
  vzigzag: sRe,
  Wcirc: iRe,
  wcirc: oRe,
  wedbar: lRe,
  wedge: dRe,
  Wedge: uRe,
  wedgeq: cRe,
  weierp: pRe,
  Wfr: gRe,
  wfr: mRe,
  Wopf: fRe,
  wopf: hRe,
  wp: yRe,
  wr: zRe,
  wreath: bRe,
  Wscr: wRe,
  wscr: vRe,
  xcap: kRe,
  xcirc: _Re,
  xcup: ERe,
  xdtri: ARe,
  Xfr: TRe,
  xfr: $Re,
  xharr: jRe,
  xhArr: xRe,
  Xi: SRe,
  xi: ORe,
  xlarr: IRe,
  xlArr: CRe,
  xmap: PRe,
  xnis: RRe,
  xodot: DRe,
  Xopf: NRe,
  xopf: LRe,
  xoplus: MRe,
  xotime: qRe,
  xrarr: FRe,
  xrArr: BRe,
  Xscr: WRe,
  xscr: URe,
  xsqcup: HRe,
  xuplus: GRe,
  xutri: VRe,
  xvee: KRe,
  xwedge: YRe,
  Yacute: QRe,
  yacute: XRe,
  YAcy: ZRe,
  yacy: JRe,
  Ycirc: e3e,
  ycirc: a3e,
  Ycy: t3e,
  ycy: n3e,
  yen: r3e,
  Yfr: s3e,
  yfr: i3e,
  YIcy: o3e,
  yicy: l3e,
  Yopf: d3e,
  yopf: u3e,
  Yscr: c3e,
  yscr: p3e,
  YUcy: g3e,
  yucy: m3e,
  yuml: f3e,
  Yuml: h3e,
  Zacute: y3e,
  zacute: z3e,
  Zcaron: b3e,
  zcaron: w3e,
  Zcy: v3e,
  zcy: k3e,
  Zdot: _3e,
  zdot: E3e,
  zeetrf: A3e,
  ZeroWidthSpace: T3e,
  Zeta: $3e,
  zeta: j3e,
  zfr: x3e,
  Zfr: S3e,
  ZHcy: O3e,
  zhcy: I3e,
  zigrarr: C3e,
  zopf: P3e,
  Zopf: R3e,
  Zscr: D3e,
  zscr: N3e,
  zwj: L3e,
  zwnj: M3e
}, F3e = "Á", B3e = "á", W3e = "Â", U3e = "â", H3e = "´", G3e = "Æ", V3e = "æ", K3e = "À", Y3e = "à", Q3e = "&", X3e = "&", Z3e = "Å", J3e = "å", eDe = "Ã", aDe = "ã", tDe = "Ä", nDe = "ä", rDe = "¦", sDe = "Ç", iDe = "ç", oDe = "¸", lDe = "¢", dDe = "©", uDe = "©", cDe = "¤", pDe = "°", gDe = "÷", mDe = "É", fDe = "é", hDe = "Ê", yDe = "ê", zDe = "È", bDe = "è", wDe = "Ð", vDe = "ð", kDe = "Ë", _De = "ë", EDe = "½", ADe = "¼", TDe = "¾", $De = ">", jDe = ">", xDe = "Í", SDe = "í", ODe = "Î", IDe = "î", CDe = "¡", PDe = "Ì", RDe = "ì", DDe = "¿", NDe = "Ï", LDe = "ï", MDe = "«", qDe = "<", FDe = "<", BDe = "¯", WDe = "µ", UDe = "·", HDe = " ", GDe = "¬", VDe = "Ñ", KDe = "ñ", YDe = "Ó", QDe = "ó", XDe = "Ô", ZDe = "ô", JDe = "Ò", eNe = "ò", aNe = "ª", tNe = "º", nNe = "Ø", rNe = "ø", sNe = "Õ", iNe = "õ", oNe = "Ö", lNe = "ö", dNe = "¶", uNe = "±", cNe = "£", pNe = '"', gNe = '"', mNe = "»", fNe = "®", hNe = "®", yNe = "§", zNe = "­", bNe = "¹", wNe = "²", vNe = "³", kNe = "ß", _Ne = "Þ", ENe = "þ", ANe = "×", TNe = "Ú", $Ne = "ú", jNe = "Û", xNe = "û", SNe = "Ù", ONe = "ù", INe = "¨", CNe = "Ü", PNe = "ü", RNe = "Ý", DNe = "ý", NNe = "¥", LNe = "ÿ", MNe = {
  Aacute: F3e,
  aacute: B3e,
  Acirc: W3e,
  acirc: U3e,
  acute: H3e,
  AElig: G3e,
  aelig: V3e,
  Agrave: K3e,
  agrave: Y3e,
  amp: Q3e,
  AMP: X3e,
  Aring: Z3e,
  aring: J3e,
  Atilde: eDe,
  atilde: aDe,
  Auml: tDe,
  auml: nDe,
  brvbar: rDe,
  Ccedil: sDe,
  ccedil: iDe,
  cedil: oDe,
  cent: lDe,
  copy: dDe,
  COPY: uDe,
  curren: cDe,
  deg: pDe,
  divide: gDe,
  Eacute: mDe,
  eacute: fDe,
  Ecirc: hDe,
  ecirc: yDe,
  Egrave: zDe,
  egrave: bDe,
  ETH: wDe,
  eth: vDe,
  Euml: kDe,
  euml: _De,
  frac12: EDe,
  frac14: ADe,
  frac34: TDe,
  gt: $De,
  GT: jDe,
  Iacute: xDe,
  iacute: SDe,
  Icirc: ODe,
  icirc: IDe,
  iexcl: CDe,
  Igrave: PDe,
  igrave: RDe,
  iquest: DDe,
  Iuml: NDe,
  iuml: LDe,
  laquo: MDe,
  lt: qDe,
  LT: FDe,
  macr: BDe,
  micro: WDe,
  middot: UDe,
  nbsp: HDe,
  not: GDe,
  Ntilde: VDe,
  ntilde: KDe,
  Oacute: YDe,
  oacute: QDe,
  Ocirc: XDe,
  ocirc: ZDe,
  Ograve: JDe,
  ograve: eNe,
  ordf: aNe,
  ordm: tNe,
  Oslash: nNe,
  oslash: rNe,
  Otilde: sNe,
  otilde: iNe,
  Ouml: oNe,
  ouml: lNe,
  para: dNe,
  plusmn: uNe,
  pound: cNe,
  quot: pNe,
  QUOT: gNe,
  raquo: mNe,
  reg: fNe,
  REG: hNe,
  sect: yNe,
  shy: zNe,
  sup1: bNe,
  sup2: wNe,
  sup3: vNe,
  szlig: kNe,
  THORN: _Ne,
  thorn: ENe,
  times: ANe,
  Uacute: TNe,
  uacute: $Ne,
  Ucirc: jNe,
  ucirc: xNe,
  Ugrave: SNe,
  ugrave: ONe,
  uml: INe,
  Uuml: CNe,
  uuml: PNe,
  Yacute: RNe,
  yacute: DNe,
  yen: NNe,
  yuml: LNe
}, qNe = "&", FNe = "'", BNe = ">", WNe = "<", UNe = '"', HNe = {
  amp: qNe,
  apos: FNe,
  gt: BNe,
  lt: WNe,
  quot: UNe
};
var J3 = ye, GNe = vee, VNe = q3e, Z2 = MNe, KNe = HNe, Te = 0, wa = Te++, eD = Te++, Qo = Te++, aD = Te++, tD = Te++, kc = Te++, nD = Te++, Zi = Te++, gf = Te++, Y0 = Te++, Q0 = Te++, X0 = Te++, Z0 = Te++, J0 = Te++, rD = Te++, ri = Te++, sD = Te++, iD = Te++, _c = Te++, e_ = Te++, a_ = Te++, oD = Te++, lD = Te++, dD = Te++, uD = Te++, cD = Te++, pD = Te++, Ec = Te++, t_ = Te++, n_ = Te++, gD = Te++, mD = Te++, fD = Te++, hD = Te++, yD = Te++, zD = Te++, bD = Te++, wD = Te++, vD = Te++, kD = Te++, _D = Te++, ED = Te++, AD = Te++, TD = Te++, $D = Te++, jD = Te++, xD = Te++, SD = Te++, OD = Te++, ID = Te++, Ac = Te++, CD = Te++, r_ = Te++, s_ = Te++, i_ = Te++, o_ = 0, Id = o_++, PD = o_++, RD = o_++;
function hn(e) {
  return e === " " || e === `
` || e === "	" || e === "\f" || e === "\r";
}
function yn(e, a, t) {
  var n = e.toLowerCase();
  return e === n ? function(r) {
    r === n ? this._state = a : (this._state = t, this._index--);
  } : function(r) {
    r === n || r === e ? this._state = a : (this._state = t, this._index--);
  };
}
function Xo(e, a) {
  var t = e.toLowerCase();
  return function(n) {
    n === t || n === e ? this._state = a : (this._state = Qo, this._index--);
  };
}
function ye(e, a) {
  this._state = wa, this._buffer = "", this._sectionStart = 0, this._index = 0, this._bufferOffset = 0, this._baseState = wa, this._special = Id, this._cbs = a, this._running = !0, this._ended = !1, this._xmlMode = !!(e && e.xmlMode), this._decodeEntities = !!(e && e.decodeEntities);
}
ye.prototype._stateText = function(e) {
  e === "<" ? (this._index > this._sectionStart && this._cbs.ontext(this._getSection()), this._state = eD, this._sectionStart = this._index) : this._decodeEntities && this._special === Id && e === "&" && (this._index > this._sectionStart && this._cbs.ontext(this._getSection()), this._baseState = wa, this._state = Ac, this._sectionStart = this._index);
};
ye.prototype._stateBeforeTagName = function(e) {
  e === "/" ? this._state = tD : e === "<" ? (this._cbs.ontext(this._getSection()), this._sectionStart = this._index) : e === ">" || this._special !== Id || hn(e) ? this._state = wa : e === "!" ? (this._state = rD, this._sectionStart = this._index + 1) : e === "?" ? (this._state = sD, this._sectionStart = this._index + 1) : (this._state = !this._xmlMode && (e === "s" || e === "S") ? gD : Qo, this._sectionStart = this._index);
};
ye.prototype._stateInTagName = function(e) {
  (e === "/" || e === ">" || hn(e)) && (this._emitToken("onopentagname"), this._state = Zi, this._index--);
};
ye.prototype._stateBeforeCloseingTagName = function(e) {
  hn(e) || (e === ">" ? this._state = wa : this._special !== Id ? e === "s" || e === "S" ? this._state = mD : (this._state = wa, this._index--) : (this._state = kc, this._sectionStart = this._index));
};
ye.prototype._stateInCloseingTagName = function(e) {
  (e === ">" || hn(e)) && (this._emitToken("onclosetag"), this._state = nD, this._index--);
};
ye.prototype._stateAfterCloseingTagName = function(e) {
  e === ">" && (this._state = wa, this._sectionStart = this._index + 1);
};
ye.prototype._stateBeforeAttributeName = function(e) {
  e === ">" ? (this._cbs.onopentagend(), this._state = wa, this._sectionStart = this._index + 1) : e === "/" ? this._state = aD : hn(e) || (this._state = gf, this._sectionStart = this._index);
};
ye.prototype._stateInSelfClosingTag = function(e) {
  e === ">" ? (this._cbs.onselfclosingtag(), this._state = wa, this._sectionStart = this._index + 1) : hn(e) || (this._state = Zi, this._index--);
};
ye.prototype._stateInAttributeName = function(e) {
  (e === "=" || e === "/" || e === ">" || hn(e)) && (this._cbs.onattribname(this._getSection()), this._sectionStart = -1, this._state = Y0, this._index--);
};
ye.prototype._stateAfterAttributeName = function(e) {
  e === "=" ? this._state = Q0 : e === "/" || e === ">" ? (this._cbs.onattribend(), this._state = Zi, this._index--) : hn(e) || (this._cbs.onattribend(), this._state = gf, this._sectionStart = this._index);
};
ye.prototype._stateBeforeAttributeValue = function(e) {
  e === '"' ? (this._state = X0, this._sectionStart = this._index + 1) : e === "'" ? (this._state = Z0, this._sectionStart = this._index + 1) : hn(e) || (this._state = J0, this._sectionStart = this._index, this._index--);
};
ye.prototype._stateInAttributeValueDoubleQuotes = function(e) {
  e === '"' ? (this._emitToken("onattribdata"), this._cbs.onattribend(), this._state = Zi) : this._decodeEntities && e === "&" && (this._emitToken("onattribdata"), this._baseState = this._state, this._state = Ac, this._sectionStart = this._index);
};
ye.prototype._stateInAttributeValueSingleQuotes = function(e) {
  e === "'" ? (this._emitToken("onattribdata"), this._cbs.onattribend(), this._state = Zi) : this._decodeEntities && e === "&" && (this._emitToken("onattribdata"), this._baseState = this._state, this._state = Ac, this._sectionStart = this._index);
};
ye.prototype._stateInAttributeValueNoQuotes = function(e) {
  hn(e) || e === ">" ? (this._emitToken("onattribdata"), this._cbs.onattribend(), this._state = Zi, this._index--) : this._decodeEntities && e === "&" && (this._emitToken("onattribdata"), this._baseState = this._state, this._state = Ac, this._sectionStart = this._index);
};
ye.prototype._stateBeforeDeclaration = function(e) {
  this._state = e === "[" ? oD : e === "-" ? iD : ri;
};
ye.prototype._stateInDeclaration = function(e) {
  e === ">" && (this._cbs.ondeclaration(this._getSection()), this._state = wa, this._sectionStart = this._index + 1);
};
ye.prototype._stateInProcessingInstruction = function(e) {
  e === ">" && (this._cbs.onprocessinginstruction(this._getSection()), this._state = wa, this._sectionStart = this._index + 1);
};
ye.prototype._stateBeforeComment = function(e) {
  e === "-" ? (this._state = _c, this._sectionStart = this._index + 1) : this._state = ri;
};
ye.prototype._stateInComment = function(e) {
  e === "-" && (this._state = e_);
};
ye.prototype._stateAfterComment1 = function(e) {
  e === "-" ? this._state = a_ : this._state = _c;
};
ye.prototype._stateAfterComment2 = function(e) {
  e === ">" ? (this._cbs.oncomment(
    this._buffer.substring(this._sectionStart, this._index - 2)
  ), this._state = wa, this._sectionStart = this._index + 1) : e !== "-" && (this._state = _c);
};
ye.prototype._stateBeforeCdata1 = yn(
  "C",
  lD,
  ri
);
ye.prototype._stateBeforeCdata2 = yn(
  "D",
  dD,
  ri
);
ye.prototype._stateBeforeCdata3 = yn(
  "A",
  uD,
  ri
);
ye.prototype._stateBeforeCdata4 = yn(
  "T",
  cD,
  ri
);
ye.prototype._stateBeforeCdata5 = yn(
  "A",
  pD,
  ri
);
ye.prototype._stateBeforeCdata6 = function(e) {
  e === "[" ? (this._state = Ec, this._sectionStart = this._index + 1) : (this._state = ri, this._index--);
};
ye.prototype._stateInCdata = function(e) {
  e === "]" && (this._state = t_);
};
ye.prototype._stateAfterCdata1 = function(e) {
  e === "]" ? this._state = n_ : this._state = Ec;
};
ye.prototype._stateAfterCdata2 = function(e) {
  e === ">" ? (this._cbs.oncdata(
    this._buffer.substring(this._sectionStart, this._index - 2)
  ), this._state = wa, this._sectionStart = this._index + 1) : e !== "]" && (this._state = Ec);
};
ye.prototype._stateBeforeSpecial = function(e) {
  e === "c" || e === "C" ? this._state = fD : e === "t" || e === "T" ? this._state = AD : (this._state = Qo, this._index--);
};
ye.prototype._stateBeforeSpecialEnd = function(e) {
  this._special === PD && (e === "c" || e === "C") ? this._state = wD : this._special === RD && (e === "t" || e === "T") ? this._state = xD : this._state = wa;
};
ye.prototype._stateBeforeScript1 = Xo(
  "R",
  hD
);
ye.prototype._stateBeforeScript2 = Xo(
  "I",
  yD
);
ye.prototype._stateBeforeScript3 = Xo(
  "P",
  zD
);
ye.prototype._stateBeforeScript4 = Xo(
  "T",
  bD
);
ye.prototype._stateBeforeScript5 = function(e) {
  (e === "/" || e === ">" || hn(e)) && (this._special = PD), this._state = Qo, this._index--;
};
ye.prototype._stateAfterScript1 = yn("R", vD, wa);
ye.prototype._stateAfterScript2 = yn("I", kD, wa);
ye.prototype._stateAfterScript3 = yn("P", _D, wa);
ye.prototype._stateAfterScript4 = yn("T", ED, wa);
ye.prototype._stateAfterScript5 = function(e) {
  e === ">" || hn(e) ? (this._special = Id, this._state = kc, this._sectionStart = this._index - 6, this._index--) : this._state = wa;
};
ye.prototype._stateBeforeStyle1 = Xo(
  "Y",
  TD
);
ye.prototype._stateBeforeStyle2 = Xo(
  "L",
  $D
);
ye.prototype._stateBeforeStyle3 = Xo(
  "E",
  jD
);
ye.prototype._stateBeforeStyle4 = function(e) {
  (e === "/" || e === ">" || hn(e)) && (this._special = RD), this._state = Qo, this._index--;
};
ye.prototype._stateAfterStyle1 = yn("Y", SD, wa);
ye.prototype._stateAfterStyle2 = yn("L", OD, wa);
ye.prototype._stateAfterStyle3 = yn("E", ID, wa);
ye.prototype._stateAfterStyle4 = function(e) {
  e === ">" || hn(e) ? (this._special = Id, this._state = kc, this._sectionStart = this._index - 5, this._index--) : this._state = wa;
};
ye.prototype._stateBeforeEntity = yn(
  "#",
  CD,
  r_
);
ye.prototype._stateBeforeNumericEntity = yn(
  "X",
  i_,
  s_
);
ye.prototype._parseNamedEntityStrict = function() {
  if (this._sectionStart + 1 < this._index) {
    var e = this._buffer.substring(
      this._sectionStart + 1,
      this._index
    ), a = this._xmlMode ? KNe : VNe;
    a.hasOwnProperty(e) && (this._emitPartial(a[e]), this._sectionStart = this._index + 1);
  }
};
ye.prototype._parseLegacyEntity = function() {
  var e = this._sectionStart + 1, a = this._index - e;
  for (a > 6 && (a = 6); a >= 2; ) {
    var t = this._buffer.substr(e, a);
    if (Z2.hasOwnProperty(t)) {
      this._emitPartial(Z2[t]), this._sectionStart += a + 1;
      return;
    } else
      a--;
  }
};
ye.prototype._stateInNamedEntity = function(e) {
  e === ";" ? (this._parseNamedEntityStrict(), this._sectionStart + 1 < this._index && !this._xmlMode && this._parseLegacyEntity(), this._state = this._baseState) : (e < "a" || e > "z") && (e < "A" || e > "Z") && (e < "0" || e > "9") && (this._xmlMode || this._sectionStart + 1 === this._index || (this._baseState !== wa ? e !== "=" && this._parseNamedEntityStrict() : this._parseLegacyEntity()), this._state = this._baseState, this._index--);
};
ye.prototype._decodeNumericEntity = function(e, a) {
  var t = this._sectionStart + e;
  if (t !== this._index) {
    var n = this._buffer.substring(t, this._index), r = parseInt(n, a);
    this._emitPartial(GNe(r)), this._sectionStart = this._index;
  } else
    this._sectionStart--;
  this._state = this._baseState;
};
ye.prototype._stateInNumericEntity = function(e) {
  e === ";" ? (this._decodeNumericEntity(2, 10), this._sectionStart++) : (e < "0" || e > "9") && (this._xmlMode ? this._state = this._baseState : this._decodeNumericEntity(2, 10), this._index--);
};
ye.prototype._stateInHexEntity = function(e) {
  e === ";" ? (this._decodeNumericEntity(3, 16), this._sectionStart++) : (e < "a" || e > "f") && (e < "A" || e > "F") && (e < "0" || e > "9") && (this._xmlMode ? this._state = this._baseState : this._decodeNumericEntity(3, 16), this._index--);
};
ye.prototype._cleanup = function() {
  this._sectionStart < 0 ? (this._buffer = "", this._bufferOffset += this._index, this._index = 0) : this._running && (this._state === wa ? (this._sectionStart !== this._index && this._cbs.ontext(this._buffer.substr(this._sectionStart)), this._buffer = "", this._bufferOffset += this._index, this._index = 0) : this._sectionStart === this._index ? (this._buffer = "", this._bufferOffset += this._index, this._index = 0) : (this._buffer = this._buffer.substr(this._sectionStart), this._index -= this._sectionStart, this._bufferOffset += this._sectionStart), this._sectionStart = 0);
};
ye.prototype.write = function(e) {
  this._ended && this._cbs.onerror(Error(".write() after done!")), this._buffer += e, this._parse();
};
ye.prototype._parse = function() {
  for (; this._index < this._buffer.length && this._running; ) {
    var e = this._buffer.charAt(this._index);
    this._state === wa ? this._stateText(e) : this._state === eD ? this._stateBeforeTagName(e) : this._state === Qo ? this._stateInTagName(e) : this._state === tD ? this._stateBeforeCloseingTagName(e) : this._state === kc ? this._stateInCloseingTagName(e) : this._state === nD ? this._stateAfterCloseingTagName(e) : this._state === aD ? this._stateInSelfClosingTag(e) : this._state === Zi ? this._stateBeforeAttributeName(e) : this._state === gf ? this._stateInAttributeName(e) : this._state === Y0 ? this._stateAfterAttributeName(e) : this._state === Q0 ? this._stateBeforeAttributeValue(e) : this._state === X0 ? this._stateInAttributeValueDoubleQuotes(e) : this._state === Z0 ? this._stateInAttributeValueSingleQuotes(e) : this._state === J0 ? this._stateInAttributeValueNoQuotes(e) : this._state === rD ? this._stateBeforeDeclaration(e) : this._state === ri ? this._stateInDeclaration(e) : this._state === sD ? this._stateInProcessingInstruction(e) : this._state === iD ? this._stateBeforeComment(e) : this._state === _c ? this._stateInComment(e) : this._state === e_ ? this._stateAfterComment1(e) : this._state === a_ ? this._stateAfterComment2(e) : this._state === oD ? this._stateBeforeCdata1(e) : this._state === lD ? this._stateBeforeCdata2(e) : this._state === dD ? this._stateBeforeCdata3(e) : this._state === uD ? this._stateBeforeCdata4(e) : this._state === cD ? this._stateBeforeCdata5(e) : this._state === pD ? this._stateBeforeCdata6(e) : this._state === Ec ? this._stateInCdata(e) : this._state === t_ ? this._stateAfterCdata1(e) : this._state === n_ ? this._stateAfterCdata2(e) : this._state === gD ? this._stateBeforeSpecial(e) : this._state === mD ? this._stateBeforeSpecialEnd(e) : this._state === fD ? this._stateBeforeScript1(e) : this._state === hD ? this._stateBeforeScript2(e) : this._state === yD ? this._stateBeforeScript3(e) : this._state === zD ? this._stateBeforeScript4(e) : this._state === bD ? this._stateBeforeScript5(e) : this._state === wD ? this._stateAfterScript1(e) : this._state === vD ? this._stateAfterScript2(e) : this._state === kD ? this._stateAfterScript3(e) : this._state === _D ? this._stateAfterScript4(e) : this._state === ED ? this._stateAfterScript5(e) : this._state === AD ? this._stateBeforeStyle1(e) : this._state === TD ? this._stateBeforeStyle2(e) : this._state === $D ? this._stateBeforeStyle3(e) : this._state === jD ? this._stateBeforeStyle4(e) : this._state === xD ? this._stateAfterStyle1(e) : this._state === SD ? this._stateAfterStyle2(e) : this._state === OD ? this._stateAfterStyle3(e) : this._state === ID ? this._stateAfterStyle4(e) : this._state === Ac ? this._stateBeforeEntity(e) : this._state === CD ? this._stateBeforeNumericEntity(e) : this._state === r_ ? this._stateInNamedEntity(e) : this._state === s_ ? this._stateInNumericEntity(e) : this._state === i_ ? this._stateInHexEntity(e) : this._cbs.onerror(Error("unknown _state"), this._state), this._index++;
  }
  this._cleanup();
};
ye.prototype.pause = function() {
  this._running = !1;
};
ye.prototype.resume = function() {
  this._running = !0, this._index < this._buffer.length && this._parse(), this._ended && this._finish();
};
ye.prototype.end = function(e) {
  this._ended && this._cbs.onerror(Error(".end() after done!")), e && this.write(e), this._ended = !0, this._running && this._finish();
};
ye.prototype._finish = function() {
  this._sectionStart < this._index && this._handleTrailingData(), this._cbs.onend();
};
ye.prototype._handleTrailingData = function() {
  var e = this._buffer.substr(this._sectionStart);
  this._state === Ec || this._state === t_ || this._state === n_ ? this._cbs.oncdata(e) : this._state === _c || this._state === e_ || this._state === a_ ? this._cbs.oncomment(e) : this._state === r_ && !this._xmlMode ? (this._parseLegacyEntity(), this._sectionStart < this._index && (this._state = this._baseState, this._handleTrailingData())) : this._state === s_ && !this._xmlMode ? (this._decodeNumericEntity(2, 10), this._sectionStart < this._index && (this._state = this._baseState, this._handleTrailingData())) : this._state === i_ && !this._xmlMode ? (this._decodeNumericEntity(3, 16), this._sectionStart < this._index && (this._state = this._baseState, this._handleTrailingData())) : this._state !== Qo && this._state !== Zi && this._state !== Q0 && this._state !== Y0 && this._state !== gf && this._state !== Z0 && this._state !== X0 && this._state !== J0 && this._state !== kc && this._cbs.ontext(e);
};
ye.prototype.reset = function() {
  ye.call(
    this,
    { xmlMode: this._xmlMode, decodeEntities: this._decodeEntities },
    this._cbs
  );
};
ye.prototype.getAbsoluteIndex = function() {
  return this._bufferOffset + this._index;
};
ye.prototype._getSection = function() {
  return this._buffer.substring(this._sectionStart, this._index);
};
ye.prototype._emitToken = function(e) {
  this._cbs[e](this._getSection()), this._sectionStart = -1;
};
ye.prototype._emitPartial = function(e) {
  this._baseState !== wa ? this._cbs.onattribdata(e) : this._cbs.ontext(e);
};
var Lk = { exports: {} };
typeof Object.create == "function" ? Lk.exports = function(a, t) {
  t && (a.super_ = t, a.prototype = Object.create(t.prototype, {
    constructor: {
      value: a,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  }));
} : Lk.exports = function(a, t) {
  if (t) {
    a.super_ = t;
    var n = function() {
    };
    n.prototype = t.prototype, a.prototype = new n(), a.prototype.constructor = a;
  }
};
var mf = Lk.exports, l_ = { exports: {} }, Jl = typeof Reflect == "object" ? Reflect : null, J2 = Jl && typeof Jl.apply == "function" ? Jl.apply : function(a, t, n) {
  return Function.prototype.apply.call(a, t, n);
}, cm;
Jl && typeof Jl.ownKeys == "function" ? cm = Jl.ownKeys : Object.getOwnPropertySymbols ? cm = function(a) {
  return Object.getOwnPropertyNames(a).concat(Object.getOwnPropertySymbols(a));
} : cm = function(a) {
  return Object.getOwnPropertyNames(a);
};
function YNe(e) {
  console && console.warn && console.warn(e);
}
var DD = Number.isNaN || function(a) {
  return a !== a;
};
function ya() {
  ya.init.call(this);
}
l_.exports = ya;
l_.exports.once = JNe;
ya.EventEmitter = ya;
ya.prototype._events = void 0;
ya.prototype._eventsCount = 0;
ya.prototype._maxListeners = void 0;
var eO = 10;
function ff(e) {
  if (typeof e != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
}
Object.defineProperty(ya, "defaultMaxListeners", {
  enumerable: !0,
  get: function() {
    return eO;
  },
  set: function(e) {
    if (typeof e != "number" || e < 0 || DD(e))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
    eO = e;
  }
});
ya.init = function() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
ya.prototype.setMaxListeners = function(a) {
  if (typeof a != "number" || a < 0 || DD(a))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + a + ".");
  return this._maxListeners = a, this;
};
function ND(e) {
  return e._maxListeners === void 0 ? ya.defaultMaxListeners : e._maxListeners;
}
ya.prototype.getMaxListeners = function() {
  return ND(this);
};
ya.prototype.emit = function(a) {
  for (var t = [], n = 1; n < arguments.length; n++) t.push(arguments[n]);
  var r = a === "error", o = this._events;
  if (o !== void 0)
    r = r && o.error === void 0;
  else if (!r)
    return !1;
  if (r) {
    var l;
    if (t.length > 0 && (l = t[0]), l instanceof Error)
      throw l;
    var u = new Error("Unhandled error." + (l ? " (" + l.message + ")" : ""));
    throw u.context = l, u;
  }
  var c = o[a];
  if (c === void 0)
    return !1;
  if (typeof c == "function")
    J2(c, this, t);
  else
    for (var f = c.length, y = BD(c, f), n = 0; n < f; ++n)
      J2(y[n], this, t);
  return !0;
};
function LD(e, a, t, n) {
  var r, o, l;
  if (ff(t), o = e._events, o === void 0 ? (o = e._events = /* @__PURE__ */ Object.create(null), e._eventsCount = 0) : (o.newListener !== void 0 && (e.emit(
    "newListener",
    a,
    t.listener ? t.listener : t
  ), o = e._events), l = o[a]), l === void 0)
    l = o[a] = t, ++e._eventsCount;
  else if (typeof l == "function" ? l = o[a] = n ? [t, l] : [l, t] : n ? l.unshift(t) : l.push(t), r = ND(e), r > 0 && l.length > r && !l.warned) {
    l.warned = !0;
    var u = new Error("Possible EventEmitter memory leak detected. " + l.length + " " + String(a) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    u.name = "MaxListenersExceededWarning", u.emitter = e, u.type = a, u.count = l.length, YNe(u);
  }
  return e;
}
ya.prototype.addListener = function(a, t) {
  return LD(this, a, t, !1);
};
ya.prototype.on = ya.prototype.addListener;
ya.prototype.prependListener = function(a, t) {
  return LD(this, a, t, !0);
};
function QNe() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function MD(e, a, t) {
  var n = { fired: !1, wrapFn: void 0, target: e, type: a, listener: t }, r = QNe.bind(n);
  return r.listener = t, n.wrapFn = r, r;
}
ya.prototype.once = function(a, t) {
  return ff(t), this.on(a, MD(this, a, t)), this;
};
ya.prototype.prependOnceListener = function(a, t) {
  return ff(t), this.prependListener(a, MD(this, a, t)), this;
};
ya.prototype.removeListener = function(a, t) {
  var n, r, o, l, u;
  if (ff(t), r = this._events, r === void 0)
    return this;
  if (n = r[a], n === void 0)
    return this;
  if (n === t || n.listener === t)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete r[a], r.removeListener && this.emit("removeListener", a, n.listener || t));
  else if (typeof n != "function") {
    for (o = -1, l = n.length - 1; l >= 0; l--)
      if (n[l] === t || n[l].listener === t) {
        u = n[l].listener, o = l;
        break;
      }
    if (o < 0)
      return this;
    o === 0 ? n.shift() : XNe(n, o), n.length === 1 && (r[a] = n[0]), r.removeListener !== void 0 && this.emit("removeListener", a, u || t);
  }
  return this;
};
ya.prototype.off = ya.prototype.removeListener;
ya.prototype.removeAllListeners = function(a) {
  var t, n, r;
  if (n = this._events, n === void 0)
    return this;
  if (n.removeListener === void 0)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : n[a] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete n[a]), this;
  if (arguments.length === 0) {
    var o = Object.keys(n), l;
    for (r = 0; r < o.length; ++r)
      l = o[r], l !== "removeListener" && this.removeAllListeners(l);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (t = n[a], typeof t == "function")
    this.removeListener(a, t);
  else if (t !== void 0)
    for (r = t.length - 1; r >= 0; r--)
      this.removeListener(a, t[r]);
  return this;
};
function qD(e, a, t) {
  var n = e._events;
  if (n === void 0)
    return [];
  var r = n[a];
  return r === void 0 ? [] : typeof r == "function" ? t ? [r.listener || r] : [r] : t ? ZNe(r) : BD(r, r.length);
}
ya.prototype.listeners = function(a) {
  return qD(this, a, !0);
};
ya.prototype.rawListeners = function(a) {
  return qD(this, a, !1);
};
ya.listenerCount = function(e, a) {
  return typeof e.listenerCount == "function" ? e.listenerCount(a) : FD.call(e, a);
};
ya.prototype.listenerCount = FD;
function FD(e) {
  var a = this._events;
  if (a !== void 0) {
    var t = a[e];
    if (typeof t == "function")
      return 1;
    if (t !== void 0)
      return t.length;
  }
  return 0;
}
ya.prototype.eventNames = function() {
  return this._eventsCount > 0 ? cm(this._events) : [];
};
function BD(e, a) {
  for (var t = new Array(a), n = 0; n < a; ++n)
    t[n] = e[n];
  return t;
}
function XNe(e, a) {
  for (; a + 1 < e.length; a++)
    e[a] = e[a + 1];
  e.pop();
}
function ZNe(e) {
  for (var a = new Array(e.length), t = 0; t < a.length; ++t)
    a[t] = e[t].listener || e[t];
  return a;
}
function JNe(e, a) {
  return new Promise(function(t, n) {
    function r(l) {
      e.removeListener(a, o), n(l);
    }
    function o() {
      typeof e.removeListener == "function" && e.removeListener("error", r), t([].slice.call(arguments));
    }
    WD(e, a, o, { once: !0 }), a !== "error" && eLe(e, r, { once: !0 });
  });
}
function eLe(e, a, t) {
  typeof e.on == "function" && WD(e, "error", a, t);
}
function WD(e, a, t, n) {
  if (typeof e.on == "function")
    n.once ? e.once(a, t) : e.on(a, t);
  else if (typeof e.addEventListener == "function")
    e.addEventListener(a, function r(o) {
      n.once && e.removeEventListener(a, r), t(o);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e);
}
var aLe = l_.exports, aO = J3, Ll = {
  input: !0,
  option: !0,
  optgroup: !0,
  select: !0,
  button: !0,
  datalist: !0,
  textarea: !0
}, tO = {
  tr: { tr: !0, th: !0, td: !0 },
  th: { th: !0 },
  td: { thead: !0, th: !0, td: !0 },
  body: { head: !0, link: !0, script: !0 },
  li: { li: !0 },
  p: { p: !0 },
  h1: { p: !0 },
  h2: { p: !0 },
  h3: { p: !0 },
  h4: { p: !0 },
  h5: { p: !0 },
  h6: { p: !0 },
  select: Ll,
  input: Ll,
  output: Ll,
  button: Ll,
  datalist: Ll,
  textarea: Ll,
  option: { option: !0 },
  optgroup: { optgroup: !0 }
}, d_ = {
  __proto__: null,
  area: !0,
  base: !0,
  basefont: !0,
  br: !0,
  col: !0,
  command: !0,
  embed: !0,
  frame: !0,
  hr: !0,
  img: !0,
  input: !0,
  isindex: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0
}, UD = {
  __proto__: null,
  math: !0,
  svg: !0
}, HD = {
  __proto__: null,
  mi: !0,
  mo: !0,
  mn: !0,
  ms: !0,
  mtext: !0,
  "annotation-xml": !0,
  foreignObject: !0,
  desc: !0,
  title: !0
}, tLe = /\s|\//;
function ha(e, a) {
  this._options = a || {}, this._cbs = e || {}, this._tagname = "", this._attribname = "", this._attribvalue = "", this._attribs = null, this._stack = [], this._foreignContext = [], this.startIndex = 0, this.endIndex = null, this._lowerCaseTagNames = "lowerCaseTags" in this._options ? !!this._options.lowerCaseTags : !this._options.xmlMode, this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ? !!this._options.lowerCaseAttributeNames : !this._options.xmlMode, this._options.Tokenizer && (aO = this._options.Tokenizer), this._tokenizer = new aO(this._options, this), this._cbs.onparserinit && this._cbs.onparserinit(this);
}
mf(ha, aLe.EventEmitter);
ha.prototype._updatePosition = function(e) {
  this.endIndex === null ? this._tokenizer._sectionStart <= e ? this.startIndex = 0 : this.startIndex = this._tokenizer._sectionStart - e : this.startIndex = this.endIndex + 1, this.endIndex = this._tokenizer.getAbsoluteIndex();
};
ha.prototype.ontext = function(e) {
  this._updatePosition(1), this.endIndex--, this._cbs.ontext && this._cbs.ontext(e);
};
ha.prototype.onopentagname = function(e) {
  if (this._lowerCaseTagNames && (e = e.toLowerCase()), this._tagname = e, !this._options.xmlMode && e in tO)
    for (var a; (a = this._stack[this._stack.length - 1]) in tO[e]; this.onclosetag(a)) ;
  (this._options.xmlMode || !(e in d_)) && (this._stack.push(e), e in UD ? this._foreignContext.push(!0) : e in HD && this._foreignContext.push(!1)), this._cbs.onopentagname && this._cbs.onopentagname(e), this._cbs.onopentag && (this._attribs = {});
};
ha.prototype.onopentagend = function() {
  this._updatePosition(1), this._attribs && (this._cbs.onopentag && this._cbs.onopentag(this._tagname, this._attribs), this._attribs = null), !this._options.xmlMode && this._cbs.onclosetag && this._tagname in d_ && this._cbs.onclosetag(this._tagname), this._tagname = "";
};
ha.prototype.onclosetag = function(e) {
  if (this._updatePosition(1), this._lowerCaseTagNames && (e = e.toLowerCase()), (e in UD || e in HD) && this._foreignContext.pop(), this._stack.length && (!(e in d_) || this._options.xmlMode)) {
    var a = this._stack.lastIndexOf(e);
    if (a !== -1)
      if (this._cbs.onclosetag)
        for (a = this._stack.length - a; a--; ) this._cbs.onclosetag(this._stack.pop());
      else this._stack.length = a;
    else e === "p" && !this._options.xmlMode && (this.onopentagname(e), this._closeCurrentTag());
  } else !this._options.xmlMode && (e === "br" || e === "p") && (this.onopentagname(e), this._closeCurrentTag());
};
ha.prototype.onselfclosingtag = function() {
  this._options.xmlMode || this._options.recognizeSelfClosing || this._foreignContext[this._foreignContext.length - 1] ? this._closeCurrentTag() : this.onopentagend();
};
ha.prototype._closeCurrentTag = function() {
  var e = this._tagname;
  this.onopentagend(), this._stack[this._stack.length - 1] === e && (this._cbs.onclosetag && this._cbs.onclosetag(e), this._stack.pop());
};
ha.prototype.onattribname = function(e) {
  this._lowerCaseAttributeNames && (e = e.toLowerCase()), this._attribname = e;
};
ha.prototype.onattribdata = function(e) {
  this._attribvalue += e;
};
ha.prototype.onattribend = function() {
  this._cbs.onattribute && this._cbs.onattribute(this._attribname, this._attribvalue), this._attribs && !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname) && (this._attribs[this._attribname] = this._attribvalue), this._attribname = "", this._attribvalue = "";
};
ha.prototype._getInstructionName = function(e) {
  var a = e.search(tLe), t = a < 0 ? e : e.substr(0, a);
  return this._lowerCaseTagNames && (t = t.toLowerCase()), t;
};
ha.prototype.ondeclaration = function(e) {
  if (this._cbs.onprocessinginstruction) {
    var a = this._getInstructionName(e);
    this._cbs.onprocessinginstruction("!" + a, "!" + e);
  }
};
ha.prototype.onprocessinginstruction = function(e) {
  if (this._cbs.onprocessinginstruction) {
    var a = this._getInstructionName(e);
    this._cbs.onprocessinginstruction("?" + a, "?" + e);
  }
};
ha.prototype.oncomment = function(e) {
  this._updatePosition(4), this._cbs.oncomment && this._cbs.oncomment(e), this._cbs.oncommentend && this._cbs.oncommentend();
};
ha.prototype.oncdata = function(e) {
  this._updatePosition(1), this._options.xmlMode || this._options.recognizeCDATA ? (this._cbs.oncdatastart && this._cbs.oncdatastart(), this._cbs.ontext && this._cbs.ontext(e), this._cbs.oncdataend && this._cbs.oncdataend()) : this.oncomment("[CDATA[" + e + "]]");
};
ha.prototype.onerror = function(e) {
  this._cbs.onerror && this._cbs.onerror(e);
};
ha.prototype.onend = function() {
  if (this._cbs.onclosetag)
    for (var e = this._stack.length; e > 0; this._cbs.onclosetag(this._stack[--e])) ;
  this._cbs.onend && this._cbs.onend();
};
ha.prototype.reset = function() {
  this._cbs.onreset && this._cbs.onreset(), this._tokenizer.reset(), this._tagname = "", this._attribname = "", this._attribs = null, this._stack = [], this._cbs.onparserinit && this._cbs.onparserinit(this);
};
ha.prototype.parseComplete = function(e) {
  this.reset(), this.end(e);
};
ha.prototype.write = function(e) {
  this._tokenizer.write(e);
};
ha.prototype.end = function(e) {
  this._tokenizer.end(e);
};
ha.prototype.pause = function() {
  this._tokenizer.pause();
};
ha.prototype.resume = function() {
  this._tokenizer.resume();
};
ha.prototype.parseChunk = ha.prototype.write;
ha.prototype.done = ha.prototype.end;
var GD = ha, Tc = {
  Text: "text",
  //Text
  Directive: "directive",
  //<? ... ?>
  Comment: "comment",
  //<!-- ... -->
  Script: "script",
  //<script> tags
  Style: "style",
  //<style> tags
  Tag: "tag",
  //Any tag
  CDATA: "cdata",
  //<![CDATA[ ... ]]>
  Doctype: "doctype",
  isTag: function(e) {
    return e.type === "tag" || e.type === "script" || e.type === "style";
  }
}, VD = { exports: {} };
VD.exports = {
  get firstChild() {
    var e = this.children;
    return e && e[0] || null;
  },
  get lastChild() {
    var e = this.children;
    return e && e[e.length - 1] || null;
  },
  get nodeType() {
    return nO[this.type] || nO.element;
  }
};
var nLe = {
  tagName: "name",
  childNodes: "children",
  parentNode: "parent",
  previousSibling: "prev",
  nextSibling: "next",
  nodeValue: "data"
}, nO = {
  element: 1,
  text: 3,
  cdata: 4,
  comment: 8
};
Object.keys(nLe).forEach(function(e) {
});
var KD = VD.exports, YD = { exports: {} }, rLe = KD, sLe = YD.exports = Object.create(rLe), rO = {
  tagName: "name"
};
Object.keys(rO).forEach(function(e) {
  var a = rO[e];
  Object.defineProperty(sLe, e, {
    get: function() {
      return this[a] || null;
    },
    set: function(t) {
      return this[a] = t, t;
    }
  });
});
var iLe = YD.exports, Mr = Tc, av = /\s+/g, oLe = KD, lLe = iLe;
function Et(e, a, t) {
  typeof e == "object" ? (t = a, a = e, e = null) : typeof a == "function" && (t = a, a = sO), this._callback = e, this._options = a || sO, this._elementCB = t, this.dom = [], this._done = !1, this._tagStack = [], this._parser = this._parser || null;
}
var sO = {
  normalizeWhitespace: !1,
  //Replace all whitespace with single spaces
  withStartIndices: !1,
  //Add startIndex properties to nodes
  withEndIndices: !1
  //Add endIndex properties to nodes
};
Et.prototype.onparserinit = function(e) {
  this._parser = e;
};
Et.prototype.onreset = function() {
  Et.call(this, this._callback, this._options, this._elementCB);
};
Et.prototype.onend = function() {
  this._done || (this._done = !0, this._parser = null, this._handleCallback(null));
};
Et.prototype._handleCallback = Et.prototype.onerror = function(e) {
  if (typeof this._callback == "function")
    this._callback(e, this.dom);
  else if (e) throw e;
};
Et.prototype.onclosetag = function() {
  var e = this._tagStack.pop();
  this._options.withEndIndices && e && (e.endIndex = this._parser.endIndex), this._elementCB && this._elementCB(e);
};
Et.prototype._createDomElement = function(e) {
  if (!this._options.withDomLvl1) return e;
  var a;
  e.type === "tag" ? a = Object.create(lLe) : a = Object.create(oLe);
  for (var t in e)
    e.hasOwnProperty(t) && (a[t] = e[t]);
  return a;
};
Et.prototype._addDomElement = function(e) {
  var a = this._tagStack[this._tagStack.length - 1], t = a ? a.children : this.dom, n = t[t.length - 1];
  e.next = null, this._options.withStartIndices && (e.startIndex = this._parser.startIndex), this._options.withEndIndices && (e.endIndex = this._parser.endIndex), n ? (e.prev = n, n.next = e) : e.prev = null, t.push(e), e.parent = a || null;
};
Et.prototype.onopentag = function(e, a) {
  var t = {
    type: e === "script" ? Mr.Script : e === "style" ? Mr.Style : Mr.Tag,
    name: e,
    attribs: a,
    children: []
  }, n = this._createDomElement(t);
  this._addDomElement(n), this._tagStack.push(n);
};
Et.prototype.ontext = function(e) {
  var a = this._options.normalizeWhitespace || this._options.ignoreWhitespace, t;
  if (!this._tagStack.length && this.dom.length && (t = this.dom[this.dom.length - 1]).type === Mr.Text)
    a ? t.data = (t.data + e).replace(av, " ") : t.data += e;
  else if (this._tagStack.length && (t = this._tagStack[this._tagStack.length - 1]) && (t = t.children[t.children.length - 1]) && t.type === Mr.Text)
    a ? t.data = (t.data + e).replace(av, " ") : t.data += e;
  else {
    a && (e = e.replace(av, " "));
    var n = this._createDomElement({
      data: e,
      type: Mr.Text
    });
    this._addDomElement(n);
  }
};
Et.prototype.oncomment = function(e) {
  var a = this._tagStack[this._tagStack.length - 1];
  if (a && a.type === Mr.Comment) {
    a.data += e;
    return;
  }
  var t = {
    data: e,
    type: Mr.Comment
  }, n = this._createDomElement(t);
  this._addDomElement(n), this._tagStack.push(n);
};
Et.prototype.oncdatastart = function() {
  var e = {
    children: [{
      data: "",
      type: Mr.Text
    }],
    type: Mr.CDATA
  }, a = this._createDomElement(e);
  this._addDomElement(a), this._tagStack.push(a);
};
Et.prototype.oncommentend = Et.prototype.oncdataend = function() {
  this._tagStack.pop();
};
Et.prototype.onprocessinginstruction = function(e, a) {
  var t = this._createDomElement({
    name: e,
    data: a,
    type: Mr.Directive
  });
  this._addDomElement(t);
};
var QD = Et, tv = { exports: {} }, nv = { exports: {} }, rv = {}, iO;
function dLe() {
  return iO || (iO = 1, function(e) {
    Object.defineProperty(e, "__esModule", { value: !0 }), e.Doctype = e.CDATA = e.Tag = e.Style = e.Script = e.Comment = e.Directive = e.Text = e.Root = e.isTag = e.ElementType = void 0;
    var a;
    (function(n) {
      n.Root = "root", n.Text = "text", n.Directive = "directive", n.Comment = "comment", n.Script = "script", n.Style = "style", n.Tag = "tag", n.CDATA = "cdata", n.Doctype = "doctype";
    })(a = e.ElementType || (e.ElementType = {}));
    function t(n) {
      return n.type === a.Tag || n.type === a.Script || n.type === a.Style;
    }
    e.isTag = t, e.Root = a.Root, e.Text = a.Text, e.Directive = a.Directive, e.Comment = a.Comment, e.Script = a.Script, e.Style = a.Style, e.Tag = a.Tag, e.CDATA = a.CDATA, e.Doctype = a.Doctype;
  }(rv)), rv;
}
var sv = {}, Fs = {};
const uLe = "Á", cLe = "á", pLe = "Ă", gLe = "ă", mLe = "∾", fLe = "∿", hLe = "∾̳", yLe = "Â", zLe = "â", bLe = "´", wLe = "А", vLe = "а", kLe = "Æ", _Le = "æ", ELe = "⁡", ALe = "𝔄", TLe = "𝔞", $Le = "À", jLe = "à", xLe = "ℵ", SLe = "ℵ", OLe = "Α", ILe = "α", CLe = "Ā", PLe = "ā", RLe = "⨿", DLe = "&", NLe = "&", LLe = "⩕", MLe = "⩓", qLe = "∧", FLe = "⩜", BLe = "⩘", WLe = "⩚", ULe = "∠", HLe = "⦤", GLe = "∠", VLe = "⦨", KLe = "⦩", YLe = "⦪", QLe = "⦫", XLe = "⦬", ZLe = "⦭", JLe = "⦮", eMe = "⦯", aMe = "∡", tMe = "∟", nMe = "⊾", rMe = "⦝", sMe = "∢", iMe = "Å", oMe = "⍼", lMe = "Ą", dMe = "ą", uMe = "𝔸", cMe = "𝕒", pMe = "⩯", gMe = "≈", mMe = "⩰", fMe = "≊", hMe = "≋", yMe = "'", zMe = "⁡", bMe = "≈", wMe = "≊", vMe = "Å", kMe = "å", _Me = "𝒜", EMe = "𝒶", AMe = "≔", TMe = "*", $Me = "≈", jMe = "≍", xMe = "Ã", SMe = "ã", OMe = "Ä", IMe = "ä", CMe = "∳", PMe = "⨑", RMe = "≌", DMe = "϶", NMe = "‵", LMe = "∽", MMe = "⋍", qMe = "∖", FMe = "⫧", BMe = "⊽", WMe = "⌅", UMe = "⌆", HMe = "⌅", GMe = "⎵", VMe = "⎶", KMe = "≌", YMe = "Б", QMe = "б", XMe = "„", ZMe = "∵", JMe = "∵", e4e = "∵", a4e = "⦰", t4e = "϶", n4e = "ℬ", r4e = "ℬ", s4e = "Β", i4e = "β", o4e = "ℶ", l4e = "≬", d4e = "𝔅", u4e = "𝔟", c4e = "⋂", p4e = "◯", g4e = "⋃", m4e = "⨀", f4e = "⨁", h4e = "⨂", y4e = "⨆", z4e = "★", b4e = "▽", w4e = "△", v4e = "⨄", k4e = "⋁", _4e = "⋀", E4e = "⤍", A4e = "⧫", T4e = "▪", $4e = "▴", j4e = "▾", x4e = "◂", S4e = "▸", O4e = "␣", I4e = "▒", C4e = "░", P4e = "▓", R4e = "█", D4e = "=⃥", N4e = "≡⃥", L4e = "⫭", M4e = "⌐", q4e = "𝔹", F4e = "𝕓", B4e = "⊥", W4e = "⊥", U4e = "⋈", H4e = "⧉", G4e = "┐", V4e = "╕", K4e = "╖", Y4e = "╗", Q4e = "┌", X4e = "╒", Z4e = "╓", J4e = "╔", e6e = "─", a6e = "═", t6e = "┬", n6e = "╤", r6e = "╥", s6e = "╦", i6e = "┴", o6e = "╧", l6e = "╨", d6e = "╩", u6e = "⊟", c6e = "⊞", p6e = "⊠", g6e = "┘", m6e = "╛", f6e = "╜", h6e = "╝", y6e = "└", z6e = "╘", b6e = "╙", w6e = "╚", v6e = "│", k6e = "║", _6e = "┼", E6e = "╪", A6e = "╫", T6e = "╬", $6e = "┤", j6e = "╡", x6e = "╢", S6e = "╣", O6e = "├", I6e = "╞", C6e = "╟", P6e = "╠", R6e = "‵", D6e = "˘", N6e = "˘", L6e = "¦", M6e = "𝒷", q6e = "ℬ", F6e = "⁏", B6e = "∽", W6e = "⋍", U6e = "⧅", H6e = "\\", G6e = "⟈", V6e = "•", K6e = "•", Y6e = "≎", Q6e = "⪮", X6e = "≏", Z6e = "≎", J6e = "≏", eqe = "Ć", aqe = "ć", tqe = "⩄", nqe = "⩉", rqe = "⩋", sqe = "∩", iqe = "⋒", oqe = "⩇", lqe = "⩀", dqe = "ⅅ", uqe = "∩︀", cqe = "⁁", pqe = "ˇ", gqe = "ℭ", mqe = "⩍", fqe = "Č", hqe = "č", yqe = "Ç", zqe = "ç", bqe = "Ĉ", wqe = "ĉ", vqe = "∰", kqe = "⩌", _qe = "⩐", Eqe = "Ċ", Aqe = "ċ", Tqe = "¸", $qe = "¸", jqe = "⦲", xqe = "¢", Sqe = "·", Oqe = "·", Iqe = "𝔠", Cqe = "ℭ", Pqe = "Ч", Rqe = "ч", Dqe = "✓", Nqe = "✓", Lqe = "Χ", Mqe = "χ", qqe = "ˆ", Fqe = "≗", Bqe = "↺", Wqe = "↻", Uqe = "⊛", Hqe = "⊚", Gqe = "⊝", Vqe = "⊙", Kqe = "®", Yqe = "Ⓢ", Qqe = "⊖", Xqe = "⊕", Zqe = "⊗", Jqe = "○", eFe = "⧃", aFe = "≗", tFe = "⨐", nFe = "⫯", rFe = "⧂", sFe = "∲", iFe = "”", oFe = "’", lFe = "♣", dFe = "♣", uFe = ":", cFe = "∷", pFe = "⩴", gFe = "≔", mFe = "≔", fFe = ",", hFe = "@", yFe = "∁", zFe = "∘", bFe = "∁", wFe = "ℂ", vFe = "≅", kFe = "⩭", _Fe = "≡", EFe = "∮", AFe = "∯", TFe = "∮", $Fe = "𝕔", jFe = "ℂ", xFe = "∐", SFe = "∐", OFe = "©", IFe = "©", CFe = "℗", PFe = "∳", RFe = "↵", DFe = "✗", NFe = "⨯", LFe = "𝒞", MFe = "𝒸", qFe = "⫏", FFe = "⫑", BFe = "⫐", WFe = "⫒", UFe = "⋯", HFe = "⤸", GFe = "⤵", VFe = "⋞", KFe = "⋟", YFe = "↶", QFe = "⤽", XFe = "⩈", ZFe = "⩆", JFe = "≍", eBe = "∪", aBe = "⋓", tBe = "⩊", nBe = "⊍", rBe = "⩅", sBe = "∪︀", iBe = "↷", oBe = "⤼", lBe = "⋞", dBe = "⋟", uBe = "⋎", cBe = "⋏", pBe = "¤", gBe = "↶", mBe = "↷", fBe = "⋎", hBe = "⋏", yBe = "∲", zBe = "∱", bBe = "⌭", wBe = "†", vBe = "‡", kBe = "ℸ", _Be = "↓", EBe = "↡", ABe = "⇓", TBe = "‐", $Be = "⫤", jBe = "⊣", xBe = "⤏", SBe = "˝", OBe = "Ď", IBe = "ď", CBe = "Д", PBe = "д", RBe = "‡", DBe = "⇊", NBe = "ⅅ", LBe = "ⅆ", MBe = "⤑", qBe = "⩷", FBe = "°", BBe = "∇", WBe = "Δ", UBe = "δ", HBe = "⦱", GBe = "⥿", VBe = "𝔇", KBe = "𝔡", YBe = "⥥", QBe = "⇃", XBe = "⇂", ZBe = "´", JBe = "˙", e8e = "˝", a8e = "`", t8e = "˜", n8e = "⋄", r8e = "⋄", s8e = "⋄", i8e = "♦", o8e = "♦", l8e = "¨", d8e = "ⅆ", u8e = "ϝ", c8e = "⋲", p8e = "÷", g8e = "÷", m8e = "⋇", f8e = "⋇", h8e = "Ђ", y8e = "ђ", z8e = "⌞", b8e = "⌍", w8e = "$", v8e = "𝔻", k8e = "𝕕", _8e = "¨", E8e = "˙", A8e = "⃜", T8e = "≐", $8e = "≑", j8e = "≐", x8e = "∸", S8e = "∔", O8e = "⊡", I8e = "⌆", C8e = "∯", P8e = "¨", R8e = "⇓", D8e = "⇐", N8e = "⇔", L8e = "⫤", M8e = "⟸", q8e = "⟺", F8e = "⟹", B8e = "⇒", W8e = "⊨", U8e = "⇑", H8e = "⇕", G8e = "∥", V8e = "⤓", K8e = "↓", Y8e = "↓", Q8e = "⇓", X8e = "⇵", Z8e = "̑", J8e = "⇊", e5e = "⇃", a5e = "⇂", t5e = "⥐", n5e = "⥞", r5e = "⥖", s5e = "↽", i5e = "⥟", o5e = "⥗", l5e = "⇁", d5e = "↧", u5e = "⊤", c5e = "⤐", p5e = "⌟", g5e = "⌌", m5e = "𝒟", f5e = "𝒹", h5e = "Ѕ", y5e = "ѕ", z5e = "⧶", b5e = "Đ", w5e = "đ", v5e = "⋱", k5e = "▿", _5e = "▾", E5e = "⇵", A5e = "⥯", T5e = "⦦", $5e = "Џ", j5e = "џ", x5e = "⟿", S5e = "É", O5e = "é", I5e = "⩮", C5e = "Ě", P5e = "ě", R5e = "Ê", D5e = "ê", N5e = "≖", L5e = "≕", M5e = "Э", q5e = "э", F5e = "⩷", B5e = "Ė", W5e = "ė", U5e = "≑", H5e = "ⅇ", G5e = "≒", V5e = "𝔈", K5e = "𝔢", Y5e = "⪚", Q5e = "È", X5e = "è", Z5e = "⪖", J5e = "⪘", eWe = "⪙", aWe = "∈", tWe = "⏧", nWe = "ℓ", rWe = "⪕", sWe = "⪗", iWe = "Ē", oWe = "ē", lWe = "∅", dWe = "∅", uWe = "◻", cWe = "∅", pWe = "▫", gWe = " ", mWe = " ", fWe = " ", hWe = "Ŋ", yWe = "ŋ", zWe = " ", bWe = "Ę", wWe = "ę", vWe = "𝔼", kWe = "𝕖", _We = "⋕", EWe = "⧣", AWe = "⩱", TWe = "ε", $We = "Ε", jWe = "ε", xWe = "ϵ", SWe = "≖", OWe = "≕", IWe = "≂", CWe = "⪖", PWe = "⪕", RWe = "⩵", DWe = "=", NWe = "≂", LWe = "≟", MWe = "⇌", qWe = "≡", FWe = "⩸", BWe = "⧥", WWe = "⥱", UWe = "≓", HWe = "ℯ", GWe = "ℰ", VWe = "≐", KWe = "⩳", YWe = "≂", QWe = "Η", XWe = "η", ZWe = "Ð", JWe = "ð", eUe = "Ë", aUe = "ë", tUe = "€", nUe = "!", rUe = "∃", sUe = "∃", iUe = "ℰ", oUe = "ⅇ", lUe = "ⅇ", dUe = "≒", uUe = "Ф", cUe = "ф", pUe = "♀", gUe = "ﬃ", mUe = "ﬀ", fUe = "ﬄ", hUe = "𝔉", yUe = "𝔣", zUe = "ﬁ", bUe = "◼", wUe = "▪", vUe = "fj", kUe = "♭", _Ue = "ﬂ", EUe = "▱", AUe = "ƒ", TUe = "𝔽", $Ue = "𝕗", jUe = "∀", xUe = "∀", SUe = "⋔", OUe = "⫙", IUe = "ℱ", CUe = "⨍", PUe = "½", RUe = "⅓", DUe = "¼", NUe = "⅕", LUe = "⅙", MUe = "⅛", qUe = "⅔", FUe = "⅖", BUe = "¾", WUe = "⅗", UUe = "⅜", HUe = "⅘", GUe = "⅚", VUe = "⅝", KUe = "⅞", YUe = "⁄", QUe = "⌢", XUe = "𝒻", ZUe = "ℱ", JUe = "ǵ", e9e = "Γ", a9e = "γ", t9e = "Ϝ", n9e = "ϝ", r9e = "⪆", s9e = "Ğ", i9e = "ğ", o9e = "Ģ", l9e = "Ĝ", d9e = "ĝ", u9e = "Г", c9e = "г", p9e = "Ġ", g9e = "ġ", m9e = "≥", f9e = "≧", h9e = "⪌", y9e = "⋛", z9e = "≥", b9e = "≧", w9e = "⩾", v9e = "⪩", k9e = "⩾", _9e = "⪀", E9e = "⪂", A9e = "⪄", T9e = "⋛︀", $9e = "⪔", j9e = "𝔊", x9e = "𝔤", S9e = "≫", O9e = "⋙", I9e = "⋙", C9e = "ℷ", P9e = "Ѓ", R9e = "ѓ", D9e = "⪥", N9e = "≷", L9e = "⪒", M9e = "⪤", q9e = "⪊", F9e = "⪊", B9e = "⪈", W9e = "≩", U9e = "⪈", H9e = "≩", G9e = "⋧", V9e = "𝔾", K9e = "𝕘", Y9e = "`", Q9e = "≥", X9e = "⋛", Z9e = "≧", J9e = "⪢", e7e = "≷", a7e = "⩾", t7e = "≳", n7e = "𝒢", r7e = "ℊ", s7e = "≳", i7e = "⪎", o7e = "⪐", l7e = "⪧", d7e = "⩺", u7e = ">", c7e = ">", p7e = "≫", g7e = "⋗", m7e = "⦕", f7e = "⩼", h7e = "⪆", y7e = "⥸", z7e = "⋗", b7e = "⋛", w7e = "⪌", v7e = "≷", k7e = "≳", _7e = "≩︀", E7e = "≩︀", A7e = "ˇ", T7e = " ", $7e = "½", j7e = "ℋ", x7e = "Ъ", S7e = "ъ", O7e = "⥈", I7e = "↔", C7e = "⇔", P7e = "↭", R7e = "^", D7e = "ℏ", N7e = "Ĥ", L7e = "ĥ", M7e = "♥", q7e = "♥", F7e = "…", B7e = "⊹", W7e = "𝔥", U7e = "ℌ", H7e = "ℋ", G7e = "⤥", V7e = "⤦", K7e = "⇿", Y7e = "∻", Q7e = "↩", X7e = "↪", Z7e = "𝕙", J7e = "ℍ", eHe = "―", aHe = "─", tHe = "𝒽", nHe = "ℋ", rHe = "ℏ", sHe = "Ħ", iHe = "ħ", oHe = "≎", lHe = "≏", dHe = "⁃", uHe = "‐", cHe = "Í", pHe = "í", gHe = "⁣", mHe = "Î", fHe = "î", hHe = "И", yHe = "и", zHe = "İ", bHe = "Е", wHe = "е", vHe = "¡", kHe = "⇔", _He = "𝔦", EHe = "ℑ", AHe = "Ì", THe = "ì", $He = "ⅈ", jHe = "⨌", xHe = "∭", SHe = "⧜", OHe = "℩", IHe = "Ĳ", CHe = "ĳ", PHe = "Ī", RHe = "ī", DHe = "ℑ", NHe = "ⅈ", LHe = "ℐ", MHe = "ℑ", qHe = "ı", FHe = "ℑ", BHe = "⊷", WHe = "Ƶ", UHe = "⇒", HHe = "℅", GHe = "∞", VHe = "⧝", KHe = "ı", YHe = "⊺", QHe = "∫", XHe = "∬", ZHe = "ℤ", JHe = "∫", eGe = "⊺", aGe = "⋂", tGe = "⨗", nGe = "⨼", rGe = "⁣", sGe = "⁢", iGe = "Ё", oGe = "ё", lGe = "Į", dGe = "į", uGe = "𝕀", cGe = "𝕚", pGe = "Ι", gGe = "ι", mGe = "⨼", fGe = "¿", hGe = "𝒾", yGe = "ℐ", zGe = "∈", bGe = "⋵", wGe = "⋹", vGe = "⋴", kGe = "⋳", _Ge = "∈", EGe = "⁢", AGe = "Ĩ", TGe = "ĩ", $Ge = "І", jGe = "і", xGe = "Ï", SGe = "ï", OGe = "Ĵ", IGe = "ĵ", CGe = "Й", PGe = "й", RGe = "𝔍", DGe = "𝔧", NGe = "ȷ", LGe = "𝕁", MGe = "𝕛", qGe = "𝒥", FGe = "𝒿", BGe = "Ј", WGe = "ј", UGe = "Є", HGe = "є", GGe = "Κ", VGe = "κ", KGe = "ϰ", YGe = "Ķ", QGe = "ķ", XGe = "К", ZGe = "к", JGe = "𝔎", eVe = "𝔨", aVe = "ĸ", tVe = "Х", nVe = "х", rVe = "Ќ", sVe = "ќ", iVe = "𝕂", oVe = "𝕜", lVe = "𝒦", dVe = "𝓀", uVe = "⇚", cVe = "Ĺ", pVe = "ĺ", gVe = "⦴", mVe = "ℒ", fVe = "Λ", hVe = "λ", yVe = "⟨", zVe = "⟪", bVe = "⦑", wVe = "⟨", vVe = "⪅", kVe = "ℒ", _Ve = "«", EVe = "⇤", AVe = "⤟", TVe = "←", $Ve = "↞", jVe = "⇐", xVe = "⤝", SVe = "↩", OVe = "↫", IVe = "⤹", CVe = "⥳", PVe = "↢", RVe = "⤙", DVe = "⤛", NVe = "⪫", LVe = "⪭", MVe = "⪭︀", qVe = "⤌", FVe = "⤎", BVe = "❲", WVe = "{", UVe = "[", HVe = "⦋", GVe = "⦏", VVe = "⦍", KVe = "Ľ", YVe = "ľ", QVe = "Ļ", XVe = "ļ", ZVe = "⌈", JVe = "{", eKe = "Л", aKe = "л", tKe = "⤶", nKe = "“", rKe = "„", sKe = "⥧", iKe = "⥋", oKe = "↲", lKe = "≤", dKe = "≦", uKe = "⟨", cKe = "⇤", pKe = "←", gKe = "←", mKe = "⇐", fKe = "⇆", hKe = "↢", yKe = "⌈", zKe = "⟦", bKe = "⥡", wKe = "⥙", vKe = "⇃", kKe = "⌊", _Ke = "↽", EKe = "↼", AKe = "⇇", TKe = "↔", $Ke = "↔", jKe = "⇔", xKe = "⇆", SKe = "⇋", OKe = "↭", IKe = "⥎", CKe = "↤", PKe = "⊣", RKe = "⥚", DKe = "⋋", NKe = "⧏", LKe = "⊲", MKe = "⊴", qKe = "⥑", FKe = "⥠", BKe = "⥘", WKe = "↿", UKe = "⥒", HKe = "↼", GKe = "⪋", VKe = "⋚", KKe = "≤", YKe = "≦", QKe = "⩽", XKe = "⪨", ZKe = "⩽", JKe = "⩿", eYe = "⪁", aYe = "⪃", tYe = "⋚︀", nYe = "⪓", rYe = "⪅", sYe = "⋖", iYe = "⋚", oYe = "⪋", lYe = "⋚", dYe = "≦", uYe = "≶", cYe = "≶", pYe = "⪡", gYe = "≲", mYe = "⩽", fYe = "≲", hYe = "⥼", yYe = "⌊", zYe = "𝔏", bYe = "𝔩", wYe = "≶", vYe = "⪑", kYe = "⥢", _Ye = "↽", EYe = "↼", AYe = "⥪", TYe = "▄", $Ye = "Љ", jYe = "љ", xYe = "⇇", SYe = "≪", OYe = "⋘", IYe = "⌞", CYe = "⇚", PYe = "⥫", RYe = "◺", DYe = "Ŀ", NYe = "ŀ", LYe = "⎰", MYe = "⎰", qYe = "⪉", FYe = "⪉", BYe = "⪇", WYe = "≨", UYe = "⪇", HYe = "≨", GYe = "⋦", VYe = "⟬", KYe = "⇽", YYe = "⟦", QYe = "⟵", XYe = "⟵", ZYe = "⟸", JYe = "⟷", eQe = "⟷", aQe = "⟺", tQe = "⟼", nQe = "⟶", rQe = "⟶", sQe = "⟹", iQe = "↫", oQe = "↬", lQe = "⦅", dQe = "𝕃", uQe = "𝕝", cQe = "⨭", pQe = "⨴", gQe = "∗", mQe = "_", fQe = "↙", hQe = "↘", yQe = "◊", zQe = "◊", bQe = "⧫", wQe = "(", vQe = "⦓", kQe = "⇆", _Qe = "⌟", EQe = "⇋", AQe = "⥭", TQe = "‎", $Qe = "⊿", jQe = "‹", xQe = "𝓁", SQe = "ℒ", OQe = "↰", IQe = "↰", CQe = "≲", PQe = "⪍", RQe = "⪏", DQe = "[", NQe = "‘", LQe = "‚", MQe = "Ł", qQe = "ł", FQe = "⪦", BQe = "⩹", WQe = "<", UQe = "<", HQe = "≪", GQe = "⋖", VQe = "⋋", KQe = "⋉", YQe = "⥶", QQe = "⩻", XQe = "◃", ZQe = "⊴", JQe = "◂", eXe = "⦖", aXe = "⥊", tXe = "⥦", nXe = "≨︀", rXe = "≨︀", sXe = "¯", iXe = "♂", oXe = "✠", lXe = "✠", dXe = "↦", uXe = "↦", cXe = "↧", pXe = "↤", gXe = "↥", mXe = "▮", fXe = "⨩", hXe = "М", yXe = "м", zXe = "—", bXe = "∺", wXe = "∡", vXe = " ", kXe = "ℳ", _Xe = "𝔐", EXe = "𝔪", AXe = "℧", TXe = "µ", $Xe = "*", jXe = "⫰", xXe = "∣", SXe = "·", OXe = "⊟", IXe = "−", CXe = "∸", PXe = "⨪", RXe = "∓", DXe = "⫛", NXe = "…", LXe = "∓", MXe = "⊧", qXe = "𝕄", FXe = "𝕞", BXe = "∓", WXe = "𝓂", UXe = "ℳ", HXe = "∾", GXe = "Μ", VXe = "μ", KXe = "⊸", YXe = "⊸", QXe = "∇", XXe = "Ń", ZXe = "ń", JXe = "∠⃒", eZe = "≉", aZe = "⩰̸", tZe = "≋̸", nZe = "ŉ", rZe = "≉", sZe = "♮", iZe = "ℕ", oZe = "♮", lZe = " ", dZe = "≎̸", uZe = "≏̸", cZe = "⩃", pZe = "Ň", gZe = "ň", mZe = "Ņ", fZe = "ņ", hZe = "≇", yZe = "⩭̸", zZe = "⩂", bZe = "Н", wZe = "н", vZe = "–", kZe = "⤤", _Ze = "↗", EZe = "⇗", AZe = "↗", TZe = "≠", $Ze = "≐̸", jZe = "​", xZe = "​", SZe = "​", OZe = "​", IZe = "≢", CZe = "⤨", PZe = "≂̸", RZe = "≫", DZe = "≪", NZe = `
`, LZe = "∄", MZe = "∄", qZe = "𝔑", FZe = "𝔫", BZe = "≧̸", WZe = "≱", UZe = "≱", HZe = "≧̸", GZe = "⩾̸", VZe = "⩾̸", KZe = "⋙̸", YZe = "≵", QZe = "≫⃒", XZe = "≯", ZZe = "≯", JZe = "≫̸", eJe = "↮", aJe = "⇎", tJe = "⫲", nJe = "∋", rJe = "⋼", sJe = "⋺", iJe = "∋", oJe = "Њ", lJe = "њ", dJe = "↚", uJe = "⇍", cJe = "‥", pJe = "≦̸", gJe = "≰", mJe = "↚", fJe = "⇍", hJe = "↮", yJe = "⇎", zJe = "≰", bJe = "≦̸", wJe = "⩽̸", vJe = "⩽̸", kJe = "≮", _Je = "⋘̸", EJe = "≴", AJe = "≪⃒", TJe = "≮", $Je = "⋪", jJe = "⋬", xJe = "≪̸", SJe = "∤", OJe = "⁠", IJe = " ", CJe = "𝕟", PJe = "ℕ", RJe = "⫬", DJe = "¬", NJe = "≢", LJe = "≭", MJe = "∦", qJe = "∉", FJe = "≠", BJe = "≂̸", WJe = "∄", UJe = "≯", HJe = "≱", GJe = "≧̸", VJe = "≫̸", KJe = "≹", YJe = "⩾̸", QJe = "≵", XJe = "≎̸", ZJe = "≏̸", JJe = "∉", eea = "⋵̸", aea = "⋹̸", tea = "∉", nea = "⋷", rea = "⋶", sea = "⧏̸", iea = "⋪", oea = "⋬", lea = "≮", dea = "≰", uea = "≸", cea = "≪̸", pea = "⩽̸", gea = "≴", mea = "⪢̸", fea = "⪡̸", hea = "∌", yea = "∌", zea = "⋾", bea = "⋽", wea = "⊀", vea = "⪯̸", kea = "⋠", _ea = "∌", Eea = "⧐̸", Aea = "⋫", Tea = "⋭", $ea = "⊏̸", jea = "⋢", xea = "⊐̸", Sea = "⋣", Oea = "⊂⃒", Iea = "⊈", Cea = "⊁", Pea = "⪰̸", Rea = "⋡", Dea = "≿̸", Nea = "⊃⃒", Lea = "⊉", Mea = "≁", qea = "≄", Fea = "≇", Bea = "≉", Wea = "∤", Uea = "∦", Hea = "∦", Gea = "⫽⃥", Vea = "∂̸", Kea = "⨔", Yea = "⊀", Qea = "⋠", Xea = "⊀", Zea = "⪯̸", Jea = "⪯̸", eaa = "⤳̸", aaa = "↛", taa = "⇏", naa = "↝̸", raa = "↛", saa = "⇏", iaa = "⋫", oaa = "⋭", laa = "⊁", daa = "⋡", uaa = "⪰̸", caa = "𝒩", paa = "𝓃", gaa = "∤", maa = "∦", faa = "≁", haa = "≄", yaa = "≄", zaa = "∤", baa = "∦", waa = "⋢", vaa = "⋣", kaa = "⊄", _aa = "⫅̸", Eaa = "⊈", Aaa = "⊂⃒", Taa = "⊈", $aa = "⫅̸", jaa = "⊁", xaa = "⪰̸", Saa = "⊅", Oaa = "⫆̸", Iaa = "⊉", Caa = "⊃⃒", Paa = "⊉", Raa = "⫆̸", Daa = "≹", Naa = "Ñ", Laa = "ñ", Maa = "≸", qaa = "⋪", Faa = "⋬", Baa = "⋫", Waa = "⋭", Uaa = "Ν", Haa = "ν", Gaa = "#", Vaa = "№", Kaa = " ", Yaa = "≍⃒", Qaa = "⊬", Xaa = "⊭", Zaa = "⊮", Jaa = "⊯", eta = "≥⃒", ata = ">⃒", tta = "⤄", nta = "⧞", rta = "⤂", sta = "≤⃒", ita = "<⃒", ota = "⊴⃒", lta = "⤃", dta = "⊵⃒", uta = "∼⃒", cta = "⤣", pta = "↖", gta = "⇖", mta = "↖", fta = "⤧", hta = "Ó", yta = "ó", zta = "⊛", bta = "Ô", wta = "ô", vta = "⊚", kta = "О", _ta = "о", Eta = "⊝", Ata = "Ő", Tta = "ő", $ta = "⨸", jta = "⊙", xta = "⦼", Sta = "Œ", Ota = "œ", Ita = "⦿", Cta = "𝔒", Pta = "𝔬", Rta = "˛", Dta = "Ò", Nta = "ò", Lta = "⧁", Mta = "⦵", qta = "Ω", Fta = "∮", Bta = "↺", Wta = "⦾", Uta = "⦻", Hta = "‾", Gta = "⧀", Vta = "Ō", Kta = "ō", Yta = "Ω", Qta = "ω", Xta = "Ο", Zta = "ο", Jta = "⦶", ena = "⊖", ana = "𝕆", tna = "𝕠", nna = "⦷", rna = "“", sna = "‘", ina = "⦹", ona = "⊕", lna = "↻", dna = "⩔", una = "∨", cna = "⩝", pna = "ℴ", gna = "ℴ", mna = "ª", fna = "º", hna = "⊶", yna = "⩖", zna = "⩗", bna = "⩛", wna = "Ⓢ", vna = "𝒪", kna = "ℴ", _na = "Ø", Ena = "ø", Ana = "⊘", Tna = "Õ", $na = "õ", jna = "⨶", xna = "⨷", Sna = "⊗", Ona = "Ö", Ina = "ö", Cna = "⌽", Pna = "‾", Rna = "⏞", Dna = "⎴", Nna = "⏜", Lna = "¶", Mna = "∥", qna = "∥", Fna = "⫳", Bna = "⫽", Wna = "∂", Una = "∂", Hna = "П", Gna = "п", Vna = "%", Kna = ".", Yna = "‰", Qna = "⊥", Xna = "‱", Zna = "𝔓", Jna = "𝔭", era = "Φ", ara = "φ", tra = "ϕ", nra = "ℳ", rra = "☎", sra = "Π", ira = "π", ora = "⋔", lra = "ϖ", dra = "ℏ", ura = "ℎ", cra = "ℏ", pra = "⨣", gra = "⊞", mra = "⨢", fra = "+", hra = "∔", yra = "⨥", zra = "⩲", bra = "±", wra = "±", vra = "⨦", kra = "⨧", _ra = "±", Era = "ℌ", Ara = "⨕", Tra = "𝕡", $ra = "ℙ", jra = "£", xra = "⪷", Sra = "⪻", Ora = "≺", Ira = "≼", Cra = "⪷", Pra = "≺", Rra = "≼", Dra = "≺", Nra = "⪯", Lra = "≼", Mra = "≾", qra = "⪯", Fra = "⪹", Bra = "⪵", Wra = "⋨", Ura = "⪯", Hra = "⪳", Gra = "≾", Vra = "′", Kra = "″", Yra = "ℙ", Qra = "⪹", Xra = "⪵", Zra = "⋨", Jra = "∏", esa = "∏", asa = "⌮", tsa = "⌒", nsa = "⌓", rsa = "∝", ssa = "∝", isa = "∷", osa = "∝", lsa = "≾", dsa = "⊰", usa = "𝒫", csa = "𝓅", psa = "Ψ", gsa = "ψ", msa = " ", fsa = "𝔔", hsa = "𝔮", ysa = "⨌", zsa = "𝕢", bsa = "ℚ", wsa = "⁗", vsa = "𝒬", ksa = "𝓆", _sa = "ℍ", Esa = "⨖", Asa = "?", Tsa = "≟", $sa = '"', jsa = '"', xsa = "⇛", Ssa = "∽̱", Osa = "Ŕ", Isa = "ŕ", Csa = "√", Psa = "⦳", Rsa = "⟩", Dsa = "⟫", Nsa = "⦒", Lsa = "⦥", Msa = "⟩", qsa = "»", Fsa = "⥵", Bsa = "⇥", Wsa = "⤠", Usa = "⤳", Hsa = "→", Gsa = "↠", Vsa = "⇒", Ksa = "⤞", Ysa = "↪", Qsa = "↬", Xsa = "⥅", Zsa = "⥴", Jsa = "⤖", eia = "↣", aia = "↝", tia = "⤚", nia = "⤜", ria = "∶", sia = "ℚ", iia = "⤍", oia = "⤏", lia = "⤐", dia = "❳", uia = "}", cia = "]", pia = "⦌", gia = "⦎", mia = "⦐", fia = "Ř", hia = "ř", yia = "Ŗ", zia = "ŗ", bia = "⌉", wia = "}", via = "Р", kia = "р", _ia = "⤷", Eia = "⥩", Aia = "”", Tia = "”", $ia = "↳", jia = "ℜ", xia = "ℛ", Sia = "ℜ", Oia = "ℝ", Iia = "ℜ", Cia = "▭", Pia = "®", Ria = "®", Dia = "∋", Nia = "⇋", Lia = "⥯", Mia = "⥽", qia = "⌋", Fia = "𝔯", Bia = "ℜ", Wia = "⥤", Uia = "⇁", Hia = "⇀", Gia = "⥬", Via = "Ρ", Kia = "ρ", Yia = "ϱ", Qia = "⟩", Xia = "⇥", Zia = "→", Jia = "→", eoa = "⇒", aoa = "⇄", toa = "↣", noa = "⌉", roa = "⟧", soa = "⥝", ioa = "⥕", ooa = "⇂", loa = "⌋", doa = "⇁", uoa = "⇀", coa = "⇄", poa = "⇌", goa = "⇉", moa = "↝", foa = "↦", hoa = "⊢", yoa = "⥛", zoa = "⋌", boa = "⧐", woa = "⊳", voa = "⊵", koa = "⥏", _oa = "⥜", Eoa = "⥔", Aoa = "↾", Toa = "⥓", $oa = "⇀", joa = "˚", xoa = "≓", Soa = "⇄", Ooa = "⇌", Ioa = "‏", Coa = "⎱", Poa = "⎱", Roa = "⫮", Doa = "⟭", Noa = "⇾", Loa = "⟧", Moa = "⦆", qoa = "𝕣", Foa = "ℝ", Boa = "⨮", Woa = "⨵", Uoa = "⥰", Hoa = ")", Goa = "⦔", Voa = "⨒", Koa = "⇉", Yoa = "⇛", Qoa = "›", Xoa = "𝓇", Zoa = "ℛ", Joa = "↱", ela = "↱", ala = "]", tla = "’", nla = "’", rla = "⋌", sla = "⋊", ila = "▹", ola = "⊵", lla = "▸", dla = "⧎", ula = "⧴", cla = "⥨", pla = "℞", gla = "Ś", mla = "ś", fla = "‚", hla = "⪸", yla = "Š", zla = "š", bla = "⪼", wla = "≻", vla = "≽", kla = "⪰", _la = "⪴", Ela = "Ş", Ala = "ş", Tla = "Ŝ", $la = "ŝ", jla = "⪺", xla = "⪶", Sla = "⋩", Ola = "⨓", Ila = "≿", Cla = "С", Pla = "с", Rla = "⊡", Dla = "⋅", Nla = "⩦", Lla = "⤥", Mla = "↘", qla = "⇘", Fla = "↘", Bla = "§", Wla = ";", Ula = "⤩", Hla = "∖", Gla = "∖", Vla = "✶", Kla = "𝔖", Yla = "𝔰", Qla = "⌢", Xla = "♯", Zla = "Щ", Jla = "щ", eda = "Ш", ada = "ш", tda = "↓", nda = "←", rda = "∣", sda = "∥", ida = "→", oda = "↑", lda = "­", dda = "Σ", uda = "σ", cda = "ς", pda = "ς", gda = "∼", mda = "⩪", fda = "≃", hda = "≃", yda = "⪞", zda = "⪠", bda = "⪝", wda = "⪟", vda = "≆", kda = "⨤", _da = "⥲", Eda = "←", Ada = "∘", Tda = "∖", $da = "⨳", jda = "⧤", xda = "∣", Sda = "⌣", Oda = "⪪", Ida = "⪬", Cda = "⪬︀", Pda = "Ь", Rda = "ь", Dda = "⌿", Nda = "⧄", Lda = "/", Mda = "𝕊", qda = "𝕤", Fda = "♠", Bda = "♠", Wda = "∥", Uda = "⊓", Hda = "⊓︀", Gda = "⊔", Vda = "⊔︀", Kda = "√", Yda = "⊏", Qda = "⊑", Xda = "⊏", Zda = "⊑", Jda = "⊐", eua = "⊒", aua = "⊐", tua = "⊒", nua = "□", rua = "□", sua = "⊓", iua = "⊏", oua = "⊑", lua = "⊐", dua = "⊒", uua = "⊔", cua = "▪", pua = "□", gua = "▪", mua = "→", fua = "𝒮", hua = "𝓈", yua = "∖", zua = "⌣", bua = "⋆", wua = "⋆", vua = "☆", kua = "★", _ua = "ϵ", Eua = "ϕ", Aua = "¯", Tua = "⊂", $ua = "⋐", jua = "⪽", xua = "⫅", Sua = "⊆", Oua = "⫃", Iua = "⫁", Cua = "⫋", Pua = "⊊", Rua = "⪿", Dua = "⥹", Nua = "⊂", Lua = "⋐", Mua = "⊆", qua = "⫅", Fua = "⊆", Bua = "⊊", Wua = "⫋", Uua = "⫇", Hua = "⫕", Gua = "⫓", Vua = "⪸", Kua = "≻", Yua = "≽", Qua = "≻", Xua = "⪰", Zua = "≽", Jua = "≿", eca = "⪰", aca = "⪺", tca = "⪶", nca = "⋩", rca = "≿", sca = "∋", ica = "∑", oca = "∑", lca = "♪", dca = "¹", uca = "²", cca = "³", pca = "⊃", gca = "⋑", mca = "⪾", fca = "⫘", hca = "⫆", yca = "⊇", zca = "⫄", bca = "⊃", wca = "⊇", vca = "⟉", kca = "⫗", _ca = "⥻", Eca = "⫂", Aca = "⫌", Tca = "⊋", $ca = "⫀", jca = "⊃", xca = "⋑", Sca = "⊇", Oca = "⫆", Ica = "⊋", Cca = "⫌", Pca = "⫈", Rca = "⫔", Dca = "⫖", Nca = "⤦", Lca = "↙", Mca = "⇙", qca = "↙", Fca = "⤪", Bca = "ß", Wca = "	", Uca = "⌖", Hca = "Τ", Gca = "τ", Vca = "⎴", Kca = "Ť", Yca = "ť", Qca = "Ţ", Xca = "ţ", Zca = "Т", Jca = "т", epa = "⃛", apa = "⌕", tpa = "𝔗", npa = "𝔱", rpa = "∴", spa = "∴", ipa = "∴", opa = "Θ", lpa = "θ", dpa = "ϑ", upa = "ϑ", cpa = "≈", ppa = "∼", gpa = "  ", mpa = " ", fpa = " ", hpa = "≈", ypa = "∼", zpa = "Þ", bpa = "þ", wpa = "˜", vpa = "∼", kpa = "≃", _pa = "≅", Epa = "≈", Apa = "⨱", Tpa = "⊠", $pa = "×", jpa = "⨰", xpa = "∭", Spa = "⤨", Opa = "⌶", Ipa = "⫱", Cpa = "⊤", Ppa = "𝕋", Rpa = "𝕥", Dpa = "⫚", Npa = "⤩", Lpa = "‴", Mpa = "™", qpa = "™", Fpa = "▵", Bpa = "▿", Wpa = "◃", Upa = "⊴", Hpa = "≜", Gpa = "▹", Vpa = "⊵", Kpa = "◬", Ypa = "≜", Qpa = "⨺", Xpa = "⃛", Zpa = "⨹", Jpa = "⧍", ega = "⨻", aga = "⏢", tga = "𝒯", nga = "𝓉", rga = "Ц", sga = "ц", iga = "Ћ", oga = "ћ", lga = "Ŧ", dga = "ŧ", uga = "≬", cga = "↞", pga = "↠", gga = "Ú", mga = "ú", fga = "↑", hga = "↟", yga = "⇑", zga = "⥉", bga = "Ў", wga = "ў", vga = "Ŭ", kga = "ŭ", _ga = "Û", Ega = "û", Aga = "У", Tga = "у", $ga = "⇅", jga = "Ű", xga = "ű", Sga = "⥮", Oga = "⥾", Iga = "𝔘", Cga = "𝔲", Pga = "Ù", Rga = "ù", Dga = "⥣", Nga = "↿", Lga = "↾", Mga = "▀", qga = "⌜", Fga = "⌜", Bga = "⌏", Wga = "◸", Uga = "Ū", Hga = "ū", Gga = "¨", Vga = "_", Kga = "⏟", Yga = "⎵", Qga = "⏝", Xga = "⋃", Zga = "⊎", Jga = "Ų", ema = "ų", ama = "𝕌", tma = "𝕦", nma = "⤒", rma = "↑", sma = "↑", ima = "⇑", oma = "⇅", lma = "↕", dma = "↕", uma = "⇕", cma = "⥮", pma = "↿", gma = "↾", mma = "⊎", fma = "↖", hma = "↗", yma = "υ", zma = "ϒ", bma = "ϒ", wma = "Υ", vma = "υ", kma = "↥", _ma = "⊥", Ema = "⇈", Ama = "⌝", Tma = "⌝", $ma = "⌎", jma = "Ů", xma = "ů", Sma = "◹", Oma = "𝒰", Ima = "𝓊", Cma = "⋰", Pma = "Ũ", Rma = "ũ", Dma = "▵", Nma = "▴", Lma = "⇈", Mma = "Ü", qma = "ü", Fma = "⦧", Bma = "⦜", Wma = "ϵ", Uma = "ϰ", Hma = "∅", Gma = "ϕ", Vma = "ϖ", Kma = "∝", Yma = "↕", Qma = "⇕", Xma = "ϱ", Zma = "ς", Jma = "⊊︀", efa = "⫋︀", afa = "⊋︀", tfa = "⫌︀", nfa = "ϑ", rfa = "⊲", sfa = "⊳", ifa = "⫨", ofa = "⫫", lfa = "⫩", dfa = "В", ufa = "в", cfa = "⊢", pfa = "⊨", gfa = "⊩", mfa = "⊫", ffa = "⫦", hfa = "⊻", yfa = "∨", zfa = "⋁", bfa = "≚", wfa = "⋮", vfa = "|", kfa = "‖", _fa = "|", Efa = "‖", Afa = "∣", Tfa = "|", $fa = "❘", jfa = "≀", xfa = " ", Sfa = "𝔙", Ofa = "𝔳", Ifa = "⊲", Cfa = "⊂⃒", Pfa = "⊃⃒", Rfa = "𝕍", Dfa = "𝕧", Nfa = "∝", Lfa = "⊳", Mfa = "𝒱", qfa = "𝓋", Ffa = "⫋︀", Bfa = "⊊︀", Wfa = "⫌︀", Ufa = "⊋︀", Hfa = "⊪", Gfa = "⦚", Vfa = "Ŵ", Kfa = "ŵ", Yfa = "⩟", Qfa = "∧", Xfa = "⋀", Zfa = "≙", Jfa = "℘", eha = "𝔚", aha = "𝔴", tha = "𝕎", nha = "𝕨", rha = "℘", sha = "≀", iha = "≀", oha = "𝒲", lha = "𝓌", dha = "⋂", uha = "◯", cha = "⋃", pha = "▽", gha = "𝔛", mha = "𝔵", fha = "⟷", hha = "⟺", yha = "Ξ", zha = "ξ", bha = "⟵", wha = "⟸", vha = "⟼", kha = "⋻", _ha = "⨀", Eha = "𝕏", Aha = "𝕩", Tha = "⨁", $ha = "⨂", jha = "⟶", xha = "⟹", Sha = "𝒳", Oha = "𝓍", Iha = "⨆", Cha = "⨄", Pha = "△", Rha = "⋁", Dha = "⋀", Nha = "Ý", Lha = "ý", Mha = "Я", qha = "я", Fha = "Ŷ", Bha = "ŷ", Wha = "Ы", Uha = "ы", Hha = "¥", Gha = "𝔜", Vha = "𝔶", Kha = "Ї", Yha = "ї", Qha = "𝕐", Xha = "𝕪", Zha = "𝒴", Jha = "𝓎", eya = "Ю", aya = "ю", tya = "ÿ", nya = "Ÿ", rya = "Ź", sya = "ź", iya = "Ž", oya = "ž", lya = "З", dya = "з", uya = "Ż", cya = "ż", pya = "ℨ", gya = "​", mya = "Ζ", fya = "ζ", hya = "𝔷", yya = "ℨ", zya = "Ж", bya = "ж", wya = "⇝", vya = "𝕫", kya = "ℤ", _ya = "𝒵", Eya = "𝓏", Aya = "‍", Tya = "‌", XD = {
  Aacute: uLe,
  aacute: cLe,
  Abreve: pLe,
  abreve: gLe,
  ac: mLe,
  acd: fLe,
  acE: hLe,
  Acirc: yLe,
  acirc: zLe,
  acute: bLe,
  Acy: wLe,
  acy: vLe,
  AElig: kLe,
  aelig: _Le,
  af: ELe,
  Afr: ALe,
  afr: TLe,
  Agrave: $Le,
  agrave: jLe,
  alefsym: xLe,
  aleph: SLe,
  Alpha: OLe,
  alpha: ILe,
  Amacr: CLe,
  amacr: PLe,
  amalg: RLe,
  amp: DLe,
  AMP: NLe,
  andand: LLe,
  And: MLe,
  and: qLe,
  andd: FLe,
  andslope: BLe,
  andv: WLe,
  ang: ULe,
  ange: HLe,
  angle: GLe,
  angmsdaa: VLe,
  angmsdab: KLe,
  angmsdac: YLe,
  angmsdad: QLe,
  angmsdae: XLe,
  angmsdaf: ZLe,
  angmsdag: JLe,
  angmsdah: eMe,
  angmsd: aMe,
  angrt: tMe,
  angrtvb: nMe,
  angrtvbd: rMe,
  angsph: sMe,
  angst: iMe,
  angzarr: oMe,
  Aogon: lMe,
  aogon: dMe,
  Aopf: uMe,
  aopf: cMe,
  apacir: pMe,
  ap: gMe,
  apE: mMe,
  ape: fMe,
  apid: hMe,
  apos: yMe,
  ApplyFunction: zMe,
  approx: bMe,
  approxeq: wMe,
  Aring: vMe,
  aring: kMe,
  Ascr: _Me,
  ascr: EMe,
  Assign: AMe,
  ast: TMe,
  asymp: $Me,
  asympeq: jMe,
  Atilde: xMe,
  atilde: SMe,
  Auml: OMe,
  auml: IMe,
  awconint: CMe,
  awint: PMe,
  backcong: RMe,
  backepsilon: DMe,
  backprime: NMe,
  backsim: LMe,
  backsimeq: MMe,
  Backslash: qMe,
  Barv: FMe,
  barvee: BMe,
  barwed: WMe,
  Barwed: UMe,
  barwedge: HMe,
  bbrk: GMe,
  bbrktbrk: VMe,
  bcong: KMe,
  Bcy: YMe,
  bcy: QMe,
  bdquo: XMe,
  becaus: ZMe,
  because: JMe,
  Because: e4e,
  bemptyv: a4e,
  bepsi: t4e,
  bernou: n4e,
  Bernoullis: r4e,
  Beta: s4e,
  beta: i4e,
  beth: o4e,
  between: l4e,
  Bfr: d4e,
  bfr: u4e,
  bigcap: c4e,
  bigcirc: p4e,
  bigcup: g4e,
  bigodot: m4e,
  bigoplus: f4e,
  bigotimes: h4e,
  bigsqcup: y4e,
  bigstar: z4e,
  bigtriangledown: b4e,
  bigtriangleup: w4e,
  biguplus: v4e,
  bigvee: k4e,
  bigwedge: _4e,
  bkarow: E4e,
  blacklozenge: A4e,
  blacksquare: T4e,
  blacktriangle: $4e,
  blacktriangledown: j4e,
  blacktriangleleft: x4e,
  blacktriangleright: S4e,
  blank: O4e,
  blk12: I4e,
  blk14: C4e,
  blk34: P4e,
  block: R4e,
  bne: D4e,
  bnequiv: N4e,
  bNot: L4e,
  bnot: M4e,
  Bopf: q4e,
  bopf: F4e,
  bot: B4e,
  bottom: W4e,
  bowtie: U4e,
  boxbox: H4e,
  boxdl: G4e,
  boxdL: V4e,
  boxDl: K4e,
  boxDL: Y4e,
  boxdr: Q4e,
  boxdR: X4e,
  boxDr: Z4e,
  boxDR: J4e,
  boxh: e6e,
  boxH: a6e,
  boxhd: t6e,
  boxHd: n6e,
  boxhD: r6e,
  boxHD: s6e,
  boxhu: i6e,
  boxHu: o6e,
  boxhU: l6e,
  boxHU: d6e,
  boxminus: u6e,
  boxplus: c6e,
  boxtimes: p6e,
  boxul: g6e,
  boxuL: m6e,
  boxUl: f6e,
  boxUL: h6e,
  boxur: y6e,
  boxuR: z6e,
  boxUr: b6e,
  boxUR: w6e,
  boxv: v6e,
  boxV: k6e,
  boxvh: _6e,
  boxvH: E6e,
  boxVh: A6e,
  boxVH: T6e,
  boxvl: $6e,
  boxvL: j6e,
  boxVl: x6e,
  boxVL: S6e,
  boxvr: O6e,
  boxvR: I6e,
  boxVr: C6e,
  boxVR: P6e,
  bprime: R6e,
  breve: D6e,
  Breve: N6e,
  brvbar: L6e,
  bscr: M6e,
  Bscr: q6e,
  bsemi: F6e,
  bsim: B6e,
  bsime: W6e,
  bsolb: U6e,
  bsol: H6e,
  bsolhsub: G6e,
  bull: V6e,
  bullet: K6e,
  bump: Y6e,
  bumpE: Q6e,
  bumpe: X6e,
  Bumpeq: Z6e,
  bumpeq: J6e,
  Cacute: eqe,
  cacute: aqe,
  capand: tqe,
  capbrcup: nqe,
  capcap: rqe,
  cap: sqe,
  Cap: iqe,
  capcup: oqe,
  capdot: lqe,
  CapitalDifferentialD: dqe,
  caps: uqe,
  caret: cqe,
  caron: pqe,
  Cayleys: gqe,
  ccaps: mqe,
  Ccaron: fqe,
  ccaron: hqe,
  Ccedil: yqe,
  ccedil: zqe,
  Ccirc: bqe,
  ccirc: wqe,
  Cconint: vqe,
  ccups: kqe,
  ccupssm: _qe,
  Cdot: Eqe,
  cdot: Aqe,
  cedil: Tqe,
  Cedilla: $qe,
  cemptyv: jqe,
  cent: xqe,
  centerdot: Sqe,
  CenterDot: Oqe,
  cfr: Iqe,
  Cfr: Cqe,
  CHcy: Pqe,
  chcy: Rqe,
  check: Dqe,
  checkmark: Nqe,
  Chi: Lqe,
  chi: Mqe,
  circ: qqe,
  circeq: Fqe,
  circlearrowleft: Bqe,
  circlearrowright: Wqe,
  circledast: Uqe,
  circledcirc: Hqe,
  circleddash: Gqe,
  CircleDot: Vqe,
  circledR: Kqe,
  circledS: Yqe,
  CircleMinus: Qqe,
  CirclePlus: Xqe,
  CircleTimes: Zqe,
  cir: Jqe,
  cirE: eFe,
  cire: aFe,
  cirfnint: tFe,
  cirmid: nFe,
  cirscir: rFe,
  ClockwiseContourIntegral: sFe,
  CloseCurlyDoubleQuote: iFe,
  CloseCurlyQuote: oFe,
  clubs: lFe,
  clubsuit: dFe,
  colon: uFe,
  Colon: cFe,
  Colone: pFe,
  colone: gFe,
  coloneq: mFe,
  comma: fFe,
  commat: hFe,
  comp: yFe,
  compfn: zFe,
  complement: bFe,
  complexes: wFe,
  cong: vFe,
  congdot: kFe,
  Congruent: _Fe,
  conint: EFe,
  Conint: AFe,
  ContourIntegral: TFe,
  copf: $Fe,
  Copf: jFe,
  coprod: xFe,
  Coproduct: SFe,
  copy: OFe,
  COPY: IFe,
  copysr: CFe,
  CounterClockwiseContourIntegral: PFe,
  crarr: RFe,
  cross: DFe,
  Cross: NFe,
  Cscr: LFe,
  cscr: MFe,
  csub: qFe,
  csube: FFe,
  csup: BFe,
  csupe: WFe,
  ctdot: UFe,
  cudarrl: HFe,
  cudarrr: GFe,
  cuepr: VFe,
  cuesc: KFe,
  cularr: YFe,
  cularrp: QFe,
  cupbrcap: XFe,
  cupcap: ZFe,
  CupCap: JFe,
  cup: eBe,
  Cup: aBe,
  cupcup: tBe,
  cupdot: nBe,
  cupor: rBe,
  cups: sBe,
  curarr: iBe,
  curarrm: oBe,
  curlyeqprec: lBe,
  curlyeqsucc: dBe,
  curlyvee: uBe,
  curlywedge: cBe,
  curren: pBe,
  curvearrowleft: gBe,
  curvearrowright: mBe,
  cuvee: fBe,
  cuwed: hBe,
  cwconint: yBe,
  cwint: zBe,
  cylcty: bBe,
  dagger: wBe,
  Dagger: vBe,
  daleth: kBe,
  darr: _Be,
  Darr: EBe,
  dArr: ABe,
  dash: TBe,
  Dashv: $Be,
  dashv: jBe,
  dbkarow: xBe,
  dblac: SBe,
  Dcaron: OBe,
  dcaron: IBe,
  Dcy: CBe,
  dcy: PBe,
  ddagger: RBe,
  ddarr: DBe,
  DD: NBe,
  dd: LBe,
  DDotrahd: MBe,
  ddotseq: qBe,
  deg: FBe,
  Del: BBe,
  Delta: WBe,
  delta: UBe,
  demptyv: HBe,
  dfisht: GBe,
  Dfr: VBe,
  dfr: KBe,
  dHar: YBe,
  dharl: QBe,
  dharr: XBe,
  DiacriticalAcute: ZBe,
  DiacriticalDot: JBe,
  DiacriticalDoubleAcute: e8e,
  DiacriticalGrave: a8e,
  DiacriticalTilde: t8e,
  diam: n8e,
  diamond: r8e,
  Diamond: s8e,
  diamondsuit: i8e,
  diams: o8e,
  die: l8e,
  DifferentialD: d8e,
  digamma: u8e,
  disin: c8e,
  div: p8e,
  divide: g8e,
  divideontimes: m8e,
  divonx: f8e,
  DJcy: h8e,
  djcy: y8e,
  dlcorn: z8e,
  dlcrop: b8e,
  dollar: w8e,
  Dopf: v8e,
  dopf: k8e,
  Dot: _8e,
  dot: E8e,
  DotDot: A8e,
  doteq: T8e,
  doteqdot: $8e,
  DotEqual: j8e,
  dotminus: x8e,
  dotplus: S8e,
  dotsquare: O8e,
  doublebarwedge: I8e,
  DoubleContourIntegral: C8e,
  DoubleDot: P8e,
  DoubleDownArrow: R8e,
  DoubleLeftArrow: D8e,
  DoubleLeftRightArrow: N8e,
  DoubleLeftTee: L8e,
  DoubleLongLeftArrow: M8e,
  DoubleLongLeftRightArrow: q8e,
  DoubleLongRightArrow: F8e,
  DoubleRightArrow: B8e,
  DoubleRightTee: W8e,
  DoubleUpArrow: U8e,
  DoubleUpDownArrow: H8e,
  DoubleVerticalBar: G8e,
  DownArrowBar: V8e,
  downarrow: K8e,
  DownArrow: Y8e,
  Downarrow: Q8e,
  DownArrowUpArrow: X8e,
  DownBreve: Z8e,
  downdownarrows: J8e,
  downharpoonleft: e5e,
  downharpoonright: a5e,
  DownLeftRightVector: t5e,
  DownLeftTeeVector: n5e,
  DownLeftVectorBar: r5e,
  DownLeftVector: s5e,
  DownRightTeeVector: i5e,
  DownRightVectorBar: o5e,
  DownRightVector: l5e,
  DownTeeArrow: d5e,
  DownTee: u5e,
  drbkarow: c5e,
  drcorn: p5e,
  drcrop: g5e,
  Dscr: m5e,
  dscr: f5e,
  DScy: h5e,
  dscy: y5e,
  dsol: z5e,
  Dstrok: b5e,
  dstrok: w5e,
  dtdot: v5e,
  dtri: k5e,
  dtrif: _5e,
  duarr: E5e,
  duhar: A5e,
  dwangle: T5e,
  DZcy: $5e,
  dzcy: j5e,
  dzigrarr: x5e,
  Eacute: S5e,
  eacute: O5e,
  easter: I5e,
  Ecaron: C5e,
  ecaron: P5e,
  Ecirc: R5e,
  ecirc: D5e,
  ecir: N5e,
  ecolon: L5e,
  Ecy: M5e,
  ecy: q5e,
  eDDot: F5e,
  Edot: B5e,
  edot: W5e,
  eDot: U5e,
  ee: H5e,
  efDot: G5e,
  Efr: V5e,
  efr: K5e,
  eg: Y5e,
  Egrave: Q5e,
  egrave: X5e,
  egs: Z5e,
  egsdot: J5e,
  el: eWe,
  Element: aWe,
  elinters: tWe,
  ell: nWe,
  els: rWe,
  elsdot: sWe,
  Emacr: iWe,
  emacr: oWe,
  empty: lWe,
  emptyset: dWe,
  EmptySmallSquare: uWe,
  emptyv: cWe,
  EmptyVerySmallSquare: pWe,
  emsp13: gWe,
  emsp14: mWe,
  emsp: fWe,
  ENG: hWe,
  eng: yWe,
  ensp: zWe,
  Eogon: bWe,
  eogon: wWe,
  Eopf: vWe,
  eopf: kWe,
  epar: _We,
  eparsl: EWe,
  eplus: AWe,
  epsi: TWe,
  Epsilon: $We,
  epsilon: jWe,
  epsiv: xWe,
  eqcirc: SWe,
  eqcolon: OWe,
  eqsim: IWe,
  eqslantgtr: CWe,
  eqslantless: PWe,
  Equal: RWe,
  equals: DWe,
  EqualTilde: NWe,
  equest: LWe,
  Equilibrium: MWe,
  equiv: qWe,
  equivDD: FWe,
  eqvparsl: BWe,
  erarr: WWe,
  erDot: UWe,
  escr: HWe,
  Escr: GWe,
  esdot: VWe,
  Esim: KWe,
  esim: YWe,
  Eta: QWe,
  eta: XWe,
  ETH: ZWe,
  eth: JWe,
  Euml: eUe,
  euml: aUe,
  euro: tUe,
  excl: nUe,
  exist: rUe,
  Exists: sUe,
  expectation: iUe,
  exponentiale: oUe,
  ExponentialE: lUe,
  fallingdotseq: dUe,
  Fcy: uUe,
  fcy: cUe,
  female: pUe,
  ffilig: gUe,
  fflig: mUe,
  ffllig: fUe,
  Ffr: hUe,
  ffr: yUe,
  filig: zUe,
  FilledSmallSquare: bUe,
  FilledVerySmallSquare: wUe,
  fjlig: vUe,
  flat: kUe,
  fllig: _Ue,
  fltns: EUe,
  fnof: AUe,
  Fopf: TUe,
  fopf: $Ue,
  forall: jUe,
  ForAll: xUe,
  fork: SUe,
  forkv: OUe,
  Fouriertrf: IUe,
  fpartint: CUe,
  frac12: PUe,
  frac13: RUe,
  frac14: DUe,
  frac15: NUe,
  frac16: LUe,
  frac18: MUe,
  frac23: qUe,
  frac25: FUe,
  frac34: BUe,
  frac35: WUe,
  frac38: UUe,
  frac45: HUe,
  frac56: GUe,
  frac58: VUe,
  frac78: KUe,
  frasl: YUe,
  frown: QUe,
  fscr: XUe,
  Fscr: ZUe,
  gacute: JUe,
  Gamma: e9e,
  gamma: a9e,
  Gammad: t9e,
  gammad: n9e,
  gap: r9e,
  Gbreve: s9e,
  gbreve: i9e,
  Gcedil: o9e,
  Gcirc: l9e,
  gcirc: d9e,
  Gcy: u9e,
  gcy: c9e,
  Gdot: p9e,
  gdot: g9e,
  ge: m9e,
  gE: f9e,
  gEl: h9e,
  gel: y9e,
  geq: z9e,
  geqq: b9e,
  geqslant: w9e,
  gescc: v9e,
  ges: k9e,
  gesdot: _9e,
  gesdoto: E9e,
  gesdotol: A9e,
  gesl: T9e,
  gesles: $9e,
  Gfr: j9e,
  gfr: x9e,
  gg: S9e,
  Gg: O9e,
  ggg: I9e,
  gimel: C9e,
  GJcy: P9e,
  gjcy: R9e,
  gla: D9e,
  gl: N9e,
  glE: L9e,
  glj: M9e,
  gnap: q9e,
  gnapprox: F9e,
  gne: B9e,
  gnE: W9e,
  gneq: U9e,
  gneqq: H9e,
  gnsim: G9e,
  Gopf: V9e,
  gopf: K9e,
  grave: Y9e,
  GreaterEqual: Q9e,
  GreaterEqualLess: X9e,
  GreaterFullEqual: Z9e,
  GreaterGreater: J9e,
  GreaterLess: e7e,
  GreaterSlantEqual: a7e,
  GreaterTilde: t7e,
  Gscr: n7e,
  gscr: r7e,
  gsim: s7e,
  gsime: i7e,
  gsiml: o7e,
  gtcc: l7e,
  gtcir: d7e,
  gt: u7e,
  GT: c7e,
  Gt: p7e,
  gtdot: g7e,
  gtlPar: m7e,
  gtquest: f7e,
  gtrapprox: h7e,
  gtrarr: y7e,
  gtrdot: z7e,
  gtreqless: b7e,
  gtreqqless: w7e,
  gtrless: v7e,
  gtrsim: k7e,
  gvertneqq: _7e,
  gvnE: E7e,
  Hacek: A7e,
  hairsp: T7e,
  half: $7e,
  hamilt: j7e,
  HARDcy: x7e,
  hardcy: S7e,
  harrcir: O7e,
  harr: I7e,
  hArr: C7e,
  harrw: P7e,
  Hat: R7e,
  hbar: D7e,
  Hcirc: N7e,
  hcirc: L7e,
  hearts: M7e,
  heartsuit: q7e,
  hellip: F7e,
  hercon: B7e,
  hfr: W7e,
  Hfr: U7e,
  HilbertSpace: H7e,
  hksearow: G7e,
  hkswarow: V7e,
  hoarr: K7e,
  homtht: Y7e,
  hookleftarrow: Q7e,
  hookrightarrow: X7e,
  hopf: Z7e,
  Hopf: J7e,
  horbar: eHe,
  HorizontalLine: aHe,
  hscr: tHe,
  Hscr: nHe,
  hslash: rHe,
  Hstrok: sHe,
  hstrok: iHe,
  HumpDownHump: oHe,
  HumpEqual: lHe,
  hybull: dHe,
  hyphen: uHe,
  Iacute: cHe,
  iacute: pHe,
  ic: gHe,
  Icirc: mHe,
  icirc: fHe,
  Icy: hHe,
  icy: yHe,
  Idot: zHe,
  IEcy: bHe,
  iecy: wHe,
  iexcl: vHe,
  iff: kHe,
  ifr: _He,
  Ifr: EHe,
  Igrave: AHe,
  igrave: THe,
  ii: $He,
  iiiint: jHe,
  iiint: xHe,
  iinfin: SHe,
  iiota: OHe,
  IJlig: IHe,
  ijlig: CHe,
  Imacr: PHe,
  imacr: RHe,
  image: DHe,
  ImaginaryI: NHe,
  imagline: LHe,
  imagpart: MHe,
  imath: qHe,
  Im: FHe,
  imof: BHe,
  imped: WHe,
  Implies: UHe,
  incare: HHe,
  in: "∈",
  infin: GHe,
  infintie: VHe,
  inodot: KHe,
  intcal: YHe,
  int: QHe,
  Int: XHe,
  integers: ZHe,
  Integral: JHe,
  intercal: eGe,
  Intersection: aGe,
  intlarhk: tGe,
  intprod: nGe,
  InvisibleComma: rGe,
  InvisibleTimes: sGe,
  IOcy: iGe,
  iocy: oGe,
  Iogon: lGe,
  iogon: dGe,
  Iopf: uGe,
  iopf: cGe,
  Iota: pGe,
  iota: gGe,
  iprod: mGe,
  iquest: fGe,
  iscr: hGe,
  Iscr: yGe,
  isin: zGe,
  isindot: bGe,
  isinE: wGe,
  isins: vGe,
  isinsv: kGe,
  isinv: _Ge,
  it: EGe,
  Itilde: AGe,
  itilde: TGe,
  Iukcy: $Ge,
  iukcy: jGe,
  Iuml: xGe,
  iuml: SGe,
  Jcirc: OGe,
  jcirc: IGe,
  Jcy: CGe,
  jcy: PGe,
  Jfr: RGe,
  jfr: DGe,
  jmath: NGe,
  Jopf: LGe,
  jopf: MGe,
  Jscr: qGe,
  jscr: FGe,
  Jsercy: BGe,
  jsercy: WGe,
  Jukcy: UGe,
  jukcy: HGe,
  Kappa: GGe,
  kappa: VGe,
  kappav: KGe,
  Kcedil: YGe,
  kcedil: QGe,
  Kcy: XGe,
  kcy: ZGe,
  Kfr: JGe,
  kfr: eVe,
  kgreen: aVe,
  KHcy: tVe,
  khcy: nVe,
  KJcy: rVe,
  kjcy: sVe,
  Kopf: iVe,
  kopf: oVe,
  Kscr: lVe,
  kscr: dVe,
  lAarr: uVe,
  Lacute: cVe,
  lacute: pVe,
  laemptyv: gVe,
  lagran: mVe,
  Lambda: fVe,
  lambda: hVe,
  lang: yVe,
  Lang: zVe,
  langd: bVe,
  langle: wVe,
  lap: vVe,
  Laplacetrf: kVe,
  laquo: _Ve,
  larrb: EVe,
  larrbfs: AVe,
  larr: TVe,
  Larr: $Ve,
  lArr: jVe,
  larrfs: xVe,
  larrhk: SVe,
  larrlp: OVe,
  larrpl: IVe,
  larrsim: CVe,
  larrtl: PVe,
  latail: RVe,
  lAtail: DVe,
  lat: NVe,
  late: LVe,
  lates: MVe,
  lbarr: qVe,
  lBarr: FVe,
  lbbrk: BVe,
  lbrace: WVe,
  lbrack: UVe,
  lbrke: HVe,
  lbrksld: GVe,
  lbrkslu: VVe,
  Lcaron: KVe,
  lcaron: YVe,
  Lcedil: QVe,
  lcedil: XVe,
  lceil: ZVe,
  lcub: JVe,
  Lcy: eKe,
  lcy: aKe,
  ldca: tKe,
  ldquo: nKe,
  ldquor: rKe,
  ldrdhar: sKe,
  ldrushar: iKe,
  ldsh: oKe,
  le: lKe,
  lE: dKe,
  LeftAngleBracket: uKe,
  LeftArrowBar: cKe,
  leftarrow: pKe,
  LeftArrow: gKe,
  Leftarrow: mKe,
  LeftArrowRightArrow: fKe,
  leftarrowtail: hKe,
  LeftCeiling: yKe,
  LeftDoubleBracket: zKe,
  LeftDownTeeVector: bKe,
  LeftDownVectorBar: wKe,
  LeftDownVector: vKe,
  LeftFloor: kKe,
  leftharpoondown: _Ke,
  leftharpoonup: EKe,
  leftleftarrows: AKe,
  leftrightarrow: TKe,
  LeftRightArrow: $Ke,
  Leftrightarrow: jKe,
  leftrightarrows: xKe,
  leftrightharpoons: SKe,
  leftrightsquigarrow: OKe,
  LeftRightVector: IKe,
  LeftTeeArrow: CKe,
  LeftTee: PKe,
  LeftTeeVector: RKe,
  leftthreetimes: DKe,
  LeftTriangleBar: NKe,
  LeftTriangle: LKe,
  LeftTriangleEqual: MKe,
  LeftUpDownVector: qKe,
  LeftUpTeeVector: FKe,
  LeftUpVectorBar: BKe,
  LeftUpVector: WKe,
  LeftVectorBar: UKe,
  LeftVector: HKe,
  lEg: GKe,
  leg: VKe,
  leq: KKe,
  leqq: YKe,
  leqslant: QKe,
  lescc: XKe,
  les: ZKe,
  lesdot: JKe,
  lesdoto: eYe,
  lesdotor: aYe,
  lesg: tYe,
  lesges: nYe,
  lessapprox: rYe,
  lessdot: sYe,
  lesseqgtr: iYe,
  lesseqqgtr: oYe,
  LessEqualGreater: lYe,
  LessFullEqual: dYe,
  LessGreater: uYe,
  lessgtr: cYe,
  LessLess: pYe,
  lesssim: gYe,
  LessSlantEqual: mYe,
  LessTilde: fYe,
  lfisht: hYe,
  lfloor: yYe,
  Lfr: zYe,
  lfr: bYe,
  lg: wYe,
  lgE: vYe,
  lHar: kYe,
  lhard: _Ye,
  lharu: EYe,
  lharul: AYe,
  lhblk: TYe,
  LJcy: $Ye,
  ljcy: jYe,
  llarr: xYe,
  ll: SYe,
  Ll: OYe,
  llcorner: IYe,
  Lleftarrow: CYe,
  llhard: PYe,
  lltri: RYe,
  Lmidot: DYe,
  lmidot: NYe,
  lmoustache: LYe,
  lmoust: MYe,
  lnap: qYe,
  lnapprox: FYe,
  lne: BYe,
  lnE: WYe,
  lneq: UYe,
  lneqq: HYe,
  lnsim: GYe,
  loang: VYe,
  loarr: KYe,
  lobrk: YYe,
  longleftarrow: QYe,
  LongLeftArrow: XYe,
  Longleftarrow: ZYe,
  longleftrightarrow: JYe,
  LongLeftRightArrow: eQe,
  Longleftrightarrow: aQe,
  longmapsto: tQe,
  longrightarrow: nQe,
  LongRightArrow: rQe,
  Longrightarrow: sQe,
  looparrowleft: iQe,
  looparrowright: oQe,
  lopar: lQe,
  Lopf: dQe,
  lopf: uQe,
  loplus: cQe,
  lotimes: pQe,
  lowast: gQe,
  lowbar: mQe,
  LowerLeftArrow: fQe,
  LowerRightArrow: hQe,
  loz: yQe,
  lozenge: zQe,
  lozf: bQe,
  lpar: wQe,
  lparlt: vQe,
  lrarr: kQe,
  lrcorner: _Qe,
  lrhar: EQe,
  lrhard: AQe,
  lrm: TQe,
  lrtri: $Qe,
  lsaquo: jQe,
  lscr: xQe,
  Lscr: SQe,
  lsh: OQe,
  Lsh: IQe,
  lsim: CQe,
  lsime: PQe,
  lsimg: RQe,
  lsqb: DQe,
  lsquo: NQe,
  lsquor: LQe,
  Lstrok: MQe,
  lstrok: qQe,
  ltcc: FQe,
  ltcir: BQe,
  lt: WQe,
  LT: UQe,
  Lt: HQe,
  ltdot: GQe,
  lthree: VQe,
  ltimes: KQe,
  ltlarr: YQe,
  ltquest: QQe,
  ltri: XQe,
  ltrie: ZQe,
  ltrif: JQe,
  ltrPar: eXe,
  lurdshar: aXe,
  luruhar: tXe,
  lvertneqq: nXe,
  lvnE: rXe,
  macr: sXe,
  male: iXe,
  malt: oXe,
  maltese: lXe,
  Map: "⤅",
  map: dXe,
  mapsto: uXe,
  mapstodown: cXe,
  mapstoleft: pXe,
  mapstoup: gXe,
  marker: mXe,
  mcomma: fXe,
  Mcy: hXe,
  mcy: yXe,
  mdash: zXe,
  mDDot: bXe,
  measuredangle: wXe,
  MediumSpace: vXe,
  Mellintrf: kXe,
  Mfr: _Xe,
  mfr: EXe,
  mho: AXe,
  micro: TXe,
  midast: $Xe,
  midcir: jXe,
  mid: xXe,
  middot: SXe,
  minusb: OXe,
  minus: IXe,
  minusd: CXe,
  minusdu: PXe,
  MinusPlus: RXe,
  mlcp: DXe,
  mldr: NXe,
  mnplus: LXe,
  models: MXe,
  Mopf: qXe,
  mopf: FXe,
  mp: BXe,
  mscr: WXe,
  Mscr: UXe,
  mstpos: HXe,
  Mu: GXe,
  mu: VXe,
  multimap: KXe,
  mumap: YXe,
  nabla: QXe,
  Nacute: XXe,
  nacute: ZXe,
  nang: JXe,
  nap: eZe,
  napE: aZe,
  napid: tZe,
  napos: nZe,
  napprox: rZe,
  natural: sZe,
  naturals: iZe,
  natur: oZe,
  nbsp: lZe,
  nbump: dZe,
  nbumpe: uZe,
  ncap: cZe,
  Ncaron: pZe,
  ncaron: gZe,
  Ncedil: mZe,
  ncedil: fZe,
  ncong: hZe,
  ncongdot: yZe,
  ncup: zZe,
  Ncy: bZe,
  ncy: wZe,
  ndash: vZe,
  nearhk: kZe,
  nearr: _Ze,
  neArr: EZe,
  nearrow: AZe,
  ne: TZe,
  nedot: $Ze,
  NegativeMediumSpace: jZe,
  NegativeThickSpace: xZe,
  NegativeThinSpace: SZe,
  NegativeVeryThinSpace: OZe,
  nequiv: IZe,
  nesear: CZe,
  nesim: PZe,
  NestedGreaterGreater: RZe,
  NestedLessLess: DZe,
  NewLine: NZe,
  nexist: LZe,
  nexists: MZe,
  Nfr: qZe,
  nfr: FZe,
  ngE: BZe,
  nge: WZe,
  ngeq: UZe,
  ngeqq: HZe,
  ngeqslant: GZe,
  nges: VZe,
  nGg: KZe,
  ngsim: YZe,
  nGt: QZe,
  ngt: XZe,
  ngtr: ZZe,
  nGtv: JZe,
  nharr: eJe,
  nhArr: aJe,
  nhpar: tJe,
  ni: nJe,
  nis: rJe,
  nisd: sJe,
  niv: iJe,
  NJcy: oJe,
  njcy: lJe,
  nlarr: dJe,
  nlArr: uJe,
  nldr: cJe,
  nlE: pJe,
  nle: gJe,
  nleftarrow: mJe,
  nLeftarrow: fJe,
  nleftrightarrow: hJe,
  nLeftrightarrow: yJe,
  nleq: zJe,
  nleqq: bJe,
  nleqslant: wJe,
  nles: vJe,
  nless: kJe,
  nLl: _Je,
  nlsim: EJe,
  nLt: AJe,
  nlt: TJe,
  nltri: $Je,
  nltrie: jJe,
  nLtv: xJe,
  nmid: SJe,
  NoBreak: OJe,
  NonBreakingSpace: IJe,
  nopf: CJe,
  Nopf: PJe,
  Not: RJe,
  not: DJe,
  NotCongruent: NJe,
  NotCupCap: LJe,
  NotDoubleVerticalBar: MJe,
  NotElement: qJe,
  NotEqual: FJe,
  NotEqualTilde: BJe,
  NotExists: WJe,
  NotGreater: UJe,
  NotGreaterEqual: HJe,
  NotGreaterFullEqual: GJe,
  NotGreaterGreater: VJe,
  NotGreaterLess: KJe,
  NotGreaterSlantEqual: YJe,
  NotGreaterTilde: QJe,
  NotHumpDownHump: XJe,
  NotHumpEqual: ZJe,
  notin: JJe,
  notindot: eea,
  notinE: aea,
  notinva: tea,
  notinvb: nea,
  notinvc: rea,
  NotLeftTriangleBar: sea,
  NotLeftTriangle: iea,
  NotLeftTriangleEqual: oea,
  NotLess: lea,
  NotLessEqual: dea,
  NotLessGreater: uea,
  NotLessLess: cea,
  NotLessSlantEqual: pea,
  NotLessTilde: gea,
  NotNestedGreaterGreater: mea,
  NotNestedLessLess: fea,
  notni: hea,
  notniva: yea,
  notnivb: zea,
  notnivc: bea,
  NotPrecedes: wea,
  NotPrecedesEqual: vea,
  NotPrecedesSlantEqual: kea,
  NotReverseElement: _ea,
  NotRightTriangleBar: Eea,
  NotRightTriangle: Aea,
  NotRightTriangleEqual: Tea,
  NotSquareSubset: $ea,
  NotSquareSubsetEqual: jea,
  NotSquareSuperset: xea,
  NotSquareSupersetEqual: Sea,
  NotSubset: Oea,
  NotSubsetEqual: Iea,
  NotSucceeds: Cea,
  NotSucceedsEqual: Pea,
  NotSucceedsSlantEqual: Rea,
  NotSucceedsTilde: Dea,
  NotSuperset: Nea,
  NotSupersetEqual: Lea,
  NotTilde: Mea,
  NotTildeEqual: qea,
  NotTildeFullEqual: Fea,
  NotTildeTilde: Bea,
  NotVerticalBar: Wea,
  nparallel: Uea,
  npar: Hea,
  nparsl: Gea,
  npart: Vea,
  npolint: Kea,
  npr: Yea,
  nprcue: Qea,
  nprec: Xea,
  npreceq: Zea,
  npre: Jea,
  nrarrc: eaa,
  nrarr: aaa,
  nrArr: taa,
  nrarrw: naa,
  nrightarrow: raa,
  nRightarrow: saa,
  nrtri: iaa,
  nrtrie: oaa,
  nsc: laa,
  nsccue: daa,
  nsce: uaa,
  Nscr: caa,
  nscr: paa,
  nshortmid: gaa,
  nshortparallel: maa,
  nsim: faa,
  nsime: haa,
  nsimeq: yaa,
  nsmid: zaa,
  nspar: baa,
  nsqsube: waa,
  nsqsupe: vaa,
  nsub: kaa,
  nsubE: _aa,
  nsube: Eaa,
  nsubset: Aaa,
  nsubseteq: Taa,
  nsubseteqq: $aa,
  nsucc: jaa,
  nsucceq: xaa,
  nsup: Saa,
  nsupE: Oaa,
  nsupe: Iaa,
  nsupset: Caa,
  nsupseteq: Paa,
  nsupseteqq: Raa,
  ntgl: Daa,
  Ntilde: Naa,
  ntilde: Laa,
  ntlg: Maa,
  ntriangleleft: qaa,
  ntrianglelefteq: Faa,
  ntriangleright: Baa,
  ntrianglerighteq: Waa,
  Nu: Uaa,
  nu: Haa,
  num: Gaa,
  numero: Vaa,
  numsp: Kaa,
  nvap: Yaa,
  nvdash: Qaa,
  nvDash: Xaa,
  nVdash: Zaa,
  nVDash: Jaa,
  nvge: eta,
  nvgt: ata,
  nvHarr: tta,
  nvinfin: nta,
  nvlArr: rta,
  nvle: sta,
  nvlt: ita,
  nvltrie: ota,
  nvrArr: lta,
  nvrtrie: dta,
  nvsim: uta,
  nwarhk: cta,
  nwarr: pta,
  nwArr: gta,
  nwarrow: mta,
  nwnear: fta,
  Oacute: hta,
  oacute: yta,
  oast: zta,
  Ocirc: bta,
  ocirc: wta,
  ocir: vta,
  Ocy: kta,
  ocy: _ta,
  odash: Eta,
  Odblac: Ata,
  odblac: Tta,
  odiv: $ta,
  odot: jta,
  odsold: xta,
  OElig: Sta,
  oelig: Ota,
  ofcir: Ita,
  Ofr: Cta,
  ofr: Pta,
  ogon: Rta,
  Ograve: Dta,
  ograve: Nta,
  ogt: Lta,
  ohbar: Mta,
  ohm: qta,
  oint: Fta,
  olarr: Bta,
  olcir: Wta,
  olcross: Uta,
  oline: Hta,
  olt: Gta,
  Omacr: Vta,
  omacr: Kta,
  Omega: Yta,
  omega: Qta,
  Omicron: Xta,
  omicron: Zta,
  omid: Jta,
  ominus: ena,
  Oopf: ana,
  oopf: tna,
  opar: nna,
  OpenCurlyDoubleQuote: rna,
  OpenCurlyQuote: sna,
  operp: ina,
  oplus: ona,
  orarr: lna,
  Or: dna,
  or: una,
  ord: cna,
  order: pna,
  orderof: gna,
  ordf: mna,
  ordm: fna,
  origof: hna,
  oror: yna,
  orslope: zna,
  orv: bna,
  oS: wna,
  Oscr: vna,
  oscr: kna,
  Oslash: _na,
  oslash: Ena,
  osol: Ana,
  Otilde: Tna,
  otilde: $na,
  otimesas: jna,
  Otimes: xna,
  otimes: Sna,
  Ouml: Ona,
  ouml: Ina,
  ovbar: Cna,
  OverBar: Pna,
  OverBrace: Rna,
  OverBracket: Dna,
  OverParenthesis: Nna,
  para: Lna,
  parallel: Mna,
  par: qna,
  parsim: Fna,
  parsl: Bna,
  part: Wna,
  PartialD: Una,
  Pcy: Hna,
  pcy: Gna,
  percnt: Vna,
  period: Kna,
  permil: Yna,
  perp: Qna,
  pertenk: Xna,
  Pfr: Zna,
  pfr: Jna,
  Phi: era,
  phi: ara,
  phiv: tra,
  phmmat: nra,
  phone: rra,
  Pi: sra,
  pi: ira,
  pitchfork: ora,
  piv: lra,
  planck: dra,
  planckh: ura,
  plankv: cra,
  plusacir: pra,
  plusb: gra,
  pluscir: mra,
  plus: fra,
  plusdo: hra,
  plusdu: yra,
  pluse: zra,
  PlusMinus: bra,
  plusmn: wra,
  plussim: vra,
  plustwo: kra,
  pm: _ra,
  Poincareplane: Era,
  pointint: Ara,
  popf: Tra,
  Popf: $ra,
  pound: jra,
  prap: xra,
  Pr: Sra,
  pr: Ora,
  prcue: Ira,
  precapprox: Cra,
  prec: Pra,
  preccurlyeq: Rra,
  Precedes: Dra,
  PrecedesEqual: Nra,
  PrecedesSlantEqual: Lra,
  PrecedesTilde: Mra,
  preceq: qra,
  precnapprox: Fra,
  precneqq: Bra,
  precnsim: Wra,
  pre: Ura,
  prE: Hra,
  precsim: Gra,
  prime: Vra,
  Prime: Kra,
  primes: Yra,
  prnap: Qra,
  prnE: Xra,
  prnsim: Zra,
  prod: Jra,
  Product: esa,
  profalar: asa,
  profline: tsa,
  profsurf: nsa,
  prop: rsa,
  Proportional: ssa,
  Proportion: isa,
  propto: osa,
  prsim: lsa,
  prurel: dsa,
  Pscr: usa,
  pscr: csa,
  Psi: psa,
  psi: gsa,
  puncsp: msa,
  Qfr: fsa,
  qfr: hsa,
  qint: ysa,
  qopf: zsa,
  Qopf: bsa,
  qprime: wsa,
  Qscr: vsa,
  qscr: ksa,
  quaternions: _sa,
  quatint: Esa,
  quest: Asa,
  questeq: Tsa,
  quot: $sa,
  QUOT: jsa,
  rAarr: xsa,
  race: Ssa,
  Racute: Osa,
  racute: Isa,
  radic: Csa,
  raemptyv: Psa,
  rang: Rsa,
  Rang: Dsa,
  rangd: Nsa,
  range: Lsa,
  rangle: Msa,
  raquo: qsa,
  rarrap: Fsa,
  rarrb: Bsa,
  rarrbfs: Wsa,
  rarrc: Usa,
  rarr: Hsa,
  Rarr: Gsa,
  rArr: Vsa,
  rarrfs: Ksa,
  rarrhk: Ysa,
  rarrlp: Qsa,
  rarrpl: Xsa,
  rarrsim: Zsa,
  Rarrtl: Jsa,
  rarrtl: eia,
  rarrw: aia,
  ratail: tia,
  rAtail: nia,
  ratio: ria,
  rationals: sia,
  rbarr: iia,
  rBarr: oia,
  RBarr: lia,
  rbbrk: dia,
  rbrace: uia,
  rbrack: cia,
  rbrke: pia,
  rbrksld: gia,
  rbrkslu: mia,
  Rcaron: fia,
  rcaron: hia,
  Rcedil: yia,
  rcedil: zia,
  rceil: bia,
  rcub: wia,
  Rcy: via,
  rcy: kia,
  rdca: _ia,
  rdldhar: Eia,
  rdquo: Aia,
  rdquor: Tia,
  rdsh: $ia,
  real: jia,
  realine: xia,
  realpart: Sia,
  reals: Oia,
  Re: Iia,
  rect: Cia,
  reg: Pia,
  REG: Ria,
  ReverseElement: Dia,
  ReverseEquilibrium: Nia,
  ReverseUpEquilibrium: Lia,
  rfisht: Mia,
  rfloor: qia,
  rfr: Fia,
  Rfr: Bia,
  rHar: Wia,
  rhard: Uia,
  rharu: Hia,
  rharul: Gia,
  Rho: Via,
  rho: Kia,
  rhov: Yia,
  RightAngleBracket: Qia,
  RightArrowBar: Xia,
  rightarrow: Zia,
  RightArrow: Jia,
  Rightarrow: eoa,
  RightArrowLeftArrow: aoa,
  rightarrowtail: toa,
  RightCeiling: noa,
  RightDoubleBracket: roa,
  RightDownTeeVector: soa,
  RightDownVectorBar: ioa,
  RightDownVector: ooa,
  RightFloor: loa,
  rightharpoondown: doa,
  rightharpoonup: uoa,
  rightleftarrows: coa,
  rightleftharpoons: poa,
  rightrightarrows: goa,
  rightsquigarrow: moa,
  RightTeeArrow: foa,
  RightTee: hoa,
  RightTeeVector: yoa,
  rightthreetimes: zoa,
  RightTriangleBar: boa,
  RightTriangle: woa,
  RightTriangleEqual: voa,
  RightUpDownVector: koa,
  RightUpTeeVector: _oa,
  RightUpVectorBar: Eoa,
  RightUpVector: Aoa,
  RightVectorBar: Toa,
  RightVector: $oa,
  ring: joa,
  risingdotseq: xoa,
  rlarr: Soa,
  rlhar: Ooa,
  rlm: Ioa,
  rmoustache: Coa,
  rmoust: Poa,
  rnmid: Roa,
  roang: Doa,
  roarr: Noa,
  robrk: Loa,
  ropar: Moa,
  ropf: qoa,
  Ropf: Foa,
  roplus: Boa,
  rotimes: Woa,
  RoundImplies: Uoa,
  rpar: Hoa,
  rpargt: Goa,
  rppolint: Voa,
  rrarr: Koa,
  Rrightarrow: Yoa,
  rsaquo: Qoa,
  rscr: Xoa,
  Rscr: Zoa,
  rsh: Joa,
  Rsh: ela,
  rsqb: ala,
  rsquo: tla,
  rsquor: nla,
  rthree: rla,
  rtimes: sla,
  rtri: ila,
  rtrie: ola,
  rtrif: lla,
  rtriltri: dla,
  RuleDelayed: ula,
  ruluhar: cla,
  rx: pla,
  Sacute: gla,
  sacute: mla,
  sbquo: fla,
  scap: hla,
  Scaron: yla,
  scaron: zla,
  Sc: bla,
  sc: wla,
  sccue: vla,
  sce: kla,
  scE: _la,
  Scedil: Ela,
  scedil: Ala,
  Scirc: Tla,
  scirc: $la,
  scnap: jla,
  scnE: xla,
  scnsim: Sla,
  scpolint: Ola,
  scsim: Ila,
  Scy: Cla,
  scy: Pla,
  sdotb: Rla,
  sdot: Dla,
  sdote: Nla,
  searhk: Lla,
  searr: Mla,
  seArr: qla,
  searrow: Fla,
  sect: Bla,
  semi: Wla,
  seswar: Ula,
  setminus: Hla,
  setmn: Gla,
  sext: Vla,
  Sfr: Kla,
  sfr: Yla,
  sfrown: Qla,
  sharp: Xla,
  SHCHcy: Zla,
  shchcy: Jla,
  SHcy: eda,
  shcy: ada,
  ShortDownArrow: tda,
  ShortLeftArrow: nda,
  shortmid: rda,
  shortparallel: sda,
  ShortRightArrow: ida,
  ShortUpArrow: oda,
  shy: lda,
  Sigma: dda,
  sigma: uda,
  sigmaf: cda,
  sigmav: pda,
  sim: gda,
  simdot: mda,
  sime: fda,
  simeq: hda,
  simg: yda,
  simgE: zda,
  siml: bda,
  simlE: wda,
  simne: vda,
  simplus: kda,
  simrarr: _da,
  slarr: Eda,
  SmallCircle: Ada,
  smallsetminus: Tda,
  smashp: $da,
  smeparsl: jda,
  smid: xda,
  smile: Sda,
  smt: Oda,
  smte: Ida,
  smtes: Cda,
  SOFTcy: Pda,
  softcy: Rda,
  solbar: Dda,
  solb: Nda,
  sol: Lda,
  Sopf: Mda,
  sopf: qda,
  spades: Fda,
  spadesuit: Bda,
  spar: Wda,
  sqcap: Uda,
  sqcaps: Hda,
  sqcup: Gda,
  sqcups: Vda,
  Sqrt: Kda,
  sqsub: Yda,
  sqsube: Qda,
  sqsubset: Xda,
  sqsubseteq: Zda,
  sqsup: Jda,
  sqsupe: eua,
  sqsupset: aua,
  sqsupseteq: tua,
  square: nua,
  Square: rua,
  SquareIntersection: sua,
  SquareSubset: iua,
  SquareSubsetEqual: oua,
  SquareSuperset: lua,
  SquareSupersetEqual: dua,
  SquareUnion: uua,
  squarf: cua,
  squ: pua,
  squf: gua,
  srarr: mua,
  Sscr: fua,
  sscr: hua,
  ssetmn: yua,
  ssmile: zua,
  sstarf: bua,
  Star: wua,
  star: vua,
  starf: kua,
  straightepsilon: _ua,
  straightphi: Eua,
  strns: Aua,
  sub: Tua,
  Sub: $ua,
  subdot: jua,
  subE: xua,
  sube: Sua,
  subedot: Oua,
  submult: Iua,
  subnE: Cua,
  subne: Pua,
  subplus: Rua,
  subrarr: Dua,
  subset: Nua,
  Subset: Lua,
  subseteq: Mua,
  subseteqq: qua,
  SubsetEqual: Fua,
  subsetneq: Bua,
  subsetneqq: Wua,
  subsim: Uua,
  subsub: Hua,
  subsup: Gua,
  succapprox: Vua,
  succ: Kua,
  succcurlyeq: Yua,
  Succeeds: Qua,
  SucceedsEqual: Xua,
  SucceedsSlantEqual: Zua,
  SucceedsTilde: Jua,
  succeq: eca,
  succnapprox: aca,
  succneqq: tca,
  succnsim: nca,
  succsim: rca,
  SuchThat: sca,
  sum: ica,
  Sum: oca,
  sung: lca,
  sup1: dca,
  sup2: uca,
  sup3: cca,
  sup: pca,
  Sup: gca,
  supdot: mca,
  supdsub: fca,
  supE: hca,
  supe: yca,
  supedot: zca,
  Superset: bca,
  SupersetEqual: wca,
  suphsol: vca,
  suphsub: kca,
  suplarr: _ca,
  supmult: Eca,
  supnE: Aca,
  supne: Tca,
  supplus: $ca,
  supset: jca,
  Supset: xca,
  supseteq: Sca,
  supseteqq: Oca,
  supsetneq: Ica,
  supsetneqq: Cca,
  supsim: Pca,
  supsub: Rca,
  supsup: Dca,
  swarhk: Nca,
  swarr: Lca,
  swArr: Mca,
  swarrow: qca,
  swnwar: Fca,
  szlig: Bca,
  Tab: Wca,
  target: Uca,
  Tau: Hca,
  tau: Gca,
  tbrk: Vca,
  Tcaron: Kca,
  tcaron: Yca,
  Tcedil: Qca,
  tcedil: Xca,
  Tcy: Zca,
  tcy: Jca,
  tdot: epa,
  telrec: apa,
  Tfr: tpa,
  tfr: npa,
  there4: rpa,
  therefore: spa,
  Therefore: ipa,
  Theta: opa,
  theta: lpa,
  thetasym: dpa,
  thetav: upa,
  thickapprox: cpa,
  thicksim: ppa,
  ThickSpace: gpa,
  ThinSpace: mpa,
  thinsp: fpa,
  thkap: hpa,
  thksim: ypa,
  THORN: zpa,
  thorn: bpa,
  tilde: wpa,
  Tilde: vpa,
  TildeEqual: kpa,
  TildeFullEqual: _pa,
  TildeTilde: Epa,
  timesbar: Apa,
  timesb: Tpa,
  times: $pa,
  timesd: jpa,
  tint: xpa,
  toea: Spa,
  topbot: Opa,
  topcir: Ipa,
  top: Cpa,
  Topf: Ppa,
  topf: Rpa,
  topfork: Dpa,
  tosa: Npa,
  tprime: Lpa,
  trade: Mpa,
  TRADE: qpa,
  triangle: Fpa,
  triangledown: Bpa,
  triangleleft: Wpa,
  trianglelefteq: Upa,
  triangleq: Hpa,
  triangleright: Gpa,
  trianglerighteq: Vpa,
  tridot: Kpa,
  trie: Ypa,
  triminus: Qpa,
  TripleDot: Xpa,
  triplus: Zpa,
  trisb: Jpa,
  tritime: ega,
  trpezium: aga,
  Tscr: tga,
  tscr: nga,
  TScy: rga,
  tscy: sga,
  TSHcy: iga,
  tshcy: oga,
  Tstrok: lga,
  tstrok: dga,
  twixt: uga,
  twoheadleftarrow: cga,
  twoheadrightarrow: pga,
  Uacute: gga,
  uacute: mga,
  uarr: fga,
  Uarr: hga,
  uArr: yga,
  Uarrocir: zga,
  Ubrcy: bga,
  ubrcy: wga,
  Ubreve: vga,
  ubreve: kga,
  Ucirc: _ga,
  ucirc: Ega,
  Ucy: Aga,
  ucy: Tga,
  udarr: $ga,
  Udblac: jga,
  udblac: xga,
  udhar: Sga,
  ufisht: Oga,
  Ufr: Iga,
  ufr: Cga,
  Ugrave: Pga,
  ugrave: Rga,
  uHar: Dga,
  uharl: Nga,
  uharr: Lga,
  uhblk: Mga,
  ulcorn: qga,
  ulcorner: Fga,
  ulcrop: Bga,
  ultri: Wga,
  Umacr: Uga,
  umacr: Hga,
  uml: Gga,
  UnderBar: Vga,
  UnderBrace: Kga,
  UnderBracket: Yga,
  UnderParenthesis: Qga,
  Union: Xga,
  UnionPlus: Zga,
  Uogon: Jga,
  uogon: ema,
  Uopf: ama,
  uopf: tma,
  UpArrowBar: nma,
  uparrow: rma,
  UpArrow: sma,
  Uparrow: ima,
  UpArrowDownArrow: oma,
  updownarrow: lma,
  UpDownArrow: dma,
  Updownarrow: uma,
  UpEquilibrium: cma,
  upharpoonleft: pma,
  upharpoonright: gma,
  uplus: mma,
  UpperLeftArrow: fma,
  UpperRightArrow: hma,
  upsi: yma,
  Upsi: zma,
  upsih: bma,
  Upsilon: wma,
  upsilon: vma,
  UpTeeArrow: kma,
  UpTee: _ma,
  upuparrows: Ema,
  urcorn: Ama,
  urcorner: Tma,
  urcrop: $ma,
  Uring: jma,
  uring: xma,
  urtri: Sma,
  Uscr: Oma,
  uscr: Ima,
  utdot: Cma,
  Utilde: Pma,
  utilde: Rma,
  utri: Dma,
  utrif: Nma,
  uuarr: Lma,
  Uuml: Mma,
  uuml: qma,
  uwangle: Fma,
  vangrt: Bma,
  varepsilon: Wma,
  varkappa: Uma,
  varnothing: Hma,
  varphi: Gma,
  varpi: Vma,
  varpropto: Kma,
  varr: Yma,
  vArr: Qma,
  varrho: Xma,
  varsigma: Zma,
  varsubsetneq: Jma,
  varsubsetneqq: efa,
  varsupsetneq: afa,
  varsupsetneqq: tfa,
  vartheta: nfa,
  vartriangleleft: rfa,
  vartriangleright: sfa,
  vBar: ifa,
  Vbar: ofa,
  vBarv: lfa,
  Vcy: dfa,
  vcy: ufa,
  vdash: cfa,
  vDash: pfa,
  Vdash: gfa,
  VDash: mfa,
  Vdashl: ffa,
  veebar: hfa,
  vee: yfa,
  Vee: zfa,
  veeeq: bfa,
  vellip: wfa,
  verbar: vfa,
  Verbar: kfa,
  vert: _fa,
  Vert: Efa,
  VerticalBar: Afa,
  VerticalLine: Tfa,
  VerticalSeparator: $fa,
  VerticalTilde: jfa,
  VeryThinSpace: xfa,
  Vfr: Sfa,
  vfr: Ofa,
  vltri: Ifa,
  vnsub: Cfa,
  vnsup: Pfa,
  Vopf: Rfa,
  vopf: Dfa,
  vprop: Nfa,
  vrtri: Lfa,
  Vscr: Mfa,
  vscr: qfa,
  vsubnE: Ffa,
  vsubne: Bfa,
  vsupnE: Wfa,
  vsupne: Ufa,
  Vvdash: Hfa,
  vzigzag: Gfa,
  Wcirc: Vfa,
  wcirc: Kfa,
  wedbar: Yfa,
  wedge: Qfa,
  Wedge: Xfa,
  wedgeq: Zfa,
  weierp: Jfa,
  Wfr: eha,
  wfr: aha,
  Wopf: tha,
  wopf: nha,
  wp: rha,
  wr: sha,
  wreath: iha,
  Wscr: oha,
  wscr: lha,
  xcap: dha,
  xcirc: uha,
  xcup: cha,
  xdtri: pha,
  Xfr: gha,
  xfr: mha,
  xharr: fha,
  xhArr: hha,
  Xi: yha,
  xi: zha,
  xlarr: bha,
  xlArr: wha,
  xmap: vha,
  xnis: kha,
  xodot: _ha,
  Xopf: Eha,
  xopf: Aha,
  xoplus: Tha,
  xotime: $ha,
  xrarr: jha,
  xrArr: xha,
  Xscr: Sha,
  xscr: Oha,
  xsqcup: Iha,
  xuplus: Cha,
  xutri: Pha,
  xvee: Rha,
  xwedge: Dha,
  Yacute: Nha,
  yacute: Lha,
  YAcy: Mha,
  yacy: qha,
  Ycirc: Fha,
  ycirc: Bha,
  Ycy: Wha,
  ycy: Uha,
  yen: Hha,
  Yfr: Gha,
  yfr: Vha,
  YIcy: Kha,
  yicy: Yha,
  Yopf: Qha,
  yopf: Xha,
  Yscr: Zha,
  yscr: Jha,
  YUcy: eya,
  yucy: aya,
  yuml: tya,
  Yuml: nya,
  Zacute: rya,
  zacute: sya,
  Zcaron: iya,
  zcaron: oya,
  Zcy: lya,
  zcy: dya,
  Zdot: uya,
  zdot: cya,
  zeetrf: pya,
  ZeroWidthSpace: gya,
  Zeta: mya,
  zeta: fya,
  zfr: hya,
  Zfr: yya,
  ZHcy: zya,
  zhcy: bya,
  zigrarr: wya,
  zopf: vya,
  Zopf: kya,
  Zscr: _ya,
  zscr: Eya,
  zwj: Aya,
  zwnj: Tya
}, $ya = "Á", jya = "á", xya = "Â", Sya = "â", Oya = "´", Iya = "Æ", Cya = "æ", Pya = "À", Rya = "à", Dya = "&", Nya = "&", Lya = "Å", Mya = "å", qya = "Ã", Fya = "ã", Bya = "Ä", Wya = "ä", Uya = "¦", Hya = "Ç", Gya = "ç", Vya = "¸", Kya = "¢", Yya = "©", Qya = "©", Xya = "¤", Zya = "°", Jya = "÷", eza = "É", aza = "é", tza = "Ê", nza = "ê", rza = "È", sza = "è", iza = "Ð", oza = "ð", lza = "Ë", dza = "ë", uza = "½", cza = "¼", pza = "¾", gza = ">", mza = ">", fza = "Í", hza = "í", yza = "Î", zza = "î", bza = "¡", wza = "Ì", vza = "ì", kza = "¿", _za = "Ï", Eza = "ï", Aza = "«", Tza = "<", $za = "<", jza = "¯", xza = "µ", Sza = "·", Oza = " ", Iza = "¬", Cza = "Ñ", Pza = "ñ", Rza = "Ó", Dza = "ó", Nza = "Ô", Lza = "ô", Mza = "Ò", qza = "ò", Fza = "ª", Bza = "º", Wza = "Ø", Uza = "ø", Hza = "Õ", Gza = "õ", Vza = "Ö", Kza = "ö", Yza = "¶", Qza = "±", Xza = "£", Zza = '"', Jza = '"', eba = "»", aba = "®", tba = "®", nba = "§", rba = "­", sba = "¹", iba = "²", oba = "³", lba = "ß", dba = "Þ", uba = "þ", cba = "×", pba = "Ú", gba = "ú", mba = "Û", fba = "û", hba = "Ù", yba = "ù", zba = "¨", bba = "Ü", wba = "ü", vba = "Ý", kba = "ý", _ba = "¥", Eba = "ÿ", Aba = {
  Aacute: $ya,
  aacute: jya,
  Acirc: xya,
  acirc: Sya,
  acute: Oya,
  AElig: Iya,
  aelig: Cya,
  Agrave: Pya,
  agrave: Rya,
  amp: Dya,
  AMP: Nya,
  Aring: Lya,
  aring: Mya,
  Atilde: qya,
  atilde: Fya,
  Auml: Bya,
  auml: Wya,
  brvbar: Uya,
  Ccedil: Hya,
  ccedil: Gya,
  cedil: Vya,
  cent: Kya,
  copy: Yya,
  COPY: Qya,
  curren: Xya,
  deg: Zya,
  divide: Jya,
  Eacute: eza,
  eacute: aza,
  Ecirc: tza,
  ecirc: nza,
  Egrave: rza,
  egrave: sza,
  ETH: iza,
  eth: oza,
  Euml: lza,
  euml: dza,
  frac12: uza,
  frac14: cza,
  frac34: pza,
  gt: gza,
  GT: mza,
  Iacute: fza,
  iacute: hza,
  Icirc: yza,
  icirc: zza,
  iexcl: bza,
  Igrave: wza,
  igrave: vza,
  iquest: kza,
  Iuml: _za,
  iuml: Eza,
  laquo: Aza,
  lt: Tza,
  LT: $za,
  macr: jza,
  micro: xza,
  middot: Sza,
  nbsp: Oza,
  not: Iza,
  Ntilde: Cza,
  ntilde: Pza,
  Oacute: Rza,
  oacute: Dza,
  Ocirc: Nza,
  ocirc: Lza,
  Ograve: Mza,
  ograve: qza,
  ordf: Fza,
  ordm: Bza,
  Oslash: Wza,
  oslash: Uza,
  Otilde: Hza,
  otilde: Gza,
  Ouml: Vza,
  ouml: Kza,
  para: Yza,
  plusmn: Qza,
  pound: Xza,
  quot: Zza,
  QUOT: Jza,
  raquo: eba,
  reg: aba,
  REG: tba,
  sect: nba,
  shy: rba,
  sup1: sba,
  sup2: iba,
  sup3: oba,
  szlig: lba,
  THORN: dba,
  thorn: uba,
  times: cba,
  Uacute: pba,
  uacute: gba,
  Ucirc: mba,
  ucirc: fba,
  Ugrave: hba,
  ugrave: yba,
  uml: zba,
  Uuml: bba,
  uuml: wba,
  Yacute: vba,
  yacute: kba,
  yen: _ba,
  yuml: Eba
}, Tba = "&", $ba = "'", jba = ">", xba = "<", Sba = '"', ZD = {
  amp: Tba,
  apos: $ba,
  gt: jba,
  lt: xba,
  quot: Sba
};
var Ng = {};
const Oba = {
  0: 65533,
  128: 8364,
  130: 8218,
  131: 402,
  132: 8222,
  133: 8230,
  134: 8224,
  135: 8225,
  136: 710,
  137: 8240,
  138: 352,
  139: 8249,
  140: 338,
  142: 381,
  145: 8216,
  146: 8217,
  147: 8220,
  148: 8221,
  149: 8226,
  150: 8211,
  151: 8212,
  152: 732,
  153: 8482,
  154: 353,
  155: 8250,
  156: 339,
  158: 382,
  159: 376
};
var oO;
function Iba() {
  if (oO) return Ng;
  oO = 1;
  var e = dt && dt.__importDefault || function(r) {
    return r && r.__esModule ? r : { default: r };
  };
  Object.defineProperty(Ng, "__esModule", { value: !0 });
  var a = e(Oba), t = (
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    String.fromCodePoint || function(r) {
      var o = "";
      return r > 65535 && (r -= 65536, o += String.fromCharCode(r >>> 10 & 1023 | 55296), r = 56320 | r & 1023), o += String.fromCharCode(r), o;
    }
  );
  function n(r) {
    return r >= 55296 && r <= 57343 || r > 1114111 ? "�" : (r in a.default && (r = a.default[r]), t(r));
  }
  return Ng.default = n, Ng;
}
var lO;
function dO() {
  if (lO) return Fs;
  lO = 1;
  var e = dt && dt.__importDefault || function(f) {
    return f && f.__esModule ? f : { default: f };
  };
  Object.defineProperty(Fs, "__esModule", { value: !0 }), Fs.decodeHTML = Fs.decodeHTMLStrict = Fs.decodeXML = void 0;
  var a = e(XD), t = e(Aba), n = e(ZD), r = e(Iba()), o = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
  Fs.decodeXML = l(n.default), Fs.decodeHTMLStrict = l(a.default);
  function l(f) {
    var y = c(f);
    return function(z) {
      return String(z).replace(o, y);
    };
  }
  var u = function(f, y) {
    return f < y ? 1 : -1;
  };
  Fs.decodeHTML = function() {
    for (var f = Object.keys(t.default).sort(u), y = Object.keys(a.default).sort(u), z = 0, v = 0; z < y.length; z++)
      f[v] === y[z] ? (y[z] += ";?", v++) : y[z] += ";";
    var O = new RegExp("&(?:" + y.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"), I = c(a.default);
    function A(x) {
      return x.substr(-1) !== ";" && (x += ";"), I(x);
    }
    return function(x) {
      return String(x).replace(O, A);
    };
  }();
  function c(f) {
    return function(z) {
      if (z.charAt(1) === "#") {
        var v = z.charAt(2);
        return v === "X" || v === "x" ? r.default(parseInt(z.substr(3), 16)) : r.default(parseInt(z.substr(2), 10));
      }
      return f[z.slice(1, -1)] || z;
    };
  }
  return Fs;
}
var jn = {}, uO;
function cO() {
  if (uO) return jn;
  uO = 1;
  var e = dt && dt.__importDefault || function(w) {
    return w && w.__esModule ? w : { default: w };
  };
  Object.defineProperty(jn, "__esModule", { value: !0 }), jn.escapeUTF8 = jn.escape = jn.encodeNonAsciiHTML = jn.encodeHTML = jn.encodeXML = void 0;
  var a = e(ZD), t = u(a.default), n = c(t);
  jn.encodeXML = x(t);
  var r = e(XD), o = u(r.default), l = c(o);
  jn.encodeHTML = v(o, l), jn.encodeNonAsciiHTML = x(o);
  function u(w) {
    return Object.keys(w).sort().reduce(function(j, S) {
      return j[w[S]] = "&" + S + ";", j;
    }, {});
  }
  function c(w) {
    for (var j = [], S = [], P = 0, M = Object.keys(w); P < M.length; P++) {
      var G = M[P];
      G.length === 1 ? j.push("\\" + G) : S.push(G);
    }
    j.sort();
    for (var U = 0; U < j.length - 1; U++) {
      for (var V = U; V < j.length - 1 && j[V].charCodeAt(1) + 1 === j[V + 1].charCodeAt(1); )
        V += 1;
      var F = 1 + V - U;
      F < 3 || j.splice(U, F, j[U] + "-" + j[V]);
    }
    return S.unshift("[" + j.join("") + "]"), new RegExp(S.join("|"), "g");
  }
  var f = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g, y = (
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    String.prototype.codePointAt != null ? (
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      function(w) {
        return w.codePointAt(0);
      }
    ) : (
      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      function(w) {
        return (w.charCodeAt(0) - 55296) * 1024 + w.charCodeAt(1) - 56320 + 65536;
      }
    )
  );
  function z(w) {
    return "&#x" + (w.length > 1 ? y(w) : w.charCodeAt(0)).toString(16).toUpperCase() + ";";
  }
  function v(w, j) {
    return function(S) {
      return S.replace(j, function(P) {
        return w[P];
      }).replace(f, z);
    };
  }
  var O = new RegExp(n.source + "|" + f.source, "g");
  function I(w) {
    return w.replace(O, z);
  }
  jn.escape = I;
  function A(w) {
    return w.replace(n, z);
  }
  jn.escapeUTF8 = A;
  function x(w) {
    return function(j) {
      return j.replace(O, function(S) {
        return w[S] || z(S);
      });
    };
  }
  return jn;
}
var pO;
function Cba() {
  return pO || (pO = 1, function(e) {
    Object.defineProperty(e, "__esModule", { value: !0 }), e.decodeXMLStrict = e.decodeHTML5Strict = e.decodeHTML4Strict = e.decodeHTML5 = e.decodeHTML4 = e.decodeHTMLStrict = e.decodeHTML = e.decodeXML = e.encodeHTML5 = e.encodeHTML4 = e.escapeUTF8 = e.escape = e.encodeNonAsciiHTML = e.encodeHTML = e.encodeXML = e.encode = e.decodeStrict = e.decode = void 0;
    var a = dO(), t = cO();
    function n(c, f) {
      return (!f || f <= 0 ? a.decodeXML : a.decodeHTML)(c);
    }
    e.decode = n;
    function r(c, f) {
      return (!f || f <= 0 ? a.decodeXML : a.decodeHTMLStrict)(c);
    }
    e.decodeStrict = r;
    function o(c, f) {
      return (!f || f <= 0 ? t.encodeXML : t.encodeHTML)(c);
    }
    e.encode = o;
    var l = cO();
    Object.defineProperty(e, "encodeXML", { enumerable: !0, get: function() {
      return l.encodeXML;
    } }), Object.defineProperty(e, "encodeHTML", { enumerable: !0, get: function() {
      return l.encodeHTML;
    } }), Object.defineProperty(e, "encodeNonAsciiHTML", { enumerable: !0, get: function() {
      return l.encodeNonAsciiHTML;
    } }), Object.defineProperty(e, "escape", { enumerable: !0, get: function() {
      return l.escape;
    } }), Object.defineProperty(e, "escapeUTF8", { enumerable: !0, get: function() {
      return l.escapeUTF8;
    } }), Object.defineProperty(e, "encodeHTML4", { enumerable: !0, get: function() {
      return l.encodeHTML;
    } }), Object.defineProperty(e, "encodeHTML5", { enumerable: !0, get: function() {
      return l.encodeHTML;
    } });
    var u = dO();
    Object.defineProperty(e, "decodeXML", { enumerable: !0, get: function() {
      return u.decodeXML;
    } }), Object.defineProperty(e, "decodeHTML", { enumerable: !0, get: function() {
      return u.decodeHTML;
    } }), Object.defineProperty(e, "decodeHTMLStrict", { enumerable: !0, get: function() {
      return u.decodeHTMLStrict;
    } }), Object.defineProperty(e, "decodeHTML4", { enumerable: !0, get: function() {
      return u.decodeHTML;
    } }), Object.defineProperty(e, "decodeHTML5", { enumerable: !0, get: function() {
      return u.decodeHTML;
    } }), Object.defineProperty(e, "decodeHTML4Strict", { enumerable: !0, get: function() {
      return u.decodeHTMLStrict;
    } }), Object.defineProperty(e, "decodeHTML5Strict", { enumerable: !0, get: function() {
      return u.decodeHTMLStrict;
    } }), Object.defineProperty(e, "decodeXMLStrict", { enumerable: !0, get: function() {
      return u.decodeXML;
    } });
  }(sv)), sv;
}
const Pba = {
  altglyph: "altGlyph",
  altglyphdef: "altGlyphDef",
  altglyphitem: "altGlyphItem",
  animatecolor: "animateColor",
  animatemotion: "animateMotion",
  animatetransform: "animateTransform",
  clippath: "clipPath",
  feblend: "feBlend",
  fecolormatrix: "feColorMatrix",
  fecomponenttransfer: "feComponentTransfer",
  fecomposite: "feComposite",
  feconvolvematrix: "feConvolveMatrix",
  fediffuselighting: "feDiffuseLighting",
  fedisplacementmap: "feDisplacementMap",
  fedistantlight: "feDistantLight",
  fedropshadow: "feDropShadow",
  feflood: "feFlood",
  fefunca: "feFuncA",
  fefuncb: "feFuncB",
  fefuncg: "feFuncG",
  fefuncr: "feFuncR",
  fegaussianblur: "feGaussianBlur",
  feimage: "feImage",
  femerge: "feMerge",
  femergenode: "feMergeNode",
  femorphology: "feMorphology",
  feoffset: "feOffset",
  fepointlight: "fePointLight",
  fespecularlighting: "feSpecularLighting",
  fespotlight: "feSpotLight",
  fetile: "feTile",
  feturbulence: "feTurbulence",
  foreignobject: "foreignObject",
  glyphref: "glyphRef",
  lineargradient: "linearGradient",
  radialgradient: "radialGradient",
  textpath: "textPath"
}, Rba = {
  definitionurl: "definitionURL",
  attributename: "attributeName",
  attributetype: "attributeType",
  basefrequency: "baseFrequency",
  baseprofile: "baseProfile",
  calcmode: "calcMode",
  clippathunits: "clipPathUnits",
  diffuseconstant: "diffuseConstant",
  edgemode: "edgeMode",
  filterunits: "filterUnits",
  glyphref: "glyphRef",
  gradienttransform: "gradientTransform",
  gradientunits: "gradientUnits",
  kernelmatrix: "kernelMatrix",
  kernelunitlength: "kernelUnitLength",
  keypoints: "keyPoints",
  keysplines: "keySplines",
  keytimes: "keyTimes",
  lengthadjust: "lengthAdjust",
  limitingconeangle: "limitingConeAngle",
  markerheight: "markerHeight",
  markerunits: "markerUnits",
  markerwidth: "markerWidth",
  maskcontentunits: "maskContentUnits",
  maskunits: "maskUnits",
  numoctaves: "numOctaves",
  pathlength: "pathLength",
  patterncontentunits: "patternContentUnits",
  patterntransform: "patternTransform",
  patternunits: "patternUnits",
  pointsatx: "pointsAtX",
  pointsaty: "pointsAtY",
  pointsatz: "pointsAtZ",
  preservealpha: "preserveAlpha",
  preserveaspectratio: "preserveAspectRatio",
  primitiveunits: "primitiveUnits",
  refx: "refX",
  refy: "refY",
  repeatcount: "repeatCount",
  repeatdur: "repeatDur",
  requiredextensions: "requiredExtensions",
  requiredfeatures: "requiredFeatures",
  specularconstant: "specularConstant",
  specularexponent: "specularExponent",
  spreadmethod: "spreadMethod",
  startoffset: "startOffset",
  stddeviation: "stdDeviation",
  stitchtiles: "stitchTiles",
  surfacescale: "surfaceScale",
  systemlanguage: "systemLanguage",
  tablevalues: "tableValues",
  targetx: "targetX",
  targety: "targetY",
  textlength: "textLength",
  viewbox: "viewBox",
  viewtarget: "viewTarget",
  xchannelselector: "xChannelSelector",
  ychannelselector: "yChannelSelector",
  zoomandpan: "zoomAndPan"
}, Dba = {
  elementNames: Pba,
  attributeNames: Rba
};
var gO;
function Nba() {
  if (gO) return nv.exports;
  gO = 1;
  var e = dLe(), a = Cba(), t = Dba;
  t.elementNames.__proto__ = null, t.attributeNames.__proto__ = null;
  var n = {
    __proto__: null,
    style: !0,
    script: !0,
    xmp: !0,
    iframe: !0,
    noembed: !0,
    noframes: !0,
    plaintext: !0,
    noscript: !0
  };
  function r(O, I) {
    if (O) {
      var A = "", x;
      for (var w in O)
        x = O[w], A && (A += " "), I.xmlMode === "foreign" && (w = t.attributeNames[w] || w), A += w, (x !== null && x !== "" || I.xmlMode) && (A += '="' + (I.decodeEntities ? a.encodeXML(x) : x.replace(/\"/g, "&quot;")) + '"');
      return A;
    }
  }
  var o = {
    __proto__: null,
    area: !0,
    base: !0,
    basefont: !0,
    br: !0,
    col: !0,
    command: !0,
    embed: !0,
    frame: !0,
    hr: !0,
    img: !0,
    input: !0,
    isindex: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
  }, l = nv.exports = function(O, I) {
    !Array.isArray(O) && !O.cheerio && (O = [O]), I = I || {};
    for (var A = "", x = 0; x < O.length; x++) {
      var w = O[x];
      w.type === "root" ? A += l(w.children, I) : e.isTag(w) ? A += c(w, I) : w.type === e.Directive ? A += f(w) : w.type === e.Comment ? A += v(w) : w.type === e.CDATA ? A += z(w) : A += y(w, I);
    }
    return A;
  }, u = [
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
  ];
  function c(O, I) {
    I.xmlMode === "foreign" && (O.name = t.elementNames[O.name] || O.name, O.parent && u.indexOf(O.parent.name) >= 0 && (I = Object.assign({}, I, { xmlMode: !1 }))), !I.xmlMode && ["svg", "math"].indexOf(O.name) >= 0 && (I = Object.assign({}, I, { xmlMode: "foreign" }));
    var A = "<" + O.name, x = r(O.attribs, I);
    return x && (A += " " + x), I.xmlMode && (!O.children || O.children.length === 0) ? A += "/>" : (A += ">", O.children && (A += l(O.children, I)), (!o[O.name] || I.xmlMode) && (A += "</" + O.name + ">")), A;
  }
  function f(O) {
    return "<" + O.data + ">";
  }
  function y(O, I) {
    var A = O.data || "";
    return I.decodeEntities && !(O.parent && O.parent.name in n) && (A = a.encodeXML(A)), A;
  }
  function z(O) {
    return "<![CDATA[" + O.children[0].data + "]]>";
  }
  function v(O) {
    return "<!--" + O.data + "-->";
  }
  return nv.exports;
}
var iv, mO;
function Lba() {
  if (mO) return iv;
  mO = 1;
  var e = Tc, a = Nba(), t = e.isTag;
  iv = {
    getInnerHTML: n,
    getOuterHTML: a,
    getText: r
  };
  function n(o, l) {
    return o.children ? o.children.map(function(u) {
      return a(u, l);
    }).join("") : "";
  }
  function r(o) {
    return Array.isArray(o) ? o.map(r).join("") : t(o) ? o.name === "br" ? `
` : r(o.children) : o.type === e.CDATA ? r(o.children) : o.type === e.Text ? o.data : "";
  }
  return iv;
}
var $i = {}, fO;
function Mba() {
  if (fO) return $i;
  fO = 1;
  var e = $i.getChildren = function(t) {
    return t.children;
  }, a = $i.getParent = function(t) {
    return t.parent;
  };
  return $i.getSiblings = function(t) {
    var n = a(t);
    return n ? e(n) : [t];
  }, $i.getAttributeValue = function(t, n) {
    return t.attribs && t.attribs[n];
  }, $i.hasAttrib = function(t, n) {
    return !!t.attribs && hasOwnProperty.call(t.attribs, n);
  }, $i.getName = function(t) {
    return t.name;
  }, $i;
}
var jo = {}, hO;
function qba() {
  return hO || (hO = 1, jo.removeElement = function(e) {
    if (e.prev && (e.prev.next = e.next), e.next && (e.next.prev = e.prev), e.parent) {
      var a = e.parent.children;
      a.splice(a.lastIndexOf(e), 1);
    }
  }, jo.replaceElement = function(e, a) {
    var t = a.prev = e.prev;
    t && (t.next = a);
    var n = a.next = e.next;
    n && (n.prev = a);
    var r = a.parent = e.parent;
    if (r) {
      var o = r.children;
      o[o.lastIndexOf(e)] = a;
    }
  }, jo.appendChild = function(e, a) {
    if (a.parent = e, e.children.push(a) !== 1) {
      var t = e.children[e.children.length - 2];
      t.next = a, a.prev = t, a.next = null;
    }
  }, jo.append = function(e, a) {
    var t = e.parent, n = e.next;
    if (a.next = n, a.prev = e, e.next = a, a.parent = t, n) {
      if (n.prev = a, t) {
        var r = t.children;
        r.splice(r.lastIndexOf(n), 0, a);
      }
    } else t && t.children.push(a);
  }, jo.prepend = function(e, a) {
    var t = e.parent;
    if (t) {
      var n = t.children;
      n.splice(n.lastIndexOf(e), 0, a);
    }
    e.prev && (e.prev.next = a), a.parent = t, a.prev = e.prev, a.next = e, e.prev = a;
  }), jo;
}
var ov, yO;
function Fba() {
  if (yO) return ov;
  yO = 1;
  var e = Tc.isTag;
  ov = {
    filter: a,
    find: t,
    findOneChild: n,
    findOne: r,
    existsOne: o,
    findAll: l
  };
  function a(u, c, f, y) {
    return Array.isArray(c) || (c = [c]), (typeof y != "number" || !isFinite(y)) && (y = 1 / 0), t(u, c, f !== !1, y);
  }
  function t(u, c, f, y) {
    for (var z = [], v, O = 0, I = c.length; O < I && !(u(c[O]) && (z.push(c[O]), --y <= 0) || (v = c[O].children, f && v && v.length > 0 && (v = t(u, v, f, y), z = z.concat(v), y -= v.length, y <= 0))); O++)
      ;
    return z;
  }
  function n(u, c) {
    for (var f = 0, y = c.length; f < y; f++)
      if (u(c[f])) return c[f];
    return null;
  }
  function r(u, c) {
    for (var f = null, y = 0, z = c.length; y < z && !f; y++)
      if (e(c[y]))
        u(c[y]) ? f = c[y] : c[y].children.length > 0 && (f = r(u, c[y].children));
      else continue;
    return f;
  }
  function o(u, c) {
    for (var f = 0, y = c.length; f < y; f++)
      if (e(c[f]) && (u(c[f]) || c[f].children.length > 0 && o(u, c[f].children)))
        return !0;
    return !1;
  }
  function l(u, c) {
    for (var f = [], y = c.slice(); y.length; ) {
      var z = y.shift();
      e(z) && (z.children && z.children.length > 0 && y.unshift.apply(y, z.children), u(z) && f.push(z));
    }
    return f;
  }
  return ov;
}
var ji = {}, zO;
function Bba() {
  if (zO) return ji;
  zO = 1;
  var e = Tc, a = ji.isTag = e.isTag;
  ji.testElement = function(o, l) {
    for (var u in o)
      if (o.hasOwnProperty(u)) {
        if (u === "tag_name") {
          if (!a(l) || !o.tag_name(l.name))
            return !1;
        } else if (u === "tag_type") {
          if (!o.tag_type(l.type)) return !1;
        } else if (u === "tag_contains") {
          if (a(l) || !o.tag_contains(l.data))
            return !1;
        } else if (!l.attribs || !o[u](l.attribs[u]))
          return !1;
      }
    return !0;
  };
  var t = {
    tag_name: function(o) {
      return typeof o == "function" ? function(l) {
        return a(l) && o(l.name);
      } : o === "*" ? a : function(l) {
        return a(l) && l.name === o;
      };
    },
    tag_type: function(o) {
      return typeof o == "function" ? function(l) {
        return o(l.type);
      } : function(l) {
        return l.type === o;
      };
    },
    tag_contains: function(o) {
      return typeof o == "function" ? function(l) {
        return !a(l) && o(l.data);
      } : function(l) {
        return !a(l) && l.data === o;
      };
    }
  };
  function n(o, l) {
    return typeof l == "function" ? function(u) {
      return u.attribs && l(u.attribs[o]);
    } : function(u) {
      return u.attribs && u.attribs[o] === l;
    };
  }
  function r(o, l) {
    return function(u) {
      return o(u) || l(u);
    };
  }
  return ji.getElements = function(o, l, u, c) {
    var f = Object.keys(o).map(function(y) {
      var z = o[y];
      return y in t ? t[y](z) : n(y, z);
    });
    return f.length === 0 ? [] : this.filter(
      f.reduce(r),
      l,
      u,
      c
    );
  }, ji.getElementById = function(o, l, u) {
    return Array.isArray(l) || (l = [l]), this.findOne(n("id", o), l, u !== !1);
  }, ji.getElementsByTagName = function(o, l, u, c) {
    return this.filter(t.tag_name(o), l, u, c);
  }, ji.getElementsByTagType = function(o, l, u, c) {
    return this.filter(t.tag_type(o), l, u, c);
  }, ji;
}
var Pu = {}, bO;
function Wba() {
  if (bO) return Pu;
  bO = 1, Pu.removeSubsets = function(t) {
    for (var n = t.length, r, o, l; --n > -1; ) {
      for (r = o = t[n], t[n] = null, l = !0; o; ) {
        if (t.indexOf(o) > -1) {
          l = !1, t.splice(n, 1);
          break;
        }
        o = o.parent;
      }
      l && (t[n] = r);
    }
    return t;
  };
  var e = {
    DISCONNECTED: 1,
    PRECEDING: 2,
    FOLLOWING: 4,
    CONTAINS: 8,
    CONTAINED_BY: 16
  }, a = Pu.compareDocumentPosition = function(t, n) {
    var r = [], o = [], l, u, c, f, y, z;
    if (t === n)
      return 0;
    for (l = t; l; )
      r.unshift(l), l = l.parent;
    for (l = n; l; )
      o.unshift(l), l = l.parent;
    for (z = 0; r[z] === o[z]; )
      z++;
    return z === 0 ? e.DISCONNECTED : (u = r[z - 1], c = u.children, f = r[z], y = o[z], c.indexOf(f) > c.indexOf(y) ? u === n ? e.FOLLOWING | e.CONTAINED_BY : e.FOLLOWING : u === t ? e.PRECEDING | e.CONTAINS : e.PRECEDING);
  };
  return Pu.uniqueSort = function(t) {
    var n = t.length, r, o;
    for (t = t.slice(); --n > -1; )
      r = t[n], o = t.indexOf(r), o > -1 && o < n && t.splice(n, 1);
    return t.sort(function(l, u) {
      var c = a(l, u);
      return c & e.PRECEDING ? -1 : c & e.FOLLOWING ? 1 : 0;
    }), t;
  }, Pu;
}
var wO;
function JD() {
  return wO || (wO = 1, function(e) {
    var a = e.exports;
    [
      Lba(),
      Mba(),
      qba(),
      Fba(),
      Bba(),
      Wba()
    ].forEach(function(t) {
      Object.keys(t).forEach(function(n) {
        a[n] = t[n].bind(a);
      });
    });
  }(tv)), tv.exports;
}
var lv, vO;
function Uba() {
  if (vO) return lv;
  vO = 1;
  var e = QD, a = JD();
  function t(c, f) {
    this.init(c, f);
  }
  mf(t, e), t.prototype.init = e;
  function n(c, f) {
    return a.getElementsByTagName(c, f, !0);
  }
  function r(c, f) {
    return a.getElementsByTagName(c, f, !0, 1)[0];
  }
  function o(c, f, y) {
    return a.getText(
      a.getElementsByTagName(c, f, y, 1)
    ).trim();
  }
  function l(c, f, y, z, v) {
    var O = o(y, z, v);
    O && (c[f] = O);
  }
  var u = function(c) {
    return c === "rss" || c === "feed" || c === "rdf:RDF";
  };
  return t.prototype.onend = function() {
    var c = {}, f = r(u, this.dom), y, z;
    f && (f.name === "feed" ? (z = f.children, c.type = "atom", l(c, "id", "id", z), l(c, "title", "title", z), (y = r("link", z)) && (y = y.attribs) && (y = y.href) && (c.link = y), l(c, "description", "subtitle", z), (y = o("updated", z)) && (c.updated = new Date(y)), l(c, "author", "email", z, !0), c.items = n("entry", z).map(function(v) {
      var O = {}, I;
      return v = v.children, l(O, "id", "id", v), l(O, "title", "title", v), (I = r("link", v)) && (I = I.attribs) && (I = I.href) && (O.link = I), (I = o("summary", v) || o("content", v)) && (O.description = I), (I = o("updated", v)) && (O.pubDate = new Date(I)), O;
    })) : (z = r("channel", f.children).children, c.type = f.name.substr(0, 3), c.id = "", l(c, "title", "title", z), l(c, "link", "link", z), l(c, "description", "description", z), (y = o("lastBuildDate", z)) && (c.updated = new Date(y)), l(c, "author", "managingEditor", z, !0), c.items = n("item", f.children).map(function(v) {
      var O = {}, I;
      return v = v.children, l(O, "id", "guid", v), l(O, "title", "title", v), l(O, "link", "link", v), l(O, "description", "description", v), (I = o("pubDate", v)) && (O.pubDate = new Date(I)), O;
    }))), this.dom = c, e.prototype._handleCallback.call(
      this,
      f ? null : Error("couldn't find root of feed")
    );
  }, lv = t, lv;
}
const Hba = {}, Gba = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Hba
}, Symbol.toStringTag, { value: "Module" })), eN = /* @__PURE__ */ Nm(Gba);
var dv = {}, Lg = { exports: {} }, uv = {}, kO;
function aN() {
  return kO || (kO = 1, function(e) {
    Object.defineProperties(e, { __esModule: { value: !0 }, [Symbol.toStringTag]: { value: "Module" } });
    var a = {}, t = {};
    t.byteLength = y, t.toByteArray = v, t.fromByteArray = A;
    for (var n = [], r = [], o = typeof Uint8Array < "u" ? Uint8Array : Array, l = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", u = 0, c = l.length; u < c; ++u)
      n[u] = l[u], r[l.charCodeAt(u)] = u;
    r[45] = 62, r[95] = 63;
    function f(j) {
      var S = j.length;
      if (S % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var P = j.indexOf("=");
      P === -1 && (P = S);
      var M = P === S ? 0 : 4 - P % 4;
      return [P, M];
    }
    function y(j) {
      var S = f(j), P = S[0], M = S[1];
      return (P + M) * 3 / 4 - M;
    }
    function z(j, S, P) {
      return (S + P) * 3 / 4 - P;
    }
    function v(j) {
      var S, P = f(j), M = P[0], G = P[1], U = new o(z(j, M, G)), V = 0, F = G > 0 ? M - 4 : M, Y;
      for (Y = 0; Y < F; Y += 4)
        S = r[j.charCodeAt(Y)] << 18 | r[j.charCodeAt(Y + 1)] << 12 | r[j.charCodeAt(Y + 2)] << 6 | r[j.charCodeAt(Y + 3)], U[V++] = S >> 16 & 255, U[V++] = S >> 8 & 255, U[V++] = S & 255;
      return G === 2 && (S = r[j.charCodeAt(Y)] << 2 | r[j.charCodeAt(Y + 1)] >> 4, U[V++] = S & 255), G === 1 && (S = r[j.charCodeAt(Y)] << 10 | r[j.charCodeAt(Y + 1)] << 4 | r[j.charCodeAt(Y + 2)] >> 2, U[V++] = S >> 8 & 255, U[V++] = S & 255), U;
    }
    function O(j) {
      return n[j >> 18 & 63] + n[j >> 12 & 63] + n[j >> 6 & 63] + n[j & 63];
    }
    function I(j, S, P) {
      for (var M, G = [], U = S; U < P; U += 3)
        M = (j[U] << 16 & 16711680) + (j[U + 1] << 8 & 65280) + (j[U + 2] & 255), G.push(O(M));
      return G.join("");
    }
    function A(j) {
      for (var S, P = j.length, M = P % 3, G = [], U = 16383, V = 0, F = P - M; V < F; V += U)
        G.push(I(j, V, V + U > F ? F : V + U));
      return M === 1 ? (S = j[P - 1], G.push(
        n[S >> 2] + n[S << 4 & 63] + "=="
      )) : M === 2 && (S = (j[P - 2] << 8) + j[P - 1], G.push(
        n[S >> 10] + n[S >> 4 & 63] + n[S << 2 & 63] + "="
      )), G.join("");
    }
    var x = {};
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    x.read = function(j, S, P, M, G) {
      var U, V, F = G * 8 - M - 1, Y = (1 << F) - 1, X = Y >> 1, D = -7, de = P ? G - 1 : 0, ve = P ? -1 : 1, we = j[S + de];
      for (de += ve, U = we & (1 << -D) - 1, we >>= -D, D += F; D > 0; U = U * 256 + j[S + de], de += ve, D -= 8)
        ;
      for (V = U & (1 << -D) - 1, U >>= -D, D += M; D > 0; V = V * 256 + j[S + de], de += ve, D -= 8)
        ;
      if (U === 0)
        U = 1 - X;
      else {
        if (U === Y)
          return V ? NaN : (we ? -1 : 1) * (1 / 0);
        V = V + Math.pow(2, M), U = U - X;
      }
      return (we ? -1 : 1) * V * Math.pow(2, U - M);
    }, x.write = function(j, S, P, M, G, U) {
      var V, F, Y, X = U * 8 - G - 1, D = (1 << X) - 1, de = D >> 1, ve = G === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, we = M ? 0 : U - 1, Pe = M ? 1 : -1, me = S < 0 || S === 0 && 1 / S < 0 ? 1 : 0;
      for (S = Math.abs(S), isNaN(S) || S === 1 / 0 ? (F = isNaN(S) ? 1 : 0, V = D) : (V = Math.floor(Math.log(S) / Math.LN2), S * (Y = Math.pow(2, -V)) < 1 && (V--, Y *= 2), V + de >= 1 ? S += ve / Y : S += ve * Math.pow(2, 1 - de), S * Y >= 2 && (V++, Y /= 2), V + de >= D ? (F = 0, V = D) : V + de >= 1 ? (F = (S * Y - 1) * Math.pow(2, G), V = V + de) : (F = S * Math.pow(2, de - 1) * Math.pow(2, G), V = 0)); G >= 8; j[P + we] = F & 255, we += Pe, F /= 256, G -= 8)
        ;
      for (V = V << G | F, X += G; X > 0; j[P + we] = V & 255, we += Pe, V /= 256, X -= 8)
        ;
      j[P + we - Pe] |= me * 128;
    };
    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */
    (function(j) {
      const S = t, P = x, M = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
      j.Buffer = D, j.SlowBuffer = ia, j.INSPECT_MAX_BYTES = 50;
      const G = 2147483647;
      j.kMaxLength = G;
      const { Uint8Array: U, ArrayBuffer: V, SharedArrayBuffer: F } = globalThis;
      D.TYPED_ARRAY_SUPPORT = Y(), !D.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
      function Y() {
        try {
          const _ = new U(1), m = { foo: function() {
            return 42;
          } };
          return Object.setPrototypeOf(m, U.prototype), Object.setPrototypeOf(_, m), _.foo() === 42;
        } catch {
          return !1;
        }
      }
      Object.defineProperty(D.prototype, "parent", {
        enumerable: !0,
        get: function() {
          if (D.isBuffer(this))
            return this.buffer;
        }
      }), Object.defineProperty(D.prototype, "offset", {
        enumerable: !0,
        get: function() {
          if (D.isBuffer(this))
            return this.byteOffset;
        }
      });
      function X(_) {
        if (_ > G)
          throw new RangeError('The value "' + _ + '" is invalid for option "size"');
        const m = new U(_);
        return Object.setPrototypeOf(m, D.prototype), m;
      }
      function D(_, m, h) {
        if (typeof _ == "number") {
          if (typeof m == "string")
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          return Pe(_);
        }
        return de(_, m, h);
      }
      D.poolSize = 8192;
      function de(_, m, h) {
        if (typeof _ == "string")
          return me(_, m);
        if (V.isView(_))
          return Dn(_);
        if (_ == null)
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof _
          );
        if (Nn(_, V) || _ && Nn(_.buffer, V) || typeof F < "u" && (Nn(_, F) || _ && Nn(_.buffer, F)))
          return ze(_, m, h);
        if (typeof _ == "number")
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        const C = _.valueOf && _.valueOf();
        if (C != null && C !== _)
          return D.from(C, m, h);
        const B = Ae(_);
        if (B) return B;
        if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof _[Symbol.toPrimitive] == "function")
          return D.from(_[Symbol.toPrimitive]("string"), m, h);
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof _
        );
      }
      D.from = function(_, m, h) {
        return de(_, m, h);
      }, Object.setPrototypeOf(D.prototype, U.prototype), Object.setPrototypeOf(D, U);
      function ve(_) {
        if (typeof _ != "number")
          throw new TypeError('"size" argument must be of type number');
        if (_ < 0)
          throw new RangeError('The value "' + _ + '" is invalid for option "size"');
      }
      function we(_, m, h) {
        return ve(_), _ <= 0 ? X(_) : m !== void 0 ? typeof h == "string" ? X(_).fill(m, h) : X(_).fill(m) : X(_);
      }
      D.alloc = function(_, m, h) {
        return we(_, m, h);
      };
      function Pe(_) {
        return ve(_), X(_ < 0 ? 0 : he(_) | 0);
      }
      D.allocUnsafe = function(_) {
        return Pe(_);
      }, D.allocUnsafeSlow = function(_) {
        return Pe(_);
      };
      function me(_, m) {
        if ((typeof m != "string" || m === "") && (m = "utf8"), !D.isEncoding(m))
          throw new TypeError("Unknown encoding: " + m);
        const h = je(_, m) | 0;
        let C = X(h);
        const B = C.write(_, m);
        return B !== h && (C = C.slice(0, B)), C;
      }
      function ta(_) {
        const m = _.length < 0 ? 0 : he(_.length) | 0, h = X(m);
        for (let C = 0; C < m; C += 1)
          h[C] = _[C] & 255;
        return h;
      }
      function Dn(_) {
        if (Nn(_, U)) {
          const m = new U(_);
          return ze(m.buffer, m.byteOffset, m.byteLength);
        }
        return ta(_);
      }
      function ze(_, m, h) {
        if (m < 0 || _.byteLength < m)
          throw new RangeError('"offset" is outside of buffer bounds');
        if (_.byteLength < m + (h || 0))
          throw new RangeError('"length" is outside of buffer bounds');
        let C;
        return m === void 0 && h === void 0 ? C = new U(_) : h === void 0 ? C = new U(_, m) : C = new U(_, m, h), Object.setPrototypeOf(C, D.prototype), C;
      }
      function Ae(_) {
        if (D.isBuffer(_)) {
          const m = he(_.length) | 0, h = X(m);
          return h.length === 0 || _.copy(h, 0, 0, m), h;
        }
        if (_.length !== void 0)
          return typeof _.length != "number" || mu(_.length) ? X(0) : ta(_);
        if (_.type === "Buffer" && Array.isArray(_.data))
          return ta(_.data);
      }
      function he(_) {
        if (_ >= G)
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + G.toString(16) + " bytes");
        return _ | 0;
      }
      function ia(_) {
        return +_ != _ && (_ = 0), D.alloc(+_);
      }
      D.isBuffer = function(m) {
        return m != null && m._isBuffer === !0 && m !== D.prototype;
      }, D.compare = function(m, h) {
        if (Nn(m, U) && (m = D.from(m, m.offset, m.byteLength)), Nn(h, U) && (h = D.from(h, h.offset, h.byteLength)), !D.isBuffer(m) || !D.isBuffer(h))
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        if (m === h) return 0;
        let C = m.length, B = h.length;
        for (let Q = 0, re = Math.min(C, B); Q < re; ++Q)
          if (m[Q] !== h[Q]) {
            C = m[Q], B = h[Q];
            break;
          }
        return C < B ? -1 : B < C ? 1 : 0;
      }, D.isEncoding = function(m) {
        switch (String(m).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return !0;
          default:
            return !1;
        }
      }, D.concat = function(m, h) {
        if (!Array.isArray(m))
          throw new TypeError('"list" argument must be an Array of Buffers');
        if (m.length === 0)
          return D.alloc(0);
        let C;
        if (h === void 0)
          for (h = 0, C = 0; C < m.length; ++C)
            h += m[C].length;
        const B = D.allocUnsafe(h);
        let Q = 0;
        for (C = 0; C < m.length; ++C) {
          let re = m[C];
          if (Nn(re, U))
            Q + re.length > B.length ? (D.isBuffer(re) || (re = D.from(re)), re.copy(B, Q)) : U.prototype.set.call(
              B,
              re,
              Q
            );
          else if (D.isBuffer(re))
            re.copy(B, Q);
          else
            throw new TypeError('"list" argument must be an Array of Buffers');
          Q += re.length;
        }
        return B;
      };
      function je(_, m) {
        if (D.isBuffer(_))
          return _.length;
        if (V.isView(_) || Nn(_, V))
          return _.byteLength;
        if (typeof _ != "string")
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof _
          );
        const h = _.length, C = arguments.length > 2 && arguments[2] === !0;
        if (!C && h === 0) return 0;
        let B = !1;
        for (; ; )
          switch (m) {
            case "ascii":
            case "latin1":
            case "binary":
              return h;
            case "utf8":
            case "utf-8":
              return pu(_).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return h * 2;
            case "hex":
              return h >>> 1;
            case "base64":
              return gu(_).length;
            default:
              if (B)
                return C ? -1 : pu(_).length;
              m = ("" + m).toLowerCase(), B = !0;
          }
      }
      D.byteLength = je;
      function be(_, m, h) {
        let C = !1;
        if ((m === void 0 || m < 0) && (m = 0), m > this.length || ((h === void 0 || h > this.length) && (h = this.length), h <= 0) || (h >>>= 0, m >>>= 0, h <= m))
          return "";
        for (_ || (_ = "utf8"); ; )
          switch (_) {
            case "hex":
              return fo(this, m, h);
            case "utf8":
            case "utf-8":
              return $t(this, m, h);
            case "ascii":
              return Pp(this, m, h);
            case "latin1":
            case "binary":
              return Cb(this, m, h);
            case "base64":
              return za(this, m, h);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return vn(this, m, h);
            default:
              if (C) throw new TypeError("Unknown encoding: " + _);
              _ = (_ + "").toLowerCase(), C = !0;
          }
      }
      D.prototype._isBuffer = !0;
      function ke(_, m, h) {
        const C = _[m];
        _[m] = _[h], _[h] = C;
      }
      D.prototype.swap16 = function() {
        const m = this.length;
        if (m % 2 !== 0)
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        for (let h = 0; h < m; h += 2)
          ke(this, h, h + 1);
        return this;
      }, D.prototype.swap32 = function() {
        const m = this.length;
        if (m % 4 !== 0)
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        for (let h = 0; h < m; h += 4)
          ke(this, h, h + 3), ke(this, h + 1, h + 2);
        return this;
      }, D.prototype.swap64 = function() {
        const m = this.length;
        if (m % 8 !== 0)
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        for (let h = 0; h < m; h += 8)
          ke(this, h, h + 7), ke(this, h + 1, h + 6), ke(this, h + 2, h + 5), ke(this, h + 3, h + 4);
        return this;
      }, D.prototype.toString = function() {
        const m = this.length;
        return m === 0 ? "" : arguments.length === 0 ? $t(this, 0, m) : be.apply(this, arguments);
      }, D.prototype.toLocaleString = D.prototype.toString, D.prototype.equals = function(m) {
        if (!D.isBuffer(m)) throw new TypeError("Argument must be a Buffer");
        return this === m ? !0 : D.compare(this, m) === 0;
      }, D.prototype.inspect = function() {
        let m = "";
        const h = j.INSPECT_MAX_BYTES;
        return m = this.toString("hex", 0, h).replace(/(.{2})/g, "$1 ").trim(), this.length > h && (m += " ... "), "<Buffer " + m + ">";
      }, M && (D.prototype[M] = D.prototype.inspect), D.prototype.compare = function(m, h, C, B, Q) {
        if (Nn(m, U) && (m = D.from(m, m.offset, m.byteLength)), !D.isBuffer(m))
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof m
          );
        if (h === void 0 && (h = 0), C === void 0 && (C = m ? m.length : 0), B === void 0 && (B = 0), Q === void 0 && (Q = this.length), h < 0 || C > m.length || B < 0 || Q > this.length)
          throw new RangeError("out of range index");
        if (B >= Q && h >= C)
          return 0;
        if (B >= Q)
          return -1;
        if (h >= C)
          return 1;
        if (h >>>= 0, C >>>= 0, B >>>= 0, Q >>>= 0, this === m) return 0;
        let re = Q - B, Be = C - h;
        const xa = Math.min(re, Be), ka = this.slice(B, Q), Sa = m.slice(h, C);
        for (let ma = 0; ma < xa; ++ma)
          if (ka[ma] !== Sa[ma]) {
            re = ka[ma], Be = Sa[ma];
            break;
          }
        return re < Be ? -1 : Be < re ? 1 : 0;
      };
      function $e(_, m, h, C, B) {
        if (_.length === 0) return -1;
        if (typeof h == "string" ? (C = h, h = 0) : h > 2147483647 ? h = 2147483647 : h < -2147483648 && (h = -2147483648), h = +h, mu(h) && (h = B ? 0 : _.length - 1), h < 0 && (h = _.length + h), h >= _.length) {
          if (B) return -1;
          h = _.length - 1;
        } else if (h < 0)
          if (B) h = 0;
          else return -1;
        if (typeof m == "string" && (m = D.from(m, C)), D.isBuffer(m))
          return m.length === 0 ? -1 : De(_, m, h, C, B);
        if (typeof m == "number")
          return m = m & 255, typeof U.prototype.indexOf == "function" ? B ? U.prototype.indexOf.call(_, m, h) : U.prototype.lastIndexOf.call(_, m, h) : De(_, [m], h, C, B);
        throw new TypeError("val must be string, number or Buffer");
      }
      function De(_, m, h, C, B) {
        let Q = 1, re = _.length, Be = m.length;
        if (C !== void 0 && (C = String(C).toLowerCase(), C === "ucs2" || C === "ucs-2" || C === "utf16le" || C === "utf-16le")) {
          if (_.length < 2 || m.length < 2)
            return -1;
          Q = 2, re /= 2, Be /= 2, h /= 2;
        }
        function xa(Sa, ma) {
          return Q === 1 ? Sa[ma] : Sa.readUInt16BE(ma * Q);
        }
        let ka;
        if (B) {
          let Sa = -1;
          for (ka = h; ka < re; ka++)
            if (xa(_, ka) === xa(m, Sa === -1 ? 0 : ka - Sa)) {
              if (Sa === -1 && (Sa = ka), ka - Sa + 1 === Be) return Sa * Q;
            } else
              Sa !== -1 && (ka -= ka - Sa), Sa = -1;
        } else
          for (h + Be > re && (h = re - Be), ka = h; ka >= 0; ka--) {
            let Sa = !0;
            for (let ma = 0; ma < Be; ma++)
              if (xa(_, ka + ma) !== xa(m, ma)) {
                Sa = !1;
                break;
              }
            if (Sa) return ka;
          }
        return -1;
      }
      D.prototype.includes = function(m, h, C) {
        return this.indexOf(m, h, C) !== -1;
      }, D.prototype.indexOf = function(m, h, C) {
        return $e(this, m, h, C, !0);
      }, D.prototype.lastIndexOf = function(m, h, C) {
        return $e(this, m, h, C, !1);
      };
      function ga(_, m, h, C) {
        h = Number(h) || 0;
        const B = _.length - h;
        C ? (C = Number(C), C > B && (C = B)) : C = B;
        const Q = m.length;
        C > Q / 2 && (C = Q / 2);
        let re;
        for (re = 0; re < C; ++re) {
          const Be = parseInt(m.substr(re * 2, 2), 16);
          if (mu(Be)) return re;
          _[h + re] = Be;
        }
        return re;
      }
      function va(_, m, h, C) {
        return yo(pu(m, _.length - h), _, h, C);
      }
      function oa(_, m, h, C) {
        return yo(Pb(m), _, h, C);
      }
      function Wa(_, m, h, C) {
        return yo(gu(m), _, h, C);
      }
      function Da(_, m, h, C) {
        return yo(Rb(m, _.length - h), _, h, C);
      }
      D.prototype.write = function(m, h, C, B) {
        if (h === void 0)
          B = "utf8", C = this.length, h = 0;
        else if (C === void 0 && typeof h == "string")
          B = h, C = this.length, h = 0;
        else if (isFinite(h))
          h = h >>> 0, isFinite(C) ? (C = C >>> 0, B === void 0 && (B = "utf8")) : (B = C, C = void 0);
        else
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        const Q = this.length - h;
        if ((C === void 0 || C > Q) && (C = Q), m.length > 0 && (C < 0 || h < 0) || h > this.length)
          throw new RangeError("Attempt to write outside buffer bounds");
        B || (B = "utf8");
        let re = !1;
        for (; ; )
          switch (B) {
            case "hex":
              return ga(this, m, h, C);
            case "utf8":
            case "utf-8":
              return va(this, m, h, C);
            case "ascii":
            case "latin1":
            case "binary":
              return oa(this, m, h, C);
            case "base64":
              return Wa(this, m, h, C);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return Da(this, m, h, C);
            default:
              if (re) throw new TypeError("Unknown encoding: " + B);
              B = ("" + B).toLowerCase(), re = !0;
          }
      }, D.prototype.toJSON = function() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function za(_, m, h) {
        return m === 0 && h === _.length ? S.fromByteArray(_) : S.fromByteArray(_.slice(m, h));
      }
      function $t(_, m, h) {
        h = Math.min(_.length, h);
        const C = [];
        let B = m;
        for (; B < h; ) {
          const Q = _[B];
          let re = null, Be = Q > 239 ? 4 : Q > 223 ? 3 : Q > 191 ? 2 : 1;
          if (B + Be <= h) {
            let xa, ka, Sa, ma;
            switch (Be) {
              case 1:
                Q < 128 && (re = Q);
                break;
              case 2:
                xa = _[B + 1], (xa & 192) === 128 && (ma = (Q & 31) << 6 | xa & 63, ma > 127 && (re = ma));
                break;
              case 3:
                xa = _[B + 1], ka = _[B + 2], (xa & 192) === 128 && (ka & 192) === 128 && (ma = (Q & 15) << 12 | (xa & 63) << 6 | ka & 63, ma > 2047 && (ma < 55296 || ma > 57343) && (re = ma));
                break;
              case 4:
                xa = _[B + 1], ka = _[B + 2], Sa = _[B + 3], (xa & 192) === 128 && (ka & 192) === 128 && (Sa & 192) === 128 && (ma = (Q & 15) << 18 | (xa & 63) << 12 | (ka & 63) << 6 | Sa & 63, ma > 65535 && ma < 1114112 && (re = ma));
            }
          }
          re === null ? (re = 65533, Be = 1) : re > 65535 && (re -= 65536, C.push(re >>> 10 & 1023 | 55296), re = 56320 | re & 1023), C.push(re), B += Be;
        }
        return or(C);
      }
      const fi = 4096;
      function or(_) {
        const m = _.length;
        if (m <= fi)
          return String.fromCharCode.apply(String, _);
        let h = "", C = 0;
        for (; C < m; )
          h += String.fromCharCode.apply(
            String,
            _.slice(C, C += fi)
          );
        return h;
      }
      function Pp(_, m, h) {
        let C = "";
        h = Math.min(_.length, h);
        for (let B = m; B < h; ++B)
          C += String.fromCharCode(_[B] & 127);
        return C;
      }
      function Cb(_, m, h) {
        let C = "";
        h = Math.min(_.length, h);
        for (let B = m; B < h; ++B)
          C += String.fromCharCode(_[B]);
        return C;
      }
      function fo(_, m, h) {
        const C = _.length;
        (!m || m < 0) && (m = 0), (!h || h < 0 || h > C) && (h = C);
        let B = "";
        for (let Q = m; Q < h; ++Q)
          B += Db[_[Q]];
        return B;
      }
      function vn(_, m, h) {
        const C = _.slice(m, h);
        let B = "";
        for (let Q = 0; Q < C.length - 1; Q += 2)
          B += String.fromCharCode(C[Q] + C[Q + 1] * 256);
        return B;
      }
      D.prototype.slice = function(m, h) {
        const C = this.length;
        m = ~~m, h = h === void 0 ? C : ~~h, m < 0 ? (m += C, m < 0 && (m = 0)) : m > C && (m = C), h < 0 ? (h += C, h < 0 && (h = 0)) : h > C && (h = C), h < m && (h = m);
        const B = this.subarray(m, h);
        return Object.setPrototypeOf(B, D.prototype), B;
      };
      function ja(_, m, h) {
        if (_ % 1 !== 0 || _ < 0) throw new RangeError("offset is not uint");
        if (_ + m > h) throw new RangeError("Trying to access beyond buffer length");
      }
      D.prototype.readUintLE = D.prototype.readUIntLE = function(m, h, C) {
        m = m >>> 0, h = h >>> 0, C || ja(m, h, this.length);
        let B = this[m], Q = 1, re = 0;
        for (; ++re < h && (Q *= 256); )
          B += this[m + re] * Q;
        return B;
      }, D.prototype.readUintBE = D.prototype.readUIntBE = function(m, h, C) {
        m = m >>> 0, h = h >>> 0, C || ja(m, h, this.length);
        let B = this[m + --h], Q = 1;
        for (; h > 0 && (Q *= 256); )
          B += this[m + --h] * Q;
        return B;
      }, D.prototype.readUint8 = D.prototype.readUInt8 = function(m, h) {
        return m = m >>> 0, h || ja(m, 1, this.length), this[m];
      }, D.prototype.readUint16LE = D.prototype.readUInt16LE = function(m, h) {
        return m = m >>> 0, h || ja(m, 2, this.length), this[m] | this[m + 1] << 8;
      }, D.prototype.readUint16BE = D.prototype.readUInt16BE = function(m, h) {
        return m = m >>> 0, h || ja(m, 2, this.length), this[m] << 8 | this[m + 1];
      }, D.prototype.readUint32LE = D.prototype.readUInt32LE = function(m, h) {
        return m = m >>> 0, h || ja(m, 4, this.length), (this[m] | this[m + 1] << 8 | this[m + 2] << 16) + this[m + 3] * 16777216;
      }, D.prototype.readUint32BE = D.prototype.readUInt32BE = function(m, h) {
        return m = m >>> 0, h || ja(m, 4, this.length), this[m] * 16777216 + (this[m + 1] << 16 | this[m + 2] << 8 | this[m + 3]);
      }, D.prototype.readBigUInt64LE = Vr(function(m) {
        m = m >>> 0, Gr(m, "offset");
        const h = this[m], C = this[m + 7];
        (h === void 0 || C === void 0) && Os(m, this.length - 8);
        const B = h + this[++m] * 2 ** 8 + this[++m] * 2 ** 16 + this[++m] * 2 ** 24, Q = this[++m] + this[++m] * 2 ** 8 + this[++m] * 2 ** 16 + C * 2 ** 24;
        return BigInt(B) + (BigInt(Q) << BigInt(32));
      }), D.prototype.readBigUInt64BE = Vr(function(m) {
        m = m >>> 0, Gr(m, "offset");
        const h = this[m], C = this[m + 7];
        (h === void 0 || C === void 0) && Os(m, this.length - 8);
        const B = h * 2 ** 24 + this[++m] * 2 ** 16 + this[++m] * 2 ** 8 + this[++m], Q = this[++m] * 2 ** 24 + this[++m] * 2 ** 16 + this[++m] * 2 ** 8 + C;
        return (BigInt(B) << BigInt(32)) + BigInt(Q);
      }), D.prototype.readIntLE = function(m, h, C) {
        m = m >>> 0, h = h >>> 0, C || ja(m, h, this.length);
        let B = this[m], Q = 1, re = 0;
        for (; ++re < h && (Q *= 256); )
          B += this[m + re] * Q;
        return Q *= 128, B >= Q && (B -= Math.pow(2, 8 * h)), B;
      }, D.prototype.readIntBE = function(m, h, C) {
        m = m >>> 0, h = h >>> 0, C || ja(m, h, this.length);
        let B = h, Q = 1, re = this[m + --B];
        for (; B > 0 && (Q *= 256); )
          re += this[m + --B] * Q;
        return Q *= 128, re >= Q && (re -= Math.pow(2, 8 * h)), re;
      }, D.prototype.readInt8 = function(m, h) {
        return m = m >>> 0, h || ja(m, 1, this.length), this[m] & 128 ? (255 - this[m] + 1) * -1 : this[m];
      }, D.prototype.readInt16LE = function(m, h) {
        m = m >>> 0, h || ja(m, 2, this.length);
        const C = this[m] | this[m + 1] << 8;
        return C & 32768 ? C | 4294901760 : C;
      }, D.prototype.readInt16BE = function(m, h) {
        m = m >>> 0, h || ja(m, 2, this.length);
        const C = this[m + 1] | this[m] << 8;
        return C & 32768 ? C | 4294901760 : C;
      }, D.prototype.readInt32LE = function(m, h) {
        return m = m >>> 0, h || ja(m, 4, this.length), this[m] | this[m + 1] << 8 | this[m + 2] << 16 | this[m + 3] << 24;
      }, D.prototype.readInt32BE = function(m, h) {
        return m = m >>> 0, h || ja(m, 4, this.length), this[m] << 24 | this[m + 1] << 16 | this[m + 2] << 8 | this[m + 3];
      }, D.prototype.readBigInt64LE = Vr(function(m) {
        m = m >>> 0, Gr(m, "offset");
        const h = this[m], C = this[m + 7];
        (h === void 0 || C === void 0) && Os(m, this.length - 8);
        const B = this[m + 4] + this[m + 5] * 2 ** 8 + this[m + 6] * 2 ** 16 + (C << 24);
        return (BigInt(B) << BigInt(32)) + BigInt(h + this[++m] * 2 ** 8 + this[++m] * 2 ** 16 + this[++m] * 2 ** 24);
      }), D.prototype.readBigInt64BE = Vr(function(m) {
        m = m >>> 0, Gr(m, "offset");
        const h = this[m], C = this[m + 7];
        (h === void 0 || C === void 0) && Os(m, this.length - 8);
        const B = (h << 24) + // Overflow
        this[++m] * 2 ** 16 + this[++m] * 2 ** 8 + this[++m];
        return (BigInt(B) << BigInt(32)) + BigInt(this[++m] * 2 ** 24 + this[++m] * 2 ** 16 + this[++m] * 2 ** 8 + C);
      }), D.prototype.readFloatLE = function(m, h) {
        return m = m >>> 0, h || ja(m, 4, this.length), P.read(this, m, !0, 23, 4);
      }, D.prototype.readFloatBE = function(m, h) {
        return m = m >>> 0, h || ja(m, 4, this.length), P.read(this, m, !1, 23, 4);
      }, D.prototype.readDoubleLE = function(m, h) {
        return m = m >>> 0, h || ja(m, 8, this.length), P.read(this, m, !0, 52, 8);
      }, D.prototype.readDoubleBE = function(m, h) {
        return m = m >>> 0, h || ja(m, 8, this.length), P.read(this, m, !1, 52, 8);
      };
      function Xa(_, m, h, C, B, Q) {
        if (!D.isBuffer(_)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (m > B || m < Q) throw new RangeError('"value" argument is out of bounds');
        if (h + C > _.length) throw new RangeError("Index out of range");
      }
      D.prototype.writeUintLE = D.prototype.writeUIntLE = function(m, h, C, B) {
        if (m = +m, h = h >>> 0, C = C >>> 0, !B) {
          const Be = Math.pow(2, 8 * C) - 1;
          Xa(this, m, h, C, Be, 0);
        }
        let Q = 1, re = 0;
        for (this[h] = m & 255; ++re < C && (Q *= 256); )
          this[h + re] = m / Q & 255;
        return h + C;
      }, D.prototype.writeUintBE = D.prototype.writeUIntBE = function(m, h, C, B) {
        if (m = +m, h = h >>> 0, C = C >>> 0, !B) {
          const Be = Math.pow(2, 8 * C) - 1;
          Xa(this, m, h, C, Be, 0);
        }
        let Q = C - 1, re = 1;
        for (this[h + Q] = m & 255; --Q >= 0 && (re *= 256); )
          this[h + Q] = m / re & 255;
        return h + C;
      }, D.prototype.writeUint8 = D.prototype.writeUInt8 = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 1, 255, 0), this[h] = m & 255, h + 1;
      }, D.prototype.writeUint16LE = D.prototype.writeUInt16LE = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 2, 65535, 0), this[h] = m & 255, this[h + 1] = m >>> 8, h + 2;
      }, D.prototype.writeUint16BE = D.prototype.writeUInt16BE = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 2, 65535, 0), this[h] = m >>> 8, this[h + 1] = m & 255, h + 2;
      }, D.prototype.writeUint32LE = D.prototype.writeUInt32LE = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 4, 4294967295, 0), this[h + 3] = m >>> 24, this[h + 2] = m >>> 16, this[h + 1] = m >>> 8, this[h] = m & 255, h + 4;
      }, D.prototype.writeUint32BE = D.prototype.writeUInt32BE = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 4, 4294967295, 0), this[h] = m >>> 24, this[h + 1] = m >>> 16, this[h + 2] = m >>> 8, this[h + 3] = m & 255, h + 4;
      };
      function Rp(_, m, h, C, B) {
        kl(m, C, B, _, h, 7);
        let Q = Number(m & BigInt(4294967295));
        _[h++] = Q, Q = Q >> 8, _[h++] = Q, Q = Q >> 8, _[h++] = Q, Q = Q >> 8, _[h++] = Q;
        let re = Number(m >> BigInt(32) & BigInt(4294967295));
        return _[h++] = re, re = re >> 8, _[h++] = re, re = re >> 8, _[h++] = re, re = re >> 8, _[h++] = re, h;
      }
      function hi(_, m, h, C, B) {
        kl(m, C, B, _, h, 7);
        let Q = Number(m & BigInt(4294967295));
        _[h + 7] = Q, Q = Q >> 8, _[h + 6] = Q, Q = Q >> 8, _[h + 5] = Q, Q = Q >> 8, _[h + 4] = Q;
        let re = Number(m >> BigInt(32) & BigInt(4294967295));
        return _[h + 3] = re, re = re >> 8, _[h + 2] = re, re = re >> 8, _[h + 1] = re, re = re >> 8, _[h] = re, h + 8;
      }
      D.prototype.writeBigUInt64LE = Vr(function(m, h = 0) {
        return Rp(this, m, h, BigInt(0), BigInt("0xffffffffffffffff"));
      }), D.prototype.writeBigUInt64BE = Vr(function(m, h = 0) {
        return hi(this, m, h, BigInt(0), BigInt("0xffffffffffffffff"));
      }), D.prototype.writeIntLE = function(m, h, C, B) {
        if (m = +m, h = h >>> 0, !B) {
          const xa = Math.pow(2, 8 * C - 1);
          Xa(this, m, h, C, xa - 1, -xa);
        }
        let Q = 0, re = 1, Be = 0;
        for (this[h] = m & 255; ++Q < C && (re *= 256); )
          m < 0 && Be === 0 && this[h + Q - 1] !== 0 && (Be = 1), this[h + Q] = (m / re >> 0) - Be & 255;
        return h + C;
      }, D.prototype.writeIntBE = function(m, h, C, B) {
        if (m = +m, h = h >>> 0, !B) {
          const xa = Math.pow(2, 8 * C - 1);
          Xa(this, m, h, C, xa - 1, -xa);
        }
        let Q = C - 1, re = 1, Be = 0;
        for (this[h + Q] = m & 255; --Q >= 0 && (re *= 256); )
          m < 0 && Be === 0 && this[h + Q + 1] !== 0 && (Be = 1), this[h + Q] = (m / re >> 0) - Be & 255;
        return h + C;
      }, D.prototype.writeInt8 = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 1, 127, -128), m < 0 && (m = 255 + m + 1), this[h] = m & 255, h + 1;
      }, D.prototype.writeInt16LE = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 2, 32767, -32768), this[h] = m & 255, this[h + 1] = m >>> 8, h + 2;
      }, D.prototype.writeInt16BE = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 2, 32767, -32768), this[h] = m >>> 8, this[h + 1] = m & 255, h + 2;
      }, D.prototype.writeInt32LE = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 4, 2147483647, -2147483648), this[h] = m & 255, this[h + 1] = m >>> 8, this[h + 2] = m >>> 16, this[h + 3] = m >>> 24, h + 4;
      }, D.prototype.writeInt32BE = function(m, h, C) {
        return m = +m, h = h >>> 0, C || Xa(this, m, h, 4, 2147483647, -2147483648), m < 0 && (m = 4294967295 + m + 1), this[h] = m >>> 24, this[h + 1] = m >>> 16, this[h + 2] = m >>> 8, this[h + 3] = m & 255, h + 4;
      }, D.prototype.writeBigInt64LE = Vr(function(m, h = 0) {
        return Rp(this, m, h, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      }), D.prototype.writeBigInt64BE = Vr(function(m, h = 0) {
        return hi(this, m, h, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function Dp(_, m, h, C, B, Q) {
        if (h + C > _.length) throw new RangeError("Index out of range");
        if (h < 0) throw new RangeError("Index out of range");
      }
      function yi(_, m, h, C, B) {
        return m = +m, h = h >>> 0, B || Dp(_, m, h, 4), P.write(_, m, h, C, 23, 4), h + 4;
      }
      D.prototype.writeFloatLE = function(m, h, C) {
        return yi(this, m, h, !0, C);
      }, D.prototype.writeFloatBE = function(m, h, C) {
        return yi(this, m, h, !1, C);
      };
      function Ss(_, m, h, C, B) {
        return m = +m, h = h >>> 0, B || Dp(_, m, h, 8), P.write(_, m, h, C, 52, 8), h + 8;
      }
      D.prototype.writeDoubleLE = function(m, h, C) {
        return Ss(this, m, h, !0, C);
      }, D.prototype.writeDoubleBE = function(m, h, C) {
        return Ss(this, m, h, !1, C);
      }, D.prototype.copy = function(m, h, C, B) {
        if (!D.isBuffer(m)) throw new TypeError("argument should be a Buffer");
        if (C || (C = 0), !B && B !== 0 && (B = this.length), h >= m.length && (h = m.length), h || (h = 0), B > 0 && B < C && (B = C), B === C || m.length === 0 || this.length === 0) return 0;
        if (h < 0)
          throw new RangeError("targetStart out of bounds");
        if (C < 0 || C >= this.length) throw new RangeError("Index out of range");
        if (B < 0) throw new RangeError("sourceEnd out of bounds");
        B > this.length && (B = this.length), m.length - h < B - C && (B = m.length - h + C);
        const Q = B - C;
        return this === m && typeof U.prototype.copyWithin == "function" ? this.copyWithin(h, C, B) : U.prototype.set.call(
          m,
          this.subarray(C, B),
          h
        ), Q;
      }, D.prototype.fill = function(m, h, C, B) {
        if (typeof m == "string") {
          if (typeof h == "string" ? (B = h, h = 0, C = this.length) : typeof C == "string" && (B = C, C = this.length), B !== void 0 && typeof B != "string")
            throw new TypeError("encoding must be a string");
          if (typeof B == "string" && !D.isEncoding(B))
            throw new TypeError("Unknown encoding: " + B);
          if (m.length === 1) {
            const re = m.charCodeAt(0);
            (B === "utf8" && re < 128 || B === "latin1") && (m = re);
          }
        } else typeof m == "number" ? m = m & 255 : typeof m == "boolean" && (m = Number(m));
        if (h < 0 || this.length < h || this.length < C)
          throw new RangeError("Out of range index");
        if (C <= h)
          return this;
        h = h >>> 0, C = C === void 0 ? this.length : C >>> 0, m || (m = 0);
        let Q;
        if (typeof m == "number")
          for (Q = h; Q < C; ++Q)
            this[Q] = m;
        else {
          const re = D.isBuffer(m) ? m : D.from(m, B), Be = re.length;
          if (Be === 0)
            throw new TypeError('The value "' + m + '" is invalid for argument "value"');
          for (Q = 0; Q < C - h; ++Q)
            this[Q + h] = re[Q % Be];
        }
        return this;
      };
      const Hr = {};
      function ho(_, m, h) {
        Hr[_] = class extends h {
          constructor() {
            super(), Object.defineProperty(this, "message", {
              value: m.apply(this, arguments),
              writable: !0,
              configurable: !0
            }), this.name = `${this.name} [${_}]`, this.stack, delete this.name;
          }
          get code() {
            return _;
          }
          set code(B) {
            Object.defineProperty(this, "code", {
              configurable: !0,
              enumerable: !0,
              value: B,
              writable: !0
            });
          }
          toString() {
            return `${this.name} [${_}]: ${this.message}`;
          }
        };
      }
      ho(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(_) {
          return _ ? `${_} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
        },
        RangeError
      ), ho(
        "ERR_INVALID_ARG_TYPE",
        function(_, m) {
          return `The "${_}" argument must be of type number. Received type ${typeof m}`;
        },
        TypeError
      ), ho(
        "ERR_OUT_OF_RANGE",
        function(_, m, h) {
          let C = `The value of "${_}" is out of range.`, B = h;
          return Number.isInteger(h) && Math.abs(h) > 2 ** 32 ? B = vl(String(h)) : typeof h == "bigint" && (B = String(h), (h > BigInt(2) ** BigInt(32) || h < -(BigInt(2) ** BigInt(32))) && (B = vl(B)), B += "n"), C += ` It must be ${m}. Received ${B}`, C;
        },
        RangeError
      );
      function vl(_) {
        let m = "", h = _.length;
        const C = _[0] === "-" ? 1 : 0;
        for (; h >= C + 4; h -= 3)
          m = `_${_.slice(h - 3, h)}${m}`;
        return `${_.slice(0, h)}${m}`;
      }
      function du(_, m, h) {
        Gr(m, "offset"), (_[m] === void 0 || _[m + h] === void 0) && Os(m, _.length - (h + 1));
      }
      function kl(_, m, h, C, B, Q) {
        if (_ > h || _ < m) {
          const re = typeof m == "bigint" ? "n" : "";
          let Be;
          throw m === 0 || m === BigInt(0) ? Be = `>= 0${re} and < 2${re} ** ${(Q + 1) * 8}${re}` : Be = `>= -(2${re} ** ${(Q + 1) * 8 - 1}${re}) and < 2 ** ${(Q + 1) * 8 - 1}${re}`, new Hr.ERR_OUT_OF_RANGE("value", Be, _);
        }
        du(C, B, Q);
      }
      function Gr(_, m) {
        if (typeof _ != "number")
          throw new Hr.ERR_INVALID_ARG_TYPE(m, "number", _);
      }
      function Os(_, m, h) {
        throw Math.floor(_) !== _ ? (Gr(_, h), new Hr.ERR_OUT_OF_RANGE("offset", "an integer", _)) : m < 0 ? new Hr.ERR_BUFFER_OUT_OF_BOUNDS() : new Hr.ERR_OUT_OF_RANGE(
          "offset",
          `>= 0 and <= ${m}`,
          _
        );
      }
      const uu = /[^+/0-9A-Za-z-_]/g;
      function cu(_) {
        if (_ = _.split("=")[0], _ = _.trim().replace(uu, ""), _.length < 2) return "";
        for (; _.length % 4 !== 0; )
          _ = _ + "=";
        return _;
      }
      function pu(_, m) {
        m = m || 1 / 0;
        let h;
        const C = _.length;
        let B = null;
        const Q = [];
        for (let re = 0; re < C; ++re) {
          if (h = _.charCodeAt(re), h > 55295 && h < 57344) {
            if (!B) {
              if (h > 56319) {
                (m -= 3) > -1 && Q.push(239, 191, 189);
                continue;
              } else if (re + 1 === C) {
                (m -= 3) > -1 && Q.push(239, 191, 189);
                continue;
              }
              B = h;
              continue;
            }
            if (h < 56320) {
              (m -= 3) > -1 && Q.push(239, 191, 189), B = h;
              continue;
            }
            h = (B - 55296 << 10 | h - 56320) + 65536;
          } else B && (m -= 3) > -1 && Q.push(239, 191, 189);
          if (B = null, h < 128) {
            if ((m -= 1) < 0) break;
            Q.push(h);
          } else if (h < 2048) {
            if ((m -= 2) < 0) break;
            Q.push(
              h >> 6 | 192,
              h & 63 | 128
            );
          } else if (h < 65536) {
            if ((m -= 3) < 0) break;
            Q.push(
              h >> 12 | 224,
              h >> 6 & 63 | 128,
              h & 63 | 128
            );
          } else if (h < 1114112) {
            if ((m -= 4) < 0) break;
            Q.push(
              h >> 18 | 240,
              h >> 12 & 63 | 128,
              h >> 6 & 63 | 128,
              h & 63 | 128
            );
          } else
            throw new Error("Invalid code point");
        }
        return Q;
      }
      function Pb(_) {
        const m = [];
        for (let h = 0; h < _.length; ++h)
          m.push(_.charCodeAt(h) & 255);
        return m;
      }
      function Rb(_, m) {
        let h, C, B;
        const Q = [];
        for (let re = 0; re < _.length && !((m -= 2) < 0); ++re)
          h = _.charCodeAt(re), C = h >> 8, B = h % 256, Q.push(B), Q.push(C);
        return Q;
      }
      function gu(_) {
        return S.toByteArray(cu(_));
      }
      function yo(_, m, h, C) {
        let B;
        for (B = 0; B < C && !(B + h >= m.length || B >= _.length); ++B)
          m[B + h] = _[B];
        return B;
      }
      function Nn(_, m) {
        return _ instanceof m || _ != null && _.constructor != null && _.constructor.name != null && _.constructor.name === m.name;
      }
      function mu(_) {
        return _ !== _;
      }
      const Db = function() {
        const _ = "0123456789abcdef", m = new Array(256);
        for (let h = 0; h < 16; ++h) {
          const C = h * 16;
          for (let B = 0; B < 16; ++B)
            m[C + B] = _[h] + _[B];
        }
        return m;
      }();
      function Vr(_) {
        return typeof BigInt > "u" ? Np : _;
      }
      function Np() {
        throw new Error("BigInt not supported");
      }
    })(a);
    const w = a.Buffer;
    e.Blob = a.Blob, e.BlobOptions = a.BlobOptions, e.Buffer = a.Buffer, e.File = a.File, e.FileOptions = a.FileOptions, e.INSPECT_MAX_BYTES = a.INSPECT_MAX_BYTES, e.SlowBuffer = a.SlowBuffer, e.TranscodeEncoding = a.TranscodeEncoding, e.atob = a.atob, e.btoa = a.btoa, e.constants = a.constants, e.default = w, e.isAscii = a.isAscii, e.isUtf8 = a.isUtf8, e.kMaxLength = a.kMaxLength, e.kStringMaxLength = a.kStringMaxLength, e.resolveObjectURL = a.resolveObjectURL, e.transcode = a.transcode;
  }(uv)), uv;
}
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var _O;
function Vba() {
  return _O || (_O = 1, function(e, a) {
    var t = aN(), n = t.Buffer;
    function r(l, u) {
      for (var c in l)
        u[c] = l[c];
    }
    n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow ? e.exports = t : (r(t, a), a.Buffer = o);
    function o(l, u, c) {
      return n(l, u, c);
    }
    o.prototype = Object.create(n.prototype), r(n, o), o.from = function(l, u, c) {
      if (typeof l == "number")
        throw new TypeError("Argument must not be a number");
      return n(l, u, c);
    }, o.alloc = function(l, u, c) {
      if (typeof l != "number")
        throw new TypeError("Argument must be a number");
      var f = n(l);
      return u !== void 0 ? typeof c == "string" ? f.fill(u, c) : f.fill(u) : f.fill(0), f;
    }, o.allocUnsafe = function(l) {
      if (typeof l != "number")
        throw new TypeError("Argument must be a number");
      return n(l);
    }, o.allocUnsafeSlow = function(l) {
      if (typeof l != "number")
        throw new TypeError("Argument must be a number");
      return t.SlowBuffer(l);
    };
  }(Lg, Lg.exports)), Lg.exports;
}
var EO;
function Kba() {
  if (EO) return dv;
  EO = 1;
  var e = Vba().Buffer, a = e.isEncoding || function(w) {
    switch (w = "" + w, w && w.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return !0;
      default:
        return !1;
    }
  };
  function t(w) {
    if (!w) return "utf8";
    for (var j; ; )
      switch (w) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return w;
        default:
          if (j) return;
          w = ("" + w).toLowerCase(), j = !0;
      }
  }
  function n(w) {
    var j = t(w);
    if (typeof j != "string" && (e.isEncoding === a || !a(w))) throw new Error("Unknown encoding: " + w);
    return j || w;
  }
  dv.StringDecoder = r;
  function r(w) {
    this.encoding = n(w);
    var j;
    switch (this.encoding) {
      case "utf16le":
        this.text = z, this.end = v, j = 4;
        break;
      case "utf8":
        this.fillLast = c, j = 4;
        break;
      case "base64":
        this.text = O, this.end = I, j = 3;
        break;
      default:
        this.write = A, this.end = x;
        return;
    }
    this.lastNeed = 0, this.lastTotal = 0, this.lastChar = e.allocUnsafe(j);
  }
  r.prototype.write = function(w) {
    if (w.length === 0) return "";
    var j, S;
    if (this.lastNeed) {
      if (j = this.fillLast(w), j === void 0) return "";
      S = this.lastNeed, this.lastNeed = 0;
    } else
      S = 0;
    return S < w.length ? j ? j + this.text(w, S) : this.text(w, S) : j || "";
  }, r.prototype.end = y, r.prototype.text = f, r.prototype.fillLast = function(w) {
    if (this.lastNeed <= w.length)
      return w.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    w.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, w.length), this.lastNeed -= w.length;
  };
  function o(w) {
    return w <= 127 ? 0 : w >> 5 === 6 ? 2 : w >> 4 === 14 ? 3 : w >> 3 === 30 ? 4 : w >> 6 === 2 ? -1 : -2;
  }
  function l(w, j, S) {
    var P = j.length - 1;
    if (P < S) return 0;
    var M = o(j[P]);
    return M >= 0 ? (M > 0 && (w.lastNeed = M - 1), M) : --P < S || M === -2 ? 0 : (M = o(j[P]), M >= 0 ? (M > 0 && (w.lastNeed = M - 2), M) : --P < S || M === -2 ? 0 : (M = o(j[P]), M >= 0 ? (M > 0 && (M === 2 ? M = 0 : w.lastNeed = M - 3), M) : 0));
  }
  function u(w, j, S) {
    if ((j[0] & 192) !== 128)
      return w.lastNeed = 0, "�";
    if (w.lastNeed > 1 && j.length > 1) {
      if ((j[1] & 192) !== 128)
        return w.lastNeed = 1, "�";
      if (w.lastNeed > 2 && j.length > 2 && (j[2] & 192) !== 128)
        return w.lastNeed = 2, "�";
    }
  }
  function c(w) {
    var j = this.lastTotal - this.lastNeed, S = u(this, w);
    if (S !== void 0) return S;
    if (this.lastNeed <= w.length)
      return w.copy(this.lastChar, j, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    w.copy(this.lastChar, j, 0, w.length), this.lastNeed -= w.length;
  }
  function f(w, j) {
    var S = l(this, w, j);
    if (!this.lastNeed) return w.toString("utf8", j);
    this.lastTotal = S;
    var P = w.length - (S - this.lastNeed);
    return w.copy(this.lastChar, 0, P), w.toString("utf8", j, P);
  }
  function y(w) {
    var j = w && w.length ? this.write(w) : "";
    return this.lastNeed ? j + "�" : j;
  }
  function z(w, j) {
    if ((w.length - j) % 2 === 0) {
      var S = w.toString("utf16le", j);
      if (S) {
        var P = S.charCodeAt(S.length - 1);
        if (P >= 55296 && P <= 56319)
          return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = w[w.length - 2], this.lastChar[1] = w[w.length - 1], S.slice(0, -1);
      }
      return S;
    }
    return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = w[w.length - 1], w.toString("utf16le", j, w.length - 1);
  }
  function v(w) {
    var j = w && w.length ? this.write(w) : "";
    if (this.lastNeed) {
      var S = this.lastTotal - this.lastNeed;
      return j + this.lastChar.toString("utf16le", 0, S);
    }
    return j;
  }
  function O(w, j) {
    var S = (w.length - j) % 3;
    return S === 0 ? w.toString("base64", j) : (this.lastNeed = 3 - S, this.lastTotal = 3, S === 1 ? this.lastChar[0] = w[w.length - 1] : (this.lastChar[0] = w[w.length - 2], this.lastChar[1] = w[w.length - 1]), w.toString("base64", j, w.length - S));
  }
  function I(w) {
    var j = w && w.length ? this.write(w) : "";
    return this.lastNeed ? j + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : j;
  }
  function A(w) {
    return w.toString(this.encoding);
  }
  function x(w) {
    return w && w.length ? this.write(w) : "";
  }
  return dv;
}
var cv, AO;
function tN() {
  if (AO) return cv;
  AO = 1, cv = r;
  var e = GD, a = eN.Writable, t = Kba().StringDecoder, n = aN().Buffer;
  function r(o, l) {
    var u = this._parser = new e(o, l), c = this._decoder = new t();
    a.call(this, { decodeStrings: !1 }), this.once("finish", function() {
      u.end(c.end());
    });
  }
  return mf(r, a), r.prototype._write = function(o, l, u) {
    o instanceof n && (o = this._decoder.write(o)), this._parser.write(o), u();
  }, cv;
}
var pv, TO;
function Yba() {
  if (TO) return pv;
  TO = 1, pv = a;
  var e = tN();
  function a(r) {
    e.call(this, new t(this), r);
  }
  mf(a, e), a.prototype.readable = !0;
  function t(r) {
    this.scope = r;
  }
  var n = $c().EVENTS;
  return Object.keys(n).forEach(function(r) {
    if (n[r] === 0)
      t.prototype["on" + r] = function() {
        this.scope.emit(r);
      };
    else if (n[r] === 1)
      t.prototype["on" + r] = function(o) {
        this.scope.emit(r, o);
      };
    else if (n[r] === 2)
      t.prototype["on" + r] = function(o, l) {
        this.scope.emit(r, o, l);
      };
    else
      throw Error("wrong number of arguments!");
  }), pv;
}
var gv, $O;
function Qba() {
  if ($O) return gv;
  $O = 1, gv = e;
  function e(t) {
    this._cbs = t || {};
  }
  var a = $c().EVENTS;
  return Object.keys(a).forEach(function(t) {
    if (a[t] === 0)
      t = "on" + t, e.prototype[t] = function() {
        this._cbs[t] && this._cbs[t]();
      };
    else if (a[t] === 1)
      t = "on" + t, e.prototype[t] = function(n) {
        this._cbs[t] && this._cbs[t](n);
      };
    else if (a[t] === 2)
      t = "on" + t, e.prototype[t] = function(n, r) {
        this._cbs[t] && this._cbs[t](n, r);
      };
    else
      throw Error("wrong number of arguments");
  }), gv;
}
var mv, jO;
function Xba() {
  if (jO) return mv;
  jO = 1, mv = e;
  function e(t) {
    this._cbs = t || {}, this.events = [];
  }
  var a = $c().EVENTS;
  return Object.keys(a).forEach(function(t) {
    if (a[t] === 0)
      t = "on" + t, e.prototype[t] = function() {
        this.events.push([t]), this._cbs[t] && this._cbs[t]();
      };
    else if (a[t] === 1)
      t = "on" + t, e.prototype[t] = function(n) {
        this.events.push([t, n]), this._cbs[t] && this._cbs[t](n);
      };
    else if (a[t] === 2)
      t = "on" + t, e.prototype[t] = function(n, r) {
        this.events.push([t, n, r]), this._cbs[t] && this._cbs[t](n, r);
      };
    else
      throw Error("wrong number of arguments");
  }), e.prototype.onreset = function() {
    this.events = [], this._cbs.onreset && this._cbs.onreset();
  }, e.prototype.restart = function() {
    this._cbs.onreset && this._cbs.onreset();
    for (var t = 0, n = this.events.length; t < n; t++)
      if (this._cbs[this.events[t][0]]) {
        var r = this.events[t].length;
        r === 1 ? this._cbs[this.events[t][0]]() : r === 2 ? this._cbs[this.events[t][0]](this.events[t][1]) : this._cbs[this.events[t][0]](
          this.events[t][1],
          this.events[t][2]
        );
      }
  }, mv;
}
var xO;
function $c() {
  return xO || (xO = 1, function(e) {
    var a = GD, t = QD;
    function n(r, o) {
      return delete e.exports[r], e.exports[r] = o, o;
    }
    e.exports = {
      Parser: a,
      Tokenizer: J3,
      ElementType: Tc,
      DomHandler: t,
      get FeedHandler() {
        return n("FeedHandler", Uba());
      },
      get Stream() {
        return n("Stream", Yba());
      },
      get WritableStream() {
        return n("WritableStream", tN());
      },
      get ProxyHandler() {
        return n("ProxyHandler", Qba());
      },
      get DomUtils() {
        return n("DomUtils", JD());
      },
      get CollectingHandler() {
        return n(
          "CollectingHandler",
          Xba()
        );
      },
      // For legacy support
      DefaultHandler: t,
      get RssHandler() {
        return n("RssHandler", this.FeedHandler);
      },
      //helper methods
      parseDOM: function(r, o) {
        var l = new t(o);
        return new a(l, o).end(r), l.dom;
      },
      parseFeed: function(r, o) {
        var l = new e.exports.FeedHandler(o);
        return new a(l, o).end(r), l.dom;
      },
      createDomStream: function(r, o, l) {
        var u = new t(r, o, l);
        return new a(u, o);
      },
      // List of all events that the parser emits
      EVENTS: {
        /* Format: eventname: number of arguments */
        attribute: 2,
        cdatastart: 0,
        cdataend: 0,
        text: 1,
        processinginstruction: 2,
        comment: 1,
        commentend: 0,
        closetag: 1,
        opentag: 2,
        opentagname: 1,
        error: 1,
        end: 0
      }
    };
  }(ev)), ev.exports;
}
Object.defineProperty(Jt, "__esModule", {
  value: !0
});
Jt.default = twa;
var Zba = Jba($c());
function Jba(e) {
  return e && e.__esModule ? e : { default: e };
}
let Ju = [], Yl = !1, Po = [];
const ewa = ["script", "style", "code", "pre", "blockquote", "textarea"], awa = ["yoast-table-of-contents", "yoast-reading-time__wrapper", "elementor-button-wrapper", "elementor-divider", "elementor-spacer", "elementor-custom-embed", "elementor-icon-wrapper", "elementor-icon-box-wrapper", "elementor-counter", "elementor-progress-wrapper", "elementor-alert", "elementor-soundcloud-wrapper", "elementor-shortcode", "elementor-menu-anchor", "elementor-title"], SO = new Zba.default.Parser({
  /**
   * Handles the opening tag.
   * If we are in an ignorable block, disregard the tag.
   * If the opening tag is included in the `IGNORED_TAGS` array, or the class is in the `IGNORED_CLASSES` array,
   * set `inIgnorableBlock` to true and add the tag to the `ignoreStack`.
   * Otherwise, push the tag to the `textArray`.
   *
   * @param {string} tagName The tag name.
   * @param {object} nodeValue The attribute with the keys and values of the tag.
   *
   * @returns {void}
   */
  onopentag: function(e, a) {
    if (Yl) {
      Po.push(e);
      return;
    }
    const t = a.class ? a.class.split(" ") : [];
    if (ewa.includes(e) || t.some((o) => awa.includes(o))) {
      Yl = !0, Po.push(e);
      return;
    }
    const n = Object.keys(a);
    let r = "";
    n.forEach(function(o) {
      r += " " + o + "='" + a[o] + "'";
    }), Ju.push("<" + e + r + ">");
  },
  /**
   * Handles the text that doesn't contain opening or closing tags.
   * If `inIgnorableBlock` is false, the text gets pushed to the `textArray` array.
   *
   * @param {string} text The text that doesn't contain opening or closing tags.
   *
   * @returns {void}
   */
  ontext: function(e) {
    Yl || Ju.push(e);
  },
  /**
   * Handles the closing tag.
   * If the closing tag is the last tag on the `ignoreStack`, jump out of the ignorable block.
   * Otherwise, if we are not currently in an ignorable block, push the tag to the `textArray`.
   *
   * @param {string} tagName The tag name.
   *
   * @returns {void}
   */
  onclosetag: function(e) {
    if (Po.length === 1 && Po[0] === e) {
      Yl = !1, Po = [];
      return;
    }
    if (Yl) {
      Po.pop();
      return;
    }
    Ju.push("</" + e + ">");
  }
}, {
  decodeEntities: !0
});
function twa(e) {
  return Ju = [], Yl = !1, Po = [], SO.write(e), SO.parseComplete(), Ju.join("");
}
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "createShortcodeTagsRegex", {
    enumerable: !0,
    get: function() {
      return t.createShortcodeTagsRegex;
    }
  }), Object.defineProperty(e, "filterShortcodesFromHTML", {
    enumerable: !0,
    get: function() {
      return t.filterShortcodesFromHTML;
    }
  }), Object.defineProperty(e, "normalize", {
    enumerable: !0,
    get: function() {
      return a.normalize;
    }
  }), Object.defineProperty(e, "processExactMatchRequest", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  }), Object.defineProperty(e, "removeHtmlBlocks", {
    enumerable: !0,
    get: function() {
      return r.default;
    }
  });
  var a = $a, t = fs, n = o(ni), r = o(Jt);
  function o(l) {
    return l && l.__esModule ? l : { default: l };
  }
})(Zt);
var OO;
function nwa() {
  if (OO) return Dg;
  OO = 1, Object.defineProperty(Dg, "__esModule", {
    value: !0
  }), Dg.default = n;
  var e = K, a = ks(), t = Zt;
  function n(r, o) {
    let l = o.getResearch("getParagraphs");
    l = l.filter((w) => {
      const j = w.getParentNode(r.getTree());
      return !(w.isImplicit && j && j.name === "figcaption");
    }), l = l.filter((w) => !(w.childNodes && w.childNodes[0] && (0, t.createShortcodeTagsRegex)(["caption"]).test(w.childNodes[0].value)));
    const u = l[0], c = o.getResearch("morphology"), f = o.getHelper("matchWordCustomHelper"), y = r.getLocale(), z = u && u.sourceCodeLocation.startOffset, v = r._attributes.wpBlocks, O = v && v.filter((w) => (0, e.inRange)(z, w.startOffset, w.endOffset))[0], I = {
      foundInOneSentence: !1,
      foundInParagraph: !1,
      keyphraseOrSynonym: "",
      introduction: u,
      parentBlock: O || null
    };
    if ((0, e.isEmpty)(u))
      return I;
    const A = u.sentences.map((w) => w.text), x = !0;
    if (!(0, e.isEmpty)(A)) {
      const w = A.map((S) => (0, a.findTopicFormsInString)(c, S, x, y, f)).find((S) => S.percentWordMatches === 100);
      if (w)
        return I.foundInOneSentence = !0, I.foundInParagraph = !0, I.keyphraseOrSynonym = w.keyphraseOrSynonym, I;
      const j = (0, a.findTopicFormsInString)(c, u.innerText(), x, y, f);
      if (j.percentWordMatches === 100)
        return I.foundInParagraph = !0, I.keyphraseOrSynonym = j.keyphraseOrSynonym, I;
    }
    return I;
  }
  return Dg;
}
var Ru = {}, jc = {};
Object.defineProperty(jc, "__esModule", {
  value: !0
});
jc.stemPrefixedFunctionWords = rwa;
function rwa(e, a) {
  let t = e, n = "";
  const r = e.match(a);
  return r && (n = r[0], t = e.slice(n.length)), {
    stem: t,
    prefix: n
  };
}
var zs = {};
Object.defineProperty(zs, "__esModule", {
  value: !0
});
zs.WORD_BOUNDARY_WITH_HYPHEN = zs.WORD_BOUNDARY_WITHOUT_HYPHEN = void 0;
zs.WORD_BOUNDARY_WITH_HYPHEN = "[\\s\\u2013\\u002d]";
zs.WORD_BOUNDARY_WITHOUT_HYPHEN = "[\\s\\u2013]";
var IO;
function swa() {
  if (IO) return Ru;
  IO = 1, Object.defineProperty(Ru, "__esModule", {
    value: !0
  }), Ru.default = void 0;
  var e = K, a = u(Y3()), t = ks(), n = jc, r = u(ni), o = u(gt), l = zs;
  function u(A) {
    return A && A.__esModule ? A : { default: A };
  }
  let c = [];
  const f = function(A) {
    A = A.toLocaleLowerCase();
    let x = (0, o.default)(A.toLocaleLowerCase(), l.WORD_BOUNDARY_WITH_HYPHEN);
    return x = (0, e.filter)(x, function(w) {
      return !(0, e.includes)(c, w.trim().toLocaleLowerCase());
    }), (0, e.isEmpty)(x);
  }, y = function(A, x) {
    if (x === 0 || c.length === 0)
      return x;
    const w = A.substring(0, x);
    return f(w) ? 0 : x;
  };
  function* z(...A) {
    const x = A.map((j) => j.length), w = Array(A.length).fill(0);
    for (; ; ) {
      yield w.map((S, P) => A[P][S]);
      let j = A.length - 1;
      for (; j >= 0 && ++w[j] === x[j]; )
        w[j] = 0, j--;
      if (j < 0)
        break;
    }
  }
  function v(A, x, w, j, S, P) {
    const M = (0, e.uniq)(A.matches.map((V) => (0, n.stemPrefixedFunctionWords)(V, j).prefix).concat([""])), U = x.split(" ").map((V) => M.map((F) => F + V).filter((F) => (0, a.default)(S, F, P, !1).count > 0));
    if (!U.find((V) => V.length === 0))
      for (const V of z(...U)) {
        const F = Array.isArray(V) ? V.join(" ") : V, Y = (0, a.default)(S, F, P, !1);
        if (Y.count > 0) {
          w.exactMatchFound = !0, w.position = y(S, Y.position);
          break;
        }
      }
    return A.position === 0 && (w.position = 0), w;
  }
  function O(A, x, w, j, S) {
    const P = A.getTitle(), M = A.getLocale(), G = x.getResearch("morphology"), V = (0, t.findTopicFormsInString)(G, P, !1, M, !1);
    if (V.percentWordMatches === 100) {
      if (S) {
        const {
          exactMatchFound: F,
          position: Y
        } = v(V, w, j, S, P, M);
        j = {
          ...j,
          exactMatchFound: F,
          position: Y
        };
      }
      j.allWordsFound = !0;
    }
    return j;
  }
  const I = function(A, x) {
    c = x.getConfig("functionWords");
    let w = (0, e.escapeRegExp)(A.getKeyword());
    const j = A.getTitle(), S = A.getLocale();
    let P = {
      exactMatchFound: !1,
      allWordsFound: !1,
      position: -1,
      exactMatchKeyphrase: !1
    };
    const M = (0, r.default)(w);
    M.exactMatchRequested && (w = M.keyphrase, P.exactMatchKeyphrase = !0);
    const G = x.getConfig("prefixedFunctionWordsRegex"), U = (0, a.default)(j, w, S, !1);
    return U.count > 0 && !G ? (P.exactMatchFound = !0, P.allWordsFound = !0, P.position = y(j, U.position), P) : (P = O(A, x, w, P, G), P);
  };
  return Ru.default = I, Ru;
}
var u_ = {}, c_ = {};
Object.defineProperty(c_, "__esModule", {
  value: !0
});
c_.default = dwa;
var iwa = owa(jd);
function owa(e) {
  return e && e.__esModule ? e : { default: e };
}
const lwa = function(e) {
  return e = e.map(function(a) {
    return (0, iwa.default)(a);
  }), e.join("(.*?)");
};
function dwa(e) {
  e = e.map(function(t) {
    return lwa(t);
  });
  const a = "(" + e.join(")|(") + ")";
  return new RegExp(a, "ig");
}
var nr = {}, xc = {}, Cd = {}, hf = {};
Object.defineProperty(hf, "__esModule", {
  value: !0
});
hf.default = void 0;
hf.default = ["A.D.", "Adm.", "Adv.", "B.C.", "Br.", "Brig.", "Cmrd.", "Col.", "Cpl.", "Cpt.", "Dr.", "Esq.", "Fr.", "Gen.", "Gov.", "Hon.", "Jr.", "Lieut.", "Lt.", "Maj.", "Mr.", "Mrs.", "Ms.", "Msgr.", "Mx.", "No.", "Pfc.", "Pr.", "Prof.", "Pvt.", "Rep.", "Reps.", "Rev.", "Rt. Hon.", "Sen.", "Sens.", "Sgt.", "Sps.", "Sr.", "St.", "vs.", "i.e.", "e.g.", "viz.", "Mt."];
var Sc = {};
Object.defineProperty(Sc, "__esModule", {
  value: !0
});
Sc.default = uwa;
function uwa() {
  return [
    // Whitespace is always a word boundary.
    " ",
    "\\n",
    "\\r",
    "\\t",
    // NO-BREAK SPACE.
    " ",
    // \u06d4 - Urdu full stop
    "۔",
    // \u061f - Arabic question mark
    "؟",
    // \u060C - Arabic comma
    "،",
    // \u061B - Arabic semicolon
    "؛",
    " ",
    ".",
    ",",
    "'",
    "(",
    ")",
    '"',
    "+",
    "-",
    ";",
    "!",
    "?",
    ":",
    "/",
    "»",
    "«",
    "‹",
    "›",
    "<",
    ">",
    "”",
    "“",
    "〝",
    "〞",
    "〟",
    "‟",
    "„"
  ];
}
Object.defineProperty(Cd, "__esModule", {
  value: !0
});
Cd.default = void 0;
var Gn = K, cwa = yf(C3), pwa = $a, gwa = yf(hf), mwa = yf(Yo), fwa = yf(Sc);
function yf(e) {
  return e && e.__esModule ? e : { default: e };
}
const Mk = ".", hwa = new RegExp("^[" + Mk + "]$"), ywa = /^<[^><]*$/, zwa = /^<([^>\s/]+)[^>]*>$/mi, bwa = /^<\/([^>\s]+)[^>]*>$/mi, wwa = /^\s*[[({]\s*$/, vwa = /^\s*[\])}]\s*$/, kwa = gwa.default.map((e) => e.replace(".", "\\.")), _wa = (0, mwa.default)(kwa), Ewa = "(^|$|[" + (0, fwa.default)().map((e) => "\\" + e).join("") + "])", Awa = new RegExp(Ewa + "[A-Za-z]$"), CO = /<\/?([^\s]+?)(\s|>)/, Twa = ["p", "div", "h1", "h2", "h3", "h4", "h5", "h6", "span", "li", "main"];
let $wa = class {
  /**
   * Constructor
   * @constructor
   */
  constructor() {
    this.sentenceDelimiters = '”〞〟„』›»’‛`"?!…۔؟';
  }
  /**
   * Gets the sentence delimiters.
   *
   * @returns {string} The sentence delimiters.
   */
  getSentenceDelimiters() {
    return this.sentenceDelimiters;
  }
  /**
   * Returns whether or not a certain character is a number.
   *
   * @param {string} character The character to check.
   * @returns {boolean} Whether or not the character is a capital letter.
   */
  isNumber(a) {
    return !(0, Gn.isNaN)(parseInt(a, 10));
  }
  /**
   * Returns whether or not a given HTML tag is a break tag.
   *
   * @param {string} htmlTag The HTML tag to check.
   * @returns {boolean} Whether or not the given HTML tag is a break tag.
   */
  isBreakTag(a) {
    return /<\/?br/.test(a);
  }
  /**
   * Returns whether or not a given character is quotation mark.
   *
   * @param {string} character The character to check.
   * @returns {boolean} Whether or not the given character is a quotation mark.
   */
  isQuotation(a) {
    return a = (0, pwa.normalize)(a), a === "'" || a === '"';
  }
  /**
   * A mock definition of this function. This function is only used in extensions for languages that use an ordinal dot.
   *
   * @returns {boolean} Always returns false as it is a language specific implementation if a language has an ordinal dot.
   */
  endsWithOrdinalDot() {
    return !1;
  }
  /**
   * Returns whether or not a given character is a punctuation mark that can be at the beginning
   * of a sentence, like ¿ and ¡ used in Spanish.
   *
   * @param {string} character The character to check.
   * @returns {boolean} Whether or not the given character is a punctuation mark.
   */
  isPunctuation(a) {
    return a === "¿" || a === "¡";
  }
  /**
   * Removes duplicate whitespace from a given text.
   *
   * @param {string} text The text with duplicate whitespace.
   * @returns {string} The text without duplicate whitespace.
   */
  removeDuplicateWhitespace(a) {
    return a.replace(/\s+/, " ");
  }
  /**
   * Returns whether or not a certain character is a capital letter.
   *
   * @param {string} character The character to check.
   * @returns {boolean} Whether or not the character is a capital letter.
   */
  isCapitalLetter(a) {
    return a !== a.toLocaleLowerCase();
  }
  /**
   * Checks whether the given character is a smaller than sign.
   *
   * This function is used to make sure that tokenizing the content after
   * the smaller than sign works as expected.
   * E.g. 'A sentence. < Hello world!' = ['A sentence.', '< Hello world!'].
   *
   * @param {string} character The character to check.
   * @returns {boolean} Whether the character is a smaller than sign ('<') or not.
   */
  isSmallerThanSign(a) {
    return a === "<";
  }
  /**
   * Retrieves the next two characters from an array with the two next tokens.
   *
   * @param {Array} nextTokens The two next tokens. Might be undefined.
   * @returns {string} The next two characters.
   */
  getNextTwoCharacters(a) {
    let t = "";
    return (0, Gn.isUndefined)(a[0]) || (t += a[0].src), (0, Gn.isUndefined)(a[1]) || (t += a[1].src), t = this.removeDuplicateWhitespace(t), t;
  }
  /**
   * Checks whether a character is from a language that's written from right to left.
   * These languages don't have capital letter forms. Therefore any letter from these languages is a
   * potential sentence beginning.
   *
   * @param {string} letter The letter to check.
   *
   * @returns {boolean} Whether the letter is from an LTR language.
   */
  isLetterFromSpecificLanguage(a) {
    return [
      // Hebrew characters.
      /^[\u0590-\u05fe]+$/i,
      // Arabic characters (used for Arabic, Farsi, Urdu).
      /^[\u0600-\u06FF]+$/i,
      // Additional Farsi characters.
      /^[\uFB8A\u067E\u0686\u06AF]+$/i
    ].some((n) => n.test(a));
  }
  /**
   * Checks if the sentenceBeginning beginning is a valid beginning.
   *
   * @param {string} sentenceBeginning The beginning of the sentence to validate.
   * @returns {boolean} Returns true if it is a valid beginning, false if it is not.
   */
  isValidSentenceBeginning(a) {
    return this.isCapitalLetter(a) || this.isLetterFromSpecificLanguage(a) || this.isNumber(a) || this.isQuotation(a) || this.isPunctuation(a) || this.isSmallerThanSign(a);
  }
  /**
   * Checks if the token is a valid sentence start.
   *
   * @param {Object} token The token to validate.
   * @returns {boolean} Returns true if the token is valid sentence start, false if it is not.
   */
  isSentenceStart(a) {
    return !(0, Gn.isUndefined)(a) && (a.type === "html-start" || a.type === "html-end" || a.type === "block-start");
  }
  /**
   * Checks if the token is a valid sentence ending. A valid sentence ending is either a full stop or another
   * delimiter such as "?", "!", etc.
   *
   * @param {Object} token The token to validate.
   * @returns {boolean} Returns true if the token is valid sentence ending, false if it is not.
   */
  isSentenceEnding(a) {
    return !(0, Gn.isUndefined)(a) && (a.type === "full-stop" || a.type === "sentence-delimiter");
  }
  /**
   * Checks if a full stop is part of a person's initials.
   *
   * Tests if tokens exist. Then tests if the tokens are of the right type.
   * For previous token, it checks if the sentence ends with a single letter.
   * For nextToken it checks if it is a single letter.
   * Checks if next token is followed by a full stop.
   *
   * @param {object} token The current token (must be a full stop).
   * @param {object} previousToken The token before the full stop.
   * @param {object} nextToken The token following the full stop.
   * @param {object} secondToNextToken The second token after the full stop.
   * @returns {boolean} True if a full stop is part of a person's initials, False if the full stop is not part of a person's initials.
   */
  isPartOfPersonInitial(a, t, n, r) {
    return !(0, Gn.isUndefined)(a) && !(0, Gn.isUndefined)(n) && !(0, Gn.isUndefined)(r) && !(0, Gn.isUndefined)(t) && a.type === "full-stop" && t.type === "sentence" && Awa.test(t.src) && n.type === "sentence" && n.src.trim().length === 1 && r.type === "full-stop";
  }
  /**
   * Tokens that represent a '<', followed by content until it enters another '<' or '>'
   * gets another pass by the tokenizer.
   *
   * @param {Object} token A token of type 'smaller-than-sign-content'.
   * @param {string[]} tokenSentences The current array of found sentences. Sentences may get added by this method.
   * @param {string} currentSentence The current sentence. Sentence parts may get appended by this method.
   * @returns {{tokenSentences, currentSentence}} The found sentences and the current sentence, appended when necessary.
   */
  tokenizeSmallerThanContent(a, t, n) {
    const r = a.src.substring(1), o = this.createTokenizer();
    this.tokenize(o.tokenizer, r);
    const l = this.getSentencesFromTokens(o.tokens, !1);
    if (l[0] = (0, Gn.isUndefined)(l[0]) ? "<" : "<" + l[0], this.isValidSentenceBeginning(l[0]) && (t.push(n), n = ""), n += l[0], l.length > 1) {
      t.push(n), n = "", l.shift();
      const u = l.pop();
      l.forEach((f) => {
        t.push(f);
      });
      const c = new RegExp("[" + Mk + this.getSentenceDelimiters() + "]$");
      u.match(c) ? t.push(u) : n = u;
    }
    return {
      tokenSentences: t,
      currentSentence: n
    };
  }
  /**
   * Creates a tokenizer.
   *
   * @returns {Object} The tokenizer and the tokens.
   */
  createTokenizer() {
    const a = new RegExp("^[" + this.getSentenceDelimiters() + "]$"), t = new RegExp("^[^" + Mk + this.getSentenceDelimiters() + "<\\(\\)\\[\\]]+$"), n = [], r = (0, cwa.default)(function(o) {
      n.push(o);
    });
    return r.addRule(hwa, "full-stop"), r.addRule(ywa, "smaller-than-sign-content"), r.addRule(zwa, "html-start"), r.addRule(bwa, "html-end"), r.addRule(wwa, "block-start"), r.addRule(vwa, "block-end"), r.addRule(a, "sentence-delimiter"), r.addRule(t, "sentence"), {
      tokenizer: r,
      tokens: n
    };
  }
  /**
   * Tokenizes the given text using the given tokenizer.
   *
   * @param {Object} tokenizer The tokenizer to use.
   * @param {string} text The text to tokenize.
   * @returns {void}
   */
  tokenize(a, t) {
    a.onText(t);
    try {
      a.end();
    } catch (n) {
      console.error("Tokenizer end error:", n, n.tokenizer2);
    }
  }
  /**
   * Checks if a string ends with an abbreviation.
   * @param {string} currentSentence A (part of) a sentence.
   * @returns {boolean} True if the string ends with an abbreviation that is in abbreviations.js. Otherwise, False.
   */
  endsWithAbbreviation(a) {
    const t = a.match(_wa);
    if (!t)
      return !1;
    const n = t.pop();
    return a.endsWith(n);
  }
  /**
   * Checks whether the given tokens are a valid html tag pair.
   * Note that this method is not a full html tag validator. It should be replaced with a better solution once the html parser is implemented.
   *
   * @param {object} firstToken   The first token to check. It is asserted that this token contains/is an opening html tag.
   * @param {object} lastToken    The last token to check. It is asserted that this token contains/is a closing html tag.
   *
   * @returns {boolean} True if the tokens are a valid html tag pair. Otherwise, False.
   */
  isValidTagPair(a, t) {
    const n = a.src, r = t.src, o = n.match(CO)[1], l = r.match(CO)[1];
    return o === l && Twa.includes(o);
  }
  /**
   * Returns an array of sentences for a given array of tokens, assumes that the text has already been split into blocks.
   *
   * @param {Object[]} tokenArray The tokens from the sentence tokenizer.
   * @param {boolean} [trimSentences=true] Whether to trim the sentences at the end or not.
   *
   * @returns {string[]} A list of sentences.
   */
  getSentencesFromTokens(a, t = !0) {
    let n = [], r = "", o, l;
    do {
      l = !1;
      const u = a[0], c = a[a.length - 1];
      u && c && u.type === "html-start" && c.type === "html-end" && this.isValidTagPair(u, c) && (a = a.slice(1, a.length - 1), l = !0);
    } while (l && a.length > 1);
    return a.forEach((u, c) => {
      let f, y, z;
      const v = a[c + 1], O = a[c - 1], I = a[c + 2];
      switch (y = this.getNextTwoCharacters([v, I]), f = y.length >= 2, o = f ? y[1] : "", u.type) {
        case "html-start":
        case "html-end":
          this.isBreakTag(u.src) ? (n.push(r), r = "") : r += u.src;
          break;
        case "smaller-than-sign-content":
          z = this.tokenizeSmallerThanContent(u, n, r), n = z.tokenSentences, r = z.currentSentence;
          break;
        case "sentence":
          r += u.src;
          break;
        case "sentence-delimiter":
          if (r += u.src, !(0, Gn.isUndefined)(v) && v.type !== "block-end" && v.type !== "sentence-delimiter" && this.isCharacterASpace(v.src[0])) {
            if (this.isQuotation(u.src) && O && O.src !== ".")
              break;
            this.isQuotation(u.src) || u.src === "…" ? r = this.getValidSentence(f, o, y, v, n, r) : (n.push(r), r = "");
          }
          break;
        case "full-stop":
          if (r += u.src, y = this.getNextTwoCharacters([v, I]), f = y.length >= 2, o = f ? y[1] : "", this.endsWithAbbreviation(r) || f && this.isNumber(y[0]) || this.isPartOfPersonInitial(u, O, v, I) || this.endsWithOrdinalDot(r))
            break;
          r = this.getValidSentence(f, o, y, v, n, r);
          break;
        case "block-start":
          r += u.src;
          break;
        case "block-end":
          if (r += u.src, y = this.getNextTwoCharacters([v, I]), f = y.length >= 2, o = f ? y[0] : "", f && this.isNumber(y[0]) || this.isSentenceEnding(O) && !(this.isValidSentenceBeginning(o) || this.isSentenceStart(v)))
            break;
          this.isSentenceEnding(O) && (this.isSentenceStart(v) || this.isValidSentenceBeginning(o)) && (n.push(r), r = "");
          break;
      }
    }), r !== "" && n.push(r), t && (n = (0, Gn.map)(n, function(u) {
      return u.trim();
    })), n;
  }
  /**
   * Gets the current sentence when:
   * a) There is a next sentence, and the next character is a valid sentence beginning preceded by a white space, OR
   * b) The next token is a sentence start
   *
   * @param {boolean} hasNextSentence     Whether the next characters are more than two.
   * @param {string} nextSentenceStart    The second character of the next characters.
   * @param {string} nextCharacters       The string values of the next two tokens.
   * @param {object} nextToken            The next token object.
   * @param {array} tokenSentences        The array of pushed valid sentences.
   * @param {string} currentSentence      The current sentence.
   *
   * @returns {string} The current sentence.
   */
  getValidSentence(a, t, n, r, o, l) {
    return (a && this.isValidSentenceBeginning(t) && this.isCharacterASpace(n[0]) || this.isSentenceStart(r)) && (o.push(l), l = ""), l;
  }
  /**
   * Checks if the character is a whitespace.
   *
   * @param {string} character    The character to check.
   * @returns {boolean}   Whether the character is a whitespace.
   */
  isCharacterASpace(a) {
    return /\s/.test(a);
  }
};
Cd.default = $wa;
Object.defineProperty(xc, "__esModule", {
  value: !0
});
xc.default = void 0;
var jwa = Swa(Cd), xwa = K;
function Swa(e) {
  return e && e.__esModule ? e : { default: e };
}
function Owa(e, a = !0) {
  const t = new jwa.default(), {
    tokenizer: n,
    tokens: r
  } = t.createTokenizer();
  return t.tokenize(n, e), r.length === 0 ? [] : t.getSentencesFromTokens(r, a);
}
xc.default = (0, xwa.memoize)(Owa, (...e) => JSON.stringify(e));
Object.defineProperty(nr, "__esModule", {
  value: !0
});
nr.default = Fwa;
var Mg = K, Iwa = On, Cwa = xd, Pwa = Ct, Rwa = kt, Dwa = Nwa(xc);
function Nwa(e) {
  return e && e.__esModule ? e : { default: e };
}
const Lwa = `
\r|
|\r`, Mwa = new RegExp(Lwa), qwa = new RegExp("^(<p>|</p>)$");
function Fwa(e, a = Dwa.default) {
  e = (0, Rwa.unifyNonBreakingSpace)(e), e = e.replace(Cwa.imageRegex, "");
  let t = (0, Iwa.getBlocks)(e);
  t = (0, Mg.flatMap)(t, function(r) {
    return r.split(Mwa);
  }), t = t.filter((r) => !qwa.test(r));
  let n = t.map((r) => a(r)).flat();
  return n = n.map((r) => (0, Pwa.stripBlockTagsAtStartEnd)(r).trim()), (0, Mg.filter)(n, (0, Mg.negate)(Mg.isEmpty));
}
var Js = {};
Object.defineProperty(Js, "__esModule", {
  value: !0
});
Js.isWordInSentence = Js.default = Js.characterInBoundary = void 0;
var Bwa = rN(Sc), nN = K, Wwa = rN(jd);
function rN(e) {
  return e && e.__esModule ? e : { default: e };
}
const Uwa = (0, Bwa.default)(), Em = function(e) {
  return (0, nN.includes)(Uwa, e);
};
Js.characterInBoundary = Em;
const sN = function(e, a) {
  e = e.toLocaleLowerCase(), a = a.toLocaleLowerCase();
  const t = (0, Wwa.default)((0, nN.escapeRegExp)(e));
  let n = a.search(new RegExp(t, "ig"));
  if (n === -1)
    return !1;
  n > 0 && (n += 1);
  const r = n + e.length, o = Em(a[n - 1]) || n === 0, l = Em(a[r]) || r === a.length;
  return o && l;
};
Js.isWordInSentence = sN;
Js.default = {
  characterInBoundary: Em,
  isWordInSentence: sN
};
Object.defineProperty(u_, "__esModule", {
  value: !0
});
u_.default = ava;
var Hwa = p_(c_), Gwa = p_(nr), iN = $a, Vwa = Js, Kwa = p_(Jt), Ywa = K, Qwa = Zt;
function p_(e) {
  return e && e.__esModule ? e : { default: e };
}
let fv = null, PO = "";
function Xwa(e) {
  const a = (0, Ywa.flattenDeep)(e).join("");
  return (PO !== a || fv === null) && (PO = a, fv = (0, Hwa.default)(e)), fv;
}
const Zwa = function(e, a) {
  e = (0, iN.normalizeSingle)(e);
  const t = Xwa(a);
  return e.match(t);
}, Jwa = function(e, a) {
  return e = (0, iN.normalizeSingle)(e), a.filter((t) => (0, Vwa.isWordInSentence)(t, e));
}, eva = function(e, a, t, n) {
  const r = [];
  return e.forEach((o) => {
    if (t) {
      const u = Zwa(o, t);
      if (u !== null) {
        r.push({
          sentence: o,
          transitionWords: u
        });
        return;
      }
    }
    const l = n ? n(o, a) : Jwa(o, a);
    l.length !== 0 && r.push({
      sentence: o,
      transitionWords: l
    });
  }), r;
};
function ava(e, a) {
  const t = a.getHelper("matchTransitionWordsHelper"), n = a.getConfig("transitionWords"), r = a.getConfig("twoPartTransitionWords"), o = a.getHelper("memoizedTokenizer");
  let l = e.getText();
  l = (0, Kwa.default)(l), l = (0, Qwa.filterShortcodesFromHTML)(l, e._attributes && e._attributes.shortcodes);
  const u = (0, Gwa.default)(l, o), c = eva(u, n, r, t);
  return {
    totalSentences: u.length,
    sentenceResults: c,
    transitionWordSentences: c.length
  };
}
var g_ = {};
Object.defineProperty(g_, "__esModule", {
  value: !0
});
g_.default = sva;
var hv = K, tva = oN(gt), nva = oN(ni), rva = zs;
function oN(e) {
  return e && e.__esModule ? e : { default: e };
}
function sva(e, a) {
  const t = a.getConfig("functionWords"), n = a.getHelper("getWordsCustomHelper"), r = e.getKeyword();
  if ((0, nva.default)(r).exactMatchRequested)
    return !1;
  let o = n ? n(r) : (0, tva.default)(r, rva.WORD_BOUNDARY_WITH_HYPHEN);
  return o = (0, hv.filter)(o, function(l) {
    return !(0, hv.includes)(t, l.trim().toLocaleLowerCase());
  }), (0, hv.isEmpty)(o);
}
var qg = {}, m_ = {};
Object.defineProperty(m_, "__esModule", {
  value: !0
});
m_.default = iva;
var RO = K;
function iva(e, a = []) {
  return (0, RO.filter)(e, function(t) {
    return !(0, RO.includes)(a, t.trim().toLocaleLowerCase());
  });
}
var Zo = {}, f_ = {};
Object.defineProperty(f_, "__esModule", {
  value: !0
});
f_.default = dva;
const lN = "[\\–\\-\\(\\)_\\[\\]’'.?!:;,¿¡«»‹›—×+&<>]+", ova = new RegExp("^" + lN), lva = new RegExp(lN + "$");
function dva(e) {
  return e = e.replace(ova, ""), e = e.replace(lva, ""), e;
}
Object.defineProperty(Zo, "__esModule", {
  value: !0
});
Zo.default = pva;
var uva = dN(Xt), cva = dN(f_);
function dN(e) {
  return e && e.__esModule ? e : { default: e };
}
function pva(e) {
  let a = e.split(",");
  return a = a.map((t) => (0, cva.default)((0, uva.default)(t))).filter((t) => t), a;
}
var Pd = {}, Am = { exports: {} };
/*! https://mths.be/punycode v1.4.1 by @mathias */
Am.exports;
(function(e, a) {
  (function(t) {
    var n = a && !a.nodeType && a, r = e && !e.nodeType && e, o = typeof dt == "object" && dt;
    (o.global === o || o.window === o || o.self === o) && (t = o);
    var l, u = 2147483647, c = 36, f = 1, y = 26, z = 38, v = 700, O = 72, I = 128, A = "-", x = /^xn--/, w = /[^\x20-\x7E]/, j = /[\x2E\u3002\uFF0E\uFF61]/g, S = {
      overflow: "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    }, P = c - f, M = Math.floor, G = String.fromCharCode, U;
    function V(ze) {
      throw new RangeError(S[ze]);
    }
    function F(ze, Ae) {
      for (var he = ze.length, ia = []; he--; )
        ia[he] = Ae(ze[he]);
      return ia;
    }
    function Y(ze, Ae) {
      var he = ze.split("@"), ia = "";
      he.length > 1 && (ia = he[0] + "@", ze = he[1]), ze = ze.replace(j, ".");
      var je = ze.split("."), be = F(je, Ae).join(".");
      return ia + be;
    }
    function X(ze) {
      for (var Ae = [], he = 0, ia = ze.length, je, be; he < ia; )
        je = ze.charCodeAt(he++), je >= 55296 && je <= 56319 && he < ia ? (be = ze.charCodeAt(he++), (be & 64512) == 56320 ? Ae.push(((je & 1023) << 10) + (be & 1023) + 65536) : (Ae.push(je), he--)) : Ae.push(je);
      return Ae;
    }
    function D(ze) {
      return F(ze, function(Ae) {
        var he = "";
        return Ae > 65535 && (Ae -= 65536, he += G(Ae >>> 10 & 1023 | 55296), Ae = 56320 | Ae & 1023), he += G(Ae), he;
      }).join("");
    }
    function de(ze) {
      return ze - 48 < 10 ? ze - 22 : ze - 65 < 26 ? ze - 65 : ze - 97 < 26 ? ze - 97 : c;
    }
    function ve(ze, Ae) {
      return ze + 22 + 75 * (ze < 26) - ((Ae != 0) << 5);
    }
    function we(ze, Ae, he) {
      var ia = 0;
      for (ze = he ? M(ze / v) : ze >> 1, ze += M(ze / Ae); ze > P * y >> 1; ia += c)
        ze = M(ze / P);
      return M(ia + (P + 1) * ze / (ze + z));
    }
    function Pe(ze) {
      var Ae = [], he = ze.length, ia, je = 0, be = I, ke = O, $e, De, ga, va, oa, Wa, Da, za, $t;
      for ($e = ze.lastIndexOf(A), $e < 0 && ($e = 0), De = 0; De < $e; ++De)
        ze.charCodeAt(De) >= 128 && V("not-basic"), Ae.push(ze.charCodeAt(De));
      for (ga = $e > 0 ? $e + 1 : 0; ga < he; ) {
        for (va = je, oa = 1, Wa = c; ga >= he && V("invalid-input"), Da = de(ze.charCodeAt(ga++)), (Da >= c || Da > M((u - je) / oa)) && V("overflow"), je += Da * oa, za = Wa <= ke ? f : Wa >= ke + y ? y : Wa - ke, !(Da < za); Wa += c)
          $t = c - za, oa > M(u / $t) && V("overflow"), oa *= $t;
        ia = Ae.length + 1, ke = we(je - va, ia, va == 0), M(je / ia) > u - be && V("overflow"), be += M(je / ia), je %= ia, Ae.splice(je++, 0, be);
      }
      return D(Ae);
    }
    function me(ze) {
      var Ae, he, ia, je, be, ke, $e, De, ga, va, oa, Wa = [], Da, za, $t, fi;
      for (ze = X(ze), Da = ze.length, Ae = I, he = 0, be = O, ke = 0; ke < Da; ++ke)
        oa = ze[ke], oa < 128 && Wa.push(G(oa));
      for (ia = je = Wa.length, je && Wa.push(A); ia < Da; ) {
        for ($e = u, ke = 0; ke < Da; ++ke)
          oa = ze[ke], oa >= Ae && oa < $e && ($e = oa);
        for (za = ia + 1, $e - Ae > M((u - he) / za) && V("overflow"), he += ($e - Ae) * za, Ae = $e, ke = 0; ke < Da; ++ke)
          if (oa = ze[ke], oa < Ae && ++he > u && V("overflow"), oa == Ae) {
            for (De = he, ga = c; va = ga <= be ? f : ga >= be + y ? y : ga - be, !(De < va); ga += c)
              fi = De - va, $t = c - va, Wa.push(
                G(ve(va + fi % $t, 0))
              ), De = M(fi / $t);
            Wa.push(G(ve(De, 0))), be = we(he, za, ia == je), he = 0, ++ia;
          }
        ++he, ++Ae;
      }
      return Wa.join("");
    }
    function ta(ze) {
      return Y(ze, function(Ae) {
        return x.test(Ae) ? Pe(Ae.slice(4).toLowerCase()) : Ae;
      });
    }
    function Dn(ze) {
      return Y(ze, function(Ae) {
        return w.test(Ae) ? "xn--" + me(Ae) : Ae;
      });
    }
    if (l = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      version: "1.4.1",
      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      ucs2: {
        decode: X,
        encode: D
      },
      decode: Pe,
      encode: me,
      toASCII: Dn,
      toUnicode: ta
    }, n && r)
      if (e.exports == n)
        r.exports = l;
      else
        for (U in l)
          l.hasOwnProperty(U) && (n[U] = l[U]);
    else
      t.punycode = l;
  })(dt);
})(Am, Am.exports);
var gva = Am.exports;
const mva = /* @__PURE__ */ c0(gva);
var Rd = TypeError, h_ = typeof Map == "function" && Map.prototype, yv = Object.getOwnPropertyDescriptor && h_ ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null, Tm = h_ && yv && typeof yv.get == "function" ? yv.get : null, DO = h_ && Map.prototype.forEach, y_ = typeof Set == "function" && Set.prototype, zv = Object.getOwnPropertyDescriptor && y_ ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null, $m = y_ && zv && typeof zv.get == "function" ? zv.get : null, NO = y_ && Set.prototype.forEach, fva = typeof WeakMap == "function" && WeakMap.prototype, ec = fva ? WeakMap.prototype.has : null, hva = typeof WeakSet == "function" && WeakSet.prototype, ac = hva ? WeakSet.prototype.has : null, yva = typeof WeakRef == "function" && WeakRef.prototype, LO = yva ? WeakRef.prototype.deref : null, zva = Boolean.prototype.valueOf, bva = Object.prototype.toString, wva = Function.prototype.toString, vva = String.prototype.match, z_ = String.prototype.slice, Mi = String.prototype.replace, kva = String.prototype.toUpperCase, MO = String.prototype.toLowerCase, uN = RegExp.prototype.test, qO = Array.prototype.concat, ds = Array.prototype.join, _va = Array.prototype.slice, FO = Math.floor, qk = typeof BigInt == "function" ? BigInt.prototype.valueOf : null, bv = Object.getOwnPropertySymbols, Fk = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? Symbol.prototype.toString : null, sd = typeof Symbol == "function" && typeof Symbol.iterator == "object", tc = typeof Symbol == "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === sd || !0) ? Symbol.toStringTag : null, cN = Object.prototype.propertyIsEnumerable, BO = (typeof Reflect == "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(e) {
  return e.__proto__;
} : null);
function WO(e, a) {
  if (e === 1 / 0 || e === -1 / 0 || e !== e || e && e > -1e3 && e < 1e3 || uN.call(/e/, a))
    return a;
  var t = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
  if (typeof e == "number") {
    var n = e < 0 ? -FO(-e) : FO(e);
    if (n !== e) {
      var r = String(n), o = z_.call(a, r.length + 1);
      return Mi.call(r, t, "$&_") + "." + Mi.call(Mi.call(o, /([0-9]{3})/g, "$&_"), /_$/, "");
    }
  }
  return Mi.call(a, t, "$&_");
}
var Bk = eN, UO = Bk.custom, HO = mN(UO) ? UO : null, pN = {
  __proto__: null,
  double: '"',
  single: "'"
}, Eva = {
  __proto__: null,
  double: /(["\\])/g,
  single: /(['\\])/g
}, zf = function e(a, t, n, r) {
  var o = t || {};
  if (Gs(o, "quoteStyle") && !Gs(pN, o.quoteStyle))
    throw new TypeError('option "quoteStyle" must be "single" or "double"');
  if (Gs(o, "maxStringLength") && (typeof o.maxStringLength == "number" ? o.maxStringLength < 0 && o.maxStringLength !== 1 / 0 : o.maxStringLength !== null))
    throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
  var l = Gs(o, "customInspect") ? o.customInspect : !0;
  if (typeof l != "boolean" && l !== "symbol")
    throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
  if (Gs(o, "indent") && o.indent !== null && o.indent !== "	" && !(parseInt(o.indent, 10) === o.indent && o.indent > 0))
    throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
  if (Gs(o, "numericSeparator") && typeof o.numericSeparator != "boolean")
    throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
  var u = o.numericSeparator;
  if (typeof a > "u")
    return "undefined";
  if (a === null)
    return "null";
  if (typeof a == "boolean")
    return a ? "true" : "false";
  if (typeof a == "string")
    return hN(a, o);
  if (typeof a == "number") {
    if (a === 0)
      return 1 / 0 / a > 0 ? "0" : "-0";
    var c = String(a);
    return u ? WO(a, c) : c;
  }
  if (typeof a == "bigint") {
    var f = String(a) + "n";
    return u ? WO(a, f) : f;
  }
  var y = typeof o.depth > "u" ? 5 : o.depth;
  if (typeof n > "u" && (n = 0), n >= y && y > 0 && typeof a == "object")
    return Wk(a) ? "[Array]" : "[Object]";
  var z = Bva(o, n);
  if (typeof r > "u")
    r = [];
  else if (fN(r, a) >= 0)
    return "[Circular]";
  function v(de, ve, we) {
    if (ve && (r = _va.call(r), r.push(ve)), we) {
      var Pe = {
        depth: o.depth
      };
      return Gs(o, "quoteStyle") && (Pe.quoteStyle = o.quoteStyle), e(de, Pe, n + 1, r);
    }
    return e(de, o, n + 1, r);
  }
  if (typeof a == "function" && !GO(a)) {
    var O = Cva(a), I = Fg(a, v);
    return "[Function" + (O ? ": " + O : " (anonymous)") + "]" + (I.length > 0 ? " { " + ds.call(I, ", ") + " }" : "");
  }
  if (mN(a)) {
    var A = sd ? Mi.call(String(a), /^(Symbol\(.*\))_[^)]*$/, "$1") : Fk.call(a);
    return typeof a == "object" && !sd ? Du(A) : A;
  }
  if (Mva(a)) {
    for (var x = "<" + MO.call(String(a.nodeName)), w = a.attributes || [], j = 0; j < w.length; j++)
      x += " " + w[j].name + "=" + gN(Ava(w[j].value), "double", o);
    return x += ">", a.childNodes && a.childNodes.length && (x += "..."), x += "</" + MO.call(String(a.nodeName)) + ">", x;
  }
  if (Wk(a)) {
    if (a.length === 0)
      return "[]";
    var S = Fg(a, v);
    return z && !Fva(S) ? "[" + Uk(S, z) + "]" : "[ " + ds.call(S, ", ") + " ]";
  }
  if ($va(a)) {
    var P = Fg(a, v);
    return !("cause" in Error.prototype) && "cause" in a && !cN.call(a, "cause") ? "{ [" + String(a) + "] " + ds.call(qO.call("[cause]: " + v(a.cause), P), ", ") + " }" : P.length === 0 ? "[" + String(a) + "]" : "{ [" + String(a) + "] " + ds.call(P, ", ") + " }";
  }
  if (typeof a == "object" && l) {
    if (HO && typeof a[HO] == "function" && Bk)
      return Bk(a, { depth: y - n });
    if (l !== "symbol" && typeof a.inspect == "function")
      return a.inspect();
  }
  if (Pva(a)) {
    var M = [];
    return DO && DO.call(a, function(de, ve) {
      M.push(v(ve, a, !0) + " => " + v(de, a));
    }), VO("Map", Tm.call(a), M, z);
  }
  if (Nva(a)) {
    var G = [];
    return NO && NO.call(a, function(de) {
      G.push(v(de, a));
    }), VO("Set", $m.call(a), G, z);
  }
  if (Rva(a))
    return wv("WeakMap");
  if (Lva(a))
    return wv("WeakSet");
  if (Dva(a))
    return wv("WeakRef");
  if (xva(a))
    return Du(v(Number(a)));
  if (Ova(a))
    return Du(v(qk.call(a)));
  if (Sva(a))
    return Du(zva.call(a));
  if (jva(a))
    return Du(v(String(a)));
  if (typeof window < "u" && a === window)
    return "{ [object Window] }";
  if (typeof globalThis < "u" && a === globalThis || typeof dt < "u" && a === dt)
    return "{ [object globalThis] }";
  if (!Tva(a) && !GO(a)) {
    var U = Fg(a, v), V = BO ? BO(a) === Object.prototype : a instanceof Object || a.constructor === Object, F = a instanceof Object ? "" : "null prototype", Y = !V && tc && Object(a) === a && tc in a ? z_.call(Ji(a), 8, -1) : F ? "Object" : "", X = V || typeof a.constructor != "function" ? "" : a.constructor.name ? a.constructor.name + " " : "", D = X + (Y || F ? "[" + ds.call(qO.call([], Y || [], F || []), ": ") + "] " : "");
    return U.length === 0 ? D + "{}" : z ? D + "{" + Uk(U, z) + "}" : D + "{ " + ds.call(U, ", ") + " }";
  }
  return String(a);
};
function gN(e, a, t) {
  var n = t.quoteStyle || a, r = pN[n];
  return r + e + r;
}
function Ava(e) {
  return Mi.call(String(e), /"/g, "&quot;");
}
function Jo(e) {
  return !tc || !(typeof e == "object" && (tc in e || typeof e[tc] < "u"));
}
function Wk(e) {
  return Ji(e) === "[object Array]" && Jo(e);
}
function Tva(e) {
  return Ji(e) === "[object Date]" && Jo(e);
}
function GO(e) {
  return Ji(e) === "[object RegExp]" && Jo(e);
}
function $va(e) {
  return Ji(e) === "[object Error]" && Jo(e);
}
function jva(e) {
  return Ji(e) === "[object String]" && Jo(e);
}
function xva(e) {
  return Ji(e) === "[object Number]" && Jo(e);
}
function Sva(e) {
  return Ji(e) === "[object Boolean]" && Jo(e);
}
function mN(e) {
  if (sd)
    return e && typeof e == "object" && e instanceof Symbol;
  if (typeof e == "symbol")
    return !0;
  if (!e || typeof e != "object" || !Fk)
    return !1;
  try {
    return Fk.call(e), !0;
  } catch {
  }
  return !1;
}
function Ova(e) {
  if (!e || typeof e != "object" || !qk)
    return !1;
  try {
    return qk.call(e), !0;
  } catch {
  }
  return !1;
}
var Iva = Object.prototype.hasOwnProperty || function(e) {
  return e in this;
};
function Gs(e, a) {
  return Iva.call(e, a);
}
function Ji(e) {
  return bva.call(e);
}
function Cva(e) {
  if (e.name)
    return e.name;
  var a = vva.call(wva.call(e), /^function\s*([\w$]+)/);
  return a ? a[1] : null;
}
function fN(e, a) {
  if (e.indexOf)
    return e.indexOf(a);
  for (var t = 0, n = e.length; t < n; t++)
    if (e[t] === a)
      return t;
  return -1;
}
function Pva(e) {
  if (!Tm || !e || typeof e != "object")
    return !1;
  try {
    Tm.call(e);
    try {
      $m.call(e);
    } catch {
      return !0;
    }
    return e instanceof Map;
  } catch {
  }
  return !1;
}
function Rva(e) {
  if (!ec || !e || typeof e != "object")
    return !1;
  try {
    ec.call(e, ec);
    try {
      ac.call(e, ac);
    } catch {
      return !0;
    }
    return e instanceof WeakMap;
  } catch {
  }
  return !1;
}
function Dva(e) {
  if (!LO || !e || typeof e != "object")
    return !1;
  try {
    return LO.call(e), !0;
  } catch {
  }
  return !1;
}
function Nva(e) {
  if (!$m || !e || typeof e != "object")
    return !1;
  try {
    $m.call(e);
    try {
      Tm.call(e);
    } catch {
      return !0;
    }
    return e instanceof Set;
  } catch {
  }
  return !1;
}
function Lva(e) {
  if (!ac || !e || typeof e != "object")
    return !1;
  try {
    ac.call(e, ac);
    try {
      ec.call(e, ec);
    } catch {
      return !0;
    }
    return e instanceof WeakSet;
  } catch {
  }
  return !1;
}
function Mva(e) {
  return !e || typeof e != "object" ? !1 : typeof HTMLElement < "u" && e instanceof HTMLElement ? !0 : typeof e.nodeName == "string" && typeof e.getAttribute == "function";
}
function hN(e, a) {
  if (e.length > a.maxStringLength) {
    var t = e.length - a.maxStringLength, n = "... " + t + " more character" + (t > 1 ? "s" : "");
    return hN(z_.call(e, 0, a.maxStringLength), a) + n;
  }
  var r = Eva[a.quoteStyle || "single"];
  r.lastIndex = 0;
  var o = Mi.call(Mi.call(e, r, "\\$1"), /[\x00-\x1f]/g, qva);
  return gN(o, "single", a);
}
function qva(e) {
  var a = e.charCodeAt(0), t = {
    8: "b",
    9: "t",
    10: "n",
    12: "f",
    13: "r"
  }[a];
  return t ? "\\" + t : "\\x" + (a < 16 ? "0" : "") + kva.call(a.toString(16));
}
function Du(e) {
  return "Object(" + e + ")";
}
function wv(e) {
  return e + " { ? }";
}
function VO(e, a, t, n) {
  var r = n ? Uk(t, n) : ds.call(t, ", ");
  return e + " (" + a + ") {" + r + "}";
}
function Fva(e) {
  for (var a = 0; a < e.length; a++)
    if (fN(e[a], `
`) >= 0)
      return !1;
  return !0;
}
function Bva(e, a) {
  var t;
  if (e.indent === "	")
    t = "	";
  else if (typeof e.indent == "number" && e.indent > 0)
    t = ds.call(Array(e.indent + 1), " ");
  else
    return null;
  return {
    base: t,
    prev: ds.call(Array(a + 1), t)
  };
}
function Uk(e, a) {
  if (e.length === 0)
    return "";
  var t = `
` + a.prev + a.base;
  return t + ds.call(e, "," + t) + `
` + a.prev;
}
function Fg(e, a) {
  var t = Wk(e), n = [];
  if (t) {
    n.length = e.length;
    for (var r = 0; r < e.length; r++)
      n[r] = Gs(e, r) ? a(e[r], e) : "";
  }
  var o = typeof bv == "function" ? bv(e) : [], l;
  if (sd) {
    l = {};
    for (var u = 0; u < o.length; u++)
      l["$" + o[u]] = o[u];
  }
  for (var c in e)
    Gs(e, c) && (t && String(Number(c)) === c && c < e.length || sd && l["$" + c] instanceof Symbol || (uN.call(/[^\w$]/, c) ? n.push(a(c, e) + ": " + a(e[c], e)) : n.push(c + ": " + a(e[c], e))));
  if (typeof bv == "function")
    for (var f = 0; f < o.length; f++)
      cN.call(e, o[f]) && n.push("[" + a(o[f]) + "]: " + a(e[o[f]], e));
  return n;
}
var Wva = zf, Uva = Rd, bf = function(e, a, t) {
  for (var n = e, r; (r = n.next) != null; n = r)
    if (r.key === a)
      return n.next = r.next, t || (r.next = /** @type {NonNullable<typeof list.next>} */
      e.next, e.next = r), r;
}, Hva = function(e, a) {
  if (e) {
    var t = bf(e, a);
    return t && t.value;
  }
}, Gva = function(e, a, t) {
  var n = bf(e, a);
  n ? n.value = t : e.next = /** @type {import('./list.d.ts').ListNode<typeof value, typeof key>} */
  {
    // eslint-disable-line no-param-reassign, no-extra-parens
    key: a,
    next: e.next,
    value: t
  };
}, Vva = function(e, a) {
  return e ? !!bf(e, a) : !1;
}, Kva = function(e, a) {
  if (e)
    return bf(e, a, !0);
}, Yva = function() {
  var a, t = {
    assert: function(n) {
      if (!t.has(n))
        throw new Uva("Side channel does not contain " + Wva(n));
    },
    delete: function(n) {
      var r = a && a.next, o = Kva(a, n);
      return o && r && r === o && (a = void 0), !!o;
    },
    get: function(n) {
      return Hva(a, n);
    },
    has: function(n) {
      return Vva(a, n);
    },
    set: function(n, r) {
      a || (a = {
        next: void 0
      }), Gva(
        /** @type {NonNullable<typeof $o>} */
        a,
        n,
        r
      );
    }
  };
  return t;
}, yN = Object, Qva = Error, Xva = EvalError, Zva = RangeError, Jva = ReferenceError, eka = SyntaxError, aka = URIError, tka = Math.abs, nka = Math.floor, rka = Math.max, ska = Math.min, ika = Math.pow, oka = Math.round, lka = Number.isNaN || function(a) {
  return a !== a;
}, dka = lka, uka = function(a) {
  return dka(a) || a === 0 ? a : a < 0 ? -1 : 1;
}, cka = Object.getOwnPropertyDescriptor, pm = cka;
if (pm)
  try {
    pm([], "length");
  } catch {
    pm = null;
  }
var zN = pm, gm = Object.defineProperty || !1;
if (gm)
  try {
    gm({}, "a", { value: 1 });
  } catch {
    gm = !1;
  }
var pka = gm, vv, KO;
function gka() {
  return KO || (KO = 1, vv = function() {
    if (typeof Symbol != "function" || typeof Object.getOwnPropertySymbols != "function")
      return !1;
    if (typeof Symbol.iterator == "symbol")
      return !0;
    var a = {}, t = Symbol("test"), n = Object(t);
    if (typeof t == "string" || Object.prototype.toString.call(t) !== "[object Symbol]" || Object.prototype.toString.call(n) !== "[object Symbol]")
      return !1;
    var r = 42;
    a[t] = r;
    for (var o in a)
      return !1;
    if (typeof Object.keys == "function" && Object.keys(a).length !== 0 || typeof Object.getOwnPropertyNames == "function" && Object.getOwnPropertyNames(a).length !== 0)
      return !1;
    var l = Object.getOwnPropertySymbols(a);
    if (l.length !== 1 || l[0] !== t || !Object.prototype.propertyIsEnumerable.call(a, t))
      return !1;
    if (typeof Object.getOwnPropertyDescriptor == "function") {
      var u = (
        /** @type {PropertyDescriptor} */
        Object.getOwnPropertyDescriptor(a, t)
      );
      if (u.value !== r || u.enumerable !== !0)
        return !1;
    }
    return !0;
  }), vv;
}
var kv, YO;
function mka() {
  if (YO) return kv;
  YO = 1;
  var e = typeof Symbol < "u" && Symbol, a = gka();
  return kv = function() {
    return typeof e != "function" || typeof Symbol != "function" || typeof e("foo") != "symbol" || typeof Symbol("bar") != "symbol" ? !1 : a();
  }, kv;
}
var _v, QO;
function bN() {
  return QO || (QO = 1, _v = typeof Reflect < "u" && Reflect.getPrototypeOf || null), _v;
}
var Ev, XO;
function wN() {
  if (XO) return Ev;
  XO = 1;
  var e = yN;
  return Ev = e.getPrototypeOf || null, Ev;
}
var Av, ZO;
function fka() {
  if (ZO) return Av;
  ZO = 1;
  var e = "Function.prototype.bind called on incompatible ", a = Object.prototype.toString, t = Math.max, n = "[object Function]", r = function(c, f) {
    for (var y = [], z = 0; z < c.length; z += 1)
      y[z] = c[z];
    for (var v = 0; v < f.length; v += 1)
      y[v + c.length] = f[v];
    return y;
  }, o = function(c, f) {
    for (var y = [], z = f, v = 0; z < c.length; z += 1, v += 1)
      y[v] = c[z];
    return y;
  }, l = function(u, c) {
    for (var f = "", y = 0; y < u.length; y += 1)
      f += u[y], y + 1 < u.length && (f += c);
    return f;
  };
  return Av = function(c) {
    var f = this;
    if (typeof f != "function" || a.apply(f) !== n)
      throw new TypeError(e + f);
    for (var y = o(arguments, 1), z, v = function() {
      if (this instanceof z) {
        var w = f.apply(
          this,
          r(y, arguments)
        );
        return Object(w) === w ? w : this;
      }
      return f.apply(
        c,
        r(y, arguments)
      );
    }, O = t(0, f.length - y.length), I = [], A = 0; A < O; A++)
      I[A] = "$" + A;
    if (z = Function("binder", "return function (" + l(I, ",") + "){ return binder.apply(this,arguments); }")(v), f.prototype) {
      var x = function() {
      };
      x.prototype = f.prototype, z.prototype = new x(), x.prototype = null;
    }
    return z;
  }, Av;
}
var Tv, JO;
function wf() {
  if (JO) return Tv;
  JO = 1;
  var e = fka();
  return Tv = Function.prototype.bind || e, Tv;
}
var $v, eI;
function b_() {
  return eI || (eI = 1, $v = Function.prototype.call), $v;
}
var jv, aI;
function vN() {
  return aI || (aI = 1, jv = Function.prototype.apply), jv;
}
var hka = typeof Reflect < "u" && Reflect && Reflect.apply, yka = wf(), zka = vN(), bka = b_(), wka = hka, vka = wka || yka.call(bka, zka), kka = wf(), _ka = Rd, Eka = b_(), Aka = vka, kN = function(a) {
  if (a.length < 1 || typeof a[0] != "function")
    throw new _ka("a function is required");
  return Aka(kka, Eka, a);
}, xv, tI;
function Tka() {
  if (tI) return xv;
  tI = 1;
  var e = kN, a = zN, t;
  try {
    t = /** @type {{ __proto__?: typeof Array.prototype }} */
    [].__proto__ === Array.prototype;
  } catch (l) {
    if (!l || typeof l != "object" || !("code" in l) || l.code !== "ERR_PROTO_ACCESS")
      throw l;
  }
  var n = !!t && a && a(
    Object.prototype,
    /** @type {keyof typeof Object.prototype} */
    "__proto__"
  ), r = Object, o = r.getPrototypeOf;
  return xv = n && typeof n.get == "function" ? e([n.get]) : typeof o == "function" ? (
    /** @type {import('./get')} */
    function(u) {
      return o(u == null ? u : r(u));
    }
  ) : !1, xv;
}
var Sv, nI;
function $ka() {
  if (nI) return Sv;
  nI = 1;
  var e = bN(), a = wN(), t = Tka();
  return Sv = e ? function(r) {
    return e(r);
  } : a ? function(r) {
    if (!r || typeof r != "object" && typeof r != "function")
      throw new TypeError("getProto: not an object");
    return a(r);
  } : t ? function(r) {
    return t(r);
  } : null, Sv;
}
var Ov, rI;
function jka() {
  if (rI) return Ov;
  rI = 1;
  var e = Function.prototype.call, a = Object.prototype.hasOwnProperty, t = wf();
  return Ov = t.call(e, a), Ov;
}
var Ye, xka = yN, Ska = Qva, Oka = Xva, Ika = Zva, Cka = Jva, id = eka, ed = Rd, Pka = aka, Rka = tka, Dka = nka, Nka = rka, Lka = ska, Mka = ika, qka = oka, Fka = uka, _N = Function, Iv = function(e) {
  try {
    return _N('"use strict"; return (' + e + ").constructor;")();
  } catch {
  }
}, cc = zN, Bka = pka, Cv = function() {
  throw new ed();
}, Wka = cc ? function() {
  try {
    return arguments.callee, Cv;
  } catch {
    try {
      return cc(arguments, "callee").get;
    } catch {
      return Cv;
    }
  }
}() : Cv, Ml = mka()(), lt = $ka(), Uka = wN(), Hka = bN(), EN = vN(), Oc = b_(), Ql = {}, Gka = typeof Uint8Array > "u" || !lt ? Ye : lt(Uint8Array), Mo = {
  __proto__: null,
  "%AggregateError%": typeof AggregateError > "u" ? Ye : AggregateError,
  "%Array%": Array,
  "%ArrayBuffer%": typeof ArrayBuffer > "u" ? Ye : ArrayBuffer,
  "%ArrayIteratorPrototype%": Ml && lt ? lt([][Symbol.iterator]()) : Ye,
  "%AsyncFromSyncIteratorPrototype%": Ye,
  "%AsyncFunction%": Ql,
  "%AsyncGenerator%": Ql,
  "%AsyncGeneratorFunction%": Ql,
  "%AsyncIteratorPrototype%": Ql,
  "%Atomics%": typeof Atomics > "u" ? Ye : Atomics,
  "%BigInt%": typeof BigInt > "u" ? Ye : BigInt,
  "%BigInt64Array%": typeof BigInt64Array > "u" ? Ye : BigInt64Array,
  "%BigUint64Array%": typeof BigUint64Array > "u" ? Ye : BigUint64Array,
  "%Boolean%": Boolean,
  "%DataView%": typeof DataView > "u" ? Ye : DataView,
  "%Date%": Date,
  "%decodeURI%": decodeURI,
  "%decodeURIComponent%": decodeURIComponent,
  "%encodeURI%": encodeURI,
  "%encodeURIComponent%": encodeURIComponent,
  "%Error%": Ska,
  "%eval%": eval,
  // eslint-disable-line no-eval
  "%EvalError%": Oka,
  "%Float16Array%": typeof Float16Array > "u" ? Ye : Float16Array,
  "%Float32Array%": typeof Float32Array > "u" ? Ye : Float32Array,
  "%Float64Array%": typeof Float64Array > "u" ? Ye : Float64Array,
  "%FinalizationRegistry%": typeof FinalizationRegistry > "u" ? Ye : FinalizationRegistry,
  "%Function%": _N,
  "%GeneratorFunction%": Ql,
  "%Int8Array%": typeof Int8Array > "u" ? Ye : Int8Array,
  "%Int16Array%": typeof Int16Array > "u" ? Ye : Int16Array,
  "%Int32Array%": typeof Int32Array > "u" ? Ye : Int32Array,
  "%isFinite%": isFinite,
  "%isNaN%": isNaN,
  "%IteratorPrototype%": Ml && lt ? lt(lt([][Symbol.iterator]())) : Ye,
  "%JSON%": typeof JSON == "object" ? JSON : Ye,
  "%Map%": typeof Map > "u" ? Ye : Map,
  "%MapIteratorPrototype%": typeof Map > "u" || !Ml || !lt ? Ye : lt((/* @__PURE__ */ new Map())[Symbol.iterator]()),
  "%Math%": Math,
  "%Number%": Number,
  "%Object%": xka,
  "%Object.getOwnPropertyDescriptor%": cc,
  "%parseFloat%": parseFloat,
  "%parseInt%": parseInt,
  "%Promise%": typeof Promise > "u" ? Ye : Promise,
  "%Proxy%": typeof Proxy > "u" ? Ye : Proxy,
  "%RangeError%": Ika,
  "%ReferenceError%": Cka,
  "%Reflect%": typeof Reflect > "u" ? Ye : Reflect,
  "%RegExp%": RegExp,
  "%Set%": typeof Set > "u" ? Ye : Set,
  "%SetIteratorPrototype%": typeof Set > "u" || !Ml || !lt ? Ye : lt((/* @__PURE__ */ new Set())[Symbol.iterator]()),
  "%SharedArrayBuffer%": typeof SharedArrayBuffer > "u" ? Ye : SharedArrayBuffer,
  "%String%": String,
  "%StringIteratorPrototype%": Ml && lt ? lt(""[Symbol.iterator]()) : Ye,
  "%Symbol%": Ml ? Symbol : Ye,
  "%SyntaxError%": id,
  "%ThrowTypeError%": Wka,
  "%TypedArray%": Gka,
  "%TypeError%": ed,
  "%Uint8Array%": typeof Uint8Array > "u" ? Ye : Uint8Array,
  "%Uint8ClampedArray%": typeof Uint8ClampedArray > "u" ? Ye : Uint8ClampedArray,
  "%Uint16Array%": typeof Uint16Array > "u" ? Ye : Uint16Array,
  "%Uint32Array%": typeof Uint32Array > "u" ? Ye : Uint32Array,
  "%URIError%": Pka,
  "%WeakMap%": typeof WeakMap > "u" ? Ye : WeakMap,
  "%WeakRef%": typeof WeakRef > "u" ? Ye : WeakRef,
  "%WeakSet%": typeof WeakSet > "u" ? Ye : WeakSet,
  "%Function.prototype.call%": Oc,
  "%Function.prototype.apply%": EN,
  "%Object.defineProperty%": Bka,
  "%Object.getPrototypeOf%": Uka,
  "%Math.abs%": Rka,
  "%Math.floor%": Dka,
  "%Math.max%": Nka,
  "%Math.min%": Lka,
  "%Math.pow%": Mka,
  "%Math.round%": qka,
  "%Math.sign%": Fka,
  "%Reflect.getPrototypeOf%": Hka
};
if (lt)
  try {
    null.error;
  } catch (e) {
    var Vka = lt(lt(e));
    Mo["%Error.prototype%"] = Vka;
  }
var Kka = function e(a) {
  var t;
  if (a === "%AsyncFunction%")
    t = Iv("async function () {}");
  else if (a === "%GeneratorFunction%")
    t = Iv("function* () {}");
  else if (a === "%AsyncGeneratorFunction%")
    t = Iv("async function* () {}");
  else if (a === "%AsyncGenerator%") {
    var n = e("%AsyncGeneratorFunction%");
    n && (t = n.prototype);
  } else if (a === "%AsyncIteratorPrototype%") {
    var r = e("%AsyncGenerator%");
    r && lt && (t = lt(r.prototype));
  }
  return Mo[a] = t, t;
}, sI = {
  __proto__: null,
  "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
  "%ArrayPrototype%": ["Array", "prototype"],
  "%ArrayProto_entries%": ["Array", "prototype", "entries"],
  "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
  "%ArrayProto_keys%": ["Array", "prototype", "keys"],
  "%ArrayProto_values%": ["Array", "prototype", "values"],
  "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
  "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
  "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
  "%BooleanPrototype%": ["Boolean", "prototype"],
  "%DataViewPrototype%": ["DataView", "prototype"],
  "%DatePrototype%": ["Date", "prototype"],
  "%ErrorPrototype%": ["Error", "prototype"],
  "%EvalErrorPrototype%": ["EvalError", "prototype"],
  "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
  "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
  "%FunctionPrototype%": ["Function", "prototype"],
  "%Generator%": ["GeneratorFunction", "prototype"],
  "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
  "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
  "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
  "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
  "%JSONParse%": ["JSON", "parse"],
  "%JSONStringify%": ["JSON", "stringify"],
  "%MapPrototype%": ["Map", "prototype"],
  "%NumberPrototype%": ["Number", "prototype"],
  "%ObjectPrototype%": ["Object", "prototype"],
  "%ObjProto_toString%": ["Object", "prototype", "toString"],
  "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
  "%PromisePrototype%": ["Promise", "prototype"],
  "%PromiseProto_then%": ["Promise", "prototype", "then"],
  "%Promise_all%": ["Promise", "all"],
  "%Promise_reject%": ["Promise", "reject"],
  "%Promise_resolve%": ["Promise", "resolve"],
  "%RangeErrorPrototype%": ["RangeError", "prototype"],
  "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
  "%RegExpPrototype%": ["RegExp", "prototype"],
  "%SetPrototype%": ["Set", "prototype"],
  "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
  "%StringPrototype%": ["String", "prototype"],
  "%SymbolPrototype%": ["Symbol", "prototype"],
  "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
  "%TypedArrayPrototype%": ["TypedArray", "prototype"],
  "%TypeErrorPrototype%": ["TypeError", "prototype"],
  "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
  "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
  "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
  "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
  "%URIErrorPrototype%": ["URIError", "prototype"],
  "%WeakMapPrototype%": ["WeakMap", "prototype"],
  "%WeakSetPrototype%": ["WeakSet", "prototype"]
}, Ic = wf(), jm = jka(), Yka = Ic.call(Oc, Array.prototype.concat), Qka = Ic.call(EN, Array.prototype.splice), iI = Ic.call(Oc, String.prototype.replace), xm = Ic.call(Oc, String.prototype.slice), Xka = Ic.call(Oc, RegExp.prototype.exec), Zka = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, Jka = /\\(\\)?/g, e0a = function(a) {
  var t = xm(a, 0, 1), n = xm(a, -1);
  if (t === "%" && n !== "%")
    throw new id("invalid intrinsic syntax, expected closing `%`");
  if (n === "%" && t !== "%")
    throw new id("invalid intrinsic syntax, expected opening `%`");
  var r = [];
  return iI(a, Zka, function(o, l, u, c) {
    r[r.length] = u ? iI(c, Jka, "$1") : l || o;
  }), r;
}, a0a = function(a, t) {
  var n = a, r;
  if (jm(sI, n) && (r = sI[n], n = "%" + r[0] + "%"), jm(Mo, n)) {
    var o = Mo[n];
    if (o === Ql && (o = Kka(n)), typeof o > "u" && !t)
      throw new ed("intrinsic " + a + " exists, but is not available. Please file an issue!");
    return {
      alias: r,
      name: n,
      value: o
    };
  }
  throw new id("intrinsic " + a + " does not exist!");
}, w_ = function(a, t) {
  if (typeof a != "string" || a.length === 0)
    throw new ed("intrinsic name must be a non-empty string");
  if (arguments.length > 1 && typeof t != "boolean")
    throw new ed('"allowMissing" argument must be a boolean');
  if (Xka(/^%?[^%]*%?$/, a) === null)
    throw new id("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
  var n = e0a(a), r = n.length > 0 ? n[0] : "", o = a0a("%" + r + "%", t), l = o.name, u = o.value, c = !1, f = o.alias;
  f && (r = f[0], Qka(n, Yka([0, 1], f)));
  for (var y = 1, z = !0; y < n.length; y += 1) {
    var v = n[y], O = xm(v, 0, 1), I = xm(v, -1);
    if ((O === '"' || O === "'" || O === "`" || I === '"' || I === "'" || I === "`") && O !== I)
      throw new id("property names with quotes must have matching quotes");
    if ((v === "constructor" || !z) && (c = !0), r += "." + v, l = "%" + r + "%", jm(Mo, l))
      u = Mo[l];
    else if (u != null) {
      if (!(v in u)) {
        if (!t)
          throw new ed("base intrinsic for " + a + " exists, but the property is not available.");
        return;
      }
      if (cc && y + 1 >= n.length) {
        var A = cc(u, v);
        z = !!A, z && "get" in A && !("originalValue" in A.get) ? u = A.get : u = u[v];
      } else
        z = jm(u, v), u = u[v];
      z && !c && (Mo[l] = u);
    }
  }
  return u;
}, AN = w_, TN = kN, t0a = TN([AN("%String.prototype.indexOf%")]), $N = function(a, t) {
  var n = (
    /** @type {(this: unknown, ...args: unknown[]) => unknown} */
    AN(a, !!t)
  );
  return typeof n == "function" && t0a(a, ".prototype.") > -1 ? TN(
    /** @type {const} */
    [n]
  ) : n;
}, n0a = w_, Cc = $N, r0a = zf, s0a = Rd, oI = n0a("%Map%", !0), i0a = Cc("Map.prototype.get", !0), o0a = Cc("Map.prototype.set", !0), l0a = Cc("Map.prototype.has", !0), d0a = Cc("Map.prototype.delete", !0), u0a = Cc("Map.prototype.size", !0), jN = !!oI && /** @type {Exclude<import('.'), false>} */
function() {
  var a, t = {
    assert: function(n) {
      if (!t.has(n))
        throw new s0a("Side channel does not contain " + r0a(n));
    },
    delete: function(n) {
      if (a) {
        var r = d0a(a, n);
        return u0a(a) === 0 && (a = void 0), r;
      }
      return !1;
    },
    get: function(n) {
      if (a)
        return i0a(a, n);
    },
    has: function(n) {
      return a ? l0a(a, n) : !1;
    },
    set: function(n, r) {
      a || (a = new oI()), o0a(a, n, r);
    }
  };
  return t;
}, c0a = w_, vf = $N, p0a = zf, Bg = jN, g0a = Rd, ql = c0a("%WeakMap%", !0), m0a = vf("WeakMap.prototype.get", !0), f0a = vf("WeakMap.prototype.set", !0), h0a = vf("WeakMap.prototype.has", !0), y0a = vf("WeakMap.prototype.delete", !0), z0a = ql ? (
  /** @type {Exclude<import('.'), false>} */
  function() {
    var a, t, n = {
      assert: function(r) {
        if (!n.has(r))
          throw new g0a("Side channel does not contain " + p0a(r));
      },
      delete: function(r) {
        if (ql && r && (typeof r == "object" || typeof r == "function")) {
          if (a)
            return y0a(a, r);
        } else if (Bg && t)
          return t.delete(r);
        return !1;
      },
      get: function(r) {
        return ql && r && (typeof r == "object" || typeof r == "function") && a ? m0a(a, r) : t && t.get(r);
      },
      has: function(r) {
        return ql && r && (typeof r == "object" || typeof r == "function") && a ? h0a(a, r) : !!t && t.has(r);
      },
      set: function(r, o) {
        ql && r && (typeof r == "object" || typeof r == "function") ? (a || (a = new ql()), f0a(a, r, o)) : Bg && (t || (t = Bg()), t.set(r, o));
      }
    };
    return n;
  }
) : Bg, b0a = Rd, w0a = zf, v0a = Yva, k0a = jN, _0a = z0a, E0a = _0a || k0a || v0a, A0a = function() {
  var a, t = {
    assert: function(n) {
      if (!t.has(n))
        throw new b0a("Side channel does not contain " + w0a(n));
    },
    delete: function(n) {
      return !!a && a.delete(n);
    },
    get: function(n) {
      return a && a.get(n);
    },
    has: function(n) {
      return !!a && a.has(n);
    },
    set: function(n, r) {
      a || (a = E0a()), a.set(n, r);
    }
  };
  return t;
}, T0a = String.prototype.replace, $0a = /%20/g, Pv = {
  RFC1738: "RFC1738",
  RFC3986: "RFC3986"
}, v_ = {
  default: Pv.RFC3986,
  formatters: {
    RFC1738: function(e) {
      return T0a.call(e, $0a, "+");
    },
    RFC3986: function(e) {
      return String(e);
    }
  },
  RFC1738: Pv.RFC1738,
  RFC3986: Pv.RFC3986
}, j0a = v_, Rv = Object.prototype.hasOwnProperty, Do = Array.isArray, Xr = function() {
  for (var e = [], a = 0; a < 256; ++a)
    e.push("%" + ((a < 16 ? "0" : "") + a.toString(16)).toUpperCase());
  return e;
}(), x0a = function(a) {
  for (; a.length > 1; ) {
    var t = a.pop(), n = t.obj[t.prop];
    if (Do(n)) {
      for (var r = [], o = 0; o < n.length; ++o)
        typeof n[o] < "u" && r.push(n[o]);
      t.obj[t.prop] = r;
    }
  }
}, xN = function(a, t) {
  for (var n = t && t.plainObjects ? { __proto__: null } : {}, r = 0; r < a.length; ++r)
    typeof a[r] < "u" && (n[r] = a[r]);
  return n;
}, S0a = function e(a, t, n) {
  if (!t)
    return a;
  if (typeof t != "object" && typeof t != "function") {
    if (Do(a))
      a.push(t);
    else if (a && typeof a == "object")
      (n && (n.plainObjects || n.allowPrototypes) || !Rv.call(Object.prototype, t)) && (a[t] = !0);
    else
      return [a, t];
    return a;
  }
  if (!a || typeof a != "object")
    return [a].concat(t);
  var r = a;
  return Do(a) && !Do(t) && (r = xN(a, n)), Do(a) && Do(t) ? (t.forEach(function(o, l) {
    if (Rv.call(a, l)) {
      var u = a[l];
      u && typeof u == "object" && o && typeof o == "object" ? a[l] = e(u, o, n) : a.push(o);
    } else
      a[l] = o;
  }), a) : Object.keys(t).reduce(function(o, l) {
    var u = t[l];
    return Rv.call(o, l) ? o[l] = e(o[l], u, n) : o[l] = u, o;
  }, r);
}, O0a = function(a, t) {
  return Object.keys(t).reduce(function(n, r) {
    return n[r] = t[r], n;
  }, a);
}, I0a = function(e, a, t) {
  var n = e.replace(/\+/g, " ");
  if (t === "iso-8859-1")
    return n.replace(/%[0-9a-f]{2}/gi, unescape);
  try {
    return decodeURIComponent(n);
  } catch {
    return n;
  }
}, Dv = 1024, C0a = function(a, t, n, r, o) {
  if (a.length === 0)
    return a;
  var l = a;
  if (typeof a == "symbol" ? l = Symbol.prototype.toString.call(a) : typeof a != "string" && (l = String(a)), n === "iso-8859-1")
    return escape(l).replace(/%u[0-9a-f]{4}/gi, function(O) {
      return "%26%23" + parseInt(O.slice(2), 16) + "%3B";
    });
  for (var u = "", c = 0; c < l.length; c += Dv) {
    for (var f = l.length >= Dv ? l.slice(c, c + Dv) : l, y = [], z = 0; z < f.length; ++z) {
      var v = f.charCodeAt(z);
      if (v === 45 || v === 46 || v === 95 || v === 126 || v >= 48 && v <= 57 || v >= 65 && v <= 90 || v >= 97 && v <= 122 || o === j0a.RFC1738 && (v === 40 || v === 41)) {
        y[y.length] = f.charAt(z);
        continue;
      }
      if (v < 128) {
        y[y.length] = Xr[v];
        continue;
      }
      if (v < 2048) {
        y[y.length] = Xr[192 | v >> 6] + Xr[128 | v & 63];
        continue;
      }
      if (v < 55296 || v >= 57344) {
        y[y.length] = Xr[224 | v >> 12] + Xr[128 | v >> 6 & 63] + Xr[128 | v & 63];
        continue;
      }
      z += 1, v = 65536 + ((v & 1023) << 10 | f.charCodeAt(z) & 1023), y[y.length] = Xr[240 | v >> 18] + Xr[128 | v >> 12 & 63] + Xr[128 | v >> 6 & 63] + Xr[128 | v & 63];
    }
    u += y.join("");
  }
  return u;
}, P0a = function(a) {
  for (var t = [{ obj: { o: a }, prop: "o" }], n = [], r = 0; r < t.length; ++r)
    for (var o = t[r], l = o.obj[o.prop], u = Object.keys(l), c = 0; c < u.length; ++c) {
      var f = u[c], y = l[f];
      typeof y == "object" && y !== null && n.indexOf(y) === -1 && (t.push({ obj: l, prop: f }), n.push(y));
    }
  return x0a(t), a;
}, R0a = function(a) {
  return Object.prototype.toString.call(a) === "[object RegExp]";
}, D0a = function(a) {
  return !a || typeof a != "object" ? !1 : !!(a.constructor && a.constructor.isBuffer && a.constructor.isBuffer(a));
}, N0a = function(a, t) {
  return [].concat(a, t);
}, L0a = function(a, t) {
  if (Do(a)) {
    for (var n = [], r = 0; r < a.length; r += 1)
      n.push(t(a[r]));
    return n;
  }
  return t(a);
}, SN = {
  arrayToObject: xN,
  assign: O0a,
  combine: N0a,
  compact: P0a,
  decode: I0a,
  encode: C0a,
  isBuffer: D0a,
  isRegExp: R0a,
  maybeMap: L0a,
  merge: S0a
}, ON = A0a, mm = SN, nc = v_, M0a = Object.prototype.hasOwnProperty, IN = {
  brackets: function(a) {
    return a + "[]";
  },
  comma: "comma",
  indices: function(a, t) {
    return a + "[" + t + "]";
  },
  repeat: function(a) {
    return a;
  }
}, is = Array.isArray, q0a = Array.prototype.push, CN = function(e, a) {
  q0a.apply(e, is(a) ? a : [a]);
}, F0a = Date.prototype.toISOString, lI = nc.default, et = {
  addQueryPrefix: !1,
  allowDots: !1,
  allowEmptyArrays: !1,
  arrayFormat: "indices",
  charset: "utf-8",
  charsetSentinel: !1,
  commaRoundTrip: !1,
  delimiter: "&",
  encode: !0,
  encodeDotInKeys: !1,
  encoder: mm.encode,
  encodeValuesOnly: !1,
  filter: void 0,
  format: lI,
  formatter: nc.formatters[lI],
  // deprecated
  indices: !1,
  serializeDate: function(a) {
    return F0a.call(a);
  },
  skipNulls: !1,
  strictNullHandling: !1
}, B0a = function(a) {
  return typeof a == "string" || typeof a == "number" || typeof a == "boolean" || typeof a == "symbol" || typeof a == "bigint";
}, Nv = {}, W0a = function e(a, t, n, r, o, l, u, c, f, y, z, v, O, I, A, x, w, j) {
  for (var S = a, P = j, M = 0, G = !1; (P = P.get(Nv)) !== void 0 && !G; ) {
    var U = P.get(a);
    if (M += 1, typeof U < "u") {
      if (U === M)
        throw new RangeError("Cyclic object value");
      G = !0;
    }
    typeof P.get(Nv) > "u" && (M = 0);
  }
  if (typeof y == "function" ? S = y(t, S) : S instanceof Date ? S = O(S) : n === "comma" && is(S) && (S = mm.maybeMap(S, function(ze) {
    return ze instanceof Date ? O(ze) : ze;
  })), S === null) {
    if (l)
      return f && !x ? f(t, et.encoder, w, "key", I) : t;
    S = "";
  }
  if (B0a(S) || mm.isBuffer(S)) {
    if (f) {
      var V = x ? t : f(t, et.encoder, w, "key", I);
      return [A(V) + "=" + A(f(S, et.encoder, w, "value", I))];
    }
    return [A(t) + "=" + A(String(S))];
  }
  var F = [];
  if (typeof S > "u")
    return F;
  var Y;
  if (n === "comma" && is(S))
    x && f && (S = mm.maybeMap(S, f)), Y = [{ value: S.length > 0 ? S.join(",") || null : void 0 }];
  else if (is(y))
    Y = y;
  else {
    var X = Object.keys(S);
    Y = z ? X.sort(z) : X;
  }
  var D = c ? String(t).replace(/\./g, "%2E") : String(t), de = r && is(S) && S.length === 1 ? D + "[]" : D;
  if (o && is(S) && S.length === 0)
    return de + "[]";
  for (var ve = 0; ve < Y.length; ++ve) {
    var we = Y[ve], Pe = typeof we == "object" && we && typeof we.value < "u" ? we.value : S[we];
    if (!(u && Pe === null)) {
      var me = v && c ? String(we).replace(/\./g, "%2E") : String(we), ta = is(S) ? typeof n == "function" ? n(de, me) : de : de + (v ? "." + me : "[" + me + "]");
      j.set(a, M);
      var Dn = ON();
      Dn.set(Nv, j), CN(F, e(
        Pe,
        ta,
        n,
        r,
        o,
        l,
        u,
        c,
        n === "comma" && x && is(S) ? null : f,
        y,
        z,
        v,
        O,
        I,
        A,
        x,
        w,
        Dn
      ));
    }
  }
  return F;
}, U0a = function(a) {
  if (!a)
    return et;
  if (typeof a.allowEmptyArrays < "u" && typeof a.allowEmptyArrays != "boolean")
    throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
  if (typeof a.encodeDotInKeys < "u" && typeof a.encodeDotInKeys != "boolean")
    throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
  if (a.encoder !== null && typeof a.encoder < "u" && typeof a.encoder != "function")
    throw new TypeError("Encoder has to be a function.");
  var t = a.charset || et.charset;
  if (typeof a.charset < "u" && a.charset !== "utf-8" && a.charset !== "iso-8859-1")
    throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
  var n = nc.default;
  if (typeof a.format < "u") {
    if (!M0a.call(nc.formatters, a.format))
      throw new TypeError("Unknown format option provided.");
    n = a.format;
  }
  var r = nc.formatters[n], o = et.filter;
  (typeof a.filter == "function" || is(a.filter)) && (o = a.filter);
  var l;
  if (a.arrayFormat in IN ? l = a.arrayFormat : "indices" in a ? l = a.indices ? "indices" : "repeat" : l = et.arrayFormat, "commaRoundTrip" in a && typeof a.commaRoundTrip != "boolean")
    throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
  var u = typeof a.allowDots > "u" ? a.encodeDotInKeys === !0 ? !0 : et.allowDots : !!a.allowDots;
  return {
    addQueryPrefix: typeof a.addQueryPrefix == "boolean" ? a.addQueryPrefix : et.addQueryPrefix,
    allowDots: u,
    allowEmptyArrays: typeof a.allowEmptyArrays == "boolean" ? !!a.allowEmptyArrays : et.allowEmptyArrays,
    arrayFormat: l,
    charset: t,
    charsetSentinel: typeof a.charsetSentinel == "boolean" ? a.charsetSentinel : et.charsetSentinel,
    commaRoundTrip: !!a.commaRoundTrip,
    delimiter: typeof a.delimiter > "u" ? et.delimiter : a.delimiter,
    encode: typeof a.encode == "boolean" ? a.encode : et.encode,
    encodeDotInKeys: typeof a.encodeDotInKeys == "boolean" ? a.encodeDotInKeys : et.encodeDotInKeys,
    encoder: typeof a.encoder == "function" ? a.encoder : et.encoder,
    encodeValuesOnly: typeof a.encodeValuesOnly == "boolean" ? a.encodeValuesOnly : et.encodeValuesOnly,
    filter: o,
    format: n,
    formatter: r,
    serializeDate: typeof a.serializeDate == "function" ? a.serializeDate : et.serializeDate,
    skipNulls: typeof a.skipNulls == "boolean" ? a.skipNulls : et.skipNulls,
    sort: typeof a.sort == "function" ? a.sort : null,
    strictNullHandling: typeof a.strictNullHandling == "boolean" ? a.strictNullHandling : et.strictNullHandling
  };
}, H0a = function(e, a) {
  var t = e, n = U0a(a), r, o;
  typeof n.filter == "function" ? (o = n.filter, t = o("", t)) : is(n.filter) && (o = n.filter, r = o);
  var l = [];
  if (typeof t != "object" || t === null)
    return "";
  var u = IN[n.arrayFormat], c = u === "comma" && n.commaRoundTrip;
  r || (r = Object.keys(t)), n.sort && r.sort(n.sort);
  for (var f = ON(), y = 0; y < r.length; ++y) {
    var z = r[y], v = t[z];
    n.skipNulls && v === null || CN(l, W0a(
      v,
      z,
      u,
      c,
      n.allowEmptyArrays,
      n.strictNullHandling,
      n.skipNulls,
      n.encodeDotInKeys,
      n.encode ? n.encoder : null,
      n.filter,
      n.sort,
      n.allowDots,
      n.serializeDate,
      n.format,
      n.formatter,
      n.encodeValuesOnly,
      n.charset,
      f
    ));
  }
  var O = l.join(n.delimiter), I = n.addQueryPrefix === !0 ? "?" : "";
  return n.charsetSentinel && (n.charset === "iso-8859-1" ? I += "utf8=%26%2310003%3B&" : I += "utf8=%E2%9C%93&"), O.length > 0 ? I + O : "";
}, Fo = SN, Hk = Object.prototype.hasOwnProperty, dI = Array.isArray, Fa = {
  allowDots: !1,
  allowEmptyArrays: !1,
  allowPrototypes: !1,
  allowSparse: !1,
  arrayLimit: 20,
  charset: "utf-8",
  charsetSentinel: !1,
  comma: !1,
  decodeDotInKeys: !1,
  decoder: Fo.decode,
  delimiter: "&",
  depth: 5,
  duplicates: "combine",
  ignoreQueryPrefix: !1,
  interpretNumericEntities: !1,
  parameterLimit: 1e3,
  parseArrays: !0,
  plainObjects: !1,
  strictDepth: !1,
  strictNullHandling: !1,
  throwOnLimitExceeded: !1
}, G0a = function(e) {
  return e.replace(/&#(\d+);/g, function(a, t) {
    return String.fromCharCode(parseInt(t, 10));
  });
}, PN = function(e, a, t) {
  if (e && typeof e == "string" && a.comma && e.indexOf(",") > -1)
    return e.split(",");
  if (a.throwOnLimitExceeded && t >= a.arrayLimit)
    throw new RangeError("Array limit exceeded. Only " + a.arrayLimit + " element" + (a.arrayLimit === 1 ? "" : "s") + " allowed in an array.");
  return e;
}, V0a = "utf8=%26%2310003%3B", K0a = "utf8=%E2%9C%93", Y0a = function(a, t) {
  var n = { __proto__: null }, r = t.ignoreQueryPrefix ? a.replace(/^\?/, "") : a;
  r = r.replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  var o = t.parameterLimit === 1 / 0 ? void 0 : t.parameterLimit, l = r.split(
    t.delimiter,
    t.throwOnLimitExceeded ? o + 1 : o
  );
  if (t.throwOnLimitExceeded && l.length > o)
    throw new RangeError("Parameter limit exceeded. Only " + o + " parameter" + (o === 1 ? "" : "s") + " allowed.");
  var u = -1, c, f = t.charset;
  if (t.charsetSentinel)
    for (c = 0; c < l.length; ++c)
      l[c].indexOf("utf8=") === 0 && (l[c] === K0a ? f = "utf-8" : l[c] === V0a && (f = "iso-8859-1"), u = c, c = l.length);
  for (c = 0; c < l.length; ++c)
    if (c !== u) {
      var y = l[c], z = y.indexOf("]="), v = z === -1 ? y.indexOf("=") : z + 1, O, I;
      v === -1 ? (O = t.decoder(y, Fa.decoder, f, "key"), I = t.strictNullHandling ? null : "") : (O = t.decoder(y.slice(0, v), Fa.decoder, f, "key"), I = Fo.maybeMap(
        PN(
          y.slice(v + 1),
          t,
          dI(n[O]) ? n[O].length : 0
        ),
        function(x) {
          return t.decoder(x, Fa.decoder, f, "value");
        }
      )), I && t.interpretNumericEntities && f === "iso-8859-1" && (I = G0a(String(I))), y.indexOf("[]=") > -1 && (I = dI(I) ? [I] : I);
      var A = Hk.call(n, O);
      A && t.duplicates === "combine" ? n[O] = Fo.combine(n[O], I) : (!A || t.duplicates === "last") && (n[O] = I);
    }
  return n;
}, Q0a = function(e, a, t, n) {
  var r = 0;
  if (e.length > 0 && e[e.length - 1] === "[]") {
    var o = e.slice(0, -1).join("");
    r = Array.isArray(a) && a[o] ? a[o].length : 0;
  }
  for (var l = n ? a : PN(a, t, r), u = e.length - 1; u >= 0; --u) {
    var c, f = e[u];
    if (f === "[]" && t.parseArrays)
      c = t.allowEmptyArrays && (l === "" || t.strictNullHandling && l === null) ? [] : Fo.combine([], l);
    else {
      c = t.plainObjects ? { __proto__: null } : {};
      var y = f.charAt(0) === "[" && f.charAt(f.length - 1) === "]" ? f.slice(1, -1) : f, z = t.decodeDotInKeys ? y.replace(/%2E/g, ".") : y, v = parseInt(z, 10);
      !t.parseArrays && z === "" ? c = { 0: l } : !isNaN(v) && f !== z && String(v) === z && v >= 0 && t.parseArrays && v <= t.arrayLimit ? (c = [], c[v] = l) : z !== "__proto__" && (c[z] = l);
    }
    l = c;
  }
  return l;
}, X0a = function(a, t, n, r) {
  if (a) {
    var o = n.allowDots ? a.replace(/\.([^.[]+)/g, "[$1]") : a, l = /(\[[^[\]]*])/, u = /(\[[^[\]]*])/g, c = n.depth > 0 && l.exec(o), f = c ? o.slice(0, c.index) : o, y = [];
    if (f) {
      if (!n.plainObjects && Hk.call(Object.prototype, f) && !n.allowPrototypes)
        return;
      y.push(f);
    }
    for (var z = 0; n.depth > 0 && (c = u.exec(o)) !== null && z < n.depth; ) {
      if (z += 1, !n.plainObjects && Hk.call(Object.prototype, c[1].slice(1, -1)) && !n.allowPrototypes)
        return;
      y.push(c[1]);
    }
    if (c) {
      if (n.strictDepth === !0)
        throw new RangeError("Input depth exceeded depth option of " + n.depth + " and strictDepth is true");
      y.push("[" + o.slice(c.index) + "]");
    }
    return Q0a(y, t, n, r);
  }
}, Z0a = function(a) {
  if (!a)
    return Fa;
  if (typeof a.allowEmptyArrays < "u" && typeof a.allowEmptyArrays != "boolean")
    throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
  if (typeof a.decodeDotInKeys < "u" && typeof a.decodeDotInKeys != "boolean")
    throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
  if (a.decoder !== null && typeof a.decoder < "u" && typeof a.decoder != "function")
    throw new TypeError("Decoder has to be a function.");
  if (typeof a.charset < "u" && a.charset !== "utf-8" && a.charset !== "iso-8859-1")
    throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
  if (typeof a.throwOnLimitExceeded < "u" && typeof a.throwOnLimitExceeded != "boolean")
    throw new TypeError("`throwOnLimitExceeded` option must be a boolean");
  var t = typeof a.charset > "u" ? Fa.charset : a.charset, n = typeof a.duplicates > "u" ? Fa.duplicates : a.duplicates;
  if (n !== "combine" && n !== "first" && n !== "last")
    throw new TypeError("The duplicates option must be either combine, first, or last");
  var r = typeof a.allowDots > "u" ? a.decodeDotInKeys === !0 ? !0 : Fa.allowDots : !!a.allowDots;
  return {
    allowDots: r,
    allowEmptyArrays: typeof a.allowEmptyArrays == "boolean" ? !!a.allowEmptyArrays : Fa.allowEmptyArrays,
    allowPrototypes: typeof a.allowPrototypes == "boolean" ? a.allowPrototypes : Fa.allowPrototypes,
    allowSparse: typeof a.allowSparse == "boolean" ? a.allowSparse : Fa.allowSparse,
    arrayLimit: typeof a.arrayLimit == "number" ? a.arrayLimit : Fa.arrayLimit,
    charset: t,
    charsetSentinel: typeof a.charsetSentinel == "boolean" ? a.charsetSentinel : Fa.charsetSentinel,
    comma: typeof a.comma == "boolean" ? a.comma : Fa.comma,
    decodeDotInKeys: typeof a.decodeDotInKeys == "boolean" ? a.decodeDotInKeys : Fa.decodeDotInKeys,
    decoder: typeof a.decoder == "function" ? a.decoder : Fa.decoder,
    delimiter: typeof a.delimiter == "string" || Fo.isRegExp(a.delimiter) ? a.delimiter : Fa.delimiter,
    // eslint-disable-next-line no-implicit-coercion, no-extra-parens
    depth: typeof a.depth == "number" || a.depth === !1 ? +a.depth : Fa.depth,
    duplicates: n,
    ignoreQueryPrefix: a.ignoreQueryPrefix === !0,
    interpretNumericEntities: typeof a.interpretNumericEntities == "boolean" ? a.interpretNumericEntities : Fa.interpretNumericEntities,
    parameterLimit: typeof a.parameterLimit == "number" ? a.parameterLimit : Fa.parameterLimit,
    parseArrays: a.parseArrays !== !1,
    plainObjects: typeof a.plainObjects == "boolean" ? a.plainObjects : Fa.plainObjects,
    strictDepth: typeof a.strictDepth == "boolean" ? !!a.strictDepth : Fa.strictDepth,
    strictNullHandling: typeof a.strictNullHandling == "boolean" ? a.strictNullHandling : Fa.strictNullHandling,
    throwOnLimitExceeded: typeof a.throwOnLimitExceeded == "boolean" ? a.throwOnLimitExceeded : !1
  };
}, J0a = function(e, a) {
  var t = Z0a(a);
  if (e === "" || e === null || typeof e > "u")
    return t.plainObjects ? { __proto__: null } : {};
  for (var n = typeof e == "string" ? Y0a(e, t) : e, r = t.plainObjects ? { __proto__: null } : {}, o = Object.keys(n), l = 0; l < o.length; ++l) {
    var u = o[l], c = X0a(u, n[u], t, typeof e == "string");
    r = Fo.merge(r, c, t);
  }
  return t.allowSparse === !0 ? r : Fo.compact(r);
}, e_a = H0a, a_a = J0a, t_a = v_, n_a = {
  formats: t_a,
  parse: a_a,
  stringify: e_a
};
const r_a = /* @__PURE__ */ c0(n_a);
var s_a = mva;
function tr() {
  this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
}
var i_a = /^([a-z0-9.+-]+:)/i, o_a = /:[0-9]*$/, l_a = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/, d_a = [
  "<",
  ">",
  '"',
  "`",
  " ",
  "\r",
  `
`,
  "	"
], u_a = [
  "{",
  "}",
  "|",
  "\\",
  "^",
  "`"
].concat(d_a), Gk = ["'"].concat(u_a), uI = [
  "%",
  "/",
  "?",
  ";",
  "#"
].concat(Gk), cI = [
  "/",
  "?",
  "#"
], c_a = 255, pI = /^[+a-z0-9A-Z_-]{0,63}$/, p_a = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, g_a = {
  javascript: !0,
  "javascript:": !0
}, Vk = {
  javascript: !0,
  "javascript:": !0
}, ad = {
  http: !0,
  https: !0,
  ftp: !0,
  gopher: !0,
  file: !0,
  "http:": !0,
  "https:": !0,
  "ftp:": !0,
  "gopher:": !0,
  "file:": !0
}, Kk = r_a;
function Pc(e, a, t) {
  if (e && typeof e == "object" && e instanceof tr)
    return e;
  var n = new tr();
  return n.parse(e, a, t), n;
}
tr.prototype.parse = function(e, a, t) {
  if (typeof e != "string")
    throw new TypeError("Parameter 'url' must be a string, not " + typeof e);
  var n = e.indexOf("?"), r = n !== -1 && n < e.indexOf("#") ? "?" : "#", o = e.split(r), l = /\\/g;
  o[0] = o[0].replace(l, "/"), e = o.join(r);
  var u = e;
  if (u = u.trim(), !t && e.split("#").length === 1) {
    var c = l_a.exec(u);
    if (c)
      return this.path = u, this.href = u, this.pathname = c[1], c[2] ? (this.search = c[2], a ? this.query = Kk.parse(this.search.substr(1)) : this.query = this.search.substr(1)) : a && (this.search = "", this.query = {}), this;
  }
  var f = i_a.exec(u);
  if (f) {
    f = f[0];
    var y = f.toLowerCase();
    this.protocol = y, u = u.substr(f.length);
  }
  if (t || f || u.match(/^\/\/[^@/]+@[^@/]+/)) {
    var z = u.substr(0, 2) === "//";
    z && !(f && Vk[f]) && (u = u.substr(2), this.slashes = !0);
  }
  if (!Vk[f] && (z || f && !ad[f])) {
    for (var v = -1, O = 0; O < cI.length; O++) {
      var I = u.indexOf(cI[O]);
      I !== -1 && (v === -1 || I < v) && (v = I);
    }
    var A, x;
    v === -1 ? x = u.lastIndexOf("@") : x = u.lastIndexOf("@", v), x !== -1 && (A = u.slice(0, x), u = u.slice(x + 1), this.auth = decodeURIComponent(A)), v = -1;
    for (var O = 0; O < uI.length; O++) {
      var I = u.indexOf(uI[O]);
      I !== -1 && (v === -1 || I < v) && (v = I);
    }
    v === -1 && (v = u.length), this.host = u.slice(0, v), u = u.slice(v), this.parseHost(), this.hostname = this.hostname || "";
    var w = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!w)
      for (var j = this.hostname.split(/\./), O = 0, S = j.length; O < S; O++) {
        var P = j[O];
        if (P && !P.match(pI)) {
          for (var M = "", G = 0, U = P.length; G < U; G++)
            P.charCodeAt(G) > 127 ? M += "x" : M += P[G];
          if (!M.match(pI)) {
            var V = j.slice(0, O), F = j.slice(O + 1), Y = P.match(p_a);
            Y && (V.push(Y[1]), F.unshift(Y[2])), F.length && (u = "/" + F.join(".") + u), this.hostname = V.join(".");
            break;
          }
        }
      }
    this.hostname.length > c_a ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), w || (this.hostname = s_a.toASCII(this.hostname));
    var X = this.port ? ":" + this.port : "", D = this.hostname || "";
    this.host = D + X, this.href += this.host, w && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), u[0] !== "/" && (u = "/" + u));
  }
  if (!g_a[y])
    for (var O = 0, S = Gk.length; O < S; O++) {
      var de = Gk[O];
      if (u.indexOf(de) !== -1) {
        var ve = encodeURIComponent(de);
        ve === de && (ve = escape(de)), u = u.split(de).join(ve);
      }
    }
  var we = u.indexOf("#");
  we !== -1 && (this.hash = u.substr(we), u = u.slice(0, we));
  var Pe = u.indexOf("?");
  if (Pe !== -1 ? (this.search = u.substr(Pe), this.query = u.substr(Pe + 1), a && (this.query = Kk.parse(this.query)), u = u.slice(0, Pe)) : a && (this.search = "", this.query = {}), u && (this.pathname = u), ad[y] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
    var X = this.pathname || "", me = this.search || "";
    this.path = X + me;
  }
  return this.href = this.format(), this;
};
function m_a(e) {
  return typeof e == "string" && (e = Pc(e)), e instanceof tr ? e.format() : tr.prototype.format.call(e);
}
tr.prototype.format = function() {
  var e = this.auth || "";
  e && (e = encodeURIComponent(e), e = e.replace(/%3A/i, ":"), e += "@");
  var a = this.protocol || "", t = this.pathname || "", n = this.hash || "", r = !1, o = "";
  this.host ? r = e + this.host : this.hostname && (r = e + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (r += ":" + this.port)), this.query && typeof this.query == "object" && Object.keys(this.query).length && (o = Kk.stringify(this.query, {
    arrayFormat: "repeat",
    addQueryPrefix: !1
  }));
  var l = this.search || o && "?" + o || "";
  return a && a.substr(-1) !== ":" && (a += ":"), this.slashes || (!a || ad[a]) && r !== !1 ? (r = "//" + (r || ""), t && t.charAt(0) !== "/" && (t = "/" + t)) : r || (r = ""), n && n.charAt(0) !== "#" && (n = "#" + n), l && l.charAt(0) !== "?" && (l = "?" + l), t = t.replace(/[?#]/g, function(u) {
    return encodeURIComponent(u);
  }), l = l.replace("#", "%23"), a + r + t + l + n;
};
function f_a(e, a) {
  return Pc(e, !1, !0).resolve(a);
}
tr.prototype.resolve = function(e) {
  return this.resolveObject(Pc(e, !1, !0)).format();
};
function h_a(e, a) {
  return e ? Pc(e, !1, !0).resolveObject(a) : a;
}
tr.prototype.resolveObject = function(e) {
  if (typeof e == "string") {
    var a = new tr();
    a.parse(e, !1, !0), e = a;
  }
  for (var t = new tr(), n = Object.keys(this), r = 0; r < n.length; r++) {
    var o = n[r];
    t[o] = this[o];
  }
  if (t.hash = e.hash, e.href === "")
    return t.href = t.format(), t;
  if (e.slashes && !e.protocol) {
    for (var l = Object.keys(e), u = 0; u < l.length; u++) {
      var c = l[u];
      c !== "protocol" && (t[c] = e[c]);
    }
    return ad[t.protocol] && t.hostname && !t.pathname && (t.pathname = "/", t.path = t.pathname), t.href = t.format(), t;
  }
  if (e.protocol && e.protocol !== t.protocol) {
    if (!ad[e.protocol]) {
      for (var f = Object.keys(e), y = 0; y < f.length; y++) {
        var z = f[y];
        t[z] = e[z];
      }
      return t.href = t.format(), t;
    }
    if (t.protocol = e.protocol, !e.host && !Vk[e.protocol]) {
      for (var S = (e.pathname || "").split("/"); S.length && !(e.host = S.shift()); )
        ;
      e.host || (e.host = ""), e.hostname || (e.hostname = ""), S[0] !== "" && S.unshift(""), S.length < 2 && S.unshift(""), t.pathname = S.join("/");
    } else
      t.pathname = e.pathname;
    if (t.search = e.search, t.query = e.query, t.host = e.host || "", t.auth = e.auth, t.hostname = e.hostname || e.host, t.port = e.port, t.pathname || t.search) {
      var v = t.pathname || "", O = t.search || "";
      t.path = v + O;
    }
    return t.slashes = t.slashes || e.slashes, t.href = t.format(), t;
  }
  var I = t.pathname && t.pathname.charAt(0) === "/", A = e.host || e.pathname && e.pathname.charAt(0) === "/", x = A || I || t.host && e.pathname, w = x, j = t.pathname && t.pathname.split("/") || [], S = e.pathname && e.pathname.split("/") || [], P = t.protocol && !ad[t.protocol];
  if (P && (t.hostname = "", t.port = null, t.host && (j[0] === "" ? j[0] = t.host : j.unshift(t.host)), t.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && (S[0] === "" ? S[0] = e.host : S.unshift(e.host)), e.host = null), x = x && (S[0] === "" || j[0] === "")), A)
    t.host = e.host || e.host === "" ? e.host : t.host, t.hostname = e.hostname || e.hostname === "" ? e.hostname : t.hostname, t.search = e.search, t.query = e.query, j = S;
  else if (S.length)
    j || (j = []), j.pop(), j = j.concat(S), t.search = e.search, t.query = e.query;
  else if (e.search != null) {
    if (P) {
      t.host = j.shift(), t.hostname = t.host;
      var M = t.host && t.host.indexOf("@") > 0 ? t.host.split("@") : !1;
      M && (t.auth = M.shift(), t.hostname = M.shift(), t.host = t.hostname);
    }
    return t.search = e.search, t.query = e.query, (t.pathname !== null || t.search !== null) && (t.path = (t.pathname ? t.pathname : "") + (t.search ? t.search : "")), t.href = t.format(), t;
  }
  if (!j.length)
    return t.pathname = null, t.search ? t.path = "/" + t.search : t.path = null, t.href = t.format(), t;
  for (var G = j.slice(-1)[0], U = (t.host || e.host || j.length > 1) && (G === "." || G === "..") || G === "", V = 0, F = j.length; F >= 0; F--)
    G = j[F], G === "." ? j.splice(F, 1) : G === ".." ? (j.splice(F, 1), V++) : V && (j.splice(F, 1), V--);
  if (!x && !w)
    for (; V--; V)
      j.unshift("..");
  x && j[0] !== "" && (!j[0] || j[0].charAt(0) !== "/") && j.unshift(""), U && j.join("/").substr(-1) !== "/" && j.push("");
  var Y = j[0] === "" || j[0] && j[0].charAt(0) === "/";
  if (P) {
    t.hostname = Y ? "" : j.length ? j.shift() : "", t.host = t.hostname;
    var M = t.host && t.host.indexOf("@") > 0 ? t.host.split("@") : !1;
    M && (t.auth = M.shift(), t.hostname = M.shift(), t.host = t.hostname);
  }
  return x = x || t.host && j.length, x && !Y && j.unshift(""), j.length > 0 ? t.pathname = j.join("/") : (t.pathname = null, t.path = null), (t.pathname !== null || t.search !== null) && (t.path = (t.pathname ? t.pathname : "") + (t.search ? t.search : "")), t.auth = e.auth || t.auth, t.slashes = t.slashes || e.slashes, t.href = t.format(), t;
};
tr.prototype.parseHost = function() {
  var e = this.host, a = o_a.exec(e);
  a && (a = a[0], a !== ":" && (this.port = a.substr(1)), e = e.substr(0, e.length - a.length)), e && (this.hostname = e);
};
var y_a = Pc, z_a = f_a, RN = h_a, b_a = m_a, w_a = tr;
function v_a(e, a) {
  for (var t = 0, n = e.length - 1; n >= 0; n--) {
    var r = e[n];
    r === "." ? e.splice(n, 1) : r === ".." ? (e.splice(n, 1), t++) : t && (e.splice(n, 1), t--);
  }
  if (a)
    for (; t--; t)
      e.unshift("..");
  return e;
}
function k_a() {
  for (var e = "", a = !1, t = arguments.length - 1; t >= -1 && !a; t--) {
    var n = t >= 0 ? arguments[t] : "/";
    if (typeof n != "string")
      throw new TypeError("Arguments to path.resolve must be strings");
    if (!n)
      continue;
    e = n + "/" + e, a = n.charAt(0) === "/";
  }
  return e = v_a(__a(e.split("/"), function(r) {
    return !!r;
  }), !a).join("/"), (a ? "/" : "") + e || ".";
}
function __a(e, a) {
  if (e.filter) return e.filter(a);
  for (var t = [], n = 0; n < e.length; n++)
    a(e[n], n, e) && t.push(e[n]);
  return t;
}
var DN = function(e) {
  function a() {
    var n = this || self;
    return delete e.prototype.__magic__, n;
  }
  if (typeof globalThis == "object")
    return globalThis;
  if (this)
    return a();
  e.defineProperty(e.prototype, "__magic__", {
    configurable: !0,
    get: a
  });
  var t = __magic__;
  return t;
}(Object), E_a = (
  /** @type {formatImport}*/
  b_a
), NN = (
  /** @type {parseImport}*/
  y_a
), LN = (
  /** @type {resolveImport}*/
  z_a
), MN = (
  /** @type {UrlImport}*/
  w_a
), Ki = DN.URL, qN = DN.URLSearchParams, A_a = /%/g, T_a = /\\/g, $_a = /\n/g, j_a = /\r/g, x_a = /\t/g, S_a = 47;
function O_a(e) {
  var a = (
    /** @type {URL|null} */
    e ?? null
  );
  return !!(a !== null && (a != null && a.href) && (a != null && a.origin));
}
function I_a(e) {
  if (e.hostname !== "")
    throw new TypeError('File URL host must be "localhost" or empty on browser');
  for (var a = e.pathname, t = 0; t < a.length; t++)
    if (a[t] === "%") {
      var n = a.codePointAt(t + 2) | 32;
      if (a[t + 1] === "2" && n === 102)
        throw new TypeError("File URL path must not include encoded / characters");
    }
  return decodeURIComponent(a);
}
function C_a(e) {
  return e.includes("%") && (e = e.replace(A_a, "%25")), e.includes("\\") && (e = e.replace(T_a, "%5C")), e.includes(`
`) && (e = e.replace($_a, "%0A")), e.includes("\r") && (e = e.replace(j_a, "%0D")), e.includes("	") && (e = e.replace(x_a, "%09")), e;
}
var FN = (
  /**
   * @type {domainToASCII}
   */
  function(a) {
    if (typeof a > "u")
      throw new TypeError('The "domain" argument must be specified');
    return new Ki("http://" + a).hostname;
  }
), BN = (
  /**
   * @type {domainToUnicode}
   */
  function(a) {
    if (typeof a > "u")
      throw new TypeError('The "domain" argument must be specified');
    return new Ki("http://" + a).hostname;
  }
), WN = (
  /**
   * @type {(url: string) => URL}
   */
  function(a) {
    var t = new Ki("file://"), n = k_a(a), r = a.charCodeAt(a.length - 1);
    return r === S_a && n[n.length - 1] !== "/" && (n += "/"), t.pathname = C_a(n), t;
  }
), UN = (
  /**
   * @type {fileURLToPath & ((path: string | URL) => string)}
   */
  function(a) {
    if (!O_a(a) && typeof a != "string")
      throw new TypeError('The "path" argument must be of type string or an instance of URL. Received type ' + typeof a + " (" + a + ")");
    var t = new Ki(a);
    if (t.protocol !== "file:")
      throw new TypeError("The URL must be of scheme file");
    return I_a(t);
  }
), HN = (
  /**
   * @type {(
   *   ((urlObject: URL, options?: URLFormatOptions) => string) &
   *   ((urlObject: UrlObject | string, options?: never) => string)
   * )}
   */
  function(a, t) {
    var n, r, o, l;
    if (t === void 0 && (t = {}), !(a instanceof Ki))
      return E_a(a);
    if (typeof t != "object" || t === null)
      throw new TypeError('The "options" argument must be of type object.');
    var u = (n = t.auth) != null ? n : !0, c = (r = t.fragment) != null ? r : !0, f = (o = t.search) != null ? o : !0;
    (l = t.unicode) != null;
    var y = new Ki(a.toString());
    return u || (y.username = "", y.password = ""), c || (y.hash = ""), f || (y.search = ""), y.toString();
  }
), P_a = {
  format: HN,
  parse: NN,
  resolve: LN,
  resolveObject: RN,
  Url: MN,
  URL: Ki,
  URLSearchParams: qN,
  domainToASCII: FN,
  domainToUnicode: BN,
  pathToFileURL: WN,
  fileURLToPath: UN
};
const R_a = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  URL: Ki,
  URLSearchParams: qN,
  Url: MN,
  default: P_a,
  domainToASCII: FN,
  domainToUnicode: BN,
  fileURLToPath: UN,
  format: HN,
  parse: NN,
  pathToFileURL: WN,
  resolve: LN,
  resolveObject: RN
}, Symbol.toStringTag, { value: "Module" })), D_a = /* @__PURE__ */ Nm(R_a);
Object.defineProperty(Pd, "__esModule", {
  value: !0
});
Pd.default = void 0;
var Sm = N_a(D_a);
function N_a(e) {
  return e && e.__esModule ? e : { default: e };
}
const L_a = /href=(["'])([^"']+)\1/i;
function Yk(e) {
  return e.split("#")[0];
}
function Qk(e) {
  return e.split("?")[0];
}
function GN(e) {
  return e.replace(/\/$/, "");
}
function Xk(e) {
  return GN(e) + "/";
}
function M_a(e) {
  const a = L_a.exec(e);
  return a === null ? "" : a[2];
}
function q_a(e, a) {
  return e = Qk(Yk(e)), a = Qk(Yk(a)), Xk(e) === Xk(a);
}
function F_a(e) {
  return e = Sm.default.parse(e), e.hostname;
}
function B_a(e) {
  return Sm.default.parse(e).protocol;
}
function W_a(e, a) {
  const n = Sm.default.parse(e, !1, !0).hostname;
  if (e.indexOf("//") === -1 && e.indexOf("/") === 0)
    return !0;
  if (e.indexOf("#") === 0)
    return !1;
  if (!n || n === a)
    return !0;
  const o = Sm.default.parse(a).hostname;
  return n === o;
}
function U_a(e) {
  return e ? e === "http:" || e === "https:" : !1;
}
function H_a(e) {
  return e.indexOf("#") === 0;
}
Pd.default = {
  removeHash: Yk,
  removeQueryArgs: Qk,
  removeTrailingSlash: GN,
  addTrailingSlash: Xk,
  getFromAnchorTag: M_a,
  areEqual: q_a,
  getHostname: F_a,
  getProtocol: B_a,
  isInternalLink: W_a,
  protocolIsHttpScheme: U_a,
  isRelativeFragmentURL: H_a
};
var gI;
function G_a() {
  if (gI) return qg;
  gI = 1, Object.defineProperty(qg, "__esModule", {
    value: !0
  }), qg.default = A;
  var e = K, a = f(m_), t = ks(), n = f(gt), r = f(bc()), o = f(Zo), l = f(ni), u = f(Pd), c = zs;
  function f(x) {
    return x && x.__esModule ? x : { default: x };
  }
  let y = [];
  function z(x, w) {
    return !!(u.default.areEqual(x, w) || u.default.isRelativeFragmentURL(x));
  }
  function v(x, w) {
    const j = x.map(function(S) {
      const P = S.attributes.href;
      return P ? z(P, w) : !1;
    });
    return x.filter((S, P) => !j[P]);
  }
  function O(x, w, j, S) {
    const P = x.map(function(M) {
      const G = M.innerText();
      return (0, t.findTopicFormsInString)(w, G, !0, j, S).percentWordMatches === 100;
    });
    return x.filter((M, G) => P[G]);
  }
  function I(x, w, j, S, P, M) {
    const G = S.matchWordCustomHelper, U = S.getWordsCustomHelper, V = [(0, e.flatten)(w.keyphraseForms)];
    w.synonymsForms.forEach((X) => V.push((0, e.flatten)(X)));
    const Y = [];
    return x.forEach(function(X) {
      const D = X.innerText();
      let de;
      U ? de = (0, e.uniq)(U(D)) : M ? de = (0, e.uniq)((0, n.default)(D, c.WORD_BOUNDARY_WITH_HYPHEN)) : de = (0, e.uniq)((0, n.default)(D, c.WORD_BOUNDARY_WITHOUT_HYPHEN));
      const ve = (0, a.default)(de, y);
      ve.length > 0 && (de = ve), P.forEach((we) => {
        we.exactMatchRequested && de.every((Pe) => we.keyphrase.includes(Pe)) && Y.push(!0);
      });
      for (let we = 0; we < V.length; we++) {
        const Pe = V[we];
        if (de.every((me) => (0, r.default)(me, Pe, j, G).count > 0)) {
          Y.push(!0);
          break;
        }
      }
    }), x.filter((X, D) => Y[D]);
  }
  function A(x, w) {
    y = w.getConfig("functionWords");
    const j = w.getConfig("areHyphensWordBoundaries"), S = {
      anchorsWithKeyphrase: [],
      anchorsWithKeyphraseCount: 0
    };
    if (x.getText() === "")
      return S;
    const P = x.getKeyword();
    if (P === "")
      return S;
    const M = (0, o.default)(x.getSynonyms());
    M.push(P);
    let G = x.getTree().findAll((D) => D.name === "a");
    const U = x.getPermalink();
    if (G = v(G, U), G.length === 0)
      return S;
    const V = x.getLocale(), F = w.getResearch("morphology"), Y = {
      matchWordCustomHelper: w.getHelper("matchWordCustomHelper"),
      getWordsCustomHelper: w.getHelper("getWordsCustomHelper")
    };
    if (G = O(G, F, V, Y.matchWordCustomHelper), G.length === 0)
      return S;
    const X = M.map((D) => (0, l.default)(D));
    return G = I(G, F, V, Y, X, j), {
      anchorsWithKeyphrase: G,
      anchorsWithKeyphraseCount: G.length
    };
  }
  return qg;
}
var Dd = {}, k_ = {};
Object.defineProperty(k_, "__esModule", {
  value: !0
});
k_.default = Y_a;
var V_a = K_a(Xt);
function K_a(e) {
  return e && e.__esModule ? e : { default: e };
}
function Y_a(e) {
  return e = e.replace(/\b[0-9]+\b/g, ""), e = (0, V_a.default)(e), e === "." && (e = ""), e;
}
var __ = {};
Object.defineProperty(__, "__esModule", {
  value: !0
});
__.default = Z_a;
var Q_a = X_a(nr);
function X_a(e) {
  return e && e.__esModule ? e : { default: e };
}
function Z_a(e, a) {
  const t = (0, Q_a.default)(e, a);
  let n = 0;
  for (let r = 0; r < t.length; r++)
    n++;
  return n;
}
var Nd = {};
Object.defineProperty(Nd, "__esModule", {
  value: !0
});
Nd.default = a1a;
var J_a = e1a(gt);
function e1a(e) {
  return e && e.__esModule ? e : { default: e };
}
function a1a(e) {
  return (0, J_a.default)(e).length;
}
var Bo = {}, kf = {}, _f = {};
Object.defineProperty(_f, "__esModule", {
  value: !0
});
_f.default = void 0;
var mI = K, t1a = n1a(Yo);
function n1a(e) {
  return e && e.__esModule ? e : { default: e };
}
class r1a {
  /**
   * Constructs a language syllable regex that contains a regex for matching syllable exclusion.
   *
   * @param {object} syllableRegex The object containing the syllable exclusions.
   * @constructor
   */
  constructor(a) {
    this._hasRegex = !1, this._regex = "", this._multiplier = "", this.createRegex(a);
  }
  /**
   * Checks whether a valid regex has been set.
   *
   * @returns {boolean} True if a regex has been set, false if not.
   */
  hasRegex() {
    return this._hasRegex;
  }
  /**
   * Creates a regex based on the given syllable exclusions, and sets the multiplier to use.
   *
   * @param {object} syllableRegex The object containing the syllable exclusions and multiplier.
   * @returns {void}
   */
  createRegex(a) {
    !(0, mI.isUndefined)(a) && !(0, mI.isUndefined)(a.fragments) && (this._hasRegex = !0, this._regex = (0, t1a.default)(a.fragments, !0), this._multiplier = a.countModifier);
  }
  /**
   * Returns the stored regular expression.
   *
   * @returns {RegExp} The stored regular expression.
   */
  getRegex() {
    return this._regex;
  }
  /**
   * Matches syllable exclusions in a given word and returns the number found multiplied by the
   * given multiplier. The result of this multiplication is the syllable count.
   *
   * @param {String} word The word to match for syllable exclusions.
   * @returns {number} The amount of syllables found.
   */
  countSyllables(a) {
    return this._hasRegex ? (a.match(this._regex) || []).length * this._multiplier : 0;
  }
}
_f.default = r1a;
Object.defineProperty(kf, "__esModule", {
  value: !0
});
kf.default = void 0;
var s1a = i1a(_f), Lv = K;
function i1a(e) {
  return e && e.__esModule ? e : { default: e };
}
class o1a {
  /**
   * Creates a syllable count iterator.
   *
   * @param {object} config The config object containing an array with syllable exclusions.
   * @constructor
   */
  constructor(a) {
    this.countSteps = [], (0, Lv.isUndefined)(a) || this.createSyllableCountSteps(a.deviations.vowels);
  }
  /**
   * Creates a syllable count step object for each exclusion.
   *
   * @param {object} syllableCounts The object containing all exclusion syllables including the multipliers.
   * @returns {void}
   */
  createSyllableCountSteps(a) {
    (0, Lv.forEach)(a, (function(t) {
      this.countSteps.push(new s1a.default(t));
    }).bind(this));
  }
  /**
   * Returns all available count steps.
   *
   * @returns {Array} All available count steps.
   */
  getAvailableSyllableCountSteps() {
    return this.countSteps;
  }
  /**
   * Counts the syllables for all the steps and returns the total syllable count.
   *
   * @param {String} word The word to count syllables in.
   * @returns {number} The number of syllables found based on exclusions.
   */
  countSyllables(a) {
    let t = 0;
    return (0, Lv.forEach)(this.countSteps, function(n) {
      t += n.countSyllables(a);
    }), t;
  }
}
kf.default = o1a;
var Ef = {};
Object.defineProperty(Ef, "__esModule", {
  value: !0
});
Ef.default = void 0;
var Mv = K;
class l1a {
  /**
   * Constructs a new DeviationFragment.
   *
   * @param {Object} options Extra options that are used to match this deviation fragment.
   * @param {string} options.location The location in the word where this deviation can occur.
   * @param {string} options.word The actual string that should be counted differently.
   * @param {number} options.syllables The amount of syllables this fragment has.
   * @param {string[]} [options.notFollowedBy] A list of characters that this fragment shouldn't be followed with.
   * @param {string[]} [options.alsoFollowedBy] A list of characters that this fragment could be followed with.
   *
   * @constructor
   */
  constructor(a) {
    this._location = a.location, this._fragment = a.word, this._syllables = a.syllables, this._regex = null, this._options = (0, Mv.pick)(a, ["notFollowedBy", "alsoFollowedBy"]);
  }
  /**
   * Creates a regex that matches this fragment inside a word.
   *
   * @returns {void}
   */
  createRegex() {
    const a = this._options;
    let t = this._fragment;
    (0, Mv.isUndefined)(a.notFollowedBy) || (t += "(?![" + a.notFollowedBy.join("") + "])"), (0, Mv.isUndefined)(a.alsoFollowedBy) || (t += "[" + a.alsoFollowedBy.join("") + "]?");
    let n;
    switch (this._location) {
      case "atBeginning":
        n = "^" + t;
        break;
      case "atEnd":
        n = t + "$";
        break;
      case "atBeginningOrEnd":
        n = "(^" + t + ")|(" + t + "$)";
        break;
      default:
        n = t;
        break;
    }
    this._regex = new RegExp(n);
  }
  /**
   * Returns the regex that matches this fragment inside a word.
   *
   * @returns {RegExp} The regex that matches this fragment.
   */
  getRegex() {
    return this._regex === null && this.createRegex(), this._regex;
  }
  /**
   * Returns whether this fragment occurs in a word.
   *
   * @param {string} word The word to match the fragment in.
   * @returns {boolean} Whether or not this fragment occurs in a word.
   */
  occursIn(a) {
    return this.getRegex().test(a);
  }
  /**
   * Removes this fragment from the given word.
   *
   * @param {string} word The word to remove this fragment from.
   * @returns {string} The modified word.
   */
  removeFrom(a) {
    return a.replace(this._fragment, " ");
  }
  /**
   * Returns the amount of syllables for this fragment.
   *
   * @returns {number} The amount of syllables for this fragment.
   */
  getSyllables() {
    return this._syllables;
  }
}
Ef.default = l1a;
Object.defineProperty(Bo, "__esModule", {
  value: !0
});
Bo.default = Bo.countSyllablesInWord = void 0;
var d1a = E_(gt), Yt = K, u1a = E_(kf), c1a = E_(Ef);
function E_(e) {
  return e && e.__esModule ? e : { default: e };
}
const p1a = function(e, a) {
  let t = 0;
  const n = new RegExp("[^" + a.vowels + "]", "ig"), r = e.split(n), o = (0, Yt.filter)(r, function(l) {
    return l !== "";
  });
  return t += o.length, t;
}, g1a = function(e, a) {
  return new u1a.default(a).countSyllables(e);
}, m1a = function(e, a) {
  const t = a.deviations.words.full, n = (0, Yt.find)(t, function(r) {
    return r.word === e;
  });
  return (0, Yt.isUndefined)(n) ? 0 : n.syllables;
};
function f1a(e) {
  let a = [];
  const t = e.deviations;
  return a = (0, Yt.flatMap)(t.words.fragments, function(n, r) {
    return (0, Yt.map)(n, function(o) {
      return o.location = r, new c1a.default(o);
    });
  }), a;
}
const h1a = (0, Yt.memoize)(f1a), y1a = function(e, a) {
  const t = h1a(a);
  let n = e, r = 0;
  return (0, Yt.forEach)(t, function(o) {
    o.occursIn(n) && (n = o.removeFrom(n), r += o.getSyllables());
  }), {
    word: n,
    syllableCount: r
  };
}, z1a = function(e, a) {
  let t = 0;
  return t += p1a(e, a), !(0, Yt.isUndefined)(a.deviations) && !(0, Yt.isUndefined)(a.deviations.vowels) && (t += g1a(e, a)), t;
}, VN = function(e, a) {
  let t = 0;
  if (!(0, Yt.isUndefined)(a.deviations) && !(0, Yt.isUndefined)(a.deviations.words)) {
    if (!(0, Yt.isUndefined)(a.deviations.words.full)) {
      const n = m1a(e, a);
      if (n !== 0)
        return n;
    }
    if (!(0, Yt.isUndefined)(a.deviations.words.fragments)) {
      const n = y1a(e, a);
      e = n.word, t += n.syllableCount;
    }
  }
  return t += z1a(e, a), t;
};
Bo.countSyllablesInWord = VN;
const b1a = function(e, a) {
  e = e.toLocaleLowerCase();
  const t = (0, d1a.default)(e), n = (0, Yt.map)(t, function(r) {
    return VN(r, a);
  });
  return (0, Yt.sum)(n);
};
Bo.default = b1a;
Object.defineProperty(Dd, "__esModule", {
  value: !0
});
Dd.DIFFICULTY = void 0;
Dd.default = $1a;
var w1a = Af(k_), v1a = Af(__), k1a = Af(Nd), _1a = Af(Bo), Xl = K;
function Af(e) {
  return e && e.__esModule ? e : { default: e };
}
const E1a = function(e, a) {
  return e / a;
}, Vs = Dd.DIFFICULTY = {
  NO_DATA: -1,
  VERY_EASY: 0,
  EASY: 1,
  FAIRLY_EASY: 2,
  OKAY: 3,
  FAIRLY_DIFFICULT: 4,
  DIFFICULT: 5,
  VERY_DIFFICULT: 6
};
function A1a(e, a) {
  return e >= a.borders.veryEasy ? Vs.VERY_EASY : (0, Xl.inRange)(e, a.borders.easy, a.borders.veryEasy) ? Vs.EASY : (0, Xl.inRange)(e, a.borders.fairlyEasy, a.borders.easy) ? Vs.FAIRLY_EASY : (0, Xl.inRange)(e, a.borders.okay, a.borders.fairlyEasy) ? Vs.OKAY : (0, Xl.inRange)(e, a.borders.fairlyDifficult, a.borders.okay) ? Vs.FAIRLY_DIFFICULT : (0, Xl.inRange)(e, a.borders.difficult, a.borders.fairlyDifficult) ? Vs.DIFFICULT : Vs.VERY_DIFFICULT;
}
function T1a(e) {
  const a = e.getConfig("fleschReadingEaseScores");
  return a || {
    borders: {
      veryEasy: 90,
      easy: 80,
      fairlyEasy: 70,
      okay: 60,
      fairlyDifficult: 50,
      difficult: 30,
      veryDifficult: 0
    },
    scores: {
      veryEasy: 9,
      easy: 9,
      fairlyEasy: 9,
      okay: 9,
      fairlyDifficult: 6,
      difficult: 3,
      veryDifficult: 3
    }
  };
}
function $1a(e, a) {
  const t = a.getConfig("syllables"), n = a.getHelper("memoizedTokenizer"), r = T1a(a);
  let o = e.getText();
  if (o === "")
    return {
      score: -1,
      difficulty: Vs.NO_DATA
    };
  o = (0, w1a.default)(o);
  const l = (0, v1a.default)(o, n), u = (0, k1a.default)(o);
  if (l < 1 || u <= 10)
    return {
      score: -1,
      difficulty: Vs.NO_DATA
    };
  const c = (0, _1a.default)(o, t), f = E1a(u, l), y = c * (100 / u), z = {
    numberOfSentences: l,
    numberOfWords: u,
    numberOfSyllables: c,
    averageWordsPerSentence: f,
    syllablesPer100Words: y
  }, v = a.getHelper("fleschReadingScore"), O = (0, Xl.clamp)(v(z), 0, 100), I = A1a(O, r);
  return {
    score: O,
    difficulty: I
  };
}
var Tf = {};
Object.defineProperty(Tf, "__esModule", {
  value: !0
});
Tf.default = KN;
Tf.getKeywordDensity = S1a;
var j1a = x1a(ti);
function x1a(e) {
  return e && e.__esModule ? e : { default: e };
}
function KN(e, a) {
  const t = a.getHelper("getWordsCustomHelper");
  let n = 0;
  return t ? n = t(e.getText()).length : n = (0, j1a.default)(e).length, n === 0 ? 0 : a.getResearch("getKeyphraseCount").count / n * 100;
}
function S1a(e, a) {
  return console.warn("This function is deprecated, use getKeyphraseDensity instead."), KN(e, a);
}
var A_ = {}, Rc = {};
Object.defineProperty(Rc, "__esModule", {
  value: !0
});
Rc.default = O1a;
function O1a(e) {
  let a;
  return a = e.match(/<a[\s]+(?:[^>]+)>((?:.|[\n\r\u2028\u2029])*?)<\/a>/ig), a === null && (a = []), a;
}
Object.defineProperty(A_, "__esModule", {
  value: !0
});
A_.default = R1a;
var I1a = YN(Rc), C1a = K, P1a = YN(Pd);
function YN(e) {
  return e && e.__esModule ? e : { default: e };
}
function R1a(e) {
  const a = (0, I1a.default)(e.getText());
  return (0, C1a.map)(a, P1a.default.getFromAnchorTag);
}
var T_ = {}, $_ = {};
Object.defineProperty($_, "__esModule", {
  value: !0
});
$_.default = L1a;
var D1a = N1a($c());
function N1a(e) {
  return e && e.__esModule ? e : { default: e };
}
function L1a(e) {
  let a = "Dofollow";
  const t = new D1a.default.Parser({
    /**
     * Detects if there is a `nofollow` value in the `rel` attribute of a link.
     *
     * @param {string} tagName The tag name.
     * @param {object} attributes The tag attributes with the names and values of each attribute found.
     * @returns {void}
     */
    onopentag: function(n, r) {
      n !== "a" || !r.rel || r.rel.toLowerCase().split(/\s/).includes("nofollow") && (a = "Nofollow");
    }
  });
  return t.write(e), t.end(), a;
}
var j_ = {};
Object.defineProperty(j_, "__esModule", {
  value: !0
});
j_.default = q1a;
var Nu = M1a(Pd);
function M1a(e) {
  return e && e.__esModule ? e : { default: e };
}
function q1a(e, a) {
  const t = Nu.default.getFromAnchorTag(e), n = Nu.default.getProtocol(t);
  return n && !Nu.default.protocolIsHttpScheme(n) || Nu.default.isRelativeFragmentURL(t) ? "other" : Nu.default.isInternalLink(t, a) ? "internal" : "external";
}
Object.defineProperty(T_, "__esModule", {
  value: !0
});
T_.default = U1a;
var F1a = x_($_), B1a = x_(Rc), W1a = x_(j_);
function x_(e) {
  return e && e.__esModule ? e : { default: e };
}
function U1a(e) {
  const a = (0, B1a.default)(e.getText()), t = e.getPermalink(), n = {
    total: a.length,
    internalTotal: 0,
    internalDofollow: 0,
    internalNofollow: 0,
    externalTotal: 0,
    externalDofollow: 0,
    externalNofollow: 0,
    otherTotal: 0,
    otherDofollow: 0,
    otherNofollow: 0
  };
  for (let r = 0; r < a.length; r++) {
    const o = a[r], l = (0, W1a.default)(o, t), u = (0, F1a.default)(o);
    n[l + "Total"]++, n[l + u]++;
  }
  return n;
}
var S_ = {};
Object.defineProperty(S_, "__esModule", {
  value: !0
});
S_.default = H1a;
var fI = K;
function H1a(e) {
  let a = e.getTree().findAll((t) => t.name === "p");
  return a = (0, fI.reject)(a, (t) => t.sentences.length === 0), a = (0, fI.reject)(a, (t) => t.childNodes.every((n) => n.name === "a")), a;
}
var O_ = {};
Object.defineProperty(O_, "__esModule", {
  value: !0
});
O_.default = V1a;
var G1a = ti;
function V1a(e, a) {
  const t = e.getTree().findAll((r) => r.name === "p"), n = [];
  return t.forEach((r) => {
    const o = a.getHelper("customCountLength"), l = r.sentences.map((c) => c.tokens).flat(), u = o ? o(r.innerText()) : (0, G1a.getWordsFromTokens)(l, !1).length;
    u > 0 && n.push({
      paragraph: r,
      paragraphLength: u
    });
  }), n;
}
var Wo = {}, Ld = {};
Object.defineProperty(Ld, "__esModule", {
  value: !0
});
Ld.default = void 0;
class I_ {
  /**
   * Constructor.
   *
   * @param {string} sentence The sentence.
   * @constructor
   */
  constructor(a) {
    this._sentenceText = a || "", this._isPassive = !1, this._clauses = [];
  }
  /**
   * Returns the sentence text.
   *
   * @returns {string} The sentence.
   */
  getSentenceText() {
    return this._sentenceText;
  }
  /**
   * Returns the passiveness of a sentence.
   *
   * @returns {boolean} True if passive, otherwise returns false.
   */
  isPassive() {
    return this._isPassive;
  }
  /**
   * Sets the passiveness of the sentence.
   *
   * @param {boolean} passive Whether the sentence is passive or not.
   * @returns {void}
   */
  setPassive(a) {
    this._isPassive = a;
  }
  /**
   * Returns an array of clauses.
   *
   * @returns {Clause[]} The clauses of the sentence.
   */
  getClauses() {
    return this._clauses;
  }
  /**
   * Sets the clauses.
   *
   * @param {Clause[]} clauses The clauses of the sentence.
   *
   * @returns {void}
   */
  setClauses(a) {
    this._clauses = a, this.setSentencePassiveness();
  }
  /**
   * Sets the passiveness of the sentence. A sentence is passive if it contains at least one passive clause.
   *
   * @returns {void}
   */
  setSentencePassiveness() {
    const a = this.getClauses().filter((t) => t.isPassive() === !0);
    this.setPassive(a.length > 0);
  }
  /**
   * Serializes the Sentence instance to an object.
   *
   * @returns {Object} The serialized Sentence.
   */
  serialize() {
    return {
      _parseClass: "Sentence",
      sentenceText: this._sentenceText,
      isPassive: this._isPassive,
      clauses: this._clauses
    };
  }
  /**
   * Parses the object to a Sentence.
   *
   * @param {Object} serialized The serialized object.
   *
   * @returns {Sentence} The parsed Sentence.
   */
  static parse(a) {
    const t = new I_(a.sentenceText);
    return t.setClauses(a.clauses), t.setPassive(a.isPassive), t;
  }
}
Ld.default = I_;
Object.defineProperty(Wo, "__esModule", {
  value: !0
});
Wo.default = Y1a;
Wo.getPeriphrasticPassives = Wo.getMorphologicalPassives = void 0;
var QN = C_(nr), XN = Ct, ZN = C_(Ld), JN = K, eL = C_(Jt), aL = Zt;
function C_(e) {
  return e && e.__esModule ? e : { default: e };
}
const P_ = function(e, a) {
  const t = a.getHelper("isPassiveSentence");
  let n = e.getText();
  n = (0, eL.default)(n), n = (0, aL.filterShortcodesFromHTML)(n, e._attributes && e._attributes.shortcodes);
  const r = a.getHelper("memoizedTokenizer"), o = (0, QN.default)(n, r).map(function(c) {
    return new ZN.default(c);
  }), l = o.length, u = [];
  return (0, JN.forEach)(o, function(c) {
    const f = (0, XN.stripFullTags)(c.getSentenceText()).toLocaleLowerCase();
    c.setPassive(t(f)), c.isPassive() === !0 && u.push(c.getSentenceText());
  }), {
    total: l,
    passives: u
  };
};
Wo.getMorphologicalPassives = P_;
const R_ = function(e, a) {
  const t = a.getHelper("getClauses");
  let n = e.getText();
  n = (0, eL.default)(n), n = (0, aL.filterShortcodesFromHTML)(n, e._attributes && e._attributes.shortcodes);
  const r = a.getHelper("memoizedTokenizer"), o = (0, QN.default)(n, r).map(function(c) {
    return new ZN.default(c);
  }), l = o.length, u = [];
  return (0, JN.forEach)(o, function(c) {
    const f = (0, XN.stripFullTags)(c.getSentenceText()).toLocaleLowerCase(), y = t(f);
    c.setClauses(y), c.isPassive() && u.push(c.getSentenceText());
  }), {
    total: l,
    passives: u
  };
};
Wo.getPeriphrasticPassives = R_;
const K1a = function(e, a) {
  const t = P_(e, a), n = R_(e, a).passives;
  return {
    total: t.total,
    passives: n.concat(t.passives)
  };
};
function Y1a(e, a) {
  const t = a.getConfig("passiveConstructionType");
  return t === "periphrastic" ? R_(e, a) : t === "morphological" ? P_(e, a) : K1a(e, a);
}
var $f = {}, Fr = {}, Md = {};
Object.defineProperty(Md, "__esModule", {
  value: !0
});
Md.default = void 0;
class D_ {
  /**
   * Constructs Prominent word object.
   *
   * @constructor
   *
   * @param {string} word             The word.
   * @param {string} [stem]           The stem / base form of the word, defaults to the word.
   * @param {number} [occurrences]    The number of occurrences, defaults to 0.
   */
  constructor(a, t, n) {
    this._word = a, this._stem = t || a, this._occurrences = n || 0;
  }
  /**
   * Sets the word.
   *
   * @param {string} word The word to set.
   *
   * @returns {void}.
   */
  setWord(a) {
    this._word = a;
  }
  /**
   * Returns the word.
   *
   * @returns {string} The word.
   */
  getWord() {
    return this._word;
  }
  /**
   * Returns the stem of the word.
   *
   * @returns {string} The stem.
   */
  getStem() {
    return this._stem;
  }
  /**
   * Sets the number of occurrences to the word.
   *
   * @param {int} numberOfOccurrences The number of occurrences to set.
   *
   * @returns {void}.
   */
  setOccurrences(a) {
    this._occurrences = a;
  }
  /**
   * Returns the amount of occurrences of this word.
   *
   * @returns {number} The number of occurrences.
   */
  getOccurrences() {
    return this._occurrences;
  }
  /**
   * Serializes the ProminentWord instance to an object.
   *
   * @returns {Object} The serialized ProminentWord.
   */
  serialize() {
    return {
      _parseClass: "ProminentWord",
      word: this._word,
      stem: this._stem,
      occurrences: this._occurrences
    };
  }
  /**
   * Parses the object to a ProminentWord.
   *
   * @param {Object} serialized The serialized object.
   *
   * @returns {ProminentWord} The parsed ProminentWord.
   */
  static parse(a) {
    return new D_(a.word, a.stem, a.occurrences);
  }
}
Md.default = D_;
Object.defineProperty(Fr, "__esModule", {
  value: !0
});
Fr.collapseProminentWordsOnStem = M_;
Fr.default = void 0;
Fr.filterProminentWords = nL;
Fr.getProminentWords = oL;
Fr.getProminentWordsFromPaperAttributes = lL;
Fr.retrieveAbbreviations = sL;
Fr.sortProminentWords = rL;
var N_ = K, L_ = tL(gt), Zk = $a, Om = tL(Md);
function tL(e) {
  return e && e.__esModule ? e : { default: e };
}
const Q1a = /[1234567890‘’“”"'.…?!:;,¿¡«»&*@#±^%$|~=+§`[\](){}⟨⟩<>/\\–\-\u2014\u00d7\s]/g;
function nL(e, a = 2) {
  return e = e.filter(function(t) {
    return t.getOccurrences() >= a && t.getWord().replace(Q1a, "") !== "";
  }), e;
}
function rL(e) {
  e.sort(function(a, t) {
    const n = t.getOccurrences() - a.getOccurrences();
    return n !== 0 ? n : a.getStem().localeCompare(t.getStem());
  });
}
function M_(e) {
  if (e.length === 0)
    return [];
  e.sort(function(n, r) {
    return n.getStem().localeCompare(r.getStem());
  });
  const a = [];
  let t = new Om.default(e[0].getWord(), e[0].getStem(), e[0].getOccurrences());
  for (let n = 1; n < e.length; n++) {
    const r = new Om.default(e[n].getWord(), e[n].getStem(), e[n].getOccurrences());
    r.getStem() === t.getStem() ? (t.setOccurrences(t.getOccurrences() + r.getOccurrences()), (r.getWord() === t.getStem() || r.getWord().toLocaleLowerCase() === t.getStem()) && t.setWord(r.getWord())) : (a.push(t), t = r);
  }
  return a.push(t), a;
}
function sL(e) {
  const a = (0, L_.default)((0, Zk.normalizeSingle)(e)), t = [];
  return a.forEach(function(n) {
    n.length > 1 && n.length < 5 && n === n.toLocaleUpperCase() && t.push(n.toLocaleLowerCase());
  }), (0, N_.uniq)(t);
}
function iL(e, a, t, n) {
  if (e.length === 0)
    return [];
  const r = (0, N_.uniq)(e.filter((l) => !n.includes(l.trim()))), o = [];
  return r.forEach(function(l) {
    a.includes(l) ? o.push(new Om.default(l.toLocaleUpperCase(), l, e.filter((u) => u === l).length)) : o.push(new Om.default(l, t(l), e.filter((u) => u === l).length));
  }), M_(o);
}
const qv = (e) => {
  let a = 0;
  if (!e.length)
    return a;
  for (let t = 0; t < e.length; t++) {
    const n = e[t];
    for (let r = 0; r < n.length; r++)
      a = a * 31 + n.charCodeAt(r) | 0;
  }
  return a;
}, X1a = (0, N_.memoize)((e, a, t, n) => iL(e, a, t, n), (e, a, t, n) => qv(e) + "|" + qv(a) + "|" + qv(n));
function oL(e, a, t, n, r) {
  if (e === "")
    return [];
  const o = r ? r((0, Zk.normalizeSingle)(e).toLocaleLowerCase()) : (0, L_.default)((0, Zk.normalizeSingle)(e).toLocaleLowerCase());
  return X1a(o, a, t, n);
}
function lL(e, a, t, n, r) {
  const o = r ? r(e.join(" ").toLocaleLowerCase()) : (0, L_.default)(e.join(" ").toLocaleLowerCase());
  return iL(o, a, t, n);
}
Fr.default = {
  getProminentWords: oL,
  getProminentWordsFromPaperAttributes: lL,
  filterProminentWords: nL,
  sortProminentWords: rL,
  collapseProminentWordsOnStem: M_,
  retrieveAbbreviations: sL
};
var Dc = {};
Object.defineProperty(Dc, "__esModule", {
  value: !0
});
Dc.default = J1a;
const Z1a = new RegExp("(ftp|http(s)?:\\/\\/.)(www\\\\.)?[-a-zA-Z0-9@:%._\\/+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:;%_\\/+.~#?&()=]*)|www\\.[-a-zA-Z0-9@:%._\\/+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:;%_\\/+.~#?&()=]*)", "igm");
function J1a(e) {
  return e.replace(Z1a, "");
}
var jf = {};
Object.defineProperty(jf, "__esModule", {
  value: !0
});
jf.default = aEa;
const eEa = new RegExp("[^\\s@]+@[^\\s@]+\\.[^\\s@]+", "igm");
function aEa(e) {
  return e.replace(eEa, "");
}
Object.defineProperty($f, "__esModule", {
  value: !0
});
$f.default = void 0;
var tEa = K, Lu = Fr, nEa = dL(Dc), rEa = dL(jf);
function dL(e) {
  return e && e.__esModule ? e : { default: e };
}
function sEa(e, a) {
  const t = a.getConfig("functionWords"), n = a.getHelper("customGetStemmer"), r = n ? n(a) : a.getHelper("getStemmer")(a), o = a.getHelper("getWordsCustomHelper");
  let l = e.getText();
  l = (0, nEa.default)(l), l = (0, rEa.default)(l);
  const u = o ? [] : (0, Lu.retrieveAbbreviations)(l), c = (0, Lu.getProminentWords)(l, u, r, t, o), f = (0, Lu.collapseProminentWordsOnStem)(c);
  return (0, Lu.sortProminentWords)(f), (0, tEa.take)((0, Lu.filterProminentWords)(f, 5), 20);
}
$f.default = sEa;
var xf = {}, In = {};
Object.defineProperty(In, "__esModule", {
  value: !0
});
In.default = void 0;
In.getSubheadingContents = uL;
In.getSubheadingContentsTopLevel = cL;
In.getSubheadings = q_;
In.getSubheadingsTopLevel = F_;
In.removeSubheadingsTopLevel = pL;
function q_(e) {
  const a = [], t = /<h([1-6])(?:[^>]+)?>(.*?)<\/h\1>/ig;
  let n;
  for (; (n = t.exec(e)) !== null; )
    a.push(n);
  return a;
}
function F_(e) {
  const a = [], t = /<h([2-3])(?:[^>]+)?>(.*?)<\/h\1>/ig;
  let n;
  for (; (n = t.exec(e)) !== null; )
    a.push(n);
  return a;
}
function uL(e) {
  return q_(e).map((t) => t[0]);
}
function cL(e) {
  return F_(e).map((t) => t[0]);
}
function pL(e) {
  const a = /<h([2-3])(?:[^>]+)?>(.*?)<\/h\1>/ig;
  return e.replace(a, "");
}
In.default = {
  getSubheadings: q_,
  getSubheadingsTopLevel: F_,
  getSubheadingContents: uL,
  getSubheadingContentsTopLevel: cL,
  removeSubheadingsTopLevel: pL
};
Object.defineProperty(xf, "__esModule", {
  value: !0
});
xf.default = void 0;
var iEa = K, oEa = Sf(Nd), Fl = Fr, hI = In, lEa = Sf(uf), dEa = Sf(Dc), uEa = Sf(jf);
function Sf(e) {
  return e && e.__esModule ? e : { default: e };
}
const Fv = function(e) {
  return e = (0, dEa.default)(e), (0, uEa.default)(e);
};
function cEa(e, a) {
  const t = a.getConfig("functionWords"), n = a.getHelper("customGetStemmer"), r = n ? n(a) : a.getHelper("getStemmer")(a), o = a.getHelper("getWordsCustomHelper"), l = a.getHelper("customCountLength"), u = Fv(e.getText()), c = Fv(e.getDescription()), f = Fv(e.getTitle()), y = {};
  if (y.hasMetaDescription = c !== "", y.hasTitle = f !== "", y.prominentWords = [], l) {
    if (l(u) < 200)
      return y;
  } else if ((0, oEa.default)(u) < 100)
    return y;
  const z = (0, hI.getSubheadingsTopLevel)(u).map((S) => S[2]), v = [e.getKeyword(), e.getSynonyms(), f, c, z.join(" ")], O = o ? [] : (0, Fl.retrieveAbbreviations)(u.concat(v.join(" "))), I = (0, hI.removeSubheadingsTopLevel)(u), A = (0, Fl.getProminentWords)(I, O, r, t, o), x = (0, Fl.getProminentWordsFromPaperAttributes)(v, O, r, t, o);
  x.forEach((S) => S.setOccurrences(S.getOccurrences() * 3));
  const w = (0, Fl.collapseProminentWordsOnStem)(x.concat(A));
  (0, Fl.sortProminentWords)(w);
  let j = 4;
  return r === lEa.default && (j = 2), y.prominentWords = (0, iEa.take)((0, Fl.filterProminentWords)(w, j), 100), y;
}
xf.default = cEa;
var Of = {};
Object.defineProperty(Of, "__esModule", {
  value: !0
});
Of.default = void 0;
var pEa = B_(Xt), gEa = B_(Sd), mEa = ti, Wg = Ad, fEa = B_(ef), hEa = K;
function B_(e) {
  return e && e.__esModule ? e : { default: e };
}
const yEa = (e, a) => {
  const t = [];
  let n = [];
  return e.forEach((r, o) => {
    const l = e[o + 1];
    n.push(a[o]), r && r !== l && (t.push({
      word: r,
      count: n.length,
      sentences: n
    }), n = []);
  }), t;
}, zEa = (e, a, t) => {
  const n = (0, mEa.getWordsFromTokens)(e.tokens, !1).filter((o) => (0, pEa.default)(o) !== " ");
  if (n.length === 0)
    return "";
  let r = n[0].toLowerCase();
  return a.includes(r) && n.length > 1 && (r += " " + n[1].toLowerCase(), t && t.includes(n[1]) && (r += " " + n[2].toLowerCase())), r;
};
var bEa = (e, a) => {
  const t = a.getConfig("firstWordExceptions"), n = a.getConfig("secondWordExceptions"), r = [(0, Wg.elementHasName)("ol"), (0, Wg.elementHasName)("ul"), (0, Wg.elementHasName)("table"), (0, Wg.elementHasClass)("wp-block-table")];
  let o = (0, hEa.cloneDeep)(e.getTree());
  o = (0, fEa.default)(o, r);
  const l = (0, gEa.default)(o), u = l.map((c) => zEa(c, t, n));
  return yEa(u, l);
};
Of.default = bEa;
var W_ = {}, U_ = {};
Object.defineProperty(U_, "__esModule", {
  value: !0
});
U_.default = vEa;
var wEa = K;
function vEa(e) {
  const a = [...e.matchAll(new RegExp("<h([1-6])(?:[^>]+)?>(.*?)<\\/h\\1>", "ig"))], t = [];
  return a.forEach((n, r) => {
    const o = n[0], l = n.index, u = a[r + 1];
    let c;
    (0, wEa.isUndefined)(u) ? c = n.input.length : c = u.index;
    const f = n.input.slice(l + o.length, c);
    t.push({
      subheading: o,
      text: f,
      index: l
    });
  }), t;
}
Object.defineProperty(W_, "__esModule", {
  value: !0
});
W_.default = TEa;
var kEa = H_(U_), yI = H_(Nd), _Ea = K, EEa = H_(Jt), AEa = Zt;
function H_(e) {
  return e && e.__esModule ? e : { default: e };
}
function TEa(e, a) {
  let t = e.getText();
  t = (0, EEa.default)(t), t = (0, AEa.filterShortcodesFromHTML)(t, e._attributes && e._attributes.shortcodes);
  const n = (0, kEa.default)(t), r = a.getHelper("customCountLength"), o = [];
  (0, _Ea.forEach)(n, function(c) {
    o.push({
      subheading: c.subheading,
      text: c.text,
      countLength: r ? r(c.text) : (0, yI.default)(c.text),
      index: c.index
    });
  });
  let l = 0, u = "";
  if (o.length > 0) {
    const c = o[0];
    u = t.slice(0, c.index), l = r ? r(u) : (0, yI.default)(u);
  }
  return l > 0 && u !== "" && o.unshift({
    // Assign an empty string for the subheading for text that comes before the first subheading.
    subheading: "",
    text: u,
    countLength: l
  }), o;
}
var G_ = {};
Object.defineProperty(G_, "__esModule", {
  value: !0
});
G_.default = $Ea;
function $Ea(e) {
  return e.getTree().findAll((n) => n.name === "h1").map((n) => ({
    tag: "h1",
    content: n.findAll((r) => r.name === "#text").map((r) => r.value).join(""),
    position: {
      startOffset: n.sourceCodeLocation.startTag.endOffset,
      endOffset: n.sourceCodeLocation.endTag.startOffset,
      clientId: n.clientId || ""
    }
  })).filter((n) => !!n.content);
}
var If = {};
Object.defineProperty(If, "__esModule", {
  value: !0
});
If.default = SEa;
var jEa = xEa(wc);
function xEa(e) {
  return e && e.__esModule ? e : { default: e };
}
function SEa(e) {
  return (0, jEa.default)(e).length;
}
var V_ = {};
Object.defineProperty(V_, "__esModule", {
  value: !0
});
V_.default = OEa;
function OEa(e, a) {
  const t = a.getResearch("morphology"), n = a.getConfig("functionWords");
  return {
    keyphraseLength: t.keyphraseForms.length,
    functionWords: n
  };
}
var Bl = {}, Cf = {}, mt = {};
Object.defineProperty(mt, "__esModule", {
  value: !0
});
mt.default = void 0;
var pr = K;
const IEa = {
  original: "",
  marked: "",
  fieldsToMark: []
};
class K_ {
  /**
   * Represents a place where highlighting should be applied.
   * We allow both replacement-based highlighting (through providing `original`, `marked`, and potentially `fieldsToMark`) and
   * position-based highlighting (through providing a `position`).
   *
   * @param {Object}   [properties]                  The properties of this Mark.
   *
   * @param {string}  [properties.original]         The original text that should be marked.
   * @param {string}  [properties.marked]           The new text including marks.
   * @param {array}   [properties.fieldsToMark]     The array that specifies which text section(s) to mark, e.g. "heading".
   *
   * @param {SourceCodeRange} [properties.position] The position object: a range in the source code.
   */
  constructor(a) {
    a = a || {}, (0, pr.defaults)(a, IEa), this._properties = a, this.isValid();
  }
  /**
   * Returns the original text.
   *
   * @returns {string} The original text.
   */
  getOriginal() {
    return this._properties.original;
  }
  /**
   * Returns the marked text.
   *
   * @returns {string} The replaced text.
   */
  getMarked() {
    return this._properties.marked;
  }
  /**
   * Returns the fields to mark.
   *
   * @returns {array} The fields to mark.
   */
  getFieldsToMark() {
    return this._properties.fieldsToMark;
  }
  /**
   * Returns the position information.
   *
   * @returns {Object} The position information.
   */
  getPosition() {
    return this._properties.position;
  }
  /**
   * Returns the start position.
   *
   * @returns {number} The start position.
   */
  getPositionStart() {
    return this._properties.position && this._properties.position.startOffset;
  }
  /**
   * Returns the end position.
   *
   * @returns {number} The end position.
   */
  getPositionEnd() {
    return this._properties.position && this._properties.position.endOffset;
  }
  /**
   * Sets the start position.
   *
   * @param {number} positionStart The new start position.
   *
   * @returns {void}
   */
  setPositionStart(a) {
    this._properties.position.startOffset = a;
  }
  /**
   * Sets the end position.
   *
   * @param {number} positionEnd The new end position.
   *
   * @returns {void}
   */
  setPositionEnd(a) {
    this._properties.position.endOffset = a;
  }
  /**
   * Returns the start position of a block.
   *
   * @param {number} startOffsetBlock The block start offset.
   *
   * @returns {number} The start position of a block.
   */
  setBlockPositionStart(a) {
    this._properties.position.startOffsetBlock = a;
  }
  /**
   * Returns the end position of a block.
   *
   * @param {number} endOffsetBlock The block end offset.
   *
   * @returns {number} The end position of a block.
   */
  setBlockPositionEnd(a) {
    this._properties.position.endOffsetBlock = a;
  }
  /**
   * Gets the block client id.
   *
   * @returns {string} The block client id.
   */
  getBlockClientId() {
    return this._properties.position && this._properties.position.clientId;
  }
  /**
   * Gets the block attribute id.
   *
   * @returns {string} The block attribute id.
   */
  getBlockAttributeId() {
    return this._properties.position && this._properties.position.attributeId;
  }
  /**
   * Checks if the mark object is intended for the first section of a Yoast sub-block.
   * This method will be used only for Yoast blocks where each block consists of sub-blocks
   * with two sections.
   *
   * @returns {boolean} Whether the mark object is intended for the first section of a Yoast sub-block.
   */
  isMarkForFirstBlockSection() {
    return this._properties.position && this._properties.position.isFirstSection;
  }
  /**
   * Returns the start position inside block.
   *
   * @returns {number} The start position inside the block if the mark has position information, undefined otherwise.
   */
  getBlockPositionStart() {
    return this._properties.position && this._properties.position.startOffsetBlock;
  }
  /**
   * Returns the end position inside block if the mark has position information, undefined otherwise.
   *
   * @returns {number} The end position inside block.
   */
  getBlockPositionEnd() {
    return this._properties.position && this._properties.position.endOffsetBlock;
  }
  /**
   * Applies this mark to the given text with replacement-based highlighting.
   *
   * @param {string} text The original text without the mark applied.
   * @returns {string} A new text with the mark applied to it.
   */
  applyWithReplace(a) {
    return a.split(this._properties.original).join(this._properties.marked);
  }
  /**
   * Applies this mark to the given text with position-based highlighting.
   *
   * @param {string} text The original text without the mark applied.
   * @returns {string} A new text with the mark applied to it.
   */
  applyWithPosition(a) {
    const t = "<yoastmark class='yoast-text-mark'>", n = "</yoastmark>", r = this.getPositionEnd() + t.length;
    return a = a.substring(0, this.getPositionStart()) + t + a.substring(this.getPositionStart()), a = a.substring(0, r) + n + a.substring(r), a;
  }
  /**
   * Serializes the Mark instance to an object.
   *
   * @returns {Object} The serialized Mark.
   */
  serialize() {
    return {
      _parseClass: "Mark",
      ...this._properties
    };
  }
  /* eslint-disable complexity */
  /**
   * Checks if the mark object is valid for position-based highlighting.
   * @returns {void}
   */
  isValid() {
    if (!(0, pr.isUndefined)(this.getPositionStart()) && this.getPositionStart() < 0)
      throw new RangeError("positionStart should be larger or equal than 0.");
    if (!(0, pr.isUndefined)(this.getPositionEnd()) && this.getPositionEnd() <= 0)
      throw new RangeError("positionEnd should be larger than 0.");
    if (!(0, pr.isUndefined)(this.getPositionStart()) && !(0, pr.isUndefined)(this.getPositionEnd()) && this.getPositionStart() >= this.getPositionEnd())
      throw new RangeError("The positionStart should be smaller than the positionEnd.");
    if ((0, pr.isUndefined)(this.getPositionStart()) && !(0, pr.isUndefined)(this.getPositionEnd()) || (0, pr.isUndefined)(this.getPositionEnd()) && !(0, pr.isUndefined)(this.getPositionStart()))
      throw new Error("A mark object should either have start and end defined or start and end undefined.");
  }
  /* eslint-enable complexity */
  /**
   * Checks if a mark has position information available.
   * @returns {boolean} Returns true if the Mark object has position information, false otherwise.
   */
  hasPosition() {
    return !(0, pr.isUndefined)(this.getPositionStart());
  }
  /**
   * Checks if a mark has block position information available.
   * A block has position information if the block start offset is available.
   *
   * @returns {boolean} Returns true if the Mark object has block position information, false otherwise.
   */
  hasBlockPosition() {
    return !(0, pr.isUndefined)(this.getBlockPositionStart());
  }
  /**
   * Parses the object to a Mark.
   *
   * @param {Object} serialized The serialized object.
   *
   * @returns {Mark} The parsed Mark.
   */
  static parse(a) {
    return delete a._parseClass, new K_(a);
  }
}
mt.default = K_;
Object.defineProperty(Cf, "__esModule", {
  value: !0
});
Cf.default = void 0;
var CEa = PEa(mt);
function PEa(e) {
  return e && e.__esModule ? e : { default: e };
}
const REa = "<yoastmark class='yoast-text-mark'>", DEa = "</yoastmark>", NEa = (e, a) => {
  const t = e.tokens, n = [];
  for (let o = t.length - 1; o >= 0; o--) {
    const l = t[o];
    a.some((u) => u.sourceCodeRange.startOffset === l.sourceCodeRange.startOffset || u.sourceCodeRange.endOffset === l.sourceCodeRange.endOffset) ? n.unshift(REa, l.text, DEa) : n.unshift(l.text);
  }
  return n.join("").replace(new RegExp("</yoastmark>([  ]?)<yoastmark class='yoast-text-mark'>", "ig"), "$1");
}, LEa = (e) => {
  const a = [];
  return e.sort(function(t, n) {
    return t.getPositionStart() - n.getPositionStart();
  }), e.forEach((t) => {
    if (a.length === 0) {
      a.push(t);
      return;
    }
    const n = a[a.length - 1];
    n.getPositionEnd() + 1 === t.getPositionStart() || t.getPositionStart() <= n.getPositionEnd() ? (n.setPositionEnd(t.getPositionEnd()), n.setBlockPositionEnd(t.getBlockPositionEnd())) : a.push(t);
  }), a;
};
function MEa(e, a) {
  if (a.length === 0)
    return [];
  const t = NEa(e, a), n = a.map((r) => {
    const o = r.sourceCodeRange.startOffset, l = r.sourceCodeRange.endOffset;
    return new CEa.default({
      position: {
        startOffset: o,
        endOffset: l,
        // Relative to start of block positions.
        startOffsetBlock: o - (e.parentStartOffset || 0),
        endOffsetBlock: l - (e.parentStartOffset || 0),
        // The client id of the block the match was found in.
        clientId: e.parentClientId || "",
        // The attribute id of the Yoast sub-block the match was found in.
        attributeId: e.parentAttributeId || "",
        // Whether the match was found in the first section of the Yoast sub-block.
        isFirstSection: e.isParentFirstSectionOfBlock || !1
      },
      marked: t,
      original: e.text
    });
  });
  return LEa(n);
}
Cf.default = MEa;
var xo = {}, Nc = {}, Lc = {};
Object.defineProperty(Lc, "__esModule", {
  value: !0
});
Lc.default = void 0;
var zI = Pt, bI = Vt;
const qEa = (e) => {
  const a = [];
  return e.forEach((t) => {
    const n = [], r = [];
    for (; zI.punctuationRegexStart.test(t) && !bI.hashedHtmlEntitiesRegexStart.test(t); )
      n.push(t[0]), t = t.slice(1);
    for (; zI.punctuationRegexEnd.test(t) && !bI.hashedHtmlEntitiesRegexEnd.test(t); )
      r.unshift(t[t.length - 1]), t = t.slice(0, -1);
    let o = [...n, t, ...r];
    o = o.filter((l) => l !== ""), a.push(...o);
  }), a;
};
Lc.default = qEa;
Object.defineProperty(Nc, "__esModule", {
  value: !0
});
Nc.default = void 0;
var FEa = BEa(Lc);
function BEa(e) {
  return e && e.__esModule ? e : { default: e };
}
const WEa = /([\s\t\u00A0\u2013\u2014\u002d[\]]|#nbsp;)/, UEa = (e) => {
  if (!e)
    return [];
  const a = e.split(WEa).filter((t) => t !== "");
  return (0, FEa.default)(a);
};
Nc.default = UEa;
var wI;
function HEa() {
  if (wI) return xo;
  wI = 1, Object.defineProperty(xo, "__esModule", {
    value: !0
  }), xo.tokenizeKeyphraseFormsForExactMatching = xo.default = void 0;
  var e = t(V3()), a = t(Nc);
  function t(c) {
    return c && c.__esModule ? c : { default: c };
  }
  const n = (c, f) => {
    const y = c[0];
    return f ? f(y) : (0, a.default)(y);
  };
  xo.tokenizeKeyphraseFormsForExactMatching = n;
  const r = (c, f, y, z) => {
    const v = {
      count: 0,
      matches: []
    }, O = n(f, z), I = c.tokens;
    let A = 0, x = 0, w = [];
    for (; x < I.length; ) {
      const j = I[x].text, S = O[A];
      (0, e.default)(j.toLowerCase(), S.toLowerCase(), y).length > 0 ? (w.push(I[x]), A++) : (A = 0, w = []), w.length === O.length && (v.matches.push(...w), v.count++, A = 0, w = []), x++;
    }
    return v;
  }, o = (c, f, y) => {
    let z = [];
    return c.forEach((v) => {
      (0, e.default)(v.text, f, y).length > 0 && (z = z.concat(v));
    }), z;
  }, l = (c, f, y, z) => {
    const v = {
      count: 0,
      matches: []
    };
    return f.forEach((O) => {
      let I = [];
      if (z)
        I = z(c, O);
      else {
        const A = c.tokens.slice();
        I = o(A, O, y);
      }
      v.count += I.length, v.matches = v.matches.concat(I);
    }), v;
  }, u = (c, f, y, z, v = !1, O) => v && !z ? r(c, f, y, O) : l(c, f, y, z);
  return xo.default = u, xo;
}
var gr = {}, Y_ = {}, ps = {};
Object.defineProperty(ps, "__esModule", {
  value: !0
});
ps.stripWordBoundariesStart = ps.stripWordBoundariesEverywhere = ps.stripWordBoundariesEnd = ps.default = void 0;
const gL = `[ \\u00a0\\u06d4\\u061f\\u060C\\u061B \\n\\r\\t.,'()"+\\-;!?:/»«‹›<>]`, mL = new RegExp("^(" + gL + "+)", "ig"), fL = new RegExp("(" + gL + "+$)", "ig"), hL = function(e) {
  return e = e.replace(mL, ""), e;
};
ps.stripWordBoundariesStart = hL;
const yL = function(e) {
  return e = e.replace(fL, ""), e;
};
ps.stripWordBoundariesEnd = yL;
const zL = function(e) {
  return e = e.replace(mL, ""), e = e.replace(fL, ""), e;
};
ps.stripWordBoundariesEverywhere = zL;
ps.default = {
  stripWordBoundariesStart: hL,
  stripWordBoundariesEnd: yL,
  stripWordBoundariesEverywhere: zL
};
Object.defineProperty(Y_, "__esModule", {
  value: !0
});
Y_.default = GEa;
var vI = ps, kI = K;
function GEa(e) {
  const a = (0, vI.stripWordBoundariesStart)(e);
  let t = "", n = "";
  if (a !== e) {
    const o = e.search((0, kI.escapeRegExp)(a));
    t = e.substring(0, o);
  }
  const r = (0, vI.stripWordBoundariesEnd)(a);
  if (r !== a) {
    const o = a.search((0, kI.escapeRegExp)(r)) + r.length;
    n = a.substring(o);
  }
  return t + "<yoastmark class='yoast-text-mark'>" + r + "</yoastmark>" + n;
}
var _I;
function Pf() {
  if (_I) return gr;
  _I = 1, Object.defineProperty(gr, "__esModule", {
    value: !0
  }), gr.deConstructAnchor = gr.collectMarkingsInSentence = void 0, gr.markWordsInASentence = O, gr.markWordsInSentences = I, gr.reConstructAnchor = void 0;
  var e = u(bc()), a = u(Yo), t = u(Y_), n = u(mt), r = K, o = u(Rc), l = $a;
  function u(A) {
    return A && A.__esModule ? A : { default: A };
  }
  const c = /(<a[\s]+[^>]+>)([^]*?)(<\/a>)/, f = function(A) {
    const [, x, w] = A.match(c);
    return {
      openTag: x,
      content: w
    };
  };
  gr.deConstructAnchor = f;
  const y = function(A, x) {
    return `${A}${x}</a>`;
  };
  gr.reConstructAnchor = y;
  const z = function(A, x) {
    const w = (0, o.default)(A), j = w.map((S) => {
      const {
        openTag: P,
        content: M
      } = f(S), G = M.replace(x, (U) => (0, t.default)(U));
      return y(P, G);
    });
    return {
      anchors: w,
      markedAnchors: j
    };
  }, v = function(A, x, w) {
    const j = [];
    x.forEach((U) => {
      const V = U.match(l.SINGLE_QUOTES_REGEX);
      V ? l.SINGLE_QUOTES_ARRAY.forEach((F) => {
        V.forEach((Y) => {
          j.push((0, r.escapeRegExp)(U.replace(new RegExp(Y, "g"), F)));
        });
      }) : j.push((0, r.escapeRegExp)(U));
    });
    const S = w ? (0, a.default)(j, !0) : (0, a.default)(j), {
      anchors: P,
      markedAnchors: M
    } = z(A, S);
    let G = A.replace(S, function(U) {
      return (0, t.default)(U);
    });
    if (P.length > 0) {
      const U = (0, o.default)(G);
      for (let V = 0; V < U.length; V++)
        G = G.replace(U[V], M[V]);
    }
    return G.replace(new RegExp("</yoastmark> <yoastmark class='yoast-text-mark'>", "ig"), " ");
  };
  gr.collectMarkingsInSentence = v;
  function O(A, x, w) {
    return [new n.default({
      original: A,
      marked: v(A, x, w)
    })];
  }
  function I(A, x, w, j) {
    let S = [], P = [];
    return x.forEach(function(M) {
      S = (0, e.default)(M, A, w, j).matches, S.length > 0 && (P = P.concat(O(M, S, j)));
    }), P;
  }
  return gr;
}
var EI;
function VEa() {
  if (EI) return Bl;
  EI = 1, Object.defineProperty(Bl, "__esModule", {
    value: !0
  }), Bl.countKeyphraseInText = y, Bl.default = z, Bl.keywordCount = v;
  var e = K, a = f(Sd), t = $a, n = f(Cf), r = f(HEa()), o = f(Od), l = Pf(), u = f(nr), c = Zt;
  function f(O) {
    return O && O.__esModule ? O : { default: O };
  }
  function y(O, I, A, x, w, j) {
    const S = {
      count: 0,
      markings: []
    };
    return O.forEach((P) => {
      const M = I.map((U) => (0, r.default)(P, U, A, x, w, j));
      if (M.every((U) => U.count > 0)) {
        const U = M.map((X) => X.count), V = Math.min(...U), F = (0, e.flattenDeep)(M.map((X) => X.matches));
        let Y = [];
        x ? Y = (0, l.markWordsInASentence)(P, F, x) : Y = (0, n.default)(P, F), S.count += V, S.markings.push(Y);
      }
    }), S;
  }
  function z(O, I) {
    const A = {
      count: 0,
      markings: [],
      keyphraseLength: 0
    };
    let w = I.getResearch("morphology").keyphraseForms;
    const j = w.length;
    if (w = w.map((X) => X.map((D) => (0, t.normalizeSingle)(D))), j === 0)
      return A;
    const S = I.getHelper("matchWordCustomHelper"), P = I.getHelper("memoizedTokenizer"), M = I.getHelper("splitIntoTokensCustom"), G = O.getLocale(), U = S ? (0, c.filterShortcodesFromHTML)(O.getText(), O._attributes && O._attributes.shortcodes) : O.getText(), V = S ? (0, u.default)(U, P) : (0, a.default)(O.getTree()), F = (0, o.default)(O.getKeyword()), Y = y(V, w, G, S, F, M);
    return A.count = Y.count, A.markings = (0, e.flatten)(Y.markings), A.keyphraseLength = j, A;
  }
  function v(O, I) {
    return console.warn("This function is deprecated, use getKeyphraseCount instead."), z(O, I);
  }
  return Bl;
}
var So = {}, Rf = {};
Object.defineProperty(Rf, "__esModule", {
  value: !0
});
Rf.default = KEa;
function KEa(e) {
  return e.replace(/[-_]/ig, " ");
}
var AI;
function YEa() {
  if (AI) return So;
  AI = 1, Object.defineProperty(So, "__esModule", {
    value: !0
  }), So.default = void 0, So.keywordCountInSlug = r, So.keywordCountInUrl = o;
  var e = n(Rf), a = ks(), t = K;
  function n(l) {
    return l && l.__esModule ? l : { default: l };
  }
  function r(l, u) {
    const c = (0, t.cloneDeep)(u);
    c.addConfig("areHyphensWordBoundaries", !0);
    const f = c.getResearch("morphology"), y = (0, e.default)(l.getSlug()), z = l.getLocale(), v = (0, a.findTopicFormsInString)(f, y, !1, z, !1);
    return {
      keyphraseLength: f.keyphraseForms.length,
      percentWordMatches: v.percentWordMatches
    };
  }
  function o(l, u) {
    return console.warn("This function is deprecated, use keywordCountInSlug instead."), r(l, u);
  }
  return So.default = r, So;
}
var Ug = {}, TI;
function QEa() {
  if (TI) return Ug;
  TI = 1, Object.defineProperty(Ug, "__esModule", {
    value: !0
  }), Ug.default = u;
  var e = In, a = o(pf), t = ks(), n = o(Jt), r = Zt;
  function o(c) {
    return c && c.__esModule ? c : { default: c };
  }
  const l = function(c, f, y, z, v, O) {
    return f.filter((I) => {
      const A = (0, t.findTopicFormsInString)(c, I, y, z, O);
      return v.length === 0 ? A.percentWordMatches === 100 : A.percentWordMatches > 50;
    }).length;
  };
  function u(c, f) {
    const y = f.getConfig("functionWords"), z = f.getHelper("matchWordCustomHelper");
    let v = c.getText();
    v = (0, n.default)(v), v = (0, r.filterShortcodesFromHTML)(v, c._attributes && c._attributes.shortcodes), v = (0, a.default)(v);
    const O = f.getResearch("morphology"), I = c.getLocale(), A = {
      count: 0,
      matches: 0,
      percentReflectingTopic: 0
    }, x = !0, w = (0, e.getSubheadingContentsTopLevel)(v);
    return w.length !== 0 && (A.count = w.length, A.matches = l(O, w, x, I, y, z), A.percentReflectingTopic = A.matches / A.count * 100), A;
  }
  return Ug;
}
var Hg = {}, $I;
function XEa() {
  if ($I) return Hg;
  $I = 1, Object.defineProperty(Hg, "__esModule", {
    value: !0
  }), Hg.default = o;
  var e = t(bc()), a = t(nr);
  function t(l) {
    return l && l.__esModule ? l : { default: l };
  }
  const n = function(l, u, c) {
    return u.forEach((f) => f.matches.slice(0, c).forEach((y) => {
      l = l.replace(y, "");
    })), l;
  }, r = function(l, u, c, f) {
    const y = u.keyphraseForms.map((O) => (0, e.default)(l, O, c, f)), z = Math.min(...y.map((O) => O.count));
    l = n(l, y, z);
    const v = u.synonymsForms.map((O) => {
      const I = O.map((x) => (0, e.default)(l, x, c, f)), A = Math.min(...I.map((x) => x.count));
      return l = n(l, y, A), A;
    });
    return [z, ...v].reduce((O, I) => O + I, 0);
  };
  function o(l, u) {
    const c = l.getDescription(), f = l.getLocale(), y = u.getResearch("morphology"), z = u.getHelper("matchWordCustomHelper"), v = u.getHelper("memoizedTokenizer");
    return (0, a.default)(c, v).map((A) => r(A, y, f, z)).reduce((A, x) => A + x, 0);
  }
  return Hg;
}
var Q_ = {}, Df = {};
Object.defineProperty(Df, "__esModule", {
  value: !0
});
Df.default = ZEa;
function ZEa(e, a) {
  let t = a.length;
  return e !== "" && t > 0 && (t += e.length + 3), t;
}
Object.defineProperty(Q_, "__esModule", {
  value: !0
});
Q_.default = aAa;
var JEa = eAa(Df);
function eAa(e) {
  return e && e.__esModule ? e : { default: e };
}
function aAa(e) {
  return (0, JEa.default)(e.getDate(), e.getDescription());
}
var X_ = {}, bs = {};
Object.defineProperty(bs, "__esModule", {
  value: !0
});
bs.StemOriginalPair = Jk;
bs.buildStems = bs.TopicPhrase = void 0;
bs.collectStems = iAa;
bs.primeLanguageSpecificData = void 0;
var jI = bL(gt), tAa = $a, xI = zs, rc = K, nAa = bL(Od);
function bL(e) {
  return e && e.__esModule ? e : { default: e };
}
class fm {
  /**
   * Constructs a new TopicPhrase.
   *
   * @param {StemOriginalPair[]} stemOriginalPairs The stem-original pairs for the words in the topic phrase.
   * @param {boolean}            exactMatch        Whether the topic phrase is an exact match.
   *
   * @constructor
   */
  constructor(a = [], t = !1) {
    this.stemOriginalPairs = a, this.exactMatch = t;
  }
  /**
   * Returns all stems in the topic phrase.
   *
   * @returns {string[]|[]} The stems in the topic phrase or empty array if the topic phrase is exact match.
   */
  getStems() {
    return this.exactMatch ? [] : this.stemOriginalPairs.map((a) => a.stem);
  }
}
bs.TopicPhrase = fm;
function Jk(e, a) {
  this.stem = e, this.original = a;
}
const e0 = function(e, a, t, n) {
  if ((0, rc.isUndefined)(e) || e === "")
    return new fm();
  if ((0, nAa.default)(e))
    return e = e.substring(1, e.length - 1), new fm([new Jk((0, rc.escapeRegExp)(e), e)], !0);
  let r = n ? (0, jI.default)(e, xI.WORD_BOUNDARY_WITH_HYPHEN) : (0, jI.default)(e, xI.WORD_BOUNDARY_WITHOUT_HYPHEN);
  const o = r.filter((u) => !t.includes(u));
  o.length > 0 && (r = o);
  const l = r.map((u) => new Jk(a((0, tAa.normalizeSingle)((0, rc.escapeRegExp)(u))), u));
  return new fm(l);
};
bs.buildStems = e0;
const rAa = function(e, a, t, n, r) {
  const o = e0(e, t, n, r), l = a.map((u) => e0(u, t, n, r));
  return {
    keyphraseStems: o,
    synonymsStems: l
  };
}, sAa = bs.primeLanguageSpecificData = (0, rc.memoize)((e, a, t) => (0, rc.memoize)((n, r) => rAa(n, r, e, a, t), (n, r) => n + "," + r.join(",")));
function iAa(e, a, t, n, r) {
  return sAa(t, n, r)(e, a);
}
var Z_ = {};
Object.defineProperty(Z_, "__esModule", {
  value: !0
});
Z_.default = pAa;
var oAa = K, lAa = Nf(cf), dAa = $a, uAa = Nf(Rf), SI = Nf(gt), cAa = Nf(wc), OI = zs;
function Nf(e) {
  return e && e.__esModule ? e : { default: e };
}
function pAa(e, a) {
  const t = e.getText(), n = (0, cAa.default)(e).map((l) => (0, lAa.default)(l)), r = [t, e.getTitle(), e.getSlug(), (0, uAa.default)(e.getSlug()), e.getDescription(), n.join(" ")].join(" ");
  return (a ? (0, SI.default)(r, OI.WORD_BOUNDARY_WITH_HYPHEN) : (0, SI.default)(r, OI.WORD_BOUNDARY_WITHOUT_HYPHEN)).map((l) => (0, dAa.normalizeSingle)((0, oAa.escapeRegExp)(l)));
}
Object.defineProperty(X_, "__esModule", {
  value: !0
});
X_.default = wAa;
var gAa = $a, II = bs, wL = K, mAa = vL(Z_), fAa = vL(Zo);
function vL(e) {
  return e && e.__esModule ? e : { default: e };
}
function hAa(e, a) {
  this.stem = e, this.forms = a;
}
function Bv(e = [], a = []) {
  this.keyphraseForms = e, this.synonymsForms = a;
}
function yAa(e, a, t) {
  const n = a.find((l) => l.stem === e.stem), r = (0, gAa.normalizeSingle)((0, wL.escapeRegExp)(e.original)), o = n ? [r, ...n.forms] : [r];
  return t && o.push(...t(e.original)), [...new Set(o)];
}
function zAa(e, a) {
  const t = e.stemOriginalPairs.length === 0 ? [] : e.getStems(), n = a.length === 0 ? [] : a.map((r) => r.getStems());
  return [...t, ...(0, wL.flattenDeep)(n)];
}
function CI(e, a, t) {
  return e.stemOriginalPairs.length === 0 ? [] : e.exactMatch ? [[e.stemOriginalPairs[0].stem]] : e.stemOriginalPairs.map(function(n) {
    return yAa(n, a, t);
  });
}
function bAa(e, a, t, n, r, o, l) {
  const u = (0, II.collectStems)(e, a, r, n, l), c = u.keyphraseStems, f = u.synonymsStems;
  if (c.stemOriginalPairs.length === 0 && f.length === 0)
    return new Bv();
  if ([c, ...f].every((A) => A.exactMatch === !0))
    return new Bv([[c.stemOriginalPairs[0].stem]], f.map((A) => [[A.stemOriginalPairs[0].stem]]));
  const z = [...new Set(zAa(c, f))], I = [...new Set(t.filter((A) => !n.includes(A)))].map((A) => new II.StemOriginalPair(r(A), A)).filter((A) => z.includes(A.stem)).sort((A, x) => A.stem.localeCompare(x.stem)).reduce(function(A, x) {
    const w = A[A.length - 1];
    return A.length === 0 || w.stem !== x.stem ? A.push(new hAa(x.stem, [x.original])) : w.forms.push(x.original), A;
  }, []);
  return new Bv(CI(c, I, o), f.map((A) => CI(A, I, o)));
}
function wAa(e, a) {
  const t = a.getConfig("functionWords"), n = a.getHelper("getStemmer")(a), r = a.getHelper("createBasicWordForms"), o = a.getConfig("language"), l = a.getConfig("areHyphensWordBoundaries"), u = (0, mAa.default)(e, l).map((y) => y.toLocaleLowerCase(o)), c = e.getKeyword().toLocaleLowerCase(o).trim(), f = (0, fAa.default)(e.getSynonyms().toLocaleLowerCase(o).trim());
  return bAa(c, f, u, t, n, r, l);
}
var J_ = {};
Object.defineProperty(J_, "__esModule", {
  value: !0
});
J_.default = vAa;
function vAa(e) {
  return e.hasTitle() ? e.getTitleWidth() : 0;
}
var e1 = {}, Lf = {};
Object.defineProperty(Lf, "__esModule", {
  value: !0
});
Lf.default = AAa;
var kAa = kL(Nd), _Aa = kL(Jt), EAa = Zt;
function kL(e) {
  return e && e.__esModule ? e : { default: e };
}
function AAa(e) {
  let a = e.getText();
  return a = (0, _Aa.default)(a), a = (0, EAa.filterShortcodesFromHTML)(a, e._attributes && e._attributes.shortcodes), {
    text: a,
    count: (0, kAa.default)(a),
    unit: "word"
  };
}
Object.defineProperty(e1, "__esModule", {
  value: !0
});
e1.default = xAa;
var TAa = a1(Qi), $Aa = a1(Lf), jAa = a1(If);
function a1(e) {
  return e && e.__esModule ? e : { default: e };
}
function xAa(e, a) {
  const t = (0, TAa.default)(e.getLocale()), n = a.getHelper("getWordsCustomHelper"), r = a.getHelper("wordsCharacterCount"), o = {
    ar: 138,
    cn: 158,
    de: 179,
    en: 228,
    es: 218,
    fi: 161,
    fr: 195,
    he: 187,
    it: 188,
    nl: 202,
    pl: 166,
    pt: 181,
    ru: 184,
    sl: 180,
    sv: 199,
    tr: 166
  }, l = {
    ja: 357
  }, u = o[t], c = l[t];
  let f = (0, $Aa.default)(e).count, y;
  if (c)
    f = r(n(e.getText())), y = f / c;
  else if (u)
    y = f / u;
  else {
    const O = Object.values(o).reduce((A, x) => A + x), I = Object.keys(o).length;
    y = f / (O / I);
  }
  const z = 0.2, v = (0, jAa.default)(e);
  return Math.ceil(y + v * z);
}
var t1 = {};
Object.defineProperty(t1, "__esModule", {
  value: !0
});
t1.default = CAa;
var SAa = _L(nr), OAa = _L(Jt), IAa = Zt;
function _L(e) {
  return e && e.__esModule ? e : { default: e };
}
function CAa(e, a) {
  const t = a.getHelper("memoizedTokenizer");
  let n = e.getText();
  return n = (0, OAa.default)(n), n = (0, IAa.filterShortcodesFromHTML)(n, e._attributes && e._attributes.shortcodes), (0, SAa.default)(n, t);
}
var n1 = {};
Object.defineProperty(n1, "__esModule", {
  value: !0
});
n1.default = PAa;
function PAa(e) {
  const a = new RegExp("(<video).*?(</video>)", "igs");
  let t = e.getText().match(a);
  return t === null && (t = []), t.length;
}
var PI;
function RAa() {
  if (PI) return Iu;
  PI = 1, Object.defineProperty(Iu, "__esModule", {
    value: !0
  }), Iu.default = void 0;
  var e = K, a = he($d), t = he(Xi), n = he(nee()), r = he(V0), o = he(nwa()), l = he(swa()), u = he(u_), c = he(g_), f = he(G_a()), y = he(Dd), z = Ae(Tf), v = he(A_), O = he(T_), I = he(S_), A = he(O_), x = he(Wo), w = he($f), j = he(xf), S = he(Of), P = he(W_), M = he(G_), G = he(If), U = he(V_), V = Ae(VEa()), F = YEa(), Y = he(QEa()), X = he(XEa()), D = he(Q_), de = he(X_), ve = he(J_), we = he(e1), Pe = he(t1), me = he(n1), ta = he(Lf), Dn = he(xc);
  function ze(je) {
    if (typeof WeakMap != "function") return null;
    var be = /* @__PURE__ */ new WeakMap(), ke = /* @__PURE__ */ new WeakMap();
    return (ze = function($e) {
      return $e ? ke : be;
    })(je);
  }
  function Ae(je, be) {
    if (je && je.__esModule) return je;
    if (je === null || typeof je != "object" && typeof je != "function") return { default: je };
    var ke = ze(be);
    if (ke && ke.has(je)) return ke.get(je);
    var $e = { __proto__: null }, De = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var ga in je) if (ga !== "default" && {}.hasOwnProperty.call(je, ga)) {
      var va = De ? Object.getOwnPropertyDescriptor(je, ga) : null;
      va && (va.get || va.set) ? Object.defineProperty($e, ga, va) : $e[ga] = je[ga];
    }
    return $e.default = je, ke && ke.set(je, $e), $e;
  }
  function he(je) {
    return je && je.__esModule ? je : { default: je };
  }
  class ia {
    /**
     * Constructor
     * @param {Paper} paper The Paper object that is needed within the researches.
     *
     * @constructor
     */
    constructor(be) {
      this.paper = be, this.defaultResearches = {
        altTagCount: n.default,
        countSentencesFromText: r.default,
        findKeywordInFirstParagraph: o.default,
        findKeyphraseInSEOTitle: l.default,
        findTransitionWords: u.default,
        functionWordsInKeyphrase: c.default,
        getAnchorsWithKeyphrase: f.default,
        getFleschReadingScore: y.default,
        getKeyphraseCount: V.default,
        getKeyphraseDensity: z.default,
        getKeywordDensity: z.getKeywordDensity,
        getLinks: v.default,
        getLinkStatistics: O.default,
        getParagraphs: I.default,
        getParagraphLength: A.default,
        getProminentWordsForInsights: w.default,
        getProminentWordsForInternalLinking: j.default,
        getSentenceBeginnings: S.default,
        getSubheadingTextLengths: P.default,
        h1s: M.default,
        imageCount: G.default,
        keyphraseLength: U.default,
        keywordCount: V.keywordCount,
        keywordCountInSlug: F.keywordCountInSlug,
        keywordCountInUrl: F.keywordCountInUrl,
        matchKeywordInSubheadings: Y.default,
        metaDescriptionKeyword: X.default,
        metaDescriptionLength: D.default,
        morphology: de.default,
        pageTitleWidth: ve.default,
        readingTime: we.default,
        sentences: Pe.default,
        wordCountInText: ta.default,
        videoCount: me.default,
        getPassiveVoiceResult: x.default
      }, this._data = {}, this.customResearches = {}, this.helpers = {
        memoizedTokenizer: Dn.default
      }, this.config = {
        areHyphensWordBoundaries: !0,
        centerClasses: ["has-text-align-center"]
      };
    }
    /**
     * Set the Paper associated with the Researcher.
     *
     * @param {Paper} paper The Paper to use within the Researcher.
     *
     * @throws {InvalidTypeError} Parameter needs to be an instance of the Paper object.
     *
     * @returns {void}
     */
    setPaper(be) {
      this.paper = be;
    }
    /**
     * Add a custom research that will be available within the Researcher.
     *
     * @param {string}   name     A name to reference the research by.
     * @param {function} research The function to be added to the Researcher.
     *
     * @throws {MissingArgument}  Research name cannot be empty.
     * @throws {InvalidTypeError} The research requires a valid Function callback.
     *
     * @returns {void}
     */
    addResearch(be, ke) {
      if ((0, e.isUndefined)(be) || (0, e.isEmpty)(be))
        throw new t.default("Research name cannot be empty");
      if (!(ke instanceof Function))
        throw new a.default("The research requires a Function callback.");
      this.customResearches[be] = ke;
    }
    /**
     * Add research data to the researcher by the research name.
     *
     * @param {string} research The identifier of the research.
     * @param {Object} data     The data object.
     *
     * @returns {void}.
     */
    addResearchData(be, ke) {
      this._data[be] = ke;
    }
    /**
     * Add a custom helper that will be available within the Researcher.
     *
     * @param {string}   name     A name to reference the helper by.
     * @param {function} helper   The function to be added to the Researcher.
     *
     * @throws {MissingArgument}  Helper name cannot be empty.
     * @throws {InvalidTypeError} The helper requires a valid Function callback.
     *
     * @returns {void}
     */
    addHelper(be, ke) {
      if ((0, e.isUndefined)(be) || (0, e.isEmpty)(be))
        throw new t.default("Helper name cannot be empty");
      if (!(ke instanceof Function))
        throw new a.default("The research requires a Function callback.");
      this.helpers[be] = ke;
    }
    /**
     * Add a custom configuration that will be available within the Researcher.
     *
     * @param {string}  name     A name to reference the helper by.
     * @param {*}       config   The configuration to be added to the Researcher.
     *
     * @throws {MissingArgument}  Configuration name and the configuration itself cannot be empty.
     *
     * @returns {void}
     */
    addConfig(be, ke) {
      if ((0, e.isUndefined)(be) || (0, e.isEmpty)(be))
        throw new t.default("Failed to add the custom researcher config. Config name cannot be empty.");
      if ((0, e.isUndefined)(ke) || (0, e.isEmpty)(ke) && ke === Object(ke))
        throw new t.default("Failed to add the custom researcher config. Config cannot be empty.");
      this.config[be] = ke;
    }
    /**
     * Check whether the research is known by the Researcher.
     *
     * @param {string} name The name to reference the research by.
     *
     * @returns {boolean} Whether or not the research is known by the Researcher.
     */
    hasResearch(be) {
      return Object.keys(this.getAvailableResearches()).filter(function(ke) {
        return ke === be;
      }).length > 0;
    }
    /**
     * Check whether the helper is known by the Researcher.
     *
     * @param {string} name The name to reference the helper by.
     *
     * @returns {boolean} Whether or not the helper is known by the Researcher.
     */
    hasHelper(be) {
      return Object.keys(this.getAvailableHelpers()).filter(function(ke) {
        return ke === be;
      }).length > 0;
    }
    /**
     * Check whether the config is known by the Researcher.
     *
     * @param {string} name The name to reference the config by.
     *
     * @returns {boolean} Whether or not the config is known by the Researcher.
     */
    hasConfig(be) {
      return Object.keys(this.getAvailableConfig()).filter(function(ke) {
        return ke === be;
      }).length > 0;
    }
    /**
     * Check whether the research data is known by the Researcher.
     *
     * @param {string} name The name to reference the research data by.
     *
     * @returns {boolean} Whether or not the research data is known by the Researcher.
     */
    hasResearchData(be) {
      return Object.keys(this.getAvailableResearchData()).filter(function(ke) {
        return ke === be;
      }).length > 0;
    }
    /**
     * Return all available researches.
     *
     * @returns {Object} An object containing all available researches.
     */
    getAvailableResearches() {
      return (0, e.merge)(this.defaultResearches, this.customResearches);
    }
    /**
     * Return all available helpers.
     *
     * @returns {Object} An object containing all available helpers.
     */
    getAvailableHelpers() {
      return this.helpers;
    }
    /**
     * Return all available configuration.
     *
     * @returns {Object} An object containing all available configuration.
     */
    getAvailableConfig() {
      return this.config;
    }
    /**
     * Return all available research data.
     *
     * @returns {Object} An object containing all available research data.
     */
    getAvailableResearchData() {
      return this._data;
    }
    /**
     * Return the Research by name.
     *
     * @param {string} name The name to reference the research by.
     *
     * @returns {*} Returns the result of the research or false if research does not exist.
     *
     * @throws {MissingArgument} Research name cannot be empty.
     */
    getResearch(be) {
      if ((0, e.isUndefined)(be) || (0, e.isEmpty)(be))
        throw new t.default("Research name cannot be empty");
      return this.hasResearch(be) ? this.getAvailableResearches()[be](this.paper, this) : !1;
    }
    /**
     * Return the research data from a research data provider by research name.
     *
     * @param {string} research The identifier of the research.
     *
     * @returns {*} The data provided by the provider, false if the data do not exist
     */
    getData(be) {
      return this.hasResearchData(be) ? this._data[be] : !1;
    }
    /**
     * Return language specific configuration by configuration name.
     *
     * @param {string} name The name of the configuration.
     *
     * @returns {*} The configuration, false if the configuration does not exist.
     */
    getConfig(be) {
      return this.hasConfig(be) ? this.config[be] : !1;
    }
    /**
     * Return language specific helper by helper name.
     *
     * @param {string} name The name of the helper.
     *
     * @returns {*} The helper, false if the helper does not exist.
     */
    getHelper(be) {
      return this.hasHelper(be) ? this.helpers[be] : !1;
    }
  }
  return Iu.default = ia, Iu;
}
var Mf = {};
Object.defineProperty(Mf, "__esModule", {
  value: !0
});
Mf.default = NAa;
var DAa = K;
function NAa(e) {
  return (0, DAa.flatten)(Object.values(e)).sort((t, n) => n.length - t.length || t.localeCompare(n));
}
var Rt = {};
Object.defineProperty(Rt, "__esModule", {
  value: !0
});
Rt.filterIndices = Rt.default = void 0;
Rt.getIndicesByWord = qf;
Rt.sortIndices = Rt.getIndicesByWordListSorted = Rt.getIndicesByWordList = void 0;
var r1 = K, EL = LAa(Xt), Im = Js;
function LAa(e) {
  return e && e.__esModule ? e : { default: e };
}
function qf(e, a) {
  let t = 0;
  const n = e.length;
  let r;
  const o = [];
  for (; (r = a.indexOf(e, t)) > -1; ) {
    const l = (0, Im.characterInBoundary)(a[r - 1]) || r === 0, u = (0, Im.characterInBoundary)(a[r + n]) || a.length === r + n;
    l && u && o.push({
      index: r,
      match: e
    }), t = r + n;
  }
  return o;
}
const AL = function(e, a) {
  let t = [];
  return (0, r1.forEach)(e, function(n) {
    n = (0, EL.default)(n), (0, Im.isWordInSentence)(n, a) && (t = t.concat(qf(n, a)));
  }), t;
};
Rt.getIndicesByWordList = AL;
const s1 = function(e) {
  return e.sort(function(a, t) {
    return a.index - t.index;
  });
};
Rt.sortIndices = s1;
const TL = function(e) {
  e = s1(e);
  const a = [];
  for (let t = 0; t < e.length; t++) {
    if (!(0, r1.isUndefined)(e[t + 1]) && e[t + 1].index < e[t].index + e[t].match.length) {
      a.push(e[t]), t++;
      continue;
    }
    a.push(e[t]);
  }
  return a;
};
Rt.filterIndices = TL;
const $L = function(e, a) {
  let t = [];
  return (0, r1.forEach)(e, function(n) {
    if (n = (0, EL.default)(n), !(0, Im.isWordInSentence)(n, a))
      return t;
    t = t.concat(qf(n, a));
  }), t = t.sort(function(n, r) {
    return n.index < r.index ? -1 : n.index > r.index ? 1 : 0;
  }), t;
};
Rt.getIndicesByWordListSorted = $L;
Rt.default = {
  getIndicesByWord: qf,
  getIndicesByWordList: AL,
  filterIndices: TL,
  sortIndices: s1,
  getIndicesByWordListSorted: $L
};
var Mc = {};
Object.defineProperty(Mc, "__esModule", {
  value: !0
});
Mc.default = MAa;
function MAa(e, a) {
  if (a.includes(null))
    return e;
  for (let t = 0; t < a.length; t++)
    if (a[t].reg.test(e) === !0)
      return e.replace(a[t].reg, a[t].repl);
}
var ys = {};
Object.defineProperty(ys, "__esModule", {
  value: !0
});
ys.default = ys.createSingleRuleFromArray = ys.createRulesFromArrays = void 0;
const jL = function(e, a = "i") {
  return e.length === 2 ? {
    reg: new RegExp(e[0], a),
    repl: e[1]
  } : e.length === 3 ? {
    reg: new RegExp(e[0], a),
    repl1: e[1],
    repl2: e[2]
  } : null;
};
ys.createSingleRuleFromArray = jL;
const xL = function(e, a = "i") {
  return e.map((t) => jL(t, a));
};
ys.createRulesFromArrays = xL;
ys.default = xL;
var i1 = {};
Object.defineProperty(i1, "__esModule", {
  value: !0
});
i1.default = FAa;
var qAa = K;
function FAa(e, a) {
  let t = [];
  return a.forEach(function(n) {
    const r = e.match(n);
    r !== null && t.push(r);
  }), t = (0, qAa.flattenDeep)(t), t;
}
var o1 = {};
Object.defineProperty(o1, "__esModule", {
  value: !0
});
o1.default = HAa;
var BAa = K, WAa = UAa(gt);
function UAa(e) {
  return e && e.__esModule ? e : { default: e };
}
function HAa(e, a, t = []) {
  const n = (0, WAa.default)(e).map((l) => l.toLowerCase()), r = n.indexOf(a.toLowerCase());
  if (r < 1)
    return !1;
  const o = n[r - 1];
  return (0, BAa.includes)(t, o);
}
var l1 = {};
Object.defineProperty(l1, "__esModule", {
  value: !0
});
l1.default = YAa;
var GAa = K, VAa = KAa(gt);
function KAa(e) {
  return e && e.__esModule ? e : { default: e };
}
function YAa(e, a, t = []) {
  const n = (0, VAa.default)(e).map((o) => o.toLowerCase()), r = n.indexOf(a.toLowerCase());
  if (r < 1)
    return !1;
  for (let o = 0; o < r; o++)
    if ((0, GAa.includes)(t, n[o]))
      return !0;
  return !1;
}
var d1 = {}, Ff = {};
Object.defineProperty(Ff, "__esModule", {
  value: !0
});
Ff.default = QAa;
function QAa(e, a) {
  const t = [];
  for (let n = a.exec(e); n !== null; n = a.exec(e))
    t.push({
      match: n[0],
      index: n.index
    });
  return t;
}
Object.defineProperty(d1, "__esModule", {
  value: !0
});
d1.default = aTa;
var XAa = K, ZAa = SL(Yo), JAa = SL(Ff), eTa = Rt;
function SL(e) {
  return e && e.__esModule ? e : { default: e };
}
function aTa(e, a, t, n) {
  const r = (0, XAa.uniq)(t), o = (0, eTa.getIndicesByWordListSorted)(r, e), l = e.indexOf(a), u = (0, ZAa.default)(n), c = o.filter((v) => v.index < l);
  if (c.length === 0)
    return !1;
  const f = c[c.length - 1];
  return (0, JAa.default)(e, u).filter((v) => v.index > f.index && v.index < l).length > 0;
}
var u1 = {};
Object.defineProperty(u1, "__esModule", {
  value: !0
});
u1.default = tTa;
function tTa(e, a) {
  const t = [];
  for (const r in a)
    e.endsWith(a[r]) && t.push(a[r]);
  const n = t.sort(function(r, o) {
    return o.length - r.length;
  })[0];
  return n || "";
}
var qc = {};
Object.defineProperty(qc, "__esModule", {
  value: !0
});
qc.applyAllReplacements = sTa;
qc.doesWordMatchRegex = nTa;
qc.searchAndReplaceWithRegex = rTa;
function nTa(e, a) {
  return RegExp(a).test(e);
}
function rTa(e, a) {
  for (const t of a)
    if (e.search(new RegExp(t[0])) !== -1)
      return e = e.replace(new RegExp(t[0]), t[1]), e;
}
function sTa(e, a) {
  return a.forEach(function(t) {
    e = e.replace(new RegExp(t[0]), t[1]);
  }), e;
}
var Fc = {};
Object.defineProperty(Fc, "__esModule", {
  value: !0
});
Fc.checkExceptionListWithTwoStems = uTa;
Fc.checkIfWordEndingIsOnExceptionList = lTa;
Fc.checkIfWordIsOnListThatCanHavePrefix = dTa;
var iTa = oTa(Mf);
function oTa(e) {
  return e && e.__esModule ? e : { default: e };
}
function lTa(e, a) {
  for (let t = 0; t < a.length; t++)
    if (e.endsWith(a[t]))
      return !0;
  return !1;
}
function dTa(e, a, t) {
  const r = (0, iTa.default)(t).find((l) => e.startsWith(l));
  let o = "";
  return typeof r == "string" && (o = e.slice(r.length), o.length > 2 && (e = o)), a.includes(e);
}
function uTa(e, a) {
  for (const t of e) {
    const n = t.find((r) => a.endsWith(r));
    if (n)
      return a.slice(0, a.length - n.length) + t[0];
  }
}
var Bf = {};
Object.defineProperty(Bf, "__esModule", {
  value: !0
});
Bf.removeSuffixFromFullForm = pTa;
Bf.removeSuffixesFromFullForm = cTa;
function cTa(e, a, t) {
  for (let n = 0; n < e.length; n++)
    if (t.startsWith(e[n])) {
      const r = t.substring(e[n].length);
      for (let o = 0; o < a.length; o++)
        if (a[o] === r)
          return t.slice(0, -r.length);
    }
}
function pTa(e, a, t) {
  for (let n = 0; n < e.length; n++)
    if (t.endsWith(e[n]))
      return t.slice(0, -a.length);
}
var OL = {}, Bc = {};
Object.defineProperty(Bc, "__esModule", {
  value: !0
});
Bc.default = void 0;
let gTa = class IL {
  /**
   * Constructs a clause object.
   *
   * @param {string} clauseText The text in the clause.
   * @param {Array} auxiliaries The auxiliaries in the clause.
   *
   * @constructor
   */
  constructor(a, t) {
    this._clauseText = a, this._auxiliaries = t, this._isPassive = !1, this._participles = [];
  }
  /**
   * Returns the clause text.
   *
   * @returns {string} The clause text.
   */
  getClauseText() {
    return this._clauseText;
  }
  /**
   * Returns true if the clause is passive.
   *
   * @returns {boolean} Whether the clause is passive.
   */
  isPassive() {
    return this._isPassive;
  }
  /**
   * Returns the auxiliaries of the clause.
   *
   * @returns {Array} The auxiliaries present in the clause.
   */
  getAuxiliaries() {
    return this._auxiliaries;
  }
  /**
   * Sets the passiveness of the clause.
   *
   * @param {boolean} passive	 Whether the clause is passive.
   *
   * @returns {void}
   */
  setPassive(a) {
    this._isPassive = a;
  }
  /**
   * Sets the participles.
   *
   * @param {Array} participles	The participles.
   *
   * @returns {void}
   */
  setParticiples(a) {
    this._participles = a;
  }
  /**
   * Returns the found participles.
   *
   * @returns {Array} The participles
   */
  getParticiples() {
    return this._participles;
  }
  /**
   * Serializes the Clause instance to an object.
   *
   * @returns {Object} The serialized Clause.
   */
  serialize() {
    return {
      _parseClass: "Clause",
      clauseText: this._clauseText,
      auxiliaries: this._auxiliaries,
      isPassive: this._isPassive,
      participles: this._participles
    };
  }
  /**
   * Parses the object to a Clause.
   *
   * @param {Object} serialized The serialized object.
   *
   * @returns {Clause} The parsed Clause.
   */
  static parse(a) {
    const t = new IL(a.clauseText, a.auxiliaries);
    return t.setPassive(a.isPassive), t;
  }
};
Bc.default = gTa;
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "Clause", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  }), Object.defineProperty(e, "ProminentWord", {
    enumerable: !0,
    get: function() {
      return t.default;
    }
  }), Object.defineProperty(e, "Sentence", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  });
  var a = r(Bc), t = r(Md), n = r(Ld);
  function r(o) {
    return o && o.__esModule ? o : { default: o };
  }
})(OL);
var c1 = {};
Object.defineProperty(c1, "__esModule", {
  value: !0
});
c1.default = yTa;
var mTa = K, fTa = hTa(gt);
function hTa(e) {
  return e && e.__esModule ? e : { default: e };
}
function yTa(e, a) {
  return (0, mTa.filter)((0, fTa.default)(a), function(n) {
    return e.includes(n.toLocaleLowerCase());
  }).length !== 0;
}
var p1 = {}, g1 = {};
Object.defineProperty(g1, "__esModule", {
  value: !0
});
g1.default = zTa;
var Wv = K;
function zTa(e, a, t = !0) {
  const n = t ? 1 : 0;
  if ((0, Wv.isEmpty)(e))
    return !1;
  const r = [];
  return (0, Wv.forEach)(e, function(o) {
    const l = o.index + o.match.length + n;
    r.push(l);
  }), (0, Wv.includes)(r, a);
}
var m1 = {};
Object.defineProperty(m1, "__esModule", {
  value: !0
});
m1.default = bTa;
var Uv = K;
function bTa(e, a) {
  if ((0, Uv.isEmpty)(e))
    return !1;
  const t = a.index + a.match.length, n = [];
  return (0, Uv.forEach)(e, function(r) {
    n.push(r.index);
  }), (0, Uv.includes)(n, t);
}
Object.defineProperty(p1, "__esModule", {
  value: !0
});
p1.default = jTa;
var Gu = Rt, CL = Wf(Xt), wTa = $a, f1 = Wf(Ff), PL = Wf(g1), vTa = Wf(m1), od = K;
function Wf(e) {
  return e && e.__esModule ? e : { default: e };
}
const kTa = function(e, a) {
  let t;
  const n = [];
  for (a.lastIndex = 0; (t = a.exec(e)) !== null; )
    n.push({
      index: t.index,
      match: t[0]
    });
  return n;
}, RL = function(e, a, t) {
  const n = (0, f1.default)(e, t);
  return (0, od.forEach)(a, function(r) {
    (0, PL.default)(n, r.index) && (a = a.filter(function(o) {
      return o.index !== r.index;
    }));
  }), a;
}, _Ta = function(e, a, t) {
  const n = (0, f1.default)(e, t);
  return (0, od.forEach)(a, function(r) {
    (0, vTa.default)(n, r) && (a = a.filter(function(o) {
      return o.index !== r.index;
    }));
  }), a;
}, ETa = function(e, a, t) {
  const n = (0, f1.default)(e, t);
  return (0, od.forEach)(a, function(r) {
    (0, PL.default)(n, r.index, !1) && (a = a.filter(function(o) {
      return o.index !== r.index;
    }));
  }), a;
}, ATa = function(e, a) {
  e = e.toLocaleLowerCase();
  const {
    regexes: t
  } = a;
  let n = (0, Gu.getIndicesByWordList)(a.auxiliaries, e);
  const r = kTa(e, t.stopCharacterRegex);
  let o = (0, Gu.getIndicesByWordList)(a.stopwords, e);
  a.otherStopWordIndices && a.otherStopWordIndices.length > 0 && (o = o.concat(a.otherStopWordIndices)), typeof t.directPrecedenceExceptionRegex < "u" && (n = RL(e, n, t.directPrecedenceExceptionRegex)), typeof t.elisionAuxiliaryExceptionRegex < "u" && (n = ETa(e, n, t.elisionAuxiliaryExceptionRegex));
  let l = n.concat(o, r);
  return l = (0, Gu.filterIndices)(l), (0, Gu.sortIndices)(l);
}, TTa = function(e, a) {
  const {
    auxiliaryRegex: t,
    directPrecedenceExceptionRegex: n,
    followingAuxiliaryExceptionRegex: r
  } = a;
  let o = e.match(t) || [];
  if (typeof n < "u" || typeof r < "u") {
    let l = (0, Gu.getIndicesByWordList)(o, e);
    typeof n < "u" && (l = RL(e, l, n)), l = _Ta(e, l, r), o = [], (0, od.forEach)(l, function(u) {
      o.push(u.match);
    });
  }
  return (0, od.map)(o, function(l) {
    return (0, CL.default)(l);
  });
}, $Ta = function(e, a) {
  const t = [], n = a.regexes.auxiliaryRegex;
  if (e = (0, wTa.normalizeSingle)(e), e.match(n) === null)
    return t;
  const r = ATa(e, a);
  for (let o = 0; o < r.length; o++) {
    let l = e.length;
    (0, od.isUndefined)(r[o + 1]) || (l = r[o + 1].index);
    const u = (0, CL.default)(e.substring(r[o].index, l)), c = TTa(u, a.regexes);
    if (c.length !== 0) {
      const f = new a.Clause(u, c);
      t.push(f);
    }
  }
  return t;
};
function jTa(e, a) {
  return $Ta(e, a);
}
var Uf = {};
Object.defineProperty(Uf, "__esModule", {
  value: !0
});
Uf.default = void 0;
var Cm = K, DL = xTa(Xt);
function xTa(e) {
  return e && e.__esModule ? e : { default: e };
}
function STa(e) {
  return (0, Cm.map)(e, function(a) {
    return (0, DL.default)(a);
  });
}
function OTa(e, a) {
  const t = [];
  return (0, Cm.forEach)(a, function(n) {
    const r = e.split(n);
    (0, Cm.isEmpty)(r[0]) || t.push(r[0]);
    const o = e.indexOf(n), l = e.length;
    e = (0, DL.default)(e.substring(o, l));
  }), t.push(e), t;
}
function ITa(e, a) {
  const t = e.split(a);
  for (let n = 0; n < t.length; n++)
    t[n][0] === " " && (t[n] = t[n].substring(1, t[n].length));
  return t;
}
function CTa(e, a) {
  const t = [];
  return (0, Cm.forEach)(e, function(n) {
    const r = STa(n.match(a.regexes.auxiliaryRegex || []));
    r.length !== 0 && t.push(new a.Clause(n, r));
  }), t;
}
function PTa(e, a) {
  const t = a.regexes.auxiliaryRegex;
  if (e.match(t) === null)
    return [];
  let n;
  const r = e.match(a.regexes.stopwordRegex) || [];
  return n = OTa(e, r), typeof a.regexes.stopCharacterRegex < "u" && n.length === 1 && (n = ITa(e, a.regexes.stopCharacterRegex)), CTa(n, a);
}
Uf.default = PTa;
var h1 = {};
Object.defineProperty(h1, "__esModule", {
  value: !0
});
h1.default = RTa;
function RTa(e) {
  return new DOMParser().parseFromString(e, "text/html").body.innerHTML.replace(/&nbsp;/g, " ");
}
var y1 = {};
Object.defineProperty(y1, "__esModule", {
  value: !0
});
y1.getFieldsToMark = NTa;
var Hv = K, DTa = In;
function NTa(e, a) {
  const t = (0, Hv.uniq)((0, Hv.flatten)(e.map((r) => {
    if (!(0, Hv.isUndefined)(r.getFieldsToMark()))
      return r.getFieldsToMark();
  }))), n = [];
  return t.forEach((r) => {
    r === "heading" && (0, DTa.getSubheadings)(a).forEach((l) => {
      n.push(l[0]);
    });
  }), {
    fieldsToMark: t,
    selectedHTML: n
  };
}
var Hf = {};
Object.defineProperty(Hf, "__esModule", {
  value: !0
});
Hf.mergeListItems = LTa;
function LTa(e) {
  const a = /<\/?(o|ul)(?:[^>]+)?>/g, t = /\s?<\/?li(?:[^>]+)?>\s?/g;
  return e = e.replace(a, ""), e = e.replace(t, " "), e = e.replace(/\s+/g, " "), e;
}
var Gv = {}, z1 = {};
Object.defineProperty(z1, "__esModule", {
  value: !0
});
z1.default = WTa;
var MTa = K;
const qTa = 50, FTa = /^h[1-6]$/;
function BTa(e, a) {
  return e.filter((t) => t.attributes.class ? (0, MTa.intersection)([...t.attributes.class], a).length > 0 && t.innerText().length > qTa : !1);
}
function WTa(e, a) {
  const t = e.getTree(), n = t.findAll((l) => l.name === "p"), r = t.findAll((l) => FTa.test(l.name)), o = a.getConfig("centerClasses");
  return BTa(n.concat(r), o);
}
var Gg = {}, RI;
function UTa() {
  if (RI) return Gg;
  RI = 1, Object.defineProperty(Gg, "__esModule", {
    value: !0
  }), Gg.default = f;
  var e = K, a = l(nr), t = l(gt), n = l(Jt), r = Zt, o = ks();
  function l(y) {
    return y && y.__esModule ? y : { default: y };
  }
  const u = function(y, z, v) {
    const O = z.getConfig("language"), I = z.getHelper("checkIfWordIsComplex"), A = z.getConfig("functionWords"), x = z.getConfig("wordComplexity"), w = z.getHelper("checkIfWordIsFunction"), j = (0, e.get)(z.getData("morphology"), O, !1);
    let S = (0, t.default)(y);
    const P = z.getHelper("matchWordCustomHelper"), M = (0, o.findTopicFormsInString)(v, y, !1, z.paper.getLocale(), P);
    S = S.filter((U) => !M.matches.includes(U)), S = S.filter((U) => !(w ? w(U) : A.includes(U)));
    const G = {
      complexWords: [],
      sentence: y
    };
    return j && S.forEach((U) => {
      I(x, U, j) && G.complexWords.push(U);
    }), G;
  }, c = function(y, z) {
    return z.length === 0 ? 0 : +((0, e.flatMap)(y, (I) => I.complexWords).length / z.length * 100).toFixed(2);
  };
  function f(y, z) {
    const v = z.getHelper("memoizedTokenizer");
    let O = y.getText();
    O = (0, n.default)(O), O = (0, r.filterShortcodesFromHTML)(O, y._attributes && y._attributes.shortcodes);
    const I = (0, a.default)(O, v), A = z.getResearch("morphology");
    let x = I.map((S) => u(S, z, A));
    x = x.filter((S) => S.complexWords.length !== 0);
    const w = (0, t.default)(O), j = c(x, w);
    return {
      complexWords: x,
      percentage: j
    };
  }
  return Gg;
}
var Bt = {}, DI;
function HTa() {
  if (DI) return Bt;
  DI = 1, Object.defineProperty(Bt, "__esModule", {
    value: !0
  }), Bt.maximizeSentenceScores = Bt.keyphraseDistributionResearcher = Bt.getDistraction = Bt.default = Bt.computeScoresPerSentenceShortTopic = Bt.computeScoresPerSentenceLongTopic = void 0;
  var e = K, a = ks(), t = Pf(), n = c(nr), r = c(Zo), o = Hf, l = c(Jt), u = fs;
  function c(A) {
    return A && A.__esModule ? A : { default: A };
  }
  const f = function(A, x, w, j) {
    const S = Array(x.length);
    for (let P = 0; P < x.length; P++)
      (0, a.findWordFormsInString)(A, x[P], w, j).percentWordMatches >= 50 ? S[P] = 9 : S[P] = 3;
    return S;
  };
  Bt.computeScoresPerSentenceLongTopic = f;
  const y = function(A, x, w, j) {
    const S = Array(x.length);
    for (let P = 0; P < x.length; P++) {
      const M = x[P];
      (0, a.findWordFormsInString)(A, M, w, j).percentWordMatches === 100 ? S[P] = 9 : S[P] = 3;
    }
    return S;
  };
  Bt.computeScoresPerSentenceShortTopic = y;
  const z = function(A) {
    return A[0].map(function(w, j) {
      return A.map(function(S) {
        return S[j];
      });
    }).map(function(w) {
      return (0, e.max)(w);
    });
  };
  Bt.maximizeSentenceScores = z;
  const v = function(A) {
    const x = A.length, w = [];
    for (let P = 0; P < x; P++)
      A[P] > 3 && w.push(P);
    const j = w.length;
    if (j === 0)
      return x;
    w.unshift(-1), w.push(x);
    const S = [];
    for (let P = 1; P < j + 2; P++)
      S.push(w[P] - w[P - 1] - 1);
    return (0, e.max)(S);
  };
  Bt.getDistraction = v;
  const O = function(A, x, w, j, S, P = 4, M, G) {
    const U = x.length, V = Array(U);
    if (j.length > 0)
      for (let D = 0; D < U; D++) {
        const de = x[D];
        (G ? G(M[D]) : de.length) < P ? V[D] = y(de, A, w, S) : V[D] = f(de, A, w, S);
      }
    else
      for (let D = 0; D < U; D++) {
        const de = x[D];
        V[D] = y(de, A, w, S);
      }
    const F = z(V), X = (0, e.zipWith)(A, F, (D, de) => ({
      sentence: D,
      score: de
    })).filter((D) => D.score > 3);
    return {
      maximizedSentenceScores: F,
      sentencesWithTopic: X.map((D) => D.sentence)
    };
  }, I = function(A, x) {
    const w = x.getConfig("functionWords"), j = x.getHelper("matchWordCustomHelper"), S = x.getHelper("getContentWords"), P = x.getResearch("wordsCharacterCount"), M = x.getHelper("memoizedTokenizer"), G = x.getConfig("topicLength").lengthCriteria;
    let U = A.getText();
    U = (0, l.default)(U), U = (0, u.filterShortcodesFromHTML)(U, A._attributes && A._attributes.shortcodes), U = (0, o.mergeListItems)(U);
    const V = (0, n.default)(U, M), F = x.getResearch("morphology"), Y = [];
    S && (Y.push(S(A.getKeyword())), (0, r.default)(A.getSynonyms()).forEach((me) => Y.push(S(me))));
    const X = A.getLocale(), D = [F.keyphraseForms];
    F.synonymsForms.forEach(function(me) {
      D.push(me);
    });
    const de = (0, e.uniq)((0, e.flattenDeep)(D)).sort((me, ta) => ta.length - me.length), ve = O(V, D, X, w, j, G, Y, P), we = ve.maximizedSentenceScores, Pe = v(we);
    return {
      sentencesToHighlight: (0, t.markWordsInSentences)(de, ve.sentencesWithTopic, X, j),
      keyphraseDistributionScore: Pe / V.length * 100
    };
  };
  return Bt.keyphraseDistributionResearcher = I, Bt.default = I, Bt;
}
var NI;
function GTa() {
  return NI || (NI = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), Object.defineProperty(e, "getLongCenterAlignedTexts", {
      enumerable: !0,
      get: function() {
        return a.default;
      }
    }), Object.defineProperty(e, "keyphraseDistribution", {
      enumerable: !0,
      get: function() {
        return n.default;
      }
    }), Object.defineProperty(e, "wordComplexity", {
      enumerable: !0,
      get: function() {
        return t.default;
      }
    });
    var a = r(z1), t = r(UTa()), n = r(HTa());
    function r(o) {
      return o && o.__esModule ? o : { default: o };
    }
  }(Gv)), Gv;
}
var LI;
function eo() {
  return LI || (LI = 1, function(e) {
    Object.defineProperty(e, "__esModule", {
      value: !0
    }), Object.defineProperty(e, "AbstractResearcher", {
      enumerable: !0,
      get: function() {
        return c.default;
      }
    }), Object.defineProperty(e, "areWordsInSentence", {
      enumerable: !0,
      get: function() {
        return G.default;
      }
    }), Object.defineProperty(e, "baseStemmer", {
      enumerable: !0,
      get: function() {
        return l.default;
      }
    }), Object.defineProperty(e, "buildFormRule", {
      enumerable: !0,
      get: function() {
        return z.default;
      }
    }), Object.defineProperty(e, "collectMarkingsInSentence", {
      enumerable: !0,
      get: function() {
        return he.collectMarkingsInSentence;
      }
    }), Object.defineProperty(e, "countMetaDescriptionLength", {
      enumerable: !0,
      get: function() {
        return ve.default;
      }
    }), Object.defineProperty(e, "createRegexFromArray", {
      enumerable: !0,
      get: function() {
        return n.default;
      }
    }), Object.defineProperty(e, "createRulesFromArrays", {
      enumerable: !0,
      get: function() {
        return v.default;
      }
    }), Object.defineProperty(e, "createSingleRuleFromArray", {
      enumerable: !0,
      get: function() {
        return v.createSingleRuleFromArray;
      }
    }), Object.defineProperty(e, "directPrecedenceException", {
      enumerable: !0,
      get: function() {
        return I.default;
      }
    }), e.exceptionListHelpers = void 0, Object.defineProperty(e, "findMatchingEndingInArray", {
      enumerable: !0,
      get: function() {
        return w.default;
      }
    }), Object.defineProperty(e, "findWordFormsInString", {
      enumerable: !0,
      get: function() {
        return Ae.findWordFormsInString;
      }
    }), Object.defineProperty(e, "flattenSortLength", {
      enumerable: !0,
      get: function() {
        return f.default;
      }
    }), Object.defineProperty(e, "getClauses", {
      enumerable: !0,
      get: function() {
        return U.default;
      }
    }), Object.defineProperty(e, "getClausesSplitOnStopWords", {
      enumerable: !0,
      get: function() {
        return V.default;
      }
    }), Object.defineProperty(e, "getFieldsToMark", {
      enumerable: !0,
      get: function() {
        return me.getFieldsToMark;
      }
    }), Object.defineProperty(e, "getLanguage", {
      enumerable: !0,
      get: function() {
        return we.default;
      }
    }), Object.defineProperty(e, "getSentences", {
      enumerable: !0,
      get: function() {
        return Pe.default;
      }
    }), Object.defineProperty(e, "getWords", {
      enumerable: !0,
      get: function() {
        return u.default;
      }
    }), e.helpers = void 0, Object.defineProperty(e, "imageInText", {
      enumerable: !0,
      get: function() {
        return r.default;
      }
    }), Object.defineProperty(e, "indices", {
      enumerable: !0,
      get: function() {
        return y.default;
      }
    }), Object.defineProperty(e, "markWordsInSentences", {
      enumerable: !0,
      get: function() {
        return he.markWordsInSentences;
      }
    }), Object.defineProperty(e, "matchRegularParticiples", {
      enumerable: !0,
      get: function() {
        return O.default;
      }
    }), Object.defineProperty(e, "mergeListItems", {
      enumerable: !0,
      get: function() {
        return ze.mergeListItems;
      }
    }), Object.defineProperty(e, "nonDirectPrecedenceException", {
      enumerable: !0,
      get: function() {
        return x.default;
      }
    }), Object.defineProperty(e, "normalizeHTML", {
      enumerable: !0,
      get: function() {
        return de.default;
      }
    }), Object.defineProperty(e, "normalizeSingle", {
      enumerable: !0,
      get: function() {
        return ta.normalizeSingle;
      }
    }), Object.defineProperty(e, "parseSynonyms", {
      enumerable: !0,
      get: function() {
        return Dn.default;
      }
    }), Object.defineProperty(e, "precedenceException", {
      enumerable: !0,
      get: function() {
        return A.default;
      }
    }), e.regexHelpers = void 0, Object.defineProperty(e, "removePunctuation", {
      enumerable: !0,
      get: function() {
        return D.default;
      }
    }), Object.defineProperty(e, "replaceDiacritics", {
      enumerable: !0,
      get: function() {
        return a.default;
      }
    }), e.researches = void 0, Object.defineProperty(e, "sanitizeString", {
      enumerable: !0,
      get: function() {
        return Y.default;
      }
    }), e.stemHelpers = void 0, Object.defineProperty(e, "stripBlockTagsAtStartEnd", {
      enumerable: !0,
      get: function() {
        return F.stripBlockTagsAtStartEnd;
      }
    }), Object.defineProperty(e, "stripHTMLTags", {
      enumerable: !0,
      get: function() {
        return F.stripFullTags;
      }
    }), Object.defineProperty(e, "stripSpaces", {
      enumerable: !0,
      get: function() {
        return o.default;
      }
    }), Object.defineProperty(e, "transliterate", {
      enumerable: !0,
      get: function() {
        return t.default;
      }
    }), Object.defineProperty(e, "unifyAllSpaces", {
      enumerable: !0,
      get: function() {
        return X.unifyAllSpaces;
      }
    }), e.values = void 0;
    var a = $e(sf), t = $e(of), n = $e(Yo), r = $e(xd), o = $e(Xt), l = $e(uf), u = $e(gt), c = $e(RAa()), f = $e(Mf), y = $e(Rt), z = $e(Mc), v = ke(ys), O = $e(i1), I = $e(o1), A = $e(l1), x = $e(d1), w = $e(u1), j = ke(qc);
    e.regexHelpers = j;
    var S = ke(Fc);
    e.exceptionListHelpers = S;
    var P = ke(Bf);
    e.stemHelpers = P;
    var M = ke(OL);
    e.values = M;
    var G = $e(c1), U = $e(p1), V = $e(Uf), F = Ct, Y = $e(zc), X = kt, D = $e(Pt), de = $e(h1), ve = $e(Df), we = $e(Qi), Pe = $e(nr), me = y1, ta = $a, Dn = $e(Zo), ze = Hf, Ae = ks(), he = Pf(), ia = ke(Zt);
    e.helpers = ia;
    var je = ke(GTa());
    e.researches = je;
    function be(De) {
      if (typeof WeakMap != "function") return null;
      var ga = /* @__PURE__ */ new WeakMap(), va = /* @__PURE__ */ new WeakMap();
      return (be = function(oa) {
        return oa ? va : ga;
      })(De);
    }
    function ke(De, ga) {
      if (De && De.__esModule) return De;
      if (De === null || typeof De != "object" && typeof De != "function") return { default: De };
      var va = be(ga);
      if (va && va.has(De)) return va.get(De);
      var oa = { __proto__: null }, Wa = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var Da in De) if (Da !== "default" && {}.hasOwnProperty.call(De, Da)) {
        var za = Wa ? Object.getOwnPropertyDescriptor(De, Da) : null;
        za && (za.get || za.set) ? Object.defineProperty(oa, Da, za) : oa[Da] = De[Da];
      }
      return oa.default = De, va && va.set(De, oa), oa;
    }
    function $e(De) {
      return De && De.__esModule ? De : { default: De };
    }
  }(Zw)), Zw;
}
Object.defineProperty(rf, "__esModule", {
  value: !0
});
rf.default = void 0;
var VTa = eo();
class KTa {
  /**
   * Creates a new token.
   *
   * @param {string} text The token's text.
   * @param {SourceCodeRange} sourceCodeRange The start and end positions of the token in the source code.
   */
  constructor(a, t = {}) {
    this.text = (0, VTa.normalizeSingle)(a), this.sourceCodeRange = t;
  }
}
rf.default = KTa;
Object.defineProperty(hc, "__esModule", {
  value: !0
});
hc.default = void 0;
var YTa = b1(nf), MI = b1(rf), QTa = b1(Nc);
function b1(e) {
  return e && e.__esModule ? e : { default: e };
}
const XTa = /^\s+$/;
class ZTa {
  /**
   * Creates a new language processor.
   *
   * @param {Researcher} researcher The researcher to use.
   */
  constructor(a) {
    this.researcher = a;
  }
  /**
   * Split text into sentences.
   *
   * @param {string} text The text to split into sentences.
   *
   * @returns {Sentence[]} The sentences.
   */
  splitIntoSentences(a) {
    const n = this.researcher.getHelper("memoizedTokenizer")(a, !1);
    return XTa.test(n[n.length - 1]) && n.pop(), n.map(function(r) {
      return new YTa.default(r);
    });
  }
  /**
   * Split sentence into tokens.
   *
   * @param {Sentence} sentence The sentence to split.
   *
   * @returns {Token[]} The tokens.
   */
  splitIntoTokens(a) {
    const t = a.text, n = this.researcher.getHelper("splitIntoTokensCustom");
    return n ? n(t).map((l) => new MI.default(l)) : (0, QTa.default)(t).map((o) => new MI.default(o));
  }
}
hc.default = ZTa;
var ao = {};
Object.defineProperty(ao, "__esModule", {
  value: !0
});
ao.default = void 0;
var Mu = K;
const Vv = {
  keyword: "",
  synonyms: "",
  description: "",
  title: "",
  titleWidth: 0,
  slug: "",
  locale: "en_US",
  permalink: "",
  date: "",
  customData: {},
  textTitle: "",
  writingDirection: "LTR",
  wpBlocks: [],
  isFrontPage: !1
};
class Pm {
  /**
   * Constructs the Paper object and sets its attributes.
   *
   * @param {string}  text                            The text to use in the analysis.
   * @param {object}  [attributes]                    The object containing all attributes.
   * @param {string}  [attributes.keyword]            The main keyword or keyphrase of the text.
   * @param {string}  [attributes.synonyms]           The synonyms of the main keyword or keyphrase. It should be separated by commas if multiple synonyms are added.
   * @param {string}  [attributes.description]        The SEO meta description.
   * @param {string}  [attributes.title]              The SEO title.
   * @param {number}  [attributes.titleWidth=0]       The width of the title in pixels.
   * @param {string}  [attributes.slug]               The slug.
   * @param {string}  [attributes.locale=en_US]       The locale.
   * @param {string}  [attributes.permalink]          The full URL for any given post, page, or other pieces of content on a site.
   * @param {string}  [attributes.date]               The date.
   * @param {Object[]}  [attributes.wpBlocks]         The array of texts, encoded in WordPress block editor blocks.
   * @param {Object}  [attributes.customData]         Custom data.
   * @param {string}  [attributes.textTitle]          The title of the text.
   * @param {string}  [attributes.writingDirection=LTR]   The writing direction of the paper. Defaults to left to right (LTR).
   * @param {boolean} [attributes.isFrontPage=false]  Whether the current page is the front page of the site. Defaults to false.
   */
  constructor(a, t) {
    this._text = a || "", this._tree = null, t = t || {}, (0, Mu.defaults)(t, Vv), t.locale === "" && (t.locale = Vv.locale), t.hasOwnProperty("url") && (console.warn("The 'url' attribute is deprecated, use 'slug' instead."), t.slug = t.url || t.slug);
    const n = t.keyword.replace(/[‘’“”"'.?!:;,¿¡«»&*@#±^%|~`[\](){}⟨⟩<>/\\–\-\u2014\u00d7\u002b\s]/g, "");
    (0, Mu.isEmpty)(n) && (t.keyword = Vv.keyword), this._attributes = t;
  }
  /**
   * Checks whether a keyword is available.
   * @returns {boolean} Returns true if the Paper has a keyword.
   */
  hasKeyword() {
    return this._attributes.keyword !== "";
  }
  /**
   * Returns the associated keyword or an empty string if no keyword is available.
   * @returns {string} Returns Keyword
   */
  getKeyword() {
    return this._attributes.keyword;
  }
  /**
   * Checks whether synonyms are available.
   * @returns {boolean} Returns true if the Paper has synonyms.
   */
  hasSynonyms() {
    return this._attributes.synonyms !== "";
  }
  /**
   * Returns the associated synonyms or an empty string if no synonyms is available.
   * @returns {string} Returns synonyms.
   */
  getSynonyms() {
    return this._attributes.synonyms;
  }
  /**
   * Checks whether the text is available.
   * @returns {boolean} Returns true if the paper has a text.
   */
  hasText() {
    return this._text !== "";
  }
  /**
   * Returns the associated text or an empty string if no text is available.
   * @returns {string} Returns the text.
   */
  getText() {
    return this._text;
  }
  /**
   * Sets the tree.
   *
   * @param {Node} tree The tree to set.
   *
   * @returns {void}
   */
  setTree(a) {
    this._tree = a;
  }
  /**
   * Returns the tree.
   *
   * @returns {Node} The tree.
   */
  getTree() {
    return this._tree;
  }
  /**
   * Checks whether a description is available.
   * @returns {boolean} Returns true if the paper has a description.
   */
  hasDescription() {
    return this._attributes.description !== "";
  }
  /**
   * Returns the description or an empty string if no description is available.
   * @returns {string} Returns the description.
   */
  getDescription() {
    return this._attributes.description;
  }
  /**
   * Checks whether an SEO title is available
   * @returns {boolean} Returns true if the Paper has an SEO title.
   */
  hasTitle() {
    return this._attributes.title !== "";
  }
  /**
   * Returns the SEO title, or an empty string if no title is available.
   * @returns {string} Returns the SEO title.
   */
  getTitle() {
    return this._attributes.title;
  }
  /**
   * Checks whether an SEO title width in pixels is available.
   * @returns {boolean} Returns true if the Paper's SEO title is wider than 0 pixels.
   */
  hasTitleWidth() {
    return this._attributes.titleWidth !== 0;
  }
  /**
   * Gets the SEO title width in pixels, or an empty string of no title width in pixels is available.
   * @returns {number} Returns the SEO title width in pixels.
   */
  getTitleWidth() {
    return this._attributes.titleWidth;
  }
  /**
   * Checks whether a slug is available.
   * @returns {boolean} Returns true if the Paper has a slug.
   */
  hasSlug() {
    return this._attributes.slug !== "";
  }
  /**
   * Gets the paper's slug, or an empty string if no slug is available.
   * @returns {string} Returns the slug.
   */
  getSlug() {
    return this._attributes.slug;
  }
  /**
   * Checks if currently edited page is a front page.
   * @returns {boolean} Returns true if the current page is a front page.
   */
  isFrontPage() {
    return this._attributes.isFrontPage;
  }
  /**
   * Checks whether an url is available
   * @deprecated Since version 1.19.1. Use hasSlug instead.
   * @returns {boolean} Returns true if the Paper has a slug.
   */
  hasUrl() {
    return console.warn("This function is deprecated, use hasSlug instead"), this.hasSlug();
  }
  /**
   * Returns the url, or an empty string if no url is available.
   * @deprecated Since version 1.19.1. Use getSlug instead.
   * @returns {string} Returns the url
   */
  getUrl() {
    return console.warn("This function is deprecated, use getSlug instead"), this.getSlug();
  }
  /**
   * Checks whether a locale is available.
   * @returns {boolean} Returns true if the paper has a locale.
   */
  hasLocale() {
    return this._attributes.locale !== "";
  }
  /**
   * Returns the locale or an empty string if no locale is available
   * @returns {string} Returns the locale.
   */
  getLocale() {
    return this._attributes.locale;
  }
  /**
   * Gets the information of the writing direction of the paper.
   * It returns "LTR" (left to right) if this attribute is not provided.
   *
   * @returns {string} Returns the information of the writing direction of the paper.
   */
  getWritingDirection() {
    return this._attributes.writingDirection;
  }
  /**
   * Checks whether a permalink is available.
   * @returns {boolean} Returns true if the Paper has a permalink.
   */
  hasPermalink() {
    return this._attributes.permalink !== "";
  }
  /**
   * Returns the permalink, or an empty string if no permalink is available.
   * @returns {string} Returns the permalink.
   */
  getPermalink() {
    return this._attributes.permalink;
  }
  /**
   * Checks whether a date is available.
   * @returns {boolean} Returns true if the Paper has a date.
   */
  hasDate() {
    return this._attributes.date !== "";
  }
  /**
   * Returns the date, or an empty string if no date is available.
   * @returns {string} Returns the date.
   */
  getDate() {
    return this._attributes.date;
  }
  /**
   * Checks whether custom data is available.
   * @returns {boolean} Returns true if the Paper has custom data.
   */
  hasCustomData() {
    return !(0, Mu.isEmpty)(this._attributes.customData);
  }
  /**
   * Returns the custom data, or an empty object if no data is available.
   * @returns {Object} Returns the custom data.
   */
  getCustomData() {
    return this._attributes.customData;
  }
  /**
   * Checks whether a text title is available.
   * @returns {boolean} Returns true if the Paper has a text title.
   */
  hasTextTitle() {
    return this._attributes.textTitle !== "" && !(0, Mu.isNil)(this._attributes.textTitle);
  }
  /**
   * Returns the text title, or an empty string if no data is available.
   * @returns {string} Returns the text title.
   */
  getTextTitle() {
    return this._attributes.textTitle;
  }
  /**
   * Serializes the Paper instance to an object.
   *
   * @returns {Object} The serialized Paper.
   */
  serialize() {
    return {
      _parseClass: "Paper",
      text: this._text,
      ...this._attributes
    };
  }
  /**
   * Checks whether the given paper has the same properties as this instance.
   *
   * @param {Paper} paper The paper to compare to.
   *
   * @returns {boolean} Whether the given paper is identical or not.
   */
  equals(a) {
    return this._text === a.getText() && (0, Mu.isEqual)(this._attributes, a._attributes);
  }
  /**
   * Parses the object to a Paper.
   *
   * @param {Object|Paper} serialized The serialized object or Paper instance.
   *
   * @returns {Paper} The parsed Paper.
   */
  static parse(a) {
    if (a instanceof Pm)
      return a;
    const {
      text: t,
      _parseClass: n,
      ...r
    } = a;
    return new Pm(t, r);
  }
}
ao.default = Pm;
var Gf = {}, Vf = {}, Kf = {};
Object.defineProperty(Kf, "__esModule", {
  value: !0
});
Kf.default = void 0;
var Vg = K;
class JTa {
  /**
   * Initializes a task.
   *
   * @param {number}   id      The task identifier.
   * @param {Function} execute Executes the job with the data.
   * @param {Function} done    Callback for the scheduler.
   * @param {Object}   [data]  Optional data for when executing the task.
   * @param {string}   type    The type of the task (analyze, analyzeRelatedKeywords, loadScript or customMessage)
   */
  constructor(a, t, n, r = {}, o = "analyze") {
    if (!(0, Vg.isNumber)(a))
      throw new Error("Task.id should be a number.");
    if (!(0, Vg.isFunction)(t))
      throw new Error("Task.execute should be a function.");
    if (!(0, Vg.isFunction)(n))
      throw new Error("Task.done should be a function.");
    if (!(0, Vg.isObject)(r))
      throw new Error("Task.data should be an object.");
    this.id = a, this.execute = t, this.done = n, this.data = r, this.type = o;
  }
}
Kf.default = JTa;
Object.defineProperty(Vf, "__esModule", {
  value: !0
});
Vf.default = void 0;
var e$a = K, a$a = t$a(Kf);
function t$a(e) {
  return e && e.__esModule ? e : { default: e };
}
const n$a = {
  pollTime: 50
};
class r$a {
  /**
   * Initializes a Scheduler.
   *
   * @param {Object}  [configuration]             The configuration.
   * @param {number}  [configuration.pollTime]    The time in between each task
   *                                              poll in milliseconds,
   *                                              defaults to 50.
   */
  constructor(a = {}) {
    this._configuration = (0, e$a.merge)(n$a, a), this._tasks = {
      standard: [],
      extensions: [],
      analyze: [],
      analyzeRelatedKeywords: []
    }, this._pollHandle = null, this._started = !1, this.startPolling = this.startPolling.bind(this), this.stopPolling = this.stopPolling.bind(this), this.tick = this.tick.bind(this);
  }
  /**
   * Initialize polling.
   *
   * @returns {void}
   */
  startPolling() {
    this._started || (this._started = !0, this.tick());
  }
  /**
   * Do a tick and execute a task.
   *
   * @returns {void}
   */
  tick() {
    this.executeNextTask().then(() => {
      this._pollHandle = setTimeout(this.tick, this._configuration.pollTime);
    });
  }
  /**
   * Stop polling.
   *
   * @returns {void}
   */
  stopPolling() {
    clearTimeout(this._pollHandle), this._pollHandle = null, this._started = !1;
  }
  /**
   * Schedule a task.
   *
   * @param {Object}   task         The task object.
   * @param {number}   task.id      The task id.
   * @param {function} task.execute The function to run for task execution.
   * @param {function} task.done    The function to run when the task is done.
   * @param {Object}   task.data    The data object to execute with.
   * @param {string}   task.type    The type of the task.
   *
   * @returns {void}
   */
  schedule({
    id: a,
    execute: t,
    done: n,
    data: r,
    type: o
  }) {
    const l = new a$a.default(a, t, n, r, o);
    switch (o) {
      case "customMessage":
      case "loadScript":
        this._tasks.extensions.push(l);
        break;
      case "analyze":
        this._tasks.analyze = [l];
        break;
      case "analyzeRelatedKeywords":
        this._tasks.analyzeRelatedKeywords = [l];
        break;
      default:
        this._tasks.standard.push(l);
    }
  }
  /**
   * Retrieves the next task from the queue. Queues are sorted from lowest to highest priority.
   *
   * @returns {Task|null} The next task or null if none are available.
   */
  getNextTask() {
    return this._tasks.extensions.length > 0 ? this._tasks.extensions.shift() : this._tasks.analyze.length > 0 ? this._tasks.analyze.shift() : this._tasks.analyzeRelatedKeywords.length > 0 ? this._tasks.analyzeRelatedKeywords.shift() : this._tasks.standard.length > 0 ? this._tasks.standard.shift() : null;
  }
  /**
   * Executes the next task.
   *
   * @returns {Promise} Resolves once the task is done, with the result of the task.
   */
  executeNextTask() {
    const a = this.getNextTask();
    return a === null ? Promise.resolve(null) : Promise.resolve().then(() => a.execute(a.id, a.data)).then((t) => (a.done(a.id, t), t));
  }
}
Vf.default = r$a;
Object.defineProperty(Gf, "__esModule", {
  value: !0
});
Gf.default = void 0;
var s$a = i$a(Vf);
function i$a(e) {
  return e && e.__esModule ? e : { default: e };
}
Gf.default = s$a.default;
var Wc = {}, w1 = {}, qe = {};
Object.defineProperty(qe, "__esModule", {
  value: !0
});
qe.default = void 0;
var mr = K, o$a = l$a(mt);
function l$a(e) {
  return e && e.__esModule ? e : { default: e };
}
const qI = () => [];
class v1 {
  /**
   * Constructs the AssessmentResult value object.
   *
   * @param {Object} [values] The values for this assessment result.
   * @param {number} [values.score] The score for this assessment result.
   * @param {string} [values.text] The text for this assessment result. This is the text that can be used as a feedback message associated with the score.
   * @param {array} [values.marks] The marks for this assessment result.
   * @param {boolean} [values._hasBetaBadge] Whether this result has a beta badge.
   * @param {boolean} [values._hasJumps] Whether this result causes a jump to a different field.
   * @param {string} [values.editFieldName] The edit field name for this assessment result.
   * @param {boolean} [values._hasAIFixes] Whether this result has AI fixes.
   * @constructor
   * @returns {void}
   */
  constructor(a) {
    this._hasScore = !1, this._identifier = "", this._hasAIFixes = !1, this._hasMarks = !1, this._hasJumps = !1, this._hasEditFieldName = !1, this._marker = qI, this._hasBetaBadge = !1, this.score = 0, this.text = "", this.marks = [], this.editFieldName = "", (0, mr.isUndefined)(a) && (a = {}), (0, mr.isUndefined)(a.score) || this.setScore(a.score), (0, mr.isUndefined)(a.text) || this.setText(a.text), (0, mr.isUndefined)(a.marks) || this.setMarks(a.marks), (0, mr.isUndefined)(a._hasBetaBadge) || this.setHasBetaBadge(a._hasBetaBadge), (0, mr.isUndefined)(a._hasJumps) || this.setHasJumps(a._hasJumps), (0, mr.isUndefined)(a.editFieldName) || this.setEditFieldName(a.editFieldName), (0, mr.isUndefined)(a._hasAIFixes) || this.setHasAIFixes(a._hasAIFixes);
  }
  /**
   * Checks if a score is available.
   * @returns {boolean} Whether or not a score is available.
   */
  hasScore() {
    return this._hasScore;
  }
  /**
   * Gets the available score.
   * @returns {number} The score associated with the AssessmentResult.
   */
  getScore() {
    return this.score;
  }
  /**
   * Sets the score for the assessment.
   * @param {number} score The score to be used for the score property.
   * @returns {void}
   */
  setScore(a) {
    (0, mr.isNumber)(a) && (this.score = a, this._hasScore = !0);
  }
  /**
   * Checks if a text for the assessment result is available.
   * @returns {boolean} Whether or not a text is available.
   */
  hasText() {
    return this.text !== "";
  }
  /**
   * Gets the available text for the assessment result.
   * @returns {string} The text associated with the AssessmentResult.
   */
  getText() {
    return this.text;
  }
  /**
   * Sets the text for the assessment.
   * @param {string} text The text to be used for the text property.
   * @returns {void}
   */
  setText(a) {
    (0, mr.isUndefined)(a) && (a = ""), this.text = a;
  }
  /**
   * Gets the available marks.
   *
   * @returns {array} The marks associated with the AssessmentResult.
   */
  getMarks() {
    return this.marks;
  }
  /**
   * Sets the marks for the assessment.
   *
   * @param {array} marks The marks to be used for the marks property.
   *
   * @returns {void}
   */
  setMarks(a) {
    (0, mr.isArray)(a) && (this.marks = a, this._hasMarks = a.length > 0);
  }
  /**
   * Sets the identifier.
   *
   * @param {string} identifier An alphanumeric identifier for this result.
   * @returns {void}
   */
  setIdentifier(a) {
    this._identifier = a;
  }
  /**
   * Gets the identifier.
   *
   * @returns {string} An alphanumeric identifier for this result.
   */
  getIdentifier() {
    return this._identifier;
  }
  /**
   * Sets the marker, a pure function that can return the marks for a given Paper.
   *
   * @param {Function} marker The marker to set.
   * @returns {void}
   */
  setMarker(a) {
    this._marker = a;
  }
  /**
   * Returns whether this result has a marker that can be used to mark for a given Paper.
   *
   * @returns {boolean} Whether this result has a marker.
   */
  hasMarker() {
    return this._hasMarks && this._marker !== qI;
  }
  /**
   * Gets the marker, a pure function that can return the marks for a given Paper.
   *
   * @returns {Function} The marker.
   */
  getMarker() {
    return this._marker;
  }
  /**
   * Sets the value of _hasMarks to determine if there is something to mark.
   *
   * @param {boolean} hasMarks Is there something to mark.
   * @returns {void}
   */
  setHasMarks(a) {
    this._hasMarks = a;
  }
  /**
   * Returns the value of _hasMarks to determine if there is something to mark.
   *
   * @returns {boolean} Is there something to mark.
   */
  hasMarks() {
    return this._hasMarks;
  }
  /**
   * Sets the value of _hasBetaBadge to determine if the result has a beta badge.
   *
   * @param {boolean} hasBetaBadge Whether this result has a beta badge.
   * @returns {void}
   */
  setHasBetaBadge(a) {
    this._hasBetaBadge = a;
  }
  /**
   * Returns the value of _hasBetaBadge to determine if the result has a beta badge.
   *
   * @returns {bool} Whether this result has a beta badge.
   */
  hasBetaBadge() {
    return this._hasBetaBadge;
  }
  /**
   * Sets the value of _hasJumps to determine whether it's needed to jump to a different field.
   *
   * @param {boolean} hasJumps Whether this result causes a jump to a different field.
   * @returns {void}
   */
  setHasJumps(a) {
    this._hasJumps = a;
  }
  /**
   * Returns the value of _hasJumps to determine whether it's needed to jump to a different field.
   *
   * @returns {bool} Whether this result causes a jump to a different field.
   */
  hasJumps() {
    return this._hasJumps;
  }
  /**
   * Check if an edit field name is available.
   * @returns {boolean} Whether or not an edit field name is available.
   */
  hasEditFieldName() {
    return this._hasEditFieldName;
  }
  /**
   * Gets the edit field name.
   * @returns {string} The edit field name associated with the AssessmentResult.
   */
  getEditFieldName() {
    return this.editFieldName;
  }
  /**
   * Sets the edit field name to be used to create the aria label for an edit button.
   * @param {string} editFieldName The string to be used for the string property
   * @returns {void}
   */
  setEditFieldName(a) {
    a !== "" && (this.editFieldName = a, this._hasEditFieldName = !0);
  }
  /**
   * Sets the value of _hasAIFixes to determine if the result has AI fixes.
   *
   * @param {boolean} hasAIFixes Whether this result has AI fixes.
   * @returns {void}
   */
  setHasAIFixes(a) {
    this._hasAIFixes = a;
  }
  /**
   * Returns the value of _hasAIFixes to determine if the result has AI fixes.
   *
   * @returns {bool} Whether this result has AI fixes.
   */
  hasAIFixes() {
    return this._hasAIFixes;
  }
  /**
   * Serializes the AssessmentResult instance to an object.
   *
   * @returns {Object} The serialized AssessmentResult.
   */
  serialize() {
    return {
      _parseClass: "AssessmentResult",
      identifier: this._identifier,
      score: this.score,
      text: this.text,
      marks: this.marks.map((a) => a.serialize()),
      _hasBetaBadge: this._hasBetaBadge,
      _hasJumps: this._hasJumps,
      _hasAIFixes: this._hasAIFixes,
      editFieldName: this.editFieldName
    };
  }
  /**
   * Parses the object to an AssessmentResult.
   *
   * @param {Object} serialized The serialized object.
   *
   * @returns {AssessmentResult} The parsed AssessmentResult.
   */
  static parse(a) {
    const t = new v1({
      text: a.text,
      score: a.score,
      marks: a.marks.map((n) => o$a.default.parse(n)),
      _hasBetaBadge: a._hasBetaBadge,
      _hasJumps: a._hasJumps,
      _hasAIFixes: a._hasAIFixes,
      editFieldName: a.editFieldName
    });
    return t.setIdentifier(a.identifier), t;
  }
}
qe.default = v1;
Object.defineProperty(w1, "__esModule", {
  value: !0
});
w1.default = a0;
var Kv = K, d$a = qd(qe), u$a = qd(mt), c$a = qd(ao), p$a = qd(Ld), g$a = qd(Bc), m$a = qd(Md);
function qd(e) {
  return e && e.__esModule ? e : { default: e };
}
const FI = {
  AssessmentResult: d$a.default,
  Mark: u$a.default,
  Paper: c$a.default,
  Sentence: p$a.default,
  Clause: g$a.default,
  ProminentWord: m$a.default
};
function a0(e) {
  if ((0, Kv.isArray)(e))
    return e.map(a0);
  const a = (0, Kv.isObject)(e);
  return a && e._parseClass && FI[e._parseClass] ? FI[e._parseClass].parse(e) : a ? (0, Kv.mapValues)(e, (t) => a0(t)) : e;
}
var k1 = {};
Object.defineProperty(k1, "__esModule", {
  value: !0
});
k1.default = t0;
var Yv = K;
function t0(e) {
  if ((0, Yv.isArray)(e))
    return e.map(t0);
  const a = (0, Yv.isObject)(e);
  return a && e.serialize ? e.serialize() : a ? (0, Yv.mapValues)(e, (t) => t0(t)) : e;
}
Object.defineProperty(Wc, "__esModule", {
  value: !0
});
Wc.default = void 0;
var f$a = NL(w1), h$a = NL(k1);
function NL(e) {
  return e && e.__esModule ? e : { default: e };
}
Wc.default = {
  parse: f$a.default,
  serialize: h$a.default
};
var _1 = {}, E1 = {};
Object.defineProperty(E1, "__esModule", {
  value: !0
});
E1.default = y$a;
var BI = K;
function y$a(e, a, t = "%%") {
  t = (0, BI.escapeRegExp)(t);
  const n = new RegExp(`${t}(.+?)${t}`, "g");
  let r, o = e;
  for (; (r = n.exec(e)) !== null; ) {
    const l = r[1], u = new RegExp(`${t}${(0, BI.escapeRegExp)(l)}${t}`, "g");
    l in a && (o = o.replace(u, a[l]));
  }
  return o;
}
Object.defineProperty(_1, "__esModule", {
  value: !0
});
_1.default = v$a;
var z$a = b$a(E1);
function b$a(e) {
  return e && e.__esModule ? e : { default: e };
}
const w$a = function(e, a, t, n = "") {
  t && (n = (0, z$a.default)(n, t));
  let r = n ? [n] : [];
  return a.name && a.message && (a.stack && e.debug(a.stack), r.push(`${a.name}: ${a.message}`)), r = r.join(`
	`), e.error(r), r;
};
function v$a(e, a, t = "") {
  return async (...n) => {
    try {
      return await a(...n);
    } catch (r) {
      return {
        error: w$a(e, r, n[1], t)
      };
    }
  };
}
var _s = {}, zn = {}, Yf = {};
Object.defineProperty(Yf, "__esModule", {
  value: !0
});
Yf.default = void 0;
var k$a = K;
function _$a(e) {
  return e && (e.length === 0 || e[0].hasPosition()) ? e : (0, k$a.uniqBy)(e, function(a) {
    return a.getOriginal();
  });
}
Yf.default = _$a;
var Uc = {};
Object.defineProperty(Uc, "__esModule", {
  value: !0
});
Uc.default = void 0;
Uc.showTrace = LL;
var Qv = K;
function LL(e) {
  (0, Qv.isUndefined)(e) && (e = ""), !(0, Qv.isUndefined)(console) && !(0, Qv.isUndefined)(console.trace) && console.trace(e);
}
Uc.default = {
  showTrace: LL
};
Object.defineProperty(zn, "__esModule", {
  value: !0
});
zn.default = void 0;
var WI = sa, UI = K, E$a = Qf(qe), A$a = m0, T$a = Qf(hc), $$a = Qf(Xi), HI = Qf(Yf), j$a = Uc;
function Qf(e) {
  return e && e.__esModule ? e : { default: e };
}
const x$a = 9;
class S$a {
  /**
   * Creates a new Assessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    this.type = "assessor", this.setResearcher(a), this._assessments = [], this.results = [], this._options = t || {}, this._scoreAggregator = null;
  }
  /**
   * Checks if the researcher is defined and sets it.
   *
   * @param   {Researcher} researcher The researcher to use in the assessor.
   *
   * @throws  {MissingArgument} Parameter needs to be a valid researcher object.
   * @returns {void}
   */
  setResearcher(a) {
    if ((0, UI.isUndefined)(a))
      throw new $$a.default("The assessor requires a researcher.");
    this._researcher = a;
  }
  /**
   * Gets all available assessments.
   * @returns {Assessment[]} assessment
   */
  getAvailableAssessments() {
    return this._assessments;
  }
  /**
   * Checks whether the Assessment is applicable.
   *
   * @param {Assessment} assessment The Assessment object that needs to be checked.
   * @param {Paper} paper The Paper object to check against.
   * @param {Researcher} [researcher] The Researcher object containing additional information.
   * @returns {boolean} Whether or not the Assessment is applicable.
   */
  isApplicable(a, t, n) {
    return typeof a.isApplicable > "u" ? !0 : a.isApplicable(t, n);
  }
  /**
   * Determines whether an assessment has a marker.
   *
   * @param {Assessment} assessment The assessment to check for.
   * @returns {boolean} Whether or not the assessment has a marker.
   */
  hasMarker(a) {
    return (0, UI.isFunction)(this._options.marker) && (Object.hasOwn(a, "getMarks") || typeof a.getMarks == "function");
  }
  /**
   * Returns the specific marker for this assessor.
   *
   * @returns {Function} The specific marker for this assessor.
   */
  getSpecificMarker() {
    return this._options.marker;
  }
  /**
   * Returns the paper that was most recently assessed.
   *
   * @returns {Paper} The paper that was most recently assessed.
   */
  getPaper() {
    return this._lastPaper;
  }
  /**
   * Returns the marker for a given assessment, composes the specific marker with the assessment getMarks function.
   *
   * @param {Assessment} assessment The assessment for which we are retrieving the composed marker.
   * @param {Paper} paper The paper to retrieve the marker for.
   * @param {Researcher} researcher The researcher for the paper.
   * @returns {Function} A function that can mark the given paper according to the given assessment.
   */
  getMarker(a, t, n) {
    const r = this._options.marker;
    return function() {
      let o = a.getMarks(t, n);
      o = (0, HI.default)(o), r(t, o);
    };
  }
  /**
   * Runs the researches defined in the task list or the default researches.
   *
   * @param {Paper} paper The paper to run assessments on.
   * @returns {void}
   */
  assess(a) {
    this._researcher.setPaper(a);
    const t = new T$a.default(this._researcher), n = a._attributes && a._attributes.shortcodes;
    a.setTree((0, A$a.build)(a, t, n));
    let r = this.getAvailableAssessments();
    r = r.filter((o) => this.isApplicable(o, a, this._researcher)), this.setHasMarkers(!1), this.results = r.map((o) => this.executeAssessment(a, this._researcher, o)), this._lastPaper = a;
  }
  /**
   * Sets the value of has markers with a boolean to determine if there are markers.
   *
   * @param {boolean} hasMarkers True when there are markers, otherwise it is false.
   * @returns {void}
   */
  setHasMarkers(a) {
    this._hasMarkers = a;
  }
  /**
   * Returns true when there are markers.
   *
   * @returns {boolean} Are there markers
   */
  hasMarkers() {
    return this._hasMarkers;
  }
  /**
   * Executes an assessment and returns the AssessmentResult.
   *
   * @param {Paper} paper The paper to pass to the assessment.
   * @param {Researcher} researcher The researcher to pass to the assessment.
   * @param {Assessment} assessment The assessment to execute.
   * @returns {AssessmentResult} The result of the assessment.
   */
  executeAssessment(a, t, n) {
    let r;
    try {
      r = n.getResult(a, t), r.setIdentifier(n.identifier), r.hasMarks() && (r.marks = n.getMarks(a, t), r.marks = (0, HI.default)(r.marks)), r.hasMarks() && this.hasMarker(n) && (this.setHasMarkers(!0), r.setMarker(this.getMarker(n, a, t)));
    } catch (o) {
      (0, j$a.showTrace)(o), r = new E$a.default(), r.setScore(-1), r.setText((0, WI.sprintf)(
        /* translators: %1$s expands to the name of the assessment. */
        (0, WI.__)("An error occurred in the '%1$s' assessment", "wordpress-seo"),
        n.identifier,
        o
      ));
    }
    return r;
  }
  /**
   * Filters out all assessment results that have no score and no text.
   *
   * @returns {AssessmentResult[]} The array with all the valid assessments.
   */
  getValidResults() {
    return this.results.filter((a) => this.isValidResult(a));
  }
  /**
   * Returns if an assessmentResult is valid.
   *
   * @param {AssessmentResult} assessmentResult The assessmentResult to validate.
   * @returns {boolean} whether or not the result is valid.
   */
  isValidResult(a) {
    return a.hasScore() && a.hasText();
  }
  /**
   * Returns the overall score. Calculates the total score by adding all scores and dividing these
   * by the number of results times the ScoreRating.
   *
   * @returns {number} The overall score.
   */
  calculateOverallScore() {
    const a = this.getValidResults(), t = a.reduce((n, r) => n + r.getScore(), 0);
    return Math.round(t / (a.length * x$a) * 100) || 0;
  }
  /**
   * Registers an assessment and adds it to the internal assessments object.
   *
   * @param {string} name The name of the assessment.
   * @param {Assessment} assessment The object containing function to run as an assessment and it's requirements.
   * @returns {boolean} Whether registering the assessment was successful.
   */
  addAssessment(a, t) {
    return Object.hasOwn(t, "identifier") || (t.identifier = a), this.getAssessment(t.identifier) && this.removeAssessment(t.identifier), this._assessments.push(t), !0;
  }
  /**
   * Removes a specific Assessment from the list of Assessments.
   *
   * @param {string} name The Assessment to remove from the list of assessments.
   * @returns {void}
   */
  removeAssessment(a) {
    const t = this._assessments.findIndex((n) => Object.hasOwn(n, "identifier") && a === n.identifier);
    t !== -1 && this._assessments.splice(t, 1);
  }
  /**
   * Returns an assessment by identifier
   *
   * @param {string} identifier The identifier of the assessment.
   * @returns {Assessment} The object if found, otherwise undefined.
   */
  getAssessment(a) {
    return this._assessments.find((t) => Object.hasOwn(t, "identifier") && a === t.identifier);
  }
  /**
   * Checks which of the available assessments are applicable and returns an array with applicable assessments.
   *
   * @returns {Assessment[]} The array with applicable assessments.
   */
  getApplicableAssessments() {
    return this.getAvailableAssessments().filter((t) => this.isApplicable(t, this.getPaper(), this._researcher));
  }
  /**
   * Returns the ScoreAggregator for this assessor.
   *
   * @returns {ScoreAggregator} The specific marker for this assessor.
   */
  getScoreAggregator() {
    return this._scoreAggregator;
  }
}
zn.default = S$a;
var el = {}, Ce = {}, Xf = {};
Object.defineProperty(Xf, "__esModule", {
  value: !0
});
Xf.measureTextWidth = void 0;
const ML = "yoast-measurement-element", O$a = function() {
  const e = document.createElement("div");
  return e.id = ML, e.style.position = "absolute", e.style.left = "-9999em", e.style.top = 0, e.style.height = 0, e.style.overflow = "hidden", e.style.fontFamily = "arial, sans-serif", e.style.fontSize = "20px", e.style.fontWeight = "400", document.body.appendChild(e), e;
}, I$a = function(e) {
  let a = document.getElementById(ML);
  return a || (a = O$a()), a.innerText = e, a.offsetWidth;
};
Xf.measureTextWidth = I$a;
var A1 = {};
Object.defineProperty(A1, "__esModule", {
  value: !0
});
A1.getLanguagesWithWordFormSupport = C$a;
function C$a() {
  return ["en", "de", "es", "fr", "it", "nl", "ru", "id", "pt", "pl", "ar", "sv", "he", "hu", "nb", "tr", "cs", "sk", "el", "ja"];
}
var Fd = {};
Object.defineProperty(Fd, "__esModule", {
  value: !0
});
Fd.default = P$a;
function P$a(e) {
  return Math.round(e) === e ? Math.round(e) : Math.round(e * 10) / 10;
}
var T1 = {};
Object.defineProperty(T1, "__esModule", {
  value: !0
});
T1.getLanguagesWithWordComplexity = R$a;
function R$a() {
  return ["en", "es", "de", "fr"];
}
var $1 = {}, j1 = {};
Object.defineProperty(j1, "__esModule", {
  value: !0
});
j1.default = N$a;
const D$a = "(en|e|s)$", GI = new RegExp(D$a);
function N$a(e, a, t) {
  const n = e.wordLength, r = t.frequencyList.list;
  return a = a.toLowerCase(), a.length <= n || r.includes(a) ? !1 : GI.test(a) ? (a = a.replace(GI, ""), !r.includes(a)) : !0;
}
var x1 = {};
Object.defineProperty(x1, "__esModule", {
  value: !0
});
x1.default = q$a;
var L$a = qL(Mc), M$a = qL(ys);
function qL(e) {
  return e && e.__esModule ? e : { default: e };
}
function q$a(e, a, t) {
  const n = e.wordLength, r = t.frequencyList.list, o = e.doesUpperCaseDecreaseComplexity;
  if (a.length <= n || o && a[0].toLowerCase() !== a[0] || r.includes(a))
    return !1;
  if (t) {
    const l = (0, L$a.default)(a, (0, M$a.default)(t.nouns.regexNoun.singularize));
    return !r.includes(l);
  }
  return !0;
}
var S1 = {};
Object.defineProperty(S1, "__esModule", {
  value: !0
});
S1.default = K$a;
const F$a = "aeiuoyáéíóúñ", B$a = "bcdfghjklmnpqrstvwxzñ", W$a = "[" + F$a + "](s)$", U$a = new RegExp(W$a), H$a = "[" + B$a + "](es)$", G$a = new RegExp(H$a), V$a = "(s|es)$", VI = new RegExp(V$a);
function K$a(e, a, t) {
  const n = e.wordLength, r = t.frequencyList.list;
  return a.length <= n || a[0].toLowerCase() !== a[0] || r.includes(a) ? !1 : G$a.test(a) || U$a.test(a) ? (a = a.replace(VI, ""), !r.includes(a)) : !0;
}
var O1 = {};
Object.defineProperty(O1, "__esModule", {
  value: !0
});
O1.default = X$a;
var Y$a = $a;
const Q$a = "^(c'|d'|l'|s')", KI = new RegExp(Q$a);
function X$a(e, a, t) {
  const n = e.wordLength, r = t.frequencyList.list;
  if (a = (0, Y$a.normalizeSingle)(a), KI.test(a) && (a = a.replace(KI, "")), a.length <= n || r.includes(a))
    return !1;
  if (a[0].toLowerCase() === a[0]) {
    const o = new RegExp(t.suffixGroupsComplexity.standardSuffixesWithSplural), l = new RegExp(t.suffixGroupsComplexity.standardSuffixesWithXplural), u = t.suffixGroupsComplexity.irregularPluralSingularSuffixes, c = new RegExp(u[0]);
    return o.test(a) || l.test(a) ? a = a.substring(0, a.length - 1) : c.test(a) && (a = a.replace(c, u[1])), !r.includes(a);
  }
  return !1;
}
Object.defineProperty($1, "__esModule", {
  value: !0
});
$1.default = tja;
var Z$a = Zf(j1), J$a = Zf(x1), eja = Zf(S1), aja = Zf(O1);
function Zf(e) {
  return e && e.__esModule ? e : { default: e };
}
function tja(e) {
  return {
    de: Z$a.default,
    en: J$a.default,
    es: eja.default,
    fr: aja.default
  }[e];
}
var I1 = {}, Jf = {};
Object.defineProperty(Jf, "__esModule", {
  value: !0
});
Jf.default = void 0;
Jf.default = {
  wordLength: 7,
  doesUpperCaseDecreaseComplexity: !0
};
var eh = {};
Object.defineProperty(eh, "__esModule", {
  value: !0
});
eh.default = void 0;
eh.default = {
  wordLength: 10
};
var ah = {};
Object.defineProperty(ah, "__esModule", {
  value: !0
});
ah.default = void 0;
ah.default = {
  wordLength: 7
};
var th = {};
Object.defineProperty(th, "__esModule", {
  value: !0
});
th.default = void 0;
th.default = {
  wordLength: 9
};
Object.defineProperty(I1, "__esModule", {
  value: !0
});
I1.default = oja;
var nja = nh(Jf), rja = nh(eh), sja = nh(ah), ija = nh(th);
function nh(e) {
  return e && e.__esModule ? e : { default: e };
}
function oja(e) {
  return {
    de: rja.default,
    en: nja.default,
    es: sja.default,
    fr: ija.default
  }[e];
}
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "createAnchorOpeningTag", {
    enumerable: !0,
    get: function() {
      return o.createAnchorOpeningTag;
    }
  }), Object.defineProperty(e, "formatNumber", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  }), Object.defineProperty(e, "getLanguagesWithWordComplexity", {
    enumerable: !0,
    get: function() {
      return r.getLanguagesWithWordComplexity;
    }
  }), Object.defineProperty(e, "getLanguagesWithWordFormSupport", {
    enumerable: !0,
    get: function() {
      return t.getLanguagesWithWordFormSupport;
    }
  }), Object.defineProperty(e, "getWordComplexityConfig", {
    enumerable: !0,
    get: function() {
      return u.default;
    }
  }), Object.defineProperty(e, "getWordComplexityHelper", {
    enumerable: !0,
    get: function() {
      return l.default;
    }
  }), e.htmlEntities = void 0, Object.defineProperty(e, "measureTextWidth", {
    enumerable: !0,
    get: function() {
      return a.measureTextWidth;
    }
  });
  var a = Xf, t = A1, n = z(Fd), r = T1, o = ws, l = z($1), u = z(I1), c = y(Vt);
  e.htmlEntities = c;
  function f(v) {
    if (typeof WeakMap != "function") return null;
    var O = /* @__PURE__ */ new WeakMap(), I = /* @__PURE__ */ new WeakMap();
    return (f = function(A) {
      return A ? I : O;
    })(v);
  }
  function y(v, O) {
    if (v && v.__esModule) return v;
    if (v === null || typeof v != "object" && typeof v != "function") return { default: v };
    var I = f(O);
    if (I && I.has(v)) return I.get(v);
    var A = { __proto__: null }, x = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var w in v) if (w !== "default" && {}.hasOwnProperty.call(v, w)) {
      var j = x ? Object.getOwnPropertyDescriptor(v, w) : null;
      j && (j.get || j.set) ? Object.defineProperty(A, w, j) : A[w] = v[w];
    }
    return A.default = v, I && I.set(v, A), A;
  }
  function z(v) {
    return v && v.__esModule ? v : { default: v };
  }
})(Ce);
var pt = {};
Object.defineProperty(pt, "__esModule", {
  value: !0
});
pt.default = void 0;
pt.inRangeEndInclusive = pt.inRange = n0;
pt.inRangeStartEndInclusive = BL;
pt.inRangeStartInclusive = FL;
function n0(e, a, t) {
  return e > a && e <= t;
}
function FL(e, a, t) {
  return e >= a && e < t;
}
function BL(e, a, t) {
  return e >= a && e <= t;
}
pt.default = {
  inRange: n0,
  inRangeStartInclusive: FL,
  inRangeEndInclusive: n0,
  inRangeStartEndInclusive: BL
};
var Ze = {};
Object.defineProperty(Ze, "__esModule", {
  value: !0
});
Ze.default = void 0;
var lja = sa, dja = eo(), YI = Zt;
class uja {
  /**
   * Executes the assessment and return its result.
   *
   * @param {Paper}       paper       The paper to run this assessment on.
   * @param {Researcher}  researcher  The researcher used for the assessment.
   *
   * @returns {AssessmentResult} The result of the assessment.
   */
  getResult(a, t) {
    throw "The method getResult is not implemented";
  }
  /**
   * Checks whether the assessment is applicable.
   *
   * @param {Paper}       paper       The paper to run this assessment on.
   * @param {Researcher}  researcher  The researcher used for the assessment.
   *
   * @returns {boolean} Whether the assessment is applicable, defaults to `true`.
   */
  isApplicable(a, t) {
    return !0;
  }
  /**
   * Tests whether a `Paper` has enough content for assessments to be displayed.
   *
   * @param {Paper} paper 						The paper to run this assessment on.
   * @param {number} contentNeededForAssessment	The minimum length in characters a text must have for assessments to be displayed.
   *
   * @returns {boolean} `true` if the text is of the required length, `false` otherwise.
   */
  hasEnoughContentForAssessment(a, t = 50) {
    let n = a.getText();
    return n = (0, YI.removeHtmlBlocks)(n), n = (0, YI.filterShortcodesFromHTML)(n, a._attributes && a._attributes.shortcodes), (0, dja.sanitizeString)(n).length >= t;
  }
  /**
   * Formats a string with the URL to the article about a specific assessment.
   *
   * @param {string} resultText The string to format.
   * @param {string} urlTitle The URL to the article about a specific assessment.
   * @param {string} urlCallToAction The URL to the help article for a specific assessment.
   * @returns {string} The formatted string.
   */
  formatResultText(a, t, n) {
    return (0, lja.sprintf)(a, t, n, "</a>");
  }
}
Ze.default = uja;
Object.defineProperty(el, "__esModule", {
  value: !0
});
el.default = void 0;
var Wl = sa, cja = K, QI = Ce, pja = pt, gja = C1(qe), mja = C1(mt), fja = C1(Ze);
function C1(e) {
  return e && e.__esModule ? e : { default: e };
}
class hja extends fja.default {
  /**
   * Sets the identifier and the config.
   * @constructor
   * @param {object} config       The configuration to use.
   * @param {boolean} isProduct   Whether product configuration should be used.
   */
  constructor(a = {}, t = !1) {
    super();
    const n = {
      urlTitle: (0, QI.createAnchorOpeningTag)("https://yoa.st/35d"),
      urlCallToAction: (0, QI.createAnchorOpeningTag)("https://yoa.st/35e"),
      countCharacters: !1,
      parameters: {
        recommendedLength: 150,
        maximumRecommendedLength: 200
      }
    };
    this.identifier = "textParagraphTooLong", this._config = (0, cja.merge)(n, a), this._isProduct = t;
  }
  /**
   * Returns an array containing only the paragraphs longer than the recommended length.
   *
   * @param {ParagraphLength[]} paragraphsLength The array containing the lengths of individual paragraphs.
   * @param {object} config The config to use.
   *
   * @returns {ParagraphLength[]} An array containing too long paragraphs.
   */
  getTooLongParagraphs(a, t) {
    return a.filter((n) => n.paragraphLength > t.parameters.recommendedLength);
  }
  /**
   * Check if there is language-specific config, and if so, overwrite the current config with it.
   *
   * @param {Researcher} researcher The researcher to use.
   *
   * @returns {Object} The config that should be used.
   */
  getConfig(a) {
    const t = this._config, n = a.getConfig("paragraphLength");
    return n && (t.parameters = this._isProduct ? n.productPageParams : n.defaultPageParams), t;
  }
  /**
   * Returns the score for the ParagraphTooLongAssessment.
   * @param {ParagraphLength[]} paragraphsLength The array containing the lengths of individual paragraphs.
   * @param {object} config The config to use.
   * @returns {number} The score.
   */
  getScore(a, t) {
    if (a.length === 0)
      return 9;
    const r = a.sort((l, u) => u.paragraphLength - l.paragraphLength)[0].paragraphLength;
    let o;
    return r <= t.parameters.recommendedLength && (o = 9), (0, pja.inRangeEndInclusive)(r, t.parameters.recommendedLength, t.parameters.maximumRecommendedLength) && (o = 6), r > t.parameters.maximumRecommendedLength && (o = 3), o;
  }
  /**
   * Returns the scores and text for the ParagraphTooLongAssessment.
   *
   * @param {ParagraphLength[]} paragraphsLength The array containing the lengths of individual paragraphs.
   * @param {object} config The config to use.
   *
   * @returns {AssessmentResult} The assessmentResult.
   */
  calculateResult(a, t) {
    const n = this.getTooLongParagraphs(a, t), r = new gja.default(), o = this.getScore(a, t);
    if (r.setScore(o), o >= 7)
      return r.setHasMarks(!1), r.setText((0, Wl.sprintf)(
        /* translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
        (0, Wl.__)("%1$sParagraph length%2$s: There are no paragraphs that are too long. Great job!", "wordpress-seo"),
        t.urlTitle,
        "</a>"
      )), r;
    const l = (0, Wl.sprintf)(
      /* translators: %1$s and %5$s expand to links on yoast.com, %2$s expands to the anchor end tag,
      %3$d expands to the number of paragraphs over the recommended limit, %4$d expands to the limit. */
      (0, Wl._n)("%1$sParagraph length%2$s: %3$d of the paragraphs contains more than the recommended maximum number of words (%4$d). %5$sShorten your paragraphs%2$s!", "%1$sParagraph length%2$s: %3$d of the paragraphs contain more than the recommended maximum number of words (%4$d). %5$sShorten your paragraphs%2$s!", n.length, "wordpress-seo"),
      t.urlTitle,
      "</a>",
      n.length,
      t.parameters.recommendedLength,
      t.urlCallToAction
    ), u = (0, Wl.sprintf)(
      /* translators: %1$s and %5$s expand to links on yoast.com, %2$s expands to the anchor end tag,
      %3$d expands to the number of paragraphs over the recommended limit, %4$d expands to the limit. */
      (0, Wl._n)("%1$sParagraph length%2$s: %3$d of the paragraphs contains more than the recommended maximum number of characters (%4$d). %5$sShorten your paragraphs%2$s!", "%1$sParagraph length%2$s: %3$d of the paragraphs contain more than the recommended maximum number of characters (%4$d). %5$sShorten your paragraphs%2$s!", n.length, "wordpress-seo"),
      t.urlTitle,
      "</a>",
      n.length,
      t.parameters.recommendedLength,
      t.urlCallToAction
    );
    return r.setHasMarks(!0), r.setText(t.countCharacters ? u : l), r.setHasAIFixes(!0), r;
  }
  /**
   * Sort the paragraphs based on word count.
   *
   * @param {Array} paragraphs The array with paragraphs.
   *
   * @returns {Array} The array sorted on word counts.
   */
  sortParagraphs(a) {
    return a.sort(function(t, n) {
      return n.countLength - t.countLength;
    });
  }
  /**
   * Creates a marker for the paragraphs.
   *
   * @param {Paper} paper The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {Mark[]} An array with marked paragraphs.
   */
  getMarks(a, t) {
    const n = t.getResearch("getParagraphLength");
    return this.getTooLongParagraphs(n, this.getConfig(t)).flatMap(({
      paragraph: o
    }) => {
      const l = o.sourceCodeLocation;
      return new mja.default({
        position: {
          startOffset: l.startTag ? l.startTag.endOffset : l.startOffset,
          endOffset: l.endTag ? l.endTag.startOffset : l.endOffset,
          startOffsetBlock: 0,
          endOffsetBlock: l.endOffset - l.startOffset,
          clientId: o.clientId || "",
          attributeId: o.attributeId || "",
          isFirstSection: o.isFirstSection || !1
        }
      });
    });
  }
  /**
   * Runs the getParagraphLength module, based on this returns an assessment result with score and text.
   *
   * @param {Paper} paper             The paper to use for the assessment.
   * @param {Researcher} researcher   The researcher used for calling research.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a, t) {
    const n = t.getResearch("getParagraphLength");
    return this._config.countCharacters = !!t.getConfig("countCharacters"), this.calculateResult(n, this.getConfig(t));
  }
}
el.default = hja;
var Es = {};
Object.defineProperty(Es, "__esModule", {
  value: !0
});
Es.default = void 0;
var Ul = sa, Xv = K, yja = rh(Ze), zja = rh(Fd), bja = pt, XI = Ce, wja = rh(qe), vja = rh(mt);
function rh(e) {
  return e && e.__esModule ? e : { default: e };
}
class kja extends yja.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object} config			The scoring configuration that should be used.
   * @param {boolean} isCornerstone	Whether cornerstone configuration should be used.
   * @param {boolean} isProduct		Whether product configuration should be used.
  	 * @returns {void}
   */
  constructor(a = {}, t = !1, n = !1) {
    super();
    const r = {
      recommendedLength: 20,
      slightlyTooMany: 25,
      farTooMany: 30,
      urlTitle: (0, XI.createAnchorOpeningTag)("https://yoa.st/34v"),
      urlCallToAction: (0, XI.createAnchorOpeningTag)("https://yoa.st/34w"),
      countCharacters: !1
    };
    this._config = (0, Xv.merge)(r, a), this._isCornerstone = t, this._isProduct = n, this.identifier = "textSentenceLength";
  }
  /**
   * Scores the percentage of sentences including more than the recommended number of words.
   *
   * @param {Paper} paper The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {AssessmentResult} The Assessment result.
   */
  getResult(a, t) {
    const n = t.getResearch("countSentencesFromText");
    t.getConfig("sentenceLength") && (this._config = this.getLanguageSpecificConfig(t)), this._config.countCharacters = !!t.getConfig("countCharacters");
    const r = this.calculatePercentage(n), o = this.calculateScore(r), l = new wja.default();
    return o < 9 && l.setHasAIFixes(!0), l.setScore(o), l.setText(this.translateScore(o, r)), l.setHasMarks(r > 0), l;
  }
  /**
   * Mark the sentences.
   *
   * @param {Paper} paper The paper to use for the marking.
   * @param {Researcher} researcher The researcher to use.
   *
   * @returns {Array} Array with all the marked sentences.
   */
  getMarks(a, t) {
    const n = t.getResearch("countSentencesFromText");
    return t.getConfig("sentenceLength") && (this._config = this.getLanguageSpecificConfig(t)), this.getTooLongSentences(n).map((o) => {
      const {
        sentence: l,
        firstToken: u,
        lastToken: c
      } = o, f = u.sourceCodeRange.startOffset, y = c.sourceCodeRange.endOffset;
      return new vja.default({
        position: {
          startOffset: f,
          endOffset: y,
          startOffsetBlock: f - (l.parentStartOffset || 0),
          endOffsetBlock: y - (l.parentStartOffset || 0),
          clientId: l.parentClientId || "",
          attributeId: l.parentAttributeId || "",
          isFirstSection: l.isParentFirstSectionOfBlock || !1
        }
      });
    });
  }
  /**
   * Check if there is language-specific config, and if so, overwrite the current config with it.
   *
   * @param {Researcher} researcher The researcher to use.
   *
   * @returns {Object} The config that should be used.
   */
  getLanguageSpecificConfig(a) {
    const t = this._config, n = a.getConfig("sentenceLength");
    return n.hasOwnProperty("recommendedLength") && (t.recommendedLength = n.recommendedLength), this._isCornerstone === !0 && this._isProduct === !1 && n.hasOwnProperty("cornerstonePercentages") ? (0, Xv.merge)(t, n.cornerstonePercentages) : this._isCornerstone === !1 && this._isProduct === !1 && n.hasOwnProperty("percentages") ? (0, Xv.merge)(t, n.percentages) : t;
  }
  /**
   * Translates the score to a message the user can understand.
   *
   * @param {number} score The score.
   * @param {number} percentage The percentage.
   *
   * @returns {string} A string.
   */
  translateScore(a, t) {
    if (a >= 7)
      return (0, Ul.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
        (0, Ul.__)("%1$sSentence length%2$s: Great!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      );
    const n = (0, Ul.sprintf)(
      /* translators: %1$s and %6$s expand to links on yoast.com, %2$s expands to the anchor end tag,
      %3$s expands to percentage of sentences, %4$d expands to the recommended maximum sentence length,
      %5$s expands to the recommended maximum percentage. */
      (0, Ul._n)("%1$sSentence length%2$s: %3$s of the sentences contain more than %4$d word, which is more than the recommended maximum of %5$s. %6$sTry to shorten the sentences%2$s.", "%1$sSentence length%2$s: %3$s of the sentences contain more than %4$d words, which is more than the recommended maximum of %5$s. %6$sTry to shorten the sentences%2$s.", this._config.recommendedLength, "wordpress-seo"),
      this._config.urlTitle,
      "</a>",
      t + "%",
      this._config.recommendedLength,
      this._config.slightlyTooMany + "%",
      this._config.urlCallToAction
    ), r = (0, Ul.sprintf)(
      /* translators: %1$s and %6$s expand to links on yoast.com, %2$s expands to the anchor end tag,
      %3$s expands to percentage of sentences, %4$d expands to the recommended maximum sentence length,
      %5$s expands to the recommended maximum percentage. */
      (0, Ul._n)("%1$sSentence length%2$s: %3$s of the sentences contain more than %4$d character, which is more than the recommended maximum of %5$s. %6$sTry to shorten the sentences%2$s.", "%1$sSentence length%2$s: %3$s of the sentences contain more than %4$d characters, which is more than the recommended maximum of %5$s. %6$sTry to shorten the sentences%2$s.", this._config.recommendedLength, "wordpress-seo"),
      this._config.urlTitle,
      "</a>",
      t + "%",
      this._config.recommendedLength,
      this._config.slightlyTooMany + "%",
      this._config.urlCallToAction
    );
    return this._config.countCharacters ? r : n;
  }
  /**
   * Calculates the percentage of sentences that are too long.
   *
   * @param {SentenceLength[]} sentences The sentences to calculate the percentage for.
   * @returns {number} The calculates percentage of too long sentences.
   */
  calculatePercentage(a) {
    let t = 0;
    if (a.length !== 0) {
      const n = this.getTooLongSentences(a).length;
      t = (0, zja.default)(n / a.length * 100);
    }
    return t;
  }
  /**
   * Calculates the score for the given percentage.
   *
   * @param {number} percentage The percentage to calculate the score for.
   * @returns {number} The calculated score.
   */
  calculateScore(a) {
    let t;
    return a <= this._config.slightlyTooMany && (t = 9), (0, bja.inRangeEndInclusive)(a, this._config.slightlyTooMany, this._config.farTooMany) && (t = 6), a > this._config.farTooMany && (t = 3), t;
  }
  /**
   * Returns the sentences that are qualified as being too long.
   * @param {SentenceLength[]} sentences The sentences to filter.
   * @returns {SentenceLength[]} Array with all the sentences considered to be too long.
   */
  getTooLongSentences(a) {
    return a.filter((t) => t.sentenceLength > this._config.recommendedLength);
  }
}
Es.default = kja;
var As = {}, to = {};
Object.defineProperty(to, "__esModule", {
  value: !0
});
to.default = _ja;
function _ja(e) {
  return "<yoastmark class='yoast-text-mark'>" + e + "</yoastmark>";
}
Object.defineProperty(As, "__esModule", {
  value: !0
});
As.default = void 0;
var St = sa, Zv = K, Eja = Bd(to), Aja = Bd(mt), Tja = Bd(Ze), ZI = pt, JI = Ce, $ja = In, jja = Bd(gt), xja = Bd(qe), Sja = Ct, Oja = Bd(Jt), Ija = Zt;
function Bd(e) {
  return e && e.__esModule ? e : { default: e };
}
class Cja extends Tja.default {
  /**
   * Creates an instance of SubheadingsDistributionTooLong.
   * @constructor
   *
   * @param {Object} [config={}] The configuration to use. This configuration will be merged with the default configuration.
   */
  constructor(a = {}) {
    super();
    const t = {
      parameters: {
        // The maximum recommended value of the subheading text.
        recommendedMaximumLength: 300,
        slightlyTooMany: 300,
        farTooMany: 350
      },
      urlTitle: (0, JI.createAnchorOpeningTag)("https://yoa.st/34x"),
      urlCallToAction: (0, JI.createAnchorOpeningTag)("https://yoa.st/34y"),
      scores: {
        goodShortTextNoSubheadings: 9,
        goodSubheadings: 9,
        okSubheadings: 6,
        badSubheadings: 3,
        badLongTextNoSubheadings: 2
      },
      cornerstoneContent: !1,
      countCharacters: !1
    };
    this.identifier = "subheadingsTooLong", this._config = (0, Zv.merge)(t, a);
  }
  /**
   * Checks if the text before the first subheading is long or very long.
   *
   * @param {SubheadingText[]} foundSubheadings  An array containing found subheading objects.
   *
   * @returns {{isVeryLong: boolean, isLong: boolean}} An object containing an information whether the text before the first subheading is long or very long.
   */
  checkTextBeforeFirstSubheadingLength(a) {
    let t = {
      isLong: !1,
      isVeryLong: !1
    };
    if (a.length > 0 && a[0].subheading === "" && a[0].text !== "") {
      const n = a[0].countLength;
      t = {
        isLong: (0, ZI.inRangeEndInclusive)(n, this._config.parameters.slightlyTooMany, this._config.parameters.farTooMany),
        isVeryLong: n > this._config.parameters.farTooMany
      };
    }
    return t;
  }
  /**
   * Gets the text length from the paper. Remove unwanted element first before calculating.
   *
   * @param {Paper} paper The Paper object to analyse.
   * @param {Researcher} researcher The researcher to use.
   * @returns {number} The length of the text.
   */
  getTextLength(a, t) {
    const n = t.getHelper("customCountLength");
    let r = a.getText();
    return r = (0, Oja.default)(r), r = (0, Ija.filterShortcodesFromHTML)(r, a._attributes && a._attributes.shortcodes), n ? n(r) : (0, jja.default)(r).length;
  }
  /**
   * Runs the getSubheadingTextLength research and checks scores based on length.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The researcher used for calling research.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a, t) {
    this._subheadingTextsLength = t.getResearch("getSubheadingTextLengths"), t.getConfig("subheadingsTooLong") && (this._config = this.getLanguageSpecificConfig(t)), this._config.countCharacters = !!t.getConfig("countCharacters"), this._hasSubheadings = this.hasSubheadings(a), this._tooLongTextsNumber = this.getTooLongSubheadingTexts().length, this._textLength = this.getTextLength(a, t);
    const n = this.checkTextBeforeFirstSubheadingLength(this._subheadingTextsLength);
    this._subheadingTextsLength = this._subheadingTextsLength.sort((l, u) => u.countLength - l.countLength);
    const r = this.calculateResult(n), o = new xja.default();
    return o.setIdentifier(this.identifier), o.setScore(r.score), o.setText(r.resultText), o.setHasMarks(r.hasMarks), o;
  }
  /**
   * Checks if there is language-specific config, and if so, overwrite the current config with it.
   *
   * @param {Researcher} researcher The researcher to use.
   *
   * @returns {SubheadingDistributionConfig} The config that should be used.
   */
  getLanguageSpecificConfig(a) {
    const t = this._config, n = a.getConfig("subheadingsTooLong");
    return t.cornerstoneContent === !0 && Object.hasOwn(n, "cornerstoneParameters") ? (0, Zv.merge)(t, n.cornerstoneParameters) : (0, Zv.merge)(t, n.defaultParameters);
  }
  /**
   * Checks whether the paper has subheadings.
   *
   * @param {Paper} paper The paper to use for the assessment.
   *
   * @returns {boolean} True when there is at least one subheading.
   */
  hasSubheadings(a) {
    return (0, $ja.getSubheadings)(a.getText()).length > 0;
  }
  /**
   * Creates a marker for each subheading that precedes a text that is too long.
   *
   * @returns {Mark[]} All markers for the current text.
   */
  getMarks() {
    return this.getTooLongSubheadingTexts().map(({
      subheading: t
    }) => {
      t = (0, Sja.stripFullTags)(t);
      const n = (0, Eja.default)(t);
      return new Aja.default({
        original: t,
        marked: n,
        fieldsToMark: ["heading"]
      });
    }).filter((t) => t.getOriginal() !== "");
  }
  /**
   * Counts the number of subheading texts that are too long.
   *
   * @returns {SubheadingText[]} The array containing subheading texts that are too long.
   */
  getTooLongSubheadingTexts() {
    return this._subheadingTextsLength.filter((a) => a.countLength > this._config.parameters.recommendedMaximumLength);
  }
  /**
   * Returns the feedback texts for the assessment when there is a long text without subheadings.
   *
   * @returns {{beginning: (function(boolean): string), nonBeginning: (function(boolean): string)}} The feedback texts.
   */
  getFeedbackTexts() {
    return {
      beginning: (a) => {
        const t = (0, St.sprintf)(
          /* translators: %1$s and %3$s expand to links on yoast.com, %2$s expands to the anchor end tag, %4$s expands to the recommended maximum length of a text without subheading. */
          (0, St._n)("%1$sSubheading distribution%2$s: The beginning of your text is longer than %4$d word and is not separated by any subheadings. %3$sAdd subheadings to improve readability.%2$s", "%1$sSubheading distribution%2$s: The beginning of your text is longer than %4$d words and is not separated by any subheadings. %3$sAdd subheadings to improve readability.%2$s", this._config.parameters.recommendedMaximumLength, "wordpress-seo"),
          this._config.urlTitle,
          "</a>",
          this._config.urlCallToAction,
          this._config.parameters.recommendedMaximumLength
        ), n = (0, St.sprintf)(
          /* translators: %1$s and %3$s expand to links on yoast.com, %2$s expands to the anchor end tag, %4$s expands to the recommended maximum length of a text without subheading. */
          (0, St._n)("%1$sSubheading distribution%2$s: The beginning of your text is longer than %4$d character and is not separated by any subheadings. %3$sAdd subheadings to improve readability.%2$s", "%1$sSubheading distribution%2$s: The beginning of your text is longer than %4$d characters and is not separated by any subheadings. %3$sAdd subheadings to improve readability.%2$s", this._config.parameters.recommendedMaximumLength, "wordpress-seo"),
          this._config.urlTitle,
          "</a>",
          this._config.urlCallToAction,
          this._config.parameters.recommendedMaximumLength
        );
        return a ? n : t;
      },
      nonBeginning: (a) => {
        const t = (0, St.sprintf)(
          /* translators: %1$s and %5$s expand to links on yoast.com, %2$s expands to the anchor end tag, %3$d expands to the number of sections that are too long, %4$s expands to the recommended maximum length of a text without subheading. */
          (0, St._n)("%1$sSubheading distribution%2$s: %3$d section of your text is longer than the recommended number of words (%4$d) and is not separated by any subheadings. %5$sAdd subheadings to improve readability%2$s.", "%1$sSubheading distribution%2$s: %3$d sections of your text are longer than the recommended number of words (%4$d) and are not separated by any subheadings. %5$sAdd subheadings to improve readability%2$s.", this._tooLongTextsNumber, "wordpress-seo"),
          this._config.urlTitle,
          "</a>",
          this._tooLongTextsNumber,
          this._config.parameters.recommendedMaximumLength,
          this._config.urlCallToAction
        ), n = (0, St.sprintf)(
          /* translators: %1$s and %5$s expand to links on yoast.com, %2$s expands to the anchor end tag, %3$d expands to the number of sections that are too long, %4$s expands to the recommended maximum length of a text without subheading. */
          (0, St._n)("%1$sSubheading distribution%2$s: %3$d section of your text is longer than the recommended number of characters (%4$d) and is not separated by any subheadings. %5$sAdd subheadings to improve readability%2$s.", "%1$sSubheading distribution%2$s: %3$d sections of your text are longer than the recommended number of characters (%4$d) and are not separated by any subheadings. %5$sAdd subheadings to improve readability%2$s.", this._tooLongTextsNumber, "wordpress-seo"),
          this._config.urlTitle,
          "</a>",
          this._tooLongTextsNumber,
          this._config.parameters.recommendedMaximumLength,
          this._config.urlCallToAction
        );
        return a ? n : t;
      }
    };
  }
  /**
   * Calculates the score and creates a feedback string based on the subheading texts length for a long text without subheadings.
   *
   * @param {{isVeryLong: boolean, isLong: boolean}} textBeforeFirstSubheading  An object containing information whether the text before the first subheading is long or very long.
   * @returns {{resultText: string, score: number, hasMarks: boolean}} The calculated result.
   */
  calculateResultForLongTextWithoutSubheadings(a) {
    const t = this.getFeedbackTexts();
    if (this._hasSubheadings) {
      if (a.isLong && this._tooLongTextsNumber < 2)
        return {
          score: this._config.scores.okSubheadings,
          hasMarks: !1,
          resultText: t.beginning(this._config.countCharacters)
        };
      if (a.isVeryLong && this._tooLongTextsNumber < 2)
        return {
          score: this._config.scores.badSubheadings,
          hasMarks: !1,
          resultText: t.beginning(this._config.countCharacters)
        };
      const n = this._subheadingTextsLength[0].countLength;
      return n <= this._config.parameters.slightlyTooMany ? {
        score: this._config.scores.goodSubheadings,
        hasMarks: !1,
        resultText: (0, St.sprintf)(
          /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
          (0, St.__)("%1$sSubheading distribution%2$s: Great job!", "wordpress-seo"),
          this._config.urlTitle,
          "</a>"
        )
      } : (0, ZI.inRangeEndInclusive)(n, this._config.parameters.slightlyTooMany, this._config.parameters.farTooMany) ? {
        score: this._config.scores.okSubheadings,
        hasMarks: !0,
        resultText: t.nonBeginning(this._config.countCharacters)
      } : {
        score: this._config.scores.badSubheadings,
        hasMarks: !0,
        resultText: t.nonBeginning(this._config.countCharacters)
      };
    }
    return {
      score: this._config.scores.badLongTextNoSubheadings,
      hasMarks: !1,
      resultText: (0, St.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
        (0, St.__)("%1$sSubheading distribution%2$s: You are not using any subheadings, although your text is rather long. %3$sTry and add some subheadings%2$s.", "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._config.urlCallToAction
      )
    };
  }
  /**
   * Calculates the score and creates a feedback string based on the subheading texts length.
   *
   * @param {{isVeryLong: boolean, isLong: boolean}} textBeforeFirstSubheading   An object containing information whether the text before the first subheading is long or very long.
   *
   * @returns {{resultText: string, score: number, hasMarks: boolean}} The calculated result.
   */
  calculateResult(a) {
    return this._textLength > this._config.parameters.recommendedMaximumLength ? this.calculateResultForLongTextWithoutSubheadings(a) : this._hasSubheadings ? {
      score: this._config.scores.goodSubheadings,
      hasMarks: !1,
      resultText: (0, St.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
        (0, St.__)("%1$sSubheading distribution%2$s: Great job!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : {
      score: this._config.scores.goodShortTextNoSubheadings,
      hasMarks: !1,
      resultText: (0, St.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
        (0, St.__)("%1$sSubheading distribution%2$s: You are not using any subheadings, but your text is short enough and probably doesn't need them.", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    };
  }
}
As.default = Cja;
var al = {};
Object.defineProperty(al, "__esModule", {
  value: !0
});
al.default = void 0;
var Zr = sa, eC = K, Hl = tl(Fd), Pja = pt, aC = ws, Rja = Ct, Dja = tl(qe), Nja = tl(mt), Lja = tl(to), Mja = tl(Ze), qja = tl(Jt), Fja = tl(gt), Bja = Zt;
function tl(e) {
  return e && e.__esModule ? e : { default: e };
}
class Wja extends Mja.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object} config The configuration to use.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      urlTitle: (0, aC.createAnchorOpeningTag)("https://yoa.st/34z"),
      urlCallToAction: (0, aC.createAnchorOpeningTag)("https://yoa.st/35a"),
      transitionWordsNeededIfTextLongerThan: 200
    };
    this.identifier = "textTransitionWords", this._config = (0, eC.merge)(t, a);
  }
  /**
   * Calculates the actual percentage of transition words in the sentences.
   *
   * @param {object} sentences The object containing the total number of sentences and the number of sentences containing
   * a transition word.
   *
   * @returns {number} The percentage of sentences containing a transition word.
   */
  calculateTransitionWordPercentage(a) {
    return a.transitionWordSentences === 0 || a.totalSentences === 0 ? 0 : (0, Hl.default)(a.transitionWordSentences / a.totalSentences * 100);
  }
  /**
   * Calculates the score for the assessment based on the percentage of sentences containing transition words.
   *
   * @param {number} percentage The percentage of sentences containing transition words.
   *
   * @returns {number} The score.
   */
  calculateScoreFromPercentage(a) {
    return a < 20 ? 3 : (0, Pja.inRangeStartInclusive)(a, 20, 30) ? 6 : 9;
  }
  /**
   * Calculates transition word result.
   *
   * @param {object} transitionWordSentences  The object containing the total number of sentences and the number of sentences containing
   *                                          a transition word.
   * @param {number} textLength               The length of the text.
   *
   * @returns {object} Object containing score and text.
   */
  calculateTransitionWordResult(a, t) {
    const n = this.calculateTransitionWordPercentage(a), r = this.calculateScoreFromPercentage(n), o = n > 0;
    return t < this._config.transitionWordsNeededIfTextLongerThan ? n > 0 ? {
      score: (0, Hl.default)(9),
      hasMarks: o,
      text: (0, Zr.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */
        (0, Zr.__)("%1$sTransition words%2$s: Well done!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : {
      score: (0, Hl.default)(9),
      hasMarks: o,
      text: (0, Zr.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */
        (0, Zr.__)("%1$sTransition words%2$s: You are not using any transition words, but your text is short enough and probably doesn't need them.", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : r < 7 && n === 0 ? {
      score: (0, Hl.default)(r),
      hasMarks: o,
      text: (0, Zr.sprintf)(
        /* translators: %1$s and %3$s expand to a link to yoast.com, %2$s expands to the anchor end tag */
        (0, Zr.__)("%1$sTransition words%2$s: None of the sentences contain transition words. %3$sUse some%2$s.", "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._config.urlCallToAction
      )
    } : r < 7 ? {
      score: (0, Hl.default)(r),
      hasMarks: o,
      text: (0, Zr.sprintf)(
        /* translators: %1$s and %4$s expand to a link to yoast.com, %2$s expands to the anchor end tag,
        %3$s expands to the percentage of sentences containing transition words */
        (0, Zr.__)("%1$sTransition words%2$s: Only %3$s of the sentences contain transition words, which is not enough. %4$sUse more of them%2$s.", "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        n + "%",
        this._config.urlCallToAction
      )
    } : {
      score: (0, Hl.default)(r),
      hasMarks: o,
      text: (0, Zr.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */
        (0, Zr.__)("%1$sTransition words%2$s: Well done!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    };
  }
  /**
   * Scores the percentage of sentences including one or more transition words.
   *
   * @param {object} paper        The paper to use for the assessment.
   * @param {object} researcher   The researcher used for calling research.
   *
   * @returns {object} The Assessment result.
   */
  getResult(a, t) {
    const n = t.getHelper("customCountLength"), r = t.getConfig("assessmentApplicability").transitionWords;
    r && (this._config.transitionWordsNeededIfTextLongerThan = r);
    let o = a.getText();
    o = (0, qja.default)(o), o = (0, Bja.filterShortcodesFromHTML)(o, a._attributes && a._attributes.shortcodes);
    const l = n ? n(o) : (0, Fja.default)(o).length, u = t.getResearch("findTransitionWords"), c = this.calculateTransitionWordResult(u, l), f = new Dja.default();
    return f.setScore(c.score), f.setText(c.text), f.setHasMarks(c.hasMarks), f;
  }
  /**
   * Marks text for the transition words assessment.
   *
   * @param {Paper}       paper       The paper to use for the marking.
   * @param {Researcher}  researcher  The researcher containing the necessary research.
   *
   * @returns {Array<Mark>} A list of marks that should be applied.
   */
  getMarks(a, t) {
    const n = t.getResearch("findTransitionWords");
    return (0, eC.map)(n.sentenceResults, function(r) {
      let o = r.sentence;
      return o = (0, Rja.stripIncompleteTags)(o), new Nja.default({
        original: o,
        marked: (0, Lja.default)(o)
      });
    });
  }
  /**
   * Checks if the transition words assessment is applicable to the paper.
   *
   * @param {Paper}       paper       The paper to check.
   * @param {Researcher}  researcher  The researcher object.
   *
   * @returns {boolean} Returns true if the assessment is available in the researcher of the language.
   */
  isApplicable(a, t) {
    return t.hasResearch("findTransitionWords");
  }
}
al.default = Wja;
var nl = {};
Object.defineProperty(nl, "__esModule", {
  value: !0
});
nl.default = void 0;
var Kg = sa, tC = K, Uja = Hc(Fd), Hja = pt, Gja = Hc(to), nC = Ce, Vja = Ct, Kja = Hc(qe), Yja = Hc(mt), Qja = Hc(Ze);
function Hc(e) {
  return e && e.__esModule ? e : { default: e };
}
class Xja extends Qja.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object} config The configuration to use.
   */
  constructor(a = {}) {
    super();
    const t = {
      urlTitle: (0, nC.createAnchorOpeningTag)("https://yoa.st/34t"),
      urlCallToAction: (0, nC.createAnchorOpeningTag)("https://yoa.st/34u")
    };
    this.identifier = "passiveVoice", this._config = (0, tC.merge)(t, a);
  }
  /**
   * Calculates the result based on the number of sentences and passives.
   *
   * @param {{total: number, passives:{length: number, total: number}}} passiveVoice Object containing the number of sentences and passives.
   *
   * @returns {{score: number, text: string, hasMarks: boolean}} Result object with score and text, and whether there are marks.
   */
  calculatePassiveVoiceResult(a) {
    let t = 0, n = 0;
    const r = 10;
    a.total !== 0 && (n = (0, Uja.default)(a.passives.length / a.total * 100));
    const o = n > 0;
    return n <= 10 && (t = 9), (0, Hja.inRangeEndInclusive)(n, 10, 15) && (t = 6), n > 15 && (t = 3), t >= 7 ? {
      score: t,
      hasMarks: o,
      text: (0, Kg.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */
        (0, Kg.__)("%1$sPassive voice%2$s: You are not using too much passive voice. That's great!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : {
      score: t,
      hasMarks: o,
      text: (0, Kg.sprintf)(
        /* translators: %1$s and %5$s expand to a link on yoast.com, %2$s expands to the anchor end tag,
        %3$s expands to the percentage of sentences in passive voice, %4$s expands to the recommended value. */
        (0, Kg.__)("%1$sPassive voice%2$s: %3$s of the sentences contain passive voice, which is more than the recommended maximum of %4$s. %5$sTry to use their active counterparts%2$s.", "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        n + "%",
        r + "%",
        this._config.urlCallToAction
      )
    };
  }
  /**
   * Marks all sentences that have the passive voice.
   *
   * @param {Paper} paper The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {Mark[]} All marked sentences.
   */
  getMarks(a, t) {
    const n = t.getResearch("getPassiveVoiceResult");
    return (0, tC.map)(n.passives, function(r) {
      r = (0, Vja.stripIncompleteTags)(r);
      const o = (0, Gja.default)(r);
      return new Yja.default({
        original: r,
        marked: o
      });
    });
  }
  /**
   * Runs the passiveVoice module, based on this returns an assessment result with score and text.
   *
   * @param {Paper} paper The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {AssessmentResult} The result of the assessment.
   */
  getResult(a, t) {
    const n = t.getResearch("getPassiveVoiceResult"), r = this.calculatePassiveVoiceResult(n), o = new Kja.default();
    return o.setScore(r.score), o.setText(r.text), o.setHasMarks(r.hasMarks), o;
  }
  /**
   * Checks if passive voice analysis is available for the language of the paper.
   *
   * @param {Paper}       paper       The paper to check.
   * @param {Researcher}  researcher  The researcher object.
   *
   * @returns {boolean} Returns true if the researcher has the passive voice research.
   */
  isApplicable(a, t) {
    return t.hasResearch("getPassiveVoiceResult");
  }
}
nl.default = Xja;
var Wd = {};
Object.defineProperty(Wd, "__esModule", {
  value: !0
});
Wd.default = void 0;
var Jv = K, Yg = sa, rC = Ce, Zja = P1(qe), Jja = P1(mt), exa = P1(Ze);
function P1(e) {
  return e && e.__esModule ? e : { default: e };
}
const sC = 2;
class axa extends exa.default {
  /**
   * Sets the identifier and the config.
   * @param {{urlTitle?: string, urlCallToAction?: string}} config The configuration to use.
   */
  constructor(a = {}) {
    super();
    const t = {
      urlTitle: (0, rC.createAnchorOpeningTag)("https://yoa.st/35f"),
      urlCallToAction: (0, rC.createAnchorOpeningTag)("https://yoa.st/35g")
    };
    this.identifier = "sentenceBeginnings", this._config = (0, Jv.merge)(t, a);
  }
  /**
   * Counts and groups the number too often used sentence beginnings and determines the lowest count within that group.
   *
   * @param {SentenceBeginning[]} sentenceBeginnings The array containing the objects containing the beginning words and counts.
   *
   * @returns {{total: number, lowestCount: number}} The object containing the total number of too often used beginnings and the lowest count within those.
   */
  groupSentenceBeginnings(a) {
    const t = (0, Jv.partition)(a, (r) => r.count > sC);
    if (t[0].length === 0)
      return {
        total: 0,
        lowestCount: 0
      };
    const n = (0, Jv.sortBy)(t[0], (r) => r.count);
    return {
      total: t[0].length,
      lowestCount: n[0].count
    };
  }
  /**
   * Calculates the score based on sentence beginnings.
   *
   * @param {{total: number, lowestCount: number}} groupedSentenceBeginnings    The object with grouped sentence beginnings.
   *
   * @returns {AssessmentResult} AssessmentResult object with score and feedback.
   */
  calculateSentenceBeginningsResult(a) {
    const t = new Zja.default();
    return a.total > 0 ? (t.setScore(3), t.setHasMarks(!0), t.setText((0, Yg.sprintf)(
      /* translators: %1$s and %5$s expand to a link on yoast.com, %2$s expands to the anchor end tag,
      %3$d expands to the number of consecutive sentences starting with the same word,
      %4$d expands to the number of instances where 3 or more consecutive sentences start with the same word. */
      (0, Yg._n)("%1$sConsecutive sentences%2$s: The text contains %3$d consecutive sentences starting with the same word. %5$sTry to mix things up%2$s!", "%1$sConsecutive sentences%2$s: The text contains %4$d instances where %3$d or more consecutive sentences start with the same word. %5$sTry to mix things up%2$s!", a.total, "wordpress-seo"),
      this._config.urlTitle,
      "</a>",
      a.lowestCount,
      a.total,
      this._config.urlCallToAction
    ))) : (t.setScore(9), t.setHasMarks(!1), t.setText((0, Yg.sprintf)(
      /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
      (0, Yg.__)("%1$sConsecutive sentences%2$s: There are no repetitive sentence beginnings. That's great!", "wordpress-seo"),
      this._config.urlTitle,
      "</a>"
    ))), t;
  }
  /**
   * Marks all consecutive sentences with the same beginnings.
   *
   * @param {Paper} paper             The paper to use for the assessment.
   * @param {Researcher} researcher   The researcher used for calling research.
   *
   * @returns {Mark[]} All marked sentences.
   */
  getMarks(a, t) {
    return t.getResearch("getSentenceBeginnings").filter((o) => o.count > sC).flatMap((o) => o.sentences).map((o) => {
      var c, f;
      const l = ((c = o.getFirstToken()) == null ? void 0 : c.sourceCodeRange.startOffset) || 0, u = ((f = o.getLastToken()) == null ? void 0 : f.sourceCodeRange.endOffset) || 0;
      return new Jja.default({
        position: {
          startOffset: l,
          endOffset: u,
          startOffsetBlock: l - (o.parentStartOffset || 0),
          endOffsetBlock: u - (o.parentStartOffset || 0),
          clientId: o.parentClientId || "",
          attributeId: o.parentAttributeId || "",
          isFirstSection: o.isParentFirstSectionOfBlock || !1
        }
      });
    });
  }
  /**
   * Scores the repetition of sentence beginnings in consecutive sentences.
   *
   * @param {Paper} paper           The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {AssessmentResult} The result of the assessment.
   */
  getResult(a, t) {
    const n = t.getResearch("getSentenceBeginnings"), r = this.groupSentenceBeginnings(n);
    return this.calculateSentenceBeginningsResult(r);
  }
  /**
   * Checks whether the sentence beginnings assessment is applicable.
   *
   * @param {Paper}       paper       The paper to check.
   * @param {Researcher}  researcher  The researcher object.
   *
   * @returns {boolean} Returns true if the researcher has the sentence beginnings research.
   */
  isApplicable(a, t) {
    return t.hasResearch("getSentenceBeginnings");
  }
}
Wd.default = axa;
var rl = {};
Object.defineProperty(rl, "__esModule", {
  value: !0
});
rl.default = void 0;
var iC = sa, oC = ws, lC = WL(qe), txa = WL(Ze), nxa = K;
function WL(e) {
  return e && e.__esModule ? e : { default: e };
}
class rxa extends txa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object} config The configuration to use.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      urlTitle: (0, oC.createAnchorOpeningTag)("https://yoa.st/35h"),
      urlCallToAction: (0, oC.createAnchorOpeningTag)("https://yoa.st/35i")
    };
    this.identifier = "textPresence", this._config = (0, nxa.merge)(t, a);
  }
  /**
   * Assesses that the paper has at least a little bit of content.
   *
   * @param {Paper} paper The paper to assess.
   *
   * @returns {AssessmentResult} The result of this assessment.
   */
  getResult(a) {
    if (!this.hasEnoughContentForAssessment(a)) {
      const t = new lC.default();
      return t.setText((0, iC.sprintf)(
        /* translators: %1$s and %3$s expand to links to articles on Yoast.com,
        %2$s expands to the anchor end tag*/
        (0, iC.__)("%1$sNot enough content%2$s: %3$sPlease add some content to enable a good analysis%2$s.", "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._config.urlCallToAction
      )), t.setScore(3), t;
    }
    return new lC.default();
  }
}
rl.default = rxa;
var Ud = {};
Object.defineProperty(Ud, "__esModule", {
  value: !0
});
Ud.default = void 0;
const sxa = function(e) {
  return e === -1 ? "error" : e === 0 ? "feedback" : e <= 4 ? "bad" : e > 4 && e <= 7 ? "ok" : e > 7 ? "good" : "";
};
Ud.default = sxa;
var UL = {}, ld = {}, R1 = {};
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "scoreToRating", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  });
  var a = t(Ud);
  function t(n) {
    return n && n.__esModule ? n : { default: n };
  }
})(R1);
var Hd = {};
Object.defineProperty(Hd, "__esModule", {
  value: !0
});
Hd.default = void 0;
class ixa {
  /**
   * Sets the locale of the content. We are more lenient on languages
   * that are fully supported in the readability analysis.
   *
   * @param {string} locale The locale of the content.
   *
   * @returns {void}
   */
  setLocale(a) {
    this.locale = a;
  }
  /**
   * Aggregates the given assessment results into a single score.
   *
   * @param {AssessmentResult[]} results The assessment results.
   *
   * @returns {number} The aggregated score.
   *
   * @abstract
   */
  aggregate(a) {
    console.warn("'aggregate' must be implemented by a child class of 'ScoreAggregator'");
  }
}
Hd.default = ixa;
Object.defineProperty(ld, "__esModule", {
  value: !0
});
ld.default = ld.READABILITY_SCORES = void 0;
var oxa = HL(Qi), lxa = R1, dxa = HL(Hd);
function HL(e) {
  return e && e.__esModule ? e : { default: e };
}
const uxa = {
  bad: 3,
  ok: 2,
  good: 0
}, cxa = {
  bad: 4,
  ok: 2,
  good: 0
}, Gl = ld.READABILITY_SCORES = {
  GOOD: 90,
  OKAY: 60,
  NEEDS_IMPROVEMENT: 30,
  NOT_AVAILABLE: 0
}, pxa = ["en", "nl", "de", "it", "ru", "fr", "es"];
class gxa extends dxa.default {
  /**
   * Determines whether a language is fully supported.
   *
   * @param {string} locale The locale for which the content is written, e.g. `sv-SE` for Sweden.
   *
   * @returns {boolean} `true` if fully supported.
   */
  isFullySupported(a) {
    if (a && a.includes("_")) {
      const t = (0, oxa.default)(a);
      return pxa.includes(t);
    }
    return !1;
  }
  /**
   * Calculates the overall score (GOOD, OKAY or NEEDS IMPROVEMENT)
   * based on the penalty.
   *
   * @param {boolean} isFullySupported Whether this language is fully supported.
   * @param {number}  penalty          The total penalty.
   *
   * @returns {number} The overall score.
   */
  calculateScore(a, t) {
    if (a) {
      if (t > 6)
        return Gl.NEEDS_IMPROVEMENT;
      if (t > 4)
        return Gl.OKAY;
    } else {
      if (t > 4)
        return Gl.NEEDS_IMPROVEMENT;
      if (t > 2)
        return Gl.OKAY;
    }
    return Gl.GOOD;
  }
  /**
   * Calculates the total penalty based on the given assessment results.
   *
   * @param {AssessmentResult[]} results The valid results from which to calculate the total penalty.
   *
   * @returns {number} The total penalty for the results.
   */
  calculatePenalty(a) {
    return a.reduce((t, n) => {
      const r = (0, lxa.scoreToRating)(n.getScore()), o = this.isFullySupported(this.locale) ? uxa[r] : cxa[r];
      return o ? t + o : t;
    }, 0);
  }
  /**
   * Returns the list of valid results.
   * Valid results are all results that have a score and a text.
   *
   * @param {AssessmentResult[]} results The results to filter the valid results from.
   *
   * @returns {AssessmentResult[]} The list of valid results.
   */
  getValidResults(a) {
    return a.filter((t) => t.hasScore() && t.hasText());
  }
  /**
   * Aggregates the given assessment results into a single analysis score.
   *
   * @param {AssessmentResult[]} results The assessment results.
   *
   * @returns {number} The aggregated score.
   */
  aggregate(a) {
    const t = this.getValidResults(a);
    if (t.length <= 1)
      return Gl.NOT_AVAILABLE;
    const n = this.calculatePenalty(t), r = this.isFullySupported(this.locale);
    return this.calculateScore(r, n);
  }
}
ld.default = gxa;
var sl = {}, il = {};
Object.defineProperty(il, "__esModule", {
  value: !0
});
il.default = void 0;
var mxa = fxa(Hd);
function fxa(e) {
  return e && e.__esModule ? e : { default: e };
}
const hxa = 100, yxa = 9;
class zxa extends mxa.default {
  /**
   * Aggregates the given assessment results into a single score.
   *
   * @param {AssessmentResult[]} results The assessment results.
   *
   * @returns {number} The aggregated score.
   */
  aggregate(a) {
    const t = a.reduce((n, r) => n + r.getScore(), 0);
    return Math.round(t * hxa / (a.length * yxa)) || 0;
  }
}
il.default = zxa;
Object.defineProperty(sl, "__esModule", {
  value: !0
});
sl.default = void 0;
var bxa = wxa(il);
function wxa(e) {
  return e && e.__esModule ? e : { default: e };
}
class vxa extends bxa.default {
  /**
   * Returns the list of valid results.
   * Valid results are all results that have a score.
   *
   * @param {AssessmentResult[]} results The results to filter the valid results from.
   *
   * @returns {AssessmentResult[]} The list of valid results.
   */
  getValidResults(a) {
    return a.filter((t) => t.hasScore());
  }
  /**
   * Aggregates the given assessment results into a single score.
   *
   * @param {AssessmentResult[]} results The assessment results.
   *
   * @returns {number} The aggregated score.
   */
  aggregate(a) {
    const t = this.getValidResults(a);
    return super.aggregate(t);
  }
}
sl.default = vxa;
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "ReadabilityScoreAggregator", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  }), Object.defineProperty(e, "SEOScoreAggregator", {
    enumerable: !0,
    get: function() {
      return r.default;
    }
  }), Object.defineProperty(e, "ScoreAggregator", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  }), Object.defineProperty(e, "ValidOnlyResultsScoreAggregator", {
    enumerable: !0,
    get: function() {
      return t.default;
    }
  });
  var a = o(ld), t = o(sl), n = o(Hd), r = o(il);
  function o(l) {
    return l && l.__esModule ? l : { default: l };
  }
})(UL);
Object.defineProperty(_s, "__esModule", {
  value: !0
});
_s.default = void 0;
var dC = K, kxa = si(zn), _xa = si(el), Exa = si(Es), Axa = si(As), Txa = si(al), $xa = si(nl), jxa = si(Wd), xxa = si(rl), Sxa = si(Ud), Oxa = UL;
function si(e) {
  return e && e.__esModule ? e : { default: e };
}
class Ixa extends kxa.default {
  /**
   * Creates a new ContentAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "contentAssessor", this._assessments = [new Axa.default(), new _xa.default(), new Exa.default(), new Txa.default(), new $xa.default(), new xxa.default(), new jxa.default()], this._scoreAggregator = new Oxa.ReadabilityScoreAggregator();
  }
  /**
   * Calculates the weighted rating for languages that have all assessments based on a given rating.
   *
   * @param {string} rating The rating to be weighted.
   * @returns {number} The weighted rating.
   */
  calculatePenaltyPointsFullSupport(a) {
    switch (a) {
      case "bad":
        return 3;
      case "ok":
        return 2;
      default:
      case "good":
        return 0;
    }
  }
  /**
   * Calculates the weighted rating for languages that don't have all assessments based on a given rating.
   *
   * @param {string} rating The rating to be weighted.
   * @returns {number} The weighted rating.
   */
  calculatePenaltyPointsPartialSupport(a) {
    switch (a) {
      case "bad":
        return 4;
      case "ok":
        return 2;
      default:
      case "good":
        return 0;
    }
  }
  /**
   * Determines whether a language is fully supported. If a language supports 7 content assessments,
   * it is fully supported
   *
   * @returns {boolean} True if fully supported.
   */
  _allAssessmentsSupported() {
    const a = this._assessments.length;
    return this.getApplicableAssessments().length === a;
  }
  /**
   * Calculates the penalty points based on the assessment results.
   *
   * @returns {number} The total penalty points for the results.
   */
  calculatePenaltyPoints() {
    const a = this.getValidResults(), t = (0, dC.map)(a, (function(n) {
      const r = (0, Sxa.default)(n.getScore());
      return this._allAssessmentsSupported() ? this.calculatePenaltyPointsFullSupport(r) : this.calculatePenaltyPointsPartialSupport(r);
    }).bind(this));
    return (0, dC.sum)(t);
  }
  /**
   * Rates the penalty points
   *
   * @param {number} totalPenaltyPoints The amount of penalty points.
   * @returns {number} The score based on the amount of penalty points.
   *
   * @private
   */
  _ratePenaltyPoints(a) {
    if (this.getValidResults().length === 1)
      return 30;
    if (this._allAssessmentsSupported()) {
      if (a > 6)
        return 30;
      if (a > 4)
        return 60;
    } else {
      if (a > 4)
        return 30;
      if (a > 2)
        return 60;
    }
    return 90;
  }
  /**
   * Calculates the overall score based on the assessment results.
   *
   * @returns {number} The overall score.
   */
  calculateOverallScore() {
    if (this.getValidResults().length === 0)
      return 30;
    const t = this.calculatePenaltyPoints();
    return this._ratePenaltyPoints(t);
  }
}
_s.default = Ixa;
var Gd = {};
Object.defineProperty(Gd, "__esModule", {
  value: !0
});
Gd.default = void 0;
var Cxa = D1(_s), Pxa = D1(Es), Rxa = D1(As);
function D1(e) {
  return e && e.__esModule ? e : { default: e };
}
class Dxa extends Cxa.default {
  /**
   * Creates a new CornerStoneContentAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "cornerstoneContentAssessor", this.addAssessment("subheadingsTooLong", new Rxa.default({
      parameters: {
        slightlyTooMany: 250,
        farTooMany: 300,
        recommendedMaximumLength: 250
      },
      cornerstoneContent: !0
    })), this.addAssessment("textSentenceLength", new Pxa.default({
      slightlyTooMany: 20,
      farTooMany: 25
    }, !0));
  }
}
Gd.default = Dxa;
var Gc = {}, Ts = {}, bn = {};
Object.defineProperty(bn, "__esModule", {
  value: !0
});
bn.default = void 0;
var xi = sa, Nxa = K, Lxa = GL(Ze), uC = Ce, Mxa = GL(qe);
function GL(e) {
  return e && e.__esModule ? e : { default: e };
}
class qxa extends Lxa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   * @param {Object} [config.scores] The scores to use.
   * @param {number} [config.scores.good] The score to return if there is a match within one sentence in the first paragraph.
   * @param {number} [config.scores.okay] The score to return if all words are matched in the first paragraph.
   * @param {number} [config.scores.bad] The score to return if not all words are matched in the first paragraph.
   * @param {string} [config.urlTitle] The URL to the relevant article on Yoast.com to add to the title of the assessment in the feedback.
   * @param {string} [config.urlCallToAction] The URL to the relevant article on Yoast.com to add to the call to action in the assessment feedback.
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        good: 9,
        okay: 6,
        bad: 3
      },
      urlTitle: (0, uC.createAnchorOpeningTag)("https://yoa.st/33e"),
      urlCallToAction: (0, uC.createAnchorOpeningTag)("https://yoa.st/33f")
    };
    this.identifier = "introductionKeyword", this._config = (0, Nxa.merge)(t, a);
  }
  /**
   * Assesses the presence of keyphrase or synonyms in the first paragraph.
   *
   * @param {Paper} paper The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {AssessmentResult} The result of this assessment.
   */
  getResult(a, t) {
    const n = new Mxa.default();
    this._canAssess = !1, a.hasKeyword() && a.hasText() && (this._firstParagraphMatches = t.getResearch("findKeywordInFirstParagraph"), this._canAssess = !0);
    const r = this.calculateResult();
    return n.setScore(r.score), n.setText(r.resultText), r.score < 9 && this._canAssess && n.setHasAIFixes(!0), n;
  }
  /**
   * Returns a result based on the number of occurrences of keyphrase in the first paragraph.
   *
   * @returns {{score: number, resultText: string}} result object with a score and translation text.
   */
  calculateResult() {
    return this._canAssess ? this._firstParagraphMatches.foundInOneSentence ? {
      score: this._config.scores.good,
      resultText: (0, xi.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */
        (0, xi.__)("%1$sKeyphrase in introduction%2$s: Well done!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : this._firstParagraphMatches.foundInParagraph ? {
      score: this._config.scores.okay,
      resultText: (0, xi.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag. */
        (0, xi.__)("%1$sKeyphrase in introduction%3$s: Your keyphrase or its synonyms appear in the first paragraph of the copy, but not within one sentence. %2$sFix that%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : {
      score: this._config.scores.bad,
      resultText: (0, xi.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag. */
        (0, xi.__)("%1$sKeyphrase in introduction%3$s: Your keyphrase or its synonyms do not appear in the first paragraph. %2$sMake sure the topic is clear immediately%3$s.", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : {
      score: this._config.scores.bad,
      resultText: (0, xi.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag. */
        (0, xi.__)("%1$sKeyphrase in introduction%3$s: %2$sPlease add both a keyphrase and an introduction containing the keyphrase%3$s.", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    };
  }
}
bn.default = qxa;
var en = {};
Object.defineProperty(en, "__esModule", {
  value: !0
});
en.default = void 0;
var Ue = sa, Oo = K, Fxa = N1(Ze), cC = Ce, Bxa = N1(qe), pC = pt, Wxa = N1(ni);
function N1(e) {
  return e && e.__esModule ? e : { default: e };
}
const xn = Object.freeze({
  WORDS: "words",
  CONTENT_WORDS: "content words",
  CHARACTERS: "characters"
});
class Uxa extends Fxa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {boolean} isProductPage Whether product page scoring is used or not.
   * @param {Object} [config] The configuration to use.
   * @param {Object} [config.parameters] The parameters to use for the assessment.
   * @param {number} [config.parameters.recommendedMinimum] The recommended minimum length of the keyphrase (in words).
   * @param {number} [config.parameters.acceptableMaximum] The acceptable maximum length of the keyphrase (in words).
   * @param {Object} [config.scores] The scores to use for the assessment.
   * @param {number} [config.scores.veryBad] The score to return if the length of the keyphrase is below recommended minimum.
   * @param {number} [config.scores.consideration] The score to return if the length of the keyphrase is above acceptable maximum.
   */
  constructor(a, t = !1) {
    super(), this.defaultConfig = {
      parameters: {
        recommendedMinimum: 1,
        recommendedMaximum: 4,
        acceptableMaximum: 8
      },
      parametersNoFunctionWordSupport: {
        recommendedMaximum: 6,
        acceptableMaximum: 9
      },
      scores: {
        veryBad: -999,
        bad: 3,
        okay: 6,
        good: 9
      },
      countTextIn: xn.WORDS,
      urlTitle: (0, cC.createAnchorOpeningTag)("https://yoa.st/33i"),
      urlCallToAction: (0, cC.createAnchorOpeningTag)("https://yoa.st/33j"),
      isRelatedKeyphrase: !1
    }, this.identifier = "keyphraseLength", this._config = (0, Oo.merge)(this.defaultConfig, a), this._isProductPage = t;
  }
  /**
   * Assesses the keyphrase presence and length.
   *
   * @param {Paper} paper The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {AssessmentResult} The result of this assessment.
   */
  getResult(a, t) {
    this._keyphraseLengthData = t.getResearch("keyphraseLength");
    const n = new Bxa.default();
    t.getConfig("countCharacters") && (this._config.countTextIn = xn.CHARACTERS);
    const o = a.getKeyword();
    this._keyphraseLengthData.functionWords.length > 0 && !(0, Wxa.default)(o).exactMatchRequested && (this._config.countTextIn = xn.CONTENT_WORDS), t.getConfig("keyphraseLength") ? this._config = this.getCustomConfig(t) : this._keyphraseLengthData.functionWords.length === 0 && (this._config.parameters = (0, Oo.merge)({}, this._config.parameters, this._config.parametersNoFunctionWordSupport)), this._boundaries = this._config.parameters;
    const u = this.calculateResult();
    return n.setScore(u.score), n.setText(u.resultText), n.getScore() < 9 && (n.setHasJumps(!0), n.setEditFieldName((0, Ue.__)("keyphrase", "wordpress-seo"))), n;
  }
  /**
   * Merges language-specific configurations for product/regular pages.
   *
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {Object} Configuration to use.
   */
  getCustomConfig(a) {
    const t = a.getConfig("keyphraseLength");
    return this._isProductPage && Object.hasOwn(t, "productPages") ? (0, Oo.merge)(this._config, t.productPages) : (0, Oo.merge)(this._config, t.defaultAnalysis);
  }
  /**
   * Returns the feedback texts for the conditions when the keyphrase is too long or too short.
   *
   * @returns {{lessThanMinimum: (function(string, string): string), firstSentence: (function(string): string), moreThanMinimum: (function(string, string): string), wayMoreThanMinimum: (function(string, string): string), wayLessThanMinimum: (function(string, string): string)}}
   */
  getFeedbackTexts() {
    return {
      firstSentence: (a) => {
        const t = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of words, %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag. */
          (0, Ue._n)("%2$sKeyphrase length%3$s: The keyphrase contains %1$d word.", "%2$sKeyphrase length%3$s: The keyphrase contains %1$d words.", this._keyphraseLengthData.keyphraseLength, "wordpress-seo"),
          this._keyphraseLengthData.keyphraseLength,
          this._config.urlTitle,
          "</a>"
        ), n = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of content words, %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag. */
          (0, Ue._n)("%2$sKeyphrase length%3$s: The keyphrase contains %1$d content word.", "%2$sKeyphrase length%3$s: The keyphrase contains %1$d content words.", this._keyphraseLengthData.keyphraseLength, "wordpress-seo"),
          this._keyphraseLengthData.keyphraseLength,
          this._config.urlTitle,
          "</a>"
        ), r = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of characters, %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag. */
          (0, Ue._n)("%2$sKeyphrase length%3$s: The keyphrase contains %1$d character.", "%2$sKeyphrase length%3$s: The keyphrase contains %1$d characters.", this._keyphraseLengthData.keyphraseLength, "wordpress-seo"),
          this._keyphraseLengthData.keyphraseLength,
          this._config.urlTitle,
          "</a>"
        );
        return a === xn.WORDS ? t : a === xn.CONTENT_WORDS ? n : r;
      },
      moreThanMinimum: (a, t) => {
        const n = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of words, %2$s expands to the sentence "The keyphrase contains X word(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's more than the recommended maximum of %1$d word. %3$sMake it shorter%4$s!", "%2$s That's more than the recommended maximum of %1$d words. %3$sMake it shorter%4$s!", this._boundaries.recommendedMaximum, "wordpress-seo"),
          this._boundaries.recommendedMaximum,
          t,
          this._config.urlCallToAction,
          "</a>"
        ), r = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of content words, %2$s expands to the sentence "The keyphrase contains X content word(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's more than the recommended maximum of %1$d content word. %3$sMake it shorter%4$s!", "%2$s That's more than the recommended maximum of %1$d content words. %3$sMake it shorter%4$s!", this._boundaries.recommendedMaximum, "wordpress-seo"),
          this._boundaries.recommendedMaximum,
          t,
          this._config.urlCallToAction,
          "</a>"
        ), o = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of characters, %2$s expands to the sentence "The keyphrase contains X character(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's more than the recommended maximum of %1$d character. %3$sMake it shorter%4$s!", "%2$s That's more than the recommended maximum of %1$d characters. %3$sMake it shorter%4$s!", this._boundaries.recommendedMaximum, "wordpress-seo"),
          this._boundaries.recommendedMaximum,
          t,
          this._config.urlCallToAction,
          "</a>"
        );
        return a === xn.WORDS ? n : a === xn.CONTENT_WORDS ? r : o;
      },
      wayMoreThanMinimum: (a, t) => {
        const n = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of words, %2$s expands to the sentence "The keyphrase contains X word(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's way more than the recommended maximum of %1$d word. %3$sMake it shorter%4$s!", "%2$s That's way more than the recommended maximum of %1$d words. %3$sMake it shorter%4$s!", this._boundaries.recommendedMaximum, "wordpress-seo"),
          this._boundaries.recommendedMaximum,
          t,
          this._config.urlCallToAction,
          "</a>"
        ), r = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of content words, %2$s expands to the sentence "The keyphrase contains X content word(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's way more than the recommended maximum of %1$d content word. %3$sMake it shorter%4$s!", "%2$s That's way more than the recommended maximum of %1$d content words. %3$sMake it shorter%4$s!", this._boundaries.recommendedMaximum, "wordpress-seo"),
          this._boundaries.recommendedMaximum,
          t,
          this._config.urlCallToAction,
          "</a>"
        ), o = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of characters, %2$s expands to the sentence "The keyphrase contains X character(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's way more than the recommended maximum of %1$d character. %3$sMake it shorter%4$s!", "%2$s That's way more than the recommended maximum of %1$d characters. %3$sMake it shorter%4$s!", this._boundaries.recommendedMaximum, "wordpress-seo"),
          this._boundaries.recommendedMaximum,
          t,
          this._config.urlCallToAction,
          "</a>"
        );
        return a === xn.WORDS ? n : a === xn.CONTENT_WORDS ? r : o;
      },
      lessThanMinimum: (a, t) => {
        const n = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of words, %2$s expands to the sentence "The keyphrase contains X word(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's less than the recommended minimum of %1$d word. %3$sMake it longer%4$s!", "%2$s That's less than the recommended minimum of %1$d words. %3$sMake it longer%4$s!", this._boundaries.recommendedMinimum, "wordpress-seo"),
          this._boundaries.recommendedMinimum,
          t,
          this._config.urlCallToAction,
          "</a>"
        ), r = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of content words, %2$s expands to the sentence "The keyphrase contains X content word(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's less than the recommended minimum of %1$d content word. %3$sMake it longer%4$s!", "%2$s That's less than the recommended minimum of %1$d content words. %3$sMake it longer%4$s!", this._boundaries.recommendedMinimum, "wordpress-seo"),
          this._boundaries.recommendedMinimum,
          t,
          this._config.urlCallToAction,
          "</a>"
        ), o = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of characters, %2$s expands to the sentence "The keyphrase contains X character(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's less than the recommended minimum of %1$d character. %3$sMake it longer%4$s!", "%2$s That's less than the recommended minimum of %1$d characters. %3$sMake it longer%4$s!", this._boundaries.recommendedMinimum, "wordpress-seo"),
          this._boundaries.recommendedMinimum,
          t,
          this._config.urlCallToAction,
          "</a>"
        );
        return a === xn.WORDS ? n : a === xn.CONTENT_WORDS ? r : o;
      },
      wayLessThanMinimum: (a, t) => {
        const n = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of words, %2$s expands to the sentence "The keyphrase contains X word(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's way less than the recommended minimum of %1$d word. %3$sMake it longer%4$s!", "%2$s That's way less than the recommended minimum of %1$d words. %3$sMake it longer%4$s!", this._boundaries.recommendedMinimum, "wordpress-seo"),
          this._boundaries.recommendedMinimum,
          t,
          this._config.urlCallToAction,
          "</a>"
        ), r = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of content words, %2$s expands to the sentence "The keyphrase contains X content word(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's way less than the recommended minimum of %1$d content word. %3$sMake it longer%4$s!", "%2$s That's way less than the recommended minimum of %1$d content words. %3$sMake it longer%4$s!", this._boundaries.recommendedMinimum, "wordpress-seo"),
          this._boundaries.recommendedMinimum,
          t,
          this._config.urlCallToAction,
          "</a>"
        ), o = (0, Ue.sprintf)(
          /* translators: %1$d expands to the number of characters, %2$s expands to the sentence "The keyphrase contains X character(s).", %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag. */
          (0, Ue._n)("%2$s That's way less than the recommended minimum of %1$d character. %3$sMake it longer%4$s!", "%2$s That's way less than the recommended minimum of %1$d characters. %3$sMake it longer%4$s!", this._boundaries.recommendedMinimum, "wordpress-seo"),
          this._boundaries.recommendedMinimum,
          t,
          this._config.urlCallToAction,
          "</a>"
        );
        return a === xn.WORDS ? n : a === xn.CONTENT_WORDS ? r : o;
      }
    };
  }
  /**
   * Calculates the result for product pages based on the keyphraseLength research.
   * @returns {{score: number, resultText: string}} The score and feedback for a product page.
   */
  calculateResultForProduct() {
    if (this._keyphraseLengthData.keyphraseLength === 0)
      return this.getNoKeyphraseFeedback();
    if ((0, pC.inRangeStartEndInclusive)(this._keyphraseLengthData.keyphraseLength, this._boundaries.recommendedMinimum, this._boundaries.recommendedMaximum))
      return {
        score: this._config.scores.good,
        resultText: (0, Ue.sprintf)(
          /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */
          (0, Ue.__)("%1$sKeyphrase length%2$s: Good job!", "wordpress-seo"),
          this._config.urlTitle,
          "</a>"
        )
      };
    const a = this.getFeedbackTexts(), t = a.firstSentence(this._config.countTextIn);
    if (this._keyphraseLengthData.keyphraseLength <= this._boundaries.acceptableMinimum)
      return {
        score: this._config.scores.bad,
        resultText: a.wayLessThanMinimum(this._config.countTextIn, t)
      };
    if (this._keyphraseLengthData.keyphraseLength > this._boundaries.acceptableMaximum)
      return {
        score: this._config.scores.bad,
        resultText: a.wayMoreThanMinimum(this._config.countTextIn, t)
      };
    if ((0, Oo.inRange)(this._keyphraseLengthData.keyphraseLength, this._boundaries.acceptableMinimum, this._boundaries.recommendedMinimum))
      return {
        score: this._config.scores.okay,
        resultText: a.lessThanMinimum(this._config.countTextIn, t)
      };
    if ((0, pC.inRangeEndInclusive)(this._keyphraseLengthData.keyphraseLength, this._boundaries.recommendedMaximum, this._boundaries.acceptableMaximum))
      return {
        score: this._config.scores.okay,
        resultText: a.moreThanMinimum(this._config.countTextIn, t)
      };
  }
  /**
   * Returns the feedback when no keyphrase was set.
   * @returns {{score: number, resultText: string}} The score and feedback for when no keyphrase is set.
   */
  getNoKeyphraseFeedback() {
    return this._config.isRelatedKeyphrase ? {
      score: this._config.scores.veryBad,
      resultText: (0, Ue.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, Ue.__)("%1$sKeyphrase length%3$s: %2$sSet a keyphrase in order to calculate your SEO score%3$s.", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : {
      score: this._config.scores.veryBad,
      resultText: (0, Ue.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, Ue.__)("%1$sKeyphrase length%3$s: No focus keyphrase was set for this page. %2$sSet a keyphrase in order to calculate your SEO score%3$s.", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    };
  }
  /**
   * Calculates the result based on the keyphraseLength research.
   * @returns {{score: number, resultText: string}} The score and feedback for a regular post.
   */
  calculateResult() {
    if (this._isProductPage)
      return this.calculateResultForProduct();
    if (this._keyphraseLengthData.keyphraseLength < this._boundaries.recommendedMinimum)
      return this.getNoKeyphraseFeedback();
    if ((0, Oo.inRange)(this._keyphraseLengthData.keyphraseLength, this._boundaries.recommendedMinimum, this._boundaries.recommendedMaximum + 1))
      return {
        score: this._config.scores.good,
        resultText: (0, Ue.sprintf)(
          /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */
          (0, Ue.__)("%1$sKeyphrase length%2$s: Good job!", "wordpress-seo"),
          this._config.urlTitle,
          "</a>"
        )
      };
    const a = this.getFeedbackTexts(), t = a.firstSentence(this._config.countTextIn);
    return (0, Oo.inRange)(this._keyphraseLengthData.keyphraseLength, this._boundaries.recommendedMaximum + 1, this._boundaries.acceptableMaximum + 1) ? {
      score: this._config.scores.okay,
      resultText: a.moreThanMinimum(this._config.countTextIn, t)
    } : {
      score: this._config.scores.bad,
      resultText: a.wayMoreThanMinimum(this._config.countTextIn, t)
    };
  }
}
en.default = Uxa;
var ut = {}, L1 = {}, sh = {};
Object.defineProperty(sh, "__esModule", {
  value: !0
});
sh.default = Hxa;
function Hxa(e) {
  return 0.7 + e / 3;
}
Object.defineProperty(L1, "__esModule", {
  value: !0
});
L1.default = Kxa;
var Gxa = VL(ti), Vxa = VL(sh);
function VL(e) {
  return e && e.__esModule ? e : { default: e };
}
function Kxa(e, a, t, n, r) {
  const o = r ? r(e.getText()).length : (0, Gxa.default)(e).length;
  if (o === 0)
    return 0;
  const l = (0, Vxa.default)(a), u = t * o / (100 * l);
  if (u < 2)
    return 2;
  switch (n) {
    case "min":
      return Math.ceil(u);
    default:
    case "max":
      return Math.floor(u);
  }
}
Object.defineProperty(ut, "__esModule", {
  value: !0
});
ut.default = ut.KeywordDensityAssessment = ut.KeyphraseDensityAssessment = void 0;
var Jr = sa, Yxa = K, gC = Vc(L1), Qxa = Vc(Ze), Xxa = Vc(qe), ek = pt, mC = Ce, Zxa = Vc(sh), Jxa = Vc(ti);
function Vc(e) {
  return e && e.__esModule ? e : { default: e };
}
class M1 extends Qxa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   *
   * If word forms are not available:
   * @param {number} [config.parameters.noWordForms.overMaximum] The percentage of keyphrase instances in the text that
   * is way over the maximum.
   * @param {number} [config.parameters.noWordForms.maximum] The maximum percentage of keyphrase instances in the text.
   * @param {number} [config.parameters.noWordForms.minimum] The minimum percentage of keyphrase instances in the text.
   *
   * If word forms are available:
   * @param {number} [config.parameters.multipleWordForms.overMaximum] The percentage of keyphrase instances in the text that
   * is way over the maximum.
   * @param {number} [config.parameters.multipleWordForms.maximum] The maximum percentage of keyphrase instances in the text.
   * @param {number} [config.parameters.multipleWordForms.minimum] The minimum percentage of keyphrase instances in the text.
   *
   * @param {number} [config.scores.wayOverMaximum] The score to return if there are way too many instances of keyphrase in the text.
   * @param {number} [config.scores.overMaximum] The score to return if there are too many instances of keyphrase in the text.
   * @param {number} [config.scores.correctDensity] The score to return if there is a good number of keyphrase instances in the text.
   * @param {number} [config.scores.underMinimum] The score to return if there is not enough keyphrase instances in the text.
   *
   * @param {string} [config.url] The URL to the relevant KB article.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      parameters: {
        noWordForms: {
          overMaximum: 4,
          maximum: 3,
          minimum: 0.5
        },
        multipleWordForms: {
          overMaximum: 4,
          maximum: 3.5,
          minimum: 0.5
        }
      },
      scores: {
        wayOverMaximum: -50,
        overMaximum: -10,
        correctDensity: 9,
        underMinimum: 4
      },
      urlTitle: (0, mC.createAnchorOpeningTag)("https://yoa.st/33v"),
      urlCallToAction: (0, mC.createAnchorOpeningTag)("https://yoa.st/33w"),
      applicableIfTextLongerThan: 100
    };
    this.identifier = "keyphraseDensity", this._config = (0, Yxa.merge)(t, a);
  }
  /**
   * Determines correct boundaries depending on the availability of morphological forms.
   *
   * @param {Paper} paper The paper to analyze.
   * @param {number} keyphraseLength The length of the keyphrase in words.
   * @param {function} customGetWords A helper to get words from the text for languages that don't use the default approach.
   *
   * @returns {void}
   */
  setBoundaries(a, t, n) {
    this._hasMorphologicalForms ? this._boundaries = this._config.parameters.multipleWordForms : this._boundaries = this._config.parameters.noWordForms, this._minRecommendedKeyphraseCount = (0, gC.default)(a, t, this._boundaries.minimum, "min", n), this._maxRecommendedKeyphraseCount = (0, gC.default)(a, t, this._boundaries.maximum, "max", n);
  }
  /**
   * Runs the keyphrase density module, based on this returns an assessment
   * result with score.
   *
   * @param {Paper} paper The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling the research.
   *
   * @returns {AssessmentResult} The result of the assessment.
   */
  getResult(a, t) {
    const n = t.getHelper("getWordsCustomHelper");
    this._keyphraseCount = t.getResearch("getKeyphraseCount");
    const r = this._keyphraseCount.keyphraseLength, o = new Xxa.default();
    this._keyphraseDensity = t.getResearch("getKeyphraseDensity"), this._hasMorphologicalForms = t.getData("morphology") !== !1, this.setBoundaries(a, r, n), this._keyphraseDensity = this._keyphraseDensity * (0, Zxa.default)(r);
    const l = this.calculateResult();
    return o.setScore(l.score), o.setText(l.resultText), o.setHasMarks(this._keyphraseCount.count > 0), l.score === this._config.scores.underMinimum && o.setHasAIFixes(!0), o;
  }
  /**
   * Checks whether there are no keyphrase matches in the text.
   *
   * @returns {boolean} Returns true if the keyphrase count is 0.
   */
  hasNoMatches() {
    return this._keyphraseCount.count === 0;
  }
  /**
   * Checks whether there are too few keyphrase matches in the text.
   *
   * @returns {boolean} Returns true if the rounded keyphrase density is between 0 and the recommended minimum
   * or if there is only 1 keyphrase match (regardless of the density).
   */
  hasTooFewMatches() {
    return (0, ek.inRangeStartInclusive)(this._keyphraseDensity, 0, this._boundaries.minimum) || this._keyphraseCount.count === 1;
  }
  /**
   * Checks whether there is a good number of keyphrase matches in the text.
   *
   * @returns {boolean} Returns true if the rounded keyphrase density is between the recommended minimum
   * and the recommended maximum or if the keyphrase count is 2 and the recommended minimum is lower than 2.
   */
  hasGoodNumberOfMatches() {
    return (0, ek.inRangeStartEndInclusive)(this._keyphraseDensity, this._boundaries.minimum, this._boundaries.maximum) || this._keyphraseCount.count === 2 && this._minRecommendedKeyphraseCount <= 2;
  }
  /**
   * Checks whether the number of keyphrase matches in the text is between the
   * recommended maximum and the specified overMaximum value.
   *
   * @returns {boolean} Returns true if the rounded keyphrase density is between
   *                    the recommended maximum and the specified overMaximum
   *                    value.
   */
  hasTooManyMatches() {
    return (0, ek.inRangeEndInclusive)(this._keyphraseDensity, this._boundaries.maximum, this._boundaries.overMaximum);
  }
  /**
   * Returns the score for the keyphrase density.
   *
   * @returns {Object} The object with calculated score and resultText.
   */
  calculateResult() {
    return this.hasNoMatches() ? {
      score: this._config.scores.underMinimum,
      resultText: (0, Jr.sprintf)(
        /* translators:
        %1$s and %4$s expand to links to Yoast.com,
        %2$s expands to the anchor end tag,
        %3$d expands to the recommended minimal number of times the keyphrase should occur in the text. */
        (0, Jr.__)("%1$sKeyphrase density%2$s: The keyphrase was found 0 times. That's less than the recommended minimum of %3$d times for a text of this length. %4$sFocus on your keyphrase%2$s!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._minRecommendedKeyphraseCount,
        this._config.urlCallToAction
      )
    } : this.hasTooFewMatches() ? {
      score: this._config.scores.underMinimum,
      resultText: (0, Jr.sprintf)(
        /* translators:
        %1$s and %4$s expand to links to Yoast.com,
        %2$s expands to the anchor end tag,
        %3$d expands to the recommended minimal number of times the keyphrase should occur in the text,
        %5$d expands to the number of times the keyphrase occurred in the text. */
        (0, Jr._n)("%1$sKeyphrase density%2$s: The keyphrase was found %5$d time. That's less than the recommended minimum of %3$d times for a text of this length. %4$sFocus on your keyphrase%2$s!", "%1$sKeyphrase density%2$s: The keyphrase was found %5$d times. That's less than the recommended minimum of %3$d times for a text of this length. %4$sFocus on your keyphrase%2$s!", this._keyphraseCount.count, "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._minRecommendedKeyphraseCount,
        this._config.urlCallToAction,
        this._keyphraseCount.count
      )
    } : this.hasGoodNumberOfMatches() ? {
      score: this._config.scores.correctDensity,
      resultText: (0, Jr.sprintf)(
        /* translators:
        %1$s expands to a link to Yoast.com,
        %2$s expands to the anchor end tag,
        %3$d expands to the number of times the keyphrase occurred in the text. */
        (0, Jr._n)("%1$sKeyphrase density%2$s: The keyphrase was found %3$d time. This is great!", "%1$sKeyphrase density%2$s: The keyphrase was found %3$d times. This is great!", this._keyphraseCount.count, "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._keyphraseCount.count
      )
    } : this.hasTooManyMatches() ? {
      score: this._config.scores.overMaximum,
      resultText: (0, Jr.sprintf)(
        /* translators:
        %1$s and %4$s expand to links to Yoast.com,
        %2$s expands to the anchor end tag,
        %3$d expands to the recommended maximal number of times the keyphrase should occur in the text,
        %5$d expands to the number of times the keyphrase occurred in the text. */
        (0, Jr._n)("%1$sKeyphrase density%2$s: The keyphrase was found %5$d time. That's more than the recommended maximum of %3$d times for a text of this length. %4$sDon't overoptimize%2$s!", "%1$sKeyphrase density%2$s: The keyphrase was found %5$d times. That's more than the recommended maximum of %3$d times for a text of this length. %4$sDon't overoptimize%2$s!", this._keyphraseCount.count, "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._maxRecommendedKeyphraseCount,
        this._config.urlCallToAction,
        this._keyphraseCount.count
      )
    } : {
      score: this._config.scores.wayOverMaximum,
      resultText: (0, Jr.sprintf)(
        /* translators:
        %1$s and %4$s expand to links to Yoast.com,
        %2$s expands to the anchor end tag,
        %3$d expands to the recommended maximal number of times the keyphrase should occur in the text,
        %5$d expands to the number of times the keyphrase occurred in the text. */
        (0, Jr._n)("%1$sKeyphrase density%2$s: The keyphrase was found %5$d time. That's way more than the recommended maximum of %3$d times for a text of this length. %4$sDon't overoptimize%2$s!", "%1$sKeyphrase density%2$s: The keyphrase was found %5$d times. That's way more than the recommended maximum of %3$d times for a text of this length. %4$sDon't overoptimize%2$s!", this._keyphraseCount.count, "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._maxRecommendedKeyphraseCount,
        this._config.urlCallToAction,
        this._keyphraseCount.count
      )
    };
  }
  /**
   * Marks the occurrences of keyphrase in the text for the keyphrase density assessment.
   *
   * @returns {Array<Mark>} Marks that should be applied.
   */
  getMarks() {
    return this._keyphraseCount.markings;
  }
  /**
   * Checks whether the paper has a text of the minimum required length and a keyphrase is set. Language-specific length requirements and methods
   * of counting text length may apply (e.g. for Japanese, the text should be counted in characters instead of words, which also makes the minimum
   * required length higher).
   *
   * @param {Paper} 		paper 		The paper to use for the assessment.
   * @param {Researcher}  researcher  The paper to use for the assessment.
   *
   * @returns {boolean} True if applicable.
   */
  isApplicable(a, t) {
    const n = t.getHelper("customCountLength"), r = t.getConfig("assessmentApplicability").keyphraseDensity;
    r && (this._config.applicableIfTextLongerThan = r);
    const o = n ? n(a.getText()) : (0, Jxa.default)(a).length;
    return a.hasText() && a.hasKeyword() && o >= this._config.applicableIfTextLongerThan;
  }
}
ut.KeyphraseDensityAssessment = M1;
class eSa extends M1 {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} config   The configuration to use.
   * @returns {void}
   */
  constructor(a = {}) {
    super(a), this.identifier = "keywordDensity", console.warn("This object is deprecated, use KeyphraseDensityAssessment instead.");
  }
}
ut.KeywordDensityAssessment = eSa;
ut.default = M1;
var an = {};
Object.defineProperty(an, "__esModule", {
  value: !0
});
an.default = void 0;
var Bs = sa, aSa = K, tSa = KL(Ze), fC = Ce, nSa = KL(qe);
function KL(e) {
  return e && e.__esModule ? e : { default: e };
}
class rSa extends tSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   * @param {number} [config.scores.good] The score to return if there are enough keyword occurrences in the meta description.
   * @param {number} [config.scores.bad] The score to return if there are no or too many keyword occurrences in the meta description.
   * @param {string} [config.urlTitle] The URL to the relevant article on Yoast.com to add to the title of the assessment in the feedback.
   * @param {string} [config.urlCallToAction] The URL to the relevant article on Yoast.com to add to the call to action in the assessment feedback.
   *
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        good: 9,
        bad: 3
      },
      urlTitle: (0, fC.createAnchorOpeningTag)("https://yoa.st/33k"),
      urlCallToAction: (0, fC.createAnchorOpeningTag)("https://yoa.st/33l")
    };
    this.identifier = "metaDescriptionKeyword", this._config = (0, aSa.merge)(t, a);
  }
  /**
   * Runs the metaDescriptionKeyword researcher and based on this, returns an assessment result with score.
   *
   * @param {Paper}      paper      The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a, t) {
    this._canAssess = !1, a.hasKeyword() && a.hasDescription() && (this._keyphraseCounts = t.getResearch("metaDescriptionKeyword"), this._canAssess = !0);
    const n = new nSa.default(), r = this.calculateResult();
    return n.setScore(r.score), n.setText(r.resultText), n.getScore() < 9 && this._canAssess && (n.setHasJumps(!0), n.setEditFieldName((0, Bs.__)("meta description", "wordpress-seo"))), n;
  }
  /**
   * Returns the result object based on the number of keyword matches in the meta description.
   *
   * @returns {{score: number, resultText: string}} Result object with score and text.
   */
  calculateResult() {
    return this._canAssess ? this._keyphraseCounts === 1 || this._keyphraseCounts === 2 ? {
      score: this._config.scores.good,
      resultText: (0, Bs.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag. */
        (0, Bs.__)("%1$sKeyphrase in meta description%2$s: Keyphrase or synonym appear in the meta description. Well done!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : this._keyphraseCounts >= 3 ? {
      score: this._config.scores.bad,
      resultText: (0, Bs.sprintf)(
        /**
         * translators:
         * %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag,
         * %3$s expands to the number of sentences containing the keyphrase,
         * %4$s expands to a link on yoast.com, %5$s expands to the anchor end tag.
         */
        (0, Bs.__)("%1$sKeyphrase in meta description%2$s: The meta description contains the keyphrase %3$s times, which is over the advised maximum of 2 times. %4$sLimit that%5$s!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._keyphraseCounts,
        this._config.urlCallToAction,
        "</a>"
      )
    } : {
      score: this._config.scores.bad,
      resultText: (0, Bs.sprintf)(
        /**
         * translators:
         * %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag.
         * %3$s expands to a link on yoast.com, %4$s expands to the anchor end tag.
         */
        (0, Bs.__)("%1$sKeyphrase in meta description%2$s: The meta description has been specified, but it does not contain the keyphrase. %3$sFix that%4$s!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._config.urlCallToAction,
        "</a>"
      )
    } : {
      score: this._config.scores.bad,
      resultText: (0, Bs.sprintf)(
        /* translators: %1$s and %2$s expand to a link on yoast.com, %3$s expands to the anchor end tag. */
        (0, Bs.__)("%1$sKeyphrase in meta description%3$s: %2$sPlease add both a keyphrase and a meta description containing the keyphrase%3$s.", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    };
  }
}
an.default = rSa;
var $s = {};
Object.defineProperty($s, "__esModule", {
  value: !0
});
$s.default = void 0;
var hC = sa, yC = K, sSa = YL(Ze), zC = Ce, iSa = YL(qe);
function YL(e) {
  return e && e.__esModule ? e : { default: e };
}
class oSa extends sSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   * @param {number} [config.parameters.recommendedMaximum] The recommended maximum number of links using the same keyword as this paper.
   * @param {string} [config.scores.bad] The score to return if there are more links with the same keyword than the recommended maximum.
   * @param {string} [config.url] The URL to the relevant article on Yoast.com.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      parameters: {
        recommendedMaximum: 0
      },
      scores: {
        bad: 2
      },
      urlTitle: (0, zC.createAnchorOpeningTag)("https://yoa.st/34l"),
      urlCallToAction: (0, zC.createAnchorOpeningTag)("https://yoa.st/34m")
    };
    this.identifier = "textCompetingLinks", this._config = (0, yC.merge)(t, a);
  }
  /**
   * Runs the linkCount module, based on this returns an assessment result with score.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The researcher used for calling research.
   *
   * @returns {Object} The AssessmentResult.
   */
  getResult(a, t) {
    const n = new iSa.default();
    this.totalAnchorsWithKeyphrase = t.getResearch("getAnchorsWithKeyphrase").anchorsWithKeyphraseCount;
    const r = this.calculateResult();
    return (0, yC.isUndefined)(r) || (n.setScore(r.score), n.setText(r.resultText), n.setHasMarks(!1)), n;
  }
  /**
   * Determines if the assessment is applicable to the paper.
   *
   * @param {Paper}       paper       The paper to check
   *
   * @returns {boolean} Whether the paper has text and a keyword
   */
  isApplicable(a) {
    return a.hasText() && a.hasKeyword();
  }
  /**
   * Returns a result based on the number of links.
   *
   * @returns {Object} ResultObject with score and text.
   */
  calculateResult() {
    if (this.totalAnchorsWithKeyphrase > this._config.parameters.recommendedMaximum)
      return {
        score: this._config.scores.bad,
        resultText: (0, hC.sprintf)(
          /* translators:  %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
          (0, hC.__)("%1$sLink keyphrase%3$s: You're linking to another page with the words you want this page to rank for. %2$sDon't do that%3$s!", "wordpress-seo"),
          this._config.urlTitle,
          this._config.urlCallToAction,
          "</a>"
        )
      };
  }
}
$s.default = oSa;
var tn = {};
Object.defineProperty(tn, "__esModule", {
  value: !0
});
tn.default = void 0;
var ak = sa, bC = K, lSa = QL(Ze), wC = ws, dSa = QL(qe);
function QL(e) {
  return e && e.__esModule ? e : { default: e };
}
class uSa extends lSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   * @param {number} [config.scores.onlyFunctionWords] The score to return if the keyphrase contains only function words.
   * @param {string} [config.urlTitle] The URL to the relevant KB article.
   * @param {string} [config.urlCallToAction] The URL to the call-to-action article.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        onlyFunctionWords: 0
      },
      urlTitle: (0, wC.createAnchorOpeningTag)("https://yoa.st/functionwordskeyphrase-1"),
      urlCallToAction: (0, wC.createAnchorOpeningTag)("https://yoa.st/functionwordskeyphrase-2")
    };
    this.identifier = "functionWordsInKeyphrase", this._config = (0, bC.merge)(t, a);
  }
  /**
   * Runs the functionWordsInKeyphrase researcher, based on this returns an assessment result with score.
   *
   * @param {Paper} 		paper 		The paper to use for the assessment.
   * @param {Researcher} 	researcher 	The researcher used for calling research.
   *
   * @returns {AssessmentResult} The result of the assessment.
   */
  getResult(a, t) {
    this._functionWordsInKeyphrase = t.getResearch("functionWordsInKeyphrase"), this._keyword = (0, bC.escape)(a.getKeyword());
    const n = new dSa.default();
    return this._functionWordsInKeyphrase && (n.setScore(this._config.scores.onlyFunctionWords), n.setText((0, ak.sprintf)(
      /**
       * translators:
       * %1$s and %2$s expand to links on yoast.com,
       * %3$s expands to the anchor end tag,
       * %4$s expands to the focus keyphrase of the article.
       */
      (0, ak.__)('%1$sFunction words in keyphrase%3$s: Your keyphrase "%4$s" contains function words only. %2$sLearn more about what makes a good keyphrase.%3$s', "wordpress-seo"),
      this._config.urlTitle,
      this._config.urlCallToAction,
      "</a>",
      this._keyword
    )), n.setHasJumps(!0), n.setEditFieldName((0, ak.__)("keyphrase", "wordpress-seo"))), n;
  }
  /**
   * Checks if assessment is applicable to the paper.
   *
   * @param {Paper} 		paper 			The paper to be analyzed.
   * @param {Researcher}  researcher  	The researcher object.
   *
   * @returns {boolean} Whether the paper has a keyword and the researcher has the relevant research.
   */
  isApplicable(a, t) {
    return a.hasKeyword() && t.hasResearch("functionWordsInKeyphrase");
  }
}
tn.default = uSa;
var At = {};
Object.defineProperty(At, "__esModule", {
  value: !0
});
At.default = void 0;
var Vn = sa, cSa = K, pSa = XL(Ze), vC = pt, kC = ws, gSa = XL(qe);
function XL(e) {
  return e && e.__esModule ? e : { default: e };
}
class mSa extends pSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object} config The configuration to use.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      parameters: {
        lowerBoundary: 0.3,
        upperBoundary: 0.75
      },
      scores: {
        withAltGoodNumberOfKeywordMatches: 9,
        withAltTooFewKeywordMatches: 6,
        withAltTooManyKeywordMatches: 6,
        withAltNonKeyword: 6,
        withAlt: 6,
        noAlt: 6
      },
      urlTitle: (0, kC.createAnchorOpeningTag)("https://yoa.st/4f7"),
      urlCallToAction: (0, kC.createAnchorOpeningTag)("https://yoa.st/4f6")
    };
    this.identifier = "imageKeyphrase", this._config = (0, cSa.merge)(t, a);
  }
  /**
   * Execute the Assessment and return a result.
   *
   * @param {Paper}       paper       The Paper object to assess.
   * @param {Researcher}  researcher  The Researcher object containing all available researches.
   *
   * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
   */
  getResult(a, t) {
    this.imageCount = t.getResearch("imageCount"), this.altProperties = t.getResearch("altTagCount"), this._minNumberOfKeywordMatches = Math.ceil(this.imageCount * this._config.parameters.lowerBoundary), this._maxNumberOfKeywordMatches = Math.floor(this.imageCount * this._config.parameters.upperBoundary);
    const n = this.calculateResult(), r = new gSa.default();
    return r.setScore(n.score), r.setText(n.resultText), r;
  }
  /**
   * Checks whether the paper has text with at least 1 image.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The Researcher object containing all available researches.
   *
   * @returns {boolean} True when there is text.
   */
  isApplicable(a, t) {
    return this.imageCount = t.getResearch("imageCount"), a.hasText() && this.imageCount > 0;
  }
  /**
   * Checks whether there are too few alt tags with keywords. This check is applicable when there are
   * 5 or more images.
   *
   * @returns {boolean} Returns true if there are at least 5 images and the number of alt tags
   * with keywords is under the specified recommended minimum.
   */
  hasTooFewMatches() {
    return this.imageCount > 4 && this.altProperties.withAltKeyword > 0 && this.altProperties.withAltKeyword < this._minNumberOfKeywordMatches;
  }
  /**
   * Checks whether there is a sufficient number of alt tags with keywords. There are different recommended
   * ranges for less than 5 keywords, exactly 5 keywords, and more than 5 keywords.
   *
   * @returns {boolean} Returns true if the number of alt tags with keywords is within the recommended range.
   */
  hasGoodNumberOfMatches() {
    return this.imageCount < 5 && this.altProperties.withAltKeyword > 0 || this.imageCount === 5 && (0, vC.inRangeStartEndInclusive)(this.altProperties.withAltKeyword, 2, 4) || this.imageCount > 4 && (0, vC.inRangeStartEndInclusive)(this.altProperties.withAltKeyword, this._minNumberOfKeywordMatches, this._maxNumberOfKeywordMatches);
  }
  /**
   * Checks whether there is a sufficient number of alt tags with keywords. This check is applicable when there are
   * 5 or more images.
   *
   * @returns {boolean} Returns true if there are at least 5 images and the number of alt tags with keywords
   * is above the recommended range.
   */
  hasTooManyMatches() {
    return this.imageCount > 4 && this.altProperties.withAltKeyword > this._maxNumberOfKeywordMatches;
  }
  /**
   * Calculate the result based on the current image count and current image alt-tag count.
   *
   * @returns {Object} The calculated result.
   */
  calculateResult() {
    return this.altProperties.withAlt > 0 ? {
      score: this._config.scores.withAlt,
      resultText: (0, Vn.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, Vn.__)("%1$sImage Keyphrase%3$s: Images on this page have alt attributes, but you have not set your keyphrase. %2$sFix that%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : this.altProperties.withAltNonKeyword > 0 && this.altProperties.withAltKeyword === 0 ? {
      score: this._config.scores.withAltNonKeyword,
      resultText: (0, Vn.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, Vn.__)("%1$sImage Keyphrase%3$s: Images on this page do not have alt attributes with at least half of the words from your keyphrase. %2$sFix that%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : this.hasTooFewMatches() ? {
      score: this._config.scores.withAltTooFewKeywordMatches,
      resultText: (0, Vn.sprintf)(
        /* translators: %1$d expands to the number of images containing an alt attribute with the keyword,
         * %2$d expands to the total number of images, %3$s and %4$s expand to links on yoast.com,
         * %5$s expands to the anchor end tag. */
        (0, Vn._n)("%3$sImage Keyphrase%5$s: Out of %2$d images on this page, only %1$d has an alt attribute that reflects the topic of your text. %4$sAdd your keyphrase or synonyms to the alt tags of more relevant images%5$s!", "%3$sImage Keyphrase%5$s: Out of %2$d images on this page, only %1$d have alt attributes that reflect the topic of your text. %4$sAdd your keyphrase or synonyms to the alt tags of more relevant images%5$s!", this.altProperties.withAltKeyword, "wordpress-seo"),
        this.altProperties.withAltKeyword,
        this.imageCount,
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : this.hasGoodNumberOfMatches() ? {
      score: this._config.scores.withAltGoodNumberOfKeywordMatches,
      resultText: (0, Vn.sprintf)(
        /* translators: %1$s expands to a link on yoast.com,
         * %2$s expands to the anchor end tag. */
        (0, Vn.__)("%1$sImage Keyphrase%2$s: Good job!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : this.hasTooManyMatches() ? {
      score: this._config.scores.withAltTooManyKeywordMatches,
      resultText: (0, Vn.sprintf)(
        /* translators: %1$d expands to the number of images containing an alt attribute with the keyword,
                        * %2$d expands to the total number of images, %3$s and %4$s expand to a link on yoast.com,
         * %5$s expands to the anchor end tag. */
        (0, Vn.__)("%3$sImage Keyphrase%5$s: Out of %2$d images on this page, %1$d have alt attributes with words from your keyphrase or synonyms. That's a bit much. %4$sOnly include the keyphrase or its synonyms when it really fits the image%5$s.", "wordpress-seo"),
        this.altProperties.withAltKeyword,
        this.imageCount,
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : {
      score: this._config.scores.noAlt,
      resultText: (0, Vn.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, Vn.__)("%1$sImage Keyphrase%3$s: Images on this page do not have alt attributes that reflect the topic of your text. %2$sAdd your keyphrase or synonyms to the alt tags of relevant images%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    };
  }
}
At.default = mSa;
Object.defineProperty(Ts, "__esModule", {
  value: !0
});
Ts.default = void 0;
var fSa = ii(zn), hSa = ii(bn), ySa = ii(en), zSa = ii(ut), bSa = ii(an), wSa = ii($s), vSa = ii(tn), kSa = ii(At), _Sa = ii(sl);
function ii(e) {
  return e && e.__esModule ? e : { default: e };
}
class ESa extends fSa.default {
  /**
   * Creates a new RelatedKeywordAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "relatedKeywordAssessor", this._assessments = [new hSa.default(), new ySa.default({
      isRelatedKeyphrase: !0
    }), new zSa.default(), new bSa.default(), new wSa.default(), new vSa.default(), new kSa.default()], this._scoreAggregator = new _Sa.default();
  }
}
Ts.default = ESa;
Object.defineProperty(Gc, "__esModule", {
  value: !0
});
Gc.default = void 0;
var ASa = ZL(Ts), TSa = ZL(At);
function ZL(e) {
  return e && e.__esModule ? e : { default: e };
}
class $Sa extends ASa.default {
  /**
   * Creates a new CornerstoneRelatedKeywordAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "cornerstoneRelatedKeywordAssessor", this.addAssessment("imageKeyphrase", new TSa.default({
      scores: {
        withAltNonKeyword: 3,
        withAlt: 3,
        noAlt: 3
      }
    }));
  }
}
Gc.default = $Sa;
var Vd = {}, rr = {}, Kd = {};
Object.defineProperty(Kd, "__esModule", {
  value: !0
});
Kd.default = void 0;
var Si = sa, jSa = K, xSa = JL(Ze), _C = Ce, SSa = JL(qe);
function JL(e) {
  return e && e.__esModule ? e : { default: e };
}
class OSa extends xSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   * @param {Object} [config.parameters] The parameters to use.
   * @param {number} [config.parameters.recommendedMinimum] The recommended minimum number of internal links in the text.
   * @param {Object} [config.scores] The scores to use.
   * @param {number} [config.scores.allInternalFollow] The score to return if all internal links are do-follow.
   * @param {number} [config.scores.someInternalFollow] The score to return if some but not all internal links are do-follow.
   * @param {number} [config.scores.noneInternalFollow] The score to return if all internal links are no-follow.
   * @param {number} [config.scores.noInternal] The score to return if there are no internal links.
   * @param {string} [config.url] The URL to the relevant KB article.
   */
  constructor(a = {}) {
    super();
    const t = {
      parameters: {
        recommendedMinimum: 1
      },
      scores: {
        allInternalFollow: 9,
        someInternalFollow: 8,
        noneInternalFollow: 7,
        noInternal: 3
      },
      urlTitle: (0, _C.createAnchorOpeningTag)("https://yoa.st/33z"),
      urlCallToAction: (0, _C.createAnchorOpeningTag)("https://yoa.st/34a")
    };
    this.identifier = "internalLinks", this._config = (0, jSa.merge)(t, a);
  }
  /**
   * Runs the getLinkStatistics module, based on this returns an assessment result with score.
   *
   * @param {Paper} paper The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {AssessmentResult} The result of the assessment.
   */
  getResult(a, t) {
    this.linkStatistics = t.getResearch("getLinkStatistics");
    const n = new SSa.default(), r = this.calculateResult();
    return n.setScore(r.score), n.setText(r.resultText), n;
  }
  /**
   * Returns a score and text based on the linkStatistics object.
   *
   * @returns {{score: number, resultText: string}} ResultObject with score and text
   */
  calculateResult() {
    return this.linkStatistics.internalTotal === 0 ? {
      score: this._config.scores.noInternal,
      resultText: (0, Si.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, Si.__)("%1$sInternal links%3$s: No internal links appear in this page, %2$smake sure to add some%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : this.linkStatistics.internalNofollow === this.linkStatistics.internalTotal ? {
      score: this._config.scores.noneInternalFollow,
      resultText: (0, Si.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, Si.__)("%1$sInternal links%3$s: The internal links in this page are all nofollowed. %2$sAdd some good internal links%3$s.", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : this.linkStatistics.internalDofollow === this.linkStatistics.internalTotal ? {
      score: this._config.scores.allInternalFollow,
      resultText: (0, Si.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
        (0, Si.__)("%1$sInternal links%2$s: You have enough internal links. Good job!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : {
      score: this._config.scores.someInternalFollow,
      resultText: (0, Si.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
        (0, Si.__)("%1$sInternal links%2$s: There are both nofollowed and normal internal links on this page. Good job!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    };
  }
}
Kd.default = OSa;
var Br = {};
Object.defineProperty(Br, "__esModule", {
  value: !0
});
Br.default = void 0;
var Ya = sa, EC = K, ISa = q1(Qi), CSa = q1(Ze), AC = Ce, PSa = q1(qe);
function q1(e) {
  return e && e.__esModule ? e : { default: e };
}
class RSa extends CSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   * @param {number} [config.parameters] The parameters to use.
   * @param {number} [config.parameters.recommendedPosition] The recommended position of the keyphrase within the SEO title.
   * @param {Object} [config.scores] The scores to use.
   * @param {number} [config.scores.good] The score to return if the keyphrase is found at the recommended position.
   * @param {number} [config.scores.okay] The score to return if the keyphrase is found, but not at the recommended position.
   * @param {number} [config.scores.bad] The score to return if there are fewer keyphrase occurrences than the recommended minimum.
   * @param {string} [config.urlTitle] The URL to the relevant article on Yoast.com to add to the title of the assessment in the feedback.
   * @param {string} [config.urlCallToAction] The URL to the relevant article on Yoast.com to add to the call to action in the assessment feedback.
   * @param {Object} [config.feedbackStrings] The feedback strings to use.
   * @param {string} [config.feedbackStrings.bad] The feedback string to use when the assessment gives a bad score.
   */
  constructor(a = {}) {
    super();
    const t = {
      parameters: {
        recommendedPosition: 0
      },
      scores: {
        good: 9,
        okay: 6,
        bad: 2
      },
      urlTitle: (0, AC.createAnchorOpeningTag)("https://yoa.st/33g"),
      urlCallToAction: (0, AC.createAnchorOpeningTag)("https://yoa.st/33h"),
      feedbackStrings: {
        bad: (0, Ya.__)("For the best SEO results write the exact match of your keyphrase in the SEO title, and put the keyphrase at the beginning of the title", "wordpress-seo")
      }
    };
    this.identifier = "keyphraseInSEOTitle", this.name = (0, Ya.__)("Keyphrase in SEO title", "wordpress-seo"), this._config = (0, EC.merge)(t, a);
  }
  /**
   * Executes the SEO title keyphrase assessment and returns an assessment result.
   *
   * @param {Paper}       paper       The Paper object to assess.
   * @param {Researcher}  researcher  The Researcher object containing all available researches.
   *
   * @returns {AssessmentResult} The result of the assessment with text and score.
   */
  getResult(a, t) {
    const n = (0, ISa.default)(a.getLocale());
    this._canAssess = !1, a.hasKeyword() && a.hasTitle() && (this._keyphraseMatches = t.getResearch("findKeyphraseInSEOTitle"), this._keyphrase = (0, EC.escape)(a.getKeyword()), this._canAssess = !0);
    const r = new PSa.default(), o = this.calculateResult(this._keyphrase, n);
    return r.setScore(o.score), r.setText(o.resultText), r.getScore() < 9 && this._canAssess && (r.setHasJumps(!0), r.setEditFieldName((0, Ya.__)("SEO title", "wordpress-seo"))), r;
  }
  /**
   * Calculates the result based on whether and how the keyphrase was matched in the SEO title. Returns GOOD result if
   * an exact match of the keyphrase is found in the beginning of the SEO title. Returns OK results if all content words
   * from the keyphrase are in the SEO title (in any form). Returns BAD otherwise.
   *
   * @param {string}  keyphrase   The keyphrase of the paper (to be returned in the feedback strings).
   * @param {string}  language    The language to check.
   *
   * @returns {{score: number, resultText: string}} Object with score and text.
   */
  calculateResult(a, t) {
    const n = this._config.urlTitle + this.name + "</a>";
    if (!this._canAssess)
      return {
        score: this._config.scores.bad,
        resultText: (0, Ya.sprintf)(
          /* translators: %1$s expands to the title of the "Keyphrase in SEO title" assessment (translated to the current language)
           and links to an article on yoast.com. %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag. */
          (0, Ya.__)("%1$s: %2$sPlease add both a keyphrase and an SEO title beginning with the keyphrase%3$s.", "wordpress-seo"),
          n,
          this._config.urlCallToAction,
          "</a>"
        )
      };
    const r = this._config.feedbackStrings;
    t === "ja" && (r.bad = (0, Ya.__)("For the best SEO results include all words of your keyphrase in the SEO title, and put the keyphrase at the beginning of the title", "wordpress-seo"));
    const o = this._keyphraseMatches.exactMatchFound, l = this._keyphraseMatches.position, u = this._keyphraseMatches.allWordsFound, c = this._keyphraseMatches.exactMatchKeyphrase;
    return o === !0 ? l === 0 ? {
      score: this._config.scores.good,
      resultText: (0, Ya.sprintf)(
        /* translators: %1$s expands to the title of the "Keyphrase in SEO title" assessment (translated to the current language)
         and links to an article on yoast.com. */
        (0, Ya.__)("%1$s: The exact match of the focus keyphrase appears at the beginning of the SEO title. Good job!", "wordpress-seo"),
        n
      )
    } : {
      score: this._config.scores.okay,
      resultText: (0, Ya.sprintf)(
        /* translators: %1$s expands to the title of the "Keyphrase in SEO title" assessment (translated to the current language)
         and links to an article on yoast.com. %2$s expand to a link on yoast.com, %3$s expands to the anchor end tag. */
        (0, Ya.__)("%1$s: The exact match of the focus keyphrase appears in the SEO title, but not at the beginning. %2$sMove it to the beginning for the best results%3$s.", "wordpress-seo"),
        n,
        this._config.urlCallToAction,
        "</a>"
      )
    } : u ? t === "ja" ? l === 0 ? {
      score: this._config.scores.good,
      resultText: (0, Ya.sprintf)(
        /* translators: %1$s expands to the title of the "Keyphrase in SEO title" assessment (translated to the current language)
         and links to an article on yoast.com. */
        (0, Ya.__)("%1$s: The focus keyphrase appears at the beginning of the SEO title. Good job!", "wordpress-seo"),
        n,
        "</a>"
      )
    } : {
      score: this._config.scores.okay,
      resultText: (0, Ya.sprintf)(
        /* translators: %1$s expands to the title of the "Keyphrase in SEO title" assessment (translated to the current language)
         and links to an article on yoast.com. %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag. */
        (0, Ya.__)("%1$s: Title does not begin with the focus keyphrase. %2$sMove your focus keyphrase to the beginning of the title%3$s.", "wordpress-seo"),
        n,
        this._config.urlCallToAction,
        "</a>"
      )
    } : {
      score: this._config.scores.okay,
      resultText: (0, Ya.sprintf)(
        /* translators: %1$s expands to the title of the "Keyphrase in SEO title" assessment (translated to the current language)
         and links to an article on yoast.com. %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag. */
        (0, Ya.__)("%1$s: Does not contain the exact match. %2$sTry to write the exact match of your keyphrase in the SEO title and put it at the beginning of the title%3$s.", "wordpress-seo"),
        n,
        this._config.urlCallToAction,
        "</a>"
      )
    } : c ? {
      score: this._config.scores.bad,
      resultText: (0, Ya.sprintf)(
        /* translators: %1$s expands to the title of the "Keyphrase in SEO title" assessment (translated to the current language)
         and links to an article on yoast.com. %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag. */
        (0, Ya.__)("%1$s: Does not contain the exact match. %2$sTry to write the exact match of your keyphrase in the SEO title and put it at the beginning of the title%3$s.", "wordpress-seo"),
        n,
        this._config.urlCallToAction,
        "</a>",
        a
      )
    } : {
      score: this._config.scores.bad,
      resultText: (0, Ya.sprintf)(
        /* translators: %1$s expands to the title of the "Keyphrase in SEO title" assessment (translated to the current language)
         and links to an article on yoast.com. %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag,
         %4$s expands to the keyphrase of the article, %5$s expands to the call to action text. */
        (0, Ya.__)('%1$s: Not all the words from your keyphrase "%4$s" appear in the SEO title. %2$s%5$s%3$s.', "wordpress-seo"),
        n,
        this._config.urlCallToAction,
        "</a>",
        a,
        r.bad
      )
    };
  }
}
Br.default = RSa;
var ct = {};
Object.defineProperty(ct, "__esModule", {
  value: !0
});
ct.default = ct.UrlKeywordAssessment = ct.SlugKeywordAssessment = void 0;
var fr = sa, DSa = K, NSa = eM(Ze), TC = Ce, LSa = eM(qe);
function eM(e) {
  return e && e.__esModule ? e : { default: e };
}
class aM extends NSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} config   The configuration to use.
   * @param {Object} [config.scores] The scores to use.
   * @param {number} [config.scores.bad] The score to return if there is no keyphrase and/or slug.
   * @param {number} [config.scores.okay] The score to return if not all content words are found in the slug.
   * @param {number} [config.scores.good] The score to return if all content words are found in the slug.
   * @param {string} [config.urlTitle] The URL to the relevant article on Yoast.com to add to the title of the assessment in the feedback.
   * @param {string} [config.urlCallToAction] The URL to the relevant article on Yoast.com to add to the call to action in the assessment feedback.
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        bad: 3,
        okay: 6,
        good: 9
      },
      urlTitle: (0, TC.createAnchorOpeningTag)("https://yoa.st/33o"),
      urlCallToAction: (0, TC.createAnchorOpeningTag)("https://yoa.st/33p")
    };
    this.identifier = "slugKeyword", this._config = (0, DSa.merge)(t, a);
  }
  /**
   * Executes the Assessment and returns a result.
   *
   * @param {Paper}       paper       The Paper object to assess.
   * @param {Researcher}  researcher  The Researcher object containing all available researches.
   *
   * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
   */
  getResult(a, t) {
    this._canAssess = !1, a.hasKeyword() && a.hasSlug() && (this._keywordInSlug = t.getResearch("keywordCountInSlug"), this._canAssess = !0);
    const n = new LSa.default(), r = this.calculateResult();
    return n.setScore(r.score), n.setText(r.resultText), n.getScore() < 9 && this._canAssess && (n.setHasJumps(!0), n.setEditFieldName((0, fr.__)("slug", "wordpress-seo"))), n;
  }
  /**
   * Checks whether the assessment is applicable to the paper.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The researcher object.
   *
   * @returns {boolean} True if the edited page is not a front page, and if the keywordCountInSlug research is available on the researcher.
   */
  isApplicable(a, t) {
    return !a.isFrontPage() && t.hasResearch("keywordCountInSlug");
  }
  /**
   * Determines the score and the result text based on whether or not there's a keyword in the slug.
   *
   *
   * @returns {{score: number, resultText: string}} The object with calculated score and resultText.
   */
  calculateResult() {
    return this._canAssess ? this._keywordInSlug.keyphraseLength < 3 ? this._keywordInSlug.percentWordMatches === 100 ? {
      score: this._config.scores.good,
      resultText: (0, fr.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
        (0, fr.__)("%1$sKeyphrase in slug%2$s: Great work!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : {
      score: this._config.scores.okay,
      resultText: (0, fr.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, fr.__)("%1$sKeyphrase in slug%3$s: (Part of) your keyphrase does not appear in the slug. %2$sChange that%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : this._keywordInSlug.percentWordMatches > 50 ? {
      score: this._config.scores.good,
      resultText: (0, fr.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
        (0, fr.__)("%1$sKeyphrase in slug%2$s: More than half of your keyphrase appears in the slug. That's great!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : {
      score: this._config.scores.okay,
      resultText: (0, fr.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, fr.__)("%1$sKeyphrase in slug%3$s: (Part of) your keyphrase does not appear in the slug. %2$sChange that%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : {
      score: this._config.scores.bad,
      resultText: (0, fr.sprintf)(
        /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
        (0, fr.__)("%1$sKeyphrase in slug%3$s: %2$sPlease add both a keyphrase and a slug containing the keyphrase%3$s.", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    };
  }
}
ct.SlugKeywordAssessment = ct.default = aM;
class MSa extends aM {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} config   The configuration to use.
   * @returns {void}
   */
  constructor(a = {}) {
    super(a), this.identifier = "urlKeyword", console.warn("This object is deprecated, use SlugKeywordAssessment instead.");
  }
}
ct.UrlKeywordAssessment = MSa;
var nn = {}, Kc = {};
Object.defineProperty(Kc, "__esModule", {
  value: !0
});
Kc.default = void 0;
Kc.default = {
  recommendedMaximumLength: 60,
  maximumLength: 80
};
Object.defineProperty(nn, "__esModule", {
  value: !0
});
nn.default = void 0;
var Ws = sa, $C = K, qSa = F1(Ze), jC = Ce, FSa = F1(qe), BSa = F1(Kc);
function F1(e) {
  return e && e.__esModule ? e : { default: e };
}
class WSa extends qSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      recommendedMaximumLength: 120,
      maximumLength: 156,
      scores: {
        noMetaDescription: 1,
        tooLong: 6,
        tooShort: 6,
        correctLength: 9
      },
      urlTitle: (0, jC.createAnchorOpeningTag)("https://yoa.st/34d"),
      urlCallToAction: (0, jC.createAnchorOpeningTag)("https://yoa.st/34e")
    };
    this.identifier = "metaDescriptionLength", this._config = (0, $C.merge)(t, a);
  }
  /**
   * Returns the maximum length.
   *
   * @param {string}  locale  The locale.
   *
   * @returns {number} The maximum length.
   */
  getMaximumLength(a) {
    return this.getConfig(a).maximumLength;
  }
  /**
   * Checks if language specific config is available, and overwrite the default config if it is.
   *
   * This method of returning the configuration by checking the locale is necessary since this assessment is also
   * initialized for calculations outside content analysis where we don't have access to the Researcher.
   *
   * @param {string}  locale  The locale.
   *
   * @returns {object}    The configuration to use.
   */
  getConfig(a) {
    let t = this._config;
    return a === "ja" && (t = (0, $C.merge)(t, BSa.default)), t;
  }
  /**
   * Runs the metaDescriptionLength module, based on this returns an assessment result with score.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The researcher used for calling research.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a, t) {
    const n = t.getResearch("metaDescriptionLength"), r = new FSa.default(), o = t.getConfig("language"), l = this.getConfig(o);
    return r.setScore(this.calculateScore(n, o)), r.setText(this.translateScore(n, l)), r.getScore() < 9 && (r.setHasJumps(!0), r.setEditFieldName((0, Ws.__)("meta description", "wordpress-seo"))), r.max = l.maximumLength, r.actual = n, r;
  }
  /**
   * Returns the score for the descriptionLength.
   *
   * @param {number}  descriptionLength The length of the meta description.
   * @param {string}  locale            The locale.
   *
   * @returns {number} The calculated score.
   */
  calculateScore(a, t) {
    const n = this.getConfig(t);
    return a === 0 ? n.scores.noMetaDescription : a <= this._config.recommendedMaximumLength ? n.scores.tooShort : a > this._config.maximumLength ? n.scores.tooLong : n.scores.correctLength;
  }
  /**
   * Translates the descriptionLength to a message the user can understand.
   *
   * @param {number}  descriptionLength   The length of the meta description.
   * @param {object}  config              The configuration to use.
   *
   * @returns {string} The translated string.
   */
  translateScore(a, t) {
    return a === 0 ? (0, Ws.sprintf)(
      /* translators:  %1$s and %2$s expand to a links on yoast.com, %3$s expands to the anchor end tag */
      (0, Ws.__)("%1$sMeta description length%3$s: No meta description has been specified. Search engines will display copy from the page instead. %2$sMake sure to write one%3$s!", "wordpress-seo"),
      t.urlTitle,
      t.urlCallToAction,
      "</a>"
    ) : a <= t.recommendedMaximumLength ? (0, Ws.sprintf)(
      /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag,
      %4$d expands to the number of characters in the meta description, %5$d expands to
      the total available number of characters in the meta description */
      (0, Ws.__)("%1$sMeta description length%3$s: The meta description is too short (under %4$d characters). Up to %5$d characters are available. %2$sUse the space%3$s!", "wordpress-seo"),
      t.urlTitle,
      t.urlCallToAction,
      "</a>",
      t.recommendedMaximumLength,
      t.maximumLength
    ) : a > t.maximumLength ? (0, Ws.sprintf)(
      /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag,
      %4$d expands to	the total available number of characters in the meta description */
      (0, Ws.__)("%1$sMeta description length%3$s: The meta description is over %4$d characters. To ensure the entire description will be visible, %2$syou should reduce the length%3$s!", "wordpress-seo"),
      t.urlTitle,
      t.urlCallToAction,
      "</a>",
      t.maximumLength
    ) : (0, Ws.sprintf)(
      /* translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
      (0, Ws.__)("%1$sMeta description length%2$s: Well done!", "wordpress-seo"),
      t.urlTitle,
      "</a>"
    );
  }
}
nn.default = WSa;
var no = {};
Object.defineProperty(no, "__esModule", {
  value: !0
});
no.default = void 0;
var es = sa, USa = K, HSa = In, GSa = tM(Ze), xC = ws, VSa = pt, KSa = tM(qe);
function tM(e) {
  return e && e.__esModule ? e : { default: e };
}
class YSa extends GSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object} config The configuration to use.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      parameters: {
        lowerBoundary: 0.3,
        upperBoundary: 0.75
      },
      scores: {
        noMatches: 3,
        tooFewMatches: 3,
        goodNumberOfMatches: 9,
        tooManyMatches: 3
      },
      urlTitle: (0, xC.createAnchorOpeningTag)("https://yoa.st/33m"),
      urlCallToAction: (0, xC.createAnchorOpeningTag)("https://yoa.st/33n")
    };
    this.identifier = "subheadingsKeyword", this._config = (0, USa.merge)(t, a);
  }
  /**
   * Runs the matchKeywordInSubheadings research and based on this returns an assessment result.
   *
   * @param {Paper} paper             The paper to use for the assessment.
   * @param {Researcher} researcher   The researcher used for calling research.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a, t) {
    this._subHeadings = t.getResearch("matchKeywordInSubheadings");
    const n = new KSa.default();
    this._minNumberOfSubheadings = Math.ceil(this._subHeadings.count * this._config.parameters.lowerBoundary), this._maxNumberOfSubheadings = Math.floor(this._subHeadings.count * this._config.parameters.upperBoundary);
    const r = this.calculateResult();
    return n.setScore(r.score), n.setText(r.resultText), n;
  }
  /**
   * Checks whether the paper has a subheadings.
   *
   * @param {Paper} paper The paper to use for the check.
   *
   * @returns {boolean} True when there is at least one subheading.
   */
  hasSubheadings(a) {
    return (0, HSa.getSubheadingsTopLevel)(a.getText()).length > 0;
  }
  /**
   * Checks whether the paper has a text and a keyword.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   *
   * @returns {boolean} True when there is text and a keyword.
   */
  isApplicable(a) {
    return a.hasText() && a.hasKeyword() && this.hasSubheadings(a);
  }
  /**
   * Checks whether there are too few subheadings with the keyphrase.
   *
   * This is the case if the number of subheadings with the keyphrase is more than 0 but less than the specified
   * recommended minimum.
   *
   * @returns {boolean} Returns true if the keyphrase is included in too few subheadings.
   */
  hasTooFewMatches() {
    return this._subHeadings.matches > 0 && this._subHeadings.matches < this._minNumberOfSubheadings;
  }
  /**
   * Checks whether there are too many subheadings with the keyphrase.
   *
   * The upper limit is only applicable if there is more than one subheading. If there is only one subheading with
   * the keyphrase this would otherwise always lead to a 100% match rate.
   *
   * @returns {boolean} Returns true if there is more than one subheading and if the keyphrase is included in less
   *                    subheadings than the recommended maximum.
   */
  hasTooManyMatches() {
    return this._subHeadings.count > 1 && this._subHeadings.matches > this._maxNumberOfSubheadings;
  }
  /**
   * Checks whether there is only one higher-level subheading and this subheading includes the keyphrase.
   *
   * @returns {boolean} Returns true if there is exactly one higher-level subheading and this
   * subheading has a keyphrase match.
   */
  isOneOfOne() {
    return this._subHeadings.count === 1 && this._subHeadings.matches === 1;
  }
  /**
   * Checks whether there is a good number of subheadings with the keyphrase.
   *
   * This is the case if there is only one subheading and that subheading includes the keyphrase or if the number of
   * subheadings with the keyphrase is within the specified recommended range.
   *
   * @returns {boolean} Returns true if the keyphrase is included in a sufficient number of subheadings.
   */
  hasGoodNumberOfMatches() {
    return (0, VSa.inRangeStartEndInclusive)(this._subHeadings.matches, this._minNumberOfSubheadings, this._maxNumberOfSubheadings);
  }
  /**
   * Determines the score and the Result text for the subheadings.
   *
   * @returns {Object} The object with the calculated score and the result text.
   */
  calculateResult() {
    return this.hasTooFewMatches() ? {
      score: this._config.scores.tooFewMatches,
      resultText: (0, es.sprintf)(
        /* translators: %1$s and %2$s expand to a link on yoast.com, %3$s expands to the anchor end tag. */
        (0, es.__)("%1$sKeyphrase in subheading%3$s: %2$sUse more keyphrases or synonyms in your H2 and H3 subheadings%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : this.hasTooManyMatches() ? {
      score: this._config.scores.tooManyMatches,
      resultText: (0, es.sprintf)(
        /* translators: %1$s and %2$s expand to a link on yoast.com, %3$s expands to the anchor end tag. */
        (0, es.__)("%1$sKeyphrase in subheading%3$s: More than 75%% of your H2 and H3 subheadings reflect the topic of your copy. That's too much. %2$sDon't over-optimize%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    } : this.isOneOfOne() ? {
      score: this._config.scores.goodNumberOfMatches,
      resultText: (0, es.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag,
        %3$d expands to the number of subheadings containing the keyphrase. */
        (0, es.__)("%1$sKeyphrase in subheading%2$s: Your H2 or H3 subheading reflects the topic of your copy. Good job!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._subHeadings.matches
      )
    } : this.hasGoodNumberOfMatches() ? {
      score: this._config.scores.goodNumberOfMatches,
      resultText: (0, es.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag,
        %3$d expands to the number of subheadings containing the keyphrase. */
        (0, es._n)("%1$sKeyphrase in subheading%2$s: %3$s of your H2 and H3 subheadings reflects the topic of your copy. Good job!", "%1$sKeyphrase in subheading%2$s: %3$s of your H2 and H3 subheadings reflect the topic of your copy. Good job!", this._subHeadings.matches, "wordpress-seo"),
        this._config.urlTitle,
        "</a>",
        this._subHeadings.matches
      )
    } : {
      score: this._config.scores.noMatches,
      resultText: (0, es.sprintf)(
        /* translators: %1$s and %2$s expand to a link on yoast.com, %3$s expands to the anchor end tag. */
        (0, es.__)("%1$sKeyphrase in subheading%3$s: %2$sUse more keyphrases or synonyms in your H2 and H3 subheadings%3$s!", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    };
  }
}
no.default = YSa;
var ol = {};
Object.defineProperty(ol, "__esModule", {
  value: !0
});
ol.default = void 0;
var Kn = sa, QSa = K, SC = pt, XSa = nM(Ze), OC = Ce, ZSa = nM(qe);
function nM(e) {
  return e && e.__esModule ? e : { default: e };
}
class JSa extends XSa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object}  config      The configuration to use.
   * @param {boolean} countVideos Whether videos are also included in the assessment or not.
   */
  constructor(a = {}, t = !1) {
    super();
    const n = {
      scores: {
        bad: 3,
        good: 9
      },
      recommendedCount: 1,
      urlTitle: (0, OC.createAnchorOpeningTag)("https://yoa.st/4f4"),
      urlCallToAction: (0, OC.createAnchorOpeningTag)("https://yoa.st/4f5")
    };
    this.identifier = "images", this._config = (0, QSa.merge)(n, a), this._countVideos = t;
  }
  /**
   * Execute the Assessment and return a result.
   *
   * @param {Paper}       paper       The Paper object to assess.
   * @param {Researcher}  researcher  The Researcher object containing all available researches.
   *
   * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
   */
  getResult(a, t) {
    this.imageCount = t.getResearch("imageCount"), this.videoCount = t.getResearch("videoCount");
    const n = this.calculateResult(), r = new ZSa.default();
    return r.setScore(n.score), r.setText(n.resultText), r;
  }
  /**
   * Calculate the result based on the availability of images in the text, including videos in product pages.
   *
   * @returns {{score: number, resultText: string}} The calculated result.
   */
  calculateResult() {
    const a = this._countVideos ? this.imageCount + this.videoCount : this.imageCount;
    if (a === 0)
      return this._countVideos ? {
        score: this._config.scores.bad,
        resultText: (0, Kn.sprintf)(
          /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
          (0, Kn.__)("%1$sImages and videos%3$s: No images or videos appear on this page. %2$sAdd some%3$s!", "wordpress-seo"),
          this._config.urlTitle,
          this._config.urlCallToAction,
          "</a>"
        )
      } : {
        score: this._config.scores.bad,
        resultText: (0, Kn.sprintf)(
          /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
          (0, Kn.__)("%1$sImages%3$s: No images appear on this page. %2$sAdd some%3$s!", "wordpress-seo"),
          this._config.urlTitle,
          this._config.urlCallToAction,
          "</a>"
        )
      };
    if (this._config.scores.okay) {
      if ((0, SC.inRangeStartEndInclusive)(a, 1, 3) && !this._countVideos)
        return {
          score: this._config.scores.okay,
          resultText: (0, Kn.sprintf)(
            /* translators: %3$s and %4$s expand to links on yoast.com, %5$s expands to the anchor end tag,
            * %1$d expands to the number of images found in the text,
            * %2$d expands to the recommended number of images in the text, */
            (0, Kn._n)("%3$sImages%5$s: Only %1$d image appears on this page. We recommend at least %2$d. %4$sAdd more relevant images%5$s!", "%3$sImages%5$s: Only %1$d images appear on this page. We recommend at least %2$d. %4$sAdd more relevant images%5$s!", a, "wordpress-seo"),
            a,
            this._config.recommendedCount,
            this._config.urlTitle,
            this._config.urlCallToAction,
            "</a>"
          )
        };
      if ((0, SC.inRangeStartEndInclusive)(a, 1, 3) && this._countVideos)
        return {
          score: this._config.scores.okay,
          resultText: (0, Kn.sprintf)(
            /* translators: %3$s and %4$s expand to links on yoast.com, %5$s expands to the anchor end tag,
            * %1$d expands to the number of images found in the text,
            * %2$d expands to the recommended number of images in the text, */
            (0, Kn._n)("%3$sImages and videos%5$s: Only %1$d image or video appears on this page. We recommend at least %2$d. %4$sAdd more relevant images or videos%5$s!", "%3$sImages and videos%5$s: Only %1$d images or videos appear on this page. We recommend at least %2$d. %4$sAdd more relevant images or videos%5$s!", a, "wordpress-seo"),
            a,
            this._config.recommendedCount,
            this._config.urlTitle,
            this._config.urlCallToAction,
            "</a>"
          )
        };
    }
    return this._countVideos ? {
      score: this._config.scores.good,
      resultText: (0, Kn.sprintf)(
        /* translators: %1$s expands to a link on yoast.com,
         * %2$s expands to the anchor end tag. */
        (0, Kn.__)("%1$sImages and videos%2$s: Good job!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    } : {
      score: this._config.scores.good,
      resultText: (0, Kn.sprintf)(
        /* translators: %1$s expands to a link on yoast.com,
         * %2$s expands to the anchor end tag. */
        (0, Kn.__)("%1$sImages%2$s: Good job!", "wordpress-seo"),
        this._config.urlTitle,
        "</a>"
      )
    };
  }
}
ol.default = JSa;
var Cn = {};
Object.defineProperty(Cn, "__esModule", {
  value: !0
});
Cn.default = void 0;
var Ma = sa, Us = K, e2a = rM(Ze), IC = ws, a2a = rM(qe);
function rM(e) {
  return e && e.__esModule ? e : { default: e };
}
class t2a extends e2a.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      recommendedMinimum: 300,
      slightlyBelowMinimum: 250,
      belowMinimum: 200,
      veryFarBelowMinimum: 100,
      scores: {
        recommendedMinimum: 9,
        slightlyBelowMinimum: 6,
        belowMinimum: 3,
        farBelowMinimum: -10,
        veryFarBelowMinimum: -20
      },
      countTextIn: {
        singular: (0, Ma.__)("word", "wordpress-seo"),
        plural: (0, Ma.__)("words", "wordpress-seo")
      },
      urlTitle: (0, IC.createAnchorOpeningTag)("https://yoa.st/34n"),
      urlCallToAction: (0, IC.createAnchorOpeningTag)("https://yoa.st/34o"),
      cornerstoneContent: !1,
      customContentType: ""
    };
    this.identifier = "textLength", this._config = (0, Us.merge)(t, a);
  }
  /**
   * Executes the Assessment and returns a result.
   *
   * @param {Paper}       paper       The Paper object to assess.
   * @param {Researcher}  researcher  The Researcher object containing all available researches.
   *
   * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
   */
  getResult(a, t) {
    const n = t.getResearch("wordCountInText");
    t.getConfig("textLength") && (this._config = this.getLanguageSpecificConfig(t)), t.getConfig("countCharacters") && (this._config.countTextIn.singular = (0, Ma.__)("character", "wordpress-seo"), this._config.countTextIn.plural = (0, Ma.__)("characters", "wordpress-seo"));
    const o = this.calculateResult(n.count), l = new a2a.default();
    return l.setScore(o.score), l.setText(o.resultText), l;
  }
  /**
   * Checks if there is language-specific config, and if so, overwrites the current config with it.
   *
   * @param {Researcher} researcher The researcher to use.
   *
   * @returns {Object} The config that should be used.
   */
  getLanguageSpecificConfig(a) {
    const t = this._config, n = a.getConfig("textLength");
    return n.hasOwnProperty(t.customContentType) ? (0, Us.merge)(t, n[t.customContentType]) : t.cornerstoneContent === !0 && t.customContentType === "" && n.hasOwnProperty("defaultCornerstone") ? (0, Us.merge)(t, n.defaultCornerstone) : (0, Us.merge)(t, n.defaultAnalysis);
  }
  /**
   * Returns the score and the appropriate feedback string based on the current word count
   * for taxonomies (in WordPress) and collections (in Shopify).
   *
   * @param {number} wordCount	The amount of words to be checked against.
   * @returns {Object} The score and the feedback string.
   */
  calculateTaxonomyResult(a) {
    return a >= this._config.recommendedMinimum ? {
      score: this._config.scores.recommendedMinimum,
      resultText: (0, Ma.sprintf)(
        /* translators: %1$d expands to the number of words / characters in the text,
        %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag,
        %4$s expands to the word 'words' or 'characters'. */
        (0, Ma.__)("%2$sText length%3$s: The text contains %1$d %4$s. Good job!", "wordpress-seo"),
        a,
        this._config.urlTitle,
        "</a>",
        this._config.countTextIn.plural
      )
    } : (0, Us.inRange)(a, this._config.slightlyBelowMinimum, this._config.recommendedMinimum) ? {
      score: this._config.scores.slightlyBelowMinimum,
      resultText: (0, Ma.sprintf)(
        /* translators: %1$d expands to the number of words / characters in the text,
        %2$s expands to a link on yoast.com, %3$s expands to a link on yoast.com,
        %4$s expands to the anchor end tag, %5$d expands to the recommended minimum of words / characters,
        %6$s expands to the word 'words' or 'characters'. */
        (0, Ma.__)("%2$sText length%4$s: The text contains %1$d %6$s. This is slightly below the recommended minimum of %5$d %6$s. %3$sAdd more content%4$s.", "wordpress-seo"),
        a,
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>",
        this._config.recommendedMinimum,
        this._config.countTextIn.plural
      )
    } : (0, Us.inRange)(a, this._config.veryFarBelowMinimum, this._config.slightlyBelowMinimum) ? {
      score: this._config.scores.belowMinimum,
      resultText: (0, Ma.sprintf)(
        /* translators: %1$d expands to the number of words / characters in the text,
        		%2$s expands to a link on yoast.com, %3$s expands to a link on yoast.com,
        		%4$s expands to the anchor end tag, %5$d expands to the recommended minimum of words / characters,
        		%6$s expands to the word 'word' or 'character', %7$s expands to the word 'words' or 'characters'. */
        (0, Ma._n)("%2$sText length%4$s: The text contains %1$d %6$s. This is below the recommended minimum of %5$d %7$s. %3$sAdd more content%4$s.", "%2$sText length%4$s: The text contains %1$d %7$s. This is below the recommended minimum of %5$d %7$s. %3$sAdd more content%4$s.", a, "wordpress-seo"),
        a,
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>",
        this._config.recommendedMinimum,
        this._config.countTextIn.singular,
        this._config.countTextIn.plural
      )
    } : {
      score: this._config.scores.veryFarBelowMinimum,
      resultText: (0, Ma.sprintf)(
        /* translators: %1$s expands to a link on yoast.com, %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag. */
        (0, Ma.__)("%1$sText length%3$s: %2$sPlease add some content%3$s.", "wordpress-seo"),
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>"
      )
    };
  }
  /**
   * Returns the score and the appropriate feedback string based on the current word count for every type of content.
   *
   * @param {number}  wordCount   The amount of words to be checked against.
   *
   * @returns {Object} The score and the feedback string.
   */
  calculateResult(a) {
    if (["taxonomyAssessor", "collectionSEOAssessor", "collectionCornerstoneSEOAssessor"].includes(this._config.customContentType))
      return this.calculateTaxonomyResult(a);
    if (a >= this._config.recommendedMinimum)
      return {
        score: this._config.scores.recommendedMinimum,
        resultText: (0, Ma.sprintf)(
          /* translators: %1$d expands to the number of words / characters in the text,
          %2$s expands to a link on yoast.com, %3$s expands to the anchor end tag,
          %4$s expands to the word 'words' or 'characters'. */
          (0, Ma.__)("%2$sText length%3$s: The text contains %1$d %4$s. Good job!", "wordpress-seo"),
          a,
          this._config.urlTitle,
          "</a>",
          this._config.countTextIn.plural
        )
      };
    if ((0, Us.inRange)(a, 0, this._config.belowMinimum)) {
      let n = this._config.scores.farBelowMinimum;
      return (0, Us.inRange)(a, 0, this._config.veryFarBelowMinimum) && (n = this._config.scores.veryFarBelowMinimum), {
        score: n,
        resultText: (0, Ma.sprintf)(
          /* translators: %1$d expands to the number of words / characters in the text,
          %2$s expands to a link on yoast.com, %3$s expands to a link on yoast.com,
          %4$s expands to the anchor end tag, %5$d expands to the recommended minimum of words / characters,
          %6$s expands to the word 'word' or 'character', %7$s expands to the word 'words' or 'characters'. */
          (0, Ma._n)("%2$sText length%4$s: The text contains %1$d %6$s. This is far below the recommended minimum of %5$d %7$s. %3$sAdd more content%4$s.", "%2$sText length%4$s: The text contains %1$d %7$s. This is far below the recommended minimum of %5$d %7$s. %3$sAdd more content%4$s.", a, "wordpress-seo"),
          a,
          this._config.urlTitle,
          this._config.urlCallToAction,
          "</a>",
          this._config.recommendedMinimum,
          this._config.countTextIn.singular,
          this._config.countTextIn.plural
        )
      };
    }
    return (0, Us.inRange)(a, this._config.slightlyBelowMinimum, this._config.recommendedMinimum) ? this._config.cornerstoneContent === !1 ? {
      score: this._config.scores.slightlyBelowMinimum,
      resultText: (0, Ma.sprintf)(
        /* translators: %1$d expands to the number of words / characters in the text,
        %2$s expands to a link on yoast.com, %3$s expands to a link on yoast.com,
        %4$s expands to the anchor end tag, %5$d expands to the recommended minimum of words / characters,
        %6$s expands to the word 'words' or 'characters'. */
        (0, Ma.__)("%2$sText length%4$s: The text contains %1$d %6$s. This is slightly below the recommended minimum of %5$d %6$s. %3$sAdd a bit more copy%4$s.", "wordpress-seo"),
        a,
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>",
        this._config.recommendedMinimum,
        this._config.countTextIn.plural
      )
    } : {
      score: this._config.scores.slightlyBelowMinimum,
      resultText: (0, Ma.sprintf)(
        /* translators: %1$d expands to the number of words / characters in the text,
        	%2$s expands to a link on yoast.com, %3$s expands to a link on yoast.com,
        	%4$s expands to the anchor end tag, %5$d expands to the recommended minimum of words / characters,
        	%6$s expands to the word 'words' or 'characters'. */
        (0, Ma.__)("%2$sText length%4$s: The text contains %1$d %6$s. This is below the recommended minimum of %5$d %6$s. %3$sAdd more content%4$s.", "wordpress-seo"),
        a,
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>",
        this._config.recommendedMinimum,
        this._config.countTextIn.plural
      )
    } : {
      score: this._config.scores.belowMinimum,
      resultText: (0, Ma.sprintf)(
        /* translators: %1$d expands to the number of words / characters in the text,
        		%2$s expands to a link on yoast.com, %3$s expands to a link on yoast.com,
        		%4$s expands to the anchor end tag, %5$d expands to the recommended minimum of words / characters,
        		%6$s expands to the word 'words' or 'characters'. */
        (0, Ma.__)("%2$sText length%4$s: The text contains %1$d %6$s. This is below the recommended minimum of %5$d %6$s. %3$sAdd more content%4$s.", "wordpress-seo"),
        a,
        this._config.urlTitle,
        this._config.urlCallToAction,
        "</a>",
        this._config.recommendedMinimum,
        this._config.countTextIn.plural
      )
    };
  }
}
Cn.default = t2a;
var Yd = {};
Object.defineProperty(Yd, "__esModule", {
  value: !0
});
Yd.default = void 0;
var Oi = sa, CC = K, n2a = sM(Ze), PC = Ce, r2a = sM(qe);
function sM(e) {
  return e && e.__esModule ? e : { default: e };
}
class s2a extends n2a.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        noLinks: 3,
        allNofollowed: 7,
        someNoFollowed: 8,
        allFollowed: 9
      },
      urlTitle: (0, PC.createAnchorOpeningTag)("https://yoa.st/34f"),
      urlCallToAction: (0, PC.createAnchorOpeningTag)("https://yoa.st/34g")
    };
    this.identifier = "externalLinks", this._config = (0, CC.merge)(t, a);
  }
  /**
   * Runs the getLinkStatistics module, based on this returns an assessment result with score.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The researcher used for calling research.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a, t) {
    const n = t.getResearch("getLinkStatistics"), r = new r2a.default();
    return (0, CC.isEmpty)(n) || (r.setScore(this.calculateScore(n)), r.setText(this.translateScore(n))), r;
  }
  /**
   * Returns a score based on the linkStatistics object.
   *
   * @param {LinkStatistics} linkStatistics The object with all link statistics.
   *
   * @returns {number} The calculated score.
   */
  calculateScore(a) {
    return a.externalTotal === 0 ? this._config.scores.noLinks : a.externalNofollow === a.externalTotal ? this._config.scores.allNofollowed : a.externalDofollow < a.externalTotal ? this._config.scores.someNoFollowed : a.externalDofollow === a.externalTotal ? this._config.scores.allFollowed : 0;
  }
  /**
   * Translates the score to a message the user can understand.
   *
   * @param {LinkStatistics}  linkStatistics  The object with all link statistics.
   *
   * @returns {string} The translated string.
   */
  translateScore(a) {
    return a.externalTotal === 0 ? (0, Oi.sprintf)(
      /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
      (0, Oi.__)("%1$sOutbound links%3$s: No outbound links appear in this page. %2$sAdd some%3$s!", "wordpress-seo"),
      this._config.urlTitle,
      this._config.urlCallToAction,
      "</a>"
    ) : a.externalNofollow === a.externalTotal ? (0, Oi.sprintf)(
      /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
      (0, Oi.__)("%1$sOutbound links%3$s: All outbound links on this page are nofollowed. %2$sAdd some normal links%3$s.", "wordpress-seo"),
      this._config.urlTitle,
      this._config.urlCallToAction,
      "</a>"
    ) : a.externalDofollow === a.externalTotal ? (0, Oi.sprintf)(
      /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
      (0, Oi.__)("%1$sOutbound links%2$s: Good job!", "wordpress-seo"),
      this._config.urlTitle,
      "</a>"
    ) : a.externalDofollow < a.externalTotal ? (0, Oi.sprintf)(
      /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
      (0, Oi.__)("%1$sOutbound links%2$s: There are both nofollowed and normal outbound links on this page. Good job!", "wordpress-seo"),
      this._config.urlTitle,
      "</a>"
    ) : "";
  }
}
Yd.default = s2a;
var sr = {};
Object.defineProperty(sr, "__esModule", {
  value: !0
});
sr.default = void 0;
var hr = sa, i2a = K, o2a = iM(Ze), Qg = pt, RC = ws, l2a = iM(qe);
function iM(e) {
  return e && e.__esModule ? e : { default: e };
}
const DC = 600;
class d2a extends o2a.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object}  [config]        The configuration to use.
   * @param {boolean} allowShortTitle Whether the short title width is penalized with a bad score or not.
   *
   * @returns {void}
   */
  constructor(a = {}, t = !1) {
    super();
    const n = {
      minLength: 400,
      maxLength: DC,
      scores: {
        noTitle: 1,
        widthTooShort: 6,
        widthTooLong: 3,
        widthCorrect: 9
      },
      urlTitle: (0, RC.createAnchorOpeningTag)("https://yoa.st/34h"),
      urlCallToAction: (0, RC.createAnchorOpeningTag)("https://yoa.st/34i")
    };
    this._allowShortTitle = t, this.identifier = "titleWidth", this._config = (0, i2a.merge)(n, a);
  }
  /**
   * Returns the maximum length.
   *
   * @returns {number} The maximum length.
   */
  getMaximumLength() {
    return DC;
  }
  /**
   * Runs the pageTitleWidth module, based on this returns an assessment result with score.
   *
   * @param {Paper} paper The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a, t) {
    const n = t.getResearch("pageTitleWidth"), r = new l2a.default();
    return r.setScore(this.calculateScore(n)), r.setText(this.translateScore(n)), r.getScore() < 9 && (r.setHasJumps(!0), r.setEditFieldName((0, hr.__)("SEO title", "wordpress-seo"))), r.max = this._config.maxLength, r.actual = n, r;
  }
  /**
   * Returns the score for the SEO title width calculation.
   *
   * @param {number} pageTitleWidth The width of the SEO title.
   *
   * @returns {number} The calculated score.
   */
  calculateScore(a) {
    return (0, Qg.inRangeEndInclusive)(a, 1, 400) ? this._config.scores.widthTooShort : (0, Qg.inRangeEndInclusive)(a, this._config.minLength, this._config.maxLength) ? this._config.scores.widthCorrect : a > this._config.maxLength ? this._config.scores.widthTooLong : this._config.scores.noTitle;
  }
  /**
   * Translates the score of the SEO title width calculation to a message the user can understand.
   *
   * @param {number} pageTitleWidth The width of the SEO title.
   *
   * @returns {string} The translated string.
   */
  translateScore(a) {
    return (0, Qg.inRangeEndInclusive)(a, 1, 400) ? this._allowShortTitle ? (0, hr.sprintf)(
      /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
      (0, hr.__)("%1$sSEO title width%2$s: Good job!", "wordpress-seo"),
      this._config.urlTitle,
      "</a>"
    ) : (0, hr.sprintf)(
      /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
      (0, hr.__)("%1$sSEO title width%3$s: The SEO title is too short. %2$sUse the space to add keyphrase variations or create compelling call-to-action copy%3$s.", "wordpress-seo"),
      this._config.urlTitle,
      this._config.urlCallToAction,
      "</a>"
    ) : (0, Qg.inRangeEndInclusive)(a, this._config.minLength, this._config.maxLength) ? (0, hr.sprintf)(
      /* translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */
      (0, hr.__)("%1$sSEO title width%2$s: Good job!", "wordpress-seo"),
      this._config.urlTitle,
      "</a>"
    ) : a > this._config.maxLength ? (0, hr.sprintf)(
      /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
      (0, hr.__)("%1$sSEO title width%3$s: The SEO title is wider than the viewable limit. %2$sTry to make it shorter%3$s.", "wordpress-seo"),
      this._config.urlTitle,
      this._config.urlCallToAction,
      "</a>"
    ) : (0, hr.sprintf)(
      /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
      (0, hr.__)("%1$sSEO title width%3$s: %2$sPlease create an SEO title%3$s.", "wordpress-seo"),
      this._config.urlTitle,
      this._config.urlCallToAction,
      "</a>"
    );
  }
}
sr.default = d2a;
var oi = {};
Object.defineProperty(oi, "__esModule", {
  value: !0
});
oi.default = void 0;
var NC = sa, LC = K, u2a = ih(Ze), MC = Ce, c2a = ih(to), p2a = ih(qe), g2a = ih(mt);
function ih(e) {
  return e && e.__esModule ? e : { default: e };
}
class m2a extends u2a.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} config The configuration to use.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        textContainsSuperfluousH1: 1
      },
      urlTitle: (0, MC.createAnchorOpeningTag)("https://yoa.st/3a6"),
      urlCallToAction: (0, MC.createAnchorOpeningTag)("https://yoa.st/3a7")
    };
    this.identifier = "singleH1", this._config = (0, LC.merge)(t, a);
  }
  /**
   * Runs the h1 research and based on this returns an assessment result with a score.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The researcher used for calling the research.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a, t) {
    this._h1s = t.getResearch("h1s");
    const n = new p2a.default(), r = this.calculateResult();
    return (0, LC.isUndefined)(r) || (n.setScore(r.score), n.setText(r.resultText), n.setHasMarks(!0)), n;
  }
  /**
   * Returns the score and the feedback string for the single H1 assessment.
   *
   * @returns {Object|null} The calculated score and the feedback string.
   */
  calculateResult() {
    if (!(this._h1s.length <= 1))
      return {
        score: this._config.scores.textContainsSuperfluousH1,
        resultText: (0, NC.sprintf)(
          /* translators: %1$s and %2$s expand to links on yoast.com, %3$s expands to the anchor end tag */
          (0, NC.__)("%1$sSingle title%3$s: H1s should only be used as your main title. Find all H1s in your text that aren't your main title and %2$schange them to a lower heading level%3$s!", "wordpress-seo"),
          this._config.urlTitle,
          this._config.urlCallToAction,
          "</a>"
        )
      };
  }
  /**
   * Marks all H1s in the body of the text, regardless of their position in the text.
   *
   * @returns {Array} Array with all the marked H1s.
   */
  getMarks() {
    return this._h1s.map(function(a) {
      return new g2a.default({
        original: "<h1>" + a.content + "</h1>",
        marked: "<h1>" + (0, c2a.default)(a.content) + "</h1>",
        position: {
          startOffset: a.position.startOffset,
          endOffset: a.position.endOffset,
          startOffsetBlock: 0,
          endOffsetBlock: a.position.endOffset - a.position.startOffset,
          clientId: a.position.clientId
        }
      });
    });
  }
  /**
   * Checks whether the paper has a text.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   *
   * @returns {boolean} True when there is text.
   */
  isApplicable(a) {
    return a.hasText();
  }
}
oi.default = m2a;
Object.defineProperty(rr, "__esModule", {
  value: !0
});
rr.default = void 0;
var f2a = st(zn), h2a = st(bn), y2a = st(en), z2a = st(ut), b2a = st(an), w2a = st($s), v2a = st(Kd), k2a = st(Br), _2a = st(ct), E2a = st(nn), A2a = st(no), T2a = st(At), $2a = st(ol), j2a = st(Cn), x2a = st(Yd), S2a = st(sr), O2a = st(tn), I2a = st(oi), C2a = st(il);
function st(e) {
  return e && e.__esModule ? e : { default: e };
}
class P2a extends f2a.default {
  /**
   * Creates a new SEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "SEOAssessor", this._assessments = [new h2a.default(), new y2a.default(), new z2a.default(), new b2a.default(), new E2a.default(), new A2a.default(), new w2a.default(), new T2a.default(), new $2a.default(), new j2a.default(), new x2a.default(), new k2a.default(), new v2a.default(), new S2a.default({
      scores: {
        widthTooShort: 9
      }
    }, !0), new _2a.default(), new O2a.default(), new I2a.default()], this._scoreAggregator = new C2a.default();
  }
}
rr.default = P2a;
Object.defineProperty(Vd, "__esModule", {
  value: !0
});
Vd.default = void 0;
var R2a = Qd(rr), D2a = Qd(nn), N2a = Qd(At), L2a = Qd(Cn), M2a = Qd(sr), q2a = Qd(ct);
function Qd(e) {
  return e && e.__esModule ? e : { default: e };
}
class F2a extends R2a.default {
  /**
   * Creates a new CornerstoneSEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "cornerstoneSEOAssessor", this.addAssessment("metaDescriptionLength", new D2a.default({
      scores: {
        tooLong: 3,
        tooShort: 3
      }
    })), this.addAssessment("imageKeyphrase", new N2a.default({
      scores: {
        withAltNonKeyword: 3,
        withAlt: 3,
        noAlt: 3
      }
    })), this.addAssessment("textLength", new L2a.default({
      recommendedMinimum: 900,
      slightlyBelowMinimum: 400,
      belowMinimum: 300,
      scores: {
        belowMinimum: -20,
        farBelowMinimum: -20
      },
      cornerstoneContent: !0
    })), this.addAssessment("titleWidth", new M2a.default({
      scores: {
        widthTooShort: 9
      }
    }, !0)), this.addAssessment("slugKeyword", new q2a.default({
      scores: {
        okay: 3
      }
    }));
  }
}
Vd.default = F2a;
var Yc = {}, oh = {}, lh = {}, aa = {};
Object.defineProperty(aa, "__esModule", {
  value: !0
});
aa.redPotentiallyExclusionary = aa.redHarmful = aa.redExclusionary = aa.preferredDescriptorIfKnown = aa.orangeUnlessSomeoneWants = aa.orangeUnlessAnimalsObjects = aa.orangeNoUnless = aa.orangeExclusionaryNoUnless = aa.beCarefulHarmful = aa.avoidHarmful = aa.avoidDerogatory = aa.alternative = void 0;
aa.avoidDerogatory = "Avoid using <i>%1$s</i> as it is derogatory.";
const B2a = aa.avoidHarmful = "Avoid using <i>%1$s</i> as it is potentially harmful.", B1 = aa.beCarefulHarmful = "Be careful when using <i>%1$s</i> as it is potentially harmful.", Qc = aa.alternative = "Consider using an alternative, such as %2$s.", W2a = "Consider using an alternative, such as %2$s, unless referring to someone who explicitly wants to be referred to with this term.";
aa.preferredDescriptorIfKnown = "Alternatively, if talking about a specific person, use their preferred descriptor if known.";
aa.orangeNoUnless = [B1, Qc].join(" ");
aa.orangeExclusionaryNoUnless = ["Be careful when using <i>%1$s</i> as it is potentially exclusionary.", Qc].join(" ");
aa.orangeUnlessAnimalsObjects = [B1, "Unless you are referring to objects or animals, consider using an alternative, such as %2$s."].join(" ");
aa.orangeUnlessSomeoneWants = [B1, W2a].join(" ");
aa.redHarmful = [B2a, Qc].join(" ");
aa.redExclusionary = ["Avoid using <i>%1$s</i> as it is exclusionary.", Qc].join(" ");
aa.redPotentiallyExclusionary = ["Avoid using <i>%1$s</i> as it is potentially exclusionary.", Qc].join(" ");
var dh = {};
Object.defineProperty(dh, "__esModule", {
  value: !0
});
dh.specificAgeGroup = void 0;
dh.specificAgeGroup = "Or, if possible, be specific about the group you are referring to (e.g. %3$s).";
var ll = {}, Xc = {};
Object.defineProperty(Xc, "__esModule", {
  value: !0
});
Xc.includesWordsAtPosition = U2a;
function U2a(e, a, t) {
  return e.every((n, r) => t[a + r] === n);
}
Object.defineProperty(ll, "__esModule", {
  value: !0
});
ll.isNotPrecededByException = V2a;
ll.isPrecededByException = oM;
var H2a = eo(), G2a = Xc;
function oM(e, a) {
  const t = a.map((n) => (0, H2a.getWords)(n, "\\s", !1));
  return (n) => t.some((r) => {
    const o = n - r.length;
    return o >= 0 ? (0, G2a.includesWordsAtPosition)(r, o, e) : !1;
  });
}
function V2a(e, a) {
  return (t) => !oM(e, a)(t);
}
var ro = {};
Object.defineProperty(ro, "__esModule", {
  value: !0
});
ro.isFollowedByException = lM;
ro.isNotFollowedByException = Q2a;
var K2a = eo(), Y2a = Xc;
function lM(e, a, t) {
  const n = t.map((r) => (0, K2a.getWords)(r, "\\s", !1));
  return (r) => n.some((o) => {
    const l = r + a.length;
    return l >= 0 ? (0, Y2a.includesWordsAtPosition)(o, l, e) : !1;
  });
}
function Q2a(e, a, t) {
  return (n) => !lM(e, a, t)(n);
}
var js = {};
Object.defineProperty(js, "__esModule", {
  value: !0
});
js.includesConsecutiveWords = Z2a;
var X2a = Xc;
function Z2a(e, a) {
  const t = [];
  return e.forEach((n, r) => {
    (0, X2a.includesWordsAtPosition)(a, r, e) && t.push(r);
  }), t;
}
var Wr = {};
Object.defineProperty(Wr, "__esModule", {
  value: !0
});
Wr.SCORES = void 0;
Wr.SCORES = {
  /**
   * Score given to a phrase that is generally considered non-inclusive.
   * Returns a red bullet.
   */
  NON_INCLUSIVE: 3,
  /**
   * Score given to a phrase that is potentially non-inclusive.
   * Returns an orange bullet.
   */
  POTENTIALLY_NON_INCLUSIVE: 6
};
var dl = {}, uh = {}, Zc = {};
Object.defineProperty(Zc, "__esModule", {
  value: !0
});
Zc.default = void 0;
Zc.default = [
  "arisen",
  "awoken",
  "reawoken",
  "babysat",
  "backslid",
  "backslidden",
  "beat",
  "beaten",
  "become",
  "begun",
  "bent",
  "unbent",
  "bet",
  "bid",
  "outbid",
  "rebid",
  "underbid",
  "overbid",
  "bidden",
  "bitten",
  "blown",
  "bought",
  "overbought",
  "bound",
  "unbound",
  "rebound",
  "broadcast",
  "rebroadcast",
  "broken",
  "brought",
  "browbeat",
  "browbeaten",
  "built",
  "prebuilt",
  "rebuilt",
  "overbuilt",
  "burnt",
  "burst",
  "bust",
  "cast",
  "miscast",
  "recast",
  "caught",
  "chosen",
  "clung",
  "come",
  "overcome",
  "cost",
  "crept",
  "cut",
  "undercut",
  "recut",
  "daydreamt",
  "dealt",
  "misdealt",
  "redealt",
  "disproven",
  "done",
  "predone",
  "outdone",
  "misdone",
  "redone",
  "overdone",
  "undone",
  "drawn",
  "outdrawn",
  "redrawn",
  "overdrawn",
  "dreamt",
  "driven",
  "outdriven",
  "drunk",
  "outdrunk",
  "overdrunk",
  "dug",
  "dwelt",
  "eaten",
  "overeaten",
  "fallen",
  "felt",
  "fit",
  "refit",
  "retrofit",
  "flown",
  "outflown",
  "flung",
  "forbidden",
  "forecast",
  "foregone",
  "foreseen",
  "foretold",
  "forgiven",
  "forgotten",
  "forsaken",
  "fought",
  "outfought",
  "found",
  "frostbitten",
  "frozen",
  "unfrozen",
  "given",
  "gone",
  "undergone",
  //	Is also auxiliary: "got",
  "gotten",
  "ground",
  "reground",
  "grown",
  "outgrown",
  "regrown",
  "had",
  "handwritten",
  "heard",
  "reheard",
  "misheard",
  "overheard",
  "held",
  "hewn",
  "hidden",
  "unhidden",
  "hit",
  "hung",
  "rehung",
  "overhung",
  "unhung",
  "hurt",
  "inlaid",
  "input",
  "interwound",
  "interwoven",
  "jerry-built",
  "kept",
  "knelt",
  "knit",
  "reknit",
  "unknit",
  "known",
  "laid",
  "mislaid",
  "relaid",
  "overlaid",
  "lain",
  "underlain",
  "leant",
  "leapt",
  "outleapt",
  "learnt",
  "unlearnt",
  "relearnt",
  "mislearnt",
  "left",
  "lent",
  "let",
  "lip-read",
  "lit",
  "relit",
  "lost",
  "made",
  "premade",
  "remade",
  "meant",
  "met",
  "mown",
  "offset",
  "paid",
  "prepaid",
  "repaid",
  "overpaid",
  "partaken",
  "proofread",
  "proven",
  "put",
  "quick-frozen",
  "quit",
  "read",
  "misread",
  "reread",
  "retread",
  "rewaken",
  "rid",
  "ridden",
  "outridden",
  "overridden",
  "risen",
  "roughcast",
  "run",
  "outrun",
  "rerun",
  "overrun",
  "rung",
  "said",
  "sand-cast",
  "sat",
  "outsat",
  "sawn",
  "seen",
  "overseen",
  "sent",
  "resent",
  "set",
  "preset",
  "reset",
  "misset",
  "sewn",
  "resewn",
  "oversewn",
  "unsewn",
  "shaken",
  "shat",
  "shaven",
  "shit",
  "shone",
  "outshone",
  "shorn",
  "shot",
  "outshot",
  "overshot",
  "shown",
  "shrunk",
  "preshrunk",
  "shut",
  "sight-read",
  "slain",
  "slept",
  "outslept",
  "overslept",
  "slid",
  "slit",
  "slung",
  "unslung",
  "slunk",
  "smelt",
  "outsmelt",
  "snuck",
  "sold",
  "undersold",
  "presold",
  "outsold",
  "resold",
  "oversold",
  "sought",
  "sown",
  "spat",
  "spelt",
  "misspelt",
  "spent",
  "underspent",
  "outspent",
  "misspent",
  "overspent",
  "spilt",
  "overspilt",
  "spit",
  "split",
  "spoilt",
  "spoken",
  "outspoken",
  "misspoken",
  "overspoken",
  "spread",
  "sprung",
  "spun",
  "unspun",
  "stolen",
  "stood",
  "understood",
  "misunderstood",
  "strewn",
  "stricken",
  "stridden",
  "striven",
  "struck",
  "strung",
  "unstrung",
  "stuck",
  "unstuck",
  "stung",
  "stunk",
  "sublet",
  "sunburnt",
  "sung",
  "outsung",
  "sunk",
  "sweat",
  "swept",
  "swollen",
  "sworn",
  "outsworn",
  "swum",
  "outswum",
  "swung",
  "taken",
  "undertaken",
  "mistaken",
  "retaken",
  "overtaken",
  "taught",
  "mistaught",
  "retaught",
  "telecast",
  "test-driven",
  "test-flown",
  "thought",
  "outthought",
  "rethought",
  "overthought",
  "thrown",
  "outthrown",
  "overthrown",
  "thrust",
  "told",
  "retold",
  "torn",
  "retorn",
  "trod",
  "trodden",
  "typecast",
  "typeset",
  "upheld",
  "upset",
  "waylaid",
  "wept",
  "wet",
  "rewet",
  "withdrawn",
  "withheld",
  "withstood",
  "woken",
  "won",
  "rewon",
  "worn",
  "reworn",
  "wound",
  "rewound",
  "overwound",
  "unwound",
  "woven",
  "rewoven",
  "unwoven",
  "written",
  "typewritten",
  "underwritten",
  "outwritten",
  "miswritten",
  "rewritten",
  "overwritten",
  "wrung"
];
var ch = {};
Object.defineProperty(ch, "__esModule", {
  value: !0
});
ch.regularParticiplesRegex = void 0;
ch.regularParticiplesRegex = /\w+ed($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig;
Object.defineProperty(uh, "__esModule", {
  value: !0
});
uh.isFollowedByParticiple = tOa;
uh.isParticiple = dM;
var qC = K, J2a = aOa(Zc), eOa = ch;
function aOa(e) {
  return e && e.__esModule ? e : { default: e };
}
function dM(e) {
  const a = e.match(eOa.regularParticiplesRegex);
  return !(0, qC.isNull)(a) && a[0] === e || (0, qC.includes)(J2a.default, e);
}
function tOa(e, a) {
  return (t) => {
    const n = t + a.length;
    if (n < e.length) {
      const r = e[n];
      return dM(r);
    }
    return !1;
  };
}
var Qa = {}, Ot = {};
Object.defineProperty(Ot, "__esModule", {
  value: !0
});
Ot.other = Ot.negatedFormsOfToBe = Ot.formsOfToGet = Ot.formsOfToBe = Ot.default = Ot.all = void 0;
const nOa = Ot.formsOfToBe = ["am", "is", "are", "was", "were", "been", "be", "she's", "he's", "it's", "i'm", "we're", "they're", "you're", "that's", "being"], rOa = Ot.negatedFormsOfToBe = ["isn't", "weren't", "wasn't", "aren't"], sOa = Ot.formsOfToGet = ["get", "gets", "got", "gotten", "getting"], iOa = Ot.other = ["having", "what's"], oOa = Ot.all = nOa.concat(rOa, sOa, iOa);
Ot.default = oOa;
var br = {};
Object.defineProperty(br, "__esModule", {
  value: !0
});
br.singleWords = br.multipleWords = br.default = br.allWords = void 0;
const lOa = br.singleWords = ["accordingly", "additionally", "afterward", "afterwards", "albeit", "also", "although", "altogether", "another", "basically", "because", "before", "besides", "but", "certainly", "chiefly", "comparatively", "concurrently", "consequently", "contrarily", "conversely", "correspondingly", "despite", "doubtedly", "during", "e.g.", "earlier", "emphatically", "equally", "especially", "eventually", "evidently", "explicitly", "finally", "firstly", "following", "formerly", "forthwith", "fourthly", "further", "furthermore", "generally", "hence", "henceforth", "however", "i.e.", "identically", "indeed", "initially", "instead", "last", "lastly", "later", "lest", "likewise", "markedly", "meanwhile", "moreover", "nevertheless", "nonetheless", "nor", "notwithstanding", "obviously", "occasionally", "otherwise", "overall", "particularly", "presently", "previously", "rather", "regardless", "secondly", "shortly", "significantly", "similarly", "simultaneously", "since", "so", "soon", "specifically", "still", "straightaway", "subsequently", "surely", "surprisingly", "than", "then", "thereafter", "therefore", "thereupon", "thirdly", "though", "thus", "till", "undeniably", "undoubtedly", "unless", "unlike", "unquestionably", "until", "when", "whenever", "whereas", "while", "whether", "if", "actually", "anyway", "anyways", "anyhow", "mostly", "namely", "including", "suddenly"], dOa = br.multipleWords = ["above all", "after all", "after that", "all in all", "all of a sudden", "all things considered", "analogous to", "although this may be true", "analogous to", "another key point", "as a matter of fact", "as a result", "as an illustration", "as can be seen", "as has been noted", "as I have noted", "as I have said", "as I have shown", "as long as", "as much as", "as opposed to", "as shown above", "as soon as", "as well as", "at any rate", "at first", "at last", "at least", "at length", "at the present time", "at the same time", "at this instant", "at this point", "at this time", "balanced against", "being that", "by all means", "by and large", "by comparison", "by the same token", "by the time", "compared to", "be that as it may", "coupled with", "different from", "due to", "equally important", "even if", "even more", "even so", "even though", "first thing to remember", "for example", "for fear that", "for instance", "for one thing", "for that reason", "for the most part", "for the purpose of", "for the same reason", "for this purpose", "for this reason", "from time to time", "given that", "given these points", "important to realize", "in a word", "in addition", "in another case", "in any case", "in any event", "in brief", "in case", "in conclusion", "in contrast", "in detail", "in due time", "in effect", "in either case", "either way", "in essence", "in fact", "in general", "in light of", "in like fashion", "in like manner", "in order that", "in order to", "in other words", "in particular", "in reality", "in short", "in similar fashion", "in spite of", "in sum", "in summary", "in that case", "in the event that", "in the final analysis", "in the first place", "in the fourth place", "in the hope that", "in the light of", "in the long run", "in the meantime", "in the same fashion", "in the same way", "in the second place", "in the third place", "in this case", "in this situation", "in time", "in truth", "in view of", "inasmuch as", "most compelling evidence", "most important", "must be remembered", "not only", "not to mention", "note that", "now that", "of course", "on account of", "on balance", "on condition that", "on one hand", "on the condition that", "on the contrary", "on the negative side", "on the other hand", "on the positive side", "on the whole", "on this occasion", "all at once", "once in a while", "only if", "owing to", "point often overlooked", "prior to", "provided that", "seeing that", "so as to", "so far", "so long as", "so that", "sooner or later", "such as", "summing up", "take the case of", "that is", "that is to say", "then again", "this time", "to be sure", "to begin with", "to clarify", "to conclude", "to demonstrate", "to emphasize", "to enumerate", "to explain", "to illustrate", "to list", "to point out", "to put it another way", "to put it differently", "to repeat", "to rephrase it", "to say nothing of", "to sum up", "to summarize", "to that end", "to the end that", "to this end", "together with", "under those circumstances", "until now", "up against", "up to the present time", "vis a vis", "what's more", "what is more", "while it may be true", "while this may be true", "with attention to", "with the result that", "with this in mind", "with this intention", "with this purpose in mind", "without a doubt", "without delay", "without doubt", "without reservation", "according to", "no sooner", "at most", "at the most", "from now on"], uOa = br.allWords = lOa.concat(dOa);
br.default = uOa;
var Ba = {};
Object.defineProperty(Ba, "__esModule", {
  value: !0
});
Ba.default = cOa;
function cOa(e) {
  let a = e;
  return e.forEach((t) => {
    t = t.split("-"), t.length > 0 && t.filter((n) => !e.includes(n)).length > 0 && (a = a.concat(t));
  }), a;
}
Object.defineProperty(Qa, "__esModule", {
  value: !0
});
Qa.nonNouns = Qa.filteredAtEnding = Qa.filteredAtBeginningAndEnding = Qa.filteredAnywhere = Qa.default = Qa.cannotDirectlyPrecedePassiveParticiple = Qa.cannotBeBetweenPassiveAuxiliaryAndParticiple = Qa.all = void 0;
var W1 = Ot, U1 = br, ul = pOa(Ba);
function pOa(e) {
  return e && e.__esModule ? e : { default: e };
}
const ph = ["the", "an", "a"], H1 = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen", "twenty", "hundred", "hundreds", "thousand", "thousands", "million", "millions", "billion", "billions"], gh = ["first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth", "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth", "twentieth"], G1 = ["i", "you", "he", "she", "it", "we", "they"], V1 = ["me", "him", "us", "them"], mh = ["this", "that", "these", "those"], fh = ["my", "your", "his", "her", "its", "their", "our", "mine", "yours", "hers", "theirs", "ours"], hh = ["all", "some", "many", "lot", "lots", "ton", "tons", "bit", "no", "every", "enough", "little", "much", "more", "most", "plenty", "several", "few", "fewer", "kind", "kinds"], K1 = ["myself", "yourself", "himself", "herself", "itself", "oneself", "ourselves", "yourselves", "themselves"], Y1 = ["none", "nobody", "everyone", "everybody", "someone", "somebody", "anyone", "anybody", "nothing", "everything", "something", "anything", "each", "other", "whatever", "whichever", "whoever", "whomever", "whomsoever", "whosoever", "others", "neither", "both", "either", "any", "such"], uM = ["one's", "nobody's", "everyone's", "everybody's", "someone's", "somebody's", "anyone's", "anybody's", "nothing's", "everything's", "something's", "anything's", "whoever's", "others'", "other's", "another's", "neither's", "either's"], Q1 = ["which", "what", "whose"], X1 = ["who", "whom"], Z1 = ["where", "how", "why", "whether", "wherever", "whyever", "wheresoever", "whensoever", "howsoever", "whysoever", "whatsoever", "whereso", "whomso", "whenso", "howso", "whyso", "whoso", "whatso"], J1 = ["therefor", "therein", "hereby", "hereto", "wherein", "therewith", "herewith", "wherewith", "thereby"], eE = ["there", "here", "whither", "thither", "hither", "whence", "thence"], aE = ["always", "once", "twice", "thrice"], yh = ["can", "cannot", "can't", "could", "couldn't", "could've", "dare", "dares", "dared", "do", "don't", "does", "doesn't", "did", "didn't", "done", "have", "haven't", "had", "hadn't", "has", "hasn't", "i've", "you've", "we've", "they've", "i'd", "you'd", "he'd", "she'd", "it'd", "we'd", "they'd", "would", "wouldn't", "would've", "may", "might", "must", "need", "needn't", "needs", "ought", "shall", "shalln't", "shan't", "should", "shouldn't", "will", "won't", "i'll", "you'll", "he'll", "she'll", "it'll", "we'll", "they'll", "there's", "there're", "there'll", "here's", "here're", "there'll"], zh = ["appear", "appears", "appeared", "become", "becomes", "became", "come", "comes", "came", "keep", "keeps", "kept", "remain", "remains", "remained", "stay", "stays", "stayed", "turn", "turns", "turned"], bh = ["doing", "daring", "having", "appearing", "becoming", "coming", "keeping", "remaining", "staying", "saying", "asking", "stating", "seeming", "letting", "making", "setting", "showing", "putting", "adding", "going", "using", "trying", "containing"], wh = ["in", "from", "with", "under", "throughout", "atop", "for", "on", "of", "to", "aboard", "about", "above", "abreast", "absent", "across", "adjacent", "after", "against", "along", "alongside", "amid", "mid", "among", "apropos", "apud", "around", "as", "astride", "at", "ontop", "afore", "tofore", "behind", "ahind", "below", "ablow", "beneath", "neath", "beside", "between", "atween", "beyond", "ayond", "by", "chez", "circa", "spite", "down", "except", "into", "less", "like", "minus", "near", "nearer", "nearest", "anear", "notwithstanding", "off", "onto", "opposite", "out", "outen", "over", "past", "per", "pre", "qua", "sans", "sithence", "through", "thru", "truout", "toward", "underneath", "up", "upon", "upside", "versus", "via", "vis-à-vis", "without", "ago", "apart", "aside", "aslant", "away", "withal", "towards", "amidst", "amongst", "midst", "whilst"], tE = ["back", "within", "forward", "backward", "ahead"], nE = ["and", "or", "and/or", "yet"], rE = ["sooner", "just", "only"], sE = ["if", "even"], vh = ["say", "says", "said", "claimed", "ask", "asks", "asked", "stated", "explain", "explains", "explained", "think", "thinks", "talks", "talked", "announces", "announced", "tells", "told", "discusses", "discussed", "suggests", "suggested", "understands", "understood"], cM = ["again", "definitely", "eternally", "expressively", "instead", "expressly", "immediately", "including", "instantly", "namely", "naturally", "next", "notably", "now", "nowadays", "ordinarily", "positively", "truly", "ultimately", "uniquely", "usually", "almost", "maybe", "probably", "granted", "initially", "too", "actually", "already", "e.g", "i.e", "often", "regularly", "simply", "optionally", "perhaps", "sometimes", "likely", "never", "ever", "else", "inasmuch", "provided", "currently", "incidentally", "elsewhere", "particular", "recently", "relatively", "f.i", "clearly", "apparently"], iE = ["highly", "very", "really", "extremely", "absolutely", "completely", "totally", "utterly", "quite", "somewhat", "seriously", "fairly", "fully", "amazingly"], kh = ["seem", "seems", "seemed", "let", "let's", "lets", "make", "makes", "made", "want", "showed", "shown", "go", "goes", "went", "gone", "take", "takes", "took", "taken", "put", "puts", "use", "used", "try", "tries", "tried", "mean", "means", "meant", "called", "based", "add", "adds", "added", "contain", "contains", "contained", "consist", "consists", "consisted", "ensure", "ensures", "ensured"], oE = ["new", "newer", "newest", "old", "older", "oldest", "previous", "good", "well", "better", "best", "big", "bigger", "biggest", "easy", "easier", "easiest", "fast", "faster", "fastest", "far", "hard", "harder", "hardest", "least", "own", "large", "larger", "largest", "long", "longer", "longest", "low", "lower", "lowest", "high", "higher", "highest", "regular", "simple", "simpler", "simplest", "small", "smaller", "smallest", "tiny", "tinier", "tiniest", "short", "shorter", "shortest", "main", "actual", "nice", "nicer", "nicest", "real", "same", "able", "certain", "usual", "so-called", "mainly", "mostly", "recent", "anymore", "complete", "lately", "possible", "commonly", "constantly", "continually", "directly", "easily", "nearly", "slightly", "somewhere", "estimated", "latest", "different", "similar", "widely", "bad", "worse", "worst", "great", "specific", "available", "average", "awful", "awesome", "basic", "beautiful", "busy", "current", "entire", "everywhere", "important", "major", "multiple", "normal", "necessary", "obvious", "partly", "special", "last", "early", "earlier", "earliest", "young", "younger", "youngest"], lE = ["oh", "wow", "tut-tut", "tsk-tsk", "ugh", "whew", "phew", "yeah", "yea", "shh", "oops", "ouch", "aha", "yikes"], dE = ["tbs", "tbsp", "spk", "lb", "qt", "pk", "bu", "oz", "pt", "mod", "doz", "hr", "f.g", "ml", "dl", "cl", "l", "mg", "g", "kg", "quart"], pM = ["seconds", "minute", "minutes", "hour", "hours", "day", "days", "week", "weeks", "month", "months", "year", "years", "today", "tomorrow", "yesterday"], gM = ["thing", "things", "way", "ways", "matter", "case", "likelihood", "ones", "piece", "pieces", "stuff", "times", "part", "parts", "percent", "instance", "instances", "aspect", "aspects", "item", "items", "idea", "theme", "person", "instance", "instances", "detail", "details", "factor", "factors", "difference", "differences"], uE = ["not", "yes", "sure", "top", "bottom", "ok", "okay", "amen", "aka", "etc", "etcetera", "sorry", "please"], gOa = ["ms", "mss", "mrs", "mr", "dr", "prof"], mM = ["jr", "sr"], mOa = Qa.filteredAtEnding = (0, ul.default)([].concat(gh, bh, oE)), fOa = Qa.filteredAtBeginningAndEnding = (0, ul.default)([].concat(ph, wh, nE, mh, iE, hh, fh)), hOa = Qa.filteredAnywhere = (0, ul.default)([].concat(U1.singleWords, aE, G1, V1, K1, lE, H1, W1.all, yh, zh, vh, kh, Y1, rE, sE, Q1, X1, Z1, eE, uE, tE, J1, dE, pM, gM)), yOa = Qa.cannotDirectlyPrecedePassiveParticiple = (0, ul.default)([].concat(ph, wh, mh, fh, gh, bh, hh)), zOa = Qa.cannotBeBetweenPassiveAuxiliaryAndParticiple = (0, ul.default)([].concat(yh, zh, vh, kh));
Qa.nonNouns = (0, ul.default)([].concat(ph, H1, gh, mh, fh, K1, G1, V1, hh, Y1, bh, uM, Q1, X1, Z1, J1, eE, aE, tE, W1.all, yh, zh, wh, nE, rE, sE, vh, U1.singleWords, cM, iE, kh, lE, oE, dE, uE, mM));
const bOa = Qa.all = (0, ul.default)([].concat(ph, H1, gh, mh, fh, K1, G1, V1, hh, Y1, bh, uM, Q1, X1, Z1, J1, eE, aE, tE, W1.all, yh, zh, wh, nE, rE, sE, vh, U1.singleWords, cM, iE, kh, lE, oE, dE, gM, uE, pM, gOa, mM));
Qa.default = {
  filteredAtEnding: mOa,
  filteredAtBeginningAndEnding: fOa,
  filteredAnywhere: hOa,
  cannotDirectlyPrecedePassiveParticiple: yOa,
  cannotBeBetweenPassiveAuxiliaryAndParticiple: zOa,
  all: bOa
};
Object.defineProperty(dl, "__esModule", {
  value: !0
});
dl.default = AOa;
var FC = ro, wOa = uh, vOa = Qa, kOa = Pt, _Oa = eo();
const EOa = kOa.punctuationList.filter((e) => (0, _Oa.getWords)(e, "\\s", !1).length > 0);
function AOa(e, a) {
  return (t) => (0, FC.isFollowedByException)(e, a, vOa.nonNouns)(t) || (0, wOa.isFollowedByParticiple)(e, a)(t) || (0, FC.isFollowedByException)(e, a, EOa)(t);
}
var wn = {};
Object.defineProperty(wn, "__esModule", {
  value: !0
});
wn.isPreceded = TOa;
wn.nonInclusiveWhenStandalone = void 0;
wn.notFollowed = jOa;
wn.notPreceded = $Oa;
wn.notPrecededAndNotFollowed = xOa;
wn.nonInclusiveWhenStandalone = "Targeted when followed by a participle, a function word (other than a noun), or punctuation.";
function TOa(e) {
  return "Targeted when preceded by '" + e.join("', '") + "'.";
}
function $Oa(e) {
  return "Targeted unless preceded by '" + e.join("', '") + "'.";
}
function jOa(e) {
  return "Targeted unless followed by '" + e.join("', '") + "'.";
}
function xOa(e, a) {
  return "Targeted unless preceded by '" + e.join("', '") + "' and/or followed by '" + a.join("', '") + "'.";
}
Object.defineProperty(lh, "__esModule", {
  value: !0
});
lh.default = void 0;
var Ii = aa, Vl = dh, SOa = ll, OOa = ro, BC = js, Ci = Wr, IOa = COa(dl), WC = wn;
function COa(e) {
  return e && e.__esModule ? e : { default: e };
}
const fM = [{
  identifier: "seniorCitizen",
  nonInclusivePhrases: ["senior citizen"],
  inclusiveAlternatives: ["<i>older person, older citizen</i>", "<i>person older than 70</i>"],
  score: Ci.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [Ii.orangeUnlessSomeoneWants, Vl.specificAgeGroup].join(" ")
}, {
  identifier: "seniorCitizens",
  nonInclusivePhrases: ["senior citizens"],
  inclusiveAlternatives: ["<i>older people, older citizens</i>", "<i>people older than 70</i>"],
  score: Ci.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [Ii.orangeUnlessSomeoneWants, Vl.specificAgeGroup].join(" ")
}, {
  identifier: "agingDependants",
  nonInclusivePhrases: ["aging dependants"],
  inclusiveAlternatives: ["<i>older people</i>", "<i>people older than 70</i>"],
  score: Ci.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [Ii.orangeUnlessSomeoneWants, Vl.specificAgeGroup].join(" ")
}, {
  identifier: "elderly",
  nonInclusivePhrases: ["elderly"],
  inclusiveAlternatives: ["<i>older people</i>", "<i>people older than 70</i>"],
  score: Ci.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [Ii.orangeUnlessSomeoneWants, Vl.specificAgeGroup].join(" ")
}, {
  identifier: "senile",
  nonInclusivePhrases: ["senile"],
  inclusiveAlternatives: "a specific characteristic or experience if it is known (e.g. <i>has Alzheimer's</i>)",
  score: Ci.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ii.redHarmful
}, {
  identifier: "senility",
  nonInclusivePhrases: ["senility"],
  inclusiveAlternatives: "<i>dementia</i>",
  score: Ci.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ii.redHarmful
}, {
  identifier: "seniors",
  nonInclusivePhrases: ["seniors"],
  inclusiveAlternatives: ["<i>older people</i>", "<i>people older than 70</i>"],
  score: Ci.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [Ii.orangeUnlessSomeoneWants, Vl.specificAgeGroup].join(" "),
  rule: (e, a) => (0, BC.includesConsecutiveWords)(e, a).filter((0, SOa.isNotPrecededByException)(e, ["high school", "college", "graduating", "juniors and"])).filter((0, OOa.isNotFollowedByException)(e, a, ["in high school", "in college", "who are graduating"])),
  ruleDescription: (0, WC.notPrecededAndNotFollowed)(["high school", "college", "graduating", "juniors and"], ["in high school", "in college", "who are graduating"])
}, {
  identifier: "theAged",
  nonInclusivePhrases: ["the aged"],
  inclusiveAlternatives: ["<i>older people</i>", "<i>people older than 70</i>"],
  score: Ci.SCORES.NON_INCLUSIVE,
  feedbackFormat: [Ii.redHarmful, Vl.specificAgeGroup].join(" "),
  rule: (e, a) => (0, BC.includesConsecutiveWords)(e, a).filter((0, IOa.default)(e, a)),
  ruleDescription: WC.nonInclusiveWhenStandalone
}];
fM.forEach((e) => {
  e.category = "age", e.learnMoreUrl = "https://yoa.st/inclusive-language-age";
});
lh.default = fM;
var _h = {};
Object.defineProperty(_h, "__esModule", {
  value: !0
});
_h.default = void 0;
var yr = aa, Hs = Wr, POa = js, ROa = NOa(dl), DOa = wn;
function NOa(e) {
  return e && e.__esModule ? e : { default: e };
}
const hM = [{
  identifier: "albinos",
  nonInclusivePhrases: ["albinos"],
  inclusiveAlternatives: "<i>people with albinism, albino people</i>",
  score: Hs.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: yr.orangeUnlessSomeoneWants
}, {
  identifier: "anAlbino",
  nonInclusivePhrases: ["an albino"],
  inclusiveAlternatives: "<i>person with albinism, albino person</i>",
  score: Hs.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: yr.orangeUnlessSomeoneWants,
  rule: (e, a) => (0, POa.includesConsecutiveWords)(e, a).filter((0, ROa.default)(e, a)),
  ruleDescription: DOa.nonInclusiveWhenStandalone
}, {
  identifier: "obese",
  nonInclusivePhrases: ["obese", "overweight"],
  inclusiveAlternatives: "<i>has a higher weight, higher-weight person, person in higher weight body, heavier person</i>",
  score: Hs.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [yr.orangeUnlessSomeoneWants, yr.preferredDescriptorIfKnown].join(" ")
}, {
  identifier: "obesitySingular",
  nonInclusivePhrases: ["person with obesity", "fat person"],
  inclusiveAlternatives: "<i>person who has a higher weight, higher-weight person, person in higher weight body, heavier person</i>",
  score: Hs.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [yr.orangeUnlessSomeoneWants, yr.preferredDescriptorIfKnown].join(" ")
}, {
  identifier: "obesityPlural",
  nonInclusivePhrases: ["people with obesity", "fat people"],
  inclusiveAlternatives: "<i>people who have a higher weight, higher-weight people, people in higher weight bodies, heavier people</i>",
  score: Hs.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [yr.orangeUnlessSomeoneWants].join(" ")
}, {
  identifier: "verticallyChallenged",
  nonInclusivePhrases: ["vertically challenged"],
  inclusiveAlternatives: "<i>little person, has short stature, someone with dwarfism</i>",
  score: Hs.SCORES.NON_INCLUSIVE,
  feedbackFormat: yr.redHarmful
}, {
  identifier: "midget",
  nonInclusivePhrases: ["midget"],
  inclusiveAlternatives: "<i>little person, has short stature, someone with dwarfism</i>",
  score: Hs.SCORES.NON_INCLUSIVE,
  feedbackFormat: yr.redHarmful
}, {
  identifier: "midgets",
  nonInclusivePhrases: ["midgets"],
  inclusiveAlternatives: "<i>little people, have short stature, people with dwarfism</i>",
  score: Hs.SCORES.NON_INCLUSIVE,
  feedbackFormat: yr.redHarmful
}, {
  identifier: "harelip",
  nonInclusivePhrases: ["harelip"],
  inclusiveAlternatives: "<i>cleft lip, cleft palate</i>",
  score: Hs.SCORES.NON_INCLUSIVE,
  feedbackFormat: yr.redHarmful
}];
hM.forEach((e) => {
  e.category = "appearance", e.learnMoreUrl = "https://yoa.st/inclusive-language-appearance";
});
_h.default = hM;
var Eh = {}, Ah = {};
Object.defineProperty(Ah, "__esModule", {
  value: !0
});
Ah.orangeUnlessMedicalCondition = void 0;
var LOa = aa;
Ah.orangeUnlessMedicalCondition = LOa.beCarefulHarmful + " Unless you are referencing the specific medical condition, consider using another alternative to describe the trait or behavior, such as %2$s.";
var Th = {};
Object.defineProperty(Th, "__esModule", {
  value: !0
});
Th.isFollowedAndPrecededByException = yM;
Th.isNotFollowedAndPrecededByException = FOa;
var MOa = ro, qOa = ll;
function yM(e, a, t, n) {
  return (r) => (0, MOa.isFollowedByException)(e, a, n)(r) && (0, qOa.isPrecededByException)(e, t)(r);
}
function FOa(e, a, t, n) {
  return (r) => !yM(e, a, t, n)(r);
}
var Ca = {};
Object.defineProperty(Ca, "__esModule", {
  value: !0
});
Ca.shouldPrecedeNutsBananasWithIntensifier = Ca.shouldNotPrecedeStandaloneCrazyWhenFollowedByAbout = Ca.shouldNotPrecedeStandaloneCrazy = Ca.shouldNotFollowStandaloneCrazyWhenPrecededByToBe = Ca.shouldNotFollowStandaloneCrazy = Ca.formsOfToGo = Ca.formsOfToBeWithOptionalIntensifier = Ca.formsOfToBeNotWithOptionalIntensifier = Ca.formsOfToBeAndToBeNotWithOptionalIntensifier = Ca.default = Ca.combinationsOfDriveAndObjectPronoun = void 0;
var r0 = Ot, s0 = K;
const cE = ["so", "very", "a bit", "really", "pretty", "kind of", "that", "too", "totally", "completely", "absolutely", "even", "also", "as"], BOa = ["driving", "drive", "drove", "drives", "driven"], WOa = ["me", "you", "them", "him", "her", "someone", "somebody", "anyone", "anybody", "everyone", "everybody"], pE = r0.formsOfToBe.concat(r0.formsOfToGet), $h = function(e, a) {
  return (0, s0.flatMap)(e, (t) => (0, s0.flatMap)(a, (n) => `${t} ${n}`));
}, UOa = $h(pE, cE), gE = Ca.formsOfToBeWithOptionalIntensifier = UOa.concat(pE);
let Rm = (0, s0.flatMap)(pE, (e) => `${e} not`);
Rm = Rm.concat(r0.negatedFormsOfToBe);
const HOa = $h(Rm, cE), mE = Ca.formsOfToBeNotWithOptionalIntensifier = HOa.concat(Rm), GOa = Ca.formsOfToBeAndToBeNotWithOptionalIntensifier = gE.concat(mE), zM = Ca.combinationsOfDriveAndObjectPronoun = $h(BOa, WOa), bM = Ca.formsOfToGo = ["go", "goes", "going", "gone", "went"], VOa = Ca.shouldNotPrecedeStandaloneCrazy = zM.concat(bM), KOa = Ca.shouldNotFollowStandaloneCrazy = ["in love"], YOa = Ca.shouldNotPrecedeStandaloneCrazyWhenFollowedByAbout = gE.concat(mE), QOa = Ca.shouldNotFollowStandaloneCrazyWhenPrecededByToBe = ["about"], UC = ["is", "she's", "he's"], XOa = Ca.shouldPrecedeNutsBananasWithIntensifier = $h(UC, cE).concat(UC);
Ca.default = {
  formsOfToBeWithOptionalIntensifier: gE,
  formsOfToBeNotWithOptionalIntensifier: mE,
  formsOfToBeAndToBeNotWithOptionalIntensifier: GOa,
  combinationsOfDriveAndObjectPronoun: zM,
  formsOfToGo: bM,
  shouldNotPrecedeStandaloneCrazy: VOa,
  shouldNotFollowStandaloneCrazy: KOa,
  shouldNotPrecedeStandaloneCrazyWhenFollowedByAbout: YOa,
  shouldNotFollowStandaloneCrazyWhenPrecededByToBe: QOa,
  shouldPrecedeNutsBananasWithIntensifier: XOa
};
Object.defineProperty(Eh, "__esModule", {
  value: !0
});
Eh.default = void 0;
var ge = aa, Xg = Ah, Ga = ll, ot = ro, Zg = Th, He = js, ce = Wr, HC = JOa(dl), ra = Ca, ZOa = sa, Ia = wn;
function JOa(e) {
  return e && e.__esModule ? e : { default: e };
}
const wM = [{
  identifier: "binge",
  nonInclusivePhrases: ["binge"],
  inclusiveAlternatives: "<i>indulge, satiate, wallow, spree, marathon, consume excessively</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i>, unless talking about a symptom of a medical condition. If you are not referencing a symptom, consider other alternatives to describe the trait or behavior, such as %2$s.",
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["drink", "drinks", "drinking", "eating disorder", "and purge", "behavior", "behaviors", "behaviour", "behaviours"])),
  ruleDescription: (0, Ia.notFollowed)(["drink", "drinks", "drinking", "eating disorder", "and purge", "behavior", "behaviors", "behaviour", "behaviours"])
}, {
  identifier: "bingeing",
  nonInclusivePhrases: ["bingeing", "binging"],
  inclusiveAlternatives: "<i>indulging, satiating, wallowing, spreeing, marathoning, consuming excessively</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i>, unless talking about a symptom of a medical condition. If you are not referencing a symptom, consider other alternatives to describe the trait or behavior, such as %2$s.",
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["and purging", "behavior", "behaviors", "behaviour", "behaviours"])),
  ruleDescription: (0, Ia.notFollowed)(["and purging", "behavior", "behaviors", "behaviour", "behaviours"])
}, {
  identifier: "binged",
  nonInclusivePhrases: ["binged"],
  inclusiveAlternatives: "<i>indulged, satiated, wallowed, spreed, marathoned, consumed excessively</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i>, unless talking about a symptom of a medical condition. If you are not referencing a symptom, consider other alternatives to describe the trait or behavior, such as %2$s.",
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["and purged"])),
  ruleDescription: (0, Ia.notFollowed)(["and purged"])
}, {
  identifier: "binges",
  nonInclusivePhrases: ["binges"],
  inclusiveAlternatives: "<i>indulges, satiates, wallows, sprees, marathons, consumes excessively</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i>, unless talking about a symptom of a medical condition. If you are not referencing a symptom, consider other alternatives to describe the trait or behavior, such as %2$s.",
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["and purges"])),
  ruleDescription: (0, Ia.notFollowed)(["and purges"])
}, {
  identifier: "wheelchairBound",
  nonInclusivePhrases: ["wheelchair-bound", "wheelchair bound", "confined to a wheelchair"],
  inclusiveAlternatives: "<i>uses a wheelchair, is a wheelchair user</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "mentallyRetarded",
  nonInclusivePhrases: ["mentally retarded"],
  inclusiveAlternatives: "<i>person with an intellectual disability</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "retarded",
  nonInclusivePhrases: ["retarded"],
  inclusiveAlternatives: "<i>uninformed, ignorant, foolish, irrational, insensible</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: [ge.avoidDerogatory, ge.alternative].join(" "),
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isNotPrecededByException)(e, ["mentally"])),
  ruleDescription: (0, Ia.notPreceded)(["mentally"])
}, {
  identifier: "alcoholic",
  nonInclusivePhrases: ["an alcoholic"],
  inclusiveAlternatives: "<i>person with alcohol use disorder</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ge.orangeUnlessSomeoneWants,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["drink", "beverage"])),
  ruleDescription: (0, Ia.notFollowed)(["drink", "beverage"])
}, {
  identifier: "alcoholics",
  nonInclusivePhrases: ["alcoholics"],
  inclusiveAlternatives: "<i>people with alcohol use disorder</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ge.orangeUnlessSomeoneWants,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["anonymous"])),
  ruleDescription: (0, Ia.notFollowed)(["anonymous"])
}, {
  identifier: "cripple",
  nonInclusivePhrases: ["a cripple"],
  inclusiveAlternatives: "<i>person with a physical disability, a physically disabled person</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: [ge.avoidDerogatory, ge.alternative].join(" ")
}, {
  identifier: "crippled",
  nonInclusivePhrases: ["crippled"],
  inclusiveAlternatives: "<i>has a physical disability, is physically disabled</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "daft",
  nonInclusivePhrases: ["daft"],
  inclusiveAlternatives: "<i>uninformed, ignorant, foolish, inconsiderate, irrational, reckless</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "handicapped",
  nonInclusivePhrases: ["handicapped"],
  inclusiveAlternatives: "<i>disabled, person with a disability</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "handicap",
  nonInclusivePhrases: ["handicap"],
  inclusiveAlternatives: "<i>disability</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["toilet", "toilets", "parking", "bathroom", "bathrooms", "stall", "stalls"])),
  ruleDescription: (0, Ia.notFollowed)(["toilet", "toilets", "parking", "bathroom", "bathrooms", "stall", "stalls"])
}, {
  identifier: "insane",
  nonInclusivePhrases: ["insane"],
  inclusiveAlternatives: "<i>wild, confusing, unpredictable, impulsive, reckless, out of control, unbelievable, amazing, incomprehensible, nonsensical, outrageous, ridiculous</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isNotPrecededByException)(e, ra.shouldNotPrecedeStandaloneCrazy)).filter((0, Zg.isNotFollowedAndPrecededByException)(e, a, ra.shouldNotPrecedeStandaloneCrazyWhenFollowedByAbout, ra.shouldNotFollowStandaloneCrazyWhenPrecededByToBe)),
  ruleDescription: "Not targeted with this feedback when part of a more specific phrase that we target ('to drive insane', 'to go insane')."
}, {
  identifier: "insanely",
  nonInclusivePhrases: ["insanely"],
  inclusiveAlternatives: "<i>extremely, amazingly, wildly, ferociously, ridiculously, unbelievably</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "imbecile",
  nonInclusivePhrases: ["imbecile"],
  inclusiveAlternatives: "<i>uninformed, ignorant, foolish, inconsiderate, irrational, reckless</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: [ge.avoidDerogatory, ge.alternative].join(" ")
}, {
  identifier: "specialNeeds",
  nonInclusivePhrases: ["special needs"],
  inclusiveAlternatives: ["<i>functional needs, support needs</i>", "<i>disabled, person with a disability</i>"],
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: [ge.avoidHarmful, "Consider using an alternative, such as %2$s when referring to someone's needs, or %3$s when referring to a person."].join(" ")
}, {
  identifier: "hardOfHearing",
  nonInclusivePhrases: ["hard-of-hearing"],
  inclusiveAlternatives: "<i>hard of hearing, partially deaf, has partial hearing loss</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "hearingImpaired",
  nonInclusivePhrases: ["hearing impaired"],
  inclusiveAlternatives: "<i>deaf or hard of hearing, partially deaf, has partial hearing loss</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "functioning",
  nonInclusivePhrases: ["high functioning", "low functioning"],
  inclusiveAlternatives: "describing the specific characteristic or experience",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i> as it is potentially harmful. Consider using an alternative, such as %2$s, unless referring to how you characterize your own condition.",
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["autism"])),
  ruleDescription: (0, Ia.notFollowed)(["autism"])
}, {
  identifier: "autismHigh",
  nonInclusivePhrases: ["high functioning autism", "high-functioning autism"],
  inclusiveAlternatives: "<i>autism with high support needs</i> or describing the specific characteristic or experience",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: "Avoid using <i>%1$s</i> as it is potentially harmful. Consider using an alternative, such as %2$s, unless referring to how you characterize your own condition."
}, {
  identifier: "autismLow",
  nonInclusivePhrases: ["low functioning autism", "low-functioning autism"],
  inclusiveAlternatives: "<i>autism with low support needs</i> or describing the specific characteristic or experience",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: "Avoid using <i>%1$s</i> as it is potentially harmful. Consider using an alternative, such as %2$s, unless referring to how you characterize your own condition."
}, {
  identifier: "birthDefect",
  nonInclusivePhrases: ["birth defect"],
  inclusiveAlternatives: "<i>congenital disability, born with a disability, disability since birth</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i> to describe someone's specific condition. Consider using an alternative, such as %2$s, unless referring to how you characterize your own condition."
}, {
  identifier: "lame",
  nonInclusivePhrases: ["lame"],
  inclusiveAlternatives: ["<i>boring, lousy, unimpressive, sad, corny</i>", "<i>person with a disability, person who has difficulty with walking</i>"],
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i> as it is potentially harmful. Unless you are using it as a noun to refer to an object (such as the kitchen tool), consider using an alternative. For example, %2$s. If referring to someone's disability, use an alternative such as %3$s."
}, {
  identifier: "lamer",
  nonInclusivePhrases: ["lamer"],
  inclusiveAlternatives: "<i>more boring, lousier, more unimpressive, sadder, cornier</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "lamest",
  nonInclusivePhrases: ["lamest"],
  inclusiveAlternatives: "<i>most boring, lousiest, most unimpressive, saddest, corniest</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "commitSuicide",
  nonInclusivePhrases: ["commit suicide"],
  inclusiveAlternatives: "<i>take one's life, die by suicide, kill oneself</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "committingSuicide",
  nonInclusivePhrases: ["committing suicide"],
  inclusiveAlternatives: "<i>taking one's life, dying by suicide, killing oneself</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "commitsSuicide",
  nonInclusivePhrases: ["commits suicide"],
  inclusiveAlternatives: "<i>takes one's life, dies by suicide, kills oneself</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "committedSuicide",
  nonInclusivePhrases: ["committed suicide"],
  inclusiveAlternatives: "<i>took one's life, died by suicide, killed themself</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "handicapParking",
  nonInclusivePhrases: ["handicap parking"],
  inclusiveAlternatives: "<i>accessible parking</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "fellOnDeafEars",
  nonInclusivePhrases: ["fell on deaf ears"],
  inclusiveAlternatives: "<i>was not addressed, was ignored, was disregarded</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "turnOnBlindEye",
  nonInclusivePhrases: ["turn a blind eye"],
  inclusiveAlternatives: "<i>ignore, pretend not to notice</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "blindLeadingBlind",
  nonInclusivePhrases: ["the blind leading the blind"],
  inclusiveAlternatives: "<i>ignorant, misguided, incompetent, unqualified, insensitive, unaware</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "handicapBathroom",
  nonInclusivePhrases: ["handicap bathroom", "handicap bathrooms"],
  inclusiveAlternatives: "<i>accessible bathroom(s)</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "handicapToilet",
  nonInclusivePhrases: ["handicap toilet", "handicap toilets"],
  inclusiveAlternatives: "<i>accessible toilet(s)</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "handicapStall",
  nonInclusivePhrases: ["handicap stall", "handicap stalls"],
  inclusiveAlternatives: "<i>accessible stall(s)</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "stupid",
  nonInclusivePhrases: ["stupid"],
  inclusiveAlternatives: ["<i>uninformed, ignorant, foolish, inconsiderate, irrational, reckless</i>"],
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "dumbDown",
  nonInclusivePhrases: ["dumb down"],
  inclusiveAlternatives: "<i>oversimplify</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "dumbingDown",
  nonInclusivePhrases: ["dumbing down"],
  inclusiveAlternatives: "<i>oversimplifying</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "dumbedDown",
  nonInclusivePhrases: ["dumbed down"],
  inclusiveAlternatives: "<i>oversimplified</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "dumbItDown",
  nonInclusivePhrases: ["dumb it down"],
  inclusiveAlternatives: "<i>oversimplify it</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "dumbingItDown",
  nonInclusivePhrases: ["dumbing it down"],
  inclusiveAlternatives: "<i>oversimplifying it</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "dumbedItDown",
  nonInclusivePhrases: ["dumbed it down"],
  inclusiveAlternatives: "<i>oversimplified it</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "dumb",
  nonInclusivePhrases: ["dumb", "dumber", "dumbest"],
  inclusiveAlternatives: ["<i>uninformed, ignorant, foolish, inconsiderate, irrational, reckless</i>"],
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isNotPrecededByException)(e, ["deaf and"])).filter((0, ot.isNotFollowedByException)(e, a, ["down"])).filter((0, ot.isNotFollowedByException)(e, a, ["it down"])),
  ruleDescription: (0, Ia.notPreceded)(["deaf and"])
}, {
  identifier: "deaf",
  nonInclusivePhrases: ["deaf-mute", "deaf and dumb"],
  inclusiveAlternatives: "<i>deaf</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "addict",
  nonInclusivePhrases: ["addict"],
  inclusiveAlternatives: "<i>person with a (drug, alcohol, ...) addiction, person with substance abuse disorder</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ge.orangeUnlessSomeoneWants
}, {
  identifier: "addicts",
  nonInclusivePhrases: ["addicts"],
  inclusiveAlternatives: "<i>people with a (drug, alcohol, ...) addiction, people with substance abuse disorder</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ge.orangeUnlessSomeoneWants
}, {
  identifier: "brainDamaged",
  nonInclusivePhrases: ["brain-damaged"],
  inclusiveAlternatives: "<i>person with a (traumatic) brain injury</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ge.orangeUnlessSomeoneWants
}, {
  identifier: "differentlyAbled",
  nonInclusivePhrases: ["differently abled", "differently-abled"],
  inclusiveAlternatives: "<i>disabled, person with a disability</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ge.orangeUnlessSomeoneWants
}, {
  identifier: "epilepticFit",
  nonInclusivePhrases: ["epileptic fit"],
  inclusiveAlternatives: "<i>epileptic seizure</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "epilepticFits",
  nonInclusivePhrases: ["epileptic fits"],
  inclusiveAlternatives: "<i>epileptic seizures</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "sanityCheck",
  nonInclusivePhrases: ["sanity check"],
  inclusiveAlternatives: "<i>final check, confidence check, rationality check, soundness check</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "to not be crazy about",
  nonInclusivePhrases: ["crazy about"],
  inclusiveAlternatives: "<i>to not be impressed by, to not be enthusiastic about, to not be into, to not like</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to not be crazy about</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of "to be", the negation "not", and an optional intensifier (e.g. "is not so crazy about" ).
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToBeNotWithOptionalIntensifier)),
  ruleDescription: "Targeted when preceded by a negated form of 'to be' or 'to get' and an optional intensifier."
}, {
  identifier: "to be crazy about",
  nonInclusivePhrases: ["crazy about"],
  inclusiveAlternatives: "<i>to love, to be obsessed with, to be infatuated with</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to be crazy about</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of "to be" and an optional intensifier (e.g. "am so crazy about")
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToBeWithOptionalIntensifier)),
  ruleDescription: "Targeted when preceded by a form of 'to be' or 'to get' and an optional intensifier."
}, {
  identifier: "to be nuts about",
  nonInclusivePhrases: ["nuts about"],
  inclusiveAlternatives: "<i>to love, to be obsessed with, to be infatuated with</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to be nuts about</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of "to be" and an optional intensifier (e.g. "am so nuts about")
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToBeWithOptionalIntensifier)),
  ruleDescription: "Targeted when preceded by a form of 'to be' or 'to get' and an optional intensifier."
}, {
  identifier: "to be bananas about",
  nonInclusivePhrases: ["bananas about"],
  inclusiveAlternatives: "<i>to love, to be obsessed with, to be infatuated with</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to be bananas about</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of "to be" and an optional intensifier (e.g. "am so bananas about")
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToBeWithOptionalIntensifier)),
  ruleDescription: "Targeted when preceded by a form of 'to be' or 'to get' and an optional intensifier."
}, {
  identifier: "crazy in love",
  nonInclusivePhrases: ["crazy in love"],
  inclusiveAlternatives: "<i>wildly in love, head over heels, infatuated</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "to go crazy",
  nonInclusivePhrases: ["crazy"],
  inclusiveAlternatives: "<i>to go wild, to go out of control, to go up the wall, to be aggravated, to get confused</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to go crazy</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of "to go" (e.g. 'going crazy').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToGo)),
  ruleDescription: (0, Ia.isPreceded)(ra.formsOfToGo)
}, {
  identifier: "to go insane",
  nonInclusivePhrases: ["insane"],
  inclusiveAlternatives: "<i>to go wild, to go out of control, to go up the wall, to be aggravated, to get confused</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to go insane</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of "to go" (e.g. 'going insane').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToGo)),
  ruleDescription: (0, Ia.isPreceded)(ra.formsOfToGo)
}, {
  identifier: "to go mad",
  nonInclusivePhrases: ["mad"],
  inclusiveAlternatives: "<i>to go wild, to go out of control, to go up the wall, to be aggravated, to get confused</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to go mad</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of "to go" (e.g. 'going mad').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToGo)),
  ruleDescription: (0, Ia.isPreceded)(ra.formsOfToGo)
}, {
  identifier: "to go nuts",
  nonInclusivePhrases: ["nuts"],
  inclusiveAlternatives: "<i>to go wild, to go out of control, to go up the wall, to be aggravated, to get confused</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to go nuts</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of "to go" (e.g. 'going nuts').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToGo)),
  ruleDescription: (0, Ia.isPreceded)(ra.formsOfToGo)
}, {
  identifier: "to go bananas",
  nonInclusivePhrases: ["bananas"],
  inclusiveAlternatives: "<i>to go wild, to go out of control, to go up the wall, to be aggravated, to get confused</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to go bananas</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of "to go" (e.g. 'going bananas').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToGo)),
  ruleDescription: (0, Ia.isPreceded)(ra.formsOfToGo)
}, {
  identifier: "to drive crazy",
  nonInclusivePhrases: ["crazy"],
  inclusiveAlternatives: "<i>to drive one to their limit, to get on one's last nerve, to make one livid, to aggravate, to make one's blood boil, to exasperate, to get into one's head</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to drive crazy</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me crazy', 'drove everyone crazy').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.combinationsOfDriveAndObjectPronoun)),
  ruleDescription: "Targeted when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me')"
}, {
  identifier: "to drive insane",
  nonInclusivePhrases: ["insane"],
  inclusiveAlternatives: "<i>to drive one to their limit, to get on one's last nerve, to make one livid, to aggravate, to make one's blood boil, to exasperate, to get into one's head</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to drive insane</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me insane', 'drove everyone insane').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.combinationsOfDriveAndObjectPronoun)),
  ruleDescription: "Targeted when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me')"
}, {
  identifier: "to drive mad",
  nonInclusivePhrases: ["mad"],
  inclusiveAlternatives: "<i>to drive one to their limit, to get on one's last nerve, to make one livid, to aggravate, to make one's blood boil, to exasperate, to get into one's head</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to drive mad</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me mad', 'drove everyone mad').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.combinationsOfDriveAndObjectPronoun)),
  ruleDescription: "Targeted when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me')"
}, {
  identifier: "to drive nuts",
  nonInclusivePhrases: ["nuts"],
  inclusiveAlternatives: "<i>to drive one to their limit, to get on one's last nerve, to make one livid, to aggravate, to make one's blood boil, to exasperate, to get into one's head</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to drive nuts</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me nuts', 'drove everyone nuts').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.combinationsOfDriveAndObjectPronoun)),
  ruleDescription: "Targeted when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me')"
}, {
  identifier: "to drive bananas",
  nonInclusivePhrases: ["bananas"],
  inclusiveAlternatives: "<i>to drive one to their limit, to get on one's last nerve, to make one livid, to aggravate, to make one's blood boil, to exasperate, to get into one's head</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ["Avoid using <i>to drive bananas</i> as it is potentially harmful.", ge.alternative].join(" "),
  // Target only when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me bananas', 'drove everyone bananas').
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.combinationsOfDriveAndObjectPronoun)),
  ruleDescription: "Targeted when preceded by a form of 'to drive' and an object pronoun (e.g. 'driving me')"
}, {
  identifier: "nuts",
  nonInclusivePhrases: ["nuts"],
  inclusiveAlternatives: "<i>wild, baffling, out of control, inexplicable, unbelievable, aggravating, shocking, intense, impulsive, chaotic, confused, mistaken, obsessed</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful,
  // Only target 'nuts' and 'bananas' when preceded by is/he's/she's and an optional intensifier. Don't target when it's part of the phrase 'to be nuts/bananas about...'
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.shouldPrecedeNutsBananasWithIntensifier)).filter((0, Zg.isNotFollowedAndPrecededByException)(e, a, ra.shouldNotPrecedeStandaloneCrazyWhenFollowedByAbout, ra.shouldNotFollowStandaloneCrazyWhenPrecededByToBe)),
  ruleDescription: "Targeted when preceded by is/he's/she's and an optional intensifier and when it's not part of a more specific phrase that we target ('to go nuts', 'to drive nuts', 'to be nuts about')."
}, {
  identifier: "bananas",
  nonInclusivePhrases: ["bananas"],
  inclusiveAlternatives: "<i>wild, baffling, out of control, inexplicable, unbelievable, aggravating, shocking, intense, impulsive, chaotic, confused, mistaken, obsessed</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful,
  // Only target 'nuts' and 'bananas' when preceded by is/he's/she's and an optional intensifier. Don't target when it's part of the phrase 'to be nuts/bananas about...'
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.shouldPrecedeNutsBananasWithIntensifier)).filter((0, Zg.isNotFollowedAndPrecededByException)(e, a, ra.shouldNotPrecedeStandaloneCrazyWhenFollowedByAbout, ra.shouldNotFollowStandaloneCrazyWhenPrecededByToBe)),
  ruleDescription: "Targeted when preceded by is/he's/she's and an optional intensifier and when it's not part of a more specific phrase that we target ('to go bananas', 'to drive bananas', 'to be bananas about')."
}, {
  identifier: "crazier",
  nonInclusivePhrases: ["crazier"],
  inclusiveAlternatives: "<i>more wild, baffling, out of control, inexplicable, unbelievable, aggravating, shocking, intense, impulsive, chaotic, confused, mistaken, obsessed</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "craziest",
  nonInclusivePhrases: ["craziest"],
  inclusiveAlternatives: "<i>most wild, baffling, out of control, inexplicable, unbelievable, aggravating, shocking, intense, impulsive, chaotic, confused, mistaken, obsessed</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "psychopathic",
  nonInclusivePhrases: ["psychopath", "psychopaths", "psychopathic"],
  inclusiveAlternatives: "<i>toxic, manipulative, unpredictable, impulsive, reckless, out of control</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "schizophrenic",
  nonInclusivePhrases: ["schizophrenic", "bipolar"],
  inclusiveAlternatives: "<i>of two minds, chaotic, confusing</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Xg.orangeUnlessMedicalCondition,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["disorder"])),
  ruleDescription: (0, Ia.notFollowed)(["disorder"])
}, {
  identifier: "paranoid",
  nonInclusivePhrases: ["paranoid"],
  inclusiveAlternatives: "<i>overly suspicious, unreasonable, defensive</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Xg.orangeUnlessMedicalCondition,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["personality disorder", "delusion", "delusions", "ideation"])),
  ruleDescription: (0, Ia.notFollowed)(["personality disorder", "delusion", "delusions", "ideation"])
}, {
  identifier: "manic",
  nonInclusivePhrases: ["manic"],
  inclusiveAlternatives: "<i>excited, raving, unbalanced, wild</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Xg.orangeUnlessMedicalCondition,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["episode", "episodes", "state", "states", "symptoms", "and depressive episodes", "and hypomanic", "or hypomanic"])),
  ruleDescription: (0, Ia.notFollowed)(["episode", "episodes", "state", "states", "symptoms", "and depressive episodes", "and hypomanic", "or hypomanic"])
}, {
  identifier: "hysterical",
  nonInclusivePhrases: ["hysterical"],
  inclusiveAlternatives: "<i>intense, vehement, piercing, chaotic</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "psycho",
  nonInclusivePhrases: ["psycho", "psychos"],
  inclusiveAlternatives: "<i>toxic, distraught, unpredictable, reckless, out of control</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "neurotic",
  nonInclusivePhrases: ["neurotic", "lunatic"],
  inclusiveAlternatives: "<i>distraught, unstable, startling, confusing, baffling</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "sociopath",
  nonInclusivePhrases: ["sociopath"],
  inclusiveAlternatives: ["<i>person with antisocial personality disorder</i>", "<i>toxic, manipulative, cruel</i>"],
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i> as it is potentially harmful. If you are referencing the medical condition, use %2$s instead, unless referring to someone who explicitly wants to be referred to with this term. If you are not referencing the medical condition, consider other alternatives to describe the trait or behavior, such as %3$s."
}, {
  identifier: "sociopaths",
  nonInclusivePhrases: ["sociopaths"],
  inclusiveAlternatives: ["<i>people with antisocial personality disorder</i>", "<i>toxic, manipulative, cruel</i>"],
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i> as it is potentially harmful. If you are referencing the medical condition, use %2$s instead, unless referring to someone who explicitly wants to be referred to with this term. If you are not referencing the medical condition, consider other alternatives to describe the trait or behavior, such as %3$s."
}, {
  identifier: "spaz",
  nonInclusivePhrases: ["spaz", "spazz"],
  inclusiveAlternatives: ["<i>incompetent person, erratic person, inept person, hyperactive person, agitated person, amateur, unqualified person, ignorant person</i>", "<i>lose control, flip out, throw a tantrum, behave erratically, go on the fritz, twitch, move clumsily, move awkwardly</i>"],
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: "Avoid using <i>%1$s</i> as it is potentially harmful. Consider using an alternative, such as %2$s when referring to a person, or %3$s when referring to an action.",
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["out"])),
  ruleDescription: (0, Ia.notFollowed)(["out"])
}, {
  identifier: "spazzes",
  nonInclusivePhrases: ["spazzes"],
  inclusiveAlternatives: ["<i>incompetent people, erratic people, inept people, hyperactive people, agitated people, amateurs, unqualified people, ignorant people</i>", "<i>loses control, flips out, throws a tantrum, behaves erratically, goes on the fritz, twitches, moves clumsily, moves awkwardly</i>"],
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: "Avoid using <i>%1$s</i> as it is potentially harmful. Consider using an alternative, such as %2$s when referring to a person, or %3$s when referring to an action.",
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["out"])),
  ruleDescription: (0, Ia.notFollowed)(["out"])
}, {
  identifier: "spazzing",
  nonInclusivePhrases: ["spazzing"],
  inclusiveAlternatives: "<i>losing control, flipping out, throwing a tantrum, behaving erratically, going on the fritz, twitching, moving clumsily, moving awkwardly</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["out"])),
  ruleDescription: (0, Ia.notFollowed)(["out"])
}, {
  identifier: "spazzed",
  nonInclusivePhrases: ["spazzed"],
  inclusiveAlternatives: "<i>lost control, flipped out, threw a tantrum, behaved erratically, went on the fritz, twitched, moved clumsily, moved awkwardly</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "spazOut",
  nonInclusivePhrases: ["spaz out", "spazz out"],
  inclusiveAlternatives: "<i>flip out, throw a tantrum, lose control, move clumsily, move awkwardly</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "spazzesOut",
  nonInclusivePhrases: ["spazzes out"],
  inclusiveAlternatives: "<i>flips out, throws a tantrum, loses control, moves clumsily, moves awkwardly</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "spazzingOut",
  nonInclusivePhrases: ["spazzing out"],
  inclusiveAlternatives: "<i>flipping out, throwing a tantrum, losing control, moving clumsily, moving awkwardly</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful
}, {
  identifier: "crazy",
  nonInclusivePhrases: ["crazy"],
  inclusiveAlternatives: "<i>wild, baffling, out of control, inexplicable, unbelievable, aggravating, shocking, intense, impulsive, chaotic, confused, mistaken, obsessed</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful,
  // Don't target when 'crazy' is part of a more specific phrase that we target.
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isNotPrecededByException)(e, ra.shouldNotPrecedeStandaloneCrazy)).filter((0, ot.isNotFollowedByException)(e, a, ra.shouldNotFollowStandaloneCrazy)).filter((0, Zg.isNotFollowedAndPrecededByException)(e, a, ra.shouldNotPrecedeStandaloneCrazyWhenFollowedByAbout, ra.shouldNotFollowStandaloneCrazyWhenPrecededByToBe)),
  ruleDescription: "Not targeted with this feedback when part of a more specific phrase that we target ('to drive crazy', to go crazy', 'to (not) be crazy about', 'crazy in love')."
}, {
  identifier: "narcissistic",
  nonInclusivePhrases: ["narcissistic"],
  inclusiveAlternatives: ["<i>person with narcissistic personality disorder</i>", "<i>selfish, egotistical, self-centered, self-absorbed, vain, toxic, manipulative</i>"],
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i> as it is potentially harmful. If you are referencing the medical condition, use %2$s instead, unless referring to someone who explicitly wants to be referred to with this term. If you are not referencing the medical condition, consider other alternatives to describe the trait or behavior, such as %3$s.",
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, ot.isNotFollowedByException)(e, a, ["personality disorder"])),
  ruleDescription: (0, Ia.notFollowed)(["personality disorder"])
}, {
  identifier: "OCD",
  nonInclusivePhrases: ["ocd"],
  inclusiveAlternatives: "<i>pedantic, obsessed, perfectionist</i>",
  score: ce.SCORES.POTENTIALLY_NON_INCLUSIVE,
  // We make sure to always capitalize "OCD" by pre-filling the first replacement variable.
  feedbackFormat: [(0, ZOa.sprintf)(Xg.orangeUnlessMedicalCondition, "OCD", "%2$s"), "If you are referring to someone who has the medical condition, then state that they have OCD rather than that they are OCD."].join(" "),
  // Only target 'OCD' when preceded by a form of 'to be/to get' followed by an optional intensifier.
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, Ga.isPrecededByException)(e, ra.formsOfToBeAndToBeNotWithOptionalIntensifier)),
  ruleDescription: "Targeted when preceded by a form of 'to be' or 'to get' (including their negated forms)and an optional intensifier"
}, {
  identifier: "theMentallyIll",
  nonInclusivePhrases: ["the mentally ill"],
  inclusiveAlternatives: "<i>people who are mentally ill</i>, <i>mentally ill people</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, HC.default)(e, a)),
  ruleDescription: Ia.nonInclusiveWhenStandalone
}, {
  identifier: "theDisabled",
  nonInclusivePhrases: ["the disabled"],
  inclusiveAlternatives: "<i>people who have a disability</i>, <i>disabled people</i>",
  score: ce.SCORES.NON_INCLUSIVE,
  feedbackFormat: ge.redHarmful,
  rule: (e, a) => (0, He.includesConsecutiveWords)(e, a).filter((0, HC.default)(e, a)),
  ruleDescription: Ia.nonInclusiveWhenStandalone
}];
wM.forEach((e) => {
  e.category = "disability", e.learnMoreUrl = "https://yoa.st/inclusive-language-disability";
});
Eh.default = wM;
var jh = {}, Xn = {};
Object.defineProperty(Xn, "__esModule", {
  value: !0
});
Xn.orangeExclusionaryUnlessUseTheTerm = Xn.orangeExclusionaryUnlessTwoGenders = Xn.orangeExclusionaryUnlessMenAndWomen = Xn.orangeExclusionaryUnlessMen = Xn.orangeExclusionaryUnless = void 0;
Xn.orangeExclusionaryUnless = "Be careful when using <i>%1$s</i> as it can be exclusionary. Unless you are sure that the group you refer to only consists of %1$s, use an alternative, such as %2$s.";
Xn.orangeExclusionaryUnlessMen = "Be careful when using <i>%1$s</i> as it can be exclusionary. Unless you are sure that the group you refer to only consists of men, use an alternative, such as %2$s.";
Xn.orangeExclusionaryUnlessMenAndWomen = "Be careful when using <i>%1$s</i> as it can be exclusionary. Unless you are sure that the group you refer to only consists of men and women, use an alternative, such as %2$s.";
Xn.orangeExclusionaryUnlessTwoGenders = "Be careful when using <i>%1$s</i> as it can be exclusionary. Unless you are sure that the group you refer to only consists of two genders, use an alternative, such as %2$s.";
Xn.orangeExclusionaryUnlessUseTheTerm = "Be careful when using <i>%1$s</i> as it can be exclusionary. Unless you are sure that the group you refer to only consists of people who use this term, use an alternative, such as %2$s.";
Object.defineProperty(jh, "__esModule", {
  value: !0
});
jh.default = void 0;
var ca = aa, Io = Xn, Ve = Wr, eIa = js, aIa = nIa(dl), tIa = wn;
function nIa(e) {
  return e && e.__esModule ? e : { default: e };
}
const vM = [{
  identifier: "firemen",
  nonInclusivePhrases: ["firemen"],
  inclusiveAlternatives: "<i>firefighters</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Io.orangeExclusionaryUnlessMen
}, {
  identifier: "policemen",
  nonInclusivePhrases: ["policemen"],
  inclusiveAlternatives: "<i>police officers</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Io.orangeExclusionaryUnlessMen
}, {
  identifier: "menAndWomen",
  nonInclusivePhrases: ["men and women", "women and men"],
  inclusiveAlternatives: "<i>people, people of all genders, individuals, human beings</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Io.orangeExclusionaryUnless
}, {
  identifier: "boysAndGirls",
  nonInclusivePhrases: ["boys and girls", "girls and boys"],
  inclusiveAlternatives: "<i>kids, children</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Io.orangeExclusionaryUnless
}, {
  identifier: "heOrShe",
  nonInclusivePhrases: ["he/she", "he or she", "she or he", "(s)he"],
  inclusiveAlternatives: "<i>they</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeExclusionaryNoUnless
}, {
  identifier: "birthSex",
  nonInclusivePhrases: ["birth sex", "natal sex"],
  inclusiveAlternatives: "<i>assigned sex, assigned sex at birth</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redHarmful
}, {
  identifier: "mankind",
  nonInclusivePhrases: ["mankind"],
  inclusiveAlternatives: "<i>individuals, people, persons, human beings, humanity</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redExclusionary
}, {
  identifier: "preferredPronouns",
  nonInclusivePhrases: ["preferred pronouns"],
  inclusiveAlternatives: "<i>pronouns</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [ca.orangeNoUnless.slice(0, -1), ", unless referring to someone who explicitly wants to use this term to describe their own pronouns."].join("")
}, {
  identifier: "oppositeGender",
  nonInclusivePhrases: ["opposite gender"],
  inclusiveAlternatives: "<i>another gender</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redExclusionary
}, {
  identifier: "oppositeSex",
  nonInclusivePhrases: ["opposite sex"],
  inclusiveAlternatives: "<i>another sex</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redExclusionary
}, {
  identifier: "femaleBodied",
  nonInclusivePhrases: ["female-bodied"],
  inclusiveAlternatives: "<i>assigned female at birth</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redPotentiallyExclusionary.slice(0, -1) + " if you are discussing a person based on their sex or assigned gender at birth. If talking about human anatomy, use the specific anatomical phrase as opposed to <i>%1$s</i>."
}, {
  identifier: "maleBodied",
  nonInclusivePhrases: ["male-bodied"],
  inclusiveAlternatives: "<i>assigned male at birth</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redPotentiallyExclusionary.slice(0, -1) + " if you are discussing a person based on their sex or assigned gender at birth. If talking about human anatomy, use the specific anatomical phrase as opposed to <i>%1$s</i>."
}, {
  identifier: "hermaphrodite",
  nonInclusivePhrases: ["hermaphrodite"],
  inclusiveAlternatives: "<i>intersex</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redHarmful
}, {
  identifier: "hermaphrodites",
  nonInclusivePhrases: ["hermaphrodites"],
  inclusiveAlternatives: "<i>intersex people</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redHarmful
}, {
  identifier: "bothGenders",
  nonInclusivePhrases: ["both genders"],
  inclusiveAlternatives: "<i>people, folks, human beings, all genders</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Io.orangeExclusionaryUnlessTwoGenders
}, {
  identifier: "ladiesAndGentleman",
  nonInclusivePhrases: ["ladies and gentlemen"],
  inclusiveAlternatives: "<i>everyone, folks, honored guests</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Io.orangeExclusionaryUnlessMenAndWomen
}, {
  identifier: "husbandAndWife",
  nonInclusivePhrases: ["husband and wife", "husbands and wives"],
  inclusiveAlternatives: "<i>spouses, partners</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeExclusionaryNoUnless.slice(0, -1) + ", unless referring to someone who explicitly wants to be referred to with this term."
}, {
  identifier: "mothersAndFathers",
  nonInclusivePhrases: ["mothers and fathers", "fathers and mothers"],
  inclusiveAlternatives: "<i>parents</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Io.orangeExclusionaryUnlessUseTheTerm
}, {
  identifier: "manHours",
  nonInclusivePhrases: ["man-hours"],
  inclusiveAlternatives: "<i>person-hours, business hours</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redExclusionary
}, {
  identifier: "preferredName",
  nonInclusivePhrases: ["preferred name"],
  inclusiveAlternatives: "<i>name, affirming name</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [ca.orangeNoUnless.slice(0, -1), ", unless referring to someone who explicitly wants to use this term to describe their own name."].join("")
}, {
  identifier: "transgenders",
  nonInclusivePhrases: ["transgenders"],
  inclusiveAlternatives: "<i>trans people, transgender people</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: [ca.avoidDerogatory, ca.alternative].join(" ")
}, {
  identifier: "transsexual",
  nonInclusivePhrases: ["transsexual"],
  inclusiveAlternatives: "<i>transgender</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeUnlessSomeoneWants
}, {
  identifier: "transsexuals",
  nonInclusivePhrases: ["transsexuals"],
  inclusiveAlternatives: "<i>trans people, transgender people</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeUnlessSomeoneWants
}, {
  identifier: "transWoman",
  nonInclusivePhrases: ["transwoman"],
  inclusiveAlternatives: "<i>trans woman, transgender woman</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeUnlessSomeoneWants
}, {
  identifier: "transWomen",
  nonInclusivePhrases: ["transwomen"],
  inclusiveAlternatives: "<i>trans women, transgender women</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeUnlessSomeoneWants
}, {
  identifier: "transMan",
  nonInclusivePhrases: ["transman"],
  inclusiveAlternatives: "<i>trans man, transgender man</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeUnlessSomeoneWants
}, {
  identifier: "transMen",
  nonInclusivePhrases: ["transmen"],
  inclusiveAlternatives: "<i>trans men, transgender men</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeUnlessSomeoneWants
}, {
  identifier: "transgendered",
  nonInclusivePhrases: ["transgendered"],
  inclusiveAlternatives: ["<i>transgender, trans</i>", "transitioned, went through a gender transition"],
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: [ca.redHarmful.slice(0, -1), "if referring to a person. If referring to a transition process, consider using an alternative such as <i>%3$s</i>."].join(" ")
}, {
  identifier: "maleToFemale",
  nonInclusivePhrases: ["male-to-female", "mtf"],
  inclusiveAlternatives: "<i>trans woman, transgender woman</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeUnlessSomeoneWants
}, {
  identifier: "femaleToMale",
  nonInclusivePhrases: ["female-to-male", "ftm"],
  inclusiveAlternatives: "<i>trans man, transgender man</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ca.orangeUnlessSomeoneWants
}, {
  identifier: "heShe",
  nonInclusivePhrases: ["he-she"],
  inclusiveAlternatives: "",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.avoidDerogatory
}, {
  identifier: "shemale",
  nonInclusivePhrases: ["shemale", "she-male"],
  inclusiveAlternatives: "",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.avoidDerogatory
}, {
  identifier: "manMade",
  nonInclusivePhrases: ["man-made", "manmade"],
  inclusiveAlternatives: "<i>artificial, synthetic, machine-made</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redExclusionary
}, {
  identifier: "toEachTheirOwn",
  nonInclusivePhrases: ["to each his own"],
  inclusiveAlternatives: "<i>to each their own</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redExclusionary
}, {
  identifier: "manned",
  nonInclusivePhrases: ["manned"],
  inclusiveAlternatives: "<i>crewed</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redExclusionary
}, {
  identifier: "aTransgender",
  nonInclusivePhrases: ["a transgender", "the transgender"],
  inclusiveAlternatives: "<i>transgender person</i>",
  score: Ve.SCORES.NON_INCLUSIVE,
  feedbackFormat: ca.redHarmful,
  rule: (e, a) => (0, eIa.includesConsecutiveWords)(e, a).filter((0, aIa.default)(e, a)),
  ruleDescription: tIa.nonInclusiveWhenStandalone
}, {
  identifier: "pregnant women",
  nonInclusivePhrases: ["pregnant women"],
  inclusiveAlternatives: "<i>pregnant people</i>",
  score: Ve.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: "Be careful when using <i>%1$s</i> as it can be exclusionary. Unless you are sure that the group you refer to only consists of women, use an alternative, such as %2$s."
}];
vM.forEach((e) => {
  e.category = "gender", e.learnMoreUrl = "https://yoa.st/inclusive-language-gender";
});
jh.default = vM;
var xh = {}, dd = {};
Object.defineProperty(dd, "__esModule", {
  value: !0
});
dd.orangeUnlessCultureUsesTerm = dd.orangeUnlessCultureOfOrigin = void 0;
var kM = aa;
dd.orangeUnlessCultureOfOrigin = [kM.beCarefulHarmful, "Consider using an alternative, such as %2$s instead, unless you are referring to the culture in which this term originated."].join(" ");
dd.orangeUnlessCultureUsesTerm = [kM.beCarefulHarmful, "Consider using an alternative, such as %2$s instead, unless you are referring to a culture that uses this term."].join(" ");
Object.defineProperty(xh, "__esModule", {
  value: !0
});
xh.default = void 0;
var Re = Wr, tk = js, nk = ro, Ke = aa, Co = dd, rk = wn;
const _M = [{
  identifier: "firstWorld",
  nonInclusivePhrases: ["First World"],
  inclusiveAlternatives: "the specific name for the region or country",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful,
  caseSensitive: !0,
  rule: (e, a) => (0, tk.includesConsecutiveWords)(e, a).filter((0, nk.isNotFollowedByException)(e, a, ["War", "war", "Assembly", "assembly"])),
  ruleDescription: (0, rk.notFollowed)(["War", "war", "Assembly", "assembly"])
}, {
  identifier: "thirdWorld",
  nonInclusivePhrases: ["Third World"],
  inclusiveAlternatives: "the specific name for the region or country",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful,
  caseSensitive: !0,
  rule: (e, a) => (0, tk.includesConsecutiveWords)(e, a).filter((0, nk.isNotFollowedByException)(e, a, ["War", "war", "Quarterly", "quarterly", "country"])),
  ruleDescription: (0, rk.notFollowed)(["War", "war", "Quarterly", "quarterly", "country"])
}, {
  identifier: "tribe",
  nonInclusivePhrases: ["tribe"],
  inclusiveAlternatives: "<i>group, cohort, crew, league, guild, team, union</i>",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Co.orangeUnlessCultureUsesTerm
}, {
  identifier: "tribes",
  nonInclusivePhrases: ["tribes"],
  inclusiveAlternatives: "<i>groups, cohorts, crews, leagues, guilds, teams, unions</i>",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Co.orangeUnlessCultureUsesTerm
}, {
  identifier: "exotic",
  nonInclusivePhrases: ["exotic"],
  inclusiveAlternatives: "<i>unfamiliar, foreign, peculiar, fascinating, alluring, bizarre, non-native, introduced</i>",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Ke.beCarefulHarmful + " Unless you are referring to animals or scientific terms, consider using an alternative, such as %2$s.",
  rule: (e, a) => (0, tk.includesConsecutiveWords)(e, a).filter((0, nk.isNotFollowedByException)(e, a, ["longhair", "longhairs", "shorthair", "shorthairs", "bloom", "blooms", "species", "florals", "botanical", "botanicals", "leather", "leathers", "material", "materials", "timber", "timbers", "composite", "composites", "atom", "atoms", "molecule", "molecules", "hadron", "hadrons", "sphere", "spheres", "star", "stars", "car", "cars", "sports car", "sports cars"])),
  ruleDescription: (0, rk.notFollowed)(["longhair", "longhairs", "shorthair", "shorthairs", "bloom", "blooms", "species", "florals", "botanical", "botanicals", "leather", "leathers", "material", "materials", "timber", "timbers", "composite", "composites", "atom", "atoms", "molecule", "molecules", "hadron", "hadrons", "sphere", "spheres", "star", "stars", "car", "cars", "sports car", "sports cars"])
}, {
  identifier: "sherpa",
  nonInclusivePhrases: ["sherpa"],
  inclusiveAlternatives: "<i>commander, coach, mastermind, coach, mentor</i>",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Co.orangeUnlessCultureOfOrigin
}, {
  identifier: "guru",
  nonInclusivePhrases: ["guru"],
  inclusiveAlternatives: "<i>mentor, doyen, coach, mastermind, virtuoso, expert</i>",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Co.orangeUnlessCultureOfOrigin
}, {
  identifier: "gurus",
  nonInclusivePhrases: ["gurus"],
  inclusiveAlternatives: "<i>mentors, doyens, coaches, masterminds, virtuosos, experts</i>",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Co.orangeUnlessCultureOfOrigin
}, {
  identifier: "nonWhite",
  nonInclusivePhrases: ["non-white"],
  inclusiveAlternatives: "<i>people of color, POC, BIPOC</i> or specifying the racial groups mentioned",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "oriental",
  nonInclusivePhrases: ["oriental"],
  inclusiveAlternatives: "<i>Asian</i>. When possible, be more specific (e.g. <i>East Asian</i>)",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Ke.orangeUnlessAnimalsObjects
}, {
  identifier: "asianAmerican",
  nonInclusivePhrases: ["Asian-American"],
  inclusiveAlternatives: "<i>Asian American</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful,
  caseSensitive: !0
}, {
  identifier: "asianAmericans",
  nonInclusivePhrases: ["Asian-Americans"],
  inclusiveAlternatives: "<i>Asian Americans</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful,
  caseSensitive: !0
}, {
  identifier: "africanAmerican",
  nonInclusivePhrases: ["African-American"],
  inclusiveAlternatives: "<i>African American, Black, American of African descent</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful,
  caseSensitive: !0
}, {
  identifier: "africanAmericans",
  nonInclusivePhrases: ["African-Americans"],
  inclusiveAlternatives: "<i>African Americans, Black, Americans of African descent</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful,
  caseSensitive: !0
}, {
  identifier: "whiteRace",
  nonInclusivePhrases: ["the White race"],
  inclusiveAlternatives: "",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.avoidHarmful,
  caseSensitive: !0
}, {
  identifier: "whitelist",
  nonInclusivePhrases: ["whitelist"],
  inclusiveAlternatives: "<i>allowlist</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "whitelists",
  nonInclusivePhrases: ["whitelists"],
  inclusiveAlternatives: "<i>allowlists</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "whitelisting",
  nonInclusivePhrases: ["whitelisting"],
  inclusiveAlternatives: "<i>allowlisting</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "whitelisted",
  nonInclusivePhrases: ["whitelisted"],
  inclusiveAlternatives: "<i>allowlisted</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "blacklist",
  nonInclusivePhrases: ["blacklist"],
  inclusiveAlternatives: "<i>blocklist, denylist, faillist, redlist</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "blacklists",
  nonInclusivePhrases: ["blacklists"],
  inclusiveAlternatives: "<i>blocklists, denylists, faillists, redlists</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "blacklisting",
  nonInclusivePhrases: ["blacklisting"],
  inclusiveAlternatives: "<i>blocklisting, denylisting, faillisting, redlisting</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "blacklisted",
  nonInclusivePhrases: ["blacklisted"],
  inclusiveAlternatives: "<i>blocklisted, denylisted, faillisted, redlisted</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "gyp",
  nonInclusivePhrases: ["gyp"],
  inclusiveAlternatives: "<i>fraud, cheat, swindle, rip-off</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "gyps",
  nonInclusivePhrases: ["gyps"],
  inclusiveAlternatives: "<i>frauds, cheats, swindles, rips off, rip-offs</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "gypped",
  nonInclusivePhrases: ["gypped"],
  inclusiveAlternatives: "<i>cheated, swindled, ripped off</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "gypping",
  nonInclusivePhrases: ["gypping"],
  inclusiveAlternatives: "<i>cheating, swindling, ripping off</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "gypsy",
  nonInclusivePhrases: ["gypsy", "gipsy"],
  inclusiveAlternatives: ["<i>Rom, Roma person, Romani, Romani person</i>", "<i>traveler, wanderer, free-spirited</i>"],
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [Ke.orangeUnlessSomeoneWants, "If you are referring to a lifestyle rather than the ethnic group or their music, consider using an alternative such as %3$s."].join(" ")
}, {
  identifier: "gypsies",
  nonInclusivePhrases: ["gypsies", "gipsies"],
  inclusiveAlternatives: ["<i>Roma, Romani, Romani people</i>", "<i>travelers, wanderers, free-spirited</i>"],
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [Ke.orangeUnlessSomeoneWants, "If you are referring to a lifestyle rather than the ethnic group or their music, consider using an alternative such as %3$s."].join(" ")
}, {
  identifier: "eskimo",
  nonInclusivePhrases: ["eskimo", "eskimos"],
  inclusiveAlternatives: "the specific name of the Indigenous community (for example, <i>Inuit</i>)",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Ke.orangeUnlessSomeoneWants
}, {
  identifier: "coloredPerson",
  nonInclusivePhrases: ["colored person"],
  inclusiveAlternatives: "<i>person of color, POC, BIPOC</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "coloredPeople",
  nonInclusivePhrases: ["colored people"],
  inclusiveAlternatives: "<i>people of color, POC, BIPOC</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "americanIndians",
  nonInclusivePhrases: ["American Indian", "American Indians"],
  inclusiveAlternatives: "<i>Native American(s), Indigenous peoples of America</i>",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Ke.orangeUnlessSomeoneWants,
  caseSensitive: !0
}, {
  identifier: "mulatto",
  nonInclusivePhrases: ["mulatto", "mulattos", "mulattoes"],
  inclusiveAlternatives: "<i>mixed, biracial, multiracial</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "savage",
  nonInclusivePhrases: ["savage"],
  inclusiveAlternatives: "<i>severe, dreadful, untamed, brutal, fearless, fierce, brilliant, amazing</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "civilized",
  nonInclusivePhrases: ["civilized"],
  inclusiveAlternatives: "<i>proper, well-mannered, enlightened, respectful</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "primitive",
  nonInclusivePhrases: ["primitive"],
  inclusiveAlternatives: "<i>early, rudimentary</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "powWow",
  nonInclusivePhrases: ["pow-wow"],
  inclusiveAlternatives: "<i>chat, brief conversation, brainstorm, huddle</i>",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Co.orangeUnlessCultureOfOrigin
}, {
  identifier: "lowManOnTheTotemPole",
  nonInclusivePhrases: ["low man on the totem pole"],
  inclusiveAlternatives: "<i>person of lower rank, junior-level</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "spiritAnimal",
  nonInclusivePhrases: ["spirit animal"],
  inclusiveAlternatives: "<i>inspiration, hero, icon, idol</i>",
  score: Re.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Co.orangeUnlessCultureOfOrigin
}, {
  identifier: "firstWorldCountries",
  nonInclusivePhrases: ["first world countries"],
  inclusiveAlternatives: "the specific name for the regions or countries",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "firstWorldHyphen",
  nonInclusivePhrases: ["first-world"],
  inclusiveAlternatives: "the specific name for the region or country",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "third-worldCountry",
  nonInclusivePhrases: ["third-world country"],
  inclusiveAlternatives: "<i>low-income country, developing country</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "third-worldCountry",
  nonInclusivePhrases: ["third world country"],
  inclusiveAlternatives: "<i>low-income country, developing country</i>",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: Ke.redHarmful
}, {
  identifier: "underdevelopedCountry",
  nonInclusivePhrases: ["underdeveloped country"],
  inclusiveAlternatives: "developing country",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: "Avoid using <i>%1$s</i> as it is potentially harmful. Consider using an alternative, such as <i>%2$s</i> instead or be more specific about what aspect this word refers to."
}, {
  identifier: "underdevelopedCountries",
  nonInclusivePhrases: ["underdeveloped countries"],
  inclusiveAlternatives: "developing countries",
  score: Re.SCORES.NON_INCLUSIVE,
  feedbackFormat: "Avoid using <i>%1$s</i> as it is potentially harmful. Consider using an alternative, such as <i>%2$s</i> instead or be more specific about what aspect this word refers to."
}];
_M.forEach((e) => {
  e.category = "culture", e.learnMoreUrl = "https://yoa.st/inclusive-language-culture";
});
xh.default = _M;
var Sh = {};
Object.defineProperty(Sh, "__esModule", {
  value: !0
});
Sh.default = void 0;
var Wt = aa, Ut = Wr, sk = js, ik = rIa(dl), ok = wn;
function rIa(e) {
  return e && e.__esModule ? e : { default: e };
}
const EM = [{
  identifier: "illegalImmigrant",
  nonInclusivePhrases: ["illegal immigrant", "illegal alien"],
  inclusiveAlternatives: "<i>undocumented person, person without papers, immigrant without papers</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "illegalImmigrants",
  nonInclusivePhrases: ["illegal immigrants", "illegal aliens"],
  inclusiveAlternatives: "<i>undocumented people, people without papers, immigrants without papers</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "povertyStricken",
  nonInclusivePhrases: ["poverty stricken"],
  inclusiveAlternatives: "<i>people whose income is below the poverty threshold, people with low-income</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "welfareReliant",
  nonInclusivePhrases: ["welfare reliant"],
  inclusiveAlternatives: "<i>receiving welfare</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "prostitute",
  nonInclusivePhrases: ["prostitute"],
  inclusiveAlternatives: "<i>sex worker</i>",
  score: Ut.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Wt.orangeUnlessSomeoneWants
}, {
  identifier: "prostitutes",
  nonInclusivePhrases: ["prostitutes"],
  inclusiveAlternatives: "<i>sex workers</i>",
  score: Ut.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: Wt.orangeUnlessSomeoneWants
}, {
  identifier: "ex-con",
  nonInclusivePhrases: ["ex-con"],
  inclusiveAlternatives: "<i>person who has had felony convictions, person who has been incarcerated</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "ex-cons",
  nonInclusivePhrases: ["ex-cons"],
  inclusiveAlternatives: "<i>people who have had felony convictions, people who have been incarcerated</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "felon",
  nonInclusivePhrases: ["felon"],
  inclusiveAlternatives: "<i>person with felony convictions, person who has been incarcerated</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "felons",
  nonInclusivePhrases: ["felons"],
  inclusiveAlternatives: "<i>people with felony convictions, people who have been incarcerated</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "ex-offender",
  nonInclusivePhrases: ["ex-offender"],
  inclusiveAlternatives: "<i>formerly incarcerated person</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "ex-offenders",
  nonInclusivePhrases: ["ex-offenders"],
  inclusiveAlternatives: "<i>formerly incarcerated people</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful
}, {
  identifier: "theHomeless",
  nonInclusivePhrases: ["the homeless"],
  inclusiveAlternatives: "<i>people experiencing homelessness</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful,
  rule: (e, a) => (0, sk.includesConsecutiveWords)(e, a).filter((0, ik.default)(e, a)),
  ruleDescription: ok.nonInclusiveWhenStandalone
}, {
  identifier: "theUndocumented",
  nonInclusivePhrases: ["the undocumented"],
  inclusiveAlternatives: "<i>people who are undocumented, undocumented people, people without papers</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful,
  rule: (e, a) => (0, sk.includesConsecutiveWords)(e, a).filter((0, ik.default)(e, a)),
  ruleDescription: ok.nonInclusiveWhenStandalone
}, {
  identifier: "thePoor",
  nonInclusivePhrases: ["the poor"],
  inclusiveAlternatives: "<i>people whose income is below the poverty threshold, people with low-income</i>",
  score: Ut.SCORES.NON_INCLUSIVE,
  feedbackFormat: Wt.redHarmful,
  rule: (e, a) => (0, sk.includesConsecutiveWords)(e, a).filter((0, ik.default)(e, a)),
  ruleDescription: ok.nonInclusiveWhenStandalone
}];
EM.forEach((e) => {
  e.category = "ses", e.learnMoreUrl = "https://yoa.st/inclusive-language-ses";
});
Sh.default = EM;
var Oh = {};
Object.defineProperty(Oh, "__esModule", {
  value: !0
});
Oh.default = void 0;
var as = Wr, ts = aa, GC = js, VC = ll, KC = wn;
const AM = [{
  identifier: "minorities",
  nonInclusivePhrases: ["minorities"],
  inclusiveAlternatives: ["<i>members of the LGBTQ+ community</i>", "<i>Indigenous peoples</i>", "<i>marginalized groups</i>", "<i>religious minorities</i>"],
  score: as.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [ts.beCarefulHarmful, "Consider using an alternative by being specific about which group(s) of people you are referring to. For example: %2$s, %3$s, %4$s. In case an alternative is not available, make sure to specify the type of minorities you are referring to, e.g., %5$s."].join(" ")
}, {
  identifier: "normalPerson",
  nonInclusivePhrases: ["normal person"],
  inclusiveAlternatives: ["<i>typical person, average person</i> or describing the person's specific trait, experience, or behavior"],
  score: as.SCORES.NON_INCLUSIVE,
  feedbackFormat: ts.redHarmful,
  rule: (e, a) => (0, GC.includesConsecutiveWords)(e, a).filter((0, VC.isNotPrecededByException)(e, ["mentally", "behaviorally", "behaviourally"])),
  ruleDescription: (0, KC.notPreceded)(["mentally", "behaviorally", "behaviourally"])
}, {
  identifier: "normalPeople",
  nonInclusivePhrases: ["normal people", "Normal people"],
  inclusiveAlternatives: ["<i>typical people, average people</i> or describing people's specific trait, experience, or behavior"],
  score: as.SCORES.NON_INCLUSIVE,
  feedbackFormat: ts.redHarmful,
  caseSensitive: !0,
  rule: (e, a) => (0, GC.includesConsecutiveWords)(e, a).filter((0, VC.isNotPrecededByException)(e, ["mentally", "behaviorally", "behaviourally"])),
  ruleDescription: (0, KC.notPreceded)(["mentally", "behaviorally", "behaviourally"])
}, {
  identifier: "mentallyNormal",
  nonInclusivePhrases: ["mentally normal"],
  inclusiveAlternatives: ["<i>people without mental health conditions</i>, <i>mentally healthy people</i>"],
  score: as.SCORES.NON_INCLUSIVE,
  feedbackFormat: [ts.avoidHarmful, "Consider using an alternative, such as %2$s. If possible, be more specific. For example: <i>people who don’t have anxiety disorders</i>, <i>people who haven't experienced trauma</i>, etc. Be careful when using mental health descriptors and try to avoid making assumptions about someone's mental health."].join(" ")
}, {
  identifier: "behaviorallyNormal",
  nonInclusivePhrases: ["behaviorally normal", "behaviourally normal"],
  inclusiveAlternatives: ["<i>showing typical behavior</i> or describing the specific behavior"],
  score: as.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ts.orangeUnlessAnimalsObjects
}, {
  identifier: "abnormalPerson",
  nonInclusivePhrases: ["abnormal person"],
  inclusiveAlternatives: ["describing the person's specific trait, experience, or behavior"],
  score: as.SCORES.NON_INCLUSIVE,
  feedbackFormat: ts.redHarmful
}, {
  identifier: "abnormalPeople",
  nonInclusivePhrases: ["abnormal people"],
  inclusiveAlternatives: ["describing people's specific trait, experience, or behavior"],
  score: as.SCORES.NON_INCLUSIVE,
  feedbackFormat: ts.redHarmful
}, {
  identifier: "mentallyAbnormal",
  nonInclusivePhrases: ["mentally abnormal"],
  inclusiveAlternatives: ["<i>people with a mental health condition</i>, <i>people with mental health problems</i>"],
  score: as.SCORES.NON_INCLUSIVE,
  feedbackFormat: [ts.avoidHarmful, "Consider using an alternative, such as %2$s. If possible, be more specific. For example: <i>people who have anxiety disorders, people who have experienced trauma</i>, etc. Be careful when using mental health descriptors and try to avoid making assumptions about someone's mental health."].join(" ")
}, {
  identifier: "behaviorallyAbnormal",
  nonInclusivePhrases: ["behaviorally abnormal", "behaviourally abnormal"],
  inclusiveAlternatives: ["<i>showing atypical behavior, showing dysfunctional behavior</i> or describing the specific behavior"],
  score: as.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ts.orangeUnlessAnimalsObjects
}, {
  identifier: "abnormalBehavior",
  nonInclusivePhrases: ["abnormal behavior", "abnormal behaviour"],
  inclusiveAlternatives: ["<i>atypical behavior, unusual behavior</i> or describing the specific behavior"],
  score: as.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: ts.orangeUnlessAnimalsObjects
}];
AM.forEach((e) => {
  e.category = "other", e.learnMoreUrl = "https://yoa.st/inclusive-language-other";
});
Oh.default = AM;
var Ih = {};
Object.defineProperty(Ih, "__esModule", {
  value: !0
});
Ih.default = void 0;
var sIa = Wr, iIa = aa;
const TM = [{
  identifier: "homosexuals",
  nonInclusivePhrases: ["homosexuals"],
  inclusiveAlternatives: "<i>gay people, queer people, lesbians, gay men, people in same-gender relationships</i>",
  score: sIa.SCORES.POTENTIALLY_NON_INCLUSIVE,
  feedbackFormat: [iIa.orangeUnlessSomeoneWants, "Be as specific possible and use people's preferred labels if they are known."].join(" ")
}];
TM.forEach((e) => {
  e.category = "sexualOrientation", e.learnMoreUrl = "https://yoa.st/inclusive-language-orientation";
});
Ih.default = TM;
Object.defineProperty(oh, "__esModule", {
  value: !0
});
oh.default = void 0;
var oIa = so(lh), lIa = so(_h), dIa = so(Eh), uIa = so(jh), cIa = so(xh), pIa = so(Sh), gIa = so(Oh), mIa = so(Ih);
function so(e) {
  return e && e.__esModule ? e : { default: e };
}
oh.default = [...oIa.default, ...lIa.default, ...dIa.default, ...uIa.default, ...cIa.default, ...pIa.default, ...gIa.default, ...mIa.default];
var Jc = {};
Object.defineProperty(Jc, "__esModule", {
  value: !0
});
Jc.default = void 0;
var YC = sa, fIa = K, hIa = fE(qe), yIa = fE(mt), zIa = fE(to), bIa = Ce, QC = eo(), wIa = js;
function fE(e) {
  return e && e.__esModule ? e : { default: e };
}
class vIa {
  /**
   * Creates a new inclusive language assessment.
   *
   * @param {object} config The assessment configuration.
   *
   * @param {string} config.identifier The identifier of this assessment.
   * @param {string[]} config.nonInclusivePhrases The non-inclusive phrases.
   * @param {string|array} config.inclusiveAlternatives The suggested alternative, more inclusive, phrase(s).
   * @param {number} config.score The score to give if the non-inclusive phrase is recognized in the text.
   * @param {string} config.feedbackFormat The feedback format string,
   * 									should include a `%1$s` placeholder for the non-inclusive phrase
   * 									and `%2$s` (and potentially further replacements) for the suggested alternative(s).
   * @param {string} config.learnMoreUrl The URL to an article explaining more about this specific assessment.
   * @param {function} [config.rule] A potential additional rule for targeting the non-inclusive phrases.
   * @param {string} [config.ruleDescription] A description of the rule.
   * @param {boolean} [config.caseSensitive=false] If the inclusive phrase is case-sensitive, defaults to `false`.
   * @param {string} [config.category] The category of the assessment.
   *
   * @returns {void}
   */
  constructor({
    identifier: a,
    nonInclusivePhrases: t,
    inclusiveAlternatives: n,
    score: r,
    feedbackFormat: o,
    learnMoreUrl: l,
    rule: u,
    ruleDescription: c,
    caseSensitive: f,
    category: y
  }) {
    this.identifier = a, this.nonInclusivePhrases = t, this.inclusiveAlternatives = n, (0, fIa.isString)(this.inclusiveAlternatives) && (this.inclusiveAlternatives = [this.inclusiveAlternatives]), this.score = r, this.feedbackFormat = o, this.learnMoreUrl = (0, bIa.createAnchorOpeningTag)(l), this.rule = u || wIa.includesConsecutiveWords, this.ruleDescription = c, this.caseSensitive = f || !1, this.category = y;
  }
  /**
   * Checks whether the assessment is applicable for the given paper.
   *
   * @param {Paper} paper The paper to check.
   * @param {Researcher} researcher The researcher.
   *
   * @returns {boolean} Whether the assessment is applicable for the given paper.
   */
  isApplicable(a, t) {
    const n = t.getResearch("sentences"), r = a.getTextTitle();
    return n.push(r), this.foundPhrases = [], n.forEach((o) => {
      let l = (0, QC.getWords)(o, "\\s", !1);
      this.caseSensitive || (l = l.map((c) => c.toLocaleLowerCase()));
      const u = this.nonInclusivePhrases.find((c) => this.rule(l, (0, QC.getWords)(c, "\\s", !1)).length >= 1);
      u && this.foundPhrases.push({
        sentence: o,
        phrase: u
      });
    }), this.foundPhrases.length >= 1;
  }
  /**
   * Execute the Assessment and return a result.
   *
   * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
   */
  getResult() {
    const a = (0, YC.sprintf)("%1$sLearn more.%2$s", this.learnMoreUrl, "</a>"), t = (0, YC.sprintf)(this.feedbackFormat, this.foundPhrases[0].phrase, ...this.inclusiveAlternatives), n = new hIa.default({
      score: this.score,
      text: `${t} ${a}`
    });
    return n.setIdentifier(this.identifier), n.setHasMarks(!0), n;
  }
  /**
   * Marks text for the inclusive language assessment.
   *
   * @returns {Array<Mark>} A list of marks that should be applied.
   */
  getMarks() {
    return this.foundPhrases ? this.foundPhrases.map((a) => new yIa.default({
      original: a.sentence,
      marked: (0, zIa.default)(a.sentence)
    })) : [];
  }
}
Jc.default = vIa;
Object.defineProperty(Yc, "__esModule", {
  value: !0
});
Yc.default = void 0;
var kIa = hE(zn), _Ia = hE(oh), EIa = hE(Jc);
function hE(e) {
  return e && e.__esModule ? e : { default: e };
}
const AIa = {
  infoLinks: {}
};
class TIa extends kIa.default {
  /**
   * Creates a new InclusiveLanguageAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t = {}) {
    super(a, t), this.type = "inclusiveLanguageAssessor", this._options = Object.assign({}, AIa, t);
    const n = this._options.infoLinks;
    this._assessments = _Ia.default.map((r) => (n[r.category] && (r.learnMoreUrl = n[r.category]), new EIa.default(r)));
  }
  /**
   * Calculates the overall score.
   *
   * @returns {number} The overall score.
   */
  calculateOverallScore() {
    const a = this.getValidResults(), t = a.filter((r) => r.getScore() === 6);
    return a.filter((r) => r.getScore() === 3).length >= 1 ? 30 : t.length >= 1 ? 60 : 90;
  }
}
Yc.default = TIa;
var ep = {};
Object.defineProperty(ep, "__esModule", {
  value: !0
});
ep.default = void 0;
var $Ia = jIa(Ts);
function jIa(e) {
  return e && e.__esModule ? e : { default: e };
}
class xIa extends $Ia.default {
  /**
   * Creates a new RelatedKeywordTaxonomyAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "relatedKeywordsTaxonomyAssessor", this.removeAssessment("textCompetingLinks"), this.removeAssessment("imageKeyphrase");
  }
}
ep.default = xIa;
var Yi = {};
Object.defineProperty(Yi, "__esModule", {
  value: !0
});
Yi.getTextLengthAssessment = Yi.default = void 0;
var SIa = Pn(zn), OIa = Pn(bn), IIa = Pn(en), CIa = Pn(ut), PIa = Pn(an), RIa = Pn(Br), DIa = Pn(ct), NIa = Pn(nn), LIa = Pn(Cn), MIa = Pn(sr), qIa = Pn(tn), FIa = Pn(oi), XC = Ce, BIa = Pn(il);
function Pn(e) {
  return e && e.__esModule ? e : { default: e };
}
const $M = () => new LIa.default({
  recommendedMinimum: 30,
  slightlyBelowMinimum: 10,
  veryFarBelowMinimum: 1,
  urlTitle: (0, XC.createAnchorOpeningTag)("https://yoa.st/34j"),
  urlCallToAction: (0, XC.createAnchorOpeningTag)("https://yoa.st/34k"),
  customContentType: "taxonomyAssessor"
});
Yi.getTextLengthAssessment = $M;
class WIa extends SIa.default {
  /**
   * Creates a new TaxonomyAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "taxonomyAssessor", this._assessments = [new OIa.default(), new IIa.default(), new CIa.default(), new PIa.default(), new NIa.default(), $M(), new RIa.default(), new MIa.default({
      scores: {
        widthTooShort: 9
      }
    }, !0), new DIa.default(), new qIa.default(), new FIa.default()], this._scoreAggregator = new BIa.default();
  }
}
Yi.default = WIa;
Object.defineProperty(Lm, "__esModule", {
  value: !0
});
Lm.default = void 0;
var UIa = qi, HIa = sa, ea = K, GIa = PK, ZC = m0, VIa = ws, Sn = Tt($d), lk = Tt(R0), JC = Tt(hc), KIa = Tt(Xi), YIa = Tt(ao), QIa = Tt(Gf), eP = Tt(Wc), dk = Tt(_1), XIa = Tt(_s), ZIa = Tt(Gd), JIa = Tt(Gc), eCa = Tt(Vd), aCa = Tt(Yc), tCa = Tt(Ts), nCa = Tt(ep), rCa = Tt(rr), sCa = Tt(Yi);
function Tt(e) {
  return e && e.__esModule ? e : { default: e };
}
const Ro = (0, GIa.getLogger)("yoast-analysis-worker");
Ro.setDefaultLevel("error");
class yE {
  /* eslint-disable max-statements */
  /**
   * Initializes the AnalysisWebWorker class.
   *
   * @param {Object}      scope       The scope for the messaging. Expected to have the
   *                                  `onmessage` event and the `postMessage` function.
   * @param {Researcher}  researcher  The researcher to use.
   */
  constructor(a, t) {
    this._scope = a, this._configuration = {
      contentAnalysisActive: !0,
      keywordAnalysisActive: !0,
      inclusiveLanguageAnalysisActive: !1,
      useCornerstone: !1,
      useTaxonomy: !1,
      // The locale used for language-specific configurations in Flesch-reading ease and Sentence length assessments.
      locale: "en_US",
      customAnalysisType: ""
    }, this._scheduler = new QIa.default(), this._paper = null, this._relatedKeywords = {}, this._researcher = t, this._contentAssessor = null, this._seoAssessor = null, this._relatedKeywordAssessor = null, this.additionalAssessors = {}, this._inclusiveLanguageOptions = {}, this._results = {
      readability: {
        results: [],
        score: 0
      },
      seo: {
        "": {
          results: [],
          score: 0
        }
      },
      inclusiveLanguage: {
        results: [],
        score: 0
      }
    }, this._registeredAssessments = [], this._registeredMessageHandlers = {}, this._registeredParsers = [], this._CustomSEOAssessorClasses = {}, this._CustomCornerstoneSEOAssessorClasses = {}, this._CustomContentAssessorClasses = {}, this._CustomCornerstoneContentAssessorClasses = {}, this._CustomRelatedKeywordAssessorClasses = {}, this._CustomCornerstoneRelatedKeywordAssessorClasses = {}, this._CustomSEOAssessorOptions = {}, this._CustomCornerstoneSEOAssessorOptions = {}, this._CustomContentAssessorOptions = {}, this._CustomCornerstoneContentAssessorOptions = {}, this._CustomRelatedKeywordAssessorOptions = {}, this._CustomCornerstoneRelatedKeywordAssessorOptions = {}, this.bindActions(), this.assessRelatedKeywords = this.assessRelatedKeywords.bind(this), this.registerAssessment = this.registerAssessment.bind(this), this.registerMessageHandler = this.registerMessageHandler.bind(this), this.refreshAssessment = this.refreshAssessment.bind(this), this.setCustomContentAssessorClass = this.setCustomContentAssessorClass.bind(this), this.setCustomCornerstoneContentAssessorClass = this.setCustomCornerstoneContentAssessorClass.bind(this), this.setCustomSEOAssessorClass = this.setCustomSEOAssessorClass.bind(this), this.setCustomCornerstoneSEOAssessorClass = this.setCustomCornerstoneSEOAssessorClass.bind(this), this.setCustomRelatedKeywordAssessorClass = this.setCustomRelatedKeywordAssessorClass.bind(this), this.setCustomCornerstoneRelatedKeywordAssessorClass = this.setCustomCornerstoneRelatedKeywordAssessorClass.bind(this), this.registerAssessor = this.registerAssessor.bind(this), this.registerResearch = this.registerResearch.bind(this), this.registerHelper = this.registerHelper.bind(this), this.registerResearcherConfig = this.registerResearcherConfig.bind(this), this.setInclusiveLanguageOptions = this.setInclusiveLanguageOptions.bind(this), this.handleMessage = this.handleMessage.bind(this), this.analyzeRelatedKeywords = (0, dk.default)(Ro, this.analyze, "An error occurred while running the related keywords analysis."), this.analyze = (0, dk.default)(Ro, this.analyze, "An error occurred while running the analysis."), this.runResearch = (0, dk.default)(Ro, this.runResearch, "An error occurred after running the '%%name%%' research.");
  }
  /* eslint-enable max-statements */
  /**
   * Binds actions to this scope.
   *
   * @returns {void}
   */
  bindActions() {
    this.analyze = this.analyze.bind(this), this.analyzeDone = this.analyzeDone.bind(this), this.analyzeRelatedKeywordsDone = this.analyzeRelatedKeywordsDone.bind(this), this.loadScript = this.loadScript.bind(this), this.loadScriptDone = this.loadScriptDone.bind(this), this.customMessage = this.customMessage.bind(this), this.customMessageDone = this.customMessageDone.bind(this), this.clearCache = this.clearCache.bind(this), this.runResearch = this.runResearch.bind(this), this.runResearchDone = this.runResearchDone.bind(this);
  }
  /**
   * Sets a custom content assessor class.
   *
   * @param {ContentAssessor}  ContentAssessorClass     A content assessor class.
   * @param {string} customAnalysisType       The type of analysis.
   * @param {Object} customAssessorOptions    The options to use.
   *
   * @returns {void}
   */
  setCustomContentAssessorClass(a, t, n) {
    this._CustomContentAssessorClasses[t] = a, this._CustomContentAssessorOptions[t] = n, this._contentAssessor = this.createContentAssessor();
  }
  /**
   * Sets a custom cornerstone content assessor class.
   *
   * @param {CornerstoneContentAssessor}  CornerstoneContentAssessorClass  A cornerstone content assessor class.
   * @param {string} customAnalysisType               The type of analysis.
   * @param {Object} customAssessorOptions            The options to use.
   *
   * @returns {void}
   */
  setCustomCornerstoneContentAssessorClass(a, t, n) {
    this._CustomCornerstoneContentAssessorClasses[t] = a, this._CustomCornerstoneContentAssessorOptions[t] = n, this._contentAssessor = this.createContentAssessor();
  }
  /**
   * Sets a custom SEO assessor class.
   *
   * @param {SEOAssessor}   SEOAssessorClass   An SEO assessor class.
   * @param {string}  customAnalysisType       The type of analysis.
   * @param {Object}  customAssessorOptions    The options to use.
   *
   * @returns {void}
   */
  setCustomSEOAssessorClass(a, t, n) {
    this._CustomSEOAssessorClasses[t] = a, this._CustomSEOAssessorOptions[t] = n, this._seoAssessor = this.createSEOAssessor();
  }
  /**
   * Sets a custom cornerstone SEO assessor class.
   *
   * @param {CornerstoneSEOAssessor}   CornerstoneSEOAssessorClass  A cornerstone SEO assessor class.
   * @param {string}  customAnalysisType           The type of analysis.
   * @param {Object}  customAssessorOptions        The options to use.
   *
   * @returns {void}
   */
  setCustomCornerstoneSEOAssessorClass(a, t, n) {
    this._CustomCornerstoneSEOAssessorClasses[t] = a, this._CustomCornerstoneSEOAssessorOptions[t] = n, this._seoAssessor = this.createSEOAssessor();
  }
  /**
   * Sets a custom related keyword assessor class.
   *
   * @param {RelatedKeywordAssessor}   RelatedKeywordAssessorClass A related keyword assessor class.
   * @param {string}  customAnalysisType          The type of analysis.
   * @param {Object}  customAssessorOptions       The options to use.
   *
   * @returns {void}
   */
  setCustomRelatedKeywordAssessorClass(a, t, n) {
    this._CustomRelatedKeywordAssessorClasses[t] = a, this._CustomRelatedKeywordAssessorOptions[t] = n, this._relatedKeywordAssessor = this.createRelatedKeywordsAssessor();
  }
  /**
   * Sets a custom cornerstone related keyword assessor class.
   *
   * @param {CornerstoneRelatedKeywordAssessor}   CornerstoneRelatedKeywordAssessorClass  A cornerstone related keyword assessor class.
   * @param {string}  customAnalysisType                      The type of analysis.
   * @param {Object}  customAssessorOptions                   The options to use.
   *
   * @returns {void}
   */
  setCustomCornerstoneRelatedKeywordAssessorClass(a, t, n) {
    this._CustomCornerstoneRelatedKeywordAssessorClasses[t] = a, this._CustomCornerstoneRelatedKeywordAssessorOptions[t] = n, this._relatedKeywordAssessor = this.createRelatedKeywordsAssessor();
  }
  /**
   * Sets the options to use for the Inclusive language analysis.
   *
   * @param {{infoLinks: {}}} options The options to use.
   *
   * @returns {void}
   */
  setInclusiveLanguageOptions(a) {
    this._inclusiveLanguageOptions = a;
  }
  /**
   * Registers this web worker with the scope passed to its constructor.
   *
   * @returns {void}
   */
  register() {
    this._scope.onmessage = this.handleMessage, this._scope.analysisWorker = this;
  }
  /**
   * Receives the post message and determines the action.
   *
   * See: https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage
   *
   * @param {MessageEvent} event              The post message event.
   * @param {Object}       event.data         The data object.
   * @param {string}       event.data.type    The action type.
   * @param {string}       event.data.id      The request id.
   * @param {string}       event.data.payload The payload of the action.
   *
   * @returns {void}
   */
  handleMessage({
    data: {
      type: a,
      id: t,
      payload: n
    }
  }) {
    switch (n = eP.default.parse(n), Ro.debug("AnalysisWebWorker incoming:", a, t, n), a) {
      case "initialize":
        this.initialize(t, n), this._scheduler.startPolling();
        break;
      case "analyze":
        this._scheduler.schedule({
          id: t,
          execute: this.analyze,
          done: this.analyzeDone,
          data: n,
          type: a
        });
        break;
      case "analyzeRelatedKeywords":
        this._scheduler.schedule({
          id: t,
          execute: this.analyzeRelatedKeywords,
          done: this.analyzeRelatedKeywordsDone,
          data: n,
          type: a
        });
        break;
      case "loadScript":
        this._scheduler.schedule({
          id: t,
          execute: this.loadScript,
          done: this.loadScriptDone,
          data: n,
          type: a
        });
        break;
      case "runResearch":
        this._scheduler.schedule({
          id: t,
          execute: this.runResearch,
          done: this.runResearchDone,
          data: n
        });
        break;
      case "customMessage": {
        const r = n.name;
        if (r && this._registeredMessageHandlers[r]) {
          this._scheduler.schedule({
            id: t,
            execute: this.customMessage,
            done: this.customMessageDone,
            data: n,
            type: a
          });
          break;
        }
        this.customMessageDone(t, {
          error: new Error("No message handler registered for messages with name: " + r)
        });
        break;
      }
      default:
        console.warn("AnalysisWebWorker unrecognized action:", a);
    }
  }
  /**
   * Initializes the appropriate content assessor.
   *
   * @returns {ContentAssessor|null} The chosen content assessor.
   */
  createContentAssessor() {
    const {
      contentAnalysisActive: a,
      useCornerstone: t,
      customAnalysisType: n
    } = this._configuration;
    if (a === !1)
      return null;
    let r;
    return t === !0 ? (r = this._CustomCornerstoneContentAssessorClasses[n] ? new this._CustomCornerstoneContentAssessorClasses[n](this._researcher, this._CustomCornerstoneContentAssessorOptions[n]) : new ZIa.default(this._researcher), this._registeredAssessments.forEach(({
      name: o,
      assessment: l,
      type: u
    }) => {
      (0, ea.isUndefined)(r.getAssessment(o)) && u === "cornerstoneReadability" && r.addAssessment(o, l);
    })) : (r = this._CustomContentAssessorClasses[n] ? new this._CustomContentAssessorClasses[n](this._researcher, this._CustomContentAssessorOptions[n]) : new XIa.default(this._researcher), this._registeredAssessments.forEach(({
      name: o,
      assessment: l,
      type: u
    }) => {
      (0, ea.isUndefined)(r.getAssessment(o)) && u === "readability" && r.addAssessment(o, l);
    })), r;
  }
  /**
   * Initializes the appropriate SEO assessor.
   *
   * @returns {SEOAssessor|null} The chosen SEO assessor.
   */
  createSEOAssessor() {
    const {
      keywordAnalysisActive: a,
      useCornerstone: t,
      useTaxonomy: n,
      customAnalysisType: r
    } = this._configuration;
    if (a === !1)
      return null;
    let o;
    return n === !0 ? o = new sCa.default(this._researcher) : t === !0 ? o = this._CustomCornerstoneSEOAssessorClasses[r] ? new this._CustomCornerstoneSEOAssessorClasses[r](this._researcher, this._CustomCornerstoneSEOAssessorOptions[r]) : new eCa.default(this._researcher) : o = this._CustomSEOAssessorClasses[r] ? new this._CustomSEOAssessorClasses[r](this._researcher, this._CustomSEOAssessorOptions[r]) : new rCa.default(this._researcher), this._registeredAssessments.forEach(({
      name: l,
      assessment: u,
      type: c
    }) => {
      (0, ea.isUndefined)(o.getAssessment(l)) && c === "seo" && o.addAssessment(l, u);
    }), o;
  }
  /**
   * Initializes the appropriate inclusive language assessor.
   *
   * @returns {InclusiveLanguageAssessor|null} The chosen inclusive language assessor.
   */
  createInclusiveLanguageAssessor() {
    const {
      inclusiveLanguageAnalysisActive: a
    } = this._configuration;
    return a ? new aCa.default(this._researcher, this._inclusiveLanguageOptions) : null;
  }
  /**
   * Initializes the appropriate SEO assessor for related keywords.
   *
   * @returns {RelatedKeywordAssessor|null} The chosen related keyword assessor.
   */
  createRelatedKeywordsAssessor() {
    const {
      keywordAnalysisActive: a,
      useCornerstone: t,
      useTaxonomy: n,
      customAnalysisType: r
    } = this._configuration;
    if (a === !1)
      return null;
    let o;
    return n === !0 ? o = new nCa.default(this._researcher) : t === !0 ? o = this._CustomCornerstoneRelatedKeywordAssessorClasses[r] ? new this._CustomCornerstoneRelatedKeywordAssessorClasses[r](this._researcher, this._CustomCornerstoneRelatedKeywordAssessorOptions[r]) : new JIa.default(this._researcher) : o = this._CustomRelatedKeywordAssessorClasses[r] ? new this._CustomRelatedKeywordAssessorClasses[r](this._researcher, this._CustomRelatedKeywordAssessorOptions[r]) : new tCa.default(this._researcher), this._registeredAssessments.forEach(({
      name: l,
      assessment: u,
      type: c
    }) => {
      (0, ea.isUndefined)(o.getAssessment(l)) && c === "relatedKeyphrase" && o.addAssessment(l, u);
    }), o;
  }
  /**
   * Sends a message.
   *
   * @param {string} type      The message type.
   * @param {number} id        The request id.
   * @param {Object} [payload] The payload to deliver.
   *
   * @returns {void}
   */
  send(a, t, n = {}) {
    Ro.debug("AnalysisWebWorker outgoing:", a, t, n), n = eP.default.serialize(n), this._scope.postMessage({
      type: a,
      id: t,
      payload: n
    });
  }
  /**
   * Checks which assessors should update giving a configuration.
   *
   * @param {Object} configuration The configuration to check.
   * @param {ContentAssessor|null} [contentAssessor=null] The content assessor.
   * @param {SEOAssessor|null} [seoAssessor=null] The SEO assessor.
   * @param {InclusiveLanguageAssessor|null} [inclusiveLanguageAssessor=null] The inclusive language assessor.
   *
   * @returns {{seo: boolean, readability: boolean, inclusiveLanguage: boolean}} Whether each assessor should update.
   */
  static shouldAssessorsUpdate(a, t = null, n = null, r = null) {
    const o = ["contentAnalysisActive", "useCornerstone", "locale", "translations", "customAnalysisType"], l = ["keywordAnalysisActive", "useCornerstone", "useTaxonomy", "locale", "translations", "researchData", "customAnalysisType"], u = ["inclusiveLanguageAnalysisActive", "locale", "translations"], c = Object.keys(a);
    return {
      readability: (0, ea.isNull)(t) || (0, lk.default)(c, o),
      seo: (0, ea.isNull)(n) || (0, lk.default)(c, l),
      inclusiveLanguage: (0, ea.isNull)(r) || (0, lk.default)(c, u)
    };
  }
  /**
   * Configures the analysis worker.
   *
   * @param {number}   id                                     The request id.
   * @param {Object}   configuration                          The configuration object.
   * @param {boolean}  [configuration.contentAnalysisActive]  Whether the content analysis is active.
   * @param {boolean}  [configuration.keywordAnalysisActive]  Whether the keyword analysis is active.
   * @param {boolean}  [configuration.useCornerstone]         Whether the paper is cornerstone or not.
   * @param {boolean}  [configuration.useTaxonomy]            Whether the taxonomy assessor should be used.
   * @param {string}   [configuration.locale]                 The locale used in the seo assessor.
   * @param {Object}   [configuration.translations]           The translation strings.
   * @param {Object}   [configuration.researchData]           Extra research data.
   * @param {Object}   [configuration.defaultQueryParams]     The default query params for the Shortlinker.
   * @param {string}   [configuration.logLevel]               Log level, see: https://github.com/pimterry/loglevel#documentation
   * @param {string[]} [configuration.enabledFeatures]        A list of feature name flags of the experimental features to enable.
   *
   * @returns {void}
   */
  initialize(a, t) {
    const n = yE.shouldAssessorsUpdate(t, this._contentAssessor, this._seoAssessor, this._inclusiveLanguageAssessor);
    (0, ea.has)(t, "translations") && Object.values(t.translations).forEach((r) => {
      if (r) {
        const {
          domain: o,
          locale_data: l
        } = r;
        (0, HIa.setLocaleData)(l[o], o);
      }
    }), (0, ea.has)(t, "researchData") && ((0, ea.forEach)(t.researchData, (r, o) => {
      this._researcher.addResearchData(o, r);
    }), delete t.researchData), (0, ea.has)(t, "defaultQueryParams") && ((0, VIa.configureShortlinker)({
      params: t.defaultQueryParams
    }), delete t.defaultQueryParams), (0, ea.has)(t, "logLevel") && (Ro.setLevel(t.logLevel, !1), delete t.logLevel), (0, ea.has)(t, "enabledFeatures") && ((0, UIa.enableFeatures)(t.enabledFeatures), delete t.enabledFeatures), this._configuration = (0, ea.merge)(this._configuration, t), n.readability && (this._contentAssessor = this.createContentAssessor()), n.seo && (this._seoAssessor = this.createSEOAssessor(), this._relatedKeywordAssessor = this.createRelatedKeywordsAssessor()), n.inclusiveLanguage && (this._inclusiveLanguageAssessor = this.createInclusiveLanguageAssessor()), this.clearCache(), this.send("initialize:done", a);
  }
  /**
   * Registers a custom assessor.
   *
   * @param {string} name The name of the assessor.
   * @param {Function} AssessorClass The assessor class to instantiate.
   * @param {Function} shouldUpdate Function that checks whether the assessor should update.
   *
   * @returns {void}
   */
  registerAssessor(a, t, n) {
    const r = new t(this._researcher);
    this.additionalAssessors[a] = {
      assessor: r,
      shouldUpdate: n
    };
  }
  /**
   * Register an assessment for a specific plugin.
   *
   * @param {string}   name       The name of the assessment.
   * @param {Assessment} assessment The assessment to add.
   * @param {string}   pluginName The name of the plugin associated with the assessment.
   * @param {string}   type       The type of the assessment. The default type is "seo".
   *
   * @returns {boolean} Whether registering the assessment was successful.
   */
  registerAssessment(a, t, n, r = "seo") {
    const {
      useCornerstone: o
    } = this._configuration;
    if (!(0, ea.isString)(a))
      throw new Sn.default("Failed to register assessment for plugin " + n + ". Expected parameter `name` to be a string.");
    if (!(0, ea.isObject)(t))
      throw new Sn.default("Failed to register assessment for plugin " + n + ". Expected parameter `assessment` to be a function.");
    if (!(0, ea.isString)(n))
      throw new Sn.default("Failed to register assessment for plugin " + n + ". Expected parameter `pluginName` to be a string.");
    const l = n + "-" + a;
    return this._seoAssessor !== null && r === "seo" && this._seoAssessor.addAssessment(l, t), this._contentAssessor !== null && r === "readability" && this._contentAssessor.addAssessment(l, t), this._contentAssessor !== null && r === "cornerstoneReadability" && o && this._contentAssessor.addAssessment(l, t), this._relatedKeywordAssessor !== null && r === "relatedKeyphrase" && this._relatedKeywordAssessor.addAssessment(l, t), this._registeredAssessments.push({
      combinedName: l,
      assessment: t,
      type: r
    }), this.refreshAssessment(a, n), !0;
  }
  /**
   * Register a message handler for a specific plugin.
   *
   * @param {string}   name       The name of the message handler.
   * @param {function} handler    The function to run as a message handler.
   * @param {string}   pluginName The name of the plugin associated with the message handler.
   *
   * @returns {boolean} Whether registering the message handler was successful.
   */
  registerMessageHandler(a, t, n) {
    if (!(0, ea.isString)(a))
      throw new Sn.default("Failed to register handler for plugin " + n + ". Expected parameter `name` to be a string.");
    if (!(0, ea.isObject)(t))
      throw new Sn.default("Failed to register handler for plugin " + n + ". Expected parameter `handler` to be a function.");
    if (!(0, ea.isString)(n))
      throw new Sn.default("Failed to register handler for plugin " + n + ". Expected parameter `pluginName` to be a string.");
    return a = n + "-" + a, this._registeredMessageHandlers[a] = t, !0;
  }
  /**
   * Refreshes an assessment in the analysis.
   *
   * Custom assessments can use this to mark their assessment as needing a
   * refresh.
   *
   * @param {string} name The name of the assessment.
   * @param {string} pluginName The name of the plugin associated with the assessment.
   *
   * @returns {boolean} Whether refreshing the assessment was successful.
   */
  refreshAssessment(a, t) {
    if (!(0, ea.isString)(a))
      throw new Sn.default("Failed to refresh assessment for plugin " + t + ". Expected parameter `name` to be a string.");
    if (!(0, ea.isString)(t))
      throw new Sn.default("Failed to refresh assessment for plugin " + t + ". Expected parameter `pluginName` to be a string.");
    return this.clearCache(), !0;
  }
  /**
   * Clears the worker cache to force a new analysis.
   *
   * @returns {void}
   */
  clearCache() {
    this._paper = null;
  }
  /**
   * Changes the locale in the configuration.
   *
   * If the locale is different:
   * - Update the configuration locale.
   * - Create the content assessor.
   *
   * @param {string} locale The locale to set.
   *
   * @returns {void}
   */
  setLocale(a) {
    this._configuration.locale !== a && (this._configuration.locale = a, this._contentAssessor = this.createContentAssessor());
  }
  /**
   * Checks if the paper contains changes that are used for readability.
   *
   * @param {Paper} paper The paper to check against the cached paper.
   *
   * @returns {boolean} True if there are changes detected.
   */
  shouldReadabilityUpdate(a) {
    return this._paper === null || this._paper.getText() !== a.getText() || this._paper.getKeyword() !== a.getKeyword() || !(0, ea.isEqual)(this._paper._attributes.wpBlocks, a._attributes.wpBlocks) ? !0 : this._paper.getLocale() !== a.getLocale();
  }
  /**
   * Checks if the paper contains changes that are used for inclusive language analysis.
   *
   * @param {Paper} paper The paper to check against the cached paper.
   *
   * @returns {boolean} True if there are changes detected.
   */
  shouldInclusiveLanguageUpdate(a) {
    return this._paper === null || this._paper.getText() !== a.getText() || this._paper.getTextTitle() !== a.getTextTitle() ? !0 : this._paper.getLocale() !== a.getLocale();
  }
  /**
   * Updates the results for the inclusive language assessor.
   *
   * @param {boolean} shouldInclusiveLanguageUpdate Whether the results of the inclusive language assessor should be updated.
   * @returns {void}
   */
  updateInclusiveLanguageAssessor(a) {
    this._configuration.inclusiveLanguageAnalysisActive && this._inclusiveLanguageAssessor && a && (this._inclusiveLanguageAssessor.assess(this._paper), this._results.inclusiveLanguage = {
      results: this._inclusiveLanguageAssessor.results,
      score: this._inclusiveLanguageAssessor.calculateOverallScore()
    });
  }
  /**
   * Checks if the related keyword contains changes that are used for seo.
   *
   * @param {string} key                     The identifier of the related keyword.
   * @param {Object} relatedKeyword          The related keyword object.
   * @param {string} relatedKeyword.keyword  The keyword.
   * @param {string} relatedKeyword.synonyms The synonyms.
   *
   * @returns {boolean} True if there are changes detected.
   */
  shouldSeoUpdate(a, {
    keyword: t,
    synonyms: n
  }) {
    return (0, ea.isUndefined)(this._relatedKeywords[a]) || this._relatedKeywords[a].keyword !== t ? !0 : this._relatedKeywords[a].synonyms !== n;
  }
  /**
   * Checks whether the additional assessor should be updated.
   *
   * @param {Paper} paper The paper to check.
   * @returns {Object} An object containing the information whether each additional assessor needs to be updated.
   */
  shouldAdditionalAssessorsUpdate(a) {
    const t = {};
    return Object.keys(this.additionalAssessors).forEach((n) => {
      t[n] = this.additionalAssessors[n].shouldUpdate(this._paper, a);
    }), t;
  }
  /**
   * Updates the results for the additional assessor.
   *
   * @param {Object} shouldCustomAssessorsUpdate Whether the results of the additional assessor should be updated.
   * @returns {void}
   */
  updateAdditionalAssessors(a) {
    Object.keys(this.additionalAssessors).forEach((t) => {
      const {
        assessor: n
      } = this.additionalAssessors[t];
      (!this._results[t] || a[t]) && (n.assess(this._paper), this._results[t] = {
        results: n.results,
        score: n.calculateOverallScore()
      });
    });
  }
  /**
   * Runs analyses on a paper.
   *
   * The paper includes the keyword and synonyms data. However, this is
   * possibly just one instance of these. From here we are going to split up
   * this data and keep track of the different sets of keyword-synonyms and
   * their results.
   *
   * @param {number} id                        The request id.
   * @param {Object} payload                   The payload object.
   * @param {Paper} payload.paper              The paper to analyze.
   * @param {Object} [payload.relatedKeywords] The related keywords.
   *
   * @returns {Object} The result, may not contain readability or seo.
   */
  async analyze(a, {
    paper: t,
    relatedKeywords: n = {}
  }) {
    const r = this._paper === null || !this._paper.equals(t), o = this.shouldReadabilityUpdate(t), l = this.shouldInclusiveLanguageUpdate(t), u = this.shouldAdditionalAssessorsUpdate(t);
    if (r) {
      this._paper = t, this._researcher.setPaper(this._paper);
      const c = new JC.default(this._researcher), f = this._paper._attributes && this._paper._attributes.shortcodes;
      this._paper.setTree((0, ZC.build)(this._paper, c, f)), this.setLocale(this._paper.getLocale());
    }
    if (this._configuration.keywordAnalysisActive && this._seoAssessor && (r && (this._results.seo[""] = await this.assess(this._paper, this._seoAssessor)), !(0, ea.isEmpty)(n))) {
      const c = Object.keys(n);
      (await this.assessRelatedKeywords(t, n)).forEach((y) => {
        this._results.seo[y.key] = y.results;
      }), c.length > 1 && (this._results.seo = (0, ea.pickBy)(this._results.seo, (y, z) => (0, ea.includes)(c, z) || z === ""));
    }
    return this._configuration.contentAnalysisActive && this._contentAssessor && o && (this._contentAssessor.getScoreAggregator().setLocale(this._configuration.locale), this._results.readability = await this.assess(this._paper, this._contentAssessor)), this.updateInclusiveLanguageAssessor(l), this.updateAdditionalAssessors(u), this._results;
  }
  /**
   * Assesses a given paper
   * using an original Assessor (that works on a string representation of the text).
   *
   * The results of both analyses are combined using the given score aggregator.
   *
   * @param {Paper}                      paper The paper to analyze.
   * @param {Assessor}                   assessor     The original assessor.
   *
   * @returns {Promise<{score: number, results: AssessmentResult[]}>} The analysis results.
   */
  async assess(a, t) {
    t.assess(a);
    const n = t.results, r = t.getScoreAggregator().aggregate(n);
    return {
      results: n,
      score: r
    };
  }
  /**
   * Assesses the SEO of a paper on the given related keyphrases and their synonyms.
   *
   * The old assessor is used and their results are combined.
   *
   * @param {Paper}                 paper           The paper to analyze.
   * @param {Object}                relatedKeywords The related keyphrases to use in the analysis.
   *
   * @returns {Promise<[{results: {score: number, results: AssessmentResult[]}, key: string}]>} The results, one for each keyphrase.
   */
  async assessRelatedKeywords(a, t) {
    const n = Object.keys(t);
    return await Promise.all(n.map((r) => {
      this._relatedKeywords[r] = t[r];
      const o = YIa.default.parse({
        ...a.serialize(),
        keyword: this._relatedKeywords[r].keyword,
        synonyms: this._relatedKeywords[r].synonyms
      });
      return this.assess(o, this._relatedKeywordAssessor).then((l) => ({
        key: r,
        results: l
      }));
    }));
  }
  /**
   * Loads a new script from an external source.
   *
   * @param {number} id  The request id.
   * @param {string} url The url of the script to load;
   *
   * @returns {Object} An object containing whether the url was loaded, the url and possibly an error message.
   */
  loadScript(a, {
    url: t
  }) {
    if ((0, ea.isUndefined)(t))
      return {
        loaded: !1,
        url: t,
        message: "Load Script was called without an URL."
      };
    try {
      this._scope.importScripts(t);
    } catch (n) {
      return {
        loaded: !1,
        url: t,
        message: n.message
      };
    }
    return {
      loaded: !0,
      url: t
    };
  }
  /**
   * Sends the load script result back.
   *
   * @param {number} id     The request id.
   * @param {Object} result The result.
   *
   * @returns {void}
   */
  loadScriptDone(a, t) {
    if (!t.loaded) {
      this.send("loadScript:failed", a, t);
      return;
    }
    this.send("loadScript:done", a, t);
  }
  /**
   * Sends the analyze result back.
   *
   * @param {number} id     The request id.
   * @param {Object} result The result.
   *
   * @returns {void}
   */
  analyzeDone(a, t) {
    if (t.error) {
      this.send("analyze:failed", a, t);
      return;
    }
    this.send("analyze:done", a, t);
  }
  /**
   * Sends the analyze related keywords result back.
   *
   * @param {number} id     The request id.
   * @param {Object} result The result.
   *
   * @returns {void}
   */
  analyzeRelatedKeywordsDone(a, t) {
    if (t.error) {
      this.send("analyzeRelatedKeywords:failed", a, t);
      return;
    }
    this.send("analyzeRelatedKeywords:done", a, t);
  }
  /**
   * Handle a custom message using the registered handler.
   *
   * @param {number} id   The request id.
   * @param {string} name The name of the message.
   * @param {Object} data The data of the message.
   *
   * @returns {Object} An object containing either success and data or an error.
   */
  customMessage(a, {
    name: t,
    data: n
  }) {
    try {
      return {
        success: !0,
        data: this._registeredMessageHandlers[t](n)
      };
    } catch (r) {
      return {
        error: r
      };
    }
  }
  /**
   * Send the result of a custom message back.
   *
   * @param {number} id     The request id.
   * @param {Object} result The result.
   *
   * @returns {void}
   */
  customMessageDone(a, t) {
    if (t.success) {
      this.send("customMessage:done", a, t.data);
      return;
    }
    this.send("customMessage:failed", t.error);
  }
  /**
   * Registers custom research to the researcher.
   *
   * @param {string} name         The name of the research.
   * @param {function} research   The research function to add.
   *
   * @returns {void}
   */
  registerResearch(a, t) {
    if (!(0, ea.isString)(a))
      throw new Sn.default("Failed to register the custom research. Expected parameter `name` to be a string.");
    if (!(0, ea.isObject)(t))
      throw new Sn.default("Failed to register the custom research. Expected parameter `research` to be a function.");
    const n = this._researcher;
    n.hasResearch(a) || n.addResearch(a, t);
  }
  /**
   * Runs the specified research in the worker. Optionally pass a paper.
   *
   * @param {number} id     The request id.
   * @param {string} name   The name of the research to run.
   * @param {Paper} [paper] The paper to run the research on if it shouldn't
   *                        be run on the latest paper.
   *
   * @returns {Object} The result of the research.
   */
  runResearch(a, {
    name: t,
    paper: n = null
  }) {
    const r = this._researcher.getData("morphology"), o = this._researcher;
    if (n !== null && (o.setPaper(n), o.addResearchData("morphology", r), n.getTree() === null)) {
      const l = new JC.default(o), u = n._attributes && n._attributes.shortcodes;
      n.setTree((0, ZC.build)(n, l, u));
    }
    return o.getResearch(t);
  }
  /**
   * Send the result of a custom message back.
   *
   * @param {number} id     The request id.
   * @param {Object} result The result.
   *
   * @returns {void}
   */
  runResearchDone(a, t) {
    if (t.error) {
      this.send("runResearch:failed", a, t);
      return;
    }
    this.send("runResearch:done", a, t);
  }
  /**
   * Registers a custom helper to the researcher.
   *
   * @param {string} name       The name of the helper.
   * @param {function} helper   The helper function to add.
   *
   * @returns {void}
   */
  registerHelper(a, t) {
    if (!(0, ea.isString)(a))
      throw new Sn.default("Failed to register the custom helper. Expected parameter `name` to be a string.");
    if (!(0, ea.isObject)(t))
      throw new Sn.default("Failed to register the custom helper. Expected parameter `helper` to be a function.");
    const n = this._researcher;
    n.hasHelper(a) || n.addHelper(a, t);
  }
  /**
   * Registers a configuration to the researcher.
   *
   * @param {string}  name                The name of the researcher configuration.
   * @param {*}       researcherConfig    The researcher configuration to add.
   *
   * @returns {void}
   */
  registerResearcherConfig(a, t) {
    if (!(0, ea.isString)(a))
      throw new Sn.default("Failed to register the custom researcher config. Expected parameter `name` to be a string.");
    if ((0, ea.isUndefined)(t) || (0, ea.isEmpty)(t))
      throw new KIa.default("Failed to register the custom researcher config. Expected parameter `researcherConfig` to be defined.");
    const n = this._researcher;
    n.hasConfig(a) || n.addConfig(a, t);
  }
}
Lm.default = yE;
var Ch = {}, Ph = {}, Rh = {}, Dh = {};
Object.defineProperty(Dh, "__esModule", {
  value: !0
});
Dh.default = void 0;
class iCa {
  /**
   * Initializes a result.
   *
   * @param {Object} result The result.
   * @param {Object} [data] Optional extra data.
   */
  constructor(a, t = {}) {
    this.result = a, this.data = t;
  }
}
Dh.default = iCa;
Object.defineProperty(Rh, "__esModule", {
  value: !0
});
Rh.default = void 0;
var aP = oCa(Dh);
function oCa(e) {
  return e && e.__esModule ? e : { default: e };
}
class lCa {
  /**
   * Initializes a request.
   *
   * @param {Function} resolve The resolve function.
   * @param {Function} reject  The reject function.
   * @param {Object}  [data]   Optional extra data.
   */
  constructor(a, t, n = {}) {
    this._resolve = a, this._reject = t, this._data = n;
  }
  /**
   * Resolves the request with a result.
   *
   * @param {Object} [payload] Optional payload.
   *
   * @returns {void}
   */
  resolve(a = {}) {
    const t = new aP.default(a, this._data);
    this._resolve(t);
  }
  /**
   * Rejects the request with a result.
   *
   * @param {Object} [payload] Optional payload.
   *
   * @returns {void}
   */
  reject(a = {}) {
    const t = new aP.default(a, this._data);
    this._reject(t);
  }
}
Rh.default = lCa;
Object.defineProperty(Ph, "__esModule", {
  value: !0
});
Ph.default = void 0;
var dCa = uCa(Rh);
function uCa(e) {
  return e && e.__esModule ? e : { default: e };
}
Ph.default = dCa.default;
Object.defineProperty(Ch, "__esModule", {
  value: !0
});
Ch.default = void 0;
var cCa = jM(Ph), tP = jM(Wc);
function jM(e) {
  return e && e.__esModule ? e : { default: e };
}
class pCa {
  /**
   * Initializes the AnalysisWorkerWrapper class.
   *
   * @param {Worker} worker The worker to wrap.
   *
   * @constructor
   */
  constructor(a) {
    this._worker = a, this._requests = {}, this._autoIncrementedRequestId = -1, this.initialize = this.initialize.bind(this), this.analyze = this.analyze.bind(this), this.analyzeRelatedKeywords = this.analyzeRelatedKeywords.bind(this), this.loadScript = this.loadScript.bind(this), this.sendMessage = this.sendMessage.bind(this), this.runResearch = this.runResearch.bind(this), this.handleMessage = this.handleMessage.bind(this), this.handleMessageError = this.handleMessageError.bind(this), this.handleError = this.handleError.bind(this), this._worker.onmessage = this.handleMessage, this._worker.onmessageerror = this.handleMessageError, this._worker.onerror = this.handleError;
  }
  /**
   * Receives the messages and determines the action.
   *
   * See: https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage
   *
   * @param {MessageEvent} event              The post message event.
   * @param {Object}       event.data         The data object.
   * @param {string}       event.data.type    The action type.
   * @param {number}       event.data.id      The request id.
   * @param {string}       event.data.payload The payload of the action.
   *
   * @returns {void}
   */
  handleMessage({
    data: {
      type: a,
      id: t,
      payload: n
    }
  }) {
    const r = this._requests[t];
    if (!r) {
      console.warn("AnalysisWebWorker unmatched response:", n);
      return;
    }
    switch (n = tP.default.parse(n), a) {
      case "initialize:done":
      case "loadScript:done":
      case "customMessage:done":
      case "runResearch:done":
      case "analyzeRelatedKeywords:done":
      case "analyze:done":
        r.resolve(n);
        break;
      case "analyze:failed":
      case "loadScript:failed":
      case "customMessage:failed":
      case "runResearch:failed":
      case "analyzeRelatedKeywords:failed":
        r.reject(n);
        break;
      default:
        console.warn("AnalysisWebWorker unrecognized action:", a);
    }
    delete this._requests[t];
  }
  /**
   * Receives the message errors.
   *
   * See: https://developer.mozilla.org/en-US/docs/Web/Events/messageerror
   *
   * @param {MessageEvent} event The message event for the error that
   *                             occurred.
   *
   * @returns {void}
   */
  handleMessageError(a) {
    console.warn("AnalysisWebWorker message error:", a);
  }
  /**
   * Receives the errors.
   *
   * See:
   * https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror
   *
   * @param {Error} event The error event.
   *
   * @returns {void}
   */
  handleError(a) {
    const t = Object.keys(this._requests), n = t[t.length - 1], r = this._requests[n];
    if (!r) {
      console.error("AnalysisWebWorker error:", a);
      return;
    }
    r.reject(a);
  }
  /**
   * Increments the request id.
   *
   * @returns {number} The incremented id.
   */
  createRequestId() {
    return this._autoIncrementedRequestId++, this._autoIncrementedRequestId;
  }
  /**
   * Creates a new request inside a Promise.
   *
   * @param {number} id     The request id.
   * @param {Object} [data] Optional extra data.
   *
   * @returns {Promise} The callback promise.
   */
  createRequestPromise(a, t = {}) {
    return new Promise((n, r) => {
      this._requests[a] = new cCa.default(n, r, t);
    });
  }
  /**
   * Sends a request to the worker and returns a promise that will resolve or reject once the worker finishes.
   *
   * @param {string} action  The action of the request.
   * @param {Object} payload The payload of the request.
   * @param {Object} [data]  Optional extra data.
   *
   * @returns {Promise} A promise that will resolve or reject once the worker finishes.
   */
  sendRequest(a, t, n = {}) {
    const r = this.createRequestId(), o = this.createRequestPromise(r, n);
    return this.send(a, r, t), o;
  }
  /**
   * Sends a message to the worker.
   *
   * @param {string} type      The message type.
   * @param {number} id        The request id.
   * @param {Object} [payload] The payload to deliver.
   *
   * @returns {void}
   */
  send(a, t, n = {}) {
    n = tP.default.serialize(n), this._worker.postMessage({
      type: a,
      id: t,
      payload: n
    });
  }
  /**
   * Initializes the worker with a configuration.
   *
   * @param {Object} configuration The configuration to initialize the worker
   *                               with.
   *
   * @returns {Promise} The promise of initialization.
   */
  initialize(a) {
    return this.sendRequest("initialize", a);
  }
  /**
   * Analyzes the paper.
   *
   * @param {Object} paper           The paper to analyze.
   * @param {Object} relatedKeywords The related keywords.
   *
   * @returns {Promise} The promise of analyses.
   */
  analyzeRelatedKeywords(a, t = {}) {
    return this.sendRequest("analyzeRelatedKeywords", {
      paper: a,
      relatedKeywords: t
    });
  }
  /**
   * Analyzes the paper.
   *
   * @param {Object} paper           The paper to analyze.
   *
   * @returns {Promise} The promise of analyses.
   */
  analyze(a) {
    return this.sendRequest("analyze", {
      paper: a
    });
  }
  /**
   * Imports a script to the worker.
   *
   * @param {string} url The relative url to the script to be loaded.
   *
   * @returns {Promise} The promise of the script import.
   */
  loadScript(a) {
    return this.sendRequest("loadScript", {
      url: a
    });
  }
  /**
   * Sends a custom message to the worker.
   *
   * @param {string} name       The name of the message.
   * @param {string} data       The data of the message.
   * @param {string} pluginName The plugin that registered this type of message.
   *
   * @returns {Promise} The promise of the custom message.
   */
  sendMessage(a, t, n) {
    return a = n + "-" + a, this.sendRequest("customMessage", {
      name: a,
      data: t
    }, t);
  }
  /**
   * Runs the specified research in the worker. Optionally pass a paper.
   *
   * @param {string} name    The name of the research to run.
   * @param {Paper} [paper] The paper to run the research on if it shouldn't
   *                         be run on the latest paper.
   *
   * @returns {Promise} The promise of the research.
   */
  runResearch(a, t = null) {
    return this.sendRequest("runResearch", {
      name: a,
      paper: t
    });
  }
}
Ch.default = pCa;
var xs = {};
Object.defineProperty(xs, "__esModule", {
  value: !0
});
xs.createBlobScript = SM;
xs.createBlobURL = IM;
xs.createExceptionHandler = xM;
xs.createWorker = CM;
xs.createWorkerFallback = i0;
xs.default = void 0;
xs.isSameOrigin = OM;
function xM(e) {
  return `
		try {
			${e}
		} catch ( error ) {
			console.log( "Error occurred during worker initialization:" );
			console.log( error );
		}
	`;
}
function SM(e) {
  return `
		self.yoastOriginalUrl = '${e}';
		importScripts('${e}');
	`;
}
function OM(e, a) {
  const t = new URL(e, window.location.origin), n = new URL(a, window.location.origin);
  return t.hostname === n.hostname && t.port === n.port && t.protocol === n.protocol;
}
function IM(e) {
  const a = window.URL || window.webkitURL, t = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder, n = xM(SM(e));
  let r;
  try {
    r = new Blob([n], {
      type: "application/javascript"
    });
  } catch {
    const l = new t();
    l.append(n), r = l.getBlob("application/javascript");
  }
  return a.createObjectURL(r);
}
function i0(e) {
  const a = IM(e);
  return new Worker(a);
}
function CM(e) {
  if (!OM(window.location, e) || window.wpseoAdminL10n && window.wpseoAdminL10n.isWebStoriesIntegrationActive === "1")
    return i0(e);
  let a = null;
  try {
    a = new Worker(e);
  } catch {
    a = i0(e);
  }
  return a;
}
xs.default = CM;
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "AnalysisWebWorker", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  }), Object.defineProperty(e, "AnalysisWorkerWrapper", {
    enumerable: !0,
    get: function() {
      return t.default;
    }
  }), Object.defineProperty(e, "createWorker", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  });
  var a = r(Lm), t = r(Ch), n = r(xs);
  function r(o) {
    return o && o.__esModule ? o : { default: o };
  }
})(OR);
var Bi = {}, Nh = {};
Object.defineProperty(Nh, "__esModule", {
  value: !0
});
Nh.default = void 0;
var nP = K, gCa = zE(Ze), mCa = zE(mt), fCa = zE(qe), rP = Ce;
function zE(e) {
  return e && e.__esModule ? e : { default: e };
}
class hCa extends gCa.default {
  /**
   * Constructs a new TextAlignmentAssessment.
   *
   * @param {object} config The configuration to use.
   * @param {string} [config.urlTitle] The URL to the article about this assessment.
   * @param {string} [config.urlCallToAction] The URL to the help article for this assessment.
   * @param {object} [config.scores] The scores to use for the assessment.
   * @param {number} [config.scores.bad] The score to return if the text has an over-use of center-alignment.
   * @param {object} [config.callbacks] The callbacks to use for the assessment.
   * @param {function} [config.callbacks.getResultTexts] The function that returns the result texts.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      urlTitle: "https://yoa.st/assessment-alignment",
      urlCallToAction: "https://yoa.st/assessment-alignment-cta",
      scores: {
        bad: 2
      },
      callbacks: {}
    };
    this._config = (0, nP.merge)(t, a), this.identifier = "textAlignment";
  }
  /**
   * Executes the assessment and returns a result.
   *
   * @param {Paper}       paper       The Paper object to assess.
   * @param {Researcher}  researcher  The researcher used in the assessment.
   *
   * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
   */
  getResult(a, t) {
    const n = t.getResearch("getLongCenterAlignedTexts");
    this.numberOfLongCenterAlignedTexts = n.length;
    const r = new fCa.default();
    if (this.numberOfLongCenterAlignedTexts === 0)
      return r;
    const o = this.calculateResult(a, this.numberOfLongCenterAlignedTexts);
    return r.setScore(o.score), r.setText(o.resultText), r.setHasMarks(!0), r;
  }
  /**
   * Creates the mark objects for all long center-aligned texts.
   *
   * @param {Paper}       paper        The paper to use for the assessment.
   * @param {Researcher}  researcher   The researcher used in the assessment.
   *
   * @returns {Mark[]} Mark objects for all long center-aligned texts.
   */
  getMarks(a, t) {
    return t.getResearch("getLongCenterAlignedTexts").map((r) => new mCa.default({
      position: {
        clientId: r.clientId || "",
        startOffset: r.sourceCodeLocation.startOffset,
        endOffset: r.sourceCodeLocation.endOffset,
        startOffsetBlock: 0,
        endOffsetBlock: r.sourceCodeLocation.endOffset - r.sourceCodeLocation.startOffset
      }
    }));
  }
  /**
   * Checks whether the assessment is applicable.
   * The assessment is applicable when the paper has at least 50 characters (after sanitation)
   * and when the researcher has `getLongCenterAlignedTexts` research.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The researcher used in the assessment.
   *
   * @returns {boolean} True when the researcher has `getLongCenterAlignedText` research.
   */
  isApplicable(a, t) {
    return t.hasResearch("getLongCenterAlignedTexts");
  }
  /**
   * Calculates the result based on the number of center-aligned text found in the paper.
   *
   * @param {Paper}   paper                           The Paper object to assess.
   * @param {number}  numberOfLongCenterAlignedTexts  The number of paragraphs and/or headings
   * that are center aligned and longer than 50 characters.
   *
   * @returns {Object} The calculated result.
   */
  calculateResult(a, t) {
    const {
      rightToLeft: n,
      leftToRight: r
    } = this.getFeedbackStrings();
    if (t > 0)
      return a.getWritingDirection() === "RTL" ? {
        score: this._config.scores.bad,
        resultText: n
      } : {
        score: this._config.scores.bad,
        resultText: r
      };
  }
  /**
   * Returns the feedback strings for the assessment.
   * If you want to override the feedback strings, you can do so by providing a custom callback in the config: `this._config.callbacks.getResultTexts`.
   * This callback function should return an object with the following properties:
   * - rightToLeft: string
   * - leftToRight: string
   * The singular strings are used when there is only one long center-aligned text, the plural strings are used when there are multiple.
   * rightToLeft is for the feedback string that is shown when the writing direction is right-to-left.
   * leftToRight is for the feedback string that is shown when the writing direction is left-to-right.
   *
   * @returns {{leftToRight: string, rightToLeft: string}} The feedback strings.
   */
  getFeedbackStrings() {
    const a = (0, rP.createAnchorOpeningTag)(this._config.urlTitle), t = (0, rP.createAnchorOpeningTag)(this._config.urlCallToAction);
    if (!this._config.callbacks.getResultTexts) {
      const n = {
        rightToLeft: "%1$sAlignment%3$s: There are long sections of center-aligned text. %2$sWe recommend making them right-aligned%3$s.",
        leftToRight: "%1$sAlignment%3$s: There are long sections of center-aligned text. %2$sWe recommend making them left-aligned%3$s."
      };
      return this.numberOfLongCenterAlignedTexts === 1 && (n.rightToLeft = "%1$sAlignment%3$s: There is a long section of center-aligned text. %2$sWe recommend making it right-aligned%3$s.", n.leftToRight = "%1$sAlignment%3$s: There is a long section of center-aligned text. %2$sWe recommend making it left-aligned%3$s."), (0, nP.mapValues)(n, (r) => this.formatResultText(r, a, t));
    }
    return this._config.callbacks.getResultTexts({
      urlTitleAnchorOpeningTag: a,
      urlActionAnchorOpeningTag: t,
      numberOfLongCenterAlignedTexts: this.numberOfLongCenterAlignedTexts
    });
  }
}
Nh.default = hCa;
var Lh = {};
Object.defineProperty(Lh, "__esModule", {
  value: !0
});
Lh.default = void 0;
var sP = K, yCa = bE(Ze), zCa = bE(mt), bCa = bE(qe), iP = Ce, wCa = Pf();
function bE(e) {
  return e && e.__esModule ? e : { default: e };
}
class vCa extends yCa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object} config The configuration to use.
   * @param {number} [config.scores.acceptableAmount] The score to return if the text has an acceptable amount of complex words.
   * @param {number} [config.scores.goodAmount]       The score to return if the text has a good amount of complex words.
   * @param {string} [config.urlTitle]                The URL to the article about this assessment.
   * @param {string} [config.urlCallToAction]         The URL to the help article for this assessment.
   * @param {object} [config.callbacks] The callbacks to use for the assessment.
   * @param {function} [config.callbacks.getResultTexts]         The function that returns the result texts.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        acceptableAmount: 6,
        goodAmount: 9
      },
      urlTitle: "https://yoa.st/4ls",
      urlCallToAction: "https://yoa.st/4lt",
      callbacks: {}
    };
    this.identifier = "wordComplexity", this._config = (0, sP.merge)(t, a);
  }
  /**
   * Scores the percentage of sentences including one or more transition words.
   *
   * @param {Paper} paper        The paper to use for the assessment.
   * @param {Researcher} researcher   The researcher used for calling research.
   *
   * @returns {object} The Assessment result.
   */
  getResult(a, t) {
    this._wordComplexity = t.getResearch("wordComplexity");
    const n = this.calculateResult(), r = new bCa.default();
    return r.setScore(n.score), r.setText(n.resultText), r.setHasMarks(n.hasMarks), r;
  }
  /**
   * Calculates word complexity word result.
   *
   * @returns {object} Object containing the score, the result text and the information whether there is a mark.
   */
  calculateResult() {
    const a = this._wordComplexity.percentage, t = a > 0, {
      goodAmount: n,
      acceptableAmount: r
    } = this.getFeedbackStrings();
    return a < 10 ? {
      score: this._config.scores.goodAmount,
      hasMarks: t,
      resultText: n
    } : {
      score: this._config.scores.acceptableAmount,
      hasMarks: t,
      resultText: r
    };
  }
  /**
   * Gets the feedback strings for the word complexity assessment.
   * If you want to override the feedback strings, you can do so by providing a custom callback in the config: `this._config.callbacks.getResultTexts`.
   * The callback function should return an object with the following properties:
   * - acceptableAmount: string
   * - goodAmount: string
   *
   * @returns {{acceptableAmount: string, goodAmount: string}} The feedback strings.
   */
  getFeedbackStrings() {
    const a = (0, iP.createAnchorOpeningTag)(this._config.urlTitle), t = (0, iP.createAnchorOpeningTag)(this._config.urlCallToAction);
    if (!this._config.callbacks.getResultTexts) {
      const r = {
        acceptableAmount: "%1$sWord complexity%3$s: Some words in your text are considered complex. %2$sTry to use shorter and more familiar words to improve readability%3$s.",
        goodAmount: "%1$sWord complexity%3$s: You are not using too many complex words, which makes your text easy to read. Good job!"
      };
      return (0, sP.mapValues)(r, (o) => this.formatResultText(o, a, t));
    }
    const n = this._wordComplexity.percentage;
    return this._config.callbacks.getResultTexts({
      urlTitleAnchorOpeningTag: a,
      urlActionAnchorOpeningTag: t,
      complexWordsPercentage: n
    });
  }
  /**
   * Marks text for the word complexity assessment.
   *
   * @param {Paper}       paper       The paper to use for the marking.
   * @param {Researcher}  researcher  The researcher containing the necessary research.
   *
   * @returns {Array<Mark>} A list of marks that should be applied.
   */
  getMarks(a, t) {
    const n = t.getResearch("wordComplexity").complexWords, r = t.getHelper("matchWordCustomHelper"), o = [];
    return n.forEach((l) => {
      const u = l.complexWords, c = l.sentence;
      u.length > 0 && o.push(new zCa.default({
        original: c,
        marked: (0, wCa.collectMarkingsInSentence)(c, u, r)
      }));
    }), o;
  }
  /**
   * Checks if the word complexity assessment is applicable to the paper.
   *
   * @param {Paper}       paper       The paper to check.
   * @param {Researcher}  researcher  The researcher object.
   *
   * @returns {boolean} Returns true if the researcher has word complexity research.
   */
  isApplicable(a, t) {
    return t.hasResearch("wordComplexity");
  }
}
Lh.default = vCa;
var Mh = {};
Object.defineProperty(Mh, "__esModule", {
  value: !0
});
Mh.default = void 0;
var oP = K, kCa = PM(Ze), _Ca = PM(qe), lP = Ce;
function PM(e) {
  return e && e.__esModule ? e : { default: e };
}
class ECa extends kCa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object} config The configuration to use.
   * @param {string} [config.urlTitle] The URL to the article about this assessment.
   * @param {string} [config.urlCallToAction] The URL to the help article for this assessment.
   * @param {object} [config.scores] The scores to use for the assessment.
   * @param {number} [config.scores.bad] The score to return if the text has no list.
   * @param {number} [config.scores.good] The score to return if the text has a list.
   * @param {object} [config.callbacks] The callbacks to use for the assessment.
   * @param {function} [config.callbacks.getResultTexts] The function that returns the result texts.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      urlTitle: "https://yoa.st/shopify38",
      urlCallToAction: "https://yoa.st/shopify39",
      scores: {
        bad: 3,
        good: 9
      },
      callbacks: {}
    };
    this._config = (0, oP.merge)(t, a), this.identifier = "listsPresence";
  }
  /**
   * Checks whether there is an ordered or unordered list in the paper.
   * @param {Paper}	paper	The paper to analyze.
   * @returns {boolean} Whether there is a list in the paper.
   */
  findList(a) {
    const t = a.getTree().findAll((r) => r.name === "ul" || r.name === "ol"), n = (r) => r.childNodes.some((o) => o.name === "li" && o.childNodes.some((l) => l.name === "p"));
    return t.some(n);
  }
  /**
   * Execute the Assessment and return a result.
   *
   * @param {Paper}       paper       The Paper object to assess.
   *
   * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
   */
  getResult(a) {
    this.textContainsList = this.findList(a);
    const t = this.calculateResult(), n = new _Ca.default();
    return n.setScore(t.score), n.setText(t.resultText), n;
  }
  /**
   * Calculate the result based on the availability of lists in the text.
   *
   * @returns {Object} The calculated result.
   */
  calculateResult() {
    const {
      good: a,
      bad: t
    } = this.getFeedbackStrings();
    return this.textContainsList ? {
      score: this._config.scores.good,
      resultText: a
    } : {
      score: this._config.scores.bad,
      resultText: t
    };
  }
  /**
   * Gets the feedback strings for the assessment.
   * If you want to override the feedback strings, you can do so by providing a custom callback in the config: `this._config.callbacks.getResultTexts`.
   * The callback function should return an object with the following properties:
   * - good: string
   * - bad: string
   *
   * @returns {{good: string, bad: string}} The feedback strings.
   */
  getFeedbackStrings() {
    const a = (0, lP.createAnchorOpeningTag)(this._config.urlTitle), t = (0, lP.createAnchorOpeningTag)(this._config.urlCallToAction);
    if (!this._config.callbacks.getResultTexts) {
      const n = {
        good: "%1$sLists%3$s: There is at least one list on this page. Great!",
        bad: "%1$sLists%3$s: No lists appear on this page. %2$sAdd at least one ordered or unordered list%3$s!"
      };
      return (0, oP.mapValues)(n, (r) => this.formatResultText(r, a, t));
    }
    return this._config.callbacks.getResultTexts({
      urlTitleAnchorOpeningTag: a,
      urlActionAnchorOpeningTag: t
    });
  }
}
Mh.default = ECa;
var qh = {};
Object.defineProperty(qh, "__esModule", {
  value: !0
});
qh.default = void 0;
var dP = K, ACa = Fh(Ze), TCa = Fh(qe), uP = Ce, $Ca = Fh(nr), jCa = Fh(Jt), xCa = Zt;
function Fh(e) {
  return e && e.__esModule ? e : { default: e };
}
class SCa extends ACa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {Object} [config] The configuration to use.
   * @param {number} [config.parameters.goodDistributionScore]
   *      The average distribution score that needs to be received from the step function to get a GOOD result.
   * @param {number} [config.parameters.acceptableDistributionScore]
   *      The average distribution score that needs to be received from the step function to get an OKAY result.
   * @param {number} [config.scores.good]             The score to return if keyword occurrences are evenly distributed.
   * @param {number} [config.scores.okay]             The score to return if keyword occurrences are somewhat unevenly distributed.
   * @param {number} [config.scores.bad]              The score to return if there is way too much text between keyword occurrences.
   * @param {number} [config.scores.consideration]    The score to return if there are no keyword occurrences.
   * @param {string} [config.urlTitle]                The URL to the article about this assessment.
   * @param {string} [config.urlCallToAction]         The URL to the help article for this assessment.
   * @param {object} [config.callbacks] 				The callbacks to use for the assessment.
   * @param {function} [config.callbacks.getResultTexts]	The function that returns the result texts.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      parameters: {
        goodDistributionScore: 30,
        acceptableDistributionScore: 50
      },
      scores: {
        good: 9,
        okay: 6,
        bad: 1,
        consideration: 0
      },
      urlTitle: "https://yoa.st/33q",
      urlCallToAction: "https://yoa.st/33u",
      callbacks: {}
    };
    this.identifier = "keyphraseDistribution", this._config = (0, dP.merge)(t, a);
  }
  /**
   * Runs the keyphraseDistribution research and based on this returns an assessment result.
   *
   * @param {Paper}      paper      The paper to use for the assessment.
   * @param {Researcher} researcher The researcher used for calling research.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a, t) {
    this._keyphraseDistribution = t.getResearch("keyphraseDistribution");
    const n = new TCa.default(), r = this.calculateResult();
    return n.setScore(r.score), n.setText(r.resultText), n.setHasMarks(r.hasMarks), r.score < 9 && n.setHasAIFixes(!0), n;
  }
  /**
   * Calculates the result based on the keyphraseDistribution research.
   *
   * @returns {Object} Object with score and feedback text.
   */
  calculateResult() {
    const a = this._keyphraseDistribution.keyphraseDistributionScore, t = this._keyphraseDistribution.sentencesToHighlight.length > 0, {
      good: n,
      okay: r,
      bad: o,
      consideration: l
    } = this.getFeedbackStrings();
    return a === 100 ? {
      score: this._config.scores.consideration,
      hasMarks: t,
      resultText: l
    } : a > this._config.parameters.acceptableDistributionScore ? {
      score: this._config.scores.bad,
      hasMarks: t,
      resultText: o
    } : a > this._config.parameters.goodDistributionScore && a <= this._config.parameters.acceptableDistributionScore ? {
      score: this._config.scores.okay,
      hasMarks: t,
      resultText: r
    } : {
      score: this._config.scores.good,
      hasMarks: t,
      resultText: n
    };
  }
  /**
   * Gets the feedback strings for the keyphrase distribution assessment.
   * If you want to override the feedback strings, you can do so by providing a custom callback in the config: `this._config.callbacks.getResultTexts`.
   * The callback function should return an object with the following properties:
   * - good: string
   * - okay: string
   * - bad: string
   * - consideration: string
   *
   * @returns {{good: string, okay: string, bad: string, consideration: string}} The feedback strings.
   */
  getFeedbackStrings() {
    const a = (0, uP.createAnchorOpeningTag)(this._config.urlTitle), t = (0, uP.createAnchorOpeningTag)(this._config.urlCallToAction);
    if (!this._config.callbacks.getResultTexts) {
      const n = {
        good: "%1$sKeyphrase distribution%3$s: Good job!",
        okay: "%1$sKeyphrase distribution%3$s: Uneven. Some parts of your text do not contain the keyphrase or its synonyms. %2$sDistribute them more evenly%3$s.",
        bad: "%1$sKeyphrase distribution%3$s: Very uneven. Large parts of your text do not contain the keyphrase or its synonyms. %2$sDistribute them more evenly%3$s.",
        consideration: "%1$sKeyphrase distribution%3$s: %2$sInclude your keyphrase or its synonyms in the text so that we can check keyphrase distribution%3$s."
      };
      return (0, dP.mapValues)(n, (r) => this.formatResultText(r, a, t));
    }
    return this._config.callbacks.getResultTexts({
      urlTitleAnchorOpeningTag: a,
      urlActionAnchorOpeningTag: t
    });
  }
  /**
   * Creates a marker for all content words in keyphrase and synonyms.
   *
   * @returns {Array} All markers for the current text.
   */
  getMarks() {
    return this._keyphraseDistribution.sentencesToHighlight;
  }
  /**
   * Checks whether the paper has a text with at least 15 sentences and a keyword,
   * and whether the researcher has keyphraseDistribution research.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The researcher object.
   *
   * @returns {boolean}   Returns true when there is a keyword and a text with 15 sentences or more
   *                      and the researcher has keyphraseDistribution research.
   */
  isApplicable(a, t) {
    const n = t.getHelper("memoizedTokenizer");
    let r = a.getText();
    r = (0, jCa.default)(r), r = (0, xCa.filterShortcodesFromHTML)(r, a._attributes && a._attributes.shortcodes);
    const o = (0, $Ca.default)(r, n);
    return a.hasText() && a.hasKeyword() && o.length >= 15 && t.hasResearch("keyphraseDistribution");
  }
}
qh.default = SCa;
var Bh = {};
Object.defineProperty(Bh, "__esModule", {
  value: !0
});
Bh.default = void 0;
var cP = K, OCa = RM(Ze), ICa = RM(qe), pP = Ce, CCa = kt;
function RM(e) {
  return e && e.__esModule ? e : { default: e };
}
class PCa extends OCa.default {
  /**
   * Constructs a text title assessment.
   *
   * @param {object} config The config to use for the assessment.
   * @param {object} [config.scores] The scores to use for the assessment.
   * @param {number} [config.scores.good] The score to return if the text has a title.
   * @param {number} [config.scores.bad] The score to return if the text doesn't have a title.
   * @param {string} [config.urlTitle] The URL to the article about this assessment.
   * @param {string} [config.urlCallToAction] The URL to the help article for this assessment.
   * @param {object} [config.callbacks] The callbacks to use for the assessment.
   * @param {function} [config.callbacks.getResultTexts] The function that returns the result texts.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        good: 9,
        bad: -1e4
      },
      urlTitle: "https://yoa.st/4nh",
      urlCallToAction: "https://yoa.st/4ni",
      callbacks: {}
    };
    this.identifier = "textTitleAssessment", this._config = (0, cP.merge)(t, a);
  }
  /**
   * Checks whether the paper has a text title.
   *
   * @param {Paper} 	paper		The paper to use for the assessment.
   *
   * @returns {boolean}	 Whether the paper has a text title.
   */
  getTextTitle(a) {
    let t = a.getTextTitle();
    return t = (0, CCa.unifyAllSpaces)(t), t = t.trim(), t.length > 0;
  }
  /**
   * Gets the title from the Paper and based on this returns an assessment result with score.
   *
   * @param {Paper} paper The paper to use for the assessment.
   *
   * @returns {AssessmentResult} The assessment result.
   */
  getResult(a) {
    const t = this.getTextTitle(a), n = this.calculateResult(t), r = new ICa.default();
    return r.setScore(n.score), r.setText(n.resultText), r;
  }
  /**
   * Returns the result object based on whether the text has a title or not.
   *
   * @param {boolean} textTitleData Whether the text has a title.
   *
   * @returns {{resultText: string, score}} Result object with score and text.
   */
  calculateResult(a) {
    const {
      good: t,
      bad: n
    } = this.getFeedbackStrings();
    return a ? {
      score: this._config.scores.good,
      resultText: t
    } : {
      score: this._config.scores.bad,
      resultText: n
    };
  }
  /**
   * Gets the feedback strings for the text title assessment.
   * If you want to override the feedback strings, you can do so by providing a custom callback in the config: `this._config.callbacks.getResultTexts`.
   * The callback function should return an object with the following properties:
   * - good: string
   * - bad: string
   *
   * @returns {{good: string, bad: string}} The feedback strings.
   */
  getFeedbackStrings() {
    const a = (0, pP.createAnchorOpeningTag)(this._config.urlTitle), t = (0, pP.createAnchorOpeningTag)(this._config.urlCallToAction);
    if (!this._config.callbacks.getResultTexts) {
      const n = {
        good: "%1$sTitle%3$s: Your page has a title. Well done!",
        bad: "%1$sTitle%3$s: Your page does not have a title yet. %2$sAdd one%3$s!"
      };
      return (0, cP.mapValues)(n, (r) => this.formatResultText(r, a, t));
    }
    return this._config.callbacks.getResultTexts({
      urlTitleAnchorOpeningTag: a,
      urlActionAnchorOpeningTag: t
    });
  }
}
Bh.default = PCa;
var Wh = {};
Object.defineProperty(Wh, "__esModule", {
  value: !0
});
Wh.default = void 0;
var gP = K, RCa = DM(Ze), DCa = DM(qe), mP = Ce;
function DM(e) {
  return e && e.__esModule ? e : { default: e };
}
class NCa extends RCa.default {
  /**
   * Sets the identifier and the config.
   *
   * @param {object}  config      The configuration to use.
   * @param {number}  [config.scores.bad]   The score to return if not all images have alt tags.
   * @param {number}  [config.scores.good]  The score to return if all images have alt tags.
   * @param {string}  [config.urlTitle]     The URL to the article about this assessment.
   * @param {string}  [config.urlCallToAction]  The URL to the help article for this assessment.
   * @param {object} [config.callbacks] The callbacks to use for the assessment.
   * @param {function}  [config.callbacks.getResultTexts]  The function that returns the result texts.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        bad: 3,
        good: 9
      },
      urlTitle: "",
      urlCallToAction: "",
      callbacks: {}
    };
    this.identifier = "imageAltTags", this._config = (0, gP.merge)(t, a);
  }
  /**
   * Executes the Assessment and return a result.
   *
   * @param {Paper}       paper       The Paper object to assess.
   * @param {Researcher}  researcher  The Researcher object containing all available researches.
   *
   * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.
   */
  getResult(a, t) {
    this.altTagsProperties = t.getResearch("altTagCount"), this.imageCount = t.getResearch("imageCount");
    const n = this.calculateResult(), r = new DCa.default();
    return r.setScore(n.score), r.setText(n.resultText), r;
  }
  /**
   * Checks whether the paper has text with at least 1 image.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   * @param {Researcher}  researcher  The Researcher object containing all available researches.
   *
   * @returns {boolean} True when there is text.
   */
  isApplicable(a, t) {
    return this.imageCount = t.getResearch("imageCount"), a.hasText() && this.imageCount > 0;
  }
  /**
   * Calculates the result based on the availability of images in the text.
   *
   * @returns {Object} The calculated result.
   */
  calculateResult() {
    const a = this.altTagsProperties.noAlt, {
      good: t,
      noneHasAltBad: n,
      someHaveAltBad: r
    } = this.getFeedbackStrings();
    return a === this.imageCount ? {
      score: this._config.scores.bad,
      resultText: n
    } : a > 0 ? {
      score: this._config.scores.bad,
      resultText: r
    } : {
      score: this._config.scores.good,
      resultText: t
    };
  }
  /**
   * Returns the feedback strings for the assessment.
   * If you want to override the feedback strings, you can do so by providing a custom callback in the config: `this._config.callbacks.getResultTexts`.
   * This callback function should return an object with the following properties:
   * - good: string
   * - noneHasAltBad: string
   * - someHaveAltBad: string
   *
   * @returns {{good: string, noneHasAltBad: string, someHaveAltBad: string}} The feedback strings.
   */
  getFeedbackStrings() {
    const a = (0, mP.createAnchorOpeningTag)(this._config.urlTitle), t = (0, mP.createAnchorOpeningTag)(this._config.urlCallToAction), n = this.altTagsProperties.noAlt;
    if (!this._config.callbacks.getResultTexts) {
      const r = {
        good: "%1$sImage alt tags%3$s: All images have alt attributes. Good job!",
        noneHasAltBad: "%1$sImage alt tags%3$s: None of the images has alt attributes. %2$sAdd alt attributes to your images%3$s!",
        someHaveAltBad: "%1$sImage alt tags%3$s: Some images don't have alt attributes. %2$sAdd alt attributes to your images%3$s!"
      };
      return n === 1 && (r.someHaveAltBad = "%1$sImage alt tags%3$s: One image doesn't have alt attributes. %2$sAdd alt attributes to your images%3$s!"), (0, gP.mapValues)(r, (o) => this.formatResultText(o, a, t));
    }
    return this._config.callbacks.getResultTexts({
      urlTitleAnchorOpeningTag: a,
      urlActionAnchorOpeningTag: t,
      numberOfImagesWithoutAlt: n,
      totalNumberOfImages: this.imageCount
    });
  }
}
Wh.default = NCa;
var Uh = {};
Object.defineProperty(Uh, "__esModule", {
  value: !0
});
Uh.default = void 0;
var uk = K, LCa = NM(Ze), MCa = NM(qe), fP = Ce;
function NM(e) {
  return e && e.__esModule ? e : { default: e };
}
class qCa extends LCa.default {
  /**
   * Constructs a product identifier assessment.
   *
   * @param {Object} config   Potential additional config for the assessment.
   * @param {Object} [config.scores] The scores to use for the assessment.
   * @param {number} [config.scores.good] The score to return if the product has an identifier.
   * @param {number} [config.scores.ok] The score to return if the product doesn't have an identifier.
   * @param {string} [config.urlTitle] The URL to the article about this assessment.
   * @param {string} [config.urlCallToAction] The URL to the help article for this assessment.
   * @param {boolean} [config.assessVariants] Whether to assess variants.
   * @param {boolean} [config.shouldShowEditButton] Whether to show edit button.
   * @param {string} [config.editFieldName] The name of the field to edit.
   * @param {function} [config.callbacks] The callbacks to use for the assessment.
   * @param {function} [config.callbacks.getResultTexts] The function that returns the result texts.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        good: 9,
        ok: 6
      },
      urlTitle: "https://yoa.st/4ly",
      urlCallToAction: "https://yoa.st/4lz",
      assessVariants: !1,
      shouldShowEditButton: !1,
      editFieldName: "Product identifiers",
      callbacks: {}
    };
    this.identifier = "productIdentifier", this._config = (0, uk.merge)(t, a);
  }
  /**
   * Executes the assessment and returns a result based on the research.
   *
   * @param {Paper}       paper       The paper to use for the assessment.
   *
   * @returns {AssessmentResult} An assessment result with the score and formatted text.
   */
  getResult(a) {
    const t = a.getCustomData(), n = this.scoreProductIdentifier(t, this._config), r = new MCa.default();
    return n && (r.setScore(n.score), r.setText(n.text)), r.getScore() < 9 && this._config.shouldShowEditButton && (r.setHasJumps(!0), r.setEditFieldName(this._config.editFieldName)), r;
  }
  /**
   * Checks whether the assessment is applicable. It is applicable unless the product has variants, and we don't want to
   * assess variants (this is the case for Shopify since we cannot at the moment easily access variant data in Shopify).
   *
   * @param {Paper} paper The paper to check.
   *
   * @returns {Boolean} Whether the assessment is applicable.
   */
  isApplicable(a) {
    const t = a.getCustomData();
    return t.canRetrieveGlobalIdentifier === !1 && (["simple", "external", "grouped"].includes(t.productType) || t.hasVariants === !1) || t.canRetrieveVariantIdentifiers === !1 && t.hasVariants === !0 && t.productType === "variable" ? !1 : !(this._config.assessVariants === !1 && t.hasVariants);
  }
  /**
   * Returns a score based on whether the product (variants) have an identifier.
   *
   * @param {Object} productIdentifierData  Whether product has variants, global identifier, and variant identifiers.
   * @param {Object} config                 The configuration to use.
   *
   * @returns {{score: number, text: string} | {}}	The result object with score and text
   * 													or empty object if no score should be returned.
   */
  scoreProductIdentifier(a, t) {
    const {
      good: n,
      okay: r
    } = this.getFeedbackStrings();
    return ["simple", "grouped", "external"].includes(a.productType) || a.productType === "variable" && !a.hasVariants ? a.hasGlobalIdentifier ? {
      score: t.scores.good,
      text: n.withoutVariants
    } : {
      score: t.scores.ok,
      text: r.withoutVariants
    } : a.productType === "variable" && a.hasVariants ? a.doAllVariantsHaveIdentifier ? {
      score: t.scores.good,
      text: n.withVariants
    } : {
      score: t.scores.ok,
      text: r.withVariants
    } : {};
  }
  /**
   * Gets the feedback strings for the assessment.
   * If you want to override the feedback strings, you can do so by providing a custom callback in the config: `this._config.callbacks.getResultTexts`.
   * The callback function should return an object with the following properties:
   * - good: {withoutVariants: string, withVariants: string}
   * - okay: {withoutVariants: string, withVariants: string}
   *
   * @returns {{good: {withoutVariants: string, withVariants: string}, okay: {withoutVariants: string, withVariants: string}}} The feedback strings.
   */
  getFeedbackStrings() {
    const a = (0, fP.createAnchorOpeningTag)(this._config.urlTitle), t = (0, fP.createAnchorOpeningTag)(this._config.urlCallToAction);
    if (!this._config.callbacks.getResultTexts) {
      const n = {
        good: {
          withoutVariants: "%1$sProduct identifier%3$s: Your product has an identifier. Good job!",
          withVariants: "%1$sProduct identifier%3$s: All your product variants have an identifier. Good job!"
        },
        okay: {
          withoutVariants: "%1$sProduct identifier%3$s: Your product is missing an identifier (like a GTIN code). %2$sInclude it if you can, as it will help search engines to better understand your content.%3$s",
          withVariants: "%1$sProduct identifier%3$s: Not all your product variants have an identifier. %2$sInclude it if you can, as it will help search engines to better understand your content.%3$s"
        }
      };
      return n.good = (0, uk.mapValues)(n.good, (r) => this.formatResultText(r, a, t)), n.okay = (0, uk.mapValues)(n.okay, (r) => this.formatResultText(r, a, t)), n;
    }
    return this._config.callbacks.getResultTexts({
      urlTitleAnchorOpeningTag: a,
      urlActionAnchorOpeningTag: t
    });
  }
}
Uh.default = qCa;
var Hh = {};
Object.defineProperty(Hh, "__esModule", {
  value: !0
});
Hh.default = void 0;
var ck = K, FCa = LM(Ze), BCa = LM(qe), hP = Ce;
function LM(e) {
  return e && e.__esModule ? e : { default: e };
}
class WCa extends FCa.default {
  /**
   * Constructs a product SKU assessment.
   *
   * @param {Object} config   Potential additional config for the assessment.
   * @param {Object} [config.scores] The scores to use for the assessment.
   * @param {number} [config.scores.good] The score to return if the product has a SKU.
   * @param {number} [config.scores.ok] The score to return if the product doesn't have a SKU.
   * @param {string} [config.urlTitle] The URL to the article about this assessment.
   * @param {string} [config.urlCallToAction] The URL to the help article for this assessment.
   * @param {boolean} [config.assessVariants] Whether to assess variants.
   * @param {boolean} [config.shouldShowEditButton] Whether to show edit button.
   * @param {string} [config.editFieldName] The name of the field to edit.
   * @param {object} [config.callbacks] The callbacks to use for the assessment.
   * @param {function} [config.callbacks.getResultTexts] The function that returns the result texts.
   *
   * @returns {void}
   */
  constructor(a = {}) {
    super();
    const t = {
      scores: {
        good: 9,
        ok: 6
      },
      urlTitle: "https://yoa.st/4lw",
      urlCallToAction: "https://yoa.st/4lx",
      assessVariants: !1,
      shouldShowEditButton: !1,
      editFieldName: "SKU",
      callbacks: {}
    };
    this.identifier = "productSKU", this._config = (0, ck.merge)(t, a);
  }
  /**
   * Executes the assessment and returns a result based on the research.
   *
   * @param {Paper} paper The paper to use for the assessment.
   *
   * @returns {AssessmentResult} An assessment result with the score and formatted text.
   */
  getResult(a) {
    const t = a.getCustomData(), n = this.scoreProductSKU(t, this._config), r = new BCa.default();
    return n && (r.setScore(n.score), r.setText(n.text)), r.getScore() < 9 && this._config.shouldShowEditButton && (r.setHasJumps(!0), r.setEditFieldName(this._config.editFieldName)), r;
  }
  /**
   * Checks whether the assessment is applicable.
   * It is not applicable when the product has variants, and we don't want to assess variants (this is the case for Shopify
   * since we cannot at the moment easily access variant data in Shopify).
   * It is also not applicable when we cannot retrieve the SKU (this can be the case if other plugins remove/change the SKU
   * input field in such as way that we cannot detect it).
   *
   * @param {Paper} paper The paper to check.
   *
   * @returns {Boolean} Whether the assessment is applicable.
   */
  isApplicable(a) {
    const t = a.getCustomData();
    return t.canRetrieveGlobalSku === !1 && (["simple", "external"].includes(t.productType) || t.hasVariants === !1) || t.canRetrieveVariantSkus === !1 && t.hasVariants === !0 && t.productType === "variable" ? !1 : !(this._config.assessVariants === !1 && t.hasVariants);
  }
  /**
   * Returns a score based on whether the product (variants) have a SKU.
   *
   * @param {Object} productSKUData	Whether product has variants, global SKU, and variant SKU.
   * @param {Object} config			The configuration to use.
   *
   * @returns {{score: number, text: string} | {}}	The result object with score and text
   * 													or empty object if no score should be returned.
   */
  scoreProductSKU(a, t) {
    const {
      good: n,
      okay: r
    } = this.getFeedbackStrings();
    return ["simple", "external", "grouped"].includes(a.productType) || a.productType === "variable" && !a.hasVariants ? a.hasGlobalSKU ? {
      score: t.scores.good,
      text: n.withoutVariants
    } : {
      score: t.scores.ok,
      text: r.withoutVariants
    } : a.productType === "variable" && a.hasVariants ? a.doAllVariantsHaveSKU ? {
      score: t.scores.good,
      text: n.withVariants
    } : {
      score: t.scores.ok,
      text: r.withVariants
    } : {};
  }
  /**
   * Gets the feedback strings for the assessment.
   * If you want to override the feedback strings, you can do so by providing a custom callback in the config: `this._config.callbacks.getResultTexts`.
   * The callback function should return an object with the following properties:
   * - good: {withoutVariants: string, withVariants: string}
   * - okay: {withoutVariants: string, withVariants: string}
   *
   * @returns {{good: {withoutVariants: string, withVariants: string}, okay: {withoutVariants: string, withVariants: string}}} The feedback strings.
   */
  getFeedbackStrings() {
    const a = (0, hP.createAnchorOpeningTag)(this._config.urlTitle), t = (0, hP.createAnchorOpeningTag)(this._config.urlCallToAction);
    if (!this._config.callbacks.getResultTexts) {
      const n = {
        good: {
          withoutVariants: "%1$sSKU%3$s: Your product has a SKU. Good job!",
          withVariants: "%1$sSKU%3$s: All your product variants have a SKU. Good job!"
        },
        okay: {
          withoutVariants: "%1$sSKU%3$s: Your product is missing a SKU. %2$sInclude it if you can, as it will help search engines to better understand your content.%3$s",
          withVariants: "%1$sSKU%3$s: Not all your product variants have a SKU. %2$sInclude it if you can, as it will help search engines to better understand your content.%3$s"
        }
      };
      return n.good = (0, ck.mapValues)(n.good, (r) => this.formatResultText(r, a, t)), n.okay = (0, ck.mapValues)(n.okay, (r) => this.formatResultText(r, a, t)), n;
    }
    return this._config.callbacks.getResultTexts({
      urlTitleAnchorOpeningTag: a,
      urlActionAnchorOpeningTag: t
    });
  }
}
Hh.default = WCa;
Object.defineProperty(Bi, "__esModule", {
  value: !0
});
Bi.seo = Bi.readability = Bi.inclusiveLanguage = void 0;
var UCa = da(el), HCa = da(nl), GCa = da(Wd), VCa = da(Es), KCa = da(As), YCa = da(rl), QCa = da(al), XCa = da(Nh), ZCa = da(Lh), JCa = da(Mh), ePa = da(tn), aPa = da(Kd), tPa = da(bn), nPa = da(en), yP = vPa(ut), rPa = da(an), sPa = da(nn), iPa = da(Yd), oPa = da(sr), lPa = da(oi), dPa = da(no), uPa = da($s), cPa = da(Cn), pPa = da(Br), zP = ct, gPa = da(At), mPa = da(ol), fPa = da(qh), hPa = da(Bh), yPa = da(Wh), zPa = da(Uh), bPa = da(Hh), wPa = da(Jc);
function MM(e) {
  if (typeof WeakMap != "function") return null;
  var a = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (MM = function(n) {
    return n ? t : a;
  })(e);
}
function vPa(e, a) {
  if (e && e.__esModule) return e;
  if (e === null || typeof e != "object" && typeof e != "function") return { default: e };
  var t = MM(a);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, r = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var o in e) if (o !== "default" && {}.hasOwnProperty.call(e, o)) {
    var l = r ? Object.getOwnPropertyDescriptor(e, o) : null;
    l && (l.get || l.set) ? Object.defineProperty(n, o, l) : n[o] = e[o];
  }
  return n.default = e, t && t.set(e, n), n;
}
function da(e) {
  return e && e.__esModule ? e : { default: e };
}
Bi.readability = {
  ListAssessment: JCa.default,
  ParagraphTooLongAssessment: UCa.default,
  PassiveVoiceAssessment: HCa.default,
  SentenceBeginningsAssessment: GCa.default,
  SentenceLengthInTextAssessment: VCa.default,
  SubheadingDistributionTooLongAssessment: KCa.default,
  TextAlignmentAssessment: XCa.default,
  TextPresenceAssessment: YCa.default,
  TransitionWordsAssessment: QCa.default,
  WordComplexityAssessment: ZCa.default
};
Bi.seo = {
  FunctionWordsInKeyphraseAssessment: ePa.default,
  ImageAltTagsAssessment: yPa.default,
  ImageCountAssessment: mPa.default,
  ImageKeyphraseAssessment: gPa.default,
  InternalLinksAssessment: aPa.default,
  IntroductionKeywordAssessment: tPa.default,
  KeyphraseDistributionAssessment: fPa.default,
  KeyphraseInSEOTitleAssessment: pPa.default,
  KeyphraseLengthAssessment: nPa.default,
  KeyphraseDensityAssessment: yP.default,
  KeywordDensityAssessment: yP.KeywordDensityAssessment,
  MetaDescriptionKeywordAssessment: rPa.default,
  MetaDescriptionLengthAssessment: sPa.default,
  OutboundLinksAssessment: iPa.default,
  PageTitleWidthAssessment: oPa.default,
  ProductIdentifiersAssessment: zPa.default,
  ProductSKUAssessment: bPa.default,
  SingleH1Assessment: lPa.default,
  SubheadingsKeywordAssessment: dPa.default,
  TextCompetingLinksAssessment: uPa.default,
  TextLengthAssessment: cPa.default,
  TextTitleAssessment: hPa.default,
  SlugKeywordAssessment: zP.SlugKeywordAssessment,
  UrlKeywordAssessment: zP.UrlKeywordAssessment
};
Bi.inclusiveLanguage = {
  InclusiveLanguageAssessment: wPa.default
};
var qM = {}, Gh = {};
Object.defineProperty(Gh, "__esModule", {
  value: !0
});
Gh.default = void 0;
var Pi = sa, pk = K, kPa = FM(Xi), bP = Ce, _Pa = FM(qe);
function FM(e) {
  return e && e.__esModule ? e : { default: e };
}
class EPa {
  /**
   * Constructs a new PreviouslyUsedKeyword plugin.
   *
   * @param {object} app The app.
   * @param {object} args An arguments object.
   * @param {object} args.usedKeywords An object with keywords and ids where they are used.
   * @param {object} args.usedKeywordsPostTypes An object with the post types of the post ids from usedKeywords.
   * @param {string} args.searchUrl The url used to link to a search page when multiple usages of the keyword are found.
   * @param {string} args.postUrl The url used to link to a post when 1 usage of the keyword is found.
   *
   * @constructor
   */
  constructor(a, t) {
    if ((0, pk.isUndefined)(a))
      throw new kPa.default("The previously keyword plugin requires the YoastSEO app");
    (0, pk.isUndefined)(t) && (t = {
      usedKeywords: {},
      usedKeywordsPostTypes: {},
      searchUrl: "",
      postUrl: ""
    }), this.app = a, this.usedKeywords = t.usedKeywords, this.usedKeywordsPostTypes = t.usedKeywordsPostTypes, this.searchUrl = t.searchUrl, this.postUrl = t.postUrl, this.urlTitle = (0, bP.createAnchorOpeningTag)("https://yoa.st/33x"), this.urlCallToAction = (0, bP.createAnchorOpeningTag)("https://yoa.st/33y");
  }
  /**
   * Registers the assessment with the assessor.
   *
   * @returns {void}
   */
  registerPlugin() {
    this.app.registerAssessment("usedKeywords", {
      getResult: this.assess.bind(this)
    }, "previouslyUsedKeywords");
  }
  /**
   * Updates the usedKeywords.
   *
   * @param {object} usedKeywords An object with keywords and ids where they are used.
   * @param {object} usedKeywordsPostTypes An object with keywords and in which post types they are used.
   * The post types correspond with the ids in the usedKeywords parameter.
   * @returns {void}
   */
  updateKeywordUsage(a, t) {
    this.usedKeywords = a, this.usedKeywordsPostTypes = t;
  }
  /**
   * Scores the previously used keyword assessment based on the count.
   *
   * @param {object} previouslyUsedKeywords The result of the previously used keywords research
   * @param {Paper} paper The paper object to research.
   * @returns {{text: string, score: number}} The result object with a feedback text and a score.
   */
  scoreAssessment(a, t) {
    if (Object.keys(a).length === 0)
      return {
        text: (0, Pi.sprintf)(
          /* translators:
          %1$s and %2$s expand to a link to an article on yoast.com,
          %3$s expands to an anchor end tag. */
          (0, Pi.__)("%1$sPreviously used keyphrase%3$s: No focus keyphrase was set for this page. %2$sPlease add a focus keyphrase you haven't used before on other content%3$s.", "wordpress-seo"),
          this.urlTitle,
          this.urlCallToAction,
          "</a>"
        ),
        score: 1
      };
    const n = a.count, r = a.id, o = a.postTypeToDisplay;
    let l;
    if (n === 0)
      return {
        text: (0, Pi.sprintf)(
          /* translators:
          %1$s expands to a link to an article on yoast.com,
          %2$s expands to an anchor end tag. */
          (0, Pi.__)("%1$sPreviously used keyphrase%2$s: You've not used this keyphrase before, very good.", "wordpress-seo"),
          this.urlTitle,
          "</a>"
        ),
        score: 9
      };
    if (n === 1)
      return l = `<a href='${this.postUrl.replace("{id}", r)}' target='_blank'>`, {
        /* translators: %1$s expands to an admin link where the keyphrase is already used,
         %2$s expands to the anchor end tag, %3$s and %4$s expand to links on yoast.com. */
        text: (0, Pi.sprintf)((0, Pi.__)("%3$sPreviously used keyphrase%2$s: You've used this keyphrase %1$sonce before%2$s. %4$sDo not use your keyphrase more than once%2$s.", "wordpress-seo"), l, "</a>", this.urlTitle, this.urlCallToAction),
        score: 6
      };
    if (n > 1)
      return o ? l = `<a href='${this.searchUrl.replace("{keyword}", encodeURIComponent(t.getKeyword()))}&post_type=${o}' target='_blank'>` : l = `<a href='${this.searchUrl.replace("{keyword}", encodeURIComponent(t.getKeyword()))}' target='_blank'>`, {
        /* translators: %1$s expands to a link to the admin search page for the keyphrase,
         %2$s expands to the anchor end tag, %3$s and %4$s expand to links to yoast.com */
        text: (0, Pi.sprintf)((0, Pi.__)("%3$sPreviously used keyphrase%2$s: You've used this keyphrase %1$smultiple times before%2$s. %4$sDo not use your keyphrase more than once%2$s.", "wordpress-seo"), l, "</a>", this.urlTitle, this.urlCallToAction),
        score: 1
      };
  }
  /**
   * Researches the previously used keywords, based on the used keywords and the keyword in the paper.
   *
   * @param {Paper} paper The paper object to research.
   * @returns {{id: number, count: number} || {}} The object with the count and the id of the previously used keyword,
   * 												or an empty object if the paper has no keyphrase.
   */
  researchPreviouslyUsedKeywords(a) {
    const t = a.getKeyword();
    if (!t)
      return {};
    let n = 0, r = "", o = 0;
    return !(0, pk.isUndefined)(this.usedKeywords[t]) && this.usedKeywords[t].length > 0 && (n = this.usedKeywords[t].length, t in this.usedKeywordsPostTypes && (r = this.usedKeywordsPostTypes[t][0]), o = this.usedKeywords[t][0]), {
      id: o,
      count: n,
      postTypeToDisplay: r
    };
  }
  /**
   * Executes the assessment that checks whether a text uses previously used keywords.
   *
   * @param {Paper} paper The Paper object to assess.
   * @returns {AssessmentResult} The assessment result containing both a score and a descriptive text.
   */
  assess(a) {
    const t = this.researchPreviouslyUsedKeywords(a), n = this.scoreAssessment(t, a), r = new _Pa.default();
    return r.setScore(n.score), r.setText(n.text), r;
  }
}
Gh.default = EPa;
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "usedKeywords", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  });
  var a = t(Gh);
  function t(n) {
    return n && n.__esModule ? n : { default: n };
  }
})(qM);
var BM = {}, wE = {};
Object.defineProperty(wE, "__esModule", {
  value: !0
});
wE.default = APa;
function APa(e) {
  return e.replace(new RegExp("<yoastmark[^>]*>", "g"), "").replace(new RegExp("</yoastmark>", "g"), "");
}
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "addMark", {
    enumerable: !0,
    get: function() {
      return t.default;
    }
  }), Object.defineProperty(e, "removeMarks", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  });
  var a = n(wE), t = n(to);
  function n(r) {
    return r && r.__esModule ? r : { default: r };
  }
})(BM);
var WM = {}, Vh = {};
Object.defineProperty(Vh, "__esModule", {
  value: !0
});
Vh.default = TPa;
var Yn = sa;
function TPa() {
  const e = (0, Yn.__)("Content optimization:", "wordpress-seo");
  return {
    feedback: {
      className: "na",
      screenReaderText: (0, Yn.__)("Feedback", "wordpress-seo"),
      fullText: `${e} ${(0, Yn.__)("Has feedback", "wordpress-seo")}`,
      screenReaderReadabilityText: ""
    },
    bad: {
      className: "bad",
      screenReaderText: (0, Yn.__)("Needs improvement", "wordpress-seo"),
      fullText: `${e} ${(0, Yn.__)("Needs improvement", "wordpress-seo")}`,
      screenReaderReadabilityText: (0, Yn.__)("Needs improvement", "wordpress-seo")
    },
    ok: {
      className: "ok",
      screenReaderText: (0, Yn.__)("OK SEO score", "wordpress-seo"),
      fullText: `${e} ${(0, Yn.__)("OK SEO score", "wordpress-seo")}`,
      screenReaderReadabilityText: (0, Yn.__)("OK", "wordpress-seo")
    },
    good: {
      className: "good",
      screenReaderText: (0, Yn.__)("Good SEO score", "wordpress-seo"),
      fullText: `${e} ${(0, Yn.__)("Good SEO score", "wordpress-seo")}`,
      screenReaderReadabilityText: (0, Yn.__)("Good", "wordpress-seo")
    }
  };
}
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "presenter", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  });
  var a = t(Vh);
  function t(n) {
    return n && n.__esModule ? n : { default: n };
  }
})(WM);
var UM = {};
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "AssessmentResult", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  }), Object.defineProperty(e, "Mark", {
    enumerable: !0,
    get: function() {
      return t.default;
    }
  }), Object.defineProperty(e, "Paper", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  });
  var a = r(qe), t = r(mt), n = r(ao);
  function r(o) {
    return o && o.__esModule ? o : { default: o };
  }
})(UM);
var HM = {}, Kh = {}, ap = {};
Object.defineProperty(ap, "__esModule", {
  value: !0
});
ap.default = void 0;
var $Pa = Xd(Ts), jPa = Xd(bn), xPa = Xd(en), SPa = Xd(ut), OPa = Xd(an), IPa = Xd(tn), ns = Ce;
function Xd(e) {
  return e && e.__esModule ? e : { default: e };
}
class CPa extends $Pa.default {
  /**
   * Creates a new CollectionRelatedKeywordAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "collectionRelatedKeywordAssessor", this._assessments = [new jPa.default({
      urlTitle: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify8"),
      urlCallToAction: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify9")
    }), new xPa.default({
      isRelatedKeyphrase: !0,
      urlTitle: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify10"),
      urlCallToAction: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify11")
    }), new SPa.default({
      urlTitle: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify12"),
      urlCallToAction: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify13")
    }), new OPa.default({
      urlTitle: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify14"),
      urlCallToAction: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify15")
    }), new IPa.default({
      urlTitle: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify50"),
      urlCallToAction: (0, ns.createAnchorOpeningTag)("https://yoa.st/shopify51")
    })];
  }
}
ap.default = CPa;
Object.defineProperty(Kh, "__esModule", {
  value: !0
});
Kh.default = void 0;
var PPa = RPa(ap);
function RPa(e) {
  return e && e.__esModule ? e : { default: e };
}
class DPa extends PPa.default {
  /**
   * Creates a new CollectionCornerstoneRelatedKeywordAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "collectionRelatedKeywordAssessor";
  }
}
Kh.default = DPa;
var Yh = {}, tp = {};
Object.defineProperty(tp, "__esModule", {
  value: !0
});
tp.default = void 0;
var NPa = Rn(rr), LPa = Rn(bn), MPa = Rn(en), qPa = Rn(ut), FPa = Rn(an), BPa = Rn(tn), WPa = Rn(nn), UPa = Rn(Cn), HPa = Rn(Br), GPa = Rn(sr), VPa = Rn(ct), KPa = Rn(oi), qa = Ce, YPa = Rn(sl);
function Rn(e) {
  return e && e.__esModule ? e : { default: e };
}
class QPa extends NPa.default {
  /**
   * Creates a new CollectionSEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "collectionSEOAssessor", this._assessments = [new LPa.default({
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify8"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify9")
    }), new MPa.default({
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify10"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify11")
    }), new qPa.default({
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify12"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify13")
    }), new FPa.default({
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify14"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify15")
    }), new WPa.default({
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify46"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify47")
    }), new UPa.default({
      recommendedMinimum: 30,
      slightlyBelowMinimum: 10,
      veryFarBelowMinimum: 1,
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify58"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify59"),
      customContentType: this.type
    }), new HPa.default({
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify24"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify25")
    }), new GPa.default({
      scores: {
        widthTooShort: 9
      },
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify52"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify53")
    }, !0), new VPa.default({
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify26"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify27")
    }), new BPa.default({
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify50"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify51")
    }), new KPa.default({
      urlTitle: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify54"),
      urlCallToAction: (0, qa.createAnchorOpeningTag)("https://yoa.st/shopify55")
    })], this._scoreAggregator = new YPa.default();
  }
}
tp.default = QPa;
Object.defineProperty(Yh, "__esModule", {
  value: !0
});
Yh.default = void 0;
var XPa = vE(tp), ZPa = vE(Cn), wP = Ce, JPa = vE(sl);
function vE(e) {
  return e && e.__esModule ? e : { default: e };
}
class eRa extends XPa.default {
  /**
   * Creates a new CollectionCornerstoneSEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "collectionCornerstoneSEOAssessor", this.addAssessment("textLength", new ZPa.default({
      recommendedMinimum: 30,
      slightlyBelowMinimum: 10,
      veryFarBelowMinimum: 1,
      urlTitle: (0, wP.createAnchorOpeningTag)("https://yoa.st/shopify58"),
      urlCallToAction: (0, wP.createAnchorOpeningTag)("https://yoa.st/shopify59"),
      cornerstoneContent: !0,
      customContentType: this.type
    })), this._scoreAggregator = new JPa.default();
  }
}
Yh.default = eRa;
var Qh = {}, np = {};
Object.defineProperty(np, "__esModule", {
  value: !0
});
np.default = void 0;
var aRa = cl(_s), tRa = cl(As), nRa = cl(el), rRa = cl(Es), sRa = cl(al), iRa = cl(nl), oRa = cl(rl), Qn = Ce;
function cl(e) {
  return e && e.__esModule ? e : { default: e };
}
class lRa extends aRa.default {
  /**
   * Creates a new ProductContentAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "productContentAssessor", this._assessments = [new tRa.default({
      urlTitle: (0, Qn.createAnchorOpeningTag)(t.subheadingUrlTitle),
      urlCallToAction: (0, Qn.createAnchorOpeningTag)(t.subheadingCTAUrl)
    }), new nRa.default({
      parameters: {
        recommendedLength: 70,
        maximumRecommendedLength: 100
      },
      urlTitle: (0, Qn.createAnchorOpeningTag)(t.paragraphUrlTitle),
      urlCallToAction: (0, Qn.createAnchorOpeningTag)(t.paragraphCTAUrl)
    }, !0), new rRa.default({
      slightlyTooMany: 20,
      farTooMany: 25,
      urlTitle: (0, Qn.createAnchorOpeningTag)(t.sentenceLengthUrlTitle),
      urlCallToAction: (0, Qn.createAnchorOpeningTag)(t.sentenceLengthCTAUrl)
    }, !1, !0), new sRa.default({
      urlTitle: (0, Qn.createAnchorOpeningTag)(t.transitionWordsUrlTitle),
      urlCallToAction: (0, Qn.createAnchorOpeningTag)(t.transitionWordsCTAUrl)
    }), new iRa.default({
      urlTitle: (0, Qn.createAnchorOpeningTag)(t.passiveVoiceUrlTitle),
      urlCallToAction: (0, Qn.createAnchorOpeningTag)(t.passiveVoiceCTAUrl)
    }), new oRa.default({
      urlTitle: (0, Qn.createAnchorOpeningTag)(t.textPresenceUrlTitle),
      urlCallToAction: (0, Qn.createAnchorOpeningTag)(t.textPresenceCTAUrl)
    })];
  }
}
np.default = lRa;
Object.defineProperty(Qh, "__esModule", {
  value: !0
});
Qh.default = void 0;
var dRa = kE(np), uRa = kE(As), cRa = kE(Es), Jg = Ce;
function kE(e) {
  return e && e.__esModule ? e : { default: e };
}
class pRa extends dRa.default {
  /**
   * Creates a new ProductContentAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "productCornerstoneContentAssessor", this.addAssessment("subheadingsTooLong", new uRa.default({
      parameters: {
        slightlyTooMany: 250,
        farTooMany: 300,
        recommendedMaximumLength: 250
      },
      urlTitle: (0, Jg.createAnchorOpeningTag)(t.subheadingUrlTitle),
      urlCallToAction: (0, Jg.createAnchorOpeningTag)(t.subheadingCTAUrl),
      cornerstoneContent: !0
    })), this.addAssessment("textSentenceLength", new cRa.default({
      slightlyTooMany: 15,
      farTooMany: 20,
      urlTitle: (0, Jg.createAnchorOpeningTag)(t.sentenceLengthUrlTitle),
      urlCallToAction: (0, Jg.createAnchorOpeningTag)(t.sentenceLengthCTAUrl)
    }, !0, !0));
  }
}
Qh.default = pRa;
var Xh = {}, rp = {};
Object.defineProperty(rp, "__esModule", {
  value: !0
});
rp.default = void 0;
var gRa = io(Ts), mRa = io(bn), fRa = io(en), hRa = io(ut), yRa = io(an), zRa = io($s), bRa = io(tn), wRa = io(At), un = Ce;
function io(e) {
  return e && e.__esModule ? e : { default: e };
}
class vRa extends gRa.default {
  /**
   * Creates a new ProductRelatedKeywordAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "productPageRelatedKeywordAssessor", this._assessments = [new mRa.default({
      urlTitle: (0, un.createAnchorOpeningTag)(t.introductionKeyphraseUrlTitle),
      urlCallToAction: (0, un.createAnchorOpeningTag)(t.introductionKeyphraseCTAUrl)
    }), new fRa.default({
      parameters: {
        recommendedMinimum: 4,
        recommendedMaximum: 6,
        acceptableMaximum: 8,
        acceptableMinimum: 2
      },
      isRelatedKeyphrase: !0,
      urlTitle: (0, un.createAnchorOpeningTag)(t.keyphraseLengthUrlTitle),
      urlCallToAction: (0, un.createAnchorOpeningTag)(t.keyphraseLengthCTAUrl)
    }, !0), new hRa.default({
      urlTitle: (0, un.createAnchorOpeningTag)(t.keyphraseDensityUrlTitle),
      urlCallToAction: (0, un.createAnchorOpeningTag)(t.keyphraseDensityCTAUrl)
    }), new yRa.default({
      urlTitle: (0, un.createAnchorOpeningTag)(t.metaDescriptionKeyphraseUrlTitle),
      urlCallToAction: (0, un.createAnchorOpeningTag)(t.metaDescriptionKeyphraseCTAUrl)
    }), new zRa.default({
      urlTitle: (0, un.createAnchorOpeningTag)(t.textCompetingLinksUrlTitle),
      urlCallToAction: (0, un.createAnchorOpeningTag)(t.textCompetingLinksCTAUrl)
    }), new bRa.default({
      urlTitle: (0, un.createAnchorOpeningTag)(t.functionWordsInKeyphraseUrlTitle),
      urlCallToAction: (0, un.createAnchorOpeningTag)(t.functionWordsInKeyphraseCTAUrl)
    }), new wRa.default({
      urlTitle: (0, un.createAnchorOpeningTag)(t.imageKeyphraseUrlTitle),
      urlCallToAction: (0, un.createAnchorOpeningTag)(t.imageKeyphraseCTAUrl)
    })];
  }
}
rp.default = vRa;
Object.defineProperty(Xh, "__esModule", {
  value: !0
});
Xh.default = void 0;
var kRa = GM(rp), _Ra = GM(At), vP = Ce;
function GM(e) {
  return e && e.__esModule ? e : { default: e };
}
class ERa extends kRa.default {
  /**
   * Creates a new ProductCornerstoneRelatedKeywordAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "productPageCornerstoneRelatedKeywordAssessor", this.addAssessment("imageKeyphrase", new _Ra.default({
      scores: {
        withAltNonKeyword: 3,
        withAlt: 3,
        noAlt: 3
      },
      urlTitle: (0, vP.createAnchorOpeningTag)(t.imageKeyphraseUrlTitle),
      urlCallToAction: (0, vP.createAnchorOpeningTag)(t.imageKeyphraseCTAUrl)
    }));
  }
}
Xh.default = ERa;
var Zh = {}, sp = {};
Object.defineProperty(sp, "__esModule", {
  value: !0
});
sp.default = void 0;
var ARa = Nt(rr), TRa = Nt(bn), $Ra = Nt(en), jRa = Nt(ut), xRa = Nt(an), SRa = Nt($s), ORa = Nt(tn), IRa = Nt(At), CRa = Nt(nn), PRa = Nt(no), RRa = Nt(Cn), DRa = Nt(Br), NRa = Nt(sr), LRa = Nt(ct), MRa = Nt(oi), qRa = Nt(ol), pa = Ce;
function Nt(e) {
  return e && e.__esModule ? e : { default: e };
}
class FRa extends ARa.default {
  /**
   * Creates a new ProductSEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "productSEOAssessor", this._assessments = [new TRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.introductionKeyphraseUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.introductionKeyphraseCTAUrl)
    }), new $Ra.default({
      parameters: {
        recommendedMinimum: 4,
        recommendedMaximum: 6,
        acceptableMaximum: 8,
        acceptableMinimum: 2
      },
      urlTitle: (0, pa.createAnchorOpeningTag)(t.keyphraseLengthUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.keyphraseLengthCTAUrl)
    }, !0), new jRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.keyphraseDensityUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.keyphraseDensityCTAUrl)
    }), new xRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.metaDescriptionKeyphraseUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.metaDescriptionKeyphraseCTAUrl)
    }), new CRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.metaDescriptionLengthUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.metaDescriptionLengthCTAUrl)
    }), new PRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.subheadingsKeyphraseUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.subheadingsKeyphraseCTAUrl)
    }), new SRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.textCompetingLinksUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.textCompetingLinksCTAUrl)
    }), new RRa.default({
      recommendedMinimum: 200,
      slightlyBelowMinimum: 150,
      belowMinimum: 100,
      veryFarBelowMinimum: 50,
      urlTitle: (0, pa.createAnchorOpeningTag)(t.textLengthUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.textLengthCTAUrl),
      customContentType: this.type
    }), new DRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.titleKeyphraseUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.titleKeyphraseCTAUrl)
    }), new NRa.default({
      scores: {
        widthTooShort: 9
      },
      urlTitle: (0, pa.createAnchorOpeningTag)(t.titleWidthUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.titleWidthCTAUrl)
    }, !0), new LRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.urlKeyphraseUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.urlKeyphraseCTAUrl)
    }), new ORa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.functionWordsInKeyphraseUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.functionWordsInKeyphraseCTAUrl)
    }), new MRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.singleH1UrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.singleH1CTAUrl)
    }), new qRa.default({
      scores: {
        okay: 6
      },
      recommendedCount: 4,
      urlTitle: (0, pa.createAnchorOpeningTag)(t.imageCountUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.imageCountCTAUrl)
    }, t.countVideos), new IRa.default({
      urlTitle: (0, pa.createAnchorOpeningTag)(t.imageKeyphraseUrlTitle),
      urlCallToAction: (0, pa.createAnchorOpeningTag)(t.imageKeyphraseCTAUrl)
    })];
  }
}
sp.default = FRa;
Object.defineProperty(Zh, "__esModule", {
  value: !0
});
Zh.default = void 0;
var BRa = ip(sp), WRa = ip(nn), URa = ip(Cn), HRa = ip(ct), GRa = ip(At), Ri = Ce;
function ip(e) {
  return e && e.__esModule ? e : { default: e };
}
class VRa extends BRa.default {
  /**
   * Creates a new ProductCornerstoneSEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "productCornerstoneSEOAssessor", this.addAssessment("metaDescriptionLength", new WRa.default({
      scores: {
        tooLong: 3,
        tooShort: 3
      },
      urlTitle: (0, Ri.createAnchorOpeningTag)(t.metaDescriptionLengthUrlTitle),
      urlCallToAction: (0, Ri.createAnchorOpeningTag)(t.metaDescriptionLengthCTAUrl)
    })), this.addAssessment("textLength", new URa.default({
      recommendedMinimum: 400,
      slightlyBelowMinimum: 300,
      belowMinimum: 200,
      scores: {
        belowMinimum: -20,
        farBelowMinimum: -20
      },
      urlTitle: (0, Ri.createAnchorOpeningTag)(t.textLengthUrlTitle),
      urlCallToAction: (0, Ri.createAnchorOpeningTag)(t.textLengthCTAUrl),
      cornerstoneContent: !0,
      customContentType: this.type
    })), this.addAssessment("slugKeyword", new HRa.default({
      scores: {
        okay: 3
      },
      urlTitle: (0, Ri.createAnchorOpeningTag)(t.urlKeyphraseUrlTitle),
      urlCallToAction: (0, Ri.createAnchorOpeningTag)(t.urlKeyphraseCTAUrl)
    })), this.addAssessment("imageKeyphrase", new GRa.default({
      scores: {
        withAltNonKeyword: 3,
        withAlt: 3,
        noAlt: 3
      },
      urlTitle: (0, Ri.createAnchorOpeningTag)(t.imageKeyphraseUrlTitle),
      urlCallToAction: (0, Ri.createAnchorOpeningTag)(t.imageKeyphraseCTAUrl)
    }));
  }
}
Zh.default = VRa;
var Jh = {}, op = {};
Object.defineProperty(op, "__esModule", {
  value: !0
});
op.default = void 0;
var KRa = oo(rr), YRa = oo(en), QRa = oo(an), XRa = oo(nn), ZRa = oo(Br), JRa = oo(sr), e3a = oo(ct), a3a = oo(tn), cn = Ce;
function oo(e) {
  return e && e.__esModule ? e : { default: e };
}
class t3a extends KRa.default {
  /**
   * Creates a new StoreBlogSEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "storeBlogSEOAssessor", this._assessments = [new YRa.default({
      urlTitle: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify10"),
      urlCallToAction: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify11")
    }), new QRa.default({
      urlTitle: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify14"),
      urlCallToAction: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify15")
    }), new XRa.default({
      urlTitle: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify46"),
      urlCallToAction: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify47")
    }), new ZRa.default({
      urlTitle: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify24"),
      urlCallToAction: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify25")
    }), new JRa.default({
      scores: {
        widthTooShort: 9
      },
      urlTitle: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify52"),
      urlCallToAction: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify53")
    }, !0), new e3a.default({
      urlTitle: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify26"),
      urlCallToAction: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify27")
    }), new a3a.default({
      urlTitle: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify50"),
      urlCallToAction: (0, cn.createAnchorOpeningTag)("https://yoa.st/shopify51")
    })];
  }
}
op.default = t3a;
Object.defineProperty(Jh, "__esModule", {
  value: !0
});
Jh.default = void 0;
var n3a = _E(op), r3a = _E(nn), s3a = _E(ct), em = Ce;
function _E(e) {
  return e && e.__esModule ? e : { default: e };
}
class i3a extends n3a.default {
  /**
   * Creates a new StoreBlogCornerstoneSEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "storeBlogCornerstoneSEOAssessor", this.addAssessment("metaDescriptionLength", new r3a.default({
      scores: {
        tooLong: 3,
        tooShort: 3
      },
      urlTitle: (0, em.createAnchorOpeningTag)("https://yoa.st/shopify46"),
      urlCallToAction: (0, em.createAnchorOpeningTag)("https://yoa.st/shopify47")
    })), this.addAssessment("slugKeyword", new s3a.default({
      scores: {
        okay: 3
      },
      urlTitle: (0, em.createAnchorOpeningTag)("https://yoa.st/shopify26"),
      urlCallToAction: (0, em.createAnchorOpeningTag)("https://yoa.st/shopify27")
    }));
  }
}
Jh.default = i3a;
var ey = {}, lp = {};
Object.defineProperty(lp, "__esModule", {
  value: !0
});
lp.default = void 0;
var o3a = lo(_s), l3a = lo(As), d3a = lo(el), u3a = lo(Es), c3a = lo(al), p3a = lo(nl), g3a = lo(rl), m3a = lo(Wd), pn = Ce;
function lo(e) {
  return e && e.__esModule ? e : { default: e };
}
class f3a extends o3a.default {
  /**
   * Creates a new StorePostsAndPagesContentAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "storePostsAndPagesContentAssessor", this._assessments = [new l3a.default({
      urlTitle: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify68"),
      urlCallToAction: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify69")
    }), new d3a.default({
      urlTitle: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify66"),
      urlCallToAction: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify67")
    }), new u3a.default({
      urlTitle: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify48"),
      urlCallToAction: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify49")
    }), new c3a.default({
      urlTitle: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify44"),
      urlCallToAction: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify45")
    }), new p3a.default({
      urlTitle: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify42"),
      urlCallToAction: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify43")
    }), new g3a.default({
      urlTitle: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify56"),
      urlCallToAction: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify57")
    }), new m3a.default({
      urlTitle: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify5"),
      urlCallToAction: (0, pn.createAnchorOpeningTag)("https://yoa.st/shopify65")
    })];
  }
}
lp.default = f3a;
Object.defineProperty(ey, "__esModule", {
  value: !0
});
ey.default = void 0;
var h3a = EE(lp), y3a = EE(As), z3a = EE(Es), am = Ce;
function EE(e) {
  return e && e.__esModule ? e : { default: e };
}
class b3a extends h3a.default {
  /**
   * Creates a new StorePostsAndPagesCornerstoneContentAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "storePostsAndPagesCornerstoneContentAssessor", this.addAssessment("subheadingsTooLong", new y3a.default({
      parameters: {
        slightlyTooMany: 250,
        farTooMany: 300,
        recommendedMaximumLength: 250
      },
      urlTitle: (0, am.createAnchorOpeningTag)("https://yoa.st/shopify68"),
      urlCallToAction: (0, am.createAnchorOpeningTag)("https://yoa.st/shopify69"),
      cornerstoneContent: !0
    })), this.addAssessment("textSentenceLength", new z3a.default({
      slightlyTooMany: 20,
      farTooMany: 25,
      urlTitle: (0, am.createAnchorOpeningTag)("https://yoa.st/shopify48"),
      urlCallToAction: (0, am.createAnchorOpeningTag)("https://yoa.st/shopify49")
    }, !0));
  }
}
ey.default = b3a;
var ay = {}, dp = {};
Object.defineProperty(dp, "__esModule", {
  value: !0
});
dp.default = void 0;
var w3a = uo(Ts), v3a = uo(bn), k3a = uo(en), _3a = uo(ut), E3a = uo(an), A3a = uo($s), T3a = uo(tn), $3a = uo(At), gn = Ce;
function uo(e) {
  return e && e.__esModule ? e : { default: e };
}
class j3a extends w3a.default {
  /**
   * Creates a new StorePostsAndPagesRelatedKeywordAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "storePostsAndPagesRelatedKeywordAssessor", this._assessments = [new v3a.default({
      urlTitle: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify8"),
      urlCallToAction: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify9")
    }), new k3a.default({
      isRelatedKeyphrase: !0,
      urlTitle: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify10"),
      urlCallToAction: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify11")
    }), new _3a.default({
      urlTitle: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify12"),
      urlCallToAction: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify13")
    }), new E3a.default({
      urlTitle: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify14"),
      urlCallToAction: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify15")
    }), new A3a.default({
      urlTitle: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify18"),
      urlCallToAction: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify19")
    }), new T3a.default({
      urlTitle: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify50"),
      urlCallToAction: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify51")
    }), new $3a.default({
      urlTitle: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify22"),
      urlCallToAction: (0, gn.createAnchorOpeningTag)("https://yoa.st/shopify23")
    })];
  }
}
dp.default = j3a;
Object.defineProperty(ay, "__esModule", {
  value: !0
});
ay.default = void 0;
var x3a = VM(dp), S3a = VM(At), kP = Ce;
function VM(e) {
  return e && e.__esModule ? e : { default: e };
}
class O3a extends x3a.default {
  /**
   * Creates a new StorePostsAndPagesCornerstoneRelatedKeywordAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "storePostsAndPagesCornerstoneRelatedKeywordAssessor", this.addAssessment("imageKeyphrase", new S3a.default({
      scores: {
        withAltNonKeyword: 3,
        withAlt: 3,
        noAlt: 3
      },
      urlTitle: (0, kP.createAnchorOpeningTag)("https://yoa.st/shopify22"),
      urlCallToAction: (0, kP.createAnchorOpeningTag)("https://yoa.st/shopify23")
    }));
  }
}
ay.default = O3a;
var ty = {}, up = {};
Object.defineProperty(up, "__esModule", {
  value: !0
});
up.default = void 0;
var I3a = ft(rr), C3a = ft(bn), P3a = ft(en), R3a = ft(ut), D3a = ft(an), N3a = ft(nn), L3a = ft(no), M3a = ft($s), q3a = ft(tn), F3a = ft(At), B3a = ft(ol), W3a = ft(Cn), U3a = ft(Yd), H3a = ft(Br), G3a = ft(Kd), V3a = ft(sr), K3a = ft(ct), Y3a = ft(oi), na = Ce;
function ft(e) {
  return e && e.__esModule ? e : { default: e };
}
class Q3a extends I3a.default {
  /**
   * Creates a new StorePostsAndPagesSEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "storePostsAndPagesSEOAssessor", this._assessments = [new C3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify8"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify9")
    }), new P3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify10"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify11")
    }), new R3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify12"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify13")
    }), new D3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify14"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify15")
    }), new N3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify46"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify47")
    }), new L3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify16"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify17")
    }), new M3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify18"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify19")
    }), new F3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify22"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify23")
    }), new B3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify20"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify21")
    }), new W3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify58"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify59")
    }), new U3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify62"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify63")
    }), new H3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify24"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify25")
    }), new G3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify60"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify61")
    }), new V3a.default({
      scores: {
        widthTooShort: 9
      },
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify52"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify53")
    }, !0), new K3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify26"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify27")
    }), new q3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify50"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify51")
    }), new Y3a.default({
      urlTitle: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify54"),
      urlCallToAction: (0, na.createAnchorOpeningTag)("https://yoa.st/shopify55")
    })];
  }
}
up.default = Q3a;
Object.defineProperty(ty, "__esModule", {
  value: !0
});
ty.default = void 0;
var X3a = cp(up), Z3a = cp(nn), J3a = cp(Cn), eDa = cp(ct), aDa = cp(At), Di = Ce;
function cp(e) {
  return e && e.__esModule ? e : { default: e };
}
class tDa extends X3a.default {
  /**
   * Creates a new StorePostsAndPagesCornerstoneSEOAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "storePostsAndPagesCornerstoneSEOAssessor", this.addAssessment("metaDescriptionLength", new Z3a.default({
      scores: {
        tooLong: 3,
        tooShort: 3
      },
      urlTitle: (0, Di.createAnchorOpeningTag)("https://yoa.st/shopify46"),
      urlCallToAction: (0, Di.createAnchorOpeningTag)("https://yoa.st/shopify47")
    })), this.addAssessment("textLength", new J3a.default({
      recommendedMinimum: 900,
      slightlyBelowMinimum: 400,
      belowMinimum: 300,
      scores: {
        belowMinimum: -20,
        farBelowMinimum: -20
      },
      urlTitle: (0, Di.createAnchorOpeningTag)("https://yoa.st/shopify58"),
      urlCallToAction: (0, Di.createAnchorOpeningTag)("https://yoa.st/shopify59"),
      cornerstoneContent: !0
    })), this.addAssessment("slugKeyword", new eDa.default({
      scores: {
        okay: 3
      },
      urlTitle: (0, Di.createAnchorOpeningTag)("https://yoa.st/shopify26"),
      urlCallToAction: (0, Di.createAnchorOpeningTag)("https://yoa.st/shopify27")
    })), this.addAssessment("imageKeyphrase", new aDa.default({
      scores: {
        withAltNonKeyword: 3,
        withAlt: 3,
        noAlt: 3
      },
      urlTitle: (0, Di.createAnchorOpeningTag)("https://yoa.st/shopify22"),
      urlCallToAction: (0, Di.createAnchorOpeningTag)("https://yoa.st/shopify23")
    }));
  }
}
ty.default = tDa;
var ny = {};
Object.defineProperty(ny, "__esModule", {
  value: !0
});
ny.default = void 0;
var nDa = AE(zn), rDa = AE(an), sDa = AE(nn);
function AE(e) {
  return e && e.__esModule ? e : { default: e };
}
class iDa extends nDa.default {
  /**
   * Creates a new MetaDescriptionAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "metaDescriptionAssessor", this._assessments = [new rDa.default(), new sDa.default()];
  }
}
ny.default = iDa;
var ry = {};
Object.defineProperty(ry, "__esModule", {
  value: !0
});
ry.default = void 0;
var oDa = TE(zn), lDa = TE(sr), dDa = TE(Br);
function TE(e) {
  return e && e.__esModule ? e : { default: e };
}
class uDa extends oDa.default {
  /**
   * Creates a new SeoTitleAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "seoTitleAssessor", this._assessments = [new lDa.default(), new dDa.default()];
  }
}
ry.default = uDa;
var sy = {};
Object.defineProperty(sy, "__esModule", {
  value: !0
});
sy.default = void 0;
var cDa = pp(zn), pDa = pp(bn), gDa = pp(ut), mDa = pp(no), fDa = pp(At);
function pp(e) {
  return e && e.__esModule ? e : { default: e };
}
class hDa extends cDa.default {
  /**
   * Creates a new KeyphraseUseAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "keyphraseUseAssessor", this._assessments = [new pDa.default(), new gDa.default(), new mDa.default(), new fDa.default()];
  }
}
sy.default = hDa;
var iy = {};
Object.defineProperty(iy, "__esModule", {
  value: !0
});
iy.default = void 0;
var yDa = $E(zn), zDa = $E(en), bDa = $E(tn);
function $E(e) {
  return e && e.__esModule ? e : { default: e };
}
class wDa extends yDa.default {
  /**
   * Creates a new KeyphraseAssessor instance.
   * @param {Researcher}	researcher	The researcher to use.
   * @param {Object}		[options]	The assessor options.
   */
  constructor(a, t) {
    super(a, t), this.type = "keyphraseAssessor", this._assessments = [new zDa.default(), new bDa.default()];
  }
}
iy.default = wDa;
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "Assessor", {
    enumerable: !0,
    get: function() {
      return a.default;
    }
  }), Object.defineProperty(e, "CollectionCornerstoneRelatedKeywordAssessor", {
    enumerable: !0,
    get: function() {
      return z.default;
    }
  }), Object.defineProperty(e, "CollectionCornerstoneSEOAssessor", {
    enumerable: !0,
    get: function() {
      return v.default;
    }
  }), Object.defineProperty(e, "CollectionRelatedKeywordAssessor", {
    enumerable: !0,
    get: function() {
      return O.default;
    }
  }), Object.defineProperty(e, "CollectionSEOAssessor", {
    enumerable: !0,
    get: function() {
      return I.default;
    }
  }), Object.defineProperty(e, "ContentAssessor", {
    enumerable: !0,
    get: function() {
      return t.default;
    }
  }), Object.defineProperty(e, "CornerstoneContentAssessor", {
    enumerable: !0,
    get: function() {
      return c.default;
    }
  }), Object.defineProperty(e, "CornerstoneRelatedKeywordAssessor", {
    enumerable: !0,
    get: function() {
      return f.default;
    }
  }), Object.defineProperty(e, "CornerstoneSEOAssessor", {
    enumerable: !0,
    get: function() {
      return y.default;
    }
  }), Object.defineProperty(e, "InclusiveLanguageAssessor", {
    enumerable: !0,
    get: function() {
      return n.default;
    }
  }), Object.defineProperty(e, "KeyphraseAssessor", {
    enumerable: !0,
    get: function() {
      return Pe.default;
    }
  }), Object.defineProperty(e, "KeyphraseUseAssessor", {
    enumerable: !0,
    get: function() {
      return we.default;
    }
  }), Object.defineProperty(e, "MetaDescriptionAssessor", {
    enumerable: !0,
    get: function() {
      return de.default;
    }
  }), Object.defineProperty(e, "ProductContentAssessor", {
    enumerable: !0,
    get: function() {
      return j.default;
    }
  }), Object.defineProperty(e, "ProductCornerstoneContentAssessor", {
    enumerable: !0,
    get: function() {
      return A.default;
    }
  }), Object.defineProperty(e, "ProductCornerstoneRelatedKeywordAssessor", {
    enumerable: !0,
    get: function() {
      return x.default;
    }
  }), Object.defineProperty(e, "ProductCornerstoneSEOAssessor", {
    enumerable: !0,
    get: function() {
      return w.default;
    }
  }), Object.defineProperty(e, "ProductRelatedKeywordAssessor", {
    enumerable: !0,
    get: function() {
      return S.default;
    }
  }), Object.defineProperty(e, "ProductSEOAssessor", {
    enumerable: !0,
    get: function() {
      return P.default;
    }
  }), Object.defineProperty(e, "RelatedKeywordAssessor", {
    enumerable: !0,
    get: function() {
      return r.default;
    }
  }), Object.defineProperty(e, "RelatedKeywordTaxonomyAssessor", {
    enumerable: !0,
    get: function() {
      return o.default;
    }
  }), Object.defineProperty(e, "SEOAssessor", {
    enumerable: !0,
    get: function() {
      return l.default;
    }
  }), Object.defineProperty(e, "SeoTitleAssessor", {
    enumerable: !0,
    get: function() {
      return ve.default;
    }
  }), Object.defineProperty(e, "StoreBlogCornerstoneSEOAssessor", {
    enumerable: !0,
    get: function() {
      return M.default;
    }
  }), Object.defineProperty(e, "StoreBlogSEOAssessor", {
    enumerable: !0,
    get: function() {
      return G.default;
    }
  }), Object.defineProperty(e, "StorePostsAndPagesContentAssessor", {
    enumerable: !0,
    get: function() {
      return Y.default;
    }
  }), Object.defineProperty(e, "StorePostsAndPagesCornerstoneContentAssessor", {
    enumerable: !0,
    get: function() {
      return U.default;
    }
  }), Object.defineProperty(e, "StorePostsAndPagesCornerstoneRelatedKeywordAssessor", {
    enumerable: !0,
    get: function() {
      return V.default;
    }
  }), Object.defineProperty(e, "StorePostsAndPagesCornerstoneSEOAssessor", {
    enumerable: !0,
    get: function() {
      return F.default;
    }
  }), Object.defineProperty(e, "StorePostsAndPagesRelatedKeywordAssessor", {
    enumerable: !0,
    get: function() {
      return X.default;
    }
  }), Object.defineProperty(e, "StorePostsAndPagesSEOAssessor", {
    enumerable: !0,
    get: function() {
      return D.default;
    }
  }), Object.defineProperty(e, "TaxonomyAssessor", {
    enumerable: !0,
    get: function() {
      return u.default;
    }
  });
  var a = me(zn), t = me(_s), n = me(Yc), r = me(Ts), o = me(ep), l = me(rr), u = me(Yi), c = me(Gd), f = me(Gc), y = me(Vd), z = me(Kh), v = me(Yh), O = me(ap), I = me(tp), A = me(Qh), x = me(Xh), w = me(Zh), j = me(np), S = me(rp), P = me(sp), M = me(Jh), G = me(op), U = me(ey), V = me(ay), F = me(ty), Y = me(lp), X = me(dp), D = me(up), de = me(ny), ve = me(ry), we = me(sy), Pe = me(iy);
  function me(ta) {
    return ta && ta.__esModule ? ta : { default: ta };
  }
})(HM);
var oy = {}, ly = {};
Object.defineProperty(ly, "__esModule", {
  value: !0
});
ly.default = void 0;
var Kl = K, vDa = KM(Ud), kDa = KM(Vh);
function KM(e) {
  return e && e.__esModule ? e : { default: e };
}
class _Da {
  /**
   * Constructs the AssessorPresenter.
   *
   * @param {Object} args A list of arguments to use in the presenter.
   * @param {object} args.targets The HTML elements to render the output to.
   * @param {string} args.targets.output The HTML element to render the individual ratings out to.
   * @param {string} args.targets.overall The HTML element to render the overall rating out to.
   * @param {string} args.keyword The keyword to use for checking, when calculating the overall rating.
   * @param {SEOAssessor} args.assessor The Assessor object to retrieve assessment results from.
   *
   * @constructor
   */
  constructor(a) {
    this.keyword = a.keyword, this.assessor = a.assessor, this.output = a.targets.output, this.overall = a.targets.overall || "overallScore", this.presenterConfig = (0, kDa.default)(), this._disableMarkerButtons = !1, this._activeMarker = !1;
  }
  /**
   * Sets the keyword.
   *
   * @param {string} keyword The keyword to use.
   * @returns {void}
   */
  setKeyword(a) {
    this.keyword = a;
  }
  /**
   * Checks whether a specific property exists in the presenter configuration.
   *
   * @param {string} property The property name to search for.
   * @returns {boolean} Whether or not the property exists.
   */
  configHasProperty(a) {
    return this.presenterConfig.hasOwnProperty(a);
  }
  /**
   * Gets a fully formatted indicator object that can be used.
   *
   * @param {string} rating The rating to use.
   * @returns {Object} An object containing the class, the screen reader text, and the full text.
   */
  getIndicator(a) {
    return {
      className: this.getIndicatorColorClass(a),
      screenReaderText: this.getIndicatorScreenReaderText(a),
      fullText: this.getIndicatorFullText(a),
      screenReaderReadabilityText: this.getIndicatorScreenReaderReadabilityText(a)
    };
  }
  /**
   * Gets the indicator color class from the presenter configuration, if it exists.
   *
   * @param {string} rating The rating to check against the config.
   * @returns {string} String containing the CSS class to be used.
   */
  getIndicatorColorClass(a) {
    return this.configHasProperty(a) ? this.presenterConfig[a].className : "";
  }
  /**
   * Gets the indicator screen reader text from the presenter configuration, if it exists.
   *
   * @param {string} rating The rating to check against the config.
   * @returns {string} Translated string containing the screen reader text to be used.
   */
  getIndicatorScreenReaderText(a) {
    return this.configHasProperty(a) ? this.presenterConfig[a].screenReaderText : "";
  }
  /**
   * Gets the indicator screen reader readability text from the presenter configuration, if it exists.
   *
   * @param {string} rating The rating to check against the config.
   * @returns {string} Translated string containing the screen reader readability text to be used.
   */
  getIndicatorScreenReaderReadabilityText(a) {
    return this.configHasProperty(a) ? this.presenterConfig[a].screenReaderReadabilityText : "";
  }
  /**
   * Gets the indicator full text from the presenter configuration, if it exists.
   *
   * @param {string} rating The rating to check against the config.
   * @returns {string} Translated string containing the full text to be used.
   */
  getIndicatorFullText(a) {
    return this.configHasProperty(a) ? this.presenterConfig[a].fullText : "";
  }
  /**
   * Adds a rating based on the numeric score.
   *
   * @param {Object} result Object based on the Assessment result. Requires a score property to work.
   * @returns {Object} The Assessment result object with the rating added.
   */
  resultToRating(a) {
    return (0, Kl.isObject)(a) ? (a.rating = (0, vDa.default)(a.score), a) : "";
  }
  /**
   * Takes the individual assessment results, sorts and rates them.
   *
   * @returns {Object} Object containing all the individual ratings.
   */
  getIndividualRatings() {
    const a = {}, n = this.sort(this.assessor.getValidResults()).map(this.resultToRating);
    return (0, Kl.forEach)(n, (function(r, o) {
      a[o] = this.addRating(r);
    }).bind(this)), a;
  }
  /**
   * Excludes items from the results that are present in the `exclude` array.
   *
   * @param {Array} results Array containing the items to filter through.
   * @param {Array} exclude Array of results to exclude.
   * @returns {Array} Array containing items that remain after exclusion.
   */
  excludeFromResults(a, t) {
    return (0, Kl.difference)(a, t);
  }
  /**
   * Sorts results based on their score property and always places items considered to be non-sortable, at the top.
   *
   * @param {Array} results Array containing the results that need to be sorted.
   * @returns {Array} Array containing the sorted results.
   */
  sort(a) {
    const t = this.getUndefinedScores(a), n = this.excludeFromResults(a, t);
    return n.sort(function(r, o) {
      return r.score - o.score;
    }), t.concat(n);
  }
  /**
   * Returns a subset of results that have an undefined score or a score set to zero.
   *
   * @param {Array} results The results to filter through.
   * @returns {Array} A subset of results containing items with an undefined score or where the score is zero.
   */
  getUndefinedScores(a) {
    return a.filter(function(t) {
      return (0, Kl.isUndefined)(t.score) || t.score === 0;
    });
  }
  /**
   * Creates a rating object based on the item that is being passed.
   *
   * @param {Object} item The item to check and create a rating object from.
   * @returns {Object} Object containing a parsed item, including a colored indicator.
   */
  addRating(a) {
    const t = this.getIndicator(a.rating);
    return t.text = a.text, t.identifier = a.getIdentifier(), a.hasMarker() && (t.marker = a.getMarker()), t;
  }
  /**
   * Calculates the overall rating score based on the overall score.
   *
   * @param {Number} overallScore The overall score to use in the calculation.
   * @returns {Object} The rating based on the score.
   */
  getOverallRating(a) {
    let t = 0;
    return this.keyword === "" ? this.resultToRating({
      score: t
    }) : ((0, Kl.isNumber)(a) && (t = a / 10), this.resultToRating({
      score: t
    }));
  }
  /**
   * Marks with a given marker. This will set the active marker to the correct value.
   *
   * @param {string} identifier The identifier for the assessment/marker.
   * @param {Function} marker The marker function.
   * @returns {void}
   */
  markAssessment(a, t) {
    this._activeMarker === a ? (this.removeAllMarks(), this._activeMarker = !1) : (t(), this._activeMarker = a), this.render();
  }
  /**
   * Disables the currently active marker in the UI.
   *
   * @returns {void}
   */
  disableMarker() {
    this._activeMarker = !1, this.render();
  }
  /**
   * Disables the marker buttons.
   *
   * @returns {void}
   */
  disableMarkerButtons() {
    this._disableMarkerButtons = !0, this.render();
  }
  /**
   * Enables the marker buttons.
   *
   * @returns {void}
   */
  enableMarkerButtons() {
    this._disableMarkerButtons = !1, this.render();
  }
  /**
   * Adds an event listener for the marker button
   *
   * @param {string} identifier The identifier for the assessment the marker belongs to.
   * @param {Function} marker The marker function that can mark the assessment in the text.
   * @returns {void}
   */
  addMarkerEventHandler(a, t) {
    document.getElementById(this.output).getElementsByClassName("js-assessment-results__mark-" + a)[0].addEventListener("click", this.markAssessment.bind(this, a, t));
  }
  /**
   * Renders out both the individual and the overall ratings.
   *
   * @returns {void}
   */
  render() {
    this.renderIndividualRatings(), this.renderOverallRating();
  }
  /**
   * Adds event handlers to the mark buttons.
   *
   * @param {Object} scores The list of rendered scores.
   *
   * @returns {void}
   */
  bindMarkButtons(a) {
    (0, Kl.forEach)(a, (function(t) {
      t.hasOwnProperty("marker") && this.addMarkerEventHandler(t.identifier, t.marker);
    }).bind(this));
  }
  /**
   * Removes all marks currently on the text.
   *
   * @returns {void}
   */
  removeAllMarks() {
    this.assessor.getSpecificMarker()(this.assessor.getPaper(), []);
  }
  /**
   * Renders out the individual ratings.
   * Here, this method is set to noop. In `post-scraper.js` and `term-scraper.js` where this method is called, it is overridden with noop as well.
   *
   * @returns {void}
   */
  renderIndividualRatings() {
  }
  /**
   * Renders out the overall rating.
   *
   * @returns {void}
   */
  renderOverallRating() {
    const a = this.getOverallRating(this.assessor.calculateOverallScore()), t = document.getElementById(this.overall);
    t && (t.className = "overallScore " + this.getIndicatorColorClass(a.rating));
  }
}
ly.default = _Da;
var gp = {};
Object.defineProperty(gp, "__esModule", {
  value: !0
});
gp.default = void 0;
var mn = K, gk = EDa($d);
function EDa(e) {
  return e && e.__esModule ? e : { default: e };
}
class ADa {
  /**
   * Setup Pluggable and set its default values.
   *
   * @constructor
   * @param       {App}       app                 The App object to attach to.
   * @property    {number}    preloadThreshold	The maximum time plugins are allowed to preload before we load our content analysis.
   * @property    {object}    plugins             The plugins that have been registered.
   * @property    {object}    modifications 	    The modifications that have been registered. Every modification contains an array with callables.
   * @property    {Array}     customTests         All tests added by plugins.
   */
  constructor(a) {
    this.app = a, this.loaded = !1, this.preloadThreshold = 3e3, this.plugins = {}, this.modifications = {}, this.customTests = [], setTimeout(this._pollLoadingPlugins.bind(this), 1500);
  }
  //  ***** DSL IMPLEMENTATION ***** //
  /**
   * Register a plugin with YoastSEO. A plugin can be declared "ready" right at registration or later using `this.ready`.
   *
   * @param {string}  pluginName      The name of the plugin to be registered.
   * @param {object}  options         The options passed by the plugin.
   * @param {string}  options.status  The status of the plugin being registered. Can either be "loading" or "ready".
   * @returns {boolean}               Whether or not the plugin was successfully registered.
   */
  _registerPlugin(a, t) {
    return typeof a != "string" ? (console.error("Failed to register plugin. Expected parameter `pluginName` to be a string."), !1) : !(0, mn.isUndefined)(t) && typeof t != "object" ? (console.error("Failed to register plugin " + a + ". Expected parameters `options` to be a object."), !1) : this._validateUniqueness(a) === !1 ? (console.error("Failed to register plugin. Plugin with name " + a + " already exists"), !1) : (this.plugins[a] = t, !0);
  }
  /**
   * Declare a plugin "ready". Use this if you need to preload data with AJAX.
   *
   * @param {string} pluginName	The name of the plugin to be declared as ready.
   * @returns {boolean}           Whether or not the plugin was successfully declared ready.
   */
  _ready(a) {
    return typeof a != "string" ? (console.error("Failed to modify status for plugin " + a + ". Expected parameter `pluginName` to be a string."), !1) : (0, mn.isUndefined)(this.plugins[a]) ? (console.error("Failed to modify status for plugin " + a + ". The plugin was not properly registered."), !1) : (this.plugins[a].status = "ready", !0);
  }
  /**
   * Used to declare a plugin has been reloaded. If an analysis is currently running. We will reset it to ensure running the latest modifications.
   *
   * @param {string} pluginName   The name of the plugin to be declared as reloaded.
   * @returns {boolean}           Whether or not the plugin was successfully declared as reloaded.
   */
  _reloaded(a) {
    return typeof a != "string" ? (console.error("Failed to reload Content Analysis for " + a + ". Expected parameter `pluginName` to be a string."), !1) : (0, mn.isUndefined)(this.plugins[a]) ? (console.error("Failed to reload Content Analysis for plugin " + a + ". The plugin was not properly registered."), !1) : (this.app.refresh(), !0);
  }
  /**
   * Enables hooking a callable to a specific data filter supported by YoastSEO. Can only be performed for plugins that have finished loading.
   *
   * @param {string}      modification	The name of the filter
   * @param {function}    callable 	    The callable
   * @param {string}      pluginName 	    The plugin that is registering the modification.
   * @param {number}      priority	    (optional) Used to specify the order in which the callables associated with a particular filter are called.
   * 									    Lower numbers correspond with earlier execution.
   * @returns {boolean}                   Whether or not applying the hook was successful.
   */
  _registerModification(a, t, n, r) {
    if (typeof a != "string")
      return console.error("Failed to register modification for plugin " + n + ". Expected parameter `modification` to be a string."), !1;
    if (typeof t != "function")
      return console.error("Failed to register modification for plugin " + n + ". Expected parameter `callable` to be a function."), !1;
    if (typeof n != "string")
      return console.error("Failed to register modification for plugin " + n + ". Expected parameter `pluginName` to be a string."), !1;
    if (this._validateOrigin(n) === !1)
      return console.error("Failed to register modification for plugin " + n + ". The integration has not finished loading yet."), !1;
    const l = {
      callable: t,
      origin: n,
      priority: typeof r == "number" ? r : 10
    };
    return (0, mn.isUndefined)(this.modifications[a]) && (this.modifications[a] = []), this.modifications[a].push(l), !0;
  }
  /**
   * Register test for a specific plugin
   *
   * @returns {void}
   *
   * @deprecated
   */
  _registerTest() {
    console.error("This function is deprecated, please use _registerAssessment");
  }
  /**
   * Register an assessment for a specific plugin
   *
   * @param {object} assessor The assessor object where the assessments needs to be added.
   * @param {string} name The name of the assessment.
   * @param {function} assessment The function to run as an assessment.
   * @param {string} pluginName The name of the plugin associated with the assessment.
   * @returns {boolean} Whether registering the assessment was successful.
   * @private
   */
  _registerAssessment(a, t, n, r) {
    if (!(0, mn.isString)(t))
      throw new gk.default("Failed to register test for plugin " + r + ". Expected parameter `name` to be a string.");
    if (!(0, mn.isObject)(n))
      throw new gk.default("Failed to register assessment for plugin " + r + ". Expected parameter `assessment` to be a function.");
    if (!(0, mn.isString)(r))
      throw new gk.default("Failed to register assessment for plugin " + r + ". Expected parameter `pluginName` to be a string.");
    return t = r + "-" + t, a.addAssessment(t, n), !0;
  }
  // ***** PRIVATE HANDLERS *****//
  /**
   * Poller to handle loading of plugins. Plugins can register with our app to let us know they are going to hook into our Javascript. They are allowed
   * 5 seconds of pre-loading time to fetch all the data they need to be able to perform their data modifications. We will only apply data modifications
   * from plugins that have declared ready within the pre-loading time in order to safeguard UX and data integrity.
   *
   * @param   {number} pollTime (optional) The accumulated time to compare with the pre-load threshold.
   * @returns {void}
   * @private
   */
  _pollLoadingPlugins(a) {
    a = (0, mn.isUndefined)(a) ? 0 : a, this._allReady() === !0 ? (this.loaded = !0, this.app.pluginsLoaded()) : a >= this.preloadThreshold ? this._pollTimeExceeded() : (a += 50, setTimeout(this._pollLoadingPlugins.bind(this, a), 50));
  }
  /**
   * Checks if all registered plugins have finished loading
   *
   * @returns {boolean} Whether or not all registered plugins are loaded.
   * @private
   */
  _allReady() {
    return (0, mn.reduce)(this.plugins, function(a, t) {
      return a && t.status === "ready";
    }, !0);
  }
  /**
   * Removes the plugins that were not loaded within time and calls `pluginsLoaded` on the app.
   *
   * @returns {void}
   * @private
   */
  _pollTimeExceeded() {
    (0, mn.forEach)(this.plugins, function(a, t) {
      !(0, mn.isUndefined)(a.options) && a.options.status !== "ready" && (console.error("Error: Plugin " + t + ". did not finish loading in time."), delete this.plugins[t]);
    }), this.loaded = !0, this.app.pluginsLoaded();
  }
  /**
   * Calls the callables added to a modification hook. See the YoastSEO.js Readme for a list of supported modification hooks.
   *
   * @param	{string}    modification	The name of the filter
   * @param   {*}         data 		    The data to filter
   * @param   {*}         context		    (optional) Object for passing context parameters to the callable.
   * @returns {*} 		                The filtered data
   * @private
   */
  _applyModifications(a, t, n) {
    let r = this.modifications[a];
    return r instanceof Array && r.length > 0 && (r = this._stripIllegalModifications(r), r.sort(function(o, l) {
      return o.priority - l.priority;
    }), (0, mn.forEach)(r, function(o) {
      const l = o.callable, u = l(t, n);
      typeof u == typeof t ? t = u : console.error("Modification with name " + a + " performed by plugin with name " + o.origin + " was ignored because the data that was returned by it was of a different type than the data we had passed it.");
    })), t;
  }
  /**
   * Adds new tests to the analyzer and it's scoring object.
   *
   * @param {Object} analyzer The analyzer object to add the tests to
   * @returns {void}
   * @private
   */
  _addPluginTests(a) {
    this.customTests.map(function(t) {
      this._addPluginTest(a, t);
    }, this);
  }
  /**
   * Adds one new test to the analyzer and it's scoring object.
   *
   * @param {Object}            analyzer              The analyzer that the test will be added to.
   * @param {Object}            pluginTest            The test to be added.
   * @param {string}            pluginTest.name       The name of the test.
   * @param {function}          pluginTest.callable   The function associated with the test.
   * @param {function}          pluginTest.analysis   The function associated with the analyzer.
   * @param {Object}            pluginTest.scoring    The scoring object to be used.
   * @returns {void}
   * @private
   */
  _addPluginTest(a, t) {
    a.addAnalysis({
      name: t.name,
      callable: t.analysis
    }), a.analyzeScorer.addScoring({
      name: t.name,
      scoring: t.scoring
    });
  }
  /**
   * Strips modifications from a callChain if they were not added with a valid origin.
   *
   * @param   {Array} callChain	 The callChain that contains items with possible invalid origins.
   * @returns {Array} callChain 	 The stripped version of the callChain.
   * @private
   */
  _stripIllegalModifications(a) {
    return (0, mn.forEach)(a, (function(t, n) {
      this._validateOrigin(t.origin) === !1 && delete a[n];
    }).bind(this)), a;
  }
  /**
   * Validates if origin of a modification has been registered and finished preloading.
   *
   * @param 	{string}    pluginName      The name of the plugin that needs to be validated.
   * @returns {boolean}                   Whether or not the origin is valid.
   * @private
   */
  _validateOrigin(a) {
    return this.plugins[a].status === "ready";
  }
  /**
   * Validates if registered plugin has a unique name.
   *
   * @param 	{string}    pluginName      The name of the plugin that needs to be validated for uniqueness.
   * @returns {boolean}                   Whether or not the plugin has a unique name.
   * @private
   */
  _validateUniqueness(a) {
    return (0, mn.isUndefined)(this.plugins[a]);
  }
}
gp.default = ADa;
Object.defineProperty(oy, "__esModule", {
  value: !0
});
oy.default = void 0;
var TDa = sa, Qe = K, _P = li(ly), $Da = Ce, EP = li(Xi), jDa = li(ao), xDa = li(gp), SDa = li(Jt), ODa = li(_s), IDa = li(Gd), CDa = li(Vd), PDa = li(rr);
function li(e) {
  return e && e.__esModule ? e : { default: e };
}
const RDa = 800, AP = {
  callbacks: {
    bindElementEvents: Qe.noop,
    updateSnippetValues: Qe.noop,
    saveScores: Qe.noop,
    saveContentScore: Qe.noop,
    updatedContentResults: Qe.noop,
    updatedKeywordsResults: Qe.noop
  },
  sampleText: {
    baseUrl: "example.org/",
    snippetCite: "example-post/",
    title: "",
    keyword: "Choose a focus keyword",
    meta: "",
    text: "Start writing your text!"
  },
  queue: ["wordCount", "keywordDensity", "subHeadings", "stopwords", "fleschReading", "linkCount", "imageCount", "slugKeyword", "urlLength", "metaDescription", "pageTitleKeyword", "pageTitleWidth", "firstParagraph", "'keywordDoubles"],
  typeDelay: 3e3,
  typeDelayStep: 1500,
  maxTypeDelay: 5e3,
  dynamicDelay: !0,
  locale: "en_US",
  translations: {
    domain: "wordpress-seo",
    // eslint-disable-next-line camelcase
    locale_data: {
      "wordpress-seo": {
        "": {}
      }
    }
  },
  replaceTarget: [],
  resetTarget: [],
  elementTarget: [],
  marker: Qe.noop,
  keywordAnalysisActive: !0,
  contentAnalysisActive: !0,
  debounceRefresh: !0
};
function DDa(e) {
  if (!(0, Qe.isObject)(e.callbacks.getData))
    throw new EP.default("The app requires an object with a getdata callback.");
  if (!(0, Qe.isObject)(e.targets))
    throw new EP.default("`targets` is a required App argument, `targets` is not an object.");
}
class NDa {
  /**
   * Loader for the analyzer, loads the eventbinder and the elementdefiner
   *
   * @param {Object} args The arguments passed to the loader.
   * @param {Object} args.translations Jed compatible translations.
   * @param {Object} args.targets Targets to retrieve or set on.
   * @param {String} args.targets.snippet ID for the snippet preview element.
   * @param {String} args.targets.output ID for the element to put the output of the analyzer in.
   * @param {int} args.typeDelay Number of milliseconds to wait between typing to refresh the analyzer output.
   * @param {boolean} args.dynamicDelay   Whether to enable dynamic delay, will ignore type delay if the analyzer takes a long time. Applicable on slow devices.
   * @param {int} args.maxTypeDelay The maximum amount of type delay even if dynamic delay is on.
   * @param {int} args.typeDelayStep The amount with which to increase the typeDelay on each step when dynamic delay is enabled.
   * @param {Object} args.callbacks The callbacks that the app requires.
   * @param {Object} args.assessor The Assessor to use instead of the default assessor.
   * @param {YoastSEO.App~getData} args.callbacks.getData Called to retrieve input data
   * @param {YoastSEO.App~getAnalyzerInput} args.callbacks.getAnalyzerInput Called to retrieve input for the analyzer.
   * @param {YoastSEO.App~bindElementEvents} args.callbacks.bindElementEvents Called to bind events to the DOM elements.
   * @param {YoastSEO.App~updateSnippetValues} args.callbacks.updateSnippetValues Called when the snippet values need to be updated.
   * @param {YoastSEO.App~saveScores} args.callbacks.saveScores Called when the score has been determined by the analyzer.
   * @param {YoastSEO.App~saveContentScore} args.callback.saveContentScore Called when the content score has been determined by the assessor.
   * @param {YoastSEO.App~updatedContentResults} args.callbacks.updatedContentResults Called when the score has been determined by the analyzer.
   * @param {YoastSEO.App~updatedKeywordsResults} args.callback.updatedKeywordsResults Called when the content score has been determined by the assessor.
   * @param {Function} args.callbacks.saveSnippetData Function called when the snippet data is changed.
   * @param {Function} args.marker The marker to use to apply the list of marks retrieved from an assessment.
   *
   * @param {boolean} [args.debouncedRefresh=true] Whether or not to debounce the refresh function. Defaults to true.
   * @param {Researcher} args.researcher The Researcher object to be used.
   *
   * @constructor
   */
  constructor(a) {
    (0, Qe.isObject)(a) || (a = {}), (0, Qe.defaultsDeep)(a, AP), DDa(a), this.config = a, a.debouncedRefresh === !0 && (this.refresh = (0, Qe.debounce)(this.refresh.bind(this), RDa)), this._pureRefresh = (0, Qe.throttle)(this._pureRefresh.bind(this), this.config.typeDelay), this.callbacks = this.config.callbacks, this.researcher = this.config.researcher, (0, TDa.setLocaleData)(this.config.translations.locale_data["wordpress-seo"], "wordpress-seo"), this.initializeAssessors(a), this.pluggable = new xDa.default(this), this.getData(), this.defaultOutputElement = this.getDefaultOutputElement(a), this.defaultOutputElement !== "" && this.showLoadingDialog(), this._assessorOptions = {
      useCornerStone: !1
    }, this.initAssessorPresenters();
  }
  /**
   * Returns the default output element based on which analyses are active.
   *
   * @param {Object} args The arguments passed to the App.
   * @returns {string} The ID of the target that is active.
   */
  getDefaultOutputElement(a) {
    return a.keywordAnalysisActive ? a.targets.output : a.contentAnalysisActive ? a.targets.contentOutput : "";
  }
  /**
   * Sets the assessors based on the assessor options and refreshes them.
   *
   * @param {Object} assessorOptions The specific options.
   * @returns {void}
   */
  changeAssessorOptions(a) {
    this._assessorOptions = (0, Qe.merge)(this._assessorOptions, a), this.seoAssessor = this.getSeoAssessor(), this.contentAssessor = this.getContentAssessor(), this.initAssessorPresenters(), this.refresh();
  }
  /**
   * Returns an instance of the seo assessor to use.
   *
   * @returns {Assessor} The assessor instance.
   */
  getSeoAssessor() {
    const {
      useCornerStone: a
    } = this._assessorOptions;
    return a ? this.cornerStoneSeoAssessor : this.defaultSeoAssessor;
  }
  /**
   * Returns an instance of the content assessor to use.
   *
   * @returns {Assessor} The assessor instance.
   */
  getContentAssessor() {
    const {
      useCornerStone: a
    } = this._assessorOptions;
    return a ? this.cornerStoneContentAssessor : this.defaultContentAssessor;
  }
  /**
   * Initializes assessors based on whether the respective analysis is active.
   *
   * @param {Object} args The arguments passed to the App.
   * @returns {void}
   */
  initializeAssessors(a) {
    this.initializeSEOAssessor(a), this.initializeContentAssessor(a);
  }
  /**
   * Initializes the SEO assessor.
   *
   * @param {Object} args The arguments passed to the App.
   * @returns {void}
   */
  initializeSEOAssessor(a) {
    a.keywordAnalysisActive && (this.defaultSeoAssessor = new PDa.default(this.researcher, {
      marker: this.config.marker
    }), this.cornerStoneSeoAssessor = new CDa.default(this.researcher, {
      marker: this.config.marker
    }), (0, Qe.isUndefined)(a.seoAssessor) ? this.seoAssessor = this.defaultSeoAssessor : this.seoAssessor = a.seoAssessor);
  }
  /**
   * Initializes the content assessor.
   *
   * @param {Object} args The arguments passed to the App.
   * @returns {void}
   */
  initializeContentAssessor(a) {
    a.contentAnalysisActive && (this.defaultContentAssessor = new ODa.default(this.researcher, {
      marker: this.config.marker,
      locale: this.config.locale
    }), this.cornerStoneContentAssessor = new IDa.default(this.researcher, {
      marker: this.config.marker,
      locale: this.config.locale
    }), (0, Qe.isUndefined)(a._contentAssessor) ? this.contentAssessor = this.defaultContentAssessor : this.contentAssessor = a._contentAssessor);
  }
  /**
   * Extends the config with defaults.
   *
   * @param {Object} args The arguments to be extended.
   *
   * @returns {Object} The extended arguments.
   */
  extendConfig(a) {
    return a.sampleText = this.extendSampleText(a.sampleText), a.locale = a.locale || "en_US", a;
  }
  /**
   * Extends sample text config with defaults.
   *
   * @param {Object} sampleText The sample text to be extended.
   * @returns {Object} The extended sample text.
   */
  extendSampleText(a) {
    const t = AP.sampleText;
    if ((0, Qe.isUndefined)(a))
      return t;
    for (const n in a)
      (0, Qe.isUndefined)(a[n]) && (a[n] = t[n]);
    return a;
  }
  /**
   * Registers a custom data callback.
   *
   * @param {Function} callback The callback to register.
   *
   * @returns {void}
   */
  registerCustomDataCallback(a) {
    this.callbacks.custom || (this.callbacks.custom = []), (0, Qe.isFunction)(a) && this.callbacks.custom.push(a);
  }
  /**
   * Retrieves data from the callbacks.getData and applies modification to store these in this.rawData.
   *
   * @returns {void}
   */
  getData() {
    this.rawData = this.callbacks.getData(), (0, Qe.isArray)(this.callbacks.custom) && this.callbacks.custom.forEach((a) => {
      const t = a();
      this.rawData = (0, Qe.merge)(this.rawData, t);
    }), this.pluggable.loaded && (this.rawData.metaTitle = this.pluggable._applyModifications("data_page_title", this.rawData.metaTitle), this.rawData.meta = this.pluggable._applyModifications("data_meta_desc", this.rawData.meta)), this.rawData.titleWidth = (0, $Da.measureTextWidth)(this.rawData.metaTitle), this.rawData.locale = this.config.locale;
  }
  /**
   * Refreshes the analyzer and output of the analyzer, is debounced for a better experience.
   *
   * @returns {void}
   */
  refresh() {
    this.pluggable.loaded && this._pureRefresh();
  }
  /**
   * Refreshes the analyzer and output of the analyzer, is throttled to prevent performance issues.
   *
   * @returns {void}
   *
   * @private
   */
  _pureRefresh() {
    this.getData(), this.runAnalyzer();
  }
  /**
   * Initializes the assessor presenters for content and SEO analysis.
   *
   * @returns {void}
   */
  initAssessorPresenters() {
    (0, Qe.isUndefined)(this.config.targets.output) || (this.seoAssessorPresenter = new _P.default({
      targets: {
        output: this.config.targets.output
      },
      assessor: this.seoAssessor
    })), (0, Qe.isUndefined)(this.config.targets.contentOutput) || (this.contentAssessorPresenter = new _P.default({
      targets: {
        output: this.config.targets.contentOutput
      },
      assessor: this.contentAssessor
    }));
  }
  /**
   * Sets the startTime timestamp.
   *
   * @returns {void}
   */
  startTime() {
    this.startTimestamp = (/* @__PURE__ */ new Date()).getTime();
  }
  /**
   * Sets the endTime timestamp and compares with startTime to determine typeDelayincrease.
   *
   * @returns {void}
   */
  endTime() {
    this.endTimestamp = (/* @__PURE__ */ new Date()).getTime(), this.endTimestamp - this.startTimestamp > this.config.typeDelay && this.config.typeDelay < this.config.maxTypeDelay - this.config.typeDelayStep && (this.config.typeDelay += this.config.typeDelayStep);
  }
  /**
   * Inits a new pageAnalyzer with the inputs from the getInput function and calls the scoreFormatter to format outputs.
   *
   * @returns {void}
   */
  runAnalyzer() {
    if (this.pluggable.loaded === !1)
      return;
    this.config.dynamicDelay && this.startTime(), this.analyzerData = this.modifyData(this.rawData);
    let a = this.analyzerData.text;
    a = (0, SDa.default)(a);
    const t = this.analyzerData.titleWidth;
    this.paper = new jDa.default(a, {
      keyword: this.analyzerData.keyword,
      synonyms: this.analyzerData.synonyms,
      description: this.analyzerData.meta,
      slug: this.analyzerData.slug,
      title: this.analyzerData.metaTitle,
      titleWidth: t,
      locale: this.config.locale,
      permalink: this.analyzerData.permalink
    }), this.config.researcher.setPaper(this.paper), this.runKeywordAnalysis(), this.runContentAnalysis(), this._renderAnalysisResults(), this.config.dynamicDelay && this.endTime();
  }
  /**
   * Runs the keyword analysis and calls the appropriate callbacks.
   *
   * @returns {void}
   */
  runKeywordAnalysis() {
    if (this.config.keywordAnalysisActive) {
      this.seoAssessor.assess(this.paper);
      const a = this.seoAssessor.calculateOverallScore();
      (0, Qe.isUndefined)(this.callbacks.updatedKeywordsResults) || this.callbacks.updatedKeywordsResults(this.seoAssessor.results, a), (0, Qe.isUndefined)(this.callbacks.saveScores) || this.callbacks.saveScores(a, this.seoAssessorPresenter);
    }
  }
  /**
   * Runs the content analysis and calls the appropriate callbacks.
   *
   * @returns {void}
   */
  runContentAnalysis() {
    if (this.config.contentAnalysisActive) {
      this.contentAssessor.assess(this.paper);
      const a = this.contentAssessor.calculateOverallScore();
      (0, Qe.isUndefined)(this.callbacks.updatedContentResults) || this.callbacks.updatedContentResults(this.contentAssessor.results, a), (0, Qe.isUndefined)(this.callbacks.saveContentScore) || this.callbacks.saveContentScore(a, this.contentAssessorPresenter);
    }
  }
  /**
   * Modifies the data with plugins before it is sent to the analyzer.
   *
   * @param   {Object}  data      The data to be modified.
   * @returns {Object}            The data with the applied modifications.
   */
  modifyData(a) {
    return a = JSON.parse(JSON.stringify(a)), a.text = this.pluggable._applyModifications("content", a.text), a.metaTitle = this.pluggable._applyModifications("title", a.metaTitle), a;
  }
  /**
   * Removes the loading dialog and fires the analyzer when all plugins are loaded.
   *
   * @returns {void}
   */
  pluginsLoaded() {
    this.removeLoadingDialog(), this.refresh();
  }
  /**
   * Shows the loading dialog which shows the loading of the plugins.
   *
   * @returns {void}
   */
  showLoadingDialog() {
    const a = document.getElementById(this.defaultOutputElement);
    if (this.defaultOutputElement !== "" && !(0, Qe.isEmpty)(a)) {
      const t = document.createElement("div");
      t.className = "YoastSEO_msg", t.id = "YoastSEO-plugin-loading", document.getElementById(this.defaultOutputElement).appendChild(t);
    }
  }
  /**
   * Updates the loading plugins. Uses the plugins as arguments to show which plugins are loading.
   *
   * @param   {Object}  plugins   The plugins to be parsed into the dialog.
   * @returns {void}
   */
  updateLoadingDialog(a) {
    const t = document.getElementById(this.defaultOutputElement);
    if (this.defaultOutputElement === "" || (0, Qe.isEmpty)(t))
      return;
    const n = document.getElementById("YoastSEO-plugin-loading");
    n.textContent = "", (0, Qe.forEach)(a, function(r, o) {
      n.innerHTML += "<span class=left>" + o + "</span><span class=right " + r.status + ">" + r.status + "</span><br />";
    }), n.innerHTML += "<span class=bufferbar></span>";
  }
  /**
   * Removes the plugin load dialog.
   *
   * @returns {void}
   */
  removeLoadingDialog() {
    const a = document.getElementById(this.defaultOutputElement), t = document.getElementById("YoastSEO-plugin-loading");
    this.defaultOutputElement !== "" && !(0, Qe.isEmpty)(a) && !(0, Qe.isEmpty)(t) && document.getElementById(this.defaultOutputElement).removeChild(document.getElementById("YoastSEO-plugin-loading"));
  }
  // ***** PLUGGABLE PUBLIC DSL ***** //
  /**
   * Delegates to `YoastSEO.app.pluggable.registerPlugin`
   *
   * @param {string}  pluginName      The name of the plugin to be registered.
   * @param {object}  options         The options object.
   * @param {string}  options.status  The status of the plugin being registered. Can either be "loading" or "ready".
   * @returns {boolean}               Whether or not it was successfully registered.
   */
  registerPlugin(a, t) {
    return this.pluggable._registerPlugin(a, t);
  }
  /**
   * Delegates to `YoastSEO.app.pluggable.ready`
   *
   * @param {string}  pluginName  The name of the plugin to check.
   * @returns {boolean}           Whether or not the plugin is ready.
   */
  pluginReady(a) {
    return this.pluggable._ready(a);
  }
  /**
   * Delegates to `YoastSEO.app.pluggable.reloaded`
   *
   * @param {string} pluginName   The name of the plugin to reload
   * @returns {boolean}           Whether or not the plugin was reloaded.
   */
  pluginReloaded(a) {
    return this.pluggable._reloaded(a);
  }
  /**
   * Delegates to `YoastSEO.app.pluggable.registerModification`.
   *
   * @param {string}   modification   The name of the filter.
   * @param {function} callable       The callable function.
   * @param {string}   pluginName     The plugin that is registering the modification.
   * @param {number}   [priority]     Used to specify the order in which the callables associated with a particular filter are called.
   *                                  Lower numbers correspond with earlier execution.
   *
   * @returns {boolean} Whether or not the modification was successfully registered.
   */
  registerModification(a, t, n, r) {
    return this.pluggable._registerModification(a, t, n, r);
  }
  /**
   * Registers a custom assessment for use in the analyzer, this will result in a new line in the analyzer results.
   * The function needs to use the assessment result to return a result based on the contents of the page/posts.
   *
   * Score 0 results in a grey circle if it is not explicitly set by using setscore
   * Scores 0, 1, 2, 3 and 4 result in a red circle
   * Scores 6 and 7 result in a yellow circle
   * Scores 8, 9 and 10 result in a green circle
   *
   * @param {string} name Name of the test.
   * @param {function} assessment The assessment to run.
   * @param {string}   pluginName The plugin that is registering the test.
   * @returns {boolean} Whether or not the test was successfully registered.
   */
  registerAssessment(a, t, n) {
    if (!(0, Qe.isUndefined)(this.seoAssessor))
      return this.pluggable._registerAssessment(this.defaultSeoAssessor, a, t, n) && this.pluggable._registerAssessment(this.cornerStoneSeoAssessor, a, t, n);
  }
  /**
   * Disables markers visually in the UI.
   *
   * @returns {void}
   */
  disableMarkers() {
    (0, Qe.isUndefined)(this.seoAssessorPresenter) || this.seoAssessorPresenter.disableMarker(), (0, Qe.isUndefined)(this.contentAssessorPresenter) || this.contentAssessorPresenter.disableMarker();
  }
  /**
   * Renders the content and keyword analysis results.
   *
   * @returns {void}
   */
  _renderAnalysisResults() {
    this.config.contentAnalysisActive && !(0, Qe.isUndefined)(this.contentAssessorPresenter) && this.contentAssessorPresenter.renderIndividualRatings(), this.config.keywordAnalysisActive && !(0, Qe.isUndefined)(this.seoAssessorPresenter) && (this.seoAssessorPresenter.setKeyword(this.paper.getKeyword()), this.seoAssessorPresenter.render());
  }
  // Deprecated functions
  /**
   * The analyzeTimer calls the checkInputs function with a delay, so the function won't be executed
   * at every keystroke checks the reference object, so this function can be called from anywhere,
   * without problems with different scopes.
   *
   * @deprecated: 1.3 - Use this.refresh() instead.
   *
   * @returns {void}
   */
  analyzeTimer() {
    this.refresh();
  }
  /**
   * Registers a custom test for use in the analyzer, this will result in a new line in the analyzer results. The function
   * has to return a result based on the contents of the page/posts.
   *
   * The scoring object is a special object with definitions about how to translate a result from your analysis function
   * to a SEO score.
   *
   * Negative scores result in a red circle
   * Scores 1, 2, 3, 4 and 5 result in an orange circle
   * Scores 6 and 7 result in a yellow circle
   * Scores 8, 9 and 10 result in a red circle
   *
   * @returns {void}
   *
   * @deprecated since version 1.2
   */
  registerTest() {
    console.error("This function is deprecated, please use registerAssessment");
  }
  /**
   * Switches between the cornerstone and default assessors.
   *
   * @deprecated 1.35.0 - Use changeAssessorOption instead.
   *
   * @param {boolean} useCornerStone True when cornerstone should be used.
   *
   * @returns {void}
   */
  switchAssessors(a) {
    console.warn("Switch assessor is deprecated since YoastSEO.js version 1.35.0"), this.changeAssessorOptions({
      useCornerStone: a
    });
  }
}
oy.default = NDa;
var dy = {};
Object.defineProperty(dy, "__esModule", {
  value: !0
});
dy.default = void 0;
var qu = K;
class LDa {
  /**
   * Returns a mock element that lodash accepts as an element.
   *
   * @returns {object} Mock HTML element.
   */
  static buildMockElement() {
    const a = [];
    return a.nodeType = 1, a;
  }
  /**
   * Returns a mock researcher.
   *
   * @param {Object} expectedValue Expected value.
   * @param {boolean} [multiValue=false] Whether the researcher has multiple values.
   * @param {boolean} [hasMorphologyData=false] Whether the researcher has morphology data.
   * @param {Object|boolean} [config=false] Optional config to be used for an assessment.
   * @param {Object|boolean} [helpers=false] Optional helpers to be used for an assessment.
   *
   * @returns {Object} Mock researcher.
   */
  static buildMockResearcher(a, t = !1, n = !1, r = !1, o = !1) {
    return t && (typeof a == "object" || typeof o == "object" || typeof r == "object") ? {
      /**
       * Returns research results by research name for multi-value mock researches.
       *
       * @param {string} research The name of the research.
       *
       * @returns {Object} The results of the research.
       */
      getResearch: function(l) {
        return a[l];
      },
      /**
       * Returns whether the worker has the specified research.
       * @param {string} research The name of the research.
       * @returns {boolean} Whether the worker has the research.
       */
      hasResearch: function(l) {
        return !(0, qu.isUndefined)(a[l]);
      },
      /**
       * Adds a research.
       * @param {string} name The name of the research.
       * @param {Object} research The research to register.
       *
       * @returns {void}
       */
      addResearch: function(l, u) {
        a[l] = u;
      },
      /**
       * Checks whether morphology data is available.
       *
       * @returns {boolean} True if the researcher has access to morphology data.
       */
      getData: function() {
        return n;
      },
      /**
       * Returns the helper to be used for the assessment.
       * @param {string} name The name of the helper.
       *
       * @returns {function} The helper for the assessment.
       */
      getHelper: function(l) {
        return o[l];
      },
      /**
       * Checks whether a helper with the given name exists.
       * @param {string} name The name to check.
       *
       * @returns {boolean} True if the helper exists.
       */
      hasHelper: function(l) {
        return !(0, qu.isUndefined)(o[l]);
      },
      /**
       * Adds a helper under the given name.
       * @param {string} name The name.
       * @param {function} helper The helper.
       *
       * @returns {void}
       */
      addHelper: function(l, u) {
        o || (o = {}), o[l] = u;
      },
      /**
       * Returns the config to be used for the assessment.
       * @param {string} name The name of the config.
       *
       * @returns {function} The config for the assessment.
       */
      getConfig: function(l) {
        return r[l];
      },
      /**
       * Checks if the config exists.
       * @param {string} name The name of the config
       *
       * @returns {boolean} Whether the config exists.
       */
      hasConfig: function(l) {
        return !(0, qu.isUndefined)(r[l]);
      },
      /**
       * Adds a configuration.
       * @param {string} name The name of the config.
       * @param {Object} researchConfig The config.
       *
       * @returns {void}
       */
      addConfig: function(l, u) {
        r[l] = u;
      }
    } : {
      /**
       * Returns research results.
       *
       * @returns {Object} The results of the research.
       */
      getResearch: function() {
        return a;
      },
      /**
       * Check whether morphology data is available.
       *
       * @returns {boolean} True if the researcher has access to morphology data.
       */
      getData: function() {
        return n;
      },
      /**
       * Returns the helpers to be used for the assessment.
       *
       * @returns {Object} The helpers for the assessment.
       */
      getHelper: function() {
        return o;
      },
      /**
       * Checks whether a helper with the given name exists.
       * @param {string} name The name to check.
       *
       * @returns {boolean} True if the helper exists.
       */
      hasHelper: function(l) {
        return !(0, qu.isUndefined)(o[l]);
      },
      /**
       * Returns the config to be used for the assessment.
       *
       * @returns {Object} The config for the assessment results.
       */
      getConfig: function() {
        return r;
      },
      /**
       * Returns whether the worker has the specified config.
       * @param {string} name The name of the config.
       * @returns {boolean} Whether the worker has the specified config.
       */
      hasConfig: function(l) {
        return !(0, qu.isUndefined)(a[l]);
      }
    };
  }
  /**
   * This method repeats a string and returns a new string based on the string and the amount of repetitions.
   *
   * @param {string} string      String to repeat.
   * @param {int}    repetitions Number of repetitions.
   *
   * @returns {string} The result.
   */
  static buildMockString(a, t) {
    let n = "";
    a = a || "Test ", t = t || 1;
    for (let r = 0; r < t; r++)
      n += a;
    return n;
  }
}
dy.default = LDa;
(function(e) {
  Object.defineProperty(e, "__esModule", {
    value: !0
  }), Object.defineProperty(e, "AnalysisWebWorker", {
    enumerable: !0,
    get: function() {
      return a.AnalysisWebWorker;
    }
  }), Object.defineProperty(e, "AnalysisWorkerWrapper", {
    enumerable: !0,
    get: function() {
      return a.AnalysisWorkerWrapper;
    }
  }), Object.defineProperty(e, "App", {
    enumerable: !0,
    get: function() {
      return z.default;
    }
  }), Object.defineProperty(e, "Assessment", {
    enumerable: !0,
    get: function() {
      return S.default;
    }
  }), Object.defineProperty(e, "AssessmentResult", {
    enumerable: !0,
    get: function() {
      return j.default;
    }
  }), Object.defineProperty(e, "Assessor", {
    enumerable: !0,
    get: function() {
      return v.default;
    }
  }), Object.defineProperty(e, "ContentAssessor", {
    enumerable: !0,
    get: function() {
      return O.default;
    }
  }), Object.defineProperty(e, "DIFFICULTY", {
    enumerable: !0,
    get: function() {
      return P.DIFFICULTY;
    }
  }), Object.defineProperty(e, "Factory", {
    enumerable: !0,
    get: function() {
      return M.default;
    }
  }), Object.defineProperty(e, "Paper", {
    enumerable: !0,
    get: function() {
      return w.default;
    }
  }), Object.defineProperty(e, "Pluggable", {
    enumerable: !0,
    get: function() {
      return x.default;
    }
  }), Object.defineProperty(e, "SeoAssessor", {
    enumerable: !0,
    get: function() {
      return I.default;
    }
  }), Object.defineProperty(e, "TaxonomyAssessor", {
    enumerable: !0,
    get: function() {
      return A.default;
    }
  }), e.config = e.bundledPlugins = e.assessors = e.assessments = void 0, Object.defineProperty(e, "createWorker", {
    enumerable: !0,
    get: function() {
      return a.createWorker;
    }
  }), e.values = e.markers = e.languageProcessing = e.interpreters = e.helpers = e.default = void 0;
  var a = OR, t = V(Bi);
  e.assessments = t;
  var n = V(qM);
  e.bundledPlugins = n;
  var r = V(Ce);
  e.helpers = r;
  var o = V(BM);
  e.markers = o;
  var l = V(R1);
  e.interpreters = l;
  var u = V(WM);
  e.config = u;
  var c = V(eo());
  e.languageProcessing = c;
  var f = V(UM);
  e.values = f;
  var y = V(HM);
  e.assessors = y;
  var z = G(oy), v = G(zn), O = G(_s), I = G(rr), A = G(Yi), x = G(gp), w = G(ao), j = G(qe), S = G(Ze), P = Dd, M = G(dy);
  function G(F) {
    return F && F.__esModule ? F : { default: F };
  }
  function U(F) {
    if (typeof WeakMap != "function") return null;
    var Y = /* @__PURE__ */ new WeakMap(), X = /* @__PURE__ */ new WeakMap();
    return (U = function(D) {
      return D ? X : Y;
    })(F);
  }
  function V(F, Y) {
    if (F && F.__esModule) return F;
    if (F === null || typeof F != "object" && typeof F != "function") return { default: F };
    var X = U(Y);
    if (X && X.has(F)) return X.get(F);
    var D = { __proto__: null }, de = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var ve in F) if (ve !== "default" && {}.hasOwnProperty.call(F, ve)) {
      var we = de ? Object.getOwnPropertyDescriptor(F, ve) : null;
      we && (we.get || we.set) ? Object.defineProperty(D, ve, we) : D[ve] = F[ve];
    }
    return D.default = F, X && X.set(F, D), D;
  }
  e.default = {
    App: z.default,
    Assessor: v.default,
    ContentAssessor: O.default,
    TaxonomyAssessor: A.default,
    Pluggable: x.default,
    Paper: w.default,
    AssessmentResult: j.default,
    AnalysisWebWorker: a.AnalysisWebWorker,
    AnalysisWorkerWrapper: a.AnalysisWorkerWrapper,
    createWorker: a.createWorker,
    assessments: t,
    bundledPlugins: n,
    config: u,
    helpers: r,
    markers: o,
    interpreters: l,
    languageProcessing: c,
    values: f
  };
})(ee);
var jE = {}, xE = {};
Object.defineProperty(xE, "__esModule", {
  value: !0
});
xE.default = FDa;
var MDa = ee;
const {
  baseStemmer: qDa
} = MDa.languageProcessing;
function FDa() {
  return qDa;
}
Object.defineProperty(jE, "__esModule", {
  value: !0
});
var YM = jE.default = void 0, BDa = ee, WDa = UDa(xE);
function UDa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: HDa
} = BDa.languageProcessing;
let GDa = class extends HDa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, delete this.defaultResearches.getPassiveVoiceResult, delete this.defaultResearches.getSentenceBeginnings, delete this.defaultResearches.findTransitionWords, delete this.defaultResearches.functionWordsInKeyphrase, Object.assign(this.config, {
      functionWords: []
    }), Object.assign(this.helpers, {
      getStemmer: WDa.default
    });
  }
};
YM = jE.default = GDa;
var SE = {}, uy = {};
Object.defineProperty(uy, "__esModule", {
  value: !0
});
uy.default = void 0;
uy.default = [
  // Articles (those which are not prefixes):
  "قليل",
  "بعض",
  "واحد",
  // Numbers 1-10:
  "واحد",
  "إثنان",
  "ثلاثة",
  "أربعة",
  "خمسة",
  "ستة",
  "سبعة",
  "ثمانية",
  "تسعة",
  "عشرة",
  // Demonstrative pronouns:
  "هذا",
  "هذه",
  "ذلك",
  "تلك",
  "هذين",
  "هذان",
  "هتين",
  "هتان",
  "هؤلا",
  "أولائك",
  "هؤلاء"
];
var Zn = {}, wr = {};
Object.defineProperty(wr, "__esModule", {
  value: !0
});
wr.singleWords = wr.multipleWords = wr.default = wr.allWords = void 0;
const VDa = wr.singleWords = ["كذلك", "ولكن", "ولذلك", "حاليا", "أخيرا", "بالطبع", "ثم", "بما", "كما", "لما", "إنما", "ليتما", "إما", "أينما", "حيثما", "كيفما", "أيما", "أيّما", "بينما", "ممّا", "إلاّ", "ألّا", "لئلّا", "حبّذا", "سيّما", "لكن", "بالتالي", "هكذا", "أو", "أم", "لذلك", "مثلا", "تحديدا", "عموما", "لاسيما", "خصوصا", "بالأخص", "خاصة", "بالمثل", "لأن", "بسبب", "إذا", "عندما", "حين", "متى", "قبل", "بعد", "منذ", "أيضا", "ريثما", "بين"], KDa = wr.multipleWords = ["إلا إذا", "إلا أن", "إلى آخره", "إلى الأبد", "إلى أن", "آن لك أن", "آن له أن", "آن لعلي", "بعد ذلك", "بما أن", "بما فيه", "حتى لا", "حتى لو", "عليك أن", "علينا أن", "عليه أن", "عليكم أن", "فيما بعد", "لا أحد", "لا بأس أن", "لا بد من", "لا بد من أن", "لا سيما", "لا شيء", "لا غير", "لا هذا ولا ذاك", "له أن", "لها أن", "لك أن", "لكم أن", "ما لم", "مع هذا ، مع ذلك", "من أجل أن", "من أجلك", "من أجلها", "من أجل", "من دون ، بدون", "منذ ذلك الحين", "بالإضافة إلى ذلك", "في نهاية المطاف", "في الوقت الحالي", "علاوة على ذلك", "بدلا من ذلك", "في الواقع", "بناء على ذلك", "ومع ذلك", "في الحقيقة", "من ناحية أخرى", "لا يزال", "وفي الوقت نفسه", "زيادة على ذلك", "زيادة على", "علاوة على", "ما عدا", "مع ذلك", "غير أن", "من جهة أخرى", "على عكس ذلك", "نتيجة لذلك", "من ثم", "على سبيل المثال", "على وجه الخصوص", "على وجه التحديد", "بصفة عامة", "قبل كل شيء", "في النهاية", "بصورة شاملة", "رغم أن", "مع ان", "على الرغم من", "من هنا", " لهذا السبب", "في حالة", "في أقرب وقت", "على أي حال", "في نفس الوقت", "من بين"], YDa = wr.allWords = VDa.concat(KDa);
wr.default = YDa;
Object.defineProperty(Zn, "__esModule", {
  value: !0
});
Zn.filteredAtEnding = Zn.filteredAtBeginningAndEnding = Zn.filteredAnywhere = Zn.default = Zn.all = void 0;
var QM = wr, cy = QDa(Ba);
function QDa(e) {
  return e && e.__esModule ? e : { default: e };
}
const XM = ["الـ"], ZM = ["صفر", "واحد", "واحدة", "أحد", "إحدى", "إثنان", "اثنتان", "إثنين", "ثنتين", "إثنتين", "إثنا", "إثنى", "إثنتا", "إثنتي", "ثلاث", "ثلاثة", "أربع", "أربعة", "خمس", "خمسة", "ست", "ستة", "سبع", "سبعة", "ثمان", "ثمانية", "تسع", "تسعة", "عشر", "عشرة", "عشرون", "ثلاثون", "أربعين", "أربعون", "خمسون", "ستون", "سبعون", "ثمانون", "تسعون", "مئة", "مائة", "مئتان", "ثلاثمئة", "ثلاثمائة", "أربعمئة", "أربعمائة", "خمسمئة", "خمسمائة", "ستمئة", "ستمائة", "سبعمئة", "سبعمائة", "ثمانمئة", "ثمانمائة", "تسعمئة", "تسعمائة", "ألف", "ألآف", "ألفا", "ألفين", "مليون", "ملايين", "مليار"], JM = ["الأول", "الأولى", "الثاني", "الثانية", "الثالث", "الثالثة", "الرابع", "الرابعة", "الخامس", "الخامسة", "السادس", "السادسة", "السابع", "السابعة", "الثامن", "الثامنة", "التاسع", "التاسعة", "العاشر", "العاشرة", "الحادي", "الحادية", "العشرون", "الثلاثون", "الأربعون", "الخمسون", "الستون", "السبعون", "الثمانون", "التسعون", "المئة", "المائة"], e4 = ["أنا", "انت", "هو", "هي", "نحن", "أنتما", "هما", "أنتم", "أنتن", "هم", "هن", "وأنا", "وأنت", "وهو", "وانا", "ونحن", "وهي", "وانت", "أنتي", "فهو", "وهم", "وأنتما"], a4 = ["إياه", "إياهما", "إياهم", "إياها", "إياكما", "إياهن", "إياك", "إياكم", "إياكن", "إياي", "إيانا"], t4 = ["هذا", "هذه", "هذان", "هذين", "هتان", "هـتين", "ذا", "ذان", "ذين", "أولئ", "ذلك", "ذانك", "ذينك", "تلك", "تانك", "تينك", "أولئك", "هؤلاء", "ذاك", "هاتان", "هاتين", "ذه", "هأولئ", "ذلكم", "ذلكم", "وهذا", "هذة", "أولئك"], n4 = ["يا", "أي", "هيا", "أ", "آ", "أيها", "أيتها"], r4 = ["جميع", "كل", "بعض", "كثير", "كثيرة", "عديد", "عديدة", "لبعض", "قليلا", "كافية", "كافي", "صغير", "صغيرة", "قليل", "قليلة", "كثيرا", "بالكثير", "أكثر", "اكبر", "اغلب", "عديدة", "عديد", "قليلون", "أقل", "كل", "الكثير", "المزيد", "اكثر", "الأقل", "يكفي", "العديد", "كله", "جميعا", "كلها", "وكل", "كلنا", "كثيرة", "الأكثر", "ببعض", "بضعة", "عدة"], s4 = ["نفسي", "نفسك", "نفسه", "نفسها", "أنفسنا", "أنسفكم", "أنفسهم", "أنفسهما", "أنفسكما", "أنفسكن", "أنفسهن", "بنفسي"], i4 = ["ليس", "جميع", "الكل", "الجميع", "شخص", "شيء", "شيئا", "أخرى", "آخرين", "أي", "أيا", "من", "الآخرين", "أحد", "شئ", "أخرى", "شىء", "احد", "أية", "اخرى", "البعض", "أخر", "الآخر", "أحدهم", "الأخرى", "الشئ", "بعضنا", "بشيء", "شي", "الغير"], o4 = ["الذي", "التي", "الذى", "التى", "الذين", "مالذي", "اللذان", "الذين", "اللتان", "اللاتي", "الذي", "اللتين", "اللذين", "اللواتي"], l4 = ["جدا", "حقا", "للغاية", "تماما", "فعلا"], d4 = ["ماذا", "لمن", "ما", "أي", "أى", "وماذا", "وما", "بماذا", "ماهو", "ماهذا"], u4 = ["من", "ومن"], c4 = ["اين", "كيف", "لماذا", "لم", "سواء", "أينما", "كيفما", "مـتى", "كم", "هل", "أين", "أهذا", "وكيف", "وهل"], p4 = ["هنا", "هناك", "هنالك"], g4 = ["دائما", "مرة", "مرتين"], m4 = ["يجب", "سوف", "قد", "أستطيع", "يستطيع", "نستطيع", "تستطيع", "استطيع", "تستطيعين", "استطعت", "استطاعت", "استطاع", "استطعتما", "استطاعتا", "استطاعا", "استطعنا", "استطعتن", "استطعتم", "استطعن", "استطاعوا", "تستطيعان", "يستطيعان", "تستطعن", "تستطيعون", "يستطعن", "يستطيعون", "تستطيعي", "تستطيعا", "يستطيعا", "تستطيعوا", "يستطيعوا", "استطيعت", "استطيعتا", "استطيعا", "استطيعوا", "تستطاعين", "تستطاع", "يستطاع", "نستطاع", "تستطاعان", "يستطاعان", "تستطاعون", "يستطاعون", "أستطاع", "تستطاعي", "تستطاعا", "يستطاعا", "يستطاعوا", "تستطاعوا", "استطيعي", "يمكنني", "يمكن", "يمكننى", "بإمكانك", "لابد", "ينبغي", "وسوف", "هلا", "بد", "وقد", "ولقد", "يمكنه", "يمكنهما", "يمكنهم", "يمكنها", "يمكنكما", "يمكنهن", "يمكنك", "يمكنكم", "يمكنكن", "يمكني", "يمكننا"], f4 = ["لدي", "لديك", "لدينا", "لديه", "لديها", "لديهم", "لديهما", "لديكم", "لديكما", "لديهن", "لديكن", "صبحت", "صبح", "صبحتما", "صبحا", "صبحتا", "صبحنا", "صبحتن", "صبحتم", "صبحن", "صبحوا", "أصبح", "تصبحين", "تصبح", "يصبح", "تصبحان", "يصبحان", "نصبح", "تصبحن", "تصبحون", "تصبحي", "تصبحا", "يصبحا", "تصبحوا", "يصبحوا", "اصبحي", "اصبحوا", "اصبحا", "ابقى", "كان", "كنت", "كانت", "يكون", "كنتما", "كانتا", "كانا", "كنا", "كن", "كانوا", "كنتم", "أكون", "تكونين", "تكون", "تكونان", "يكونان", "نكون", "تكونون", "يكن", "يكونون", "تكوني", "تكونا", "يكونا", "تكونوا", "يكونوا", "كونا", "كونوا", "كن", "أكن", "اكون", "وكان", "كوني", "اكن", "سنكون", "كنا", "سيكون", "يكن", "ستكون", "تكن", "سأكون", "بت", "باتت", "بات", "بتما", "باتتا", "باتا", "بتنا", "بتن", "بتم", "باتوا", "أبيت", "بت", "صرت", "صرت", "صار", "صرتما", "صارتا", "صارا", "صرنا", "صرتن", "صرتم", "صرن", "صاروا", "أصير", "تصيرين", "تصير", "يصير", "تصيران", "يصيران", "نصير", "تصرن", "يصرن", "تصيرون", "يصيرون", "تصيري", "تصيرا", "يصيرا", "تصيروا", "يصيروا", "ليس", "وليس", "ليست", "ليسوا", "ليسا", "ليسنا", "ليسن", "أليس", "اليس", "لست", "لسنا"], h4 = ["أن", "في", "على", "إلى", "ان", "عن", "فى", "مع", "الى", "بعد", "بدون", "تحت", "طوال", "علي", "غير", "لدى", "حول", "خلال", "لكي", "بين", "الي", "خارج", "بشأن", "فوق", "دون", "لـ", "بـ", "بلا", "بواسطة", "ضد", "أمام", "وفي", "وشك", "نحو", "ذو", "أسفل", "ب", "خلف", "بجانب", "عدا", "طبقا", "بعد", "عكس", "منذ"], y4 = ["إليه", "إليهما", "إليهم", "إليها", "إليكما", "إليهن", "إليك", "إليكم", "إليكن", "إلي", "إلينا", "عليه", "عليهما", "عليهم", "عليها", "عليكما", "عليهن", "عليك", "عليكم", "عليكن", "علي", "علينا", "عنه", "عنهما", "عنهم", "عنها", "عنكما", "عنهن", "عنك", "عنكم", "عنكن", "عني", "عننا", "له", "لهما", "لهم", "لها", "لكما", "لهن", "لك", "لكم", "لكن", "لي", "لنا", "معه", "معهما", "معهم", "معها", "معكما", "معهن", "معك", "معكم", "معكن", "معي", "معنا", "منه", "منهما", "منهم", "منها", "منكم", "منهن", "منك", "منكم", "منكن", "مني", "منا", "فيه", "فيهما", "فيهم", "فيها", "فيكما", "فيهن", "فيك", "فيكم", "به", "بهما", "بهم", "بها", "بكما", "بهن", "بك", "بكم", "بكن", "بي", "بنا", "بينهم", "بينهما", "بينكما", "بينكم", "بتلك", "بذلك", "فأنت", "بيننا", "بهذا", "بهذه", "فأنا", "فهذا", "فيما", "أجلك", "كهذا", "لأي", "لذلك", "لما", "لنفسك", "لهذا", "لهذه"], z4 = ["داخل", "ضمن", "قدما"], b4 = ["و", "و/او", "او", "أو"], w4 = ["إذا", "لو", "اذا", "وإذا", "أذا"], v4 = ["أقول", "تقول", "تقولين", "تقولان", "يقول", "تقول", "يقولان", "تقولان", "نقول", "تقولون", "تقلن", "يقولون", "قلت", "قلتما", "قال", "قالت", "قالا", "قالتا", "قلنا", "قلتما", "قلتن", "قالوا", "قلنا", "تدعي", "يدعي", "تدعيان", "تدعون", "يدعون", "يدعين", "ادعيت", "ادعيت", "ادعيتما", "ادعى", "ادعت", "ادعينا", "ادعيتما", "ادعيتن", "ادعوا", "ادعينا", "تسأل", "تسألين", "يسأل", "تسأل", "نسأل", "تسألون", "تسألن", "يسألون", "يسألن", "سألت", "سألنا", "سألتم", "سألتن", "سألوا", "سألنا", "تشرح", "تشرحين", "يشرح", "تشرح", "نشرح", "تشرحون", "تشرحن", "يشرحون", "يشرحن", "شرحت", "شرح", "شرحت", "شرحنا", "شرحتم", "شرحتن", "شرحوا", "شرحنا", "شرحن", "أعتقد", "تعتقد", "تعتقدين", "يعتقد", "تعتقد", "تعتقدون", "تعتقدن", "يعتقدون", "يعتقدن", "اعتقدت", "اعتق", "اعتقدت", "أتحدث", "تتحدث", "تتحدثين", "يتحدث", "تتحدث", "نتحدث", "تحدثت", "تحدث", "تحدثت", "تحدثوا", "تحدثن", "أعلن", "تعلن", "تعلنين", "يعلن", "تعلن", "نعلن", "يعلنون", "يعلن", "أعلنت", "أعلن", "أعلنت", "أعلنا", "أعلنوا", "أعلن", "أناقش", "تناقش", "تناقشين", "يناقش", "تناقش", "نناقش", "تناقشون", "تناقشن", "يناقشون", "يناقشن", "ناقشت", "ناقشت", "ناقشت", "ناقشت", "ناقشت", "ناقشنا", "ناقشتم", "ناقشتن", "ناقشوا", "ناقشن", "أفهم", "تفهم", "تفهمين", "يفهم", "تفهم", "نفهم", "يفهمون", "يفهمن", "فهمت", "فهم", "فهمت", "فهمنا", "فهموا", "فهمن"], XDa = ["الآن", "كذلك", "ربما", "كما", "لذا", "الان", "الأن", "بما", "أيضا", "بالنسبة", "فحسب", "والآن", "بكل", "مما", "ايضا", "بخصوص", "القادمة", "المحتمل", "مازال", "مازلت", "طالما", "بالتأكيد", "بدلا", "بوضوح", "فورا", "حالا", "التالي", "حاليا", "بالعادة", "تقريبا", "ببساطة", "اختياريا", "أحيانا", "أبدا", "بالمناسبة", "خاصة", "مؤخرا", "نسبيا"], k4 = ["يعني", "أحتاج", "يعمل", "تعني", "تقوم", "أود", "عندك", "البقاء", "حاولت", "توجد", "دعونا", "تفكر", "جئت", "يريدون", "أتيت", "فعلته", "تقصد", "زال", "إرادة", "مريد", "مراد", "أردت", "أردت", "أردت", "أرادت", "أريد", "تريد", "تريدين", "يريد", "تريد", "أريد", "تريد", "يريد", "تريد", "أرد", "ترد", "يرد", "ترد", "أرد", "أريدي", "أردتما", "تريدان", "تريدا", "تريدا", "أريدا", "أرادا", "أرادتا", "يريدان", "تريدان", "يريدا", "تريدا", "أردنا", "نريد", "نريد", "نرد", "أردتم", "أردتن", "تريدون", "تردن", "تريدوا", "تردن", "تريدوا", "تردن", "أريدوا", "أردن", "أرادوا", "أردن", "يريدون", "يردن", "يريدوا", "أردت", "أراد", "أراد", "أرد", "أردت", "أريد", "أردتما", "أريدا", "أردنا", "أردتم", "أريدوا", "أردت", "أريدت", "أريدتا", "أردتن", "أردن", "تراد", "يراد", "ترادان", "يرادان", "نراد", "ترادون", "يرادون", "ترادين", "تراد", "ترادان", "تردن", "يردن", "تراد", "يراد", "ترادا", "يرادا", "نراد", "ترادوا", "يرادوا", "ترادي", "تراد", "ترادا", "تردن", "يردن", "ترد", "يرد", "ترادا", "يرادا", "نرد", "ترادوا", "يرادوا", "ترادي", "ترد", "ترادا", "تردن", "يردن", "أرد", "اعتقاد", "معتقد", "معتقد", "اعتقدت", "اعتقدت", "اعتقد", "اعتقدتما", "اعتقدا", "اعتقدنا", "اعتقدتم", "اعتقدوا", "اعتقدت", "اعتقدت", "اعتقدتا", "اعتقدتن", "اعتقدن", "تعتقد", "يعتقد", "تعتقدان", "يعتقدان", "نعتقد", "تعتقدون", "يعتقدون", "تعتقدين", "تعتقد", "تعتقدان", "تعتقدن", "يعتقدن", "تعتقد", "يعتقد", "تعتقدا", "يعتقدا", "نعتقد", "تعتقدوا", "يعتقدوا", "تعتقدي", "تعتقد", "تعتقدا", "تعتقدن", "يعتقدن", "تعتقد", "يعتقد", "تعتقدا", "يعتقدا", "نعتقد", "تعتقدوا", "يعتقدوا", "تعتقدي", "تعتقد", "تعتقدا", "تعتقدن", "يعتقدن", "اعتقدي", "اعتقدن", "اعتقد", "اعتقدا", "اعتقدوا", "اعتقدت", "اعتقدت", "اعتقد", "اعتقدتما", "اعتقدا", "اعتقدنا", "اعتقدتم", "اعتقدوا", "اعتقدت", "اعتقدت", "اعتقدتا", "اعتقدتن", "اعتقدن", "أعتقد", "تعتقد", "يعتقد", "تعتقدان", "يعتقدان", "نعتقد", "تعتقدون", "يعتقدون", "تعتقدين", "تعتقد", "تعتقدان", "تعتقدن", "يعتقدن", "أعتقد", "تعتقد", "يعتقد", "تعتقدا", "يعتقدا", "نعتقد", "تعتقدوا", "يعتقدوا", "تعتقدي", "تعتقد", "تعتقدا", "تعتقدن", "يعتقدن", "أعتقد", "تعتقد", "يعتقد", "تعتقدا", "يعتقدا", "نعتقد", "تعتقدوا", "يعتقدوا", "تعتقدي", "تعتقد", "تعتقدا", "تعتقدن", "يعتقدن", "اعتقد", "اعتقدا", "اعتقدوا", "إيجاد", "موجد", "موجد", "أوجدت", "أوجدت", "أوجد", "أوجدتما", "أوجدا", "أوجدنا", "أوجدتم", "أوجدوا", "أوجدت", "أوجدت", "أوجدتا", "أوجدتن", "أوجدن", "أوجد", "توجد", "يوجد", "توجدان", "يوجدان", "نوجد", "توجدون", "يوجدون", "توجدين", "توجد", "توجدان", "توجدن", "يوجدن", "أوجد", "توجد", "يوجد", "توجدا", "يوجدا", "نوجد", "توجدوا", "يوجدوا", "توجدي", "توجد", "توجدا", "توجدن", "يوجدن", "أوجد", "توجد", "يوجد", "توجدا", "يوجدا", "نوجد", "توجدوا", "يوجدوا", "توجدي", "توجد", "توجدا", "توجدن", "يوجدن", "أوجد", "أوجدا", "أوجدوا", "أوجدي", "أوجدن", "أوجدت", "أوجدت", "أوجد", "أوجدتما", "أوجدا", "أوجدنا", "أوجدتم", "أوجدوا", "أوجدت", "أوجدت", "أوجدتا", "أوجدتن", "أوجدن", "أوجد", "توجد", "يوجد", "توجدان", "يوجدان", "نوجد", "توجدون", "يوجدون", "توجدين", "توجد", "توجدان", "توجدن", "يوجدن", "أوجد", "توجد", "يوجد", "توجدا", "يوجدا", "نوجد", "توجدوا", "يوجدوا", "توجدي", "توجد", "توجدا", "توجدن", "يوجدن", "أوجد", "توجد", "يوجد", "توجدا", "يوجدا", "نوجد", "توجدوا", "يوجدوا", "توجدي", "توجد", "توجدا", "توجدن", "يوجدن", "اعتقد", "اريد", "أذهب", "إذهاب", "مذهب", "مذهب", "أذهبت", "أذهبت", "أذهب", "أذهبتما", "أذهبا", "أذهبنا", "أذهبتم", "أذهبوا", "أذهبت", "أذهبت", "أذهبتا", "أذهبتن", "أذهبن", "أذهب", "تذهب", "يذهب", "تذهبان", "يذهبان", "نذهب", "تذهبون", "يذهبون", "تذهبين", "تذهب", "تذهبان", "تذهبن", "يذهبن", "أذهب", "تذهب", "يذهب", "تذهبا", "يذهبا", "نذهب", "تذهبوا", "يذهبوا", "تذهبي", "تذهب", "تذهبا", "تذهبن", "يذهبن", "أذهب", "تذهب", "يذهب", "تذهبا", "يذهبا", "نذهب", "تذهبوا", "يذهبوا", "تذهبي", "تذهب", "تذهبا", "تذهبن", "يذهبن", "أذهب", "أذهبا", "أذهبوا", "أذهبي", "أذهبن", "أذهبت", "أذهبت", "أذهب", "أذهبتما", "أذهبا", "أذهبنا", "أذهبتم", "أذهبوا", "أذهبت", "أذهبت", "أذهبتا", "أذهبتن", "أذهبن", "أذهب", "تذهب", "يذهب", "تذهبان", "يذهبان", "نذهب", "تذهبون", "يذهبون", "تذهبين", "تذهب", "تذهبان", "تذهبن", "يذهبن", "أذهب", "تذهب", "يذهب", "تذهبا", "يذهبا", "نذهب", "تذهبوا", "يذهبوا", "تذهبي", "تذهب", "تذهبا", "تذهبن", "يذهبن", "أذهب", "تذهب", "يذهب", "تذهبا", "يذهبا", "نذهب", "تذهبوا", "يذهبوا", "تذهبي", "تذهب", "تذهبا", "تذهبن", "يذهبن", "نذهب", "مذهب", "ذاهب", "مذهوب", "ذهبت", "ذهبت", "ذهب", "ذهبتما", "ذهبا", "ذهبنا", "ذهبتم", "ذهبوا", "ذهبت", "ذهبت", "ذهبتا", "ذهبتن", "ذهبن", "أذهب", "تذهب", "يذهب", "تذهبان", "يذهبان", "نذهب", "تذهبون", "يذهبون", "تذهبين", "تذهب", "تذهبان", "تذهبن", "يذهبن", "أذهب", "تذهب", "يذهب", "تذهبا", "يذهبا", "نذهب", "تذهبوا", "يذهبوا", "تذهبي", "تذهب", "تذهبا", "تذهبن", "يذهبن", "أذهب", "تذهب", "يذهب", "تذهبا", "يذهبا", "نذهب", "تذهبوا", "يذهبوا", "تذهبي", "تذهب", "تذهبا", "تذهبن", "يذهبن", "اذهب", "اذهبا", "اذهبوا", "اذهبي", "اذهبن", "ذهب", "يذهب", "يذهب", "يذهب", "أظن", "ظن", "ظان", "مظنون", "ظننت", "ظننت", "ظن", "ظننتما", "ظنا", "ظننا", "ظننتم", "ظنوا", "ظننت", "ظنت", "ظنتا", "ظننتن", "ظنن", "أظن", "تظن", "يظن", "تظنان", "يظنان", "نظن", "تظنون", "يظنون", "تظنين", "تظن", "تظنان", "تظنن", "يظنن", "أظن", "تظن", "يظن", "تظنا", "يظنا", "نظن", "تظنوا", "يظنوا", "تظني", "تظن", "تظنا", "تظنن", "يظنن", "أظنن", "تظنا", "يظنا", "تظنوا", "يظنوا", "تظنن", "تظني", "تظنا", "تظنن", "يظنن", "أظن", "أظن", "تظن", "تظن", "يظنن", "يظن", "ظني", "اظنن", "يظن", "نظنن", "نظن", "نظن", "تظنن", "تظن", "تظن", "ظنا", "اظنن", "ظن", "ظن", "ظنوا", "اذهب", "اذهبا", "اذهبوا", "ظننت", "ظننت", "ظن", "ظننتما", "ظنا", "ظننا", "ظننتم", "ظنوا", "ظننت", "ظنت", "ظنتا", "ظننتن", "ظنن", "أظن", "تظن", "يظن", "تظنان", "يظنان", "نظن", "تظنون", "يظنون", "تظنين", "تظن", "تظنان", "تظنن", "يظنن", "أظن", "تظن", "يظن", "تظنا", "يظنا", "نظن", "تظنوا", "يظنوا", "تظني", "تظن", "تظنا", "تظنن", "يظنن", "أظنن", "تظنا", "يظنا", "تظنوا", "يظنوا", "أظن", "تظني", "تظنا", "تظنن", "يظنن", "تظنن", "تظن", "تظن", "يظنن", "يظن", "يظن", "نظنن", "نظن", "نظن", "تظنن", "تظن", "تظن", "ذهبت", "تظن", "توجدت", "توجدت", "توجد", "توجدتما", "توجدا", "توجدنا", "توجدتم", "توجدوا", "توجدت", "توجدت", "توجدتا", "توجدتن", "توجدن", "أتوجد", "ʾتتوجد", "يتوجد", "تتوجدان", "يتوجدان", "نتوجد", "تتوجدون", "يتوجدون", "تتوجدين", "تتوجد", "تتوجدان", "تتوجدن", "يتوجدن", "أتوجد", "ʾتتوجد", "يتوجد", "تتوجدا", "يتوجدا", "نتوجد", "تتوجدوا", "يتوجدوا", "تتوجدي", "تتوجد", "تتوجدا", "تتوجدن", "يتوجدن", "أتوجد", "ʾتتوجد", "يتوجد", "تتوجدا", "يتوجدا", "نتوجد", "تتوجدوا", "يتوجدوا", "تتوجدي", "تتوجد", "تتوجدا", "تتوجدن", "يتوجدن", "توجد", "توجدا", "توجدوا", "توجدي", "توجدن", "توجد", "يتوجد", "يتوجد", "يتوجد", "توجد", "متوجد", "متوجد", "دعاء", "داع", "مدعو", "دعوت", "دعوت", "دعا", "دعوتما", "دعوا", "دعونا", "دعوتم", "دعوا", "دعوت", "دعت", "دعتا", "دعوتن", "دعون", "أدعو", "تدعو", "يدعو", "تدعوان", "يدعوان", "ندعو", "تدعون", "يدعون", "تدعين", "تدعو", "تدعوان", "تدعون", "يدعون", "أدعو", "تدعو", "يدعو", "تدعوا", "يدعوا", "ندعو", "تدعوا", "يدعوا", "تدعي", "تدعو", "تدعوا", "تدعون", "يدعون", "أدع", "تدع", "يدع", "تدعوا", "يدعوا", "ندع", "تدعوا", "يدعوا", "تدعي", "تدع", "تدعوا", "تدعون", "يدعون", "ادع", "ادعوا", "ادعوا", "ادعي", "ادعون", "دعيت", "دعيت", "دعي", "دعيتما", "دعيا", "دعينا", "دعيتم", "دعوا", "دعيت", "دعيت", "دعيتا", "دعيتن", "دعين", "أدعى", "تدعى", "يدعى", "تدعيان", "يدعيان", "ندعى", "تدعون", "يدعون", "تدعين", "تدعى", "تدعيان", "تدعين", "يدعين", "أدعى", "تدعى", "يدعى", "تدعيا", "يدعيا", "ندعى", "تدعوا", "يدعوا", "تدعي", "تدعى", "تدعيا", "تدعين", "يدعين", "أدع", "تدع", "يدع", "تدعيا", "يدعيا", "ندع", "تدعوا", "يدعوا", "تدعي", "تدع", "تدعيا", "تدعين", "يدعين", "تفكر", "متفكر", "متفكر", "تفكرت", "تفكرت", "تفكر", "تفكرتما", "تفكرا", "تفكرنا", "تفكرتم", "تفكروا", "تفكرت", "تفكرت", "تفكرتا", "تفكرتن", "تفكرن", "أتفكر", "تتفكر", "يتفكر", "تتفكران", "يتفكران", "نتفكر", "تتفكرون", "يتفكرون", "تتفكرين", "تتفكر", "تتفكران", "تتفكرن", "يتفكرن", "أتفكر", "تتفكر", "يتفكر", "تتفكرا", "يتفكرا", "نتفكر", "تتفكروا", "يتفكروا", "تتفكري", "تتفكر", "تتفكرا", "تتفكرن", "يتفكرن", "أتفكر", "تتفكر", "يتفكر", "تتفكرا", "يتفكرا", "نتفكر", "تتفكروا", "يتفكروا", "تتفكري", "تتفكر", "تتفكرا", "تتفكرن", "يتفكرن", "تفكر", "تفكرا", "تفكروا", "تفكري", "تفكرن", "تفكر", "يتفكر", "يتفكر", "يتفكر", "مجيء", "جيء", "جيئة", "جيئة", "جاء", "مجيء", "جئت", "جئت", "جاء", "جئتما", "جاءا", "جئنا", "جئتم", "جائوا", "جاؤوا", "جئت", "جاءت", "جاءتا", "جئتن", "جئن", "أجيء", "تجيء", "يجيء", "تجيئان", "يجيئان", "نجيء", "تجيئون", "تجيؤون", "يجيئون", "يجيؤون", "تجيئين", "تجيء", "تجيئان", "تجئن", "يجئن", "أجيء", "تجيء", "يجيء", "تجيئا", "يجيئا", "نجيء", "تجيئوا", "تجيؤوا", "يجيئوا", "يجيؤوا", "تجيئي", "تجيء", "تجيئا", "تجئن", "يجئن", "أجئ", "تجئ", "يجئ", "تجيئا", "يجيئا", "نجئ", "تجيئوا", "تجيؤوا", "يجيئوا", "يجيؤوا", "تجيئي", "تجئ", "تجيئا", "تجئن", "يجئن", "جئ", "جيئا", "جيئوا", "جيؤوا", "جيئي", "جئن", "جئت", "جئت", "جيء", "جئتما", "جيئا", "جئنا", "جئتم", "جيئوا", "جيؤوا", "جئت", "جيئت", "جيئتا", "جئتن", "جئن", "أجاء", "تجاء", "يجاء", "تجاءان", "يجاءان", "نجاء", "تجائون", "تجاؤون", "يجائون", "يجاؤون", "تجائين", "تجاء", "تجاءان", "تجأن", "يجأن", "أجاء", "تجاء", "يجاء", "تجاءا", "يجاءا", "نجاء", "تجائوا", "تجاؤوا", "يجائوا", "يجاؤوا", "تجائي", "تجاء", "تجاءا", "تجأن", "يجأن", "أجأ", "تجأ", "يجأ", "تجاءا", "يجاءا", "نجأ", "تجائوا", "تجاؤوا", "يجائوا", "يجاؤوا", "تجائي", "تجأ", "تجاءا", "تجأن", "يجأن", "إرادة", "مريد", "مراد", "أردت", "أردت", "أراد", "أردتما", "أرادا", "أردنا", "أردتم", "أرادوا", "أردت", "أرادت", "أرادتا", "أردتن", "أردن", "أريد", "تريد", "يريد", "تريدان", "يريدان", "نريد", "تريدون", "يريدون", "تريدين", "تريد", "تريدان", "تردن", "يردن", "أريد", "تريد", "يريد", "تريدا", "يريدا", "نريد", "تريدوا", "يريدوا", "تريدي", "تريد", "تريدا", "تردن", "يردن", "أرد", "ترد", "يرد", "تريدا", "يريدا", "نرد", "تريدوا", "يريدوا", "تريدي", "ترد", "تريدا", "تردن", "يردن", "أرد", "أريدا", "أريدوا", "أريدي", "أردن", "أردت", "أردت", "أريد", "أردتما", "أريدا", "أردنا", "أردتم", "أريدوا", "أردت", "أريدت", "أريدتا", "أردتن", "أردن", "أراد", "تراد", "يراد", "ترادان", "يرادان", "نراد", "ترادون", "يرادون", "ترادين", "تراد", "ترادان", "تردن", "يردن", "أراد", "تراد", "يراد", "ترادا", "يرادا", "نراد", "ترادوا", "يرادوا", "ترادي", "تراد", "ترادا", "تردن", "يردن", "أرد", "ترد", "يرد", "ترادا", "يرادا", "نرد", "ترادوا", "يرادوا", "ترادي", "ترد", "ترادا", "تردن", "يردن", "إتيان", "أتي", "مأتاة", "مأتى", "آت", "مأتي", "أتيت", "أتيت", "أتى", "أتيتما", "أتيا", "أتينا", "أتيتم", "أتوا", "أتيت", "أتت", "أتتا", "أتيتن", "أتين", "آتي", "تأتي", "يأتي", "تأتيان", "يأتيان", "نأتي", "تأتون", "يأتون", "تأتين", "تأتي", "تأتيان", "تأتين", "يأتين", "آتي", "تأتي", "يأتي", "تأتيا", "يأتيا", "نأتي", "تأتوا", "يأتوا", "تأتي", "تأتي", "تأتيا", "تأتين", "يأتين", "آت", "تأت", "يأت", "تأتيا", "يأتيا", "نأت", "تأتوا", "يأتوا", "تأتي", "تأت", "تأتيا", "تأتين", "يأتين", "ايت", "ايتيا", "ايتوا", "ايتي", "ايتين", "أتيت", "أتيت", "أتي", "أتيتما", "أتيا", "أتينا", "أتيتم", "أتوا", "أتيت", "أتيت", "أتيتا", "أتيتن", "أتين", "أوتى", "تؤتى", "يؤتى", "تؤتيان", "يؤتيان", "نؤتى", "تؤتون", "يؤتون", "تؤتين", "تؤتى", "تؤتيان", "تؤتين", "يؤتين", "أوتى", "تؤتى", "يؤتى", "تؤتيا", "يؤتيا", "نؤتى", "تؤتوا", "يؤتوا", "تؤتي", "تؤتى", "تؤتيا", "تؤتين", "يؤتين", "أوت", "تؤت", "يؤت", "تؤتيا", "يؤتيا", "نؤت", "تؤتوا", "يؤتوا", "تؤتي", "تؤت", "تؤتيا", "تؤتين", "يؤتين", "فعلته", "فعل", "فعل", "فاعل", "مفعول", "فعلت", "فعلت", "فعل", "فعلتما", "فعلا", "فعلنا", "فعلتم", "فعلوا", "فعلت", "فعلت", "فعلتا", "فعلتن", "فعلن", "أفعل", "تفعل", "يفعل", "تفعلان", "يفعلان", "نفعل", "تفعلون", "يفعلون", "تفعلين", "تفعل", "تفعلان", "تفعلن", "يفعلن", "أفعل", "تفعل", "يفعل", "تفعلا", "يفعلا", "نفعل", "تفعلوا", "يفعلوا", "تفعلي", "تفعل", "تفعلا", "تفعلن", "يفعلن", "أفعل", "تفعل", "يفعل", "تفعلا", "يفعلا", "نفعل", "تفعلوا", "يفعلوا", "تفعلي", "تفعل", "تفعلا", "تفعلن", "يفعلن", "افعل", "افعلا", "افعلوا", "افعلي", "افعلن", "فعلت", "فعلت", "فعل", "فعلتما", "فعلا", "فعلنا", "فعلتم", "فعلوا", "فعلت", "فعلت", "فعلتا", "فعلتن", "فعلن", "أفعل", "تفعل", "يفعل", "تفعلان", "يفعلان", "نفعل", "تفعلون", "يفعلون", "تفعلين", "تفعل", "تفعلان", "تفعلن", "يفعلن", "أفعل", "تفعل", "يفعل", "تفعلا", "يفعلا", "نفعل", "تفعلوا", "يفعلوا", "تفعلي", "تفعل", "تفعلا", "تفعلن", "يفعلن", "أفعل", "تفعل", "يفعل", "تفعلا", "يفعلا", "نفعل", "تفعلوا", "يفعلوا", "تفعلي", "تفعل", "تفعلا", "تفعلن", "يفعلن", "قصد", "مقصد", "قاصد", "مقصود", "قصدت", "قصدت", "قصد", "قصدتما", "قصدا", "قصدنا", "قصدتم", "قصدوا", "قصدت", "قصدت", "قصدتا", "قصدتن", "قصدن", "أقصد", "تقصد", "يقصد", "تقصدان", "يقصدان", "نقصد", "تقصدون", "يقصدون", "تقصدين", "تقصد", "تقصدان", "تقصدن", "يقصدن", "أقصد", "تقصد", "يقصد", "تقصدا", "يقصدا", "نقصد", "تقصدوا", "يقصدوا", "تقصدي", "تقصد", "تقصدا", "تقصدن", "يقصدن", "أقصد", "تقصد", "يقصد", "تقصدا", "يقصدا", "نقصد", "تقصدوا", "يقصدوا", "تقصدي", "تقصد", "تقصدا", "تقصدن", "يقصدن", "اقصد", "اقصدا", "اقصدوا", "اقصدي", "اقصدن", "قصدت", "قصدت", "قصد", "قصدتما", "قصدا", "قصدنا", "قصدتم", "قصدوا", "قصدت", "قصدت", "قصدتا", "قصدتن", "قصدن", "أقصد", "تقصد", "يقصد", "تقصدان", "يقصدان", "نقصد", "تقصدون", "يقصدون", "تقصدين", "تقصد", "تقصدان", "تقصدن", "يقصدن", "أقصد", "تقصد", "يقصد", "تقصدا", "يقصدا", "نقصد", "تقصدوا", "يقصدوا", "تقصدي", "تقصد", "تقصدا", "تقصدن", "يقصدن", "أقصد", "تقصد", "يقصد", "تقصدا", "يقصدا", "نقصد", "تقصدوا", "يقصدوا", "تقصدي", "تقصد", "تقصدا", "تقصدن", "يقصدن", "زائل", "زلت", "زلت", "زال", "زلتما", "زالا", "زلنا", "زلتم", "زالوا", "زلت", "زالت", "زالتا", "زلتن", "زلن", "أزال", "تزال", "يزال", "تزالان", "يزالان", "نزال", "تزالون", "يزالون", "تزالين", "تزال", "تزالان", "تزلن", "يزلن", "أزال", "تزال", "يزال", "تزالا", "يزالا", "نزال", "تزالوا", "يزالوا", "تزالي", "تزال", "تزالا", "تزلن", "يزلن", "أزل", "تزل", "يزل", "تزالا", "يزالا", "نزل", "تزالوا", "يزالوا", "تزالي", "تزل", "تزالا", "تزلن", "يزلن", "زل", "زالا", "زالوا", "زالي", "زلن", "عملت", "عملت", "عمل", "عملتما", "عملا", "عملنا", "عملتم", "عملوا", "عملت", "عملت", "عملتا", "عملتن", "عملن", "أعمل", "تعمل", "يعمل", "تعملان", "يعملان", "نعمل", "تعملون", "يعملون", "تعملين", "تعملن", "يعملن", "أعمل", "تعمل", "يعمل", "تعملا", "يعملا", "نعمل", "تعملوا", "يعملوا", "تعملي", "أعمل", "تعمل", "يعمل", "نعمل", "اعمل", "اعملا", "اعملوا", "اعملي", "اعملن", "عملت", "عملت", "عمل", "عملتما", "عملا", "عملنا", "عملتم", "عملوا", "عملت", "عملت", "عملتا", "عملتن", "عملن", "أعمل", "تعمل", "يعمل", "تعملان", "يعملان", "نعمل", "تعملون", "يعملون", "تعملين", "تعملن", "يعملن", "أعمل", "تعمل", "يعمل", "تعملا", "يعملا", "نعمل", "تعملوا", "يعملوا", "تعملي", "أعمل", "تعمل", "يعمل", "نعمل", "عملت", "عننت", "عننت", "عن", "عننتما", "عنا", "عننا", "عننتم", "عنوا", "عننت", "عنت", "عنتا", "عننتن", "عنن", "أعن", "أعن", "تعن", "تعن", "يعن", "يعن", "تعنان", "تعنان", "يعنان", "يعنان", "نعن", "نعن", "تعنون", "تعنون", "يعنون", "يعنون", "تعنين", "تعنين", "تعنن", "تعنن", "يعنن", "يعنن", "أعن", "أعن", "تعن", "تعن", "يعن", "يعن", "تعنا", "تعنا", "يعنا", "يعنا", "نعن", "نعن", "تعنوا", "تعنوا", "يعنوا", "يعنوا", "تعني", "تعني", "أعن", "أعنن", "أعن", "أعنن", "تعن", "تعنن", "تعن", "تعنن", "يعن", "يعنن", "يعن", "يعنن", "نعن", "نعنن", "نعن", "نعنن", "عن", "عن", "اعنن", "عن", "عن", "اعنن", "عنا", "عنا", "عنوا", "عني", "عني", "اعنن", "اعنن", "يعن", "يعن", "يعن", "يعنن", "قمت", "قمت", "قام", "قمتما", "قاما", "قمنا", "قمتم", "قاموا", "قمت", "قامت", "قامتا", "قمتن", "قمن", "أقوم", "تقوم", "يقوم", "تقومان", "يقومان", "نقوم", "تقومون", "يقومون", "تقومين", "تقمن", "يقمن", "أقوم", "تقوم", "يقوم", "تقوما", "يقوما", "نقوم", "تقوموا", "يقوموا", "تقومي", "أقم", "تقم", "يقم", "نقم", "قم", "قوما", "قوموا", "قومي", "قيم", "يقام", "يقام", "يقم", "وددت", "وددت", "ود", "وددتما", "ودا", "وددنا", "وددتم", "ودوا", "وددت", "ودت", "ودتا", "وددتن", "وددن", "أود", "تود", "يود", "تودان", "يودان", "نود", "تودون", "يودون", "تودين", "توددن", "يوددن", "أود", "تود", "يود", "تودا", "يودا", "نود", "تودوا", "يودوا", "تودي", "أود", "أودد", "تود", "تودد", "يود", "يودد", "نود", "نودد", "ود", "ايدد", "ودي", "ايددن", "وددت", "وددت", "ود", "وددتما", "ودا", "وددنا", "وددتم", "ودوا", "وددت", "ودت", "ودتا", "وددتن", "وددن", "أود", "تود", "يود", "تودان", "يودان", "نود", "تودون", "يودون", "تودين", "توددن", "يوددن", "أود", "تود", "يود", "تودا", "يودا", "نود", "تودوا", "يودوا", "تودي", "أود", "أودد", "تود", "تودد", "يود", "يودد", "نود", "نودد", "حاولت", "حاولت", "حاول", "حاولتما", "حاولا", "حاولنا", "حاولتم", "حاولوا", "حاولت", "حاولت", "حاولتا", "حاولتن", "حاولن", "أحاول", "تحاول", "يحاول", "تحاولان", "يحاولان", "نحاول", "تحاولون", "يحاولون", "تحاولين", "تحاولن", "يحاولن", "أحاول", "تحاول", "يحاول", "تحاولا", "يحاولا", "نحاول", "تحاولوا", "يحاولوا", "تحاولي", "أحاول", "تحاول", "يحاول", "نحاول", "حاول", "حاولا", "حاولوا", "حاولي", "حاولن", "حوولت", "حوولت", "حوول", "حوولتما", "حوولا", "حوولنا", "حوولتم", "حوولوا", "حوولت", "حوولت", "حوولتا", "حوولتن", "حوولن", "أحاول", "تحاول", "يحاول", "تحاولان", "يحاولان", "نحاول", "تحاولون", "يحاولون", "تحاولين", "تحاولن", "يحاولن", "أحاول", "تحاول", "يحاول", "تحاولا", "يحاولا", "نحاول", "تحاولوا", "يحاولوا", "تحاولي", "أحاول", "تحاول", "يحاول", "نحاول", "احتجت", "احتجت", "احتاج", "احتجتما", "احتاجا", "احتجنا", "احتجتم", "احتاجوا", "احتجت", "احتاجت", "احتاجتا", "احتجتن", "احتجن", "أحتاج", "تحتاج", "يحتاج", "تحتاجان", "يحتاجان", "نحتاج", "تحتاجون", "يحتاجون", "تحتاجين", "تحتجن", "يحتجن", "أحتاج", "تحتاج", "يحتاج", "تحتاجا", "يحتاجا", "نحتاج", "تحتاجوا", "يحتاجوا", "تحتاجي", "أحتج", "تحتج", "يحتج", "نحتج", "احتج", "احتاجي", "احتجت", "احتجت", "احتيج", "احتجتما", "احتيجا", "احتجنا", "احتجتم", "احتيجوا", "احتجت", "احتيجت", "احتيجتا", "احتجتن", "احتجن", "أحتاج", "تحتاج", "يحتاج", "تحتاجان", "يحتاجان", "نحتاج", "تحتاجون", "يحتاجون", "تحتاجين", "تحتجن", "يحتجن", "أحتاج", "تحتاج", "يحتاج", "تحتاجا", "يحتاجا", "نحتاج", "تحتاجوا", "يحتاجوا", "تحتاجي", "أحتج", "تحتج", "يحتج", "نحتج", "عنيت", "عنيت", "عنى", "عنيتما", "عنيا", "عنينا", "عنيتم", "عنوا", "عنيت", "عنت", "عنتا", "عنيتن", "عنين", "أعني", "تعني", "يعني", "تعنيان", "يعنيان", "نعني", "تعنون", "يعنون", "تعنين", "يعنين", "أعني", "تعني", "يعني", "تعنيا", "يعنيا", "نعني", "تعنوا", "يعنوا", "أعن", "تعن", "يعن", "نعن", "اعن", "اعنيا", "اعنوا", "اعني", "اعنين", "عنيت", "عنيت", "عني", "عنيتما", "عنيا", "عنينا", "عنيتم", "عنوا", "عنيت", "عنيت", "عنيتا", "عنيتن", "عنين", "أعنى", "تعنى", "يعنى", "تعنيان", "يعنيان", "نعنى", "تعنون", "يعنون", "تعنين", "يعنين", "تعنيا", "يعنيا", "تعنوا", "يعنوا", "تعني", "أعن", "تعن", "يعن", "نعن", "يعنين", "عندي", "عندنا", "عندك", "عندك", "عندكما", "عندكم", "عندكن", "عنده", "عندها", "عندهما", "عندهم", "عندهن", "بقاء", "البقاء", "بقاء", "البقاء", "بقاء", "بقاء", "البقاء", "بقاء", "بقاء", "البقاء", "بقاء"], _4 = ["جيد", "آخر", "رائع", "أفضل", "جيدة", "نفس", "فقط", "مجرد", "كبير", "الأفضل", "عظيم", "جميلة", "كبيرة", "رائعة", "جديد", "صغيرة", "الصغير", "متأكد", "مهما", "صغير", "جيدا", "الصغيرة", "أكبر", "جديدة", "افضل", "الجديد", "طويلة", "ممكن", "اخر", "طويل", "الممكن", "الخاصة", "سيئة", "الكبير", "حقيقي", "بعيدا", "الجيد", "مهم", "الجديدة", "كثير", "الكبيرة", "القليل", "ممتاز", "الحقيقي", "سيء", "معا", "قليل", "بعيد", "واضح", "مختلف", "متأكدة", "الصعب", "أسوأ", "حوالي", "كامل", "سيئ", "بالإمكان", "بكثير", "خاص", "سوية", "مختلفة", "قريب", "الأخير", "الأخيرة", "الافضل", "خير"], E4 = ["واو", "هيا", "آه", "هيه", "هاى", "أوه", "أخخ", "هووه", "صه", "أوبس", "أها", "آخ", "أح", "شو", "ههههه"], A4 = ["كلغ", "ملغ", "الكوارت", "جرام", "جالون", "ربع ", "كوارتات", "لتر", "سنتيلتر", "مليمتر", "دزينة", "ملاعق", "ذراع", "قبضة", "عربية", "قصبة", "بريد", "قدم", "ربع"], ZDa = ["اليوم", "يوم", "ليلة", "دقيقة", "ساعة", "عام", "دقائق", "سنة", "الساعة", "أيام", "العام", "الأسبوع", "غدا", "ساعات", "أمس", "أشهر", "الأيام", "شهر", "السنة", "الغد", "يوما", "ثانية", "ثوان", "أسبوع", "أسابيع", "أسبوعا", "بالأمس"], T4 = ["الأمر", "الأشياء", "الشيء", "الأمور", "الامر", "أشياء", "جزء", "الاشياء", "الامور", "الطريقة", "طريقا", "طرق", "قطعة", "الأجزاء", "مادة", "مرات", "بالمئة", "جانب", "جوانب", "بند", "عنصر", "عناصر", "بنود", "فكرة", "موضوع", "تفصيل", "تفاصيل", "فرق", "فروق", "كيفية"], $4 = ["نعم", "حسنا", "إنه", "إني", "إنها", "إنك", "إنكم", "إنهم", "إنكما", "إنهما", "إننا", "إنهن", "فإن", "إنني", "كلا", "أجل", "أنه", "أنك", "انها", "أنها", "بأن", "أنني", "أنكم", "أنهما", "أنكما", "أنهن", "أنهم", "انك", "أني", "أننا", "انهم", "بأنك", "لأنه", "بأنه", "اني", "أننى", "انني", "اننا", "بأنني", "اننى", "بأني", "بأنها", "وأن", "بأننا", "للتو", "ها", "رجاء", "تفضل", "اجل", "حالك", "فضلك", "أرجوك", "هكذا", "انة", "بلى", "أعلى", "انى", "لا", "لن", "لم", "ولا", "ألا", "ولم", "ولن", "عدم", "فلا", "فلن", "يلا", "يلة"], JDa = ["السيد", "السيدة", "افندم", "سعادتك", "استاذة", "استاذ", "مدام", "أستاذ", "أسـتاذة", "الأخ", "الأخت"], j4 = ["عندما", "مثل", "بالطبع", "لأن", "إذن", "بشكل", "متى", "حتى", "قبل", "ثم", "عند", "حيث", "بينما", "لمدة", "مثلك", "حين", "بأي", "زلت", "وعندما", "أثناء", "حينما", "أولا", "لاحقا", "أما", "وإلا", "لفترة", "كلما", "عندنا", "إلا", "الا"], eNa = Zn.filteredAtEnding = (0, cy.default)([].concat(JM, _4)), aNa = Zn.filteredAtBeginningAndEnding = (0, cy.default)([].concat(XM, h4, y4, b4, t4, l4, r4)), tNa = Zn.filteredAnywhere = (0, cy.default)([].concat(j4, QM.singleWords, g4, e4, a4, s4, E4, ZM, m4, f4, v4, k4, i4, w4, d4, u4, c4, p4, $4, z4, A4, ZDa, T4, n4, o4)), nNa = Zn.all = (0, cy.default)([].concat(XM, ZM, JM, t4, s4, e4, a4, r4, i4, d4, u4, c4, p4, g4, z4, m4, f4, h4, b4, w4, v4, j4, QM.singleWords, XDa, l4, k4, E4, _4, A4, T4, $4, JDa, n4, o4, y4));
Zn.default = {
  filteredAtEnding: eNa,
  filteredAtBeginningAndEnding: aNa,
  filteredAnywhere: tNa,
  all: nNa
};
var py = {};
Object.defineProperty(py, "__esModule", {
  value: !0
});
py.default = void 0;
py.default = [["لا", "ولا"], ["إما", "أو"], ["ربما", "ربما"], ["حينئذ", "عندئذ"], ["إما", "وإما"], ["كل من", "و"]];
var Uo = {};
Object.defineProperty(Uo, "__esModule", {
  value: !0
});
Uo.PREFIXED_FUNCTION_WORDS_REGEX = Uo.PREFIXED_FUNCTION_WORDS = void 0;
const rNa = Uo.PREFIXED_FUNCTION_WORDS = ["ل", "ب", "ك", "و", "ف", "س", "أ", "ال", "وب", "ول", "لل", "فس", "فب", "فل", "وس", "وال", "بال", "فال", "كال", "ولل", "وبال"], sNa = [...rNa].sort((e, a) => a.length - e.length);
Uo.PREFIXED_FUNCTION_WORDS_REGEX = new RegExp(`^(${sNa.join("|")})`);
var OE = {};
Object.defineProperty(OE, "__esModule", {
  value: !0
});
OE.createBasicWordForms = oNa;
var iNa = jc, mk = Uo;
function oNa(e) {
  const a = [];
  a.push(...mk.PREFIXED_FUNCTION_WORDS.map((r) => r + e));
  const {
    stem: t,
    prefix: n
  } = (0, iNa.stemPrefixedFunctionWords)(e, mk.PREFIXED_FUNCTION_WORDS_REGEX);
  return n !== "" && (a.push(t), a.push(...mk.PREFIXED_FUNCTION_WORDS.map((r) => r + t))), a;
}
var IE = {}, CE = {};
Object.defineProperty(CE, "__esModule", {
  value: !0
});
CE.default = yNa;
const lNa = function(e, a) {
  return e.replace(new RegExp(a[0]), a[1]);
}, x4 = function(e, a) {
  const t = a.externalStemmer, n = t.characters;
  if (t.wordsWithLastAlefRemoved.includes(e))
    return e + n.alef;
  if (t.wordsWithLastHamzaRemoved.includes(e))
    return e + n.alef_hamza_above;
  if (t.wordsWithLastMaksoraRemoved.includes(e))
    return e + n.yeh_maksorah;
  if (t.wordsWithLastYehRemoved.includes(e))
    return e + n.yeh;
}, dNa = function(e, a) {
  const t = a.externalStemmer, n = t.characters;
  if (t.wordsWithFirstWawRemoved.includes(e))
    return n.waw + e;
  if (t.wordsWithFirstYehRemoved.includes(e))
    return n.yeh + e;
}, S4 = function(e, a) {
  const t = a.externalStemmer, n = t.characters;
  if (t.wordsWithMiddleWawRemoved.includes(e))
    return e[0] + n.waw + e[1];
  if (t.wordsWithMiddleYehRemoved.includes(e))
    return e[0] + n.yeh + e[1];
}, uNa = function(e, a) {
  if (a.externalStemmer.wordsWithRemovedDuplicateLetter.includes(e))
    return e + e.substring(1);
  const t = x4(e, a);
  if (t)
    return t;
  const n = dNa(e, a);
  if (n)
    return n;
  const r = S4(e, a);
  return r || e;
}, TP = function(e, a, t, n) {
  const r = e.replace(new RegExp(t[0]), t[1]);
  if (r !== e)
    return n(r, a);
}, PE = function(e, a) {
  const t = a.externalStemmer.characters;
  if (a.externalStemmer.threeLetterRoots.includes(e))
    return e;
  (e[0] === t.alef || e[0] === t.waw_hamza || e[0] === t.yeh_hamza) && (e = t.alef_hamza_above + e.slice(1));
  const n = TP(e, a, a.externalStemmer.regexRemoveLastWeakLetterOrHamza, x4);
  if (n)
    return n;
  const r = TP(e, a, a.externalStemmer.regexRemoveMiddleWeakLetterOrHamza, S4);
  if (r)
    return r;
  const o = a.externalStemmer.regexReplaceMiddleLetterWithAlef, l = a.externalStemmer.regexReplaceMiddleLetterWithAlefWithHamza, u = e.replace(new RegExp(o[0]), o[1]);
  u === e ? e = e.replace(new RegExp(l[0]), l[1]) : e = u;
  const c = a.externalStemmer.regexRemoveShaddaAndDuplicateLastLetter;
  return e = e.replace(new RegExp(c[0]), c[1]), e;
}, cNa = function(e, a, t) {
  return e.length === 6 && e[3] === e[5] && a === 2 ? PE(e.substring(1, 4), t) : e;
}, pNa = function(e, a, t, n) {
  const r = n.externalStemmer.characters;
  if (e.length - 3 <= t) {
    let o = "";
    for (let l = 0; l < e.length; l++)
      (a[l] === r.feh || a[l] === r.aen || a[l] === r.lam) && (o = o.concat(e[l]));
    return PE(o, n);
  }
  return e;
}, gNa = function(e, a, t) {
  const n = t.externalStemmer.characters;
  let r = 0;
  for (let o = 0; o < e.length; o++)
    a[o] === e[o] && a[o] !== n.feh && a[o] !== n.aen && a[o] !== n.lam && r++;
  return r;
}, gy = function(e, a) {
  const t = lNa(e, a.externalStemmer.regexReplaceFirstHamzaWithAlef);
  for (const n of a.externalStemmer.patterns)
    if (n.length === t.length) {
      const r = gNa(t, n, a), o = cNa(t, r, a);
      if (o !== t)
        return {
          word: o,
          rootFound: !0
        };
      const l = pNa(t, n, r, a);
      if (l !== t)
        return {
          word: l,
          rootFound: !0
        };
    }
  if (t !== e)
    return {
      word: t,
      rootFound: !1
    };
}, my = function(e, a) {
  if (e.length === 2)
    return uNa(e, a);
  if (e.length === 3)
    return PE(e, a);
  if (e.length === 4 && a.externalStemmer.fourLetterRoots.includes(e))
    return e;
}, mNa = function(e, a) {
  for (const t of a)
    if (e.endsWith(t))
      return e.slice(0, -t.length);
  return e;
}, O4 = function(e, a) {
  for (const t of a)
    if (e.startsWith(t))
      return e.substring(t.length, e.length);
  return e;
}, RE = function(e, a) {
  const t = mNa(e, a.externalStemmer.suffixes);
  if (t !== e) {
    const n = my(t, a);
    if (n)
      return {
        word: n,
        rootFound: !0
      };
    const r = gy(t, a);
    if (r)
      return r;
  }
}, I4 = function(e, a) {
  let t = O4(e, a.externalStemmer.prefixes);
  if (t !== e) {
    const n = my(t, a);
    if (n)
      return {
        word: n,
        rootFound: !0
      };
    const r = gy(t, a);
    if (r) {
      if (r.rootFound === !0)
        return r;
      t = r.word;
    }
    const o = RE(t, a);
    if (o)
      return o;
  }
}, C4 = function(e, a) {
  const t = my(e, a);
  if (t)
    return {
      word: t,
      rootFound: !0
    };
  const n = gy(e, a);
  let r = e;
  if (n) {
    if (n.rootFound === !0)
      return n;
    r = n.word;
  }
  const o = RE(r, a);
  if (o)
    return o;
  const l = I4(r, a);
  if (l)
    return l;
  if (r !== e)
    return {
      word: r,
      rootFound: !1
    };
}, fNa = function(e, a) {
  const t = O4(e, a.externalStemmer.definiteArticles);
  if (t !== e) {
    const n = C4(t, a);
    return n || {
      word: t,
      rootFound: !1
    };
  }
}, hNa = function(e, a) {
  let t = "";
  if (e.length > 3 && e.startsWith(a.externalStemmer.characters.waw)) {
    t = e.substring(1);
    const n = C4(t, a);
    if (n)
      return n;
  }
};
function yNa(e, a) {
  const t = a.externalStemmer.regexRemovingDiacritics;
  e.replace(new RegExp(t), "");
  const n = my(e, a);
  if (n)
    return n;
  const r = gy(e, a);
  if (r) {
    if (r.rootFound === !0)
      return r.word;
    e = r.word;
  }
  const o = fNa(e, a);
  if (o) {
    if (o.rootFound === !0)
      return o.word;
    e = o.word;
  }
  const l = hNa(e, a);
  if (l) {
    if (l.rootFound === !0)
      return l.word;
    e = l.word;
  }
  const u = RE(e, a);
  if (u)
    return u.word;
  const c = I4(e, a);
  return c ? c.word : e;
}
Object.defineProperty(IE, "__esModule", {
  value: !0
});
IE.default = _Na;
var zNa = K, bNa = ee, wNa = vNa(CE);
function vNa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: kNa
} = bNa.languageProcessing;
function _Na(e) {
  const a = (0, zNa.get)(e.getData("morphology"), "ar", !1);
  return a ? (t) => (0, wNa.default)(t, a) : kNa;
}
var DE = {}, fy = {};
Object.defineProperty(fy, "__esModule", {
  value: !0
});
fy.default = void 0;
fy.default = ["غودرت", "غودر", "غودرتما", "غودرا", "غودرتا", "غودرنا", "غودرتم", "غودرتنّ", "غودروا", "غودرن", "مغادر", "محثوث", "تجرى", "يجرى", "مجرى", "تبقى", "يبقى", "مبقى", "تجوهلت", "تجوهل", "تجوهلت", "تجوهلتما", "تجوهلا", "تجوهلتا", "تجوهلنا", "تجوهلتم", "تجوهلتنّ", "تجوهلوا", "تجوهلن", "متجاهل", "تشوورت", "تشوور", "تشوورتما", "تشوورا", "تشوورتا", "تشوورنا", "تشوورتم", "تشوورتنّ", "تشووروا", "تشوورن", "متشاور", "نوقشت", "نوقش", "نوقشتما", "نوقشا", "نوقشتا", "نوقشنا", "نوقشتم", "نوقشتنّ", "نوقشوا", "نوقشن", "مناقش", "معود", "ترتدى", "يرتدى", "نرتدى", "مرتدى", "تنتهى", "ينتهى", "ننتهى", "تجووزت", "تجووز", "تجووزتما", "تجووزا", "تجووزتا", "تجووزنا", "تجووزتم", "تجووزتنّ", "تجووزوا", "تجووزن", "حوولت", "حوول", "حوولتما", "حوولا", "حوولتا", "حوولنا", "حوولتم", "حوولتنّ", "حوولوا", "حوولن", "تعولجت", "تعولج", "تعولجتما", "تعولجا", "تعولجتا", "تعولجنا", "تعولجتم", "تعولجتنّ", "تعولجوا", "تعولجن", "متعالج", "أشير", "أشيرا", "أشيرتا", "أشيروا", "تشار", "تشارين", "يشار", "تشاران", "يشاران", "نشار", "تشارون", "يشارون", "جيء", "جيئت", "جيئا", "جيئتا", "جيئوا", "أجاء", "تجاء", "تجائين", "يجاء", "تجاءان", "يجاءان", "نجاء", "تجائون", "تجأن", "يجائون", "يجأن", "يوصى", "توصى", "نوصى", "موصى", "احتيج", "احتيجت", "احتيجا", "احتيجتا", "احتيجوا", "تعطى", "يعطى", "نعطى", "معطى", "تعوليت", "تعولي", "تعوليتما", "تعوليا", "تعوليتا", "تعولينا", "تعوليتم", "تعوليتنّ", "تعولوا", "تعولين", " شوركت", "شورك", "شوركتما", "شوركا", "شوركتا", "شوركنا", "شوركتم", "شوركتنّ", "شوركوا", "شوركن", "تتولّى", "يتولّى", "نتولّى", "زيد", "زيدت", "زيدا", "زيدتا", "زيدوا", "أزاد", "تزاد", "تزادين", "يزاد", "تزادان", "يزادان", "نزاد", "تزادون", "يزادون", "سوعدت", "سوعد", "سوعدتما", "سوعدا", "سوعدتا", "سوعدنا", "سوعدتم", "سوعدتنّ", "سوعدوا", "سوعدن", "رئيت", "رئي", "رئيتما", "رئيا", "رئيتا", "رئينا", "رئيتم", "رئيتنّ", "رؤوا", "رئين", "تفووضت", "تفووض", "تفووضتما", "تفووضا", "تفووضتا", "تفووضنا", "تفووضتم", "تفووضتنّ", "تفووضوا", "تفووضن", "تزويدت", "تزويد", "تزويدتما", "تزويدا", "تزويدتا", "تزويدنا", "تزويدتم", "تزويدتنّ", "تزويدوا", "تزويدن", "تتلقّى", "يتلقّى", "نتلقّى", "لوحظت", "لوحظ", "لوحظتما", "لوحظا", "لوحظتا", "لوحظنا", "لوحظتم", "لوحظتنّ", "لوحظوا", "لوحظن", "تسعى", "يسعى", "نسعى", "أوتيت", "أوتي", "أوتيتما", "أوتيا", "أوتيتا", "أوتينا", "أوتيتم", "أوتيتنّ", "أوتوا", "أوتين", "ووفقت", "ووفق", "ووفقتما", "ووفقا", "ووفقتا", "ووفقنا", "ووفقتم", "ووفقتنّ", "ووفقوا", "ووفقن", "إين", "إينت", "إينا", "إينتا", "إينوا", "أؤان", "تؤان", "تؤانين", "يؤان", "تؤانان", "يؤانان", "نؤان", "تؤانون", "يؤانون", "أوخذت", "أوخذ", "أوخذتما", "أوخذا", "أوخذتا", "أوخذنا", "أوخذتم", "أوخذتنّ", "أوخذوا", "أوخذن", "لهيت", "لهي", "لهيتما", "لهيا", "لهيتا", "لهينا", "لهيتم", "لهيتم", "لهوا", "لهين", "ألهى", "تلهى", "يلهى", "تلهى", "تلهيان", "يلهيان", "نلهى", "يلهين", "تتبقّى", "يتبقّى", "نتبقّى", "تنوولت", "تنوول", "تنوولتما", "تنوولا", "تنوولتا", "تنوولنا", "تنوولتم", "تنوولتنّ", "تنوولوا", "تنوولن", "تووجهت", "تووجه", "تووجهتما", "تووجها", "تووجهتا", "تووجهنا", "تووجهتم", "تووجهتنّ", "تووجهوا", "تووجهن", "تبودلت", "تبودل", "تبودلتما", "تبودلا", "تبودلتا", "تبودلنا", "تبودلتم", "تبودلتم", "تبودلوا", "تبودلن", "تعورضت", "تعورض", "تعورضتما", "تعورضا", "تعورضتا", "تعورضنا", "تعورضتم", "تعورضتنّ", "تعورضوا", "تعورضن", "تعورضن", "تعنى", "يعنى", "نعنى", "طولبت", "طولب", "طولبتما", "طولبا", "طولبتا", "طولبنا", "طولبتم", "طولبتنّ", "طولبوا", "طولبن", "قيم", "قيمت", "قيما", "قيمتا", "قيموا", "أقام", "تقام", "تقامين", "يقام", "تقامان", "يقامان", "نقام", "تقامون", "يقامون", "أنشئت", "أنشئ", "أنشئتما", "أنشئا", "أنشئتا", "أنشئنا", "أنشئتم", "أنشئتنّ", "أنشئوا", "أنشئن", "تنشأ", "تنشئين", "ينشأ", "تنشآن", "ينشآن", "ننشأ", "تنشأون", "ينشأون", "ينشأن", "تنشأن", "غطّي", "تغطّى", "يغطّى", "نغطّى", "قوتلت", "قوتل", "قوتلتما", "قوتلا", "قوتلتا", "قوتلنا", "قوتلنا", "قوتلتنّ", "قوتلوا", "قوتلن", "أسمى", "تسمى", "يسمى", "نسمى", "أوثرت", "أوثر", "أوثرتما", "أوثرا", "أوثرتا", "أوثرنا", "أوثرتم", "أوثرتنّ", "أوثروا", "أوثرن", "غنّي", "أغنّى", "تغنّى", "يغنّى", "نغنّى", "استفيد", "استفيدت", "استفيدا", "استفيدتا", "استفيدوا", "أستفاد", "تستفاد", "تستفادين", "يستفاد", "تستفادان", "يستفادان", "نستفاد", "تستفادون", "يستفادون", "أثير", "أثيرت", "أثيرا", "أثيرا", "أثيروا", "أثار", "تثار", "تثارين", "يثار", "تثاران", "يثاران", "نثار", "تثارون", "يثارون", "تدّعى", "يدّعى", "ندّعى", "عيش", "عيشت", "عيشا", "عيشتا", "عيشوا", "أعاش", "تعاش", "تعاشين", "يعاش", "تعاشان", "يعاشان", "نعاش", "تعاشون", "يعاشون", "ووجهت", "ووجه", "ووجهتما", "ووجها", "ووجهتا", "ووجهنا", "ووجهتم", "ووجهتنّ", "ووجهوا", "ووجهن", "دعيت", "دعي", "دعيا", "دعيتا", "دعينا", "دعيتم", "دعيتنّ", "دعوا", "دعين", "أدعى", "تدعى", "تدعين", "تدعين", "تدعيان", "يدعيان", "يدعين", "اختير", "اختيرت", "اختيرا", "اختيرتا", "اختيروا", "اخترن", "شوهدت", "شوهد", "شوهدتما", "شوهدا", "شوهدتا", "شوهدنا", "شوهدتم", "شوهدتنّ", "شوهدوا", "شوهدن", "أدّي", "أؤدّى", "تؤدّى", "يؤدّى", "نؤدّى", "أفيدت", "أفيدا", "أفيدتا", "أفيدوا", "يفادون", "تفادون", "نفاد", "تفادان", "يفادان", "تفاد", "يفاد", "تفادين", "أفاد", "تكوملت", "تكومل", "تكوملتما", "تكوملا", "تكوملتا", "تكوملنا", "تكوملتم", "تكوملتنّ", "تكوملوا", "تكوملن", "أهنّئ", "تهنّئ", "تهنّئين", "يهنّئ", "يهنّئ", "يهنّئان", "تهنّئان", "نهنّئ", "تهنّئون", "تهنّئن", "هنّئوا", "هنّئن", "أهنّأ", "تهنّأ", "يهنّأ", "تهنّآن", "نهنّأ", "تهنّأون", "تهنّأن", "يهنّأون", "يهنّأن", "سوهمت", "سوهم", "سوهمتما", "سوهما", "سوهمتا", "سوهمنا", "سوهمتم", "سوهمتنّ", "سوهموا", "سوهمن", "أرمى", "ترمى", "يرمى", "نرمى", "أبلغت"];
Object.defineProperty(DE, "__esModule", {
  value: !0
});
DE.default = jNa;
var ENa = TNa(fy), ANa = ee;
function TNa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: $Na
} = ANa.languageProcessing;
function jNa(e) {
  const a = "و", t = $Na(e), n = [];
  for (let r of t) {
    r.startsWith(a) && (r = r.slice(1));
    let o = -1;
    r.length >= 2 && (o = r[1].search("ُ")), (o !== -1 || ENa.default.includes(r)) && n.push(r);
  }
  return n.length !== 0;
}
Object.defineProperty(SE, "__esModule", {
  value: !0
});
var P4 = SE.default = void 0, xNa = ee, SNa = mp(uy), ONa = Zn, INa = mp(wr), CNa = mp(py), PNa = Uo, RNa = OE, DNa = mp(IE), NNa = mp(DE);
function mp(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: LNa
} = xNa.languageProcessing;
let MNa = class extends LNa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "ar",
      passiveConstructionType: "morphological",
      firstWordExceptions: SNa.default,
      functionWords: ONa.all,
      transitionWords: INa.default,
      twoPartTransitionWords: CNa.default,
      prefixedFunctionWordsRegex: PNa.PREFIXED_FUNCTION_WORDS_REGEX
    }), Object.assign(this.helpers, {
      createBasicWordForms: RNa.createBasicWordForms,
      getStemmer: DNa.default,
      isPassiveSentence: NNa.default
    });
  }
};
P4 = SE.default = MNa;
var NE = {}, gs = {};
Object.defineProperty(gs, "__esModule", {
  value: !0
});
gs.singleWords = gs.multipleWords = gs.default = gs.allWords = void 0;
const qNa = gs.singleWords = ["abans", "així", "alhora", "aleshores", "altrament", "anteriorment", "breument", "bàsicament", "contràriament", "després", "doncs", "efectivament", "endemés", "especialment", "evidentment", "finalment", "fins a", "fins que", "generalment", "igualment", "malgrat", "mentre", "mentrestant", "parallelament", "paral·lelament", "però", "perquè", "quan", "primerament", "resumidament", "resumint", "segurament", "segons això", "sens dubte", "sinó", "sobretot", "també", "tanmateix"], FNa = gs.multipleWords = ["a banda d'això", "a continuació", "a diferència de", "a fi de", "a fi que", "a força de", "a manera de resum", "a més", "a partir d'aquí", "a partir d'ara", "a tall d'exemple", "a tall de recapitulació", "a tall de resum", "al capdavall", "al contrari", "al mateix temps", "amb relació a", "tot plegat", "ara bé", "atès que", "com a conseqüència", "com a exemple", "com a resultat", "com a resum", "com que", "comptat i debatut", "considerant que", "convé destacar", "convé recalcar", "convé ressaltar que", "d'altra banda", "d’una banda", "d’una forma breu", "de la mateixa manera", "de manera parallela", "de manera paral·lela", "de manera que", "de tota manera", "degut a", "deixant de banda", "dit d'una altra manera", "donat que", "en a resum", "en lloc de", "en altres paraules", "en aquest sentit", "en canvi", "en conclusió", "en conjunt", "en conseqüència", "encara que", "en darrer lloc", "en darrer terme", "en definitiva", "en efecte", "en general", "en particular", "en pocs mots", "en poques paraules", "en primer lloc", "en relació amb", "en resum", "en segon lloc", "en síntesi", "en suma", "en tercer lloc", "en últim terme", "és a dir", "és més", "és per això que", "fins i tot", "gràcies a", "gràcies de", "igual com", "igual que", "ja que", "llevat que", "més aviat", "més tard", "més endavant", "no obstant", "o sia", "o sigui", "òbviament", "pel fet que", "pel general", "pel que", "per acabar", "per això", "per altra banda", "per aquest motiu", "per causa de", "per causa que", "per cert", "per començar", "per concloure", "per concretar", "per contra", "per exemple", "per illustrar", "per il·lustrar", "per l'altra part", "per l'altre cantó", "per la qual cosa", "per mitjà de", "per posar un exemple", "per raó de", "per raó que", "per tal de", "per tal que", "per tant", "per últim", "per un cantó", "per un costat", "per una altra banda", "per una part", "quant a", "recapitulant", "respecte de", "s'ha de tenir en compte que", "sempre que", "tal com s’ha dit", "tan bon punt", "tan aviat com", "tenint en compte que", "tot i", "tot seguit", "val a dir", "val la pena dir que", "vist que"], BNa = gs.allWords = qNa.concat(FNa);
gs.default = BNa;
var hy = {};
Object.defineProperty(hy, "__esModule", {
  value: !0
});
hy.default = void 0;
hy.default = [["ara", "ara"], ["ni", "ni"]];
var yy = {};
Object.defineProperty(yy, "__esModule", {
  value: !0
});
yy.default = void 0;
yy.default = {
  recommendedLength: 25
};
var LE = {};
Object.defineProperty(LE, "__esModule", {
  value: !0
});
LE.default = HNa;
var WNa = ee;
const {
  baseStemmer: UNa
} = WNa.languageProcessing;
function HNa() {
  return UNa;
}
Object.defineProperty(NE, "__esModule", {
  value: !0
});
var R4 = NE.default = void 0, GNa = ee, VNa = zy(gs), KNa = zy(hy), YNa = zy(yy), QNa = zy(LE);
function zy(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: XNa
} = GNa.languageProcessing;
let ZNa = class extends XNa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, delete this.defaultResearches.getPassiveVoiceResult, delete this.defaultResearches.getSentenceBeginnings, delete this.defaultResearches.functionWordsInKeyphrase, Object.assign(this.config, {
      language: "ca",
      functionWords: [],
      transitionWords: VNa.default,
      twoPartTransitionWords: KNa.default,
      sentenceLength: YNa.default
    }), Object.assign(this.helpers, {
      getStemmer: QNa.default
    });
  }
};
R4 = NE.default = ZNa;
var ME = {}, by = {};
Object.defineProperty(by, "__esModule", {
  value: !0
});
by.default = void 0;
by.default = [
  // Definite articles:
  "ten",
  // Numbers 0-10, 100, 1000:
  "nula",
  "jeden",
  "jedné",
  "jedna",
  "jedno",
  "dva",
  "dvě",
  "dvou",
  "tři",
  "čtyři",
  "pět",
  "šest",
  "sedm",
  "osm",
  "devět",
  "deset",
  "sto",
  "tisíc",
  // Demonstrative pronouns ("ten" is already added above):
  "tento",
  "ta",
  "tato",
  "to",
  "toto",
  "ti",
  "tito",
  // Interrogatives:
  "kdo",
  "co"
];
var fp = {};
Object.defineProperty(fp, "__esModule", {
  value: !0
});
fp.default = void 0;
fp.default = ["protože", "když", "sbohem", "sotva", "kdo", "co", "kde", "odkud", "kdy", "odkdy", "ačkoli", "navzdory", "ačkoli", "když", "kde", "aby", "pořádku", "kdyby", "jak", "do", "že", "jako", "přesně", "jako", "než", "aby", "kdo", "kde", "kdo", "koho", "kde", "kolik", "odkud", "proč", "kolik", "nebo"];
var ud = {}, vr = {};
Object.defineProperty(vr, "__esModule", {
  value: !0
});
vr.singleWords = vr.multipleWords = vr.default = vr.allWords = void 0;
const JNa = vr.singleWords = ["předtím", "vždyť", "definitely", "konečně", "jasné", "možné", "ale", "demzufolge", "však", "ačkoliv", "protože", "ovšem", "zkrátka", "potom", "stejně", "tím", "jinak", "zatímco", "když", "co", "kdežto", "ačkoli", "přestože", "čas", "chvíle", "chvilka", "avšak", "jenže", "nicméně", "přitom", "aniž", "a", "proto", "tedy", "teda", "totiž", "mimoto", "čímž", "což", "než", "nejenže", "také", "jenom", "přesto", "jak", "jelikož", "takže", "zda", "sice", "tudíž", "jakoby", "nýbrž", "neboli", "jen", "čili", "pak", "jenomže", "kdežto", "leč", "poněvadž", "třeba", "přece", "nežli", "zdali", "buďto", "totiž", "jenom", "leda", "pakliže", "třebaže", "jakože", "jakkoli", "nechť", "sotva", "kterak", "sic", "jakkoliv", "ledaže", "ježto", "třebas", "jakž", "pakli", "zdalipak", "takž", "jakže", "pokavaď", "jakby", "pokudž", "sotvaže", "pokad", "kdyžtě", "mezitímco", "buďsi", "byťsi", "pokadž", "tedyť", "buďže", "dle", "vzhledem", "místo", "vedle", "okolo", "uprostřed", "namísto", "navzdory", "krom", "poblíž", "blízko", "nedaleko", "začátkem", "naproti", "počátkem", "počínaje", "postupem", "vlivem", "vyjma", "následkem", "dík", "zpoza", "zásluhou", "nevyjímaje", "doprostřed", "zpod", "zespoda", "závěrem", "úvodem", "přese", "prostřed", "nepočítaje", "úměrně", "vprostřed", "navrch", "vevnitř", "zespodu", "poblíže", "počínajíc", "nadtoť", "zpozad", "vyjímaje", "začínaje", "zespod", "navrchu", "vyjímajíc", "navzdor", "dál", "veprostřed", "končíc", "začínajíc", "nepočítajíc", "zvíce", "vprostředku", "opodále", "podále", "naprostřed", "vlastně", "podle", "samozřejmě", "vždyť", "zatím", "dřív", "radši", "spíš", "poprvé", "nakonec", "navíc", "záleží", "zbytek", "kým", "jakmile", "skutečně", "tentokrát", "představit", "jménem"], eLa = vr.multipleWords = ["a proto", "i když", "i přestože", "z tohoto důvodu", "kromě toho", "nějaký čas", "k tomu", "na jedné straně", "stručně řečeno", "jinými slovy", "důvod je", "důvodem je", "hlavně protože", "možným důvodem je", "a potom", "mimo to", "z uvedených důvodů", "z těchto důvodů", "důvod je jednoduchý", "teprve potom", "hlavní důvod proč", "nejdřív potom", "přesto však", "ale zároveň", "ale také", "během toho"], aLa = vr.allWords = JNa.concat(eLa);
vr.default = aLa;
Object.defineProperty(ud, "__esModule", {
  value: !0
});
ud.default = ud.all = void 0;
var tLa = vr, nLa = rLa(Ba);
function rLa(e) {
  return e && e.__esModule ? e : { default: e };
}
const sLa = [], iLa = ["nula", "jeden", "jedné", "jedna", "jedno", "dva", "dvě", "dvou", "tři", "čtyři", "pět", "šest", "sedm", "osm", "devět", "deset", "jedenáct", "dvanáct", "třináct", "čtrnáct", "patnáct", "šestnáct", "sedmnáct", "osmnáct", "devatenáct", "dvacet", "dvacet jedna", "dvacet dva", "dvacet tři", "třicet", "čtyřicet", "padesát", "šedesát", "sedmdesát", "osmdesát", "devadesát", "sto", "dvě stě", "tři sta", "čtyři sta", "pět set", "šest set", "sedm set", "osm set", "devět set", "tisíc", "dva tisíce", "jedenáct tisíc", "dvacet pět tisíc", "sto třicet osm tisíc", "milión", "dva milióny", "pět miliónů", "šest miliónů", "sedm miliónů", "miliarda"], oLa = ["první", "druhý", "druhé", "třetí", "čtvrtý", "pátý", "šestý", "sedmý", "osmý", "devátý", "desátý"], lLa = [
  // Personal pronouns.
  "já",
  "ty",
  "on",
  "ona",
  "ono",
  "my",
  "mě",
  "mne",
  "mi",
  "mně",
  "vy",
  "oni",
  "ony",
  "tě",
  "ti",
  "tebe",
  "tobě",
  "jeho",
  "něho",
  "ho",
  "jej",
  "něj",
  "ji",
  "jí",
  "ní",
  "je",
  "ně",
  "jim",
  "nim",
  "jimi",
  "nimi",
  "jich",
  "nich",
  "jemu",
  "němu",
  "něm",
  "mém",
  "mým",
  "mých",
  "mou",
  "mými",
  "ním",
  "mu",
  "nás",
  "nám",
  "námi",
  "vás",
  "vám",
  "mnou",
  "námi",
  "tebou",
  "vámi",
  "našich",
  "tys",
  "naši",
  // Possessive pronouns.
  "můj",
  "má",
  "mé",
  "mí",
  "moje",
  "mého",
  "mojí",
  "mých",
  "mému",
  "moji",
  "tvůj",
  "tvoje",
  "tvá",
  "tvé",
  "tví",
  "tvoji",
  "tvého",
  "tvojí",
  "tvých",
  "tvojích",
  "tvému",
  "tvým",
  "tvou",
  "tvém",
  "tvých",
  "tvými",
  "jeho",
  "její",
  "náš",
  "naše",
  "váš",
  "vaše",
  "jejich",
  "vaší",
  "naší",
  // Demonstrative pronouns.
  "ten",
  "tento",
  "ta",
  "tato",
  "to",
  "toto",
  "ti",
  "tito",
  "tyto",
  "ty",
  "tato",
  "tohle",
  "toho",
  "abych",
  "těch",
  "tenhle",
  "abyste",
  "abychom",
  "tyhle",
  "tuhle",
  "tohoto",
  "čeho",
  "čemu",
  "téhle",
  "těmi",
  "této",
  "tomhle",
  "tou",
  "tahle",
  "žes",
  "tímhle",
  "těm",
  "těchto",
  "tomu",
  "tu",
  "ten",
  "tom",
  "tím",
  // Relative pronouns.
  "který",
  "která",
  "které",
  "kterého",
  "kterému",
  "kterou",
  "kterém",
  "kterým",
  "kteří",
  "kterých",
  "kterými",
  "jenž",
  "jež",
  "jehož",
  "jejž",
  "něhož",
  "nějž",
  "jíž",
  "níž",
  "jemuž",
  "němuž",
  "jež",
  "něž",
  "němž",
  "jímž",
  "nímž",
  "již",
  "jichž",
  "nichž",
  "jimž",
  "nimž",
  "jimiž",
  "nimiž",
  "kdo",
  "co",
  "koho",
  "čeho",
  "komu",
  "čemu",
  "koho",
  "kom",
  "čem",
  "kým",
  "čím",
  "cože",
  "což",
  "koho",
  "jakou"
], dLa = ["co", "čí", "čím", "jak", "jaký", "jaké", "kde", "kdo", "kdý", "kolik", "který", "jenž", "proč"], uLa = ["nějaký", "nějaká", "nějaké", "žádný", "nijaký", "lecjaký", "ledajaký", "ledasjaký", "kdejaký", "kdekterý", "všelijaký", "veškerý", "pár", "hodně", "celý", "tolik", "celou", "celé", "oba", "buď", "zbytek", "žádná", "nějakou", "spoustu", "několik"], cLa = [
  "se",
  "si",
  "sebe",
  "sobě",
  "sebou",
  // Reflexive possessive.
  "svůj",
  "svoje",
  "svá",
  "své",
  "svého",
  "svojí",
  "svému",
  "svoji",
  "svou",
  "svém",
  "svým",
  "sví",
  "svých",
  "svými"
], pLa = ["někdo", "někoho", "někomu", "někom", "někým", "něco", "nic", "něčeho", "něčemu", "něco", "cokoli", "cokoliv", "něčem", "něčím", "některá", "některé", "některého", "některému", "některý", "některou", "některém", "některým", "někteří", "některých", "některými", "nějaká", "nějaké", "nějakého", "nějakému", "nějaký", "nějakou", "nějakém", "nějakým", "nějací", "nějakých", "nějakými", "něčí", "něčího", "něčímu", "něčím", "něčí", "ničí", "něčích", "něčími", "ledakdo", "ledaco", "ledajaký", "ledakterý", "kdokoliv", "kdokoli", "kohokoli", "komukoli", "kohokoli", "komkoli", "kýmkoli", "cokoli", "jakýkoli", "jakýkoliv", "kterýkoli", "číkoli", "kdos", "kdosi", "cosi", "kterýsi", "jakýsi", "nikdo", "čísi", "leckdo", "leckdos", "ledakdo", "ledaskdo", "kdekdo", "lecco", "leccos", "ledaco", "ledacos", "ledaco", "ledasco", "leckterý", "kdekdo", "kdečí", "kdeco", "lecčí", "ledačí", "ledasčí", "někde", "nikde", "kdekoliv", "kdekoli", "všude", "leckde", "ledaskde", "ledakde", "někudy", "kudysi", "nikudy", "kdekudy", "odněkud", "odkudsi", "odnikud", "odevšad", "kdesi", "všechen", "málokdo", "máloco", "málokterý", "zřídkakdo", "zřídkaco", "sotvakdo", "sotvaco", "sotva který", "každý", "každá", "každé", "každého", "každému", "každému", "každou", "každém", "každým", "každí", "každých", "každým", "každými", "všechen", "všechna", "všechno", "vše", "všeho", "vší", "všemu", "všechnu", "vším", "všichni", "všechny", "všech", "všem", "všemi", "takový", "takové ", "takového", "takovou", "cokoliv", "jiného", "jiný", "taková", "jiné", "odtud"], gLa = ["během", "bez", "blízko", "do", "od", "okolo", "kolem", "u", "vedle", "z", "ze", "k", "ke", "kvůli", "navzdor", "navzdory", "krom, vedle", "kromě, vedle", "místo", "namísto", "ohledně", "podél", "pomocí", "oproti", "naproti", "proti", "prostřednictvím", "s", "u", "vlivem", "vyjma", "využitím", "stran", "díky", "kvůli", "podle", "vůči", "na", "té", "o", "pro", "přes", "za", "po", "v", "ve", "mezi", "s", "se", "nad", "pod", "před", "mimo", "skrz", "při", "jako", "asi", "dokud", "ven", "běž", "odkud", "ode", "nahoře", "nahoru", "dovnitř", "dne", "beze", "napříč", "versus", "via", "vně", "dovnitř", "vpředu", "vůkol", "vespod", "opodál", "vepředu", "svrchu", "vnitř", "zprostřed", "naspodu", "zdéli", "okol", "podál", "naspod", "kontra", "vespodu", "zponad", "ponad", "nadtož", "kolkolem", "zdélí", "veskrz", "popod", "daleko", "vůkolem"], mLa = ["a", "i", "aby", "ale", "že", "protože", "neboť", "když", "až", "jestli", "jestliže", "pokud", "kdyby", "nebo", "anebo", "či", "proto", "který", "jenž", "aniž", "než", "tak", "takže", "kvůli", "kdybych", "ach", "zdá", "zatím", "během", "kdybyste", "jakožto", "jakož", "neb"], fLa = ["řekl", "říkala", "řekla", "řekne", "říkal", "říká", "podle", "neřekl", "říkat", "chtějí", "neviděl", "vypadáš", "mluvil", "rozumím", "znám", "cítím", "nemyslím", "víme", "nevěřím", "myslíte"], hLa = ["jasně", "velmi", "vůbec", "přesně", "určitě", "úplně", "samozřejmě", "docela", "skutečně", "rozhodně", "vážně", "spolu", "jistě", "naprosto", "velice", "hrozně", "strašně", "opravdu"], yLa = ["mělo", "přijít", "podívat", "dělej", "dá", "dala", "přijde", "stojí", "udělám", "mohlo", "nechte", "nemáme", "dám", "přišla", "dělal", "dejte"], zLa = [
  // General adjective.
  "dobře",
  "dobrý",
  "dobrá",
  "dobré",
  "dost",
  "dlouho",
  "dlouha",
  "nejlepší",
  "poslední",
  "rychle",
  "lepší",
  "vlastní",
  "ostatní",
  "velký",
  "starý",
  "líp",
  "malé",
  "špatný",
  "lépe",
  "hlavní",
  "právo",
  "úžasné",
  "pěkný",
  "stejné",
  "spousta",
  "skvělá",
  "dobrej",
  "horší",
  "novou",
  "stará",
  "nového",
  "nejdřív",
  "druhou",
  "naposledy",
  "hezký",
  "dlouhý",
  "dobrý",
  "malý",
  "těžký",
  "velký",
  "zlý",
  "delší",
  "lepší",
  "menší",
  "těžší",
  "větší",
  "horší",
  "nejdelší",
  "nejlepší",
  "nejmenší",
  "nejtěžší",
  "největší",
  "nejhorší",
  "pěkně",
  // General adverbs.
  "všelijak",
  "nějak",
  "jaksi",
  "tak nějak",
  "ijak",
  "nikterak",
  "akkoli",
  "akkoliv",
  "kdejak",
  "už",
  "jen",
  "tady",
  "teď",
  "ještě",
  "možná",
  "nikdy",
  "ani",
  "taky",
  "pak",
  "trochu",
  "prostě",
  "víc",
  "jenom",
  "další",
  "právě",
  "zpátky",
  "vždycky",
  "pryč",
  "zase",
  "někdy",
  "také",
  "chvíli",
  "znovu",
  "snad",
  "třeba",
  "stále",
  "zrovna",
  "příliš",
  "nějak",
  "vždy",
  "skoro",
  "kolem",
  "později",
  "zpět",
  "najednou",
  "támhle",
  "někam",
  "hlavně",
  "často",
  "občas",
  "společně",
  "dokonce",
  "zde",
  "aspoň",
  "jediný",
  "pouze",
  "stačí",
  "mnohem",
  "zas",
  "nikam",
  "dávno",
  "již",
  "dvakrát",
  "vzhůru",
  "pomalu",
  "bohužel",
  "raději",
  "nejspíš",
  "náhodou",
  "okamžitě"
], bLa = ["jo", "hej", "oh", "uh ", "hele", "fajn", "ok", "proboha", "ah", "okay"], wLa = [], vLa = ["den", "dnes", "čas", "ráno", "zítra", "dneska", "minut", "včera", "času", "dní", "dni", "dny", "hodinu", "hodin", "týdny", "měsíce", "roku", "měsíců"], kLa = ["věc", "věci", "můžeš", "člověk", "lidi", "člověka", "člověku", "člověče", "člověku", "člověkovi", "lidech", "lidem", "lidé", "lidí", "člověkem", "lidmi", "chlap", "místa"], _La = ["atd.", "bůhvíkdo", "bůhvíjaký", "bůhvíčí", "nevímco", "nevímkdo a podobně", "si", "ne", "ně", "pan", "pane", "pana", "paní", "prosím", "pořádku", "líto", "chlape", "slečno", "mimochodem"], ELa = ud.all = (0, nLa.default)([].concat(sLa, iLa, oLa, lLa, dLa, uLa, cLa, pLa, gLa, mLa, fLa, hLa, yLa, zLa, bLa, wLa, vLa, kLa, _La, tLa.singleWords));
ud.default = ELa;
var wy = {};
Object.defineProperty(wy, "__esModule", {
  value: !0
});
wy.default = void 0;
wy.default = [["buď", "nebo"], ["buď", "anebo"], ["ani", "ani"], ["nejen", "ale i"], ["jak", "tak"], ["sice", "ale"], ["sice", "však"], ["jednak", "jednak"]];
var qE = {}, vy = {}, FE = {}, cd = {};
Object.defineProperty(cd, "__esModule", {
  value: !0
});
cd.endings = cd.default = void 0;
const ALa = cd.endings = ["án", "ána", "áno", "áni", "ány", "ován", "ána", "áno", "áni", "ány", "en", "ena", "eno", "eni", "eny", "ěn", "ěna", "ěno", "ěni", "ěny", "et", "eta", "eto", "eti", "ety", "it", "ita", "ito", "iti", "ity", "at", "ata", "ato", "ati", "aty", "yt", "yta", "yto", "yti", "yty", "ut", "uta", "uto", "uti", "uty"];
cd.default = ALa;
Object.defineProperty(FE, "__esModule", {
  value: !0
});
FE.default = SLa;
var TLa = ee, $La = jLa(cd);
function jLa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: xLa
} = TLa.languageProcessing;
function SLa(e) {
  return xLa(e).filter((t) => $La.default.some((n) => t.endsWith(n)));
}
Object.defineProperty(vy, "__esModule", {
  value: !0
});
vy.default = void 0;
var OLa = ee, ILa = CLa(FE);
function CLa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  values: PLa
} = OLa.languageProcessing, {
  Clause: RLa
} = PLa;
class DLa extends RLa {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, ILa.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Sets the clause passiveness to true if there is a participle present in the clause, otherwise sets it to false.
   *
   * @returns {void}
   */
  checkParticiples() {
    this.setPassive(this.getParticiples().length > 0);
  }
}
vy.default = DLa;
var pd = {};
Object.defineProperty(pd, "__esModule", {
  value: !0
});
pd.filteredAuxiliaries = pd.default = void 0;
const NLa = pd.filteredAuxiliaries = ["být", "byl", "byla", "bylo", "byli", "byly", "je", "jsem", "jsi", "jste", "jste", "jsme", "jste", "jsou", "budu", "budeš", "budete", "bude", "budeme", "budete", "budou", "nebyl", "nebyla", "nebylo", "nebyli", "nebily", "nebudu", "nebudeš", "nebudete", "nebude", "nebudeme", "nebudete", "nebudou"];
pd.default = NLa;
Object.defineProperty(qE, "__esModule", {
  value: !0
});
qE.default = ULa;
var LLa = ee, MLa = BE(vy), qLa = BE(pd), FLa = BE(fp);
function BE(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getClausesSplitOnStopWords: BLa,
  createRegexFromArray: $P
} = LLa.languageProcessing, WLa = {
  Clause: MLa.default,
  regexes: {
    auxiliaryRegex: $P(qLa.default),
    stopCharacterRegex: /([:,])(?=[ \n\r\t'"+\-»«‹›<>])/ig,
    stopwordRegex: $P(FLa.default)
  }
};
function ULa(e) {
  return BLa(e, WLa);
}
var WE = {}, UE = {};
Object.defineProperty(UE, "__esModule", {
  value: !0
});
UE.default = JLa;
const Kt = function(e, a) {
  const t = a.externalStemmer.palataliseSuffixes, n = e.length;
  return e.substring(n - 2, n) === t.palataliseSuffixCi || e.substring(n - 2, n) === t.palataliseSuffixCe || e.substring(n - 2, n) === t.palataliseSuffixCiCaron || e.substring(n - 2, n) === t.palataliseSuffixCeCaron ? e.replace(e.substring(n - 2, n), t.palataliseSuffixK) : e.substring(n - 2, n) === t.palataliseSuffixZi || e.substring(n - 2, n) === t.palataliseSuffixZe || e.substring(n - 2, n) === t.palataliseSuffixZiCaron || e.substring(n - 2, n) === t.palataliseSuffixZeCaron ? e.replace(e.substring(n - 2, n), t.palataliseSuffixH) : e.substring(n - 3, n) === t.palataliseSuffixCte || e.substring(n - 3, n) === t.palataliseSuffixCti || e.substring(n - 3, n) === t.palataliseSuffixCtiAccented ? e.replace(e.substring(n - 3, n), t.palataliseSuffixCk) : e.substring(n - 3, n) === t.palataliseSuffixSte || e.substring(n - 3, n) === t.palataliseSuffixSti || e.substring(n - 3, n) === t.palataliseSuffixStiAccented ? e.replace(e.substring(n - 3, n), t.palataliseSuffixSk) : e.slice(0, -1);
}, HLa = function(e, a) {
  const t = a.externalStemmer.derivationalSuffixes, n = e.length;
  if (n > 8 && e.substring(n - 6, n) === t.derivationalSuffixObinec)
    return e.slice(0, -6);
  if (n > 7) {
    if (e.substring(n - 5, n) === t.derivationalSuffixIonar)
      return e = e.slice(0, -4), Kt(e, a);
    if (e.substring(n - 5, n) === t.derivationalSuffixOvisk || e.substring(n - 5, n) === t.derivationalSuffixOvstv || e.substring(n - 5, n) === t.derivationalSuffixOvist || e.substring(n - 5, n) === t.derivationalSuffixOvnik)
      return e.slice(0, -5);
  }
  if (n > 6) {
    if (e.substring(n - 4, n) === t.derivationalSuffixAsek || e.substring(n - 4, n) === t.derivationalSuffixLoun || e.substring(n - 4, n) === t.derivationalSuffixNost || e.substring(n - 4, n) === t.derivationalSuffixTeln || e.substring(n - 4, n) === t.derivationalSuffixOvec || e.substring(n - 5, n) === t.derivationalSuffixOvik || e.substring(n - 4, n) === t.derivationalSuffixOvtv || e.substring(n - 4, n) === t.derivationalSuffixOvin || e.substring(n - 4, n) === t.derivationalSuffixStin)
      return e.slice(0, -4);
    if (e.substring(n - 4, n) === t.derivationalSuffixEnic || e.substring(n - 4, n) === t.derivationalSuffixInec || e.substring(n - 4, n) === t.derivationalSuffixItel)
      return e = e.slice(0, -3), Kt(e, a);
  }
  if (n > 5) {
    if (e.substring(n - 3, n) === t.derivationalSuffixEnk || e.substring(n - 3, n) === t.derivationalSuffixIan || e.substring(n - 3, n) === t.derivationalSuffixIst || e.substring(n - 3, n) === t.derivationalSuffixIsk || e.substring(n - 3, n) === t.derivationalSuffixIstCaron || e.substring(n - 3, n) === t.derivationalSuffixItb || e.substring(n - 3, n) === t.derivationalSuffixIrn)
      return e = e.slice(0, -2), Kt(e, a);
    if (e.substring(n - 3, n) === t.derivationalSuffixArn || e.substring(n - 3, n) === t.derivationalSuffixOch || e.substring(n - 3, n) === t.derivationalSuffixOst || e.substring(n - 3, n) === t.derivationalSuffixOvn || e.substring(n - 3, n) === t.derivationalSuffixOun || e.substring(n - 3, n) === t.derivationalSuffixOut || e.substring(n - 3, n) === t.derivationalSuffixOus || e.substring(n - 3, n) === t.derivationalSuffixUsk || e.substring(n - 3, n) === t.derivationalSuffixKyn || e.substring(n - 3, n) === t.derivationalSuffixCan || e.substring(n - 3, n) === t.derivationalSuffixKar || e.substring(n - 3, n) === t.derivationalSuffixNer || e.substring(n - 3, n) === t.derivationalSuffixNik || e.substring(n - 3, n) === t.derivationalSuffixCtv || e.substring(n - 3, n) === t.derivationalSuffixStv)
      return e.slice(0, -3);
  }
  if (n > 4) {
    if (e.substring(n - 2, n) === t.derivationalSuffixAcAccented || e.substring(n - 2, n) === t.derivationalSuffixAc || e.substring(n - 2, n) === t.derivationalSuffixAnAccented || e.substring(n - 2, n) === t.derivationalSuffixAn || e.substring(n - 2, n) === t.derivationalSuffixAr || e.substring(n - 2, n) === t.derivationalSuffixAs)
      return e.slice(0, -2);
    if (e.substring(n - 2, n) === t.derivationalSuffixEc || e.substring(n - 2, n) === t.derivationalSuffixEn || e.substring(n - 2, n) === t.derivationalSuffixEnCaron || e.substring(n - 2, n) === t.derivationalSuffixEr || e.substring(n - 2, n) === t.derivationalSuffixIr || e.substring(n - 2, n) === t.derivationalSuffixIc || e.substring(n - 2, n) === t.derivationalSuffixIn || e.substring(n - 2, n) === t.derivationalSuffixInAccented || e.substring(n - 2, n) === t.derivationalSuffixIt || e.substring(n - 2, n) === t.derivationalSuffixIv)
      return e = e.slice(0, -1), Kt(e, a);
    if (e.substring(n - 2, n) === t.derivationalSuffixOb || e.substring(n - 2, n) === t.derivationalSuffixOt || e.substring(n - 2, n) === t.derivationalSuffixOv || e.substring(n - 2, n) === t.derivationalSuffixOn || e.substring(n - 2, n) === t.derivationalSuffixUl || e.substring(n - 2, n) === t.derivationalSuffixYn || e.substring(n - 2, n) === t.derivationalSuffixCk || e.substring(n - 2, n) === t.derivationalSuffixCn || e.substring(n - 2, n) === t.derivationalSuffixDl || e.substring(n - 2, n) === t.derivationalSuffixNk || e.substring(n - 2, n) === t.derivationalSuffixTv || e.substring(n - 2, n) === t.derivationalSuffixTk || e.substring(n - 2, n) === t.derivationalSuffixVk)
      return e.slice(0, -2);
  }
  return n > 3 && (e.charAt(e.length - 1) === t.derivationalSuffixC || e.charAt(e.length - 1) === t.derivationalSuffixCCaron || e.charAt(e.length - 1) === t.derivationalSuffixK || e.charAt(e.length - 1) === t.derivationalSuffixL || e.charAt(e.length - 1) === t.derivationalSuffixN || e.charAt(e.length - 1) === t.derivationalSuffixT) ? e.slice(0, -1) : e;
}, GLa = function(e, a) {
  const t = a.externalStemmer.augmentativeSuffixes, n = e.length;
  return n > 6 && e.substring(n - 4, n) === t.augmentativeSuffixAjzn ? e.slice(0, -4) : n > 5 && e.substring(n - 3, n) === t.augmentativeSuffixIzn || e.substring(n - 3, n) === t.augmentativeSuffixIsk ? (e = e.slice(0, -2), Kt(e, a)) : e;
}, VLa = function(e, a) {
  const t = a.externalStemmer.diminutiveSuffixes, n = e.length;
  if (n > 7 && e.substring(n - 5, n) === t.diminutiveSuffixOusek)
    return e.slice(0, -5);
  if (n > 6) {
    if (e.substring(n - 4, n) === t.diminutiveSuffixEcek || e.substring(n - 4, n) === t.diminutiveSuffixEcekAccented || e.substring(n - 4, n) === t.diminutiveSuffixIcek || e.substring(n - 4, n) === t.diminutiveSuffixIcekAccented || e.substring(n - 4, n) === t.diminutiveSuffixEnek || e.substring(n - 4, n) === t.diminutiveSuffixEnekAccented || e.substring(n - 4, n) === t.diminutiveSuffixInek || e.substring(n - 4, n) === t.diminutiveSuffixInekAccented)
      return e = e.slice(0, -3), Kt(e, a);
    if (e.substring(n - 4, n) === t.diminutiveSuffixAcekAccented || e.substring(n - 4, n) === t.diminutiveSuffixAcek || e.substring(n - 4, n) === t.diminutiveSuffixOcek || e.substring(n - 4, n) === t.diminutiveSuffixUcek || e.substring(n - 4, n) === t.diminutiveSuffixAnek || e.substring(n - 4, n) === t.diminutiveSuffixOnek || e.substring(n - 4, n) === t.diminutiveSuffixUnek || e.substring(n - 4, n) === t.diminutiveSuffixAnekAccented)
      return e.slice(0, -4);
  }
  if (n > 5) {
    if (e.substring(n - 3, n) === t.diminutiveSuffixEck || e.substring(n - 3, n) === t.diminutiveSuffixEckAccented || e.substring(n - 3, n) === t.diminutiveSuffixIck || e.substring(n - 3, n) === t.diminutiveSuffixIckAccented || e.substring(n - 3, n) === t.diminutiveSuffixEnk || e.substring(n - 3, n) === t.diminutiveSuffixEnkAccented || e.substring(n - 3, n) === t.diminutiveSuffixInk || e.substring(n - 3, n) === t.diminutiveSuffixInkAccented)
      return e = e.slice(0, -3), Kt(e, a);
    if (e.substring(n - 3, n) === t.diminutiveSuffixAckAccented || e.substring(n - 3, n) === t.diminutiveSuffixAck || e.substring(n - 3, n) === t.diminutiveSuffixOck || e.substring(n - 3, n) === t.diminutiveSuffixUck || e.substring(n - 3, n) === t.diminutiveSuffixAnk || e.substring(n - 3, n) === t.diminutiveSuffixOnk || e.substring(n - 3, n) === t.diminutiveSuffixUnk || e.substring(n - 3, n) === t.diminutiveSuffixAtk || e.substring(n - 3, n) === t.diminutiveSuffixAnkAccented || e.substring(n - 3, n) === t.diminutiveSuffixUsk)
      return e.slice(0, -3);
  }
  if (n > 4) {
    if (e.substring(n - 2, n) === t.diminutiveSuffixEk || e.substring(n - 2, n) === t.diminutiveSuffixEkAccented || e.substring(n - 2, n) === t.diminutiveSuffixIkAccented || e.substring(n - 2, n) === t.diminutiveSuffixIk)
      return e = e.slice(0, -1), Kt(e, a);
    if (e.substring(n - 2, n) === t.diminutiveSuffixAkAccented || e.substring(n - 2, n) === t.diminutiveSuffixAk || e.substring(n - 2, n) === t.diminutiveSuffixOk || e.substring(n - 2, n) === t.diminutiveSuffixUk)
      return e.slice(0, -1);
  }
  return n > 3 && e.substring(n - 1, n) === t.diminutiveSuffixK ? e.slice(0, -1) : e;
}, KLa = function(e, a) {
  const t = a.externalStemmer.comparativeSuffixes, n = e.length;
  return n > 5 && e.substring(n - 3, n) === t.comparativeSuffixesEjs || e.substring(n - 3, n) === t.comparativeSuffixesEjsCaron ? (e = e.slice(0, -2), Kt(e, a)) : e;
}, YLa = function(e, a) {
  const t = a.externalStemmer.possessiveSuffixes, n = e.length;
  if (n > 5) {
    if (e.substring(n - 2, n) === t.possessiveSuffixOv || e.substring(n - 2, n) === t.possessiveSuffixesUv)
      return e.slice(0, -2);
    if (e.substring(n - 2, n) === t.possessiveSuffixIn)
      return e = e.slice(0, -1), Kt(e, a);
  }
  return e;
}, QLa = function(e, a) {
  const t = a.externalStemmer.caseSuffixes, n = e.length;
  if (n > 7 && e.substring(n - 5, n) === t.caseSuffixAtech)
    return e.slice(0, -5);
  if (n > 6) {
    if (e.substring(n - 4, n) === t.caseSuffixEtem)
      return e = e.slice(0, -3), Kt(e, a);
    if (e.substring(n - 4, n) === t.caseSuffixAtum)
      return e.slice(0, -4);
  }
  if (n > 5) {
    if (e.substring(n - 3, n) === t.caseSuffixEch || e.substring(n - 3, n) === t.caseSuffixIch || e.substring(n - 3, n) === t.caseSuffixIchAccented || e.substring(n - 3, n) === t.caseSuffixEho || e.substring(n - 3, n) === t.caseSuffixEmiCaron || e.substring(n - 3, n) === t.caseSuffixEmi || e.substring(n - 3, n) === t.caseSuffixEmuAccented || e.substring(n - 3, n) === t.caseSuffixEte || e.substring(n - 3, n) === t.caseSuffixEti || e.substring(n - 3, n) === t.caseSuffixIho || e.substring(n - 3, n) === t.caseSuffixIhoAccented || e.substring(n - 3, n) === t.caseSuffixImi || e.substring(n - 3, n) === t.caseSuffixImu)
      return e = e.slice(0, -2), Kt(e, a);
    if (e.substring(n - 3, n) === t.caseSuffixAchAccented || e.substring(n - 3, n) === t.caseSuffixAta || e.substring(n - 3, n) === t.caseSuffixAty || e.substring(n - 3, n) === t.caseSuffixYch || e.substring(n - 3, n) === t.caseSuffixAma || e.substring(n - 3, n) === t.caseSuffixAmi || e.substring(n - 3, n) === t.caseSuffixOve || e.substring(n - 3, n) === t.caseSuffixOvi || e.substring(n - 3, n) === t.caseSuffixYmi)
      return e.slice(0, -3);
  }
  if (n > 4) {
    if (e.substring(n - 2, n) === t.caseSuffixEm)
      return e = e.slice(0, -1), Kt(e, a);
    if (e.substring(n - 2, n) === t.caseSuffixEs || e.substring(n - 2, n) === t.caseSuffixEmAccented || e.substring(n - 2, n) === t.caseSuffixIm)
      return e = e.slice(0, -2), Kt(e, a);
    if (e.substring(n - 2, n) === t.caseSuffixUm || e.substring(n - 2, n) === t.caseSuffixAt || e.substring(n - 2, n) === t.caseSuffixAm || e.substring(n - 2, n) === t.caseSuffixOs || e.substring(n - 2, n) === t.caseSuffixUs || e.substring(n - 2, n) === t.caseSuffixYm || e.substring(n - 2, n) === t.caseSuffixMi || e.substring(n - 2, n) === t.caseSuffixOu)
      return e.slice(0, -2);
  }
  if (n > 3) {
    if (e.substring(n - 1, n) === t.caseSuffixE || e.substring(n - 1, n) === t.caseSuffixI || e.substring(n - 1, n) === t.caseSuffixIAccented || e.substring(n - 1, n) === t.caseSuffixECaron)
      return Kt(e, a);
    if (e.substring(n - 1, n) === t.caseSuffixU || e.substring(n - 1, n) === t.caseSuffixY || e.substring(n - 1, n) === t.caseSuffixURing || e.substring(n - 1, n) === t.caseSuffixA || e.substring(n - 1, n) === t.caseSuffixO || e.substring(n - 1, n) === t.caseSuffixAAccented || e.substring(n - 1, n) === t.caseSuffixEAccented || e.substring(n - 1, n) === t.caseSuffixYAccented)
      return e.slice(0, -1);
  }
  return e;
}, XLa = function(e, a) {
  for (const t of a.externalStemmer.exceptionStemsWithFullForms)
    if (t[1].includes(e))
      return t[0];
  return e;
}, ZLa = function(e, a) {
  for (const t of a.externalStemmer.stemsThatBelongToOneWord.nouns)
    if (t.includes(e))
      return t[0];
  return e;
};
function JLa(e, a) {
  return e = e.toLowerCase(), e = XLa(e, a), e = QLa(e, a), e = YLa(e, a), e = KLa(e, a), e = VLa(e, a), e = GLa(e, a), e = HLa(e, a), e = ZLa(e, a), e;
}
Object.defineProperty(WE, "__esModule", {
  value: !0
});
WE.default = sMa;
var eMa = K, aMa = ee, tMa = nMa(UE);
function nMa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: rMa
} = aMa.languageProcessing;
function sMa(e) {
  const a = (0, eMa.get)(e.getData("morphology"), "cs", !1);
  return a ? (t) => (0, tMa.default)(t, a) : rMa;
}
Object.defineProperty(ME, "__esModule", {
  value: !0
});
var D4 = ME.default = void 0, iMa = ee, oMa = Zd(by), lMa = Zd(fp), dMa = ud, uMa = Zd(vr), cMa = Zd(wy), pMa = Zd(qE), gMa = Zd(WE);
function Zd(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: mMa
} = iMa.languageProcessing;
let fMa = class extends mMa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "cs",
      passiveConstructionType: "periphrastic",
      firstWordExceptions: oMa.default,
      stopWords: lMa.default,
      functionWords: dMa.all,
      transitionWords: uMa.default,
      twoPartTransitionWords: cMa.default
    }), Object.assign(this.helpers, {
      getClauses: pMa.default,
      getStemmer: gMa.default
    });
  }
};
D4 = ME.default = fMa;
var HE = {}, ky = {};
Object.defineProperty(ky, "__esModule", {
  value: !0
});
ky.default = void 0;
ky.default = [
  // Definite articles:
  "das",
  "dem",
  "den",
  "der",
  "des",
  "die",
  // Indefinite articles:
  "ein",
  "eine",
  "einem",
  "einen",
  "einer",
  "eines",
  // Numbers 1-10:
  "eins",
  "zwei",
  "drei",
  "vier",
  "fünf",
  "sechs",
  "sieben",
  "acht",
  "neun",
  "zehn",
  // Demonstrative pronouns:
  "denen",
  "deren",
  "derer",
  "dessen",
  "diese",
  "diesem",
  "diesen",
  "dieser",
  "dieses",
  "jene",
  "jenem",
  "jenen",
  "jener",
  "jenes",
  "welch",
  "welcher",
  "welches"
];
var Gt = {}, ar = {};
Object.defineProperty(ar, "__esModule", {
  value: !0
});
ar.participleLike = ar.otherAuxiliaries = ar.infinitiveAuxiliaries = ar.default = void 0;
const fk = ar.participleLike = ["bekommst", "bekommt", "bekamst", "bekommest", "bekommet", "bekämest", "bekämst", "bekämet", "bekämt", "gekriegt", "gehörst", "gehört", "gehörtest", "gehörtet", "gehörest", "gehöret", "erhältst", "erhält", "erhaltet", "erhielt", "erhieltest", "erhieltst", "erhieltet", "erhaltest"], hk = ar.otherAuxiliaries = ["werde", "wirst", "wird", "werden", "werdet", "wurde", "ward", "wurdest", "wardst", "wurden", "wurdet", "worden", "werdest", "würde", "würdest", "würden", "würdet", "bekomme", "bekommen", "bekam", "bekamen", "bekäme", "bekämen", "kriege", "kriegst", "kriegt", "kriegen", "kriegte", "kriegtest", "kriegten", "kriegtet", "kriegest", "krieget", "gehöre", "gehören", "gehörte", "gehörten", "erhalte", "erhalten", "erhielten", "erhielte"], yk = ar.infinitiveAuxiliaries = ["werden", "bekommen", "kriegen", "gehören", "erhalten"];
ar.default = {
  participleLike: fk,
  otherAuxiliaries: hk.concat(yk),
  // These auxiliaries are filtered from the beginning and end of word combinations in the prominent words.
  filteredAuxiliaries: fk.concat(hk),
  // These auxiliaries are not filtered from the beginning of word combinations in the prominent words.
  infinitiveAuxiliaries: yk,
  all: fk.concat(hk, yk)
};
var kr = {};
Object.defineProperty(kr, "__esModule", {
  value: !0
});
kr.singleWords = kr.multipleWords = kr.default = kr.allWords = void 0;
const hMa = kr.singleWords = ["aber", "abschließend", "abschliessend", "alldieweil", "allerdings", "also", "anderenteils", "andererseits", "andernteils", "anfaenglich", "anfänglich", "anfangs", "angenommen", "anschliessend", "anschließend", "aufgrund", "ausgenommen", "ausserdem", "außerdem", "beispielsweise", "bevor", "beziehungsweise", "bspw", "bzw", "d.h", "da", "dabei", "dadurch", "dafuer", "dafür", "dagegen", "daher", "dahingegen", "danach", "dann", "darauf", "darum", "dass", "davor", "dazu", "dementgegen", "dementsprechend", "demgegenüber", "demgegenueber", "demgemaess", "demgemäß", "demzufolge", "denn", "dennoch", "dergestalt", "derweil", "desto", "deshalb", "desungeachtet", "deswegen", "doch", "dort", "drittens", "ebenfalls", "ebenso", "endlich", "ehe", "einerseits", "einesteils", "entsprechend", "entweder", "erst", "erstens", "falls", "ferner", "folgerichtig", "folglich", "fürderhin", "fuerderhin", "genauso", "hierdurch", "hierzu", "hingegen", "immerhin", "indem", "indes", "indessen", "infolge", "infolgedessen", "insofern", "insoweit", "inzwischen", "jedenfalls", "jedoch", "kurzum", "m.a.w", "mitnichten", "mitunter", "möglicherweise", "moeglicherweise", "nachdem", "nebenher", "nichtsdestotrotz", "nichtsdestoweniger", "ob", "obenrein", "obgleich", "obschon", "obwohl", "obzwar", "ohnehin", "richtigerweise", "schliesslich", "schließlich", "seit", "seitdem", "sobald", "sodass", "so dass", "sofern", "sogar", "solang", "solange", "somit", "sondern", "sooft", "soviel", "soweit", "sowie", "sowohl", "statt", "stattdessen", "trotz", "trotzdem", "überdies", "übrigens", "ueberdies", "uebrigens", "ungeachtet", "vielmehr", "vorausgesetzt", "vorher", "waehrend", "während", "währenddessen", "waehrenddessen", "weder", "wegen", "weil", "weiter", "weiterhin", "wenn", "wenngleich", "wennschon", "wennzwar", "weshalb", "widrigenfalls", "wiewohl", "wobei", "wohingegen", "z.b", "zudem", "zuerst", "zufolge", "zuletzt", "zumal", "zuvor", "zwar", "zweitens"], yMa = kr.multipleWords = ["abgesehen von", "abgesehen davon", "als dass", "als ob", "als wenn", "anders ausgedrückt", "anders ausgedrueckt", "anders formuliert", "anders gefasst", "anders gefragt", "anders gesagt", "anders gesprochen", "anstatt dass", "auch wenn", "auf grund", "auf jeden fall", "aus diesem grund", "ausser dass", "außer dass", "ausser wenn", "außer wenn", "besser ausgedrückt", "besser ausgedrueckt", "besser formuliert", "besser gesagt", "besser gesprochen", "bloss dass", "bloß dass", "darüber hinaus", "das heisst", "das heißt", "des weiteren", "dessen ungeachtet", "ebenso wie", "genauso wie", "geschweige denn", "im fall", "im falle", "im folgenden", "im gegensatz dazu", "im gegenteil", "im grunde genommen", "in diesem sinne", "je nachdem", "kurz gesagt", "mit anderen worten", "ohne dass", "so dass", "umso mehr als", "umso weniger als", "umso mehr, als", "umso weniger, als", "unbeschadet dessen", "und zwar", "ungeachtet dessen", "unter dem strich", "zum beispiel", "zunächst einmal"], zMa = kr.allWords = hMa.concat(yMa);
kr.default = zMa;
Object.defineProperty(Gt, "__esModule", {
  value: !0
});
Gt.filteredAtEnding = Gt.filteredAtBeginningAndEnding = Gt.filteredAtBeginning = Gt.filteredAnywhere = Gt.default = Gt.all = void 0;
var GE = wMa(ar), N4 = kr, hp = bMa(Ba);
function bMa(e) {
  return e && e.__esModule ? e : { default: e };
}
function L4(e) {
  if (typeof WeakMap != "function") return null;
  var a = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
  return (L4 = function(n) {
    return n ? t : a;
  })(e);
}
function wMa(e, a) {
  if (e && e.__esModule) return e;
  if (e === null || typeof e != "object" && typeof e != "function") return { default: e };
  var t = L4(a);
  if (t && t.has(e)) return t.get(e);
  var n = { __proto__: null }, r = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var o in e) if (o !== "default" && {}.hasOwnProperty.call(e, o)) {
    var l = r ? Object.getOwnPropertyDescriptor(e, o) : null;
    l && (l.get || l.set) ? Object.defineProperty(n, o, l) : n[o] = e[o];
  }
  return n.default = e, t && t.set(e, n), n;
}
const M4 = GE.default.filteredAuxiliaries, q4 = ["das", "dem", "den", "der", "des", "die", "ein", "eine", "einem", "einen", "einer", "eines"], F4 = ["eins", "zwei", "drei", "vier", "fünf", "sechs", "sieben", "acht", "neun", "zehn", "elf", "zwölf", "zwoelf", "dreizehn", "vierzehn", "fünfzehn", "fuenfzehn", "sechzehn", "siebzehn", "achtzehn", "neunzehn", "zwanzig", "hundert", "einhundert", "zweihundert", "dreihundert", "vierhundert", "fünfhundert", "fuenfhundert", "sechshundert", "siebenhundert", "achthundert", "neunhundert", "tausend", "million", "milliarde", "billion", "billiarde"], B4 = ["erste", "erster", "ersten", "erstem", "erstes", "zweite", "zweites", "zweiter", "zweitem", "zweiten", "dritte", "dritter", "drittes", "dritten", "drittem", "vierter", "vierten", "viertem", "viertes", "vierte", "fünfte", "fünfter", "fünftes", "fünften", "fünftem", "fuenfte", "fuenfter", "fuenftem", "fuenften", "fuenftes", "sechste", "sechster", "sechstes", "sechsten", "sechstem", "siebte", "siebter", "siebten", "siebtem", "siebtes", "achte", "achter", "achten", "achtem", "achtes", "neunte", "neunter", "neuntes", "neunten", "neuntem", "zehnte", "zehnter", "zehnten", "zehntem", "zehntes", "elfte", "elfter", "elftes", "elften", "elftem", "zwölfte", "zwölfter", "zwölften", "zwölftem", "zwölftes", "zwoelfte", "zwoelfter", "zwoelften", "zwoelftem", "zwoelftes", "dreizehnte", "dreizehnter", "dreizehntes", "dreizehnten", "dreizehntem", "vierzehnte", "vierzehnter", "vierzehntes", "vierzehnten", "vierzehntem", "fünfzehnte", "fünfzehnten", "fünfzehntem", "fünfzehnter", "fünfzehntes", "fuenfzehnte", "fuenfzehnten", "fuenfzehntem", "fuenfzehnter", "fuenfzehntes", "sechzehnte", "sechzehnter", "sechzehnten", "sechzehntes", "sechzehntem", "siebzehnte", "siebzehnter", "siebzehntes", "siebzehntem", "siebzehnten", "achtzehnter", "achtzehnten", "achtzehntem", "achtzehntes", "achtzehnte", "nehnzehnte", "nehnzehnter", "nehnzehntem", "nehnzehnten", "nehnzehntes", "zwanzigste", "zwanzigster", "zwanzigstem", "zwanzigsten", "zwanzigstes"], W4 = ["ich", "du", "er", "sie", "es", "wir", "ihr"], U4 = ["mich", "dich", "ihn", "uns", "euch"], vMa = ["mir", "dir", "ihm", "ihnen"], H4 = ["denen", "deren", "derer", "dessen", "diese", "diesem", "diesen", "dieser", "dieses", "jene", "jenem", "jenen", "jener", "jenes", "welch", "welcher", "welches", "derjenige", "desjenigen", "demjenigen", "denjenigen", "diejenige", "derjenigen", "dasjenige", "diejenigen"], G4 = ["mein", "meine", "meinem", "meiner", "meines", "meinen", "dein", "deine", "deinem", "deiner", "deines", "deinen", "sein", "seine", "seinem", "seiner", "seines", "ihre", "ihrem", "ihren", "ihrer", "ihres", "unser", "unsere", "unserem", "unseren", "unserer", "unseres", "euer", "eure", "eurem", "euren", "eurer", "eures", "einanders"], V4 = ["manche", "manch", "viele", "viel", "vieler", "vielen", "vielem", "all", "alle", "aller", "alles", "allen", "allem", "allerlei", "solcherlei", "einige", "etliche", "wenige", "weniger", "wenigen", "wenigem", "weniges", "wenig", "wenigerer", "wenigeren", "wenigerem", "wenigere", "wenigeres", "wenig", "bisschen", "paar", "kein", "keines", "keinem", "keinen", "keine", "mehr", "genug", "mehrere", "mehrerer", "mehreren", "mehrerem", "mehreres", "verschiedene", "verschiedener", "verschiedenen", "verschiedenem", "verschiedenes", "verschiedne", "verschiedner", "verschiednen", "verschiednem", "verschiednes", "art", "arten", "sorte", "sorten"], K4 = ["sich"], Y4 = ["einander"], Q4 = ["andere", "anderer", "anderem", "anderen", "anderes", "andren", "andern", "andrem", "anderm", "andre", "andrer", "andres", "beide", "beides", "beidem", "beider", "beiden", "etwas", "irgendetwas", "irgendein", "irgendeinen", "irgendeinem", "irgendeines", "irgendeine", "irgendeiner", "irgendwas", "irgendwessen", "irgendwer", "irgendwen", "irgendwem", "irgendwelche", "irgendwelcher", "irgendwelchem", "irgendwelchen", "irgendwelches", "irgendjemand", "irgendjemanden", "irgendjemandem", "irgendjemandes", "irgendwie", "wer", "wen", "wem", "wessen", "was", "welchen", "welchem", "welche", "jeder", "jedes", "jedem", "jeden", "jede", "jedweder", "jedweden", "jedwedem", "jedwedes", "jedwede", "jeglicher", "jeglichen", "jeglichem", "jegliches", "jegliche", "jedermann", "jedermanns", "jemand", "jemanden", "jemandem", "jemands", "jemandes", "man", "meinesgleichen", "sämtlich", "saemtlich", "sämtlicher", "saemtlicher", "sämtlichen", "saemtlichen", "sämtlichem", "saemtlichem", "sämtliches", "saemtliches", "sämtliche", "saemtliche", "solche", "solcher", "solchen", "solchem", "solches", "niemand", "niemanden", "niemandem", "niemandes", "niemands", "nichts", "zweiter"], X4 = ["warum", "wie", "wo", "woher", "wohin", "wann"], Z4 = ["dahinter", "damit", "daneben", "daran", "daraus", "darin", "darunter", "darüber", "darueber", "davon", "dazwischen", "hieran", "hierauf", "hieraus", "hierbei", "hierfuer", "hierfür", "hiergegen", "hierhinter", "hierin", "hiermit", "hiernach", "hierum", "hierunter", "hierueber", "hierüber", "hiervor", "hierzwischen", "hierneben", "hiervon", "wodurch", "wofür", "wofuer", "wogegen", "wohinter", "womit", "wonach", "woneben", "woran", "worauf", "woraus", "worin", "worum", "worunter", "worüber", "worueber", "wovon", "wovor", "wozu", "wozwischen"], J4 = ["hier", "dorthin", "hierher", "dorther"], e6 = ["allenfalls", "keinesfalls", "anderenfalls", "andernfalls", "andrenfalls", "äußerstenfalls", "bejahendenfalls", "bestenfalls", "eintretendenfalls", "entgegengesetztenfalls", "erforderlichenfalls", "gegebenenfalls", "geringstenfalls", "gleichfalls", "günstigenfalls", "günstigstenfalls", "höchstenfalls", "möglichenfalls", "notfalls", "nötigenfalls", "notwendigenfalls", "schlimmstenfalls", "vorkommendenfalls", "zutreffendenfalls", "keineswegs", "durchwegs", "geradenwegs", "geradeswegs", "geradewegs", "gradenwegs", "halbwegs", "mittwegs", "unterwegs"], a6 = ["habe", "hast", "hat", "habt", "habest", "habet", "hatte", "hattest", "hatten", "hätte", "haette", "hättest", "haettest", "hätten", "haetten", "haettet", "hättet", "hab", "bin", "bist", "ist", "sind", "sei", "seiest", "seien", "seiet", "war", "warst", "waren", "wart", "wäre", "waere", "wärest", "waerest", "wärst", "waerst", "wären", "waeren", "wäret", "waeret", "wärt", "waert", "seid", "darf", "darfst", "dürft", "duerft", "dürfe", "duerfe", "dürfest", "duerfest", "dürfet", "duerfet", "durfte", "durftest", "durften", "durftet", "dürfte", "duerfte", "dürftest", "duerftest", "dürften", "duerften", "dürftet", "duerftet", "kann", "kannst", "könnt", "koennt", "könne", "koenne", "könnest", "koennest", "könnet", "koennet", "konnte", "konntest", "konnten", "konntet", "könnte", "koennte", "könntest", "koenntest", "könnten", "koennten", "könntet", "koenntet", "mag", "magst", "mögt", "moegt", "möge", "moege", "mögest", "moegest", "möget", "moeget", "mochte", "mochtest", "mochten", "mochtet", "möchte", "moechte", "möchtest", "moechtest", "möchten", "moechten", "möchtet", "moechtet", "muss", "muß", "musst", "mußt", "müsst", "muesst", "müßt", "mueßt", "müsse", "muesse", "müssest", "muessest", "müsset", "muesset", "musste", "mußte", "musstest", "mußtest", "mussten", "mußten", "musstet", "mußtet", "müsste", "muesste", "müßte", "mueßte", "müsstest", "muesstest", "müßtest", "mueßtest", "müssten", "muessten", "müßten", "mueßten", "müsstet", "muesstet", "müßtet", "mueßtet", "soll", "sollst", "sollt", "solle", "sollest", "sollet", "sollte", "solltest", "sollten", "solltet", "will", "willst", "wollt", "wolle", "wollest", "wollet", "wollte", "wolltest", "wollten", "wolltet", "lasse", "lässt", "laesst", "läßt", "laeßt", "lasst", "laßt", "lassest", "lasset", "ließ", "ließest", "ließt", "ließen", "ließe", "ließet", "liess", "liessest", "liesst", "liessen", "liesse", "liesset"], t6 = ["haben", "dürfen", "duerfen", "können", "koennen", "mögen", "moegen", "müssen", "muessen", "sollen", "wollen", "lassen"], n6 = ["bleibe", "bleibst", "bleibt", "bleibest", "bleibet", "blieb", "bliebst", "bliebt", "blieben", "bliebe", "bliebest", "bliebet", "heiße", "heißt", "heißest", "heißet", "heisse", "heisst", "heissest", "heisset", "hieß", "hießest", "hießt", "hießen", "hieße", "hießet", "hiess", "hiessest", "hiesst", "hiessen", "hiesse", "hiesset", "giltst", "gilt", "geltet", "gelte", "geltest", "galt", "galtest", "galtst", "galten", "galtet", "gälte", "gaelte", "gölte", "goelte", "gältest", "gaeltest", "göltest", "goeltest", "gälten", "gaelten", "gölten", "goelten", "gältet", "gaeltet", "göltet", "goeltet", "aussehe", "aussiehst", "aussieht", "ausseht", "aussehest", "aussehet", "aussah", "aussahst", "aussahen", "aussaht", "aussähe", "aussaehe", "aussähest", "aussaehest", "aussähst", "aussaehst", "aussähet", "aussaehet", "aussäht", "aussaeht", "aussähen", "aussaehen", "scheine", "scheinst", "scheint", "scheinest", "scheinet", "schien", "schienst", "schienen", "schient", "schiene", "schienest", "schienet", "erscheine", "erscheinst", "erscheint", "erscheinest", "erscheinet", "erschien", "erschienst", "erschienen", "erschient", "erschiene", "erschienest", "erschienet"], r6 = ["bleiben", "heißen", "heissen", "gelten", "aussehen", "scheinen", "erscheinen"], s6 = ["a", "à", "ab", "abseits", "abzüglich", "abzueglich", "als", "am", "an", "angelegentlich", "angesichts", "anhand", "anlässlich", "anlaesslich", "ans", "anstatt", "anstelle", "auf", "aufs", "aufseiten", "aus", "ausgangs", "ausschließlich", "ausschliesslich", "außerhalb", "ausserhalb", "ausweislich", "bar", "behufs", "bei", "beidseits", "beiderseits", "beim", "betreffs", "bezüglich", "bezueglich", "binnen", "bis", "contra", "dank", "diesseits", "durch", "einbezüglich", "einbezueglich", "eingangs", "eingedenk", "einschließlich", "einschliesslich", "entgegen", "entlang", "exklusive", "fern", "fernab", "fuer", "für", "fuers", "fürs", "gegen", "gegenüber", "gegenueber", "gelegentlich", "gemäß", "gemaeß", "gen", "getreu", "gleich", "halber", "hinsichtlich", "hinter", "hinterm", "hinters", "im", "in", "inklusive", "inmitten", "innerhalb", "innert", "ins", "je", "jenseits", "kontra", "kraft", "längs", "laengs", "längsseits", "laengsseits", "laut", "links", "mangels", "minus", "mit", "mithilfe", "mitsamt", "mittels", "nach", "nächst", "naechst", "nah", "namens", "neben", "nebst", "nördlich", "noerdlich", "nordöstlich", "nordoestlich", "nordwestlich", "oberhalb", "ohne", "östlich", "oestlich", "per", "plus", "pro", "quer", "rechts", "rücksichtlich", "ruecksichtlich", "samt", "seitens", "seitlich", "seitwärts", "seitwaerts", "südlich", "suedlich", "südöstlich", "suedoestlich", "südwestlich", "suedwestlich", "über", "ueber", "überm", "ueberm", "übern", "uebern", "übers", "uebers", "um", "ums", "unbeschadet", "unerachtet", "unfern", "unter", "unterhalb", "unterm", "untern", "unters", "unweit", "vermittels", "vermittelst", "vermöge", "vermoege", "via", "vom", "von", "vonseiten", "vor", "vorbehaltlich", "wegen", "wider", "zeit", "zu", "zugunsten", "zulieb", "zuliebe", "zum", "zur", "zusätzlich", "zusaetzlich", "zuungunsten", "zuwider", "zuzüglich", "zuzueglich", "zwecks", "zwischen"], i6 = ["und", "oder", "umso"], o6 = ["auch", "noch", "nur"], l6 = ["nun", "so", "gleichwohl"], d6 = ["sage", "sagst", "sagt", "sagest", "saget", "sagte", "sagtest", "sagten", "sagtet", "gesagt", "fragst", "fragt", "fragest", "fraget", "fragte", "fragtest", "fragten", "fragtet", "gefragt", "erkläre", "erklärst", "erklärt", "erklaere", "erklaerst", "erklaert", "erklärte", "erklärtest", "erklärtet", "erklärten", "erklaerte", "erklaertest", "erklaertet", "erklaerten", "denke", "denkst", "denkt", "denkest", "denket", "dachte", "dachtest", "dachten", "dachtet", "dächte", "dächtest", "dächten", "dächtet", "daechte", "daechtest", "daechten", "daechtet", "finde", "findest", "findet", "gefunden"], u6 = ["sagen", "erklären", "erklaeren", "denken", "finden"], kMa = ["etwa", "absolut", "unbedingt", "wieder", "definitiv", "bestimmt", "immer", "äußerst", "aeußerst", "höchst", "hoechst", "sofort", "augenblicklich", "umgehend", "direkt", "unmittelbar", "nämlich", "naemlich", "natürlich", "natuerlich", "besonders", "hauptsächlich", "hauptsaechlich", "jetzt", "eben", "heutzutage", "eindeutig", "wirklich", "echt", "wahrhaft", "ehrlich", "aufrichtig", "wahrheitsgemäß", "letztlich", "einmalig", "unübertrefflich", "normalerweise", "gewöhnlich", "gewoehnlich", "üblicherweise", "ueblicherweise", "sonst", "fast", "nahezu", "beinahe", "knapp", "annähernd", "annaehernd", "geradezu", "bald", "vielleicht", "wahrscheinlich", "wohl", "voraussichtlich", "zugegeben", "ursprünglich", "insgesamt", "tatsächlich", "eigentlich", "wahrhaftig", "bereits", "schon", "oft", "häufig", "haeufig", "regelmäßig", "regelmaeßig", "gleichmäßig", "gleichmaeßig", "einfach", "lediglich", "bloß", "bloss", "halt", "wahlweise", "eventuell", "manchmal", "teilweise", "nie", "niemals", "nimmer", "jemals", "allzeit", "irgendeinmal", "anders", "momentan", "gegenwärtig", "gegenwaertig", "nebenbei", "anderswo", "woanders", "anderswohin", "anderorts", "insbesondere", "namentlich", "sonderlich", "ausdrücklich", "ausdruecklich", "vollends", "kürzlich", "kuerzlich", "jüngst", "juengst", "unlängst", "unlaengst", "neuerdings", "neulich", "letztens", "neuerlich", "verhältnismäßig", "verhaeltnismaessig", "deutlich", "klar", "offenbar", "anscheinend", "genau", "u.a", "damals", "zumindest"], c6 = ["sehr", "recht", "überaus", "ueberaus", "ungemein", "weitaus", "einigermaßen", "einigermassen", "ganz", "schwer", "tierisch", "ungleich", "ziemlich", "übelst", "uebelst", "stark", "volkommen", "durchaus", "gar"], p6 = ["geschienen", "meinst", "meint", "meinest", "meinet", "meinte", "meintest", "meinten", "meintet", "gemeint", "stehe", "stehst", "steht", "gehe", "gehst", "geht", "gegangen", "ging", "gingst", "gingen", "gingt"], g6 = ["tun", "machen", "stehen", "wissen", "gehen", "kommen"], m6 = ["einerlei", "egal", "neu", "neue", "neuer", "neuen", "neues", "neuem", "neuerer", "neueren", "neuerem", "neueres", "neuere", "neuester", "neuster", "neuesten", "neusten", "neuestem", "neustem", "neuestes", "neustes", "neueste", "neuste", "alt", "alter", "alten", "altem", "altes", "alte", "ältere", "älteren", "älterer", "älteres", "ältester", "ältesten", "ältestem", "ältestes", "älteste", "aeltere", "aelteren", "aelterer", "aelteres", "aeltester", "aeltesten", "aeltestem", "aeltestes", "aelteste", "gut", "guter", "gutem", "guten", "gutes", "gute", "besser", "besserer", "besseren", "besserem", "besseres", "bester", "besten", "bestem", "bestes", "beste", "größte", "grösste", "groß", "großer", "großen", "großem", "großes", "große", "großerer", "großerem", "großeren", "großeres", "großere", "großter", "großten", "großtem", "großtes", "großte", "gross", "grosser", "grossen", "grossem", "grosses", "grosse", "grosserer", "grosserem", "grosseren", "grosseres", "grossere", "grosster", "grossten", "grosstem", "grosstes", "grosste", "einfacher", "einfachen", "einfachem", "einfaches", "einfache", "einfacherer", "einfacheren", "einfacherem", "einfacheres", "einfachere", "einfachste", "einfachster", "einfachsten", "einfachstes", "einfachstem", "schnell", "schneller", "schnellen", "schnellem", "schnelles", "schnelle", "schnellere", "schnellerer", "schnelleren", "schnelleres", "schnellerem", "schnellster", "schnellste", "schnellsten", "schnellstem", "schnellstes", "weit", "weiten", "weitem", "weites", "weiterer", "weiteren", "weiterem", "weiteres", "weitere", "weitester", "weitesten", "weitestem", "weitestes", "weiteste", "eigen", "eigener", "eigenen", "eigenes", "eigenem", "eigene", "eigenerer", "eignerer", "eigeneren", "eigneren", "eigenerem", "eignerem", "eigeneres", "eigneres", "eigenere", "eignere", "eigenster", "eigensten", "eigenstem", "eigenstes", "eigenste", "wenigster", "wenigsten", "wenigstem", "wenigstes", "wenigste", "minderer", "minderen", "minderem", "mindere", "minderes", "mindester", "mindesten", "mindestes", "mindestem", "mindeste", "lang", "langer", "langen", "langem", "langes", "längerer", "längeren", "längerem", "längeres", "längere", "längster", "längsten", "längstem", "längstes", "längste", "laengerer", "laengeren", "laengerem", "laengeres", "laengere", "laengster", "laengsten", "laengstem", "laengstes", "laengste", "tief", "tiefer", "tiefen", "tiefem", "tiefes", "tiefe", "tieferer", "tieferen", "tieferem", "tieferes", "tiefere", "tiefster", "tiefsten", "tiefstem", "tiefste", "tiefstes", "hoch", "hoher", "hohen", "hohem", "hohes", "hohe", "höher", "höherer", "höhere", "höheren", "höherem", "höheres", "hoeherer", "hoehere", "hoeheren", "hoeherem", "hoeheres", "höchster", "höchste", "höchsten", "höchstem", "höchstes", "hoechster", "hoechste", "hoechsten", "hoechstem", "hoechstes", "regulär", "regulärer", "regulären", "regulärem", "reguläres", "reguläre", "regulaer", "regulaerer", "regulaeren", "regulaerem", "regulaeres", "regulaere", "regulärerer", "reguläreren", "regulärerem", "reguläreres", "regulärere", "regulaererer", "regulaereren", "regulaererem", "regulaereres", "regulaerere", "regulärster", "regulärsten", "regulärstem", "regulärstes", "regulärste", "regulaerster", "regulaersten", "regulaerstem", "regulaerstes", "regulaerste", "normal", "normaler", "normalen", "normalem", "normales", "normale", "normalerer", "normaleren", "normalerem", "normaleres", "normalere", "normalster", "normalsten", "normalstem", "normalstes", "normalste", "klein", "kleiner", "kleinen", "kleinem", "kleines", "kleine", "kleinerer", "kleineres", "kleineren", "kleinerem", "kleinere", "kleinster", "kleinsten", "kleinstem", "kleinstes", "kleinste", "winzig", "winziger", "winzigen", "winzigem", "winziges", "winzigerer", "winzigeren", "winzigerem", "winzigeres", "winzigere", "winzigster", "winzigsten", "winzigstem", "winzigste", "winzigstes", "sogenannt", "sogenannter", "sogenannten", "sogenanntem", "sogenanntes", "sogenannte", "kurz", "kurzer", "kurzen", "kurzem", "kurzes", "kurze", "kürzerer", "kürzeres", "kürzeren", "kürzerem", "kürzere", "kuerzerer", "kuerzeres", "kuerzeren", "kuerzerem", "kuerzere", "kürzester", "kürzesten", "kürzestem", "kürzestes", "kürzeste", "kuerzester", "kuerzesten", "kuerzestem", "kuerzestes", "kuerzeste", "wirklicher", "wirklichen", "wirklichem", "wirkliches", "wirkliche", "wirklicherer", "wirklicheren", "wirklicherem", "wirklicheres", "wirklichere", "wirklichster", "wirklichsten", "wirklichstes", "wirklichstem", "wirklichste", "eigentlicher", "eigentlichen", "eigentlichem", "eigentliches", "eigentliche", "schön", "schöner", "schönen", "schönem", "schönes", "schöne", "schönerer", "schöneren", "schönerem", "schöneres", "schönere", "schönster", "schönsten", "schönstem", "schönstes", "schönste", "real", "realer", "realen", "realem", "reales", "realerer", "realeren", "realerem", "realeres", "realere", "realster", "realsten", "realstem", "realstes", "realste", "derselbe", "denselben", "demselben", "desselben", "dasselbe", "dieselbe", "derselben", "dieselben", "gleicher", "gleichen", "gleichem", "gleiches", "gleiche", "gleicherer", "gleicheren", "gleicherem", "gleicheres", "gleichere", "gleichster", "gleichsten", "gleichstem", "gleichstes", "gleichste", "bestimmter", "bestimmten", "bestimmtem", "bestimmtes", "bestimmte", "bestimmtere", "bestimmterer", "bestimmterem", "bestimmteren", "bestimmteres", "bestimmtester", "bestimmtesten", "bestimmtestem", "bestimmtestes", "bestimmteste", "überwiegend", "ueberwiegend", "zumeist", "meistens", "meisten", "meiste", "meistem", "meistes", "großenteils", "grossenteils", "meistenteils", "weithin", "ständig", "staendig", "laufend", "dauernd", "andauernd", "immerfort", "irgendwo", "irgendwann", "ähnlicher", "ähnlichen", "ähnlichem", "ähnliches", "ähnliche", "ähnlich", "ähnlicherer", "ähnlicheren", "ähnlicherem", "ähnlicheres", "ähnlichere", "ähnlichster", "ähnlichsten", "ähnlichstem", "ähnlichstes", "ähnlichste", "schlecht", "schlechter", "schlechten", "schlechtem", "schlechtes", "schlechte", "schlechterer", "schlechteren", "schlechterem", "schlechteres", "schlechtere", "schlechtester", "schlechtesten", "schlechtestem", "schlechtestes", "schlechteste", "schlimm", "schlimmer", "schlimmen", "schlimmem", "schlimmes", "schlimme", "schlimmerer", "schlimmeren", "schlimmerem", "schlimmeres", "schlimmere", "schlimmster", "schlimmsten", "schlimmstem", "schlimmstes", "schlimmste", "toll", "toller", "tollen", "tollem", "tolles", "tolle", "tollerer", "tolleren", "tollerem", "tollere", "tolleres", "tollster", "tollsten", "tollstem", "tollstes", "tollste", "super", "mögliche", "möglicher", "mögliches", "möglichen", "möglichem", "möglich", "moegliche", "moeglicher", "moegliches", "moeglichen", "moeglichem", "moeglich", "nächsten", "nächster", "nächstem", "nächste", "nächstes", "naechsten", "voll", "voller", "vollen", "vollem", "volle", "volles", "vollerer", "volleren", "vollerem", "vollere", "volleres", "vollster", "vollsten", "vollstem", "vollste", "vollstes", "außen", "ganzer", "ganzen", "ganzem", "ganze", "ganzes", "gern", "gerne", "oben", "unten", "zurück", "zurueck", "nicht", "eher", "ehere", "eherem", "eheren", "eheres", "eheste", "ehestem", "ehensten", "ehesten"], f6 = ["ach", "aha", "oh", "au", "bäh", "baeh", "igitt", "huch", "hurra", "hoppla", "nanu", "oha", "olala", "pfui", "tja", "uups", "wow", "grr", "äh", "aeh", "ähm", "aehm", "öhm", "oehm", "hm", "mei", "mhm", "okay", "richtig", "eijeijeijei"], h6 = ["g", "el", "tl", "wg", "be", "bd", "cl", "dl", "dag", "do", "gl", "gr", "kg", "kl", "cb", "ccm", "l", "ms", "mg", "ml", "mi", "pk", "pr", "pp", "sc", "sp", "st", "sk", "ta", "tr", "cm", "mass"], y6 = ["sekunde", "sekunden", "minute", "minuten", "stunde", "stunden", "uhr", "tag", "tages", "tags", "tage", "tagen", "woche", "wochen", "monat", "monate", "monates", "monats", "monaten", "jahr", "jahres", "jahrs", "jahre", "jahren", "morgens", "mittags", "abends", "nachts", "heute", "gestern", "morgen", "vorgestern", "übermorgen", "uebermorgen"], z6 = ["ding", "dinge", "dinges", "dinger", "dingern", "dingen", "sache", "sachen", "weise", "weisen", "wahrscheinlichkeit", "zeug", "zeuge", "zeuges", "zeugen", "mal", "einmal", "teil", "teile", "teiles", "teilen", "prozent", "prozents", "prozentes", "prozente", "prozenten", "beispiel", "beispiele", "beispieles", "beispiels", "beispielen", "aspekt", "aspekte", "aspektes", "aspekts", "aspekten", "idee", "ideen", "ahnung", "ahnungen", "thema", "themas", "themata", "themen", "fall", "falle", "falles", "fälle", "fällen", "faelle", "faellen", "mensch", "menschen", "leute"], b6 = ["nix", "nixe", "nixes", "nixen", "usw.", "amen", "ja", "nein", "euro"], _Ma = ["fr", "hr", "dr", "prof"], EMa = ["jr", "jun", "sen", "sr"], AMa = Gt.filteredAtBeginning = (0, hp.default)([].concat(t6, GE.infinitiveAuxiliaries, g6, r6, u6)), TMa = Gt.filteredAtEnding = (0, hp.default)([].concat(B4, m6)), $Ma = Gt.filteredAtBeginningAndEnding = (0, hp.default)([].concat(q4, s6, i6, H4, c6, V4)), jMa = Gt.filteredAnywhere = (0, hp.default)([].concat(N4.singleWords, e6, W4, U4, vMa, K4, f6, F4, n6, d6, a6, M4, p6, Q4, o6, l6, X4, J4, b6, Z4, h6, y6, z6, Y4, G4)), xMa = Gt.all = (0, hp.default)([].concat(q4, F4, B4, H4, G4, K4, Y4, W4, U4, V4, Q4, X4, Z4, J4, e6, M4, GE.infinitiveAuxiliaries, a6, t6, n6, r6, s6, i6, o6, l6, d6, u6, N4.singleWords, kMa, c6, p6, g6, f6, m6, h6, z6, b6, y6, _Ma, EMa));
Gt.default = {
  filteredAtBeginning: AMa,
  filteredAtEnding: TMa,
  filteredAtBeginningAndEnding: $Ma,
  filteredAnywhere: jMa,
  all: xMa
};
var yp = {};
Object.defineProperty(yp, "__esModule", {
  value: !0
});
yp.default = void 0;
yp.default = [":", "aber", "als", "bevor", "bis", "da", "damit", "daß", "dass", "denn", "doch", "ehe", "falls", "gleichwohl", "indem", "indes", "indessen", "insofern", "insoweit", "nachdem", "nun", "ob", "obgleich", "obschon", "obwohl", "obzwar", "oder", "seitdem", "sobald", "sodass", "sofern", "solange", "sondern", "sooft", "soviel", "soweit", "sowie", "trotz", "und", "ungeachtet", "waehrend", "während", "weil", "welche", "welchem", "welchen", "welcher", "welches", "wem", "wen", "wenn", "wenngleich", "wennschon", "wer", "wes", "wessen", "wie", "wiewohl", "wohingegen", "zumal"];
var _y = {};
Object.defineProperty(_y, "__esModule", {
  value: !0
});
_y.default = void 0;
_y.default = [["anstatt", "dass"], ["bald", "bald"], ["dadurch", "dass"], ["dessen ungeachtet", "dass"], ["entweder", "oder"], ["einerseits", "andererseits"], ["erst", "wenn"], ["je", "desto"], ["je", "umso"], ["umso", "umso"], ["mal", "mal"], ["nicht nur", "sondern auch"], ["ob", "oder"], ["ohne", "dass"], ["so", "dass"], ["sowohl", "als auch"], ["sowohl", "wie auch"], ["teils", "teils"], ["unbeschadet dessen", "dass"], ["weder", "noch"], ["wenn", "auch"], ["wenn", "schon"], ["nicht weil", "sondern"]];
const SMa = "aeiouyäöüáéâàèîêâûôœ", OMa = {
  vowels: [
    {
      fragments: [
        "ouil",
        "deaux",
        "deau$",
        "oard",
        "äthiop",
        "euil",
        "veau",
        "eau$",
        "ueue",
        "lienisch",
        "ance$",
        "ence$",
        "time$",
        "once$",
        "ziat",
        "guette",
        "ête",
        "ôte$",
        "[hp]omme$",
        "[qdscn]ue$",
        "aire$",
        "ture$",
        "êpe$",
        "[^q]ui$",
        "tiche$",
        "vice$",
        "oile$",
        "zial",
        "cruis",
        "leas",
        "coa[ct]",
        "[^i]deal",
        "[fw]eat",
        "[lsx]ed$"
      ],
      countModifier: -1
    },
    {
      fragments: [
        "aau",
        "a[äöüo]",
        "äue",
        "äeu",
        "aei",
        "aue",
        "aeu",
        "ael",
        "ai[aeo]",
        "saik",
        "aismus",
        "ä[aeoi]",
        "auä",
        "éa",
        "e[äaoö]",
        "ei[eo]",
        "ee[aeiou]",
        "eu[aäe]",
        "eum$",
        "eü",
        "o[aäöü]",
        "poet",
        "oo[eo]",
        "oie",
        "oei[^l]",
        "oeu[^f]",
        "öa",
        "[fgrz]ieu",
        "mieun",
        "tieur",
        "ieum",
        "i[aiuü]",
        "[^l]iä",
        "[^s]chien",
        "io[bcdfhjkmpqtuvwx]",
        "[bdhmprv]ion",
        "[lr]ior",
        "[^g]io[gs]",
        "[dr]ioz",
        "elioz",
        "zioni",
        "bio[lnorz]",
        "iö[^s]",
        "ie[ei]",
        "rier$",
        "öi[eg]",
        "[^r]öisch",
        "[^gqv]u[aeéioöuü]",
        "quie$",
        "quie[^s]",
        "uäu",
        "^us-",
        "^it-",
        "üe",
        "naiv",
        "aisch$",
        "aische$",
        "aische[nrs]$",
        "[lst]ien",
        "dien$",
        "gois",
        "[^g]rient",
        "[aeiou]y[aeiou]",
        "byi",
        "yä",
        "[a-z]y[ao]",
        "yau",
        "koor",
        "scient",
        "eriel",
        "[dg]oing"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "eauü",
        "ioi",
        "ioo",
        "ioa",
        "iii",
        "oai",
        "eueu"
      ],
      countModifier: 1
    }
  ],
  words: {
    full: [
      {
        word: "beach",
        syllables: 1
      },
      {
        word: "beat",
        syllables: 1
      },
      {
        word: "beau",
        syllables: 1
      },
      {
        word: "beaune",
        syllables: 1
      },
      {
        word: "belle",
        syllables: 1
      },
      {
        word: "bouche",
        syllables: 1
      },
      {
        word: "brake",
        syllables: 1
      },
      {
        word: "cache",
        syllables: 1
      },
      {
        word: "chaiselongue",
        syllables: 2
      },
      {
        word: "choke",
        syllables: 1
      },
      {
        word: "cordiale",
        syllables: 3
      },
      {
        word: "core",
        syllables: 1
      },
      {
        word: "dope",
        syllables: 1
      },
      {
        word: "eat",
        syllables: 1
      },
      {
        word: "eye",
        syllables: 1
      },
      {
        word: "fake",
        syllables: 1
      },
      {
        word: "fame",
        syllables: 1
      },
      {
        word: "fatigue",
        syllables: 2
      },
      {
        word: "femme",
        syllables: 1
      },
      {
        word: "force",
        syllables: 1
      },
      {
        word: "game",
        syllables: 1
      },
      {
        word: "games",
        syllables: 1
      },
      {
        word: "gate",
        syllables: 1
      },
      {
        word: "grande",
        syllables: 1
      },
      {
        word: "ice",
        syllables: 1
      },
      {
        word: "ion",
        syllables: 2
      },
      {
        word: "joke",
        syllables: 1
      },
      {
        word: "jupe",
        syllables: 1
      },
      {
        word: "maisch",
        syllables: 1
      },
      {
        word: "maische",
        syllables: 2
      },
      {
        word: "move",
        syllables: 1
      },
      {
        word: "native",
        syllables: 2
      },
      {
        word: "nice",
        syllables: 1
      },
      {
        word: "one",
        syllables: 1
      },
      {
        word: "pipe",
        syllables: 1
      },
      {
        word: "prime",
        syllables: 1
      },
      {
        word: "rate",
        syllables: 1
      },
      {
        word: "rhythm",
        syllables: 2
      },
      {
        word: "ride",
        syllables: 1
      },
      {
        word: "rides",
        syllables: 1
      },
      {
        word: "rien",
        syllables: 2
      },
      {
        word: "save",
        syllables: 1
      },
      {
        word: "science",
        syllables: 2
      },
      {
        word: "siècle",
        syllables: 1
      },
      {
        word: "site",
        syllables: 1
      },
      {
        word: "suite",
        syllables: 1
      },
      {
        word: "take",
        syllables: 1
      },
      {
        word: "taupe",
        syllables: 1
      },
      {
        word: "universe",
        syllables: 3
      },
      {
        word: "vogue",
        syllables: 1
      },
      {
        word: "wave",
        syllables: 1
      },
      {
        word: "zion",
        syllables: 2
      }
    ],
    fragments: {
      global: [
        {
          word: "abreaktion",
          syllables: 4
        },
        {
          word: "adware",
          syllables: 2
        },
        {
          word: "affaire",
          syllables: 3
        },
        {
          word: "aiguière",
          syllables: 2
        },
        {
          word: "anisette",
          syllables: 3
        },
        {
          word: "appeal",
          syllables: 2
        },
        {
          word: "backstage",
          syllables: 2
        },
        {
          word: "bankrate",
          syllables: 2
        },
        {
          word: "baseball",
          syllables: 2
        },
        {
          word: "basejump",
          syllables: 2
        },
        {
          word: "beachcomber",
          syllables: 3
        },
        {
          word: "beachvolleyball",
          syllables: 4
        },
        {
          word: "beagle",
          syllables: 2
        },
        {
          word: "beamer",
          syllables: 2
        },
        {
          word: "beamer",
          syllables: 2
        },
        {
          word: "béarnaise",
          syllables: 3
        },
        {
          word: "beaufort",
          syllables: 2
        },
        {
          word: "beaujolais",
          syllables: 3
        },
        {
          word: "beauté",
          syllables: 2
        },
        {
          word: "beauty",
          syllables: 2
        },
        {
          word: "belgier",
          syllables: 3
        },
        {
          word: "bestien",
          syllables: 2
        },
        {
          word: "biskuit",
          syllables: 2
        },
        {
          word: "bleach",
          syllables: 1
        },
        {
          word: "blue",
          syllables: 1
        },
        {
          word: "board",
          syllables: 1
        },
        {
          word: "boat",
          syllables: 1
        },
        {
          word: "bodysuit",
          syllables: 3
        },
        {
          word: "bordelaise",
          syllables: 3
        },
        {
          word: "break",
          syllables: 1
        },
        {
          word: "build",
          syllables: 1
        },
        {
          word: "bureau",
          syllables: 2
        },
        {
          word: "business",
          syllables: 2
        },
        {
          word: "cabrio",
          syllables: 3
        },
        {
          word: "cabriolet",
          syllables: 4
        },
        {
          word: "cachesexe",
          syllables: 2
        },
        {
          word: "camaieu",
          syllables: 3
        },
        {
          word: "canyon",
          syllables: 2
        },
        {
          word: "case",
          syllables: 1
        },
        {
          word: "catsuit",
          syllables: 2
        },
        {
          word: "centime",
          syllables: 3
        },
        {
          word: "chaise",
          syllables: 2
        },
        {
          word: "champion",
          syllables: 2
        },
        {
          word: "championat",
          syllables: 3
        },
        {
          word: "chapiteau",
          syllables: 3
        },
        {
          word: "chateau",
          syllables: 2
        },
        {
          word: "château",
          syllables: 2
        },
        {
          word: "cheat",
          syllables: 1
        },
        {
          word: "cheese",
          syllables: 1
        },
        {
          word: "chihuahua",
          syllables: 3
        },
        {
          word: "choice",
          syllables: 1
        },
        {
          word: "circonflexe",
          syllables: 3
        },
        {
          word: "clean",
          syllables: 1
        },
        {
          word: "cloche",
          syllables: 1
        },
        {
          word: "close",
          syllables: 1
        },
        {
          word: "clothes",
          syllables: 1
        },
        {
          word: "commerce",
          syllables: 2
        },
        {
          word: "crime",
          syllables: 1
        },
        {
          word: "crossrate",
          syllables: 2
        },
        {
          word: "cuisine",
          syllables: 2
        },
        {
          word: "culotte",
          syllables: 2
        },
        {
          word: "death",
          syllables: 1
        },
        {
          word: "defense",
          syllables: 2
        },
        {
          word: "détente",
          syllables: 2
        },
        {
          word: "dread",
          syllables: 1
        },
        {
          word: "dream",
          syllables: 1
        },
        {
          word: "dresscode",
          syllables: 2
        },
        {
          word: "dungeon",
          syllables: 2
        },
        {
          word: "easy",
          syllables: 2
        },
        {
          word: "engagement",
          syllables: 3
        },
        {
          word: "entente",
          syllables: 2
        },
        {
          word: "eye-catcher",
          syllables: 3
        },
        {
          word: "eyecatcher",
          syllables: 3
        },
        {
          word: "eyeliner",
          syllables: 3
        },
        {
          word: "eyeword",
          syllables: 2
        },
        {
          word: "fashion",
          syllables: 2
        },
        {
          word: "feature",
          syllables: 2
        },
        {
          word: "ferien",
          syllables: 3
        },
        {
          word: "fineliner",
          syllables: 3
        },
        {
          word: "fisheye",
          syllables: 2
        },
        {
          word: "flake",
          syllables: 1
        },
        {
          word: "flambeau",
          syllables: 2
        },
        {
          word: "flatrate",
          syllables: 2
        },
        {
          word: "fleece",
          syllables: 1
        },
        {
          word: "fraîche",
          syllables: 1
        },
        {
          word: "freak",
          syllables: 1
        },
        {
          word: "frites",
          syllables: 1
        },
        {
          word: "future",
          syllables: 2
        },
        {
          word: "gaelic",
          syllables: 2
        },
        {
          word: "game-show",
          syllables: 2
        },
        {
          word: "gameboy",
          syllables: 2
        },
        {
          word: "gamepad",
          syllables: 2
        },
        {
          word: "gameplay",
          syllables: 2
        },
        {
          word: "gameport",
          syllables: 2
        },
        {
          word: "gameshow",
          syllables: 2
        },
        {
          word: "garigue",
          syllables: 2
        },
        {
          word: "garrigue",
          syllables: 2
        },
        {
          word: "gatefold",
          syllables: 2
        },
        {
          word: "gateway",
          syllables: 2
        },
        {
          word: "geflashed",
          syllables: 2
        },
        {
          word: "georgier",
          syllables: 4
        },
        {
          word: "goal",
          syllables: 1
        },
        {
          word: "grapefruit",
          syllables: 2
        },
        {
          word: "great",
          syllables: 1
        },
        {
          word: "groupware",
          syllables: 2
        },
        {
          word: "gueule",
          syllables: 1
        },
        {
          word: "guide",
          syllables: 1
        },
        {
          word: "guilloche",
          syllables: 2
        },
        {
          word: "gynäzeen",
          syllables: 4
        },
        {
          word: "gynözeen",
          syllables: 4
        },
        {
          word: "haircare",
          syllables: 2
        },
        {
          word: "hardcore",
          syllables: 2
        },
        {
          word: "hardware",
          syllables: 2
        },
        {
          word: "head",
          syllables: 1
        },
        {
          word: "hearing",
          syllables: 2
        },
        {
          word: "heart",
          syllables: 1
        },
        {
          word: "heavy",
          syllables: 2
        },
        {
          word: "hedge",
          syllables: 1
        },
        {
          word: "heroin",
          syllables: 3
        },
        {
          word: "inclusive",
          syllables: 3
        },
        {
          word: "initiative",
          syllables: 4
        },
        {
          word: "inside",
          syllables: 2
        },
        {
          word: "jaguar",
          syllables: 3
        },
        {
          word: "jalousette",
          syllables: 3
        },
        {
          word: "jeans",
          syllables: 1
        },
        {
          word: "jeunesse",
          syllables: 2
        },
        {
          word: "juice",
          syllables: 1
        },
        {
          word: "jukebox",
          syllables: 2
        },
        {
          word: "jumpsuit",
          syllables: 2
        },
        {
          word: "kanarien",
          syllables: 4
        },
        {
          word: "kapriole",
          syllables: 4
        },
        {
          word: "karosserielinie",
          syllables: 6
        },
        {
          word: "konopeen",
          syllables: 4
        },
        {
          word: "lacrosse",
          syllables: 2
        },
        {
          word: "laplace",
          syllables: 2
        },
        {
          word: "late-",
          syllables: 1
        },
        {
          word: "lead",
          syllables: 1
        },
        {
          word: "league",
          syllables: 1
        },
        {
          word: "learn",
          syllables: 1
        },
        {
          word: "légière",
          syllables: 2
        },
        {
          word: "lizenziat",
          syllables: 4
        },
        {
          word: "load",
          syllables: 1
        },
        {
          word: "lotterielos",
          syllables: 4
        },
        {
          word: "lounge",
          syllables: 1
        },
        {
          word: "lyzeen",
          syllables: 3
        },
        {
          word: "madame",
          syllables: 2
        },
        {
          word: "mademoiselle",
          syllables: 3
        },
        {
          word: "magier",
          syllables: 3
        },
        {
          word: "make-up",
          syllables: 2
        },
        {
          word: "malware",
          syllables: 2
        },
        {
          word: "management",
          syllables: 3
        },
        {
          word: "manteau",
          syllables: 2
        },
        {
          word: "mausoleen",
          syllables: 4
        },
        {
          word: "mauve",
          syllables: 1
        },
        {
          word: "medien",
          syllables: 3
        },
        {
          word: "mesdames",
          syllables: 2
        },
        {
          word: "mesopotamien",
          syllables: 6
        },
        {
          word: "milliarde",
          syllables: 3
        },
        {
          word: "missile",
          syllables: 2
        },
        {
          word: "miszellaneen",
          syllables: 5
        },
        {
          word: "mousse",
          syllables: 1
        },
        {
          word: "mousseline",
          syllables: 3
        },
        {
          word: "museen",
          syllables: 3
        },
        {
          word: "musette",
          syllables: 2
        },
        {
          word: "nahuatl",
          syllables: 2
        },
        {
          word: "noisette",
          syllables: 2
        },
        {
          word: "notebook",
          syllables: 2
        },
        {
          word: "nuance",
          syllables: 3
        },
        {
          word: "nuklease",
          syllables: 4
        },
        {
          word: "odeen",
          syllables: 3
        },
        {
          word: "offline",
          syllables: 2
        },
        {
          word: "offside",
          syllables: 2
        },
        {
          word: "oleaster",
          syllables: 4
        },
        {
          word: "on-stage",
          syllables: 2
        },
        {
          word: "online",
          syllables: 2
        },
        {
          word: "orpheen",
          syllables: 3
        },
        {
          word: "parforceritt",
          syllables: 3
        },
        {
          word: "patiens",
          syllables: 2
        },
        {
          word: "patient",
          syllables: 2
        },
        {
          word: "peace",
          syllables: 1
        },
        {
          word: "peace",
          syllables: 1
        },
        {
          word: "peanuts",
          syllables: 2
        },
        {
          word: "people",
          syllables: 2
        },
        {
          word: "perineen",
          syllables: 4
        },
        {
          word: "peritoneen",
          syllables: 5
        },
        {
          word: "picture",
          syllables: 2
        },
        {
          word: "piece",
          syllables: 1
        },
        {
          word: "pipeline",
          syllables: 2
        },
        {
          word: "plateau",
          syllables: 2
        },
        {
          word: "poesie",
          syllables: 3
        },
        {
          word: "poleposition",
          syllables: 4
        },
        {
          word: "portemanteau",
          syllables: 3
        },
        {
          word: "portemonnaie",
          syllables: 3
        },
        {
          word: "primerate",
          syllables: 2
        },
        {
          word: "primerate",
          syllables: 2
        },
        {
          word: "primetime",
          syllables: 2
        },
        {
          word: "protease",
          syllables: 4
        },
        {
          word: "protein",
          syllables: 3
        },
        {
          word: "prytaneen",
          syllables: 4
        },
        {
          word: "quotient",
          syllables: 2
        },
        {
          word: "radio",
          syllables: 3
        },
        {
          word: "reader",
          syllables: 2
        },
        {
          word: "ready",
          syllables: 2
        },
        {
          word: "reallife",
          syllables: 2
        },
        {
          word: "repeat",
          syllables: 2
        },
        {
          word: "retake",
          syllables: 2
        },
        {
          word: "rigole",
          syllables: 2
        },
        {
          word: "risolle",
          syllables: 2
        },
        {
          word: "road",
          syllables: 1
        },
        {
          word: "roaming",
          syllables: 2
        },
        {
          word: "roquefort",
          syllables: 2
        },
        {
          word: "safe",
          syllables: 1
        },
        {
          word: "savonette",
          syllables: 3
        },
        {
          word: "sciencefiction",
          syllables: 3
        },
        {
          word: "search",
          syllables: 1
        },
        {
          word: "selfmade",
          syllables: 2
        },
        {
          word: "septime",
          syllables: 3
        },
        {
          word: "serapeen",
          syllables: 4
        },
        {
          word: "service",
          syllables: 2
        },
        {
          word: "serviette",
          syllables: 2
        },
        {
          word: "share",
          syllables: 1
        },
        {
          word: "shave",
          syllables: 1
        },
        {
          word: "shore",
          syllables: 1
        },
        {
          word: "sidebar",
          syllables: 2
        },
        {
          word: "sideboard",
          syllables: 2
        },
        {
          word: "sidekick",
          syllables: 2
        },
        {
          word: "silhouette",
          syllables: 3
        },
        {
          word: "sitemap",
          syllables: 2
        },
        {
          word: "slide",
          syllables: 1
        },
        {
          word: "sneak",
          syllables: 1
        },
        {
          word: "soap",
          syllables: 1
        },
        {
          word: "softcore",
          syllables: 2
        },
        {
          word: "software",
          syllables: 2
        },
        {
          word: "soutanelle",
          syllables: 3
        },
        {
          word: "speak",
          syllables: 1
        },
        {
          word: "special",
          syllables: 2
        },
        {
          word: "spracheinstellung",
          syllables: 5
        },
        {
          word: "spyware",
          syllables: 2
        },
        {
          word: "square",
          syllables: 1
        },
        {
          word: "stagediving",
          syllables: 3
        },
        {
          word: "stakeholder",
          syllables: 3
        },
        {
          word: "statement",
          syllables: 2
        },
        {
          word: "steady",
          syllables: 2
        },
        {
          word: "steak",
          syllables: 1
        },
        {
          word: "stealth",
          syllables: 1
        },
        {
          word: "steam",
          syllables: 1
        },
        {
          word: "stoned",
          syllables: 1
        },
        {
          word: "stracciatella",
          syllables: 4
        },
        {
          word: "stream",
          syllables: 1
        },
        {
          word: "stride",
          syllables: 1
        },
        {
          word: "strike",
          syllables: 1
        },
        {
          word: "suitcase",
          syllables: 2
        },
        {
          word: "sweepstake",
          syllables: 2
        },
        {
          word: "t-bone",
          syllables: 2
        },
        {
          word: "t-shirt",
          syllables: 1
        },
        {
          word: "tailgate",
          syllables: 2
        },
        {
          word: "take-off",
          syllables: 2
        },
        {
          word: "take-over",
          syllables: 3
        },
        {
          word: "takeaway",
          syllables: 3
        },
        {
          word: "takeoff",
          syllables: 2
        },
        {
          word: "takeover",
          syllables: 3
        },
        {
          word: "throat",
          syllables: 1
        },
        {
          word: "time-out",
          syllables: 2
        },
        {
          word: "timelag",
          syllables: 2
        },
        {
          word: "timeline",
          syllables: 2
        },
        {
          word: "timesharing",
          syllables: 3
        },
        {
          word: "toast",
          syllables: 1
        },
        {
          word: "traubenmaische",
          syllables: 4
        },
        {
          word: "tristesse",
          syllables: 2
        },
        {
          word: "usenet",
          syllables: 2
        },
        {
          word: "varietät",
          syllables: 4
        },
        {
          word: "varieté",
          syllables: 4
        },
        {
          word: "vinaigrette",
          syllables: 3
        },
        {
          word: "vintage",
          syllables: 2
        },
        {
          word: "violett",
          syllables: 3
        },
        {
          word: "voice",
          syllables: 1
        },
        {
          word: "wakeboard",
          syllables: 2
        },
        {
          word: "washed",
          syllables: 1
        },
        {
          word: "waveboard",
          syllables: 2
        },
        {
          word: "wear",
          syllables: 1
        },
        {
          word: "wear",
          syllables: 1
        },
        {
          word: "website",
          syllables: 2
        },
        {
          word: "white",
          syllables: 1
        },
        {
          word: "widescreen",
          syllables: 2
        },
        {
          word: "wire",
          syllables: 1
        },
        {
          word: "yacht",
          syllables: 1
        },
        {
          word: "yorkshire",
          syllables: 2
        },
        {
          word: "éprouvette",
          syllables: 3,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "galette",
          syllables: 2,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "gigue",
          syllables: 1,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "groove",
          syllables: 1,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "morgue",
          syllables: 1,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "paillette",
          syllables: 2,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "raclette",
          syllables: 2,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "roulette",
          syllables: 2,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "spike",
          syllables: 1,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "style",
          syllables: 1,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "tablette",
          syllables: 2,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "grunge",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "size",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "value",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "quiche",
          syllables: 1,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "house",
          syllables: 1,
          notFollowedBy: [
            "n",
            "s"
          ]
        },
        {
          word: "sauce",
          syllables: 1,
          notFollowedBy: [
            "n",
            "s"
          ]
        },
        {
          word: "space",
          syllables: 1,
          notFollowedBy: [
            "n",
            "s"
          ]
        },
        {
          word: "airline",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "autosave",
          syllables: 3,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "bagpipe",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "bike",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "dance",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "deadline",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "halfpipe",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "headline",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "home",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "hornpipe",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "hotline",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "infoline",
          syllables: 3,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "inline",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "kite",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "rollerblade",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "score",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "skyline",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "slackline",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "slice",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "snooze",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "storyline",
          syllables: 3,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "office",
          syllables: 2,
          notFollowedBy: [
            "s",
            "r"
          ]
        },
        {
          word: "space",
          syllables: 1,
          notFollowedBy: [
            "n",
            "s",
            "r"
          ]
        },
        {
          word: "tease",
          syllables: 1,
          notFollowedBy: [
            "n",
            "s",
            "r"
          ]
        },
        {
          word: "cache",
          syllables: 1,
          notFollowedBy: [
            "t"
          ]
        }
      ],
      atBeginningOrEnd: [
        {
          word: "case",
          syllables: 1
        },
        {
          word: "life",
          syllables: 1
        },
        {
          word: "teak",
          syllables: 1
        },
        {
          word: "team",
          syllables: 1
        },
        {
          word: "creme",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "crème",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "drive",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "skate",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "update",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "upgrade",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        }
      ],
      atBeginning: [
        {
          word: "anion",
          syllables: 3
        },
        {
          word: "facelift",
          syllables: 2
        },
        {
          word: "jiu",
          syllables: 1
        },
        {
          word: "pace",
          syllables: 1
        },
        {
          word: "shake",
          syllables: 1
        },
        {
          word: "tea",
          syllables: 1
        },
        {
          word: "trade",
          syllables: 1
        },
        {
          word: "deal",
          syllables: 1
        }
      ],
      atEnd: [
        {
          word: "face",
          syllables: 1
        },
        {
          word: "file",
          syllables: 1
        },
        {
          word: "mousse",
          syllables: 1
        },
        {
          word: "plate",
          syllables: 1
        },
        {
          word: "tape",
          syllables: 1
        },
        {
          word: "byte",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "cape",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "five",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "hype",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "leak",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "like",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "make",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "phone",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "rave",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "regime",
          syllables: 2,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "statue",
          syllables: 2,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "store",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "wave",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "date",
          syllables: 1,
          notFollowedBy: [
            "n"
          ]
        },
        {
          word: "image",
          syllables: 2,
          notFollowedBy: [
            "s"
          ]
        }
      ]
    }
  }
}, IMa = {
  vowels: SMa,
  deviations: OMa
};
var Ey = {};
Object.defineProperty(Ey, "__esModule", {
  value: !0
});
Ey.default = void 0;
Ey.default = {
  productPages: {
    parameters: {
      recommendedMinimum: 3,
      recommendedMaximum: 6,
      acceptableMaximum: 7,
      acceptableMinimum: 1
    }
  }
};
var Ay = {}, Ty = {};
Object.defineProperty(Ty, "__esModule", {
  value: !0
});
Ty.default = void 0;
var CMa = w6(Cd), PMa = w6(Sc);
function w6(e) {
  return e && e.__esModule ? e : { default: e };
}
const RMa = "(^|[" + (0, PMa.default)().map((e) => "\\" + e).join("") + "])", DMa = new RegExp(RMa + "\\d{1,3}\\.$");
class NMa extends CMa.default {
  /**
   * Constructor
   * @constructor
   */
  constructor() {
    super();
  }
  /**
   * Checks whether a fullstop is an ordinal dot instead of a sentence splitter.
   * See: https://en.wikipedia.org/wiki/Ordinal_indicator#Ordinal_dot
   *
   * @param {string} currentSentence A string ending with a full stop.
   * @returns {boolean} Returns true if the full stop is an ordinal dot, false otherwise.
   */
  endsWithOrdinalDot(a) {
    return DMa.test(a.trim());
  }
}
Ty.default = NMa;
Object.defineProperty(Ay, "__esModule", {
  value: !0
});
Ay.default = void 0;
var LMa = K, MMa = qMa(Ty);
function qMa(e) {
  return e && e.__esModule ? e : { default: e };
}
function FMa(e, a = !0) {
  const t = new MMa.default(), {
    tokenizer: n,
    tokens: r
  } = t.createTokenizer();
  return t.tokenize(n, e), r.length === 0 ? [] : t.getSentencesFromTokens(r, a);
}
Ay.default = (0, LMa.memoize)(FMa, (...e) => JSON.stringify(e));
var VE = {}, $y = {}, KE = {}, jy = {};
Object.defineProperty(jy, "__esModule", {
  value: !0
});
jy.default = ZMa;
const BMa = /^((ge)\S+t($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>]))/ig, WMa = /^(((be|ent|er|her|ver|zer|über|ueber)\S+([^s]t|sst))($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>]))/ig, UMa = /(ab|an|auf|aus|vor|wieder|zurück)(ge)\S+t($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig, HMa = /((ab|an|auf|aus|vor|wieder|zurück)(be|ent|er|her|ver|zer|über|ueber)\S+([^s]t|sst))($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig, GMa = /\S+iert($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig, VMa = function(e) {
  return e.match(BMa) || [];
}, KMa = function(e) {
  return e.match(WMa) || [];
}, YMa = function(e) {
  return e.match(UMa) || [];
}, QMa = function(e) {
  return e.match(HMa) || [];
}, XMa = function(e) {
  return e.match(GMa) || [];
};
function ZMa() {
  return {
    verbsBeginningWithGe: VMa,
    verbsBeginningWithErVerEntBeZerHerUber: KMa,
    verbsWithGeInMiddle: YMa,
    verbsWithErVerEntBeZerHerUberInMiddle: QMa,
    verbsEndingWithIert: XMa
  };
}
var xy = {};
Object.defineProperty(xy, "__esModule", {
  value: !0
});
xy.default = void 0;
xy.default = [
  "angefangen",
  "aufgerissen",
  "ausgesehen",
  "befohlen",
  "befunden",
  "begonnen",
  "bekommen",
  "bewiesen",
  "beworben",
  "empfohlen",
  "empfunden",
  "entschieden",
  "erschrocken",
  "erwogen",
  "gebacken",
  "gebeten",
  "gebissen",
  "geblasen",
  "geblieben",
  "gebogen",
  "geboren",
  "geborgen",
  "geboten",
  "gebraten",
  "gebrochen",
  "gebunden",
  "gediehen",
  "gedroschen",
  "gedrungen",
  "gefahren",
  "gefallen",
  "gefangen",
  "geflogen",
  "geflohen",
  "geflossen",
  "gefressen",
  "gefroren",
  "gefunden",
  "gegangen",
  "gegeben",
  "gegessen",
  "geglichen",
  "geglitten",
  "gelungen",
  "gegolten",
  "gegoren",
  "gegossen",
  "gegraben",
  "gegriffen",
  "gehalten",
  "gehangen",
  "gehauen",
  "geheissen",
  "geheißen",
  "gehoben",
  "geholfen",
  "geklungen",
  "gekniffen",
  "gekommen",
  "gekrochen",
  "geladen",
  "gelassen",
  "gelaufen",
  "gelegen",
  "gelesen",
  "geliehen",
  "gelitten",
  "gelogen",
  "gelungen",
  "gemessen",
  "gemieden",
  "genesen",
  "genommen",
  "genossen",
  "gepfiffen",
  "gepriesen",
  "gequollen",
  "geraten",
  "gerieben",
  "gerissen",
  "geritten",
  "gerochen",
  "geronnen",
  "gerufen",
  "gerungen",
  "geschaffen",
  "geschehen",
  "geschieden",
  "geschienen",
  "geschlafen",
  "geschlagen",
  "geschlichen",
  "geschliffen",
  "geschlossen",
  "geschlungen",
  "geschmissen",
  "geschmolzen",
  "geschnitten",
  "geschoben",
  "gescholten",
  "geschoren",
  "geschossen",
  "geschrieben",
  "geschrien",
  "geschritten",
  "geschunden",
  "geschwiegen",
  "geschwollen",
  "geschwommen",
  "geschworen",
  "geschwunden",
  "geschwungen",
  "gesehen",
  "gesessen",
  "gesoffen",
  "gesonnen",
  "gespien",
  "gesponnen",
  "gesprochen",
  "gesprossen",
  "gesprungen",
  "gestanden",
  "gestiegen",
  "gestochen",
  "gestohlen",
  "gestorben",
  "gestoßen",
  "gestossen",
  "gestrichen",
  "gestritten",
  "gesungen",
  "gesunken",
  "getan",
  "getragen",
  "getreten",
  "getrieben",
  "getroffen",
  "getrogen",
  "getrunken",
  "gewachsen",
  "gewaschen",
  "gewichen",
  "gewiesen",
  "gewoben",
  "gewogen",
  "gewonnen",
  "geworben",
  "geworfen",
  "gewrungen",
  "gezogen",
  "gezwungen",
  "misslungen",
  "überbacken",
  "ueberbacken",
  "überbehalten",
  "ueberbehalten",
  "überbekommen",
  "ueberbekommen",
  "überbelegen",
  "ueberbelegen",
  "überbezahlen",
  "ueberbezahlen",
  "überboten",
  "ueberboten",
  "übergebunden",
  "uebergebunden",
  "überbunden",
  "ueberbunden",
  "überblasen",
  "ueberblasen",
  "überbraten",
  "ueberbraten",
  "übergebraten",
  "uebergebraten",
  // Participles ending in -st are not found with the regex to avoid second person singular verbs.
  "überbremst",
  "ueberbremst",
  "übergeblieben",
  "uebergeblieben",
  "übereinandergelegen",
  "uebereinandergelegen",
  "übereinandergeschlagen",
  "uebereinandergeschlagen",
  "übereinandergesessen",
  "uebereinandergesessen",
  "übereinandergestanden",
  "uebereinandergestanden",
  "übereingefallen",
  "uebereingefallen",
  "übereingekommen",
  "uebereingekommen",
  "übereingetroffen",
  "uebereingetroffen",
  "übergefallen",
  "uebergefallen",
  "übergessen",
  "uebergessen",
  "überfahren",
  "ueberfahren",
  "übergefahren",
  "uebergefahren",
  "überfallen",
  "ueberfallen",
  "überfangen",
  "ueberfangen",
  "überflogen",
  "ueberflogen",
  "überflossen",
  "ueberflossen",
  "übergeflossen",
  "uebergeflossen",
  "überfressen",
  "ueberfressen",
  "überfroren",
  "ueberfroren",
  "übergegeben",
  "uebergegeben",
  "übergeben",
  "uebergeben",
  "übergegangen",
  "uebergegangen",
  "übergangen",
  "uebergangen",
  "übergangen",
  "uebergangen",
  "übergossen",
  "uebergossen",
  "übergriffen",
  "uebergriffen",
  "übergegriffen",
  "uebergegriffen",
  "übergehalten",
  "uebergehalten",
  "überhandgenommen",
  "ueberhandgenommen",
  "überhangen",
  "ueberhangen",
  "übergehangen",
  "uebergehangen",
  "übergehoben",
  "uebergehoben",
  "überhoben",
  "ueberhoben",
  "überkommen",
  "ueberkommen",
  "übergekommen",
  "uebergekommen",
  "überladen",
  "ueberladen",
  "übergeladen",
  "uebergeladen",
  "überlassen",
  "ueberlassen",
  "übergelassen",
  "uebergelassen",
  "überlaufen",
  "ueberlaufen",
  "übergelaufen",
  "uebergelaufen",
  "überlesen",
  "ueberlesen",
  "übergelegen",
  "uebergelegen",
  "übergenommen",
  "uebergenommen",
  "übernommen",
  "uebernommen",
  "übergequollen",
  "uebergequollen",
  "überrissen",
  "ueberrissen",
  "überritten",
  "ueberritten",
  "übergeschossen",
  "uebergeschossen",
  "überschlafen",
  "ueberschlafen",
  "überschlagen",
  "ueberschlagen",
  "übergeschlagen",
  "uebergeschlagen",
  "übergeschlossen",
  "uebergeschlossen",
  "überschnitten",
  "ueberschnitten",
  "überschrieben",
  "ueberschrieben",
  "überschrieen",
  "ueberschrieen",
  "überschrien",
  "ueberschrien",
  "überschritten",
  "ueberschritten",
  "überschwungen",
  "ueberschwungen",
  "übergesehen",
  "uebergesehen",
  "übersehen",
  "uebersehen",
  "übergesotten",
  "uebergesotten",
  "übergesotten",
  "uebergesotten",
  "übersponnen",
  "uebersponnen",
  "übersprochen",
  "uebersprochen",
  "übersprungen",
  "uebersprungen",
  "übergesprungen",
  "uebergesprungen",
  "überstochen",
  "ueberstochen",
  "übergestochen",
  "uebergestochen",
  "überstanden",
  "ueberstanden",
  "übergestanden",
  "uebergestanden",
  "überstiegen",
  "ueberstiegen",
  "übergestiegen",
  "uebergestiegen",
  "übergestrichen",
  "uebergestrichen",
  "überstrichen",
  "ueberstrichen",
  "übertragen",
  "uebertragen",
  "übertroffen",
  "uebertroffen",
  "übertrieben",
  "uebertrieben",
  "übertreten",
  "uebertreten",
  "übergetreten",
  "uebergetreten",
  "überwachsen",
  "ueberwachsen",
  "überwiesen",
  "ueberwiesen",
  "überworfen",
  "ueberworfen",
  "übergeworfen",
  "uebergeworfen",
  "überwogen",
  "ueberwogen",
  "überwunden",
  "ueberwunden",
  "überzogen",
  "ueberzogen",
  "übergezogen",
  "uebergezogen",
  "verdorben",
  "vergessen",
  "verglichen",
  "verloren",
  "verstanden",
  "verschwunden",
  "vorgeschlagen"
];
Object.defineProperty(KE, "__esModule", {
  value: !0
});
KE.default = d4a;
var JMa = K, e4a = ee, a4a = v6(jy), t4a = v6(xy);
function v6(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: n4a
} = e4a.languageProcessing, zp = (0, a4a.default)(), r4a = zp.verbsBeginningWithErVerEntBeZerHerUber, s4a = zp.verbsBeginningWithGe, i4a = zp.verbsWithGeInMiddle, o4a = zp.verbsWithErVerEntBeZerHerUberInMiddle, l4a = zp.verbsEndingWithIert;
function d4a(e) {
  const a = n4a(e), t = [];
  return (0, JMa.forEach)(a, function(n) {
    (s4a(n).length !== 0 || i4a(n).length !== 0 || r4a(n).length !== 0 || o4a(n).length !== 0 || l4a(n).length !== 0 || t4a.default.includes(n)) && t.push(n);
  }), t;
}
var bp = {};
Object.defineProperty(bp, "__esModule", {
  value: !0
});
bp.default = void 0;
bp.default = ["geht", "gämsbart", "gemsbart", "geäst", "gebarungsbericht", "geähnelt", "geartet", "gebäudetrakt", "gebet", "gebiet", "gebietsrepräsentant", "gebildbrot", "gebirgsart", "gebirgsgrat", "gebirgskurort", "gebirgsluft", "gebirgsschlucht", "geblüt", "geblütsrecht", "gebohntkraut", "gebot", "gebrauchsgut", "gebrauchstext", "gebrauchsverlust", "gebrauchtgerät", "gebrauchtwagengeschäft", "gebrauchtwagenmarkt", "geburt", "geburtsakt", "geburtsgeschwulst", "geburtsgewicht", "geburtsort", "geburtsrecht", "geburtsstadt", "geburtstagsfest", "geckenart", "gedächtniskonzert", "gedächtniskunst", "gedächtnisverlust", "gedankenarmut", "gedankenexperiment", "gedankenflucht", "gedankengut", "gedankenschritt", "gedankenwelt", "gedenkkonzert", "gedicht", "geest", "gefahrengebiet", "gefahrenmoment", "gefahrenpunkt", "gefahrgut", "gefahrguttransport", "gefährt", "gefälligkeitsakzept", "gefallsucht", "gefangenenanstalt", "gefangenentransport", "gefängnisarzt", "gefängniskluft", "gefäßnaht", "gefecht", "gefechtsabschnitt", "gefechtsbereit", "gefechtsgebiet", "gefechtsgewicht", "gefechtshut", "gefechtsmast", "gefechtsmast", "geflecht", "geflügelaufzucht", "geflügelleberwurst", "geflügelmarkt", "geflügelmast", "geflügelpest", "geflügelsalat", "geflügelwurst", "geflügelzucht", "gefolgsleute", "gefrett", "gefriergerät", "gefriergut", "gefrierobst", "gefrierpunkt", "gefrierschnitt", "gefühlsarmut", "gefühlswelt", "gegenangebot", "gegenansicht", "gegenargument", "gegengeschäft", "gegengewalt", "gegengewicht", "gegenkandidat", "gegenkompliment", "gegenkonzept", "gegenlicht", "gegenmacht", "gegenpapst", "gegenpart", "gegensatzwort", "gegenstandpunkt", "gegenstandsgebiet", "gegenwart", "gegenwartskunst", "gegenwelt", "gegenwort", "gehaart", "gehandicapt", "gehandikapt", "geheimagent", "geheimbericht", "geheimdokument", "geheimfavorit", "geheimkontakt", "geheimkult", "geheimnisverrat", "geheimpolizist", "geheimrat", "geheimrezept", "geheimtext", "gehirnakrobat", "gehirngeschwulst", "gehirnhaut", "gehirnsandgeschwulst", "gehirntot", "gehirntrust", "gehöft", "gehörlosensport", "geigenkonzert", "geißbart", "geißblatt", "geißhirte", "geißhirt", "geist", "geisterfahrt", "geisterstadt", "geisterwelt", "geistesarmut", "geistesart", "geistesfürst", "geistesgegenwart", "geistesgestört", "geistesprodukt", "geistestat", "geistesverwandt", "geisteswelt", "geklüft", "geländefahrt", "geländeritt", "geländesport", "gelangweilt", "gelaut", "geläut", "gelblicht", "gelbrost", "gelbsucht", "gelbwurst", "gelcoat", "geldausgabeautomat", "geldautomat", "geldgeschäft", "geldheirat", "geldinstitut", "geldmarkt", "geldsurrogat", "geldtransport", "geldverlust", "gelehrtenstreit", "gelehrtenwelt", "geleit", "geleitboot", "geleitwort", "gelenkgicht", "gelenkwassersucht", "geleucht", "geltungssucht", "gelüst", "gemächt", "gemeindeamt", "gemeindebürgerrecht", "gemeindegut", "gemeindekirchenrat", "gemeindepräsident", "gemeinderat", "gemeingeist", "gemeingut", "gemeinschaftsgeist", "gemeinschaftsprojekt", "gemeinschaftsunterkunft", "gemengesaat", "gemüseart", "gemüsebeet", "gemüsegeschäft", "gemüsemarkt", "gemüsesaft", "gemüsesalat", "gemüsezucht", "gemüt", "gemütsarmut", "gemütsart", "gemütsathlet", "gemütskalt", "genausogut", "genausooft", "genausoweit", "gendefekt", "generalagent", "generalarzt", "generalat", "generalbassinstrument", "generalbaßinstrument", "generalbundesanwalt", "generalgouvernement", "generalintendant", "generalist", "generalkonsulat", "generalleutnant", "generaloberst", "generalresident", "generalsekretariat", "generalstaaten", "generalstaatsanwalt", "generalsuperintendent", "generalüberholt", "generalvikariat", "generalvollmacht", "generationenkonflikt", "generativist", "genist", "genitivattribut", "genitivobjekt", "genmanipuliert", "gennesaret", "genotzüchtigt", "gent", "genuasamt", "genussgift", "genußgift", "genusssucht", "genuss-sucht", "genußsucht", "genverändert", "geobiont", "geodät", "geografieunterricht", "geographieunterricht", "geokrat", "geophyt", "gepäckfracht", "geradeausfahrt", "geradesogut", "gefälligst", "gerant", "gerät", "gerätewart", "geräuschlaut", "gerbextrakt", "gericht", "gerichtsarzt", "gerichtsort", "gerichtspräsident", "germanisiert", "germanist", "germanistikstudent", "gerodelt", "geröllschicht", "geröllschutt", "geront", "gerontokrat", "gerstenbrot", "gerstensaft", "gerstenschrot", "gerücht", "gerüst", "gesamtansicht", "gesamtaspekt", "gesamtdurchschnitt", "gesamtgewicht", "gesamtgut", "gesamt", "gesamtklassement", "gesamtunterricht", "gesandtschaftsrat", "gesangskunst", "gesangspart", "gesangssolist", "gesangsunterricht", "gesangunterricht", "geschäft", "geschäftsaufsicht", "geschäftsbericht", "geschäftsgeist", "geschäftswelt", "geschenkpaket", "geschichtsunterricht", "geschicklichkeitstest", "geschicklichkeitstest", "geschlecht", "geschlechtsakt", "geschlechtslust", "geschlechtsprodukt", "geschlechtswort", "geschmackstest", "geschwindigkeitslimit", "geschworenengericht", "geschwulst", "gesellschaftsfahrt", "gesellschaftsschicht", "gesetzblatt", "gesetzespaket", "gesetzestext", "gesicht", "gesichtshaut", "gesichtspunkt", "gesichtsschnitt", "gesichtsverlust", "gespenst", "gespensterfurcht", "gespinst", "gespött", "gesprächstherapeut", "gestalt", "gestaltungselement", "gesteinsart", "gesteinschutt", "gesteinsschicht", "gestüt", "gestüthengst", "verantwortungsbewusst", "verantwortungsbewußt", "getast", "getränkeabholmarkt", "getränkeautomat", "getränkemarkt", "getreideart", "getreideaussaat", "getreideexport", "getreideimport", "getreideprodukt", "getreideschnitt", "getreidevorrat", "gewährfrist", "gewalt", "gewaltakt", "gewaltbereit", "gewalttat", "gesprächsbereit", "gewaltverbot", "gewaltverzicht", "gewässerbett", "gewässerwart", "gewebeschicht", "gewebsrest", "gewicht", "gewichtsprozent", "gewichtsverlust", "gewerbeamt", "gewerbearzt", "gewerbeaufsicht", "gewerbeaufsichtsamt", "gewerbegebiet", "gewerberecht", "gewerbsunzucht", "gewerkschaft", "gewerkschaftsjournalist", "gewindestift", "gewinnsucht", "gewinst", "gewissensangst", "gewissenskonflikt", "gewitterfront", "gewitterluft", "gewohnheitsrecht", "gewürzextrakt", "gewürzkraut", "gezücht", "erbbaurecht", "erbfolgerecht", "erbfolgestreit", "erbgut", "erbhofrecht", "erblast", "erbpacht", "erbrecht", "erbschaftsstreit", "erbsenkraut", "erbbedingt", "erbberechtigt", "erblasst", "erblaßt", "erbswurst", "erbverzicht", "erbwort", "erbzinsgut", "erdbebengebiet", "erdbeerjogurt", "erdbeerjoghurt", "erdbeeryoghurt", "erdbeerkompott", "erdbeerrot", "erdbeersaft", "erdbeersekt", "erdengut", "erdenlust", "erdfrucht", "erdgeist", "erdkundeunterricht", "erdlicht", "erdmittelpunkt", "erdnussfett", "erdölprodukt", "erdölproduzent", "erdsatellit", "erdschicht", "erdsicht", "erdtrabant", "erdverhaftet", "eremit", "erfahrungsbericht", "erfahrungshorizont", "erfahrungswelt", "erfindergeist", "erfolgsaussicht", "erfolgsorientiert", "erfolgsrezept", "erfolgsverwöhnt", "erfüllungsort", "erfurt", "ergänzungsheft", "ergänzungssport", "ergänzungstest", "ergostat", "ergotherapeut", "erholungsgebiet", "erholungsort", "erkundungsfahrt", "erlaucht", "erläuterungstext", "erlebnisbericht", "erlebnisorientiert", "erlebniswelt", "ernährungsamt", "ernst", "ernstgemeint", "ernteaussicht", "erntedankfest", "erntefest", "erntemonat", "ernteresultat", "eroberungsabsicht", "eroberungsgeist", "eroberungslust", "eroberungssucht", "eröffnungskonzert", "ersatzgeschwächt", "ersatzgut", "ersatzkandidat", "ersatzobjekt", "ersatzpräparat", "ersatzreservist", "ersatztorwart", "erscheinungsfest", "erscheinungsort", "erscheinungswelt", "erschließungsgebiet", "erst", "erstbundesligist", "erstfahrt", "erstgebot", "erstgeburt", "erstgeburtsrecht", "erstklassbillett", "erstklaßbillett", "erstkommunikant", "erstkonsument", "erstligist", "erstplatziert", "erstplaciert", "erstplaziert", "erstrecht", "ertragsaussicht", "erwartungsangst", "erwartungshorizont", "erwerbseinkünfte", "erythrit", "erythroblast", "erythrozyt", "erzählertalent", "erzählgut", "erzählkunst", "erzähltalent", "erzamt", "erzdemokrat", "erzeugungsschlacht", "erzfaschist", "erziehungsanstalt", "erziehungsberechtigt", "erziehungsinstitut", "erzkommunist", "erzprotestant", "veranlassungswort", "veranschaulicht", "veranschlagt", "verantwortungsbewusst", "verantwortungsbewußt", "veräußerungsverbot", "verbalist", "verbalkontrakt", "verbändestaat", "verbannungsort", "verbildlicht", "verbindungspunkt", "verbindungsstudent", "verbraucherkredit", "verbrauchermarkt", "verbrauchsgut", "verbrechernest", "verbrechersyndikat", "verbrecherwelt", "verbreitungsgebiet", "verbrennungsprodukt", "verdachtsmoment", "verdampfungsgerät", "verdauungstrakt", "verdikt", "veredelungsprodukt", "verehrerpost", "vereinspräsident", "vereinsrecht", "vereinssport", "verfahrensrecht", "verfassungsfahrt", "verfassungsgericht", "verfassungsrecht", "verfassungsstaat", "verfolgungsrecht", "verfremdungseffekt", "verfügungsgewalt", "verfügungsrecht", "verfügungsberechtigt", "verführungskunst", "vergegenständlicht", "vergegenwärtigt", "vergeltungsakt", "vergenossenschaftlicht", "vergissmeinnicht", "vergißmeinnicht", "vergleichsmonat", "vergleichsobjekt", "vergleichspunkt", "vergnügungsetablissement", "vergnügungsfahrt", "vergnügungssucht", "vergrößerungsgerät", "verhaltensgestört", "verhältniswahlrecht", "verhältniswort", "verhandlungsangebot", "verhandlungsbereit", "versandbereit", "verteidigungsbereit", "verhandlungsmandat", "verhandlungsort", "verhandlungspunkt", "verhöramt", "verist", "verjährungsfrist", "verkaufsagent", "verkaufsangebot", "verkaufsargument", "verkaufsautomat", "verkaufsfront", "verkaufshit", "verkaufsobjekt", "verkaufsorientiert", "verkaufspunkt", "verkehrsamt", "verkehrsdelikt", "verkehrsinfarkt", "verkehrsknotenpunkt", "verkehrslicht", "verkehrsnachricht", "verkehrspolizist", "verkehrsrecht", "verkehrsunterricht", "verkehrsverbot", "verklarungsbericht", "verknüpfungspunkt", "verkündungsblatt", "verlagsanstalt", "verlagsprospekt", "verlagsrecht", "verlagsrepräsentant", "verlagssignet", "verlust", "verlustgeschäft", "verlust", "verlustgeschäft", "verlustpunkt", "vermessungsamt", "vermittlungsamt", "vermögensrecht", "vermont", "vermummungsverbot", "verneinungswort", "vernichtungswut", "vernunft", "vernunftheirat", "verordnungsblatt", "verpackungsflut", "verpflichtungsgeschäft", "verrat", "versammlungsort", "versammlungsrecht", "versandgeschäft", "versandgut", "versart", "verschlusslaut", "verschnitt", "verschwendungssucht", "versehrtensport", "versicherungsagent", "versicherungsanstalt", "versicherungsrecht", "verskunst", "versöhnungsfest", "versorgungsamt", "versorgungsberechtigt", "versorgungsgebiet", "versorgungsgut", "versorgungsstaat", "verstakt", "verständigungsbereit", "verstellungskunst", "verstürznaht", "versuchsanstalt", "versuchsobjekt", "versuchsprojekt", "vertebrat", "verteidigungsbudget", "verteidigungsetat", "verteidigungspakt", "verteilungskonflikt", "verteilungszahlwort", "vertikalschnitt", "vertikutiergerät", "vertragsgerecht", "vertragspunkt", "vertragsrecht", "vertragsstaat", "vertragstext", "vertragswerkstatt", "vertrauensanwalt", "vertrauensarzt", "vertrauensverlust", "vertriebsrecht", "vervielfältigungsrecht", "vervielfältigungszahlwort", "verwaltungsakt", "verwaltungsgericht", "verwaltungsrat", "verwaltungsrecht", "verwundetentransport", "verzicht", "verzweiflungsakt", "verzweiflungstat", "entbindungsanstalt", "entdeckungsfahrt", "entenbrust", "entenfett", "entertainment", "enthusiast", "entlastungsmoment", "entlüftungsschacht", "entnazifizierungsgericht", "entoblast", "entoparasit", "entrechat", "entrefilet", "entrepot", "entscheidungsfurcht", "entscheidungsgewalt", "entscheidungsrecht", "entscheidungsschlacht", "entstehungsort", "entsteht", "entwässerungsschacht", "entwicklungsabschnitt", "entwicklungsinstitut", "entwicklungsprojekt", "entwicklungsschritt", "entziehungsanstalt", "zerat", "zerebrallaut", "zerfallsprodukt", "zergliederungskunst", "zerit", "zermatt", "zersetzungsprodukt", "zerstörungslust", "zerstörungswut", "zertifikat", "zerussit", "zervelat", "zervelatwurst", "beamtenrecht", "beamtenschicht", "beamtenstaat", "beat", "beatmungsgerät", "beaufort", "becherfrucht", "beckengurt", "becquereleffekt", "bedarfsgut", "bedenkfrist", "bedienungselement", "bedienungsgerät", "bedienungskomfort", "bedingtgut", "bedürfnisanstalt", "beeinflusst", "beeinflußt", "beerdigungsanstalt", "beerdigungsinstitut", "beerenfrucht", "beerenobst", "beerensaft", "beet", "befasst", "befaßt", "befehlsgewalt", "beförderungsentgelt", "beförderungsrecht", "begabungstest", "begegnungsort", "begleitinstrument", "begleittext", "begleitwort", "begnadigungsrecht", "begräbt", "begrenzungslicht", "begriffswelt", "begriffswort", "begrüßungswort", "behaviorist", "behebungsfrist", "behelfsausfahrt", "behelfsunterkunft", "behindertengerecht", "behindertensport", "behindertentransport", "behmlot", "beiblatt", "beiboot", "beignet", "beiheft", "beikost", "beilast", "beileidswort", "beinamputiert", "beinhaut", "beirat", "beirut", "beistandskredit", "beistandspakt", "beitritt", "beitrittsabsicht", "beitrittsgebiet", "beiwacht", "beiwort", "beizgerät", "bekehrungswut", "bekennergeist", "bekennermut", "bekleidungsamt", "bekommen", "belegarzt", "belegbett", "belegfrist", "belehrungssucht", "belemnit", "belesprit", "beleuchtungseffekt", "beleuchtungsgerät", "belfast", "belkantist", "belcantist", "belletrist", "bellizist", "belt", "benedikt", "benediktenkraut", "benefiziant", "benefiziat", "benefizkonzert", "beneluxstaat", "bentonit", "benzindunst", "beratungspunkt", "bereit", "bereicherungsabsicht", "bereitschaftsarzt", "bergamt", "bergeslast", "bergfahrt", "bergfest", "berggeist", "berggrat", "bergluft", "bergpredigt", "bergsport", "berg-und-Tal-Fahrt", "bergwacht", "bergwelt", "bericht", "berichtsmonat", "beritt", "bermudashort", "bernbiet", "berserkerwut", "berufsaussicht", "berufssoldat", "berufssport", "berufsstart", "berufstracht", "berufsverbot", "berufungsfrist", "berufungsgericht", "berufungsrecht", "berührungsangst", "berührungspunkt", "besanmast", "besatzungsgebiet", "besatzungsmacht", "besatzungsrecht", "besatzungssoldat", "besatzungsstatut", "beschaffungsamt", "beschäftigungstherapeut", "beschlächt", "beschlussrecht", "beschlußrecht", "beschmet", "beschneidungsfest", "beschlächt", "beschlussrecht", "beschlußrecht", "beschmet", "beschneidungsfest", "beschwerdefrist", "beschwerderecht", "beschwörungskunst", "beseitigungsanstalt", "besetzungsgebiet", "besetzungsmacht", "besetzungsstatut", "besichtigungsfahrt", "besitzrecht", "besoldungsrecht", "besprechungspunkt", "besserungsanstalt", "bestattungsinstitut", "bestimmungsort", "bestimmungswort", "bestinformiert", "bestqualifiziert", "bestrahlungsgerät", "bestrenommiert", "bestsituiert", "bestverkauft", "besucherrat", "besuchsrecht", "betpult", "betracht", "betreibungsamt", "betriebsarzt", "betriebsfest", "betriebsrat", "betriebswirt", "bett", "bettelmusikant", "bettelvogt", "bettstatt", "bettwurst", "beulenpest", "beutegut", "beutekunst", "beuterecht", "bevölkerungsschicht", "bewahranstalt", "bewährungsfrist", "bewegungsarmut", "beweislast", "bewußt", "bewusst", "beziehungsgeflecht", "bezirksamt", "bezirksarzt", "bezirksgericht", "bezirkskabinett", "bezirksschulrat", "bezirksstadt", "bezugspunkt", "bezugsrecht", "heraklit", "herat", "herbalist", "herbst", "herbstmonat", "herbstpunkt", "herdbuchzucht", "herdeninstinkt", "herfahrt", "heringsfilet", "heringssalat", "herkuleskraut", "herkunft", "herkunftsort", "hermaphrodit", "heroenkult", "heroinsucht", "heroldsamt", "heroldskunst", "herostrat", "herrenabfahrt", "herrenbrot", "herrendienst", "herrenfest", "herrenhut", "herrenrecht", "herrenschnitt", "herrenwelt", "herrgott", "herrnhut", "herrschaftsgebiet", "herrschaftsgewalt", "herrschaftsinstrument", "herrschergeschlecht", "herrscherkult", "herrschsucht", "herstellungsart", "herzacht", "herzangst", "herzblatt", "herzblut", "herzensangst", "herzensgut", "herzenslust", "herzenstrost", "herzgeliebt", "herzinfarkt", "herzinnenhaut", "herzklappendefekt", "herzogshut", "herzlichst", "herzpatient", "herzpunkt", "herzspezialist", "überbackt", "ueberbackt", "überbacktet", "ueberbacktet", "überbietet", "ueberbietet", "überbot", "ueberbot", "überbotet", "ueberbotet", "überbindet", "ueberbindet", "überbandet", "ueberbandet", "überbläst", "ueberblaest", "überbliest", "ueberbliest", "überbrät", "ueberbraet", "überbratet", "ueberbratet", "überbriet", "ueberbriet", "überbrietet", "ueberbrietet", "überbringt", "ueberbringt", "überbrachtet", "ueberbrachtet", "überbrücktet", "ueberbruecktet", "überbrühtet", "ueberbrühtet", "überbrülltet", "ueberbruelltet", "überbuchtet", "ueberbuchtet", "überbürdetet", "ueberbuerdetet", "überdecktet", "ueberdecktet", "überdehntet", "ueberdehntet", "überdenkt", "ueberdenkt", "überdachtet", "ueberdachtet", "überdosiertet", "ueberdosiertet", "überdrehtet", "ueberdrehtet", "überdrucktet", "ueberdrucktet", "überdüngtet", "ueberdüngtet", "übereignetet", "uebereignetet", "übereiltet", "uebereiltet", "übererfülltet", "uebererfuelltet", "überißt", "ueberisst", "ueberißt", "überisst", "überesst", "ueberesst", "übereßt", "uebereßt", "überaßt", "ueberaßt", "überesset", "ueberesset", "überäßet", "ueberaesset", "überfährt", "ueberfaehrt", "überfahrt", "ueberfahrt", "überfuhrt", "ueberfuhrt", "überfällt", "ueberfaellt", "überfallet", "ueberfallet", "überfielt", "ueberfielt", "überfielet", "ueberfielet", "überfängt", "ueberfaengt", "überfingt", "ueberfingt", "überfinget", "ueberfinget", "überfärbet", "ueberfaerbet", "überfettetet", "ueberfettetet", "überfirnisset", "ueberfirnisset", "überfirnißtet", "ueberfirnisstet", "überfischet", "ueberfischet", "überfischtet", "ueberfischtet", "überflanktet", "ueberflanktet", "überflanktet", "ueberflanktet", "überfliegt", "ueberfliegt", "überflieget", "ueberflieget", "überflöget", "ueberflöget", "überflösset", "ueberfloesset", "überflosst", "ueberflosst", "überfloßt", "ueberflosst", "überfließt", "ueberfliesst", "überflutetet", "ueberflutetet", "überformet", "ueberformet", "überformtet", "ueberformtet", "überfrachtetet", "ueberfrachtetet", "überfracht", "ueberfracht", "überfraget", "ueberfraget", "überfragtet", "ueberfragtet", "überfremdetet", "ueberfremdetet", "überfrisst", "ueberfrisst", "überfrißt", "ueberfrißt", "überfresst", "ueberfresst", "überfreßt", "ueberfreßt", "überfresset", "ueberfresset", "überfraßt", "ueberfraßt", "ueberfrasst", "überfräßet", "ueberfraesset", "überfriert", "ueberfriert", "überfrieret", "ueberfrieret", "überfrort", "ueberfrort", "überfröret", "ueberfroeret", "überfrört", "ueberfroert", "überführet", "ueberfuehret", "überführtet", "ueberfuehrtet", "überfüllet", "ueberfuellet", "übergibt", "uebergibt", "übergebt", "uebergebt", "übergebet", "uebergebet", "übergabt", "uebergabt", "übergäbet", "uebergaebet", "übergäbt", "uebergaebt", "übergeht", "uebergeht", "übergehet", "uebergehet", "übergingt", "uebergingt", "übergewichtetet", "uebergewichtetet", "übergießet", "uebergiesset", "übergießt", "uebergiesst", "übergösset", "uebergoesset", "übergosst", "uebergosst", "uebergoßt", "übergipset", "uebergipset", "übergipstet", "uebergipstet", "übergipset", "uebergipset", "übergipstet", "uebergipstet", "überglänzet", "ueberglaenzet", "überglänztet", "ueberglaenztet", "überglaset", "ueberglaset", "überglastet", "ueberglastet", "überglühet", "uebergluehet", "überglühtet", "uebergluehtet", "übergoldetet", "uebergoldetet", "übergraset", "uebergraset", "übergrastet", "uebergrastet", "übergrätschet", "uebergraetschet", "übergrätschtet", "uebergraetschtet", "übergreift", "uebergreift", "übergreifet", "uebergreifet", "übergrifft", "uebergrifft", "übergriffet", "uebergriffet", "übergreift", "uebergreift", "übergreifet", "uebergreifet", "übergriffet", "uebergriffet", "übergrifft", "uebergrifft", "übergrünet", "uebergruenet", "übergrüntet", "uebergruentet", "überhat", "ueberhat", "überhabt", "ueberhabt", "überhabet", "ueberhabet", "überhattet", "ueberhattet", "überhättet", "ueberhaettet", "überhält", "ueberhaelt", "überhaltet", "ueberhaltet", "überhielt", "ueberhielt", "überhieltet", "ueberhieltet", "überhändiget", "ueberhaendiget", "überhändigtet", "ueberhaendigtet", "überhängt", "ueberhaengt", "überhänget", "ueberhaenget", "überhingt", "ueberhingt", "überhinget", "ueberhinget", "überhängt", "ueberhaengt", "überhänget", "ueberhaenget", "überhängtet", "ueberhaengtet", "überhänget", "ueberhaenget", "überhängtet", "ueberhaengtet", "überhängt", "ueberhaengt", "überhänget", "ueberhaenget", "überhingt", "ueberhingt", "überhinget", "ueberhinget", "überhastetet", "ueberhastetet", "überhäufet", "ueberhaeufet", "überhäuftet", "ueberhaeuftet", "überhebt", "ueberhebt", "überhebet", "ueberhebet", "überhobt", "ueberhobt", "überhöbet", "ueberhoebet", "überhebt", "ueberhebt", "überhebet", "ueberhebet", "überhobt", "ueberhobt", "überheiztet", "ueberheiztet", "überheizet", "ueberheizet", "überhöhet", "ueberhoehet", "überhöhtet", "ueberhoehtet", "überhitzet", "ueberhitzet", "überhitztet", "ueberhitztet", "überholet", "ueberholet", "überholtet", "ueberholtet", "überhöret", "ueberhoeret", "überhörtet", "ueberhoertet", "überinterpretieret", "ueberinterpretieret", "überinterpretiertet", "ueberinterpretiertet", "überinterpretieret", "ueberinterpretieret", "überinterpretiertet", "ueberinterpretiertet", "überklebet", "ueberklebet", "überklebtet", "ueberklebtet", "überkleidetet", "ueberkleidetet", "überkochet", "ueberkochet", "überkochtet", "ueberkochtet", "überkommet", "ueberkommet", "überkamt", "ueberkamt", "überkämet", "ueberkaemet", "überkämt", "ueberkaemt", "überkompensieret", "ueberkompensieret", "überkompensiertet", "ueberkompensiertet", "überkreuzet", "ueberkreuzet", "überkreuztet", "ueberkreuztet", "überkronet", "ueberkronet", "überkrontet", "ueberkrontet", "überkrustetet", "ueberkrustetet", "überladet", "ueberladet", "überludet", "ueberludet", "überlüdet", "ueberluedet", "überlappet", "ueberlappet", "überlapptet", "ueberlapptet", "überlasset", "ueberlasset", "überlaßt", "ueberlaßt", "ueberlasst", "ueberlasst", "überlässt", "ueberlaesst", "überließt", "ueberließt", "ueberliesst", "überließet", "ueberließet", "ueberliesset", "überlastet", "ueberlastet", "überlastetet", "ueberlastetet", "überläuft", "ueberlaeuft", "überlaufet", "ueberlaufet", "überlieft", "ueberlieft", "überliefet", "ueberliefet", "überlebet", "ueberlebet", "überlebtet", "ueberlebtet", "überleget", "ueberleget", "überlegtet", "ueberlegtet", "überlegt", "ueberlegt", "überleget", "ueberleget", "überlegtet", "ueberlegtet", "überleitet", "ueberleitet", "überleitetet", "ueberleitetet", "überleset", "ueberleset", "überlast", "ueberlast", "überläset", "ueberlaeset", "überliegt", "ueberliegt", "überlieget", "ueberlieget", "überlagt", "ueberlagt", "überläget", "ueberlaeget", "überlägt", "ueberlaegt", "überlistetet", "ueberlistetet", "übermachet", "uebermachet", "übermachtet", "uebermachtet", "übermalet", "uebermalet", "übermaltet", "uebermaltet", "übermalet", "uebermalet", "übermaltet", "uebermaltet", "übermannet", "uebermannet", "übermanntet", "uebermanntet", "übermarchtet", "uebermarchtet", "übermarchet", "uebermarchet", "übermästetet", "uebermaestetet", "übermüdetet", "uebermuedetet", "übernächtiget", "uebernaechtiget", "übernächtigtet", "uebernaechtigtet", "übernimmt", "uebernimmt", "übernehmt", "uebernehmt", "übernehmet", "uebernehmet", "übernahmt", "uebernahmt", "übernähmet", "uebernaehmet", "übernähmt", "uebernaehmt", "übernutzet", "uebernutzet", "übernutztet", "uebernutztet", "überpflanzt", "ueberpflanzt", "überpflanzet", "ueberpflanzet", "überpflanztet", "ueberpflanztet", "überplanet", "ueberplanet", "überplantet", "ueberplantet", "überprüfet", "ueberpruefet", "überprüftet", "ueberprueftet", "überquillt", "ueberquillt", "überquellt", "ueberquellt", "überquellet", "ueberquellet", "überquollt", "ueberquollt", "überquöllet", "ueberquoellet", "ueberquöllt", "ueberquoellt", "überqueret", "ueberqueret", "überquertet", "ueberquertet", "überraget", "ueberraget", "überragtet", "ueberragtet", "überragt", "ueberragt", "überraget", "ueberraget", "überragtet", "ueberragtet", "überraschet", "ueberraschet", "überraschtet", "ueberraschtet", "überreagieret", "ueberreagieret", "überreagiertet", "ueberreagiertet", "überrechnetet", "ueberrechnetet", "überredetet", "ueberredetet", "überreglementieret", "ueberreglementieret", "überreglementiertet", "ueberreglementiertet", "überregulieret", "ueberregulieret", "überreguliertet", "ueberreguliertet", "überreichet", "ueberreichet", "überreichtet", "ueberreichtet", "überreißet", "ueberreisset", "überrisset", "ueberrisset", "überreitet", "ueberreitet", "überrittet", "ueberrittet", "überreizet", "ueberreizet", "überreiztet", "ueberreiztet", "überrennet", "ueberrennet", "überrenntet", "ueberrenntet", "überrollet", "ueberrollet", "überrolltet", "ueberrolltet", "überrundetet", "ueberrundetet", "übersäet", "uebersaeet", "übersätet", "uebersaetet", "übersättiget", "uebersaettiget", "uebersaettigtet", "übersättigtet", "überschattetet", "ueberschattetet", "überschätzet", "ueberschaetzet", "überschätztet", "ueberschaetztet", "überschauet", "ueberschauet", "überschautet", "ueberschautet", "überschäumt", "ueberschaeumt", "überschäumet", "ueberschaeumet", "überschäumtet", "ueberschaeumtet", "überschießt", "ueberschießt", "ueberschiesst", "überschießet", "ueberschiesset", "ueberschießet", "überschosst", "ueberschosst", "überschosst", "ueberschosst", "überschoßt", "ueberschoßt", "überschösset", "ueberschoesset", "überschlafet", "ueberschlafet", "überschliefet", "ueberschliefet", "überschlieft", "ueberschlieft", "überschlaget", "ueberschlaget", "überschlüget", "ueberschlueget", "überschlügt", "ueberschluegt", "überschlägt", "ueberschlaegt", "überschlagt", "ueberschlagt", "überschlaget", "ueberschlaget", "überschlugt", "ueberschlugt", "überschlüget", "ueberschlueget", "überschlügt", "ueberschluegt", "überschlägt", "ueberschlaegt", "überschlagt", "ueberschlagt", "überschlaget", "ueberschlaget", "überschlugt", "ueberschlugt", "überschlüget", "ueberschlueget", "ueberschluegt", "überschlügt", "überschließt", "ueberschließt", "ueberschliesst", "überschließet", "ueberschliesset", "überschlosst", "ueberschlosst", "überschloßt", "ueberschlosst", "überschlösset", "ueberschloesset", "überschmieret", "ueberschmieret", "überschmiertet", "ueberschmiertet", "überschminket", "ueberschminket", "überschminktet", "ueberschminktet", "überschnappt", "ueberschnappt", "überschnappet", "ueberschnappet", "überschnapptet", "ueberschnapptet", "überschneidet", "ueberschneidet", "überschnittet", "ueberschnittet", "überschneiet", "ueberschneiet", "überschneitet", "ueberschneitet", "überschreibet", "ueberschreibet", "überschriebet", "ueberschriebet", "überschriebt", "ueberschriebt", "überschreiet", "ueberschreiet", "überschrieet", "ueberschrieet", "überschriet", "ueberschriet", "überschriet", "ueberschriet", "überschreitet", "ueberschreitet", "überschritt", "ueberschritt", "überschrittet", "ueberschrittet", "überschuldetet", "ueberschuldetet", "überschüttet", "ueberschüttet", "überschüttetet", "ueberschüttetet", "überschüttetet", "ueberschuettetet", "überschwappt", "ueberschwappt", "überschwappet", "ueberschwappet", "überschwapptet", "ueberschwapptet", "überschwemmet", "ueberschwemmet", "überschwemmtet", "ueberschwemmtet", "überschwinget", "ueberschwinget", "überschwangt", "ueberschwangt", "überschwänget", "ueberschwaenget", "überschwängt", "ueberschwaengt", "übersieht", "uebersieht", "überseht", "ueberseht", "übersehet", "uebersehet", "übersaht", "uebersaht", "übersähet", "uebersaehet", "übersäht", "uebersaeht", "übersähet", "uebersaehet", "übersäht", "uebersaeht", "übersandtet", "uebersandtet", "übersendetet", "uebersendetet", "übersensibilisieret", "uebersensibilisieret", "übersensibilisiertet", "uebersensibilisiertet", "übersetzt", "uebersetzt", "übersetzet", "uebersetzet", "übersetztet", "uebersetztet", "übersetzet", "uebersetzet", "übersetztet", "uebersetztet", "übersiedet", "uebersiedet", "übersiedetet", "uebersiedetet", "übersott", "uebersott", "übersottet", "uebersottet", "übersöttet", "uebersoettet", "übersiedet", "uebersiedet", "übersiedetet", "uebersiedetet", "übersott", "uebersott", "übersottet", "uebersottet", "übersöttet", "uebersoettet", "überspannet", "ueberspannet", "überspanntet", "ueberspanntet", "überspielet", "ueberspielet", "überspieltet", "ueberspieltet", "überspinnet", "ueberspinnet", "überspännet", "ueberspaennet", "überspännt", "ueberspaennt", "überspönnet", "ueberspoennet", "überspönnt", "ueberspoennt", "überspitzet", "ueberspitzet", "überspitztet", "ueberspitztet", "übersprechet", "uebersprechet", "überspracht", "ueberspracht", "übersprächet", "ueberspraechet", "übersprächt", "ueberspraecht", "überspringt", "ueberspringt", "überspringet", "ueberspringet", "überspränget", "ueberspraenget", "übersprängt", "ueberspraengt", "überspringt", "ueberspringt", "überspringet", "ueberspringet", "übersprangt", "uebersprangt", "überspränget", "ueberspraenget", "übersprängt", "ueberspraengt", "übersprühet", "ueberspruehet", "übersprühtet", "ueberspruehtet", "übersprühet", "ueberspruehet", "übersprühtet", "ueberspruehtet", "überspület", "ueberspuelet", "überspültet", "überspueltet", "übersticht", "uebersticht", "überstecht", "ueberstecht", "überstechet", "ueberstechet", "überstacht", "ueberstacht", "überstächet", "ueberstaechet", "überstächt", "ueberstaecht", "übersticht", "uebersticht", "überstecht", "ueberstecht", "überstechet", "ueberstechet", "überstacht", "ueberstacht", "überstächet", "ueberstaechet", "überstächt", "ueberstaecht", "überstehet", "ueberstehet", "überstandet", "überstandet", "überständet", "überstaendet", "überstündet", "überstuendet", "übersteht", "uebersteht", "überstehet", "ueberstehet", "überstandet", "ueberstandet", "überständet", "ueberstaendet", "überstündet", "ueberstuendet", "übersteiget", "uebersteiget", "überstieget", "ueberstieget", "überstiegt", "ueberstiegt", "übersteigt", "uebersteigt", "übersteiget", "uebersteiget", "überstiegt", "ueberstiegt", "überstieget", "ueberstieget", "überstellet", "ueberstellet", "überstilisieret", "ueberstilisieret", "überstimmet", "ueberstimmet", "überstimmtet", "ueberstimmtet", "überstrahlet", "ueberstrahlet", "überstrahltet", "ueberstrahltet", "überstrapazieret", "ueberstrapazieret", "überstrapaziertet", "ueberstrapaziertet", "überstreicht", "ueberstreicht", "überstreichet", "ueberstreichet", "überstricht", "ueberstricht", "überstrichet", "ueberstrichet", "überstreichet", "ueberstreichet", "überstrichet", "ueberstrichet", "überstricht", "ueberstricht", "überstreift", "ueberstreift", "überstreifet", "ueberstreifet", "überstreiftet", "ueberstreiftet", "überstreuet", "ueberstreuet", "überstreutet", "ueberstreutet", "überströmet", "ueberstroemet", "überströmtet", "überstroemtet", "überstülpt", "überstuelpt", "ueberstuelpet", "überstülpet", "überstülptet", "ueberstuelptet", "überstürzet", "ueberstuerzet", "überstürztet", "ueberstuerztet", "übertäubet", "uebertaeubet", "übertäubtet", "uebertaeubtet", "übertauchet", "uebertauchet", "übertauchtet", "uebertauchtet", "übertippet", "uebertippet", "übertipptet", "uebertipptet", "übertönet", "uebertoenet", "übertöntet", "uebertoentet", "übertouret", "uebertouret", "übertourtet", "uebertourtet", "überträgt", "uebertraegt", "übertragt", "uebertragt", "übertraget", "uebertraget", "übertrugt", "uebertrugt", "übertrüget", "uebertrueget", "übertrügt", "uebertruegt", "übertrainieret", "uebertrainieret", "übertrainiertet", "uebertrainiertet", "übertreffet", "uebertreffet", "übertraft", "uebertraft", "überträfet", "uebertraefet", "überträft", "uebertraeft", "übertreibt", "uebertreibt", "übertreibet", "uebertreibet", "übertriebet", "uebertriebet", "übertriebt", "uebertriebt", "übertritt", "uebertritt", "übertretet", "uebertretet", "übertrat", "uebertrat", "übertratet", "uebertratet", "überträtet", "uebertraetet", "übertritt", "uebertritt", "übertretet", "uebertretet", "übertrat", "uebertrat", "übertratet", "uebertratet", "überträtet", "uebertraetet", "übertrumpfet", "uebertrumpfet", "übertrumpftet", "uebertrumpftet", "übertünchet", "uebertuenchet", "übertünchtet", "überversorget", "ueberversorget", "überversorgtet", "ueberversorgtet", "übervorteilet", "uebervorteilet", "übervorteiltet", "uebervorteiltet", "überwachet", "ueberwachet", "überwachtet", "ueberwachtet", "überwachset", "ueberwachset", "überwüchset", "ueberwuechset", "überwallt", "ueberwallt", "überwallet", "ueberwallet", "überwalltet", "ueberwalltet", "überwallet", "ueberwallet", "überwalltet", "ueberwalltet", "überwältiget", "ueberwaeltiget", "überwältigtet", "ueberwaeltigtet", "überwalzet", "ueberwalzet", "überwalztet", "ueberwalztet", "überwälzet", "ueberwaelzet", "überwälztet", "ueberwaelztet", "überwechtetet", "ueberwechtetet", "überwächtetet", "ueberwaechtetet", "überwehet", "ueberwehet", "überwehtet", "ueberwehtet", "überweidetet", "ueberweidetet", "überweist", "ueberweist", "überweiset", "ueberweiset", "überwiest", "ueberwiest", "überwieset", "ueberwieset", "überweißet", "ueberweisset", "überweißtet", "ueberweisstet", "überwirft", "ueberwirft", "überwerft", "ueberwerft", "überwerfet", "ueberwerfet", "überwarft", "ueberwarft", "überwürfet", "ueberwuerfet", "überwürft", "ueberwuerft", "überwirft", "ueberwirft", "überwerft", "ueberwerft", "überwerfet", "ueberwerfet", "überwarft", "ueberwarft", "überwürfet", "ueberwuerfet", "überwürft", "ueberwuerft", "überwertetet", "ueberwertetet", "überwiegt", "ueberwiegt", "überwieget", "ueberwieget", "überwogt", "ueberwogt", "überwöget", "ueberwoeget", "überwögt", "ueberwoegt", "überwindet", "ueberwindet", "überwandet", "ueberwandet", "überwändet", "ueberwaendet", "überwölbet", "ueberwoelbet", "überwölbtet", "ueberwoelbtet", "ueberwuerzet", "ueberwuerzet", "überwürztet", "ueberwuerztet", "überzahlet", "ueberzahlet", "überzahltet", "ueberzahltet", "überzahltet", "ueberzahltet", "überzeichnetet", "ueberzeichnetet", "überzeuget", "ueberzeuget", "überzeugtet", "ueberzeugtet", "überzieht", "ueberzieht", "überziehet", "ueberziehet", "überzogt", "ueberzogt", "überzöget", "ueberzoeget", "überzögt", "ueberzoegt", "überzüchtetet", "ueberzuechtetet", "überangebot", "ueberangebot", "überbrückungskredit", "ueberbrückungskredit", "übereinkunft", "uebereinkunft", "überfahrt", "ueberfahrt", "überflugverbot", "ueberflugverbot", "überflutungsgebiet", "ueberflutungsgebiet", "überfracht", "ueberfracht", "überfrucht", "ueberfrucht", "übergangslaut", "uebergangslaut", "übergebot", "uebergebot", "übergewicht", "uebergewicht", "überhangmandat", "ueberhangmandat", "überhangsrecht", "ueberhangsrecht", "überholverbot", "ueberholverbot", "überladenheit", "ueberladenheit", "überlandfahrt", "ueberlandfahrt", "überlast", "ueberlast", "überlegenheit", "ueberlegenheit", "übermacht", "uebermacht", "übermaßverbot", "uebermassverbot", "übermut", "uebermut", "überraschungseffekt", "ueberraschungseffekt", "überraschungsgast", "ueberraschungsgast", "überraschungsmoment", "ueberraschungsmoment", "überredungskunst", "ueberredungskunst", "überreiztheit", "ueberreiztheit", "überrest", "ueberrest", "überschicht", "ueberschicht", "überschnitt", "ueberschnitt", "überschrift", "ueberschrift", "überschwemmungsgebiet", "ueberschwemmungsgebiet", "überseegebiet", "ueberseegebiet", "überseegeschäft", "ueberseegeschaeft", "übersicht", "uebersicht", "überspanntheit", "ueberspanntheit", "überspitztheit", "ueberspitztheit", "übertragungsrecht", "uebertragungsrecht", "übertriebenheit", "uebertriebenheit", "übertritt", "uebertritt", "überwachungsdienst", "ueberwachungsdienst", "überwachungsstaat", "ueberwachungsstaat", "überwelt", "ueberwelt", "überwinterungsgebiet", "ueberwinterungsgebiet", "überzeugtheit", "ueberzeugtheit", "überzeugungstat", "ueberzeugungstat", "überziehungskredit", "ueberziehungskredit"];
Object.defineProperty($y, "__esModule", {
  value: !0
});
$y.default = void 0;
var tm = K, u4a = ee, c4a = k6(KE), p4a = k6(bp), g4a = ar;
function k6(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  indices: m4a,
  values: f4a
} = u4a.languageProcessing, {
  getIndicesByWord: h4a,
  getIndicesByWordList: y4a
} = m4a, {
  Clause: z4a
} = f4a, b4a = /\S+(apparat|arbeit|dienst|haft|halt|keit|kraft|not|pflicht|schaft|schrift|tät|wert|zeit)($|[ \n\r\t.,'()"+-;!?:/»«‹›<>])/ig;
class w4a extends z4a {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, c4a.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns {void}
   */
  checkParticiples() {
    const a = this.getParticiples().filter((t) => !this.hasNounSuffix(t) && !(0, tm.includes)(p4a.default, t) && !this.hasHabenSeinException(t) && !(0, tm.includes)(g4a.participleLike, t));
    this.setPassive(a.length > 0);
  }
  /**
   * Checks whether a found participle ends in a noun suffix.
   * If a word ends in a noun suffix from the exceptionsRegex, it isn't a participle.
   *
   * @param {string} participle   The participle to check.
   *
   * @returns {boolean} Returns true if it ends in a noun suffix, otherwise returns false.
   */
  hasNounSuffix(a) {
    return a.match(b4a) !== null;
  }
  /**
   * Checks whether a participle is followed by 'haben' or 'sein'.
   * If a participle is followed by one of these, the clause is not passive.
   *
   * @param {string} participle   The participle to check.
   *
   * @returns {boolean} Returns true if it is an exception, otherwise returns false.
   */
  hasHabenSeinException(a) {
    const t = h4a(a, this.getClauseText());
    let n = y4a(["haben", "sein"], this.getClauseText());
    if (t.length === 0 || n.length === 0)
      return !1;
    n = (0, tm.map)(n, "index");
    const r = t[0];
    return (0, tm.includes)(n, r.index + r.match.length + 1);
  }
}
$y.default = w4a;
Object.defineProperty(VE, "__esModule", {
  value: !0
});
VE.default = $4a;
var v4a = ee, k4a = YE($y), _4a = YE(ar), E4a = YE(yp);
function YE(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getClausesSplitOnStopWords: A4a,
  createRegexFromArray: jP
} = v4a.languageProcessing, T4a = {
  Clause: k4a.default,
  regexes: {
    auxiliaryRegex: jP(_4a.default.all),
    stopwordRegex: jP(E4a.default)
  }
};
function $4a(e) {
  return A4a(e, T4a);
}
var QE = {}, XE = {}, ZE = {};
Object.defineProperty(ZE, "__esModule", {
  value: !0
});
ZE.detectAndStemRegularParticiple = I4a;
var j4a = _6(bp), x4a = _6(jy);
function _6(e) {
  return e && e.__esModule ? e : { default: e };
}
const S4a = function(e, a) {
  const t = new RegExp("^" + e.participleStemmingClasses[1].regex);
  return new RegExp("^" + e.participleStemmingClasses[0].regex).test(a) ? a.slice(2, a.length - 2) : t.test(a) ? a.slice(2, a.length - 1) : null;
}, xP = function(e, a, t, n, r) {
  for (const o of a)
    if (new RegExp("^" + o + t).test(e)) {
      const u = e.slice(o.length - e.length), c = u.slice(n, u.length - r);
      return o + c;
    }
  return null;
}, O4a = function(e, a) {
  const t = e.prefixes.separableOrInseparable;
  for (const n of e.participleStemmingClasses) {
    const r = n.regex, o = n.startStem, l = n.endStem, c = n.separable ? e.prefixes.separable : e.prefixes.inseparable;
    let f = xP(a, c, r, o, l);
    if (f || (f = xP(a, t, r, o, l), f))
      return f;
  }
  return null;
};
function I4a(e, a) {
  if ((0, x4a.default)(a).length > 0 || j4a.default.includes(a))
    return "";
  let t = S4a(e, a);
  return t || (t = O4a(e, a), t) ? t : null;
}
var JE = {};
Object.defineProperty(JE, "__esModule", {
  value: !0
});
JE.default = L4a;
const C4a = function(e) {
  let a = e.search(/[aeiouyäöü][^aeiouyäöü]/);
  return a !== -1 && (a += 2), a !== -1 && a < 3 && (a = 3), a;
}, SP = function(e) {
  const a = e.search(/(em|ern|er)$/g), t = e.search(/(e|en|es)$/g);
  let n = e.search(/([bdfghklmnrt]s)$/g);
  n !== -1 && n++;
  let r = "", o = 1e4;
  return a !== -1 ? (r = "a", o = a, {
    index1: o,
    optionUsed1: r
  }) : t !== -1 ? (r = "b", o = t, {
    index1: o,
    optionUsed1: r
  }) : n !== -1 ? (r = "c", o = n, {
    index1: o,
    optionUsed1: r
  }) : {
    index1: o,
    optionUsed1: r
  };
}, P4a = function(e) {
  const a = e.search(/(en|er|est)$/g);
  let t = e.search(/(.{3}[bdfghklmnt]st)$/g);
  t !== -1 && (t += 4);
  let n = 1e4;
  return a !== -1 ? n = a : t !== -1 && (n = t), n;
}, R4a = function(e, a, t, n) {
  return a !== 1e4 && n !== -1 && a >= n && (e = e.substring(0, a), t === "b" && e.search(/niss$/) !== -1 && (e = e.substring(0, e.length - 1))), e;
}, D4a = function(e, a, t) {
  return a !== 1e4 && t !== -1 && a >= t && (e = e.substring(0, a)), e;
}, N4a = function(e, a) {
  const n = e.veryIrregularVerbs.find((r) => r.forms.includes(a));
  return n ? n.stem : null;
};
function L4a(e, a) {
  const t = N4a(e, a);
  if (t)
    return t;
  a = a.replace(/([aeiouyäöü])u([aeiouyäöü])/g, "$1U$2"), a = a.replace(/([aeiouyäöü])y([aeiouyäöü])/g, "$1Y$2"), a = a.replace(/([aeiouyäöü])i([aeiouyäöü])/g, "$1I$2"), a = a.replace(/([aeiouyäöü])e([aeiouyäöü])/g, "$1E$2");
  const n = C4a(a), r = SP(a).index1, o = SP(a).optionUsed1;
  a = R4a(a, r, o, n);
  const l = P4a(a);
  return a = D4a(a, l, n), a = a.replace(/U/g, "u"), a = a.replace(/Y/g, "y"), a = a.replace(/I/g, "i"), a = a.replace(/E/g, "e"), a;
}
Object.defineProperty(XE, "__esModule", {
  value: !0
});
XE.default = V4a;
var M4a = K, q4a = ee, F4a = ZE, B4a = W4a(JE);
function W4a(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  flattenSortLength: U4a
} = q4a.languageProcessing, OP = function(e, a) {
  for (const t of e) {
    const n = t.find((r) => a.endsWith(r));
    if (n)
      return a.slice(0, a.length - n.length) + t[0];
  }
  return null;
}, H4a = function(e, a) {
  const t = e.exceptions;
  for (const n of Object.keys(t)) {
    const r = t[n];
    for (const o of r)
      if (o.includes(a))
        return o[0];
  }
  return null;
}, G4a = function(e, a) {
  let t = a;
  const n = e.strongAndIrregularVerbs.stems;
  let o = U4a(e.prefixes).find((l) => a.startsWith(l));
  if (o) {
    const l = t.slice(o.length, t.length);
    l.length > 2 ? t = l : o = null;
  }
  for (const l of n) {
    let u = l.stems;
    if (u = (0, M4a.flatten)(Object.values(u)), u.includes(t))
      return o ? o + l.stems.present : l.stems.present;
  }
  return null;
};
function V4a(e, a) {
  const t = a.nouns.umlautException || [], n = OP(t, e);
  if (n)
    return n;
  const r = a.verbs, o = (0, B4a.default)(r, e);
  return OP(a.nouns.exceptionStems, o) || H4a(a.adjectives, o) || G4a(r, o) || (0, F4a.detectAndStemRegularParticiple)(r, e) || o;
}
Object.defineProperty(QE, "__esModule", {
  value: !0
});
QE.default = J4a;
var K4a = K, Y4a = ee, Q4a = X4a(XE);
function X4a(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: Z4a
} = Y4a.languageProcessing;
function J4a(e) {
  const a = (0, K4a.get)(e.getData("morphology"), "de", !1);
  return a ? (t) => (0, Q4a.default)(t, a) : Z4a;
}
var eA = {};
Object.defineProperty(eA, "__esModule", {
  value: !0
});
eA.default = t6a;
var e6a = ee;
const {
  formatNumber: a6a
} = e6a.helpers;
function t6a(e) {
  const a = 180 - e.averageWordsPerSentence - 58.5 * e.numberOfSyllables / e.numberOfWords;
  return a6a(a);
}
var aA = {};
Object.defineProperty(aA, "__esModule", {
  value: !0
});
aA.default = r6a;
var n6a = Gt;
function r6a(e) {
  return e = e.toLowerCase(), n6a.all.includes(e);
}
Object.defineProperty(HE, "__esModule", {
  value: !0
});
var E6 = HE.default = void 0, s6a = ee, i6a = Ur(ky), o6a = Gt, l6a = Ur(yp), d6a = Ur(kr), u6a = Ur(_y), c6a = Ur(IMa), p6a = Ur(Ey), g6a = Ur(Ay), m6a = Ur(VE), f6a = Ur(QE), h6a = Ur(eA), y6a = Ur(aA);
function Ur(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: z6a
} = s6a.languageProcessing;
let b6a = class extends z6a {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), Object.assign(this.config, {
      language: "de",
      passiveConstructionType: "periphrastic",
      firstWordExceptions: i6a.default,
      functionWords: o6a.all,
      stopWords: l6a.default,
      transitionWords: d6a.default,
      twoPartTransitionWords: u6a.default,
      syllables: c6a.default,
      keyphraseLength: p6a.default
    }), Object.assign(this.helpers, {
      getClauses: m6a.default,
      getStemmer: f6a.default,
      fleschReadingScore: h6a.default,
      memoizedTokenizer: g6a.default,
      checkIfWordIsFunction: y6a.default
    });
  }
};
E6 = HE.default = b6a;
var tA = {}, Sy = {};
Object.defineProperty(Sy, "__esModule", {
  value: !0
});
Sy.default = void 0;
const w6a = [
  // Definite articles:
  "o",
  "του",
  "τον ",
  "ο",
  "των",
  "τους",
  "η",
  "της",
  "την",
  "τις",
  "το",
  "τα",
  // Indefinite articles:
  "ένας",
  "ενός",
  "έναν",
  "μία",
  "μίας",
  "μία",
  "ένα",
  "μια",
  "μιας",
  "μια",
  // Numbers 1-10:
  "ένα",
  "δύο",
  "τρία",
  "τέσσερα",
  "πέντε ",
  "έξι",
  "επτά",
  "εφτά",
  "οκτώ",
  "οχτώ",
  "εννέα",
  "εννιά",
  "δέκα",
  // Demonstratives:
  "αυτός",
  "αυτού",
  "αυτόν",
  "αυτοί",
  "αυτών",
  "αυτούς",
  "αυτή",
  "αυτής",
  "αυτή",
  "αυτό",
  "αυτά",
  "εκείνος",
  "εκείνου",
  "εκείνον",
  "εκείνοι",
  "εκείνων",
  "εκείνη",
  "εκείνης",
  "εκείνη",
  "εκείνες",
  "εκείνο",
  "εκείνα",
  "τέτοιος",
  "τέτοιου",
  "τέτοιον",
  "τέτοιοι",
  "τέτοιων",
  "τέτοιους",
  "τέτοια",
  "τέτοιας",
  "τέτοιαν",
  "τέτοιες",
  "τέτοιο",
  "τέτοια",
  "τόσος",
  "τόσου",
  "τόσον",
  "τόσοι",
  "τόσων",
  "τόσους",
  "τόση",
  "τόσης",
  "τόσες",
  "τόσο",
  "τόσα",
  "τούτος",
  "τούτου",
  "τούτον",
  "τούτοι",
  "τούτων",
  "τούτους",
  "τούτη ",
  "τούτης",
  "τούτην ",
  "τούτες",
  "τούτο",
  "τούτα",
  "εδώ",
  "εκεί"
], v6a = [
  // Definite articles and relative pronouns
  "o",
  "του",
  "τον ",
  "ο",
  "των",
  "τους",
  "η",
  "της",
  "την",
  "τις",
  "το",
  "τα",
  "που",
  "τον",
  "οι"
];
Sy.default = {
  firstWords: w6a,
  secondWords: v6a
};
var _r = {};
Object.defineProperty(_r, "__esModule", {
  value: !0
});
_r.singleWords = _r.multipleWords = _r.default = _r.allWords = void 0;
const k6a = _r.singleWords = ["εξαιτίας", "επειδή", "γιατί", "διότι", "καθώς", "ώστε", "λοιπόν", "αλλά", "μα", "όμως ", "παρά", "μόνο", "μόλο", "ωστόσο", "εντούτοις", "έπειτα", "μολαταύτα", "μάλιστα", "εξάλλου", "αντίθετα", "απεναντίας", "διαφορετικά", "ειδάλλως ", "ειδεμή", "αλλιώς ", "αλλιώτικα", "πάλι", "ενώ", "μολονότι", "αντίστροφα", "αρχικά", "προγουμένως", "πρώτα", "ύστερα", "πριν", "εντωμεταξύ", "τέλος", "όταν", "καθ΄ψς", "όποτε", "μόλις", "αργότερα", "αν", "δηλαδή", "ειδικότερα", "ήτοι", "συγκεκριμένα", "ειδικά", "καταρχήν", "κατόπιν", "πρωταρχικα", "συγκεφαλαιωτικά", "συγκεφαλαιώνοντας", "συγκεντρωτικά", "συνοπτικά", "επιλογικά", "ανακεφαλαιώνοντας", "τελικά", "γενικά", "ευρύτερα", "επιπλέον", "επιπρόσθετα", "επίσης", "ακόμη", "πρόσθετα", "όπως", "ομοίως", "σαν", "επομένως", "συνεπώς", "πράγματι", "βέβαια", "όντως", "αφού", "αφότου", "καταρχάς", "ακολούθως", "εφόσον", "κυρίως", "φυσικά", "ασφαλώς", "οπωσδήποτε", "αναντίρρητα", "προφανώς"], _6a = _r.multipleWords = ["παρόλο που", "ένας ακόμα λόγος", "αυτό οφείλεται", "αυτό εξηγείται", "αυτό δικαιλογείται", "η αιτία είναι", "ο λόγος είναι", "γι'αυτό τον λόγο", "παρόλα ταύτα", "ως επακόλουθο", "ως αποτέλεσμα", "κατά συνέπεια", "έτσι που", "και όμως", "και γι'αυτό", "σε αντίθεση", "από την άλλη πλευρά", "αν και", "και αν", "στον αντίποδα", "ακόμη κι αν", "παρ'όλα αυτά", "στη συνέχεια", "είναι γεγονός ότι", "αξίζει να σημειωθεί", "με άλλα λόγια", "αυτό σημαίνει ότι", "για παράδειγμα", "παραδείγματος χάριν", "λόγου χάριν", "σε περίπτωση που", "εκτός κι αν", "εξαιτίας αυτού", "με τον ίδιο τρόπο", "με παρόμοιο τρόπο", "με την προϋπόθεση να", "υπό τον όρο να", "εν κατακλείδι ", "χάρη σε αυτό", "από την στιγμή που", "έχει μεγάλη σημασία να", "είναι απαραίτητο να", "είναι αναγκαίο να", "είναι αξιοσημείωτο", "στο μεταξύ", "στην αρχή", "με δεδομένο"], E6a = _r.allWords = k6a.concat(_6a);
_r.default = E6a;
var Oy = {};
Object.defineProperty(Oy, "__esModule", {
  value: !0
});
Oy.default = void 0;
Oy.default = [["όχι μόνο", "αλλά και"], ["όχι μόνο να μην", "αλλά ούτε και να"], ["από την μία", "από την άλλη"], ["αφενός", "αφετέρου"], ["μεν", "δε"], ["είτε", "είτε"]];
var gd = {};
Object.defineProperty(gd, "__esModule", {
  value: !0
});
gd.default = gd.all = void 0;
var A6a = _r, T6a = $6a(Ba);
function $6a(e) {
  return e && e.__esModule ? e : { default: e };
}
const j6a = ["μιανής", "στους", "στον", "στου", "στην", "στης", "ένας", "ενός", "έναν", "μίας", "μιάς", "την", "του", "τον", "των", "τις", "της", "στο", "στα", "μία", "μια", "ένα", "το", "η ", "τα", "οι", "τη", "ο"], x6a = ["ένα", "δύο ", "τρία ", "τέσσερα", "πέντε", "έξι", "εφτά", "οχτώ", "εννιά", "οκτώ", "εννέα", "δέκα", "εκατό", "χίλια", "εκατομμύριο", "εκατομμύρια", "δισεκατομμύριο", "δισεκατομμύρια", "έντεκα", "ένδεκα", "δώδεκα", "δεκατρία", "δεκατέσσερα", "δεκαπέντε", "δεκαέξι", "δεκαεπτά", "δεκαοκτώ", "δεκαεννέα", "είκοσι"], S6a = ["πρώτος", "δεύτερος", "τρίτος", "τέταρτος", "πέμπτος", "έκτος", "έβδομος", "όγδοος", "ένατος", "δέκατος", "πρώτη", "δεύτερη", "τρίτη", "τέταρτη", "πέμπτη", "έκτη", "έβδομη", "όγδοη", "ένατη", "δέκατη", "πρώτο ", "δεύτερο", "τρίτο", "τέταρτο", "πέμπτο", "έκτο", "έβδομο", "όγδοο", "ένατο", "δέκατο", "διπλάσιος", "διπλάσια", "διπλάσιο", "τριπλάσιος", "τριπλάσια", "τριπλάσιο", "διπλός", "διπλή", "τριπλός", "τριπλή", "χίλιοι", "χίλιες", "εκατοντάδες", "χιλιάδες"], O6a = ["μισός", "μισή", "μισό", "τέταρτο", "τρίτο", "ολόκληρο", "ολόκληρος"], I6a = ["εγώ", "εσύ", "αυτός", "αυτή", "αυτό", "εμείς", "εσείς", "αυτοί", "αυτές", "αυτά", "αυτούς", "εμένα", "εσένα", "αυτών", "μένα", "σένα", "εμάς", "εσάς", "μου", "σου", "μας", "σας", "με", "σε"], C6a = ["τέτοιους", "εκείνος", "εκείνου", "εκείνον", "εκείνοι", "εκείνων", "εκείνης", "εκείνες", "τέτοιος", "τέτοιου", "τέτοιον", "τέτοιοι", "τέτοιων", "τέτοιας", "τέτοιαν", "τέτοιες", "τούτους", "τούτην ", "εκείνη", "εκείνη", "εκείνο", "εκείνα", "τέτοια", "τέτοιο", "τέτοια", "τόσους", "τούτος", "τούτου", "τούτον", "τούτοι", "τούτων", "τούτη ", "τούτης", "τούτες", "αυτού", "αυτόν", "αυτής", "τόσος", "τόσου", "τόσον", "τόσοι", "τόσων", "τόσης", "τόσες", "τούτο", "τούτα", "τόση", "τόσο", "τόσα", "εκεί", "εδώ"], P6a = ["ποιανού", "ποιανής", "ποιανών", "ποιους", "πόσους", "ποιος", "ποιου", "ποιον", "ποιας", "πόσος", "πόσου", "πόσον", "πόσης", "ποιοι", "ποιων", "ποιες", "πόσοι", "πόσων", "πόσες", "ποια", "ποιο", "πόση", "πόσα", "τί", "τι"], R6a = ["πώς", "πού", "πόσο", "πότε"], D6a = ["περισσότερο", "λιγότερο", "ελάχιστα", "καθόλου", "αρκετά", "εξίσου", "κάπως", "τόσο ", "πολύ", "τόσο", "πιο", "όσο"], N6a = ["εαυτός", "εαυτού", "εαυτό", "εαυτούς"], L6a = ["δικός", "δικού", "δικό", "δική", "δικής", "τους", "δικοί", "δικών", "δικούς", "δικές", "δικά"], M6a = ["κάμποσου", "κάμποσον", "κάμποση", "κάμποσης ", "κάμποσο", "τίποτε", "καθένας", "καθενός", "καθένα ", "καθεμία", "καθεμιά", "καθεμίας", "καθεμιάς", "καθέναν", "δείνα", "τάδε", "μερικοί", "μερικών", "μερικούς", "μερικές", "μερικά", "κάποιοι", "κάποιων", "κάποιους", "κάποιες", "κάποια", "άλλοι", "άλλων", "αλλονών", "άλλους", "άλλες", "άλλα", "κάμποσοι", "κάμποσων", "κάμποσες", "κάμποσα"], q6a = ["σε", "με", "από", "για", "ως", "πριν", "προς", "σαν", "αντί", "δίχως", "έως", "κατά", "μετά", "μέχρι", "χωρίς", "παρά", "εναντίον", "εξαιτίας", "μεταξύ", "ίσαμε", "άνευ", "αμφί", "ανά", "διά", "εκ", "εις", "εξ", "εκτός", "εν", "ένεκα", "εντός", "επί", "λόγω", "περί", "πρό", "συν", "υπέρ", "υπό", "χάριν", "χάρη"], F6a = ["δεν", "θα", "δεν", "μη", "μην", "όχι", "ναι", "ας", "για", "μα"], B6a = ["να", "και", "που", "ότι", "αν", "αλλά", "ούτε", "ουδέ", "μηδέ", "μήτε", "ή", "είτε", "μα", "παρά", "όμως", "ωστόσο", "ενώ", "μολονότι", "μόνο", "μόνο που", "λοιπόν", "ώστε", "άρα", "επομένως", "οπότε", "δηλαδή", "πως", "μην", "μήπως", "άμα", "όταν", "καθώς", "αφού", "αφότου", "πριν", "μόλις", "προτού", "ώσπου", "ωσότου", "σαν", "γιατί", "επειδή"], W6a = ["συνηθίζεται", "μπορούσαμε", "ενδέχεται", "εξαρτάται", "εννοείται", "παίρνουμε", "είθισται", "μπορούμε", "μπορείτε", "υπάρχουν", "παίρνεις", "παίρνετε", "παίρνουν", "βασικούς", "μπορούμε", "είμαστε", "είσαστε", "υπάρχει", "μπορείς", "μπορούν", "κάνουμε", "υπήρχαν", "γίνεται", "γινόταν", "παίρνει", "βάζουμε", "δίνουμε", "μπορεί", "παίρνω", "πρέπει", "έχουμε", "πήγαμε", "πήγατε", "κάνεις", "κάνετε", "κάνουν", "έκανες", "κάναμε", "κάνατε", "έκαναν", "υπήρχε", "πήραμε", "πήρατε", "πήρανε", "ρίχνει", "φάγαμε", "βάζεις", "βάζετε", "βάζουν", "έβαλες", "βάλαμε", "βάλατε", "έβαλαν", "βάλανε", "δίνεις", "δίνεις", "δίνετε", "δίνουν", "έδωσες", "έδωσες", "δώσαμε", "δώσατε", "έδωσαν", "δώσανε", "έδινες", "δίναμε", "δίνατε", "δίνανε", "έδιναν", "είχαμε", "είχατε", "είναι", "είμαι", "είσαι", "είστε", "ρίχνω", "μπορώ", "πήγες", "πήγαν", "κάνει", "έκανα", "έκανε", "πήρες", "πήραν", "έριξα", "έριξε", "τρώει", "τρώμε", "έφαγε", "βάζει", "έβαλα", "έβαλε", "έδωσα", "έδινα", "έδινε", "έχεις", "έχετε", "έχουν", "είχες", "είχαν", "κάνω", "τρώω", "βάζω", "δίνω", "πάμε", "πάει", "πάμε", "πάτε", "πάνε", "πήγα", "πήγε", "πήρε", "έχει", "είχα", "είχε", "πάω", "έχω", "πας"], U6a = ["πολύ", "παρά ", "παρα", "απίστευτα", "εκπληκτικά", "αναπάντεχα", "αφάνταστα", "πραγματικά", "εντελώς", "απόλυτα", "καθολικά", "τελείως"], H6a = ["συνηθίζεται", "ενδέχεται", "εξαρτάται", "εννοείται", "είθισται", "είμαστε", "είσαστε", "υπάρχει", "μπορεί", "παίρνω", "πρέπει", "έχουμε", "είναι", "είμαι", "είσαι", "είστε", "ρίχνω", "μπορώ", "κάνω", "τρώω", "βάζω", "δίνω", "πάμε", "πάω", "έχω"], G6a = ["καλός", "καλά", "καλή", "καλύτερος", "καλύτερη", "σοβαρά", "ωραίος", "ωραία", "ωραίο", "απλός", "απλή", "απλό", "περίπλοκος", "περίπλοκη", "περίπλοκο", "μεγάλο", "μεγαλύτερος", "βασική", "βασικός", "βασικό", "ουσιαστικός", "κανονικός", "κανονική", "κανονικό", "άσχημο", "τρομερό", "απαίσιο", "αδιανόητο", "μέσος", "πραγματικός", "πραγματική", "πραγματικό", "πρώην", "σπάνιος", "σπάνια", "συνηθισμένος ", "συνηθισμένη", "συνηθισμένο", "σχετικός", "σχετική", "σχετικό", "καλύτερα", "τέλεια", "υπέροχα", "έντονα", "παραλίγο", "απλά", "κυρίως", "συνήθως", "ευθέως", "συνεχώς", "αδιάκοπα", "ασταμάτητα", "ατελείωτα", "ατέρμονα", "βασικά", "ουσιαστικά", "κανονικά", "άσχημα", "εντάξει", "τελικά", "φυσικά", "μπροστά", "πίσω", "επάνω", "κάτω", "ευτυχώς", "δυστυχώς", "ξαφνικά", "ειλικρινά", "απροσδόκητα", "απότομα", "ανάμεσα", "κοντά", "σιμά", "μακριά", "δίπλα", "σχετικά"], V6a = ["α", "αα", "αχ", "αι", "αλί", "αλίμονο", "αμάν", "αμέ", "αμποτε", "άιντε", "άντε", "άου", "άχου", "αχού", "βαχ", "βουρ ", "βρε", "ε", "ει", "εμ", "επ", "ζήτω", "εύγε", "μμμ", "μπα", "μπαμ", "μπράβο", "μωρέ", "μωρή", "ω", "ου", "ούου", "ουστ", "οιμέ", "οϊμέ", "ωπ", "οπ", "πωπω", "ποπο", "απαπα", "ουφ", "ώπα", "ώπατης", "όπα", "όπατης", "ωχ", "οχ", "όχου", "ώχου", "όφου", "ποπό", "πωπώ", "πουφ", "πριτς", "πφ", "ρε", "σουτ", "τσου", "τσα", "φτου", "χα", "χαχαχα", "χμ", "ωω", "ωωω", "ωχού", "ουάου"], K6a = ["γραμ.", "γραμμ.", "γραμμάρια", "κ/γ", "κ.γ.", "κ.σ.", "γρ.", "ματσ.", "κιλό", "φλ.", "φλυτζάνι", "κούπα", "ποτ.", "ποτήρι", "σκ.", "ξύσμα", "φλούδα", "λίτρο", "λίτρα"], Y6a = ["δευτερόλεπτο", "δευτερόλεπτα", "δεύτερα", "ώρα", "ώρας", "τέταρτο", "μισάωρο", "ώρες", "μέρα", "μέρας", "μέρες", "ημέρα", "ημέρες", "σήμερα", "αύριο", "εχθές", "χθές", "βδομάδα", "βδομάδες", "βδομάδας", "εβδομάδα", "εβδομάδες", "μισαωράκι", "τεταρτάκι", "δεκάλεπτο", "πεντάλεπτο", "φέτος", "πέρσι", "χρόνος", "πέρυσι", "χρόνου", "πρόπερσι", "προχθές"], Q6a = ["πράγμα", "πράγματα", "υπόθεση", "περίπτωση", "πρόβλημα", "προβλήματα", "αντικείμενο", "αντικείμενα", "θέμα", "θέματα", "περίσταση", "συνθήκες", "περιστάσεις", "ζήτημα", "ζητήματα", "ζητημάτων", "υποθέσεις", "γεγονός", "γεγονότα", "κατάσταση", "καταστάσεις", "ουσία", "τρόπος", "μέθοδος", "παράγοντας", "παράγοντες", "αιτία", "επίπτωση", "αιτίες", "επιπτώσεις", "μέρος", "μέρη", "άποψη", "απόψεις", "γνώμη", "γνώμες", "άτομο", "άτομα", "ομάδα", "πραγματικότητα", "διαφορά", "διαφορές", "ομοιότητες"], X6a = ["δεσποινίς", "καθηγητής", "διδάκτωρ", "κύριος", "κύριοι", "κυρίες", "καθηγ", "κυρία", "διδα", "καθ", "κος", "δρ", "κα"], Z6a = gd.all = (0, T6a.default)([].concat(j6a, x6a, S6a, O6a, I6a, C6a, P6a, R6a, D6a, N6a, L6a, M6a, q6a, F6a, B6a, W6a, U6a, H6a, G6a, V6a, K6a, Y6a, Q6a, X6a, A6a.singleWords));
gd.default = Z6a;
var nA = {}, Jd = {};
Object.defineProperty(Jd, "__esModule", {
  value: !0
});
Jd.default = oqa;
Jd.matchAndStemWord = o0;
Jd.matchAndStemWordWithOneRegex = ic;
Jd.matchAndStemWordWithRegexArray = sc;
function sc(e, a, t, n) {
  let r;
  for (let o = 0; o < a.length; o++)
    (r = new RegExp(a[o]).exec(e)) !== null && (e = r[1], new RegExp(t[o]).test(e) && (e += n[o]));
  return e;
}
function ic(e, a) {
  let t;
  return (t = new RegExp(a).exec(e)) !== null && (e = t[1]), e;
}
function o0(e, a, t, n, r) {
  let o;
  return (o = new RegExp(a).exec(e)) !== null && (e = o[1], (new RegExp(t).test(e) || new RegExp(n).test(e)) && (e += r)), e;
}
function J6a(e, a) {
  const t = a.externalStemmer.step1Exceptions, r = new RegExp("(.*)(" + Object.keys(t).join("|") + ")$").exec(e);
  return r !== null && (e = r[1] + t[r[2]]), e;
}
function eqa(e, a) {
  const t = a.externalStemmer.regexesStep1, n = t.regexesArrays;
  let r;
  return (r = new RegExp(t.regex1a).exec(e)) !== null && (e = r[1], new RegExp(t.regex1b).test(e) || (e += "ΑΔ")), e = sc(e, n[0], n[1], n[2]), e;
}
function aqa(e, a) {
  const t = a.externalStemmer.regexesStep2, n = new RegExp(a.externalStemmer.vowelRegex1);
  let r;
  return (r = new RegExp(t.regex2a).exec(e)) !== null && r[1].length > 4 && (e = r[1]), (r = new RegExp(t.regex2b).exec(e)) !== null && (e = r[1], (n.test(e) || e.length < 2 || new RegExp(t.regex2c).test(r[1])) && (e += "Ι"), new RegExp(t.regex2d).test(r[1]) && (e += "ΑΙ")), e;
}
function tqa(e, a) {
  const t = new RegExp(a.externalStemmer.vowelRegex1), n = a.externalStemmer.regexesStep3;
  let r;
  return (r = new RegExp(n.regex3a).exec(e)) !== null && (e = r[1], (t.test(e) || new RegExp(n.regex3b).test(e) || new RegExp(n.regex3c).test(e)) && (e += "ΙΚ")), e;
}
function nqa(e, a) {
  const t = a.externalStemmer.regexesStep4, n = t.regexesArrays, r = a.externalStemmer.vowelRegex1, o = a.externalStemmer.vowelRegex2;
  let l;
  return e === "ΑΓΑΜΕ" ? "ΑΓΑΜ" : (e = ic(e, t.regex4a), e = sc(e, n.arrays1[0], n.arrays1[1], n.arrays1[2]), e = o0(e, t.regex4b, o, t.regex4c, "ΑΝ"), e = ic(e, t.regex4d), (l = new RegExp(t.regex4e).exec(e)) !== null && (e = l[1], (new RegExp(o).test(e) || new RegExp(t.regex4f).test(e) || new RegExp(t.regex4g).test(e)) && (e += "ΕΤ")), (l = new RegExp(t.regex4h).exec(e)) !== null && (e = l[1], new RegExp(t.regex4i).test(l[1]) ? e += "ΟΝΤ" : new RegExp(t.regex4j).test(l[1]) && (e += "ΩΝΤ")), e = sc(e, n.arrays2[0], n.arrays2[1], n.arrays2[2]), e = ic(e, t.regex4k), e = o0(e, t.regex4l, t.regex4m, t.regex4n, "ΗΚ"), (l = new RegExp(t.regex4o).exec(e)) !== null && (e = l[1], (new RegExp(r).test(e) || new RegExp(t.regex4p).test(l[1]) || new RegExp(t.regex4q).test(l[1])) && (e += "ΟΥΣ")), (l = new RegExp(t.regex4r).exec(e)) !== null && (e = l[1], (new RegExp(t.regex4s).test(e) || new RegExp(t.regex4t).test(e) && !new RegExp(t.regex4u).test(e)) && (e += "ΑΓ")), e = sc(e, n.arrays3[0], n.arrays3[1], n.arrays3[2]), e);
}
function rqa(e, a) {
  const t = a.externalStemmer.regexesStep5;
  let n;
  return (n = new RegExp(t.regex5a).exec(e)) !== null && (e = n[1] + "Μ", new RegExp(t.regex5b).test(n[1]) ? e += "Α" : new RegExp(t.regex5c).test(n[1]) && (e += "ΑΤ")), (n = new RegExp(t.regex5d).exec(e)) !== null && (e = n[1] + "ΟΥ"), e;
}
function sqa(e, a) {
  const t = a.externalStemmer.regexesStep6;
  let n;
  return (n = new RegExp(t.regex6a).exec(e)) !== null && (new RegExp(t.regex6b).test(n[1]) || (e = n[1]), new RegExp(t.regex6c).test(n[1]) && (e += "ΥΤ")), e;
}
function iqa(e) {
  return e.replace(/[ΆΑά]/g, "α").replace(/[ΈΕέ]/g, "ε").replace(/[ΉΗή]/g, "η").replace(/[ΊΪΙίΐϊ]/g, "ι").replace(/[ΌΟό]/g, "ο").replace(/[ΎΫΥύΰϋ]/g, "υ").replace(/[ΏΩώ]/g, "ω").replace(/[Σς]/g, "σ");
}
function oqa(e, a) {
  e = iqa(e), e = e.toLocaleUpperCase("el");
  const t = e, n = a.externalStemmer.doNotStemWords;
  if (e.length < 3 || n.includes(e))
    return e.toLocaleLowerCase("el");
  e = J6a(e, a), e = eqa(e, a), e = aqa(e, a), e = tqa(e, a), e = nqa(e, a), e = rqa(e, a);
  const r = a.externalStemmer.longWordRegex;
  return t.length === e.length && (e = ic(e, r)), e = sqa(e, a), e = e.toLocaleLowerCase("el"), e;
}
Object.defineProperty(nA, "__esModule", {
  value: !0
});
nA.default = gqa;
var lqa = K, dqa = ee, uqa = cqa(Jd);
function cqa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: pqa
} = dqa.languageProcessing;
function gqa(e) {
  const a = (0, lqa.get)(e.getData("morphology"), "el", !1);
  return a ? (t) => (0, uqa.default)(t, a) : pqa;
}
var rA = {}, Iy = {}, sA = {};
Object.defineProperty(sA, "__esModule", {
  value: !0
});
sA.default = yqa;
var mqa = ee;
const {
  getWords: fqa
} = mqa.languageProcessing, hqa = "(ούμενους|ημένους|ούμενος|ούμενου|ούμενον|ούμενης|ούμενοι|ούμενων|ούμενες|μένους|ημένος|ημένου|ημένον|ημένοι|ημένων|ημένης|ημένες|ούμενη|ούμενο|ούμενα|μένος|μένου|μένον|μένοι|μένης|μένες|μένων|ημένη|ημένο|ημένα|μένη|μένο|μένα)$";
function yqa(e) {
  return fqa(e).filter((t) => new RegExp(hqa).test(t));
}
Object.defineProperty(Iy, "__esModule", {
  value: !0
});
Iy.default = void 0;
var zqa = ee, bqa = wqa(sA);
function wqa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  values: vqa
} = zqa.languageProcessing, {
  Clause: kqa
} = vqa;
class _qa extends kqa {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, bqa.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Sets the passiveness of a clause based on whether the matched participle is a valid one.
   * We only process clauses that have an auxiliary in this check.
   *
   * @returns {void}
   */
  checkParticiples() {
    const a = this.getParticiples();
    this.setPassive(a.length > 0);
  }
}
Iy.default = _qa;
var Cy = {};
Object.defineProperty(Cy, "__esModule", {
  value: !0
});
Cy.default = void 0;
Cy.default = ["είμαι", "είσαι", "είναι", "είμαστε", "είστε", "είσαστε", "ήμουν", "ήσουν", "ήταν", "ήμαστε", "ήμασταν", "ήσαστε", "ήσασταν"];
var Py = {};
Object.defineProperty(Py, "__esModule", {
  value: !0
});
Py.default = void 0;
Py.default = ["ένα", "έναν", "ένας", "αι", "ακομα", "ακομη", "ακριβως", "αληθεια", "αληθινα", "αλλα", "αλλαχου", "αλλες", "αλλη", "αλλην", "αλλης", "αλλιως", "αλλιωτικα", "αλλο", "αλλοι", "αλλοιως", "αλλοιωτικα", "αλλον", "αλλος", "αλλοτε", "αλλου", "αλλους", "αλλων", "αμα", "αμεσα", "αμεσως", "αν", "ανα", "αναμεσα", "αναμεταξυ", "ανευ", "αντι", "αντιπερα", "αντις", "ανω", "ανωτερω", "αξαφνα", "απ", "απεναντι", "απο", "αποψε", "από", "αρα", "αραγε", "αργα", "αργοτερο", "αριστερα", "αρκετα", "αρχικα", "ας", "αυριο", "αυτα", "αυτες", "αυτεσ", "αυτη", "αυτην", "αυτης", "αυτο", "αυτοι", "αυτον", "αυτος", "αυτοσ", "αυτου", "αυτους", "αυτουσ", "αυτων", "αφοτου", "αφου", "αἱ", "αἳ", "αἵ", "αὐτόσ", "αὐτὸς", "αὖ", "α∆ιακοπα", "βεβαια", "βεβαιοτατα", "γάρ", "γα", "γα^", "γε", "γι", "για", "γοῦν", "γρηγορα", "γυρω", "γὰρ", "δ'", "δέ", "δή", "δαί", "δαίσ", "δαὶ", "δαὶς", "δε", "δεν", "δι", "δι'", "διά", "δια", "διὰ", "δὲ", "δὴ", "δ’", "εαν", "εαυτο", "εαυτον", "εαυτου", "εαυτους", "εαυτων", "εγκαιρα", "εγκαιρως", "εγω", "ειθε", "ειμαι", "ειμαστε", "ειναι", "εις", "εισαι", "εισαστε", "ειστε", "ειτε", "ειχα", "ειχαμε", "ειχαν", "ειχατε", "ειχε", "ειχες", "ει∆εμη", "εκ", "εκαστα", "εκαστες", "εκαστη", "εκαστην", "εκαστης", "εκαστο", "εκαστοι", "εκαστον", "εκαστος", "εκαστου", "εκαστους", "εκαστων", "εκει", "εκεινα", "εκεινες", "εκεινεσ", "εκεινη", "εκεινην", "εκεινης", "εκεινο", "εκεινοι", "εκεινον", "εκεινος", "εκεινοσ", "εκεινου", "εκεινους", "εκεινουσ", "εκεινων", "εκτος", "εμας", "εμεις", "εμενα", "εμπρος", "εν", "ενα", "εναν", "ενας", "ενος", "εντελως", "εντος", "εντωμεταξυ", "ενω", "ενός", "εξ", "εξαφνα", "εξης", "εξισου", "εξω", "επ", "επί", "επανω", "επειτα", "επει∆η", "επι", "επισης", "επομενως", "εσας", "εσεις", "εσενα", "εστω", "εσυ", "ετερα", "ετεραι", "ετερας", "ετερες", "ετερη", "ετερης", "ετερο", "ετεροι", "ετερον", "ετερος", "ετερου", "ετερους", "ετερων", "ετουτα", "ετουτες", "ετουτη", "ετουτην", "ετουτης", "ετουτο", "ετουτοι", "ετουτον", "ετουτος", "ετουτου", "ετουτους", "ετουτων", "ετσι", "ευγε", "ευθυς", "ευτυχως", "εφεξης", "εχει", "εχεις", "εχετε", "εχθες", "εχομε", "εχουμε", "εχουν", "εχτες", "εχω", "εως", "εἰ", "εἰμί", "εἰμὶ", "εἰς", "εἰσ", "εἴ", "εἴμι", "εἴτε", "ε∆ω", "η", "ημασταν", "ημαστε", "ημουν", "ησασταν", "ησαστε", "ησουν", "ηταν", "ητανε", "ητοι", "ηττον", "η∆η", "θα", "ι", "ιι", "ιιι", "ισαμε", "ισια", "ισως", "ισωσ", "ι∆ια", "ι∆ιαν", "ι∆ιας", "ι∆ιες", "ι∆ιο", "ι∆ιοι", "ι∆ιον", "ι∆ιος", "ι∆ιου", "ι∆ιους", "ι∆ιων", "ι∆ιως", "κ", "καί", "καίτοι", "καθ", "καθε", "καθεμια", "καθεμιας", "καθενα", "καθενας", "καθενος", "καθετι", "καθολου", "καθως", "και", "κακα", "κακως", "καλα", "καλως", "καμια", "καμιαν", "καμιας", "καμποσα", "καμποσες", "καμποση", "καμποσην", "καμποσης", "καμποσο", "καμποσοι", "καμποσον", "καμποσος", "καμποσου", "καμποσους", "καμποσων", "κανεις", "κανεν", "κανενα", "κανεναν", "κανενας", "κανενος", "καποια", "καποιαν", "καποιας", "καποιες", "καποιο", "καποιοι", "καποιον", "καποιος", "καποιου", "καποιους", "καποιων", "καποτε", "καπου", "καπως", "κατ", "κατά", "κατα", "κατι", "κατιτι", "κατοπιν", "κατω", "κατὰ", "καὶ", "κι", "κιολας", "κλπ", "κοντα", "κτλ", "κυριως", "κἀν", "κἂν", "λιγακι", "λιγο", "λιγωτερο", "λογω", "λοιπα", "λοιπον", "μέν", "μέσα", "μή", "μήτε", "μία", "μα", "μαζι", "μακαρι", "μακρυα", "μαλιστα", "μαλλον", "μας", "με", "μεθ", "μεθαυριο", "μειον", "μελει", "μελλεται", "μεμιας", "μεν", "μερικα", "μερικες", "μερικοι", "μερικους", "μερικων", "μεσα", "μετ", "μετά", "μετα", "μεταξυ", "μετὰ", "μεχρι", "μη", "μην", "μηπως", "μητε", "μη∆ε", "μιά", "μια", "μιαν", "μιας", "μολις", "μολονοτι", "μοναχα", "μονες", "μονη", "μονην", "μονης", "μονο", "μονοι", "μονομιας", "μονος", "μονου", "μονους", "μονων", "μου", "μπορει", "μπορουν", "μπραβο", "μπρος", "μἐν", "μὲν", "μὴ", "μὴν", "να", "ναι", "νωρις", "ξανα", "ξαφνικα", "ο", "οι", "ολα", "ολες", "ολη", "ολην", "ολης", "ολο", "ολογυρα", "ολοι", "ολον", "ολονεν", "ολος", "ολοτελα", "ολου", "ολους", "ολων", "ολως", "ολως∆ιολου", "ομως", "ομωσ", "οποια", "οποιαν", "οποιαν∆ηποτε", "οποιας", "οποιας∆ηποτε", "οποια∆ηποτε", "οποιες", "οποιες∆ηποτε", "οποιο", "οποιοι", "οποιον", "οποιον∆ηποτε", "οποιος", "οποιος∆ηποτε", "οποιου", "οποιους", "οποιους∆ηποτε", "οποιου∆ηποτε", "οποιο∆ηποτε", "οποιων", "οποιων∆ηποτε", "οποι∆ηποτε", "οποτε", "οποτε∆ηποτε", "οπου", "οπου∆ηποτε", "οπως", "οπωσ", "ορισμενα", "ορισμενες", "ορισμενων", "ορισμενως", "οσα", "οσα∆ηποτε", "οσες", "οσες∆ηποτε", "οση", "οσην", "οσην∆ηποτε", "οσης", "οσης∆ηποτε", "οση∆ηποτε", "οσο", "οσοι", "οσοι∆ηποτε", "οσον", "οσον∆ηποτε", "οσος", "οσος∆ηποτε", "οσου", "οσους", "οσους∆ηποτε", "οσου∆ηποτε", "οσο∆ηποτε", "οσων", "οσων∆ηποτε", "οταν", "οτι", "οτι∆ηποτε", "οτου", "ου", "ουτε", "ου∆ε", "οχι", "οἱ", "οἳ", "οἷς", "οὐ", "οὐδ", "οὐδέ", "οὐδείσ", "οὐδεὶς", "οὐδὲ", "οὐδὲν", "οὐκ", "οὐχ", "οὐχὶ", "οὓς", "οὔτε", "οὕτω", "οὕτως", "οὕτωσ", "οὖν", "οὗ", "οὗτος", "οὗτοσ", "παλι", "παντοτε", "παντου", "παντως", "παρ", "παρά", "παρα", "παρὰ", "περί", "περα", "περι", "περιπου", "περισσοτερο", "περσι", "περυσι", "περὶ", "πια", "πιθανον", "πιο", "πισω", "πλαι", "πλεον", "πλην", "ποια", "ποιαν", "ποιας", "ποιες", "ποιεσ", "ποιο", "ποιοι", "ποιον", "ποιος", "ποιοσ", "ποιου", "ποιους", "ποιουσ", "ποιων", "πολυ", "ποσες", "ποση", "ποσην", "ποσης", "ποσοι", "ποσος", "ποσους", "ποτε", "που", "πουθε", "πουθενα", "ποῦ", "πρεπει", "πριν", "προ", "προκειμενου", "προκειται", "προπερσι", "προς", "προσ", "προτου", "προχθες", "προχτες", "πρωτυτερα", "πρόσ", "πρὸ", "πρὸς", "πως", "πωσ", "σαν", "σας", "σε", "σεις", "σημερα", "σιγα", "σου", "στα", "στη", "στην", "στης", "στις", "στο", "στον", "στου", "στους", "στων", "συγχρονως", "συν", "συναμα", "συνεπως", "συνηθως", "συχνα", "συχνας", "συχνες", "συχνη", "συχνην", "συχνης", "συχνο", "συχνοι", "συχνον", "συχνος", "συχνου", "συχνους", "συχνων", "συχνως", "σχε∆ον", "σωστα", "σόσ", "σύ", "σύν", "σὸς", "σὺ", "σὺν", "τά", "τήν", "τί", "τίς", "τίσ", "τα", "ταυτα", "ταυτες", "ταυτη", "ταυτην", "ταυτης", "ταυτο,ταυτον", "ταυτος", "ταυτου", "ταυτων", "ταχα", "ταχατε", "ταῖς", "τα∆ε", "τε", "τελικα", "τελικως", "τες", "τετοια", "τετοιαν", "τετοιας", "τετοιες", "τετοιο", "τετοιοι", "τετοιον", "τετοιος", "τετοιου", "τετοιους", "τετοιων", "τη", "την", "της", "τησ", "τι", "τινα", "τιποτα", "τιποτε", "τις", "τισ", "το", "τοί", "τοι", "τοιοῦτος", "τοιοῦτοσ", "τον", "τος", "τοσα", "τοσες", "τοση", "τοσην", "τοσης", "τοσο", "τοσοι", "τοσον", "τοσος", "τοσου", "τοσους", "τοσων", "τοτε", "του", "τουλαχιστο", "τουλαχιστον", "τους", "τουτα", "τουτες", "τουτη", "τουτην", "τουτης", "τουτο", "τουτοι", "τουτοις", "τουτον", "τουτος", "τουτου", "τουτους", "τουτων", "τούσ", "τοὺς", "τοῖς", "τοῦ", "τυχον", "των", "τωρα", "τό", "τόν", "τότε", "τὰ", "τὰς", "τὴν", "τὸ", "τὸν", "τῆς", "τῆσ", "τῇ", "τῶν", "τῷ", "υπ", "υπερ", "υπο", "υποψη", "υποψιν", "υπό", "υστερα", "φετος", "χαμηλα", "χθες", "χτες", "χωρις", "χωριστα", "ψηλα", "ω", "ωραια", "ως", "ωσ", "ωσαν", "ωσοτου", "ωσπου", "ωστε", "ωστοσο", "ωχ", "ἀλλ'", "ἀλλά", "ἀλλὰ", "ἀλλ’", "ἀπ", "ἀπό", "ἀπὸ", "ἀφ", "ἂν", "ἃ", "ἄλλος", "ἄλλοσ", "ἄν", "ἄρα", "ἅμα", "ἐάν", "ἐγώ", "ἐγὼ", "ἐκ", "ἐμόσ", "ἐμὸς", "ἐν", "ἐξ", "ἐπί", "ἐπεὶ", "ἐπὶ", "ἐστι", "ἐφ", "ἐὰν", "ἑαυτοῦ", "ἔτι", "ἡ", "ἢ", "ἣ", "ἤ", "ἥ", "ἧς", "ἵνα", "ὁ", "ὃ", "ὃν", "ὃς", "ὅ", "ὅδε", "ὅθεν", "ὅπερ", "ὅς", "ὅσ", "ὅστις", "ὅστισ", "ὅτε", "ὅτι", "ὑμόσ", "ὑπ", "ὑπέρ", "ὑπό", "ὑπὲρ", "ὑπὸ", "ὡς", "ὡσ", "ὥς", "ὥστε", "ὦ", "ᾧ", "∆α", "∆ε", "∆εινα", "∆εν", "∆εξια", "∆ηθεν", "∆ηλα∆η", "∆ι", "∆ια", "∆ιαρκως", "∆ικα", "∆ικο", "∆ικοι", "∆ικος", "∆ικου", "∆ικους", "∆ιολου", "∆ιπλα", "∆ιχως"];
Object.defineProperty(rA, "__esModule", {
  value: !0
});
rA.default = Sqa;
var Eqa = ee, Aqa = iA(Iy), Tqa = iA(Cy), $qa = iA(Py);
function iA(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getClausesSplitOnStopWords: jqa,
  createRegexFromArray: IP
} = Eqa.languageProcessing, xqa = {
  Clause: Aqa.default,
  regexes: {
    auxiliaryRegex: IP(Tqa.default),
    stopwordRegex: IP($qa.default)
  }
};
function Sqa(e) {
  return jqa(e, xqa);
}
var oA = {}, Ry = {};
Object.defineProperty(Ry, "__esModule", {
  value: !0
});
Ry.default = void 0;
Ry.default = [
  // Deponent transitive verb stems.
  "διαπραγματεύ",
  "αισθάν",
  "ανέχ",
  "ανταγωνίζ",
  "αντιλαμβάν",
  "αντιστρατεύ",
  "απεχθάν",
  "αρν",
  "αφουγκράζ",
  "βαριέμαι",
  "γεύ",
  "δέχ",
  "διανο",
  "διηγ",
  "εγγυ",
  "καταριέμαι",
  "λιγουρεύ",
  "λυπάμαι",
  "μάχ",
  "μέμφ",
  "μεταχειρίζ",
  "μιμ",
  "νυμφεύ",
  "ονειρεύ",
  "οραματίζ",
  "οσμίζ",
  "περιποι",
  "προασπίζ",
  "προοιωνίζ",
  "προφασίζ",
  "ειρωνεύ",
  "εισηγ",
  "εκδικ",
  "εκμεταλλεύ",
  "εμπιστεύ",
  "επιβουλεύ",
  "επικαλ",
  "επισκέπτ",
  "επωμίζ",
  "ερωτεύ",
  "ευαγγελίζ",
  "εχθρεύ",
  "θυμάμαι",
  "καπηλεύ",
  "καρπών",
  "σέβ",
  "σιχαίν",
  "σκαρφίζ",
  "σκέφτ",
  "σπλαχνίζ",
  "συλλογίζ",
  "συμμερίζ",
  "υπαινίσσ",
  "υποκρίν",
  "υποπτεύ",
  "υπόσχ",
  "υποψιάζ",
  "φοβάμαι",
  "χειρίζ",
  "χρειάζ",
  "πραγματεύ",
  // Deponent intransitive verb stems.
  "μαθεύ",
  "ξαναγίν",
  "ξεκαρδίζ",
  "ξεκουμπίζ",
  "ξεχύν",
  "ξημεροβραδιάζ",
  "οδύρ",
  "παραιτ",
  "παραλογίζ",
  "παραστέκ",
  "παρεκτρέπ",
  "πειραματίζ",
  "περιπλαν",
  "πολιτεύ",
  "αγωνίζ",
  "αθλ",
  "ακροβολίζ",
  "αμιλλ",
  "αμύν",
  "αναδιπλών",
  "αναδύ",
  "αναρωτιέμαι",
  "αντιστέκ",
  "γεύ",
  "γκρεμοτσακίζ",
  "διαπληκτίζ",
  "εισέρχ",
  "εκρήγνυμαι",
  "εμφορ",
  "προπορεύ",
  "ρεύ",
  "σκυλοβαριέμαι",
  "σοβαρεύ",
  "συγκρού",
  "συμπαρατάσσ",
  "συμπεριφέρ",
  "συνδικαλίζ",
  "συνεννο",
  "συνεργάζ",
  "υπεισέρχ",
  "υπερηφανεύ",
  "φαγών",
  "φύ",
  "χαμοκυλιέμαι",
  "εναντιών",
  "ενίσταμαι",
  "επαίρ",
  "επιτίθεμαι",
  "ευθύν",
  "ηγ",
  "ηττ",
  "ίπταμαι",
  "καμών",
  "καταγίν",
  "κατάγ",
  "κλυδωνίζ",
  "κοκορεύ",
  "λογοδίν",
  "μαίν",
  // Semi-deponent ambitransitive verbs.
  "ανεβαιν",
  "ανεβηκα",
  "κατεβαιν",
  "κατέβηκα",
  // Semi-deponent intransitive verbs.
  "συγχαίρ",
  "συγχάρκα"
];
var Dy = {};
Object.defineProperty(Dy, "__esModule", {
  value: !0
});
Dy.passiveSuffixes = void 0;
Dy.passiveSuffixes = ["ιόμασταν", "ιόσασταν", "ούμασταν", "ούσασταν", "ομασταν", "οσασταν", "όμασταν", "όσασταν", "ιόμαστε", "ιούνται", "ιόσαστε", "ηθήκαμε", "ηθήκατε", "ιούνταν", "ούμαστε", "θήκαμε", "θήκατε", "τήκαμε", "τήκατε", "όμαστε", "όσαστε", "ηθούμε", "ηθείτε", "ήθηκες", "ήθηκαν", "ιόμουν", "ιόσουν", "ούνται", "ούμουν", "ούσουν", "ούνταν", "μαστε", "σαστε", "θούμε", "θείτε", "τούμε", "τείτε", "θηκες", "θηκαν", "τηκες", "τηκαν", "ονται", "όμουν", "όσουν", "ονταν", "ιέμαι", "ιέσαι", "ιέται", "ιέστε", "ηθείς", "ηθούν", "ήθηκα", "ήθηκε", "ιόταν", "ούμαι", "είσαι", "είται", "είστε", "θείς", "θούν", "τείς", "τούν", "θηκα", "θηκε", "τηκα", "τηκε", "μουν", "σουν", "νταν", "ομαι", "εσαι", "εται", "εστε", "όταν", "ηθεί", "μαι", "σαι", "ται", "στε", "θεί", "τεί", "ταν", "ηθώ", "θώ", "τώ"];
Object.defineProperty(oA, "__esModule", {
  value: !0
});
oA.default = Nqa;
var Oqa = ee, CP = Cqa(Ry), Iqa = Dy;
function Cqa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: Pqa,
  directPrecedenceException: Rqa
} = Oqa.languageProcessing, Dqa = ["να"];
function Nqa(e) {
  const a = Pqa(e);
  for (const t of a)
    for (const n of Iqa.passiveSuffixes)
      if (t.endsWith(n) && t.length > 4) {
        const r = t.slice(0, -n.length);
        return /^(θεί|τεί)$/.test(n) ? !CP.default.includes(r) && !Rqa(e, t, Dqa) : !CP.default.includes(r);
      }
  return !1;
}
Object.defineProperty(tA, "__esModule", {
  value: !0
});
var A6 = tA.default = void 0, Lqa = ee, PP = pl(Sy), Mqa = pl(_r), qqa = pl(Oy), Fqa = pl(gd), Bqa = pl(nA), Wqa = pl(rA), Uqa = pl(oA);
function pl(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: Hqa
} = Lqa.languageProcessing;
let Gqa = class extends Hqa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "el",
      functionWords: Fqa.default,
      passiveConstructionType: "morphologicalAndPeriphrastic",
      transitionWords: Mqa.default,
      twoPartTransitionWords: qqa.default,
      firstWordExceptions: PP.default.firstWords,
      secondWordExceptions: PP.default.secondWords
    }), Object.assign(this.helpers, {
      getStemmer: Bqa.default,
      getClauses: Wqa.default,
      isPassiveSentence: Uqa.default
    });
  }
};
A6 = tA.default = Gqa;
var lA = {}, Ny = {};
Object.defineProperty(Ny, "__esModule", {
  value: !0
});
Ny.default = void 0;
Ny.default = [
  // Definite articles:
  "the",
  // Indefinite articles:
  "a",
  "an",
  // Numbers 1-10:
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "ten",
  // Demonstrative pronouns:
  "this",
  "that",
  "these",
  "those"
];
var wp = {};
Object.defineProperty(wp, "__esModule", {
  value: !0
});
wp.default = void 0;
wp.default = ["to", "which", "who", "whom", "that", "whose", "after", "although", "as", "because", "before", "even if", "even though", "if", "in order that", "inasmuch", "lest", "once", "provided", "since", "so that", "than", "though", "till", "unless", "until", "when", "whenever", "where", "whereas", "wherever", "whether", "while", "why", "by the time", "supposing", "no matter", "how", "what", "won't", "do", "does", "–", "and", "but", "or"];
var Ly = {};
Object.defineProperty(Ly, "__esModule", {
  value: !0
});
Ly.default = void 0;
Ly.default = [["both", "and"], ["not only", "but also"], ["neither", "nor"], ["either", "or"], ["not", "but"]];
const Vqa = "aeiouy", Kqa = {
  vowels: [
    {
      fragments: [
        "cial",
        "tia",
        "cius",
        "giu",
        "ion",
        "[^bdnprv]iou",
        "sia$",
        "[^aeiuot]{2,}ed$",
        "[aeiouy][^aeiuoyts]{1,}e$",
        "[a-z]ely$",
        "[cgy]ed$",
        "rved$",
        "[aeiouy][dt]es?$",
        "eau",
        "ieu",
        "oeu",
        "[aeiouy][^aeiouydt]e[sd]?$",
        "[aeouy]rse$",
        "^eye"
      ],
      countModifier: -1
    },
    {
      fragments: [
        "ia",
        "iu",
        "ii",
        "io",
        "[aeio][aeiou]{2}",
        "[aeiou]ing",
        "[^aeiou]ying",
        "ui[aeou]"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "^ree[jmnpqrsx]",
        "^reele",
        "^reeva",
        "riet",
        "dien",
        "[aeiouym][bdp]le$",
        "uei",
        "uou",
        "^mc",
        "ism$",
        "[^l]lien",
        "^coa[dglx].",
        "[^gqauieo]ua[^auieo]",
        "dn't$",
        "uity$",
        "ie(r|st)",
        "[aeiouw]y[aeiou]",
        "[^ao]ire[ds]",
        "[^ao]ire$"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "eoa",
        "eoo",
        "ioa",
        "ioe",
        "ioo"
      ],
      countModifier: 1
    }
  ],
  words: {
    full: [
      {
        word: "business",
        syllables: 2
      },
      {
        word: "coheiress",
        syllables: 3
      },
      {
        word: "colonel",
        syllables: 2
      },
      {
        word: "heiress",
        syllables: 2
      },
      {
        word: "i.e",
        syllables: 2
      },
      {
        word: "shoreline",
        syllables: 2
      },
      {
        word: "simile",
        syllables: 3
      },
      {
        word: "unheired",
        syllables: 2
      },
      {
        word: "wednesday",
        syllables: 2
      }
    ],
    fragments: {
      global: [
        {
          word: "coyote",
          syllables: 3
        },
        {
          word: "graveyard",
          syllables: 2
        },
        {
          word: "lawyer",
          syllables: 2
        }
      ]
    }
  }
}, T6 = {
  vowels: Vqa,
  deviations: Kqa
};
var dA = {}, My = {}, qy = {};
Object.defineProperty(qy, "__esModule", {
  value: !0
});
qy.default = void 0;
qy.default = ["ablebodied", "abovementioned", "absentminded", "accoladed", "accompanied", "acculturized", "accursed", "acerated", "acerbated", "acetylized", "achromatised", "achromatized", "acidified", "acned", "actualised", "adrenalised", "adulated", "adversed", "aestheticised", "affectioned", "affined", "affricated", "aforementioned", "agerelated", "aggrieved", "airbed", "aircooled", "airspeed", "alcoholized", "alcoved", "alkalised", "allianced", "aluminized", "alveolated", "ambered", "ammonified", "amplified", "anagrammatised", "anagrammatized", "anathematised", "aniseed", "ankled", "annualized", "anonymised", "anthologized", "antlered", "anucleated", "anviled", "anvilshaped", "apostrophised", "apostrophized", "appliqued", "apprized", "arbitrated", "armored", "articled", "ashamed", "assented", "atomised", "atrophied", "auricled", "auriculated", "aurified", "autopsied", "axled", "babied", "backhoed", "badmannered", "badtempered", "balustered", "baned", "barcoded", "bareboned", "barefooted", "barelegged", "barnacled", "based", "bayoneted", "beadyeyed", "beaked", "beaned", "beatified", "beautified", "beavered", "bed", "bedamned", "bedecked", "behoved", "belated", "bellbottomed", "bellshaped", "benighted", "bequeathed", "berried", "bespectacled", "bewhiskered", "bighearted", "bigmouthed", "bigoted", "bindweed", "binucleated", "biopsied", "bioturbed", "biped", "bipinnated", "birdfeed", "birdseed", "bisegmented", "bitterhearted", "blabbermouthed", "blackhearted", "bladed", "blankminded", "blearyeyed", "bleed", "blissed", "blobbed", "blondhaired", "bloodied", "bloodred", "bloodshed", "blueblooded", "boatshaped", "bobsled", "bodied", "boldhearted", "boogied", "boosed", "bosomed", "bottlefed", "bottlefeed", "bottlenecked", "bouldered", "bowlegged", "bowlshaped", "brandied", "bravehearted", "breastfed", "breastfeed", "breed", "brighteyed", "brindled", "broadhearted", "broadleaved", "broadminded", "brokenhearted", "broomed", "broomweed", "buccaned", "buckskinned", "bucktoothed", "buddied", "buffaloed", "bugeyed", "bugleweed", "bugweed", "bulletined", "bunked", "busied", "butterfingered", "cabbed", "caddied", "cairned", "calcified", "canalized", "candied", "cannulated", "canoed", "canopied", "canvased", "caped", "capsulated", "cassocked", "castellated", "catabolised", "catheterised", "caudated", "cellmediated", "cellulosed", "certified", "chagrined", "chambered", "chested", "chevroned", "chickenfeed", "chickenhearted", "chickweed", "chilblained", "childbed", "chinned", "chromatographed", "ciliated", "cindered", "cingulated", "circumstanced", "cisgendered", "citrullinated", "clappered", "clarified", "classified", "clawshaped", "claysized", "cleanhearted", "clearminded", "clearsighted", "cliched", "clodded", "cloistered", "closefisted", "closehearted", "closelipped", "closemouthed", "closeted", "cloudseed", "clubfooted", "clubshaped", "clued", "cockeyed", "codified", "coed", "coevolved", "coffined", "coiffed", "coinfected", "coldblooded", "coldhearted", "collateralised", "colonialised", "colorcoded", "colorised", "colourised", "columned", "commoditized", "compactified", "companioned", "complexioned", "conceited", "concerned", "concussed", "coneshaped", "congested", "contented", "convexed", "coralled", "corymbed", "cottonseed", "countrified", "countrybred", "courtmartialled", "coved", "coveralled", "cowshed", "cozied", "cragged", "crayoned", "credentialed", "creed", "crenulated", "crescentshaped", "cressweed", "crewed", "cricked", "crispated", "crossbarred", "crossbed", "crossbred", "crossbreed", "crossclassified", "crosseyed", "crossfertilised", "crossfertilized", "crossindexed", "crosslegged", "crossshaped", "crossstratified", "crossstriated", "crotched", "crucified", "cruelhearted", "crutched", "cubeshaped", "cubified", "cuckolded", "cucumbershaped", "cumbered", "cuminseed", "cupshaped", "curated", "curded", "curfewed", "curlicued", "curlycued", "curried", "curtsied", "cyclized", "cylindershaped", "damed", "dandified", "dangered", "darkhearted", "daybed", "daylighted", "deacidified", "deacylated", "deadhearted", "deadlined", "deaminized", "deathbed", "decalcified", "decertified", "deckbed", "declassified", "declutched", "decolourated", "decreed", "deed", "deeprooted", "deepseated", "defensed", "defied", "deflexed", "deglamorised", "degunkified", "dehumidified", "deified", "deled", "delegitimised", "demoded", "demystified", "denasalized", "denazified", "denied", "denitrified", "denticulated", "deseed", "desexualised", "desposited", "detoxified", "deuced", "devitrified", "dewlapped", "dezincified", "diagonalised", "dialogued", "died", "digitated", "dignified", "dilled", "dimwitted", "diphthonged", "disaffected", "disaggregated", "disarrayed", "discalced", "discolorated", "discolourated", "discshaped", "diseased", "disembodied", "disencumbered", "disfranchised", "diskshaped", "disproportionated", "disproportioned", "disqualified", "distempered", "districted", "diversified", "diverticulated", "divested", "divvied", "dizzied", "dogged", "dogsbodied", "dogsled", "domeshaped", "domiciled", "dormered", "doublebarrelled", "doublestranded", "doublewalled", "downhearted", "duckbilled", "eared", "echeloned", "eddied", "edified", "eggshaped", "elasticated", "electrified", "elegized", "embed", "embodied", "emceed", "empaneled", "empanelled", "emptyhearted", "emulsified", "engined", "ennobled", "envied", "enzymecatalysed", "enzymecatalyzed", "epitomised", "epoxidized", "epoxied", "etherised", "etherized", "evilhearted", "evilminded", "exceed", "excited", "exemplified", "exponentiated", "expurgated", "extravasated", "extraverted", "extroverted", "fabled", "facelifted", "facsimiled", "fainthearted", "falcated", "falsehearted", "falsified", "famed", "fancified", "fanged", "fanshaped", "fantasied", "farsighted", "fated", "fatted", "fazed", "featherbed", "fed", "federalized", "feeblehearted", "feebleminded", "feeblewitted", "feed", "fendered", "fenestrated", "ferried", "fevered", "fibered", "fibred", "ficklehearted", "fiercehearted", "figged", "filigreed", "filterfeed", "fireweed", "firmhearted", "fissured", "flanged", "flanneled", "flannelled", "flatbed", "flatfooted", "flatted", "flawed", "flaxenhaired", "flaxseed", "flaxweed", "flighted", "floodgenerated", "flowerbed", "fluidised", "fluidized", "flurried", "fobbed", "fonded", "forcefeed", "foreshortened", "foresighted", "forkshaped", "formfeed", "fortified", "fortressed", "foulmouthed", "foureyed", "foxtailed", "fractionalised", "fractionalized", "frankhearted", "freed", "freehearted", "freespirited", "frenzied", "friezed", "frontiered", "fructified", "frumped", "fullblooded", "fullbodied", "fullfledged", "fullhearted", "funnelshaped", "furnaced", "gaitered", "galleried", "gangliated", "ganglionated", "gangrened", "gargoyled", "gasified", "gaunted", "gauntleted", "gauzed", "gavelled", "gelatinised", "gemmed", "genderized", "gentled", "gentlehearted", "gerrymandered", "gladhearted", "glamored", "globed", "gloried", "glorified", "glycosylated", "goateed", "gobletshaped", "godspeed", "goodhearted", "goodhumored", "goodhumoured", "goodnatured", "goodtempered", "goosed", "goosenecked", "goutweed", "grainfed", "grammaticalized", "grapeseed", "gratified", "graved", "gravelbed", "grayhaired", "greathearted", "greed", "greenweed", "grommeted", "groundspeed", "groved", "gruffed", "guiled", "gulled", "gumshoed", "gunkholed", "gussied", "guyed", "gyrostabilized", "hackneyed", "hagged", "haired", "halfcivilized", "halfhearted", "halfwitted", "haloed", "handballed", "handfed", "handfeed", "hardcoded", "hardhearted", "hardnosed", "hared", "harelipped", "hasted", "hatred", "haunched", "hawkeyed", "hayseed", "hayweed", "hearsed", "hearted", "heartshaped", "heavenlyminded", "heavyfooted", "heavyhearted", "heed", "heired", "heisted", "helicoptered", "helmed", "helmeted", "hemagglutinated", "hemolyzed", "hempseed", "hempweed", "heparinised", "heparinized", "herbed", "highheeled", "highminded", "highpriced", "highspeed", "highspirited", "hilled", "hipped", "hispanicised", "hocked", "hoed", "hogweed", "holstered", "homaged", "hoodooed", "hoofed", "hooknosed", "hooved", "horned", "horrified", "horseshoed", "horseweed", "hotbed", "hotblooded", "hothearted", "hotted", "hottempered", "hued", "humansized", "humidified", "humped", "hundred", "hutched", "hyperinflated", "hyperpigmented", "hyperstimulated", "hypertrophied", "hyphened", "hypophysectomised", "hypophysectomized", "hypopigmented", "hypostatised", "hysterectomized", "iconified", "iconised", "iconized", "ideologised", "illbred", "illconceived", "illdefined", "illdisposed", "illequipped", "illfated", "illfavored", "illfavoured", "illflavored", "illfurnished", "illhumored", "illhumoured", "illimited", "illmannered", "illnatured", "illomened", "illproportioned", "illqualified", "illscented", "illtempered", "illumed", "illusioned", "imbed", "imbossed", "imbued", "immatured", "impassioned", "impenetrated", "imperfected", "imperialised", "imperturbed", "impowered", "imputed", "inarticulated", "inbred", "inbreed", "incapsulated", "incased", "incrustated", "incrusted", "indebted", "indeed", "indemnified", "indentured", "indigested", "indisposed", "inexperienced", "infrared", "intensified", "intentioned", "interbedded", "interbred", "interbreed", "interluded", "introverted", "inured", "inventoried", "iodinated", "iodised", "irked", "ironfisted", "ironweed", "itchweed", "ivied", "ivyweed", "jagged", "jellified", "jerseyed", "jetlagged", "jetpropelled", "jeweled", "jewelled", "jewelweed", "jiggered", "jimmyweed", "jimsonweed", "jointweed", "joyweed", "jungled", "juried", "justiceweed", "justified", "karstified", "kerchiefed", "kettleshaped", "kibbled", "kidneyshaped", "kimonoed", "kindhearted", "kindred", "kingsized", "kirtled", "knacked", "knapweed", "kneed", "knobbed", "knobweed", "knopweed", "knotweed", "lakebed", "lakeweed", "lamed", "lamellated", "lanceshaped", "lanceted", "landbased", "lapeled", "lapelled", "largehearted", "lariated", "lased", "latticed", "lauded", "lavaged", "lavendered", "lawned", "led", "lefteyed", "legitimatised", "legitimatized", "leisured", "lensshaped", "leveed", "levied", "lichened", "lichenized", "lidded", "lifesized", "lightfingered", "lightfooted", "lighthearted", "lightminded", "lightspeed", "lignified", "likeminded", "lilylivered", "limbed", "linearised", "linearized", "linefeed", "linseed", "lionhearted", "liquefied", "liquified", "lithified", "liveried", "lobbied", "located", "locoweed", "longarmed", "longhaired", "longhorned", "longlegged", "longnecked", "longsighted", "longwinded", "lopsided", "loudmouthed", "louvered", "louvred", "lowbred", "lowpriced", "lowspirited", "lozenged", "lunated", "lyrated", "lysinated", "maced", "macroaggregated", "macrodissected", "maculated", "madweed", "magnified", "maidenweed", "maladapted", "maladjusted", "malnourished", "malrotated", "maned", "mannered", "manuevered", "manyhued", "manyshaped", "manysided", "masted", "mealymouthed", "meanspirited", "membered", "membraned", "metaled", "metalized", "metallised", "metallized", "metamerized", "metathesized", "meted", "methylated", "mettled", "microbrecciated", "microminiaturized", "microstratified", "middleaged", "midsized", "miffed", "mildhearted", "milkweed", "miniskirted", "misactivated", "misaligned", "mischiefed", "misclassified", "misdeed", "misdemeaned", "mismannered", "misnomered", "misproportioned", "miswired", "mitred", "mitted", "mittened", "moneyed", "monocled", "mononucleated", "monospaced", "monotoned", "monounsaturated", "mortified", "moseyed", "motorised", "motorized", "moussed", "moustached", "muddied", "mugweed", "multiarmed", "multibarreled", "multibladed", "multicelled", "multichambered", "multichanneled", "multichannelled", "multicoated", "multidirected", "multiengined", "multifaceted", "multilaminated", "multilaned", "multilayered", "multilobed", "multilobulated", "multinucleated", "multipronged", "multisegmented", "multisided", "multispeed", "multistemmed", "multistoried", "multitalented", "multitoned", "multitowered", "multivalued", "mummied", "mummified", "mustached", "mustachioed", "mutinied", "myelinated", "mystified", "mythicised", "naked", "narcotised", "narrowminded", "natured", "neaped", "nearsighted", "necrosed", "nectared", "need", "needleshaped", "newfangled", "newlywed", "nibbed", "nimblewitted", "nippled", "nixed", "nobled", "noduled", "noised", "nonaccented", "nonactivated", "nonadsorbed", "nonadulterated", "nonaerated", "nonaffiliated", "nonaliased", "nonalienated", "nonaligned", "nonarchived", "nonarmored", "nonassociated", "nonattenuated", "nonblackened", "nonbreastfed", "nonbrecciated", "nonbuffered", "nonbuttered", "noncarbonated", "noncarbonized", "noncatalogued", "noncatalyzed", "noncategorized", "noncertified", "nonchlorinated", "nonciliated", "noncircumcised", "noncivilized", "nonclassified", "noncoated", "noncodified", "noncoerced", "noncommercialized", "noncommissioned", "noncompacted", "noncompiled", "noncomplicated", "noncomposed", "noncomputed", "noncomputerized", "nonconcerted", "nonconditioned", "nonconfirmed", "noncongested", "nonconjugated", "noncooled", "noncorrugated", "noncoupled", "noncreated", "noncrowded", "noncultured", "noncurated", "noncushioned", "nondecoded", "nondecomposed", "nondedicated", "nondeferred", "nondeflated", "nondegenerated", "nondegraded", "nondelegated", "nondelimited", "nondelineated", "nondemarcated", "nondeodorized", "nondeployed", "nonderivatized", "nonderived", "nondetached", "nondetailed", "nondifferentiated", "nondigested", "nondigitized", "nondilapidated", "nondilated", "nondimensionalised", "nondimensionalized", "nondirected", "nondisabled", "nondisciplined", "nondispersed", "nondisputed", "nondisqualified", "nondisrupted", "nondisseminated", "nondissipated", "nondissolved", "nondistressed", "nondistributed", "nondiversified", "nondiverted", "nondocumented", "nondomesticated", "nondoped", "nondrafted", "nondrugged", "nondubbed", "nonducted", "nonearthed", "noneclipsed", "nonedged", "nonedited", "nonelasticized", "nonelectrified", "nonelectroplated", "nonelectroporated", "nonelevated", "noneliminated", "nonelongated", "nonembedded", "nonembodied", "nonemphasized", "nonencapsulated", "nonencoded", "nonencrypted", "nonendangered", "nonengraved", "nonenlarged", "nonenriched", "nonentangled", "nonentrenched", "nonepithelized", "nonequilibrated", "nonestablished", "nonetched", "nonethoxylated", "nonethylated", "nonetiolated", "nonexaggerated", "nonexcavated", "nonexhausted", "nonexperienced", "nonexpired", "nonfabricated", "nonfalsified", "nonfeathered", "nonfeatured", "nonfed", "nonfederated", "nonfeed", "nonfenestrated", "nonfertilized", "nonfilamented", "nonfinanced", "nonfinished", "nonfinned", "nonfissured", "nonflagellated", "nonflagged", "nonflared", "nonflavored", "nonfluidized", "nonfluorinated", "nonfluted", "nonforested", "nonformalized", "nonformatted", "nonfragmented", "nonfragranced", "nonfranchised", "nonfreckled", "nonfueled", "nonfumigated", "nonfunctionalized", "nonfunded", "nongalvanized", "nongated", "nongelatinized", "nongendered", "nongeneralized", "nongenerated", "nongifted", "nonglazed", "nonglucosated", "nonglucosylated", "nonglycerinated", "nongraded", "nongrounded", "nonhalogenated", "nonhandicapped", "nonhospitalised", "nonhospitalized", "nonhydrated", "nonincorporated", "nonindexed", "noninfected", "noninfested", "noninitialized", "noninitiated", "noninoculated", "noninseminated", "noninstitutionalized", "noninsured", "nonintensified", "noninterlaced", "noninterpreted", "nonintroverted", "noninvestigated", "noninvolved", "nonirrigated", "nonisolated", "nonisomerized", "nonissued", "nonitalicized", "nonitemized", "noniterated", "nonjaded", "nonlabelled", "nonlaminated", "nonlateralized", "nonlayered", "nonlegalized", "nonlegislated", "nonlesioned", "nonlexicalized", "nonliberated", "nonlichenized", "nonlighted", "nonlignified", "nonlimited", "nonlinearized", "nonlinked", "nonlobed", "nonlobotomized", "nonlocalized", "nonlysed", "nonmachined", "nonmalnourished", "nonmandated", "nonmarginalized", "nonmassaged", "nonmatriculated", "nonmatted", "nonmatured", "nonmechanized", "nonmedicated", "nonmedullated", "nonmentioned", "nonmetabolized", "nonmetallized", "nonmetastasized", "nonmetered", "nonmethoxylated", "nonmilled", "nonmineralized", "nonmirrored", "nonmodeled", "nonmoderated", "nonmodified", "nonmonetized", "nonmonitored", "nonmortgaged", "nonmotorized", "nonmottled", "nonmounted", "nonmultithreaded", "nonmutilated", "nonmyelinated", "nonnormalized", "nonnucleated", "nonobjectified", "nonobligated", "nonoccupied", "nonoiled", "nonopinionated", "nonoxygenated", "nonpaginated", "nonpaired", "nonparalyzed", "nonparameterized", "nonparasitized", "nonpasteurized", "nonpatterned", "nonphased", "nonphosphatized", "nonphosphorized", "nonpierced", "nonpigmented", "nonpiloted", "nonpipelined", "nonpitted", "nonplussed", "nonpuffed", "nonrandomized", "nonrated", "nonrefined", "nonregistered", "nonregulated", "nonrelated", "nonretarded", "nonsacred", "nonsalaried", "nonsanctioned", "nonsaturated", "nonscented", "nonscheduled", "nonseasoned", "nonsecluded", "nonsegmented", "nonsegregated", "nonselected", "nonsolidified", "nonspecialized", "nonspored", "nonstandardised", "nonstandardized", "nonstratified", "nonstressed", "nonstriated", "nonstriped", "nonstructured", "nonstylised", "nonstylized", "nonsubmerged", "nonsubscripted", "nonsubsidised", "nonsubsidized", "nonsubstituted", "nonsyndicated", "nonsynthesised", "nontabulated", "nontalented", "nonthreaded", "nontinted", "nontolerated", "nontranslated", "nontunnelled", "nonunified", "nonunionised", "nonupholstered", "nonutilised", "nonutilized", "nonvalued", "nonvaried", "nonverbalized", "nonvitrified", "nonvolatilised", "nonvolatilized", "normed", "nosebleed", "notated", "notified", "nuanced", "nullified", "numerated", "oarweed", "objectified", "obliqued", "obtunded", "occupied", "octupled", "odored", "oilseed", "oinked", "oldfashioned", "onesided", "oophorectomized", "opaqued", "openhearted", "openminded", "openmouthed", "opiated", "opinionated", "oracled", "oreweed", "ossified", "outbreed", "outmoded", "outrigged", "outriggered", "outsized", "outskated", "outspeed", "outtopped", "outtrumped", "outvoiced", "outweed", "ovated", "overadorned", "overaged", "overalled", "overassured", "overbred", "overbreed", "overcomplicated", "overdamped", "overdetailed", "overdiversified", "overdyed", "overequipped", "overfatigued", "overfed", "overfeed", "overindebted", "overintensified", "overinventoried", "overmagnified", "overmodified", "overpreoccupied", "overprivileged", "overproportionated", "overqualified", "overseed", "oversexed", "oversimplified", "oversized", "oversophisticated", "overstudied", "oversulfated", "ovicelled", "ovoidshaped", "ozonated", "pacified", "packeted", "palatalized", "paled", "palsied", "paned", "panicled", "parabled", "parallelepiped", "parallelized", "parallelopiped", "parenthesised", "parodied", "parqueted", "passioned", "paunched", "pauperised", "pedigreed", "pedimented", "pedunculated", "pegged", "peglegged", "penanced", "pencilshaped", "permineralized", "personified", "petrified", "photodissociated", "photoduplicated", "photoed", "photoinduced", "photolysed", "photolyzed", "pied", "pigeoned", "pigtailed", "pigweed", "pilastered", "pillared", "pilloried", "pimpled", "pinealectomised", "pinealectomized", "pinfeathered", "pinnacled", "pinstriped", "pixellated", "pixilated", "pixillated", "plainclothed", "plantarflexed", "pled", "plumaged", "pocked", "pokeweed", "polychlorinated", "polyunsaturated", "ponytailed", "pooched", "poorspirited", "popeyed", "poppyseed", "porcelainized", "porched", "poshed", "pottered", "poxed", "preachified", "precertified", "preclassified", "preconized", "preinoculated", "premed", "prenotified", "preoccupied", "preposed", "prequalified", "preshaped", "presignified", "prespecified", "prettified", "pried", "principled", "proceed", "prophesied", "propounded", "prosed", "protonated", "proudhearted", "proxied", "pulpified", "pumpkinseed", "puppied", "purebred", "pured", "pureed", "purified", "pustuled", "putrefied", "pyjamaed", "quadruped", "qualified", "quantified", "quantised", "quantized", "quarried", "queried", "questoned", "quicktempered", "quickwitted", "quiesced", "quietened", "quizzified", "racemed", "radiosensitised", "ragweed", "raindrenched", "ramped", "rapeseed", "rarefied", "rarified", "ratified", "razoredged", "reaccelerated", "reaccompanied", "reachieved", "reacknowledged", "readdicted", "readied", "reamplified", "reannealed", "reassociated", "rebadged", "rebiopsied", "recabled", "recategorised", "receipted", "recentred", "recertified", "rechoreographed", "reclarified", "reclassified", "reconferred", "recrystalized", "rectified", "recursed", "red", "redblooded", "redefied", "redenied", "rednecked", "redshifted", "redweed", "redyed", "reed", "reembodied", "reenlighted", "refeed", "refereed", "reflexed", "refortified", "refronted", "refuged", "reglorified", "reimpregnated", "reinitialized", "rejustified", "related", "reliquefied", "remedied", "remodified", "remonetized", "remythologized", "renotified", "renullified", "renumerated", "reoccupied", "repacified", "repurified", "reputed", "requalified", "rescinded", "reseed", "reshoed", "resolidified", "resorbed", "respecified", "restudied", "retabulated", "reticulated", "retinted", "retreed", "retroacted", "reunified", "reverified", "revested", "revivified", "rewed", "ridgepoled", "riffled", "rightminded", "rigidified", "rinded", "riped", "rited", "ritualised", "riverbed", "rivered", "roached", "roadbed", "robotised", "robotized", "romanized", "rosetted", "rosined", "roughhearted", "rubied", "ruddied", "runcinated", "russeted", "sabled", "sabred", "sabretoothed", "sacheted", "sacred", "saddlebred", "sainted", "salaried", "samoyed", "sanctified", "satellited", "savvied", "sawtoothed", "scandalled", "scarified", "scarped", "sceptred", "scissored", "screed", "screwshaped", "scrupled", "sculked", "scurried", "scuttled", "seabed", "seaweed", "seed", "seedbed", "selfassured", "selforganized", "semicivilized", "semidetached", "semidisassembled", "semidomesticated", "semipetrified", "semipronated", "semirefined", "semivitrified", "sentineled", "sepaled", "sepalled", "sequinned", "sexed", "shagged", "shaggycoated", "shaggyhaired", "shaled", "shammed", "sharpangled", "sharpclawed", "sharpcornered", "sharpeared", "sharpedged", "sharpeyed", "sharpflavored", "sharplimbed", "sharpnosed", "sharpsighted", "sharptailed", "sharptongued", "sharptoothed", "sharpwitted", "sharpworded", "shed", "shellbed", "shieldshaped", "shimmied", "shinned", "shirted", "shirtsleeved", "shoed", "shortbeaked", "shortbilled", "shortbodied", "shorthaired", "shortlegged", "shortlimbed", "shortnecked", "shortnosed", "shortsighted", "shortsleeved", "shortsnouted", "shortstaffed", "shorttailed", "shorttempered", "shorttoed", "shorttongued", "shortwinded", "shortwinged", "shotted", "shred", "shrewsized", "shrined", "shrinkproofed", "sickbed", "sickleshaped", "sickleweed", "signalised", "signified", "silicified", "siliconized", "silkweed", "siltsized", "silvertongued", "simpleminded", "simplified", "singlebarreled", "singlebarrelled", "singlebed", "singlebladed", "singlebreasted", "singlecelled", "singlefooted", "singlelayered", "singleminded", "singleseeded", "singleshelled", "singlestranded", "singlevalued", "sissified", "sistered", "sixgilled", "sixmembered", "sixsided", "sixstoried", "skulled", "slickered", "slipcased", "slowpaced", "slowwitted", "slurried", "smallminded", "smoothened", "smoothtongued", "snaggletoothed", "snouted", "snowballed", "snowcapped", "snowshed", "snowshoed", "snubnosed", "so-called", "sofabed", "softhearted", "sogged", "soled", "solidified", "soliped", "sorbed", "souled", "spearshaped", "specified", "spectacled", "sped", "speeched", "speechified", "speed", "spied", "spiffied", "spindleshaped", "spiritualised", "spirted", "splayfooted", "spoonfed", "spoonfeed", "spoonshaped", "spreadeagled", "squarejawed", "squareshaped", "squareshouldered", "squaretoed", "squeegeed", "staled", "starshaped", "starspangled", "starstudded", "statechartered", "statesponsored", "statued", "steadied", "steampowered", "steed", "steelhearted", "steepled", "sterned", "stiffnecked", "stilettoed", "stimied", "stinkweed", "stirrupshaped", "stockinged", "storeyed", "storied", "stouthearted", "straitlaced", "stratified", "strawberryflavored", "streambed", "stressinduced", "stretchered", "strictured", "strongbodied", "strongboned", "strongflavored", "stronghearted", "stronglimbed", "strongminded", "strongscented", "strongwilled", "stubbled", "studied", "stultified", "stupefied", "styed", "stymied", "subclassified", "subcommissioned", "subminiaturised", "subsaturated", "subulated", "suburbanised", "suburbanized", "suburbed", "succeed", "sueded", "sugarrelated", "sulfurized", "sunbed", "superhardened", "superinfected", "supersimplified", "surefooted", "sweetscented", "swifted", "swordshaped", "syllabified", "syphilized", "tabularized", "talented", "tarpapered", "tautomerized", "teated", "teed", "teenaged", "teetotaled", "tenderhearted", "tentacled", "tenured", "termed", "ternated", "testbed", "testified", "theatricalised", "theatricalized", "themed", "thicketed", "thickskinned", "thickwalled", "thighed", "thimbled", "thimblewitted", "thonged", "thoroughbred", "thralled", "threated", "throated", "throughbred", "thyroidectomised", "thyroidectomized", "tiaraed", "ticktocked", "tidied", "tightassed", "tightfisted", "tightlipped", "timehonoured", "tindered", "tined", "tinselled", "tippytoed", "tiptoed", "titled", "toed", "tomahawked", "tonged", "toolshed", "toothplated", "toplighted", "torchlighted", "toughhearted", "traditionalized", "trajected", "tranced", "transgendered", "transliterated", "translocated", "transmogrified", "treadled", "treed", "treelined", "tressed", "trialled", "triangled", "trifoliated", "trifoliolated", "trilobed", "trucklebed", "truehearted", "trumpetshaped", "trumpetweed", "tuberculated", "tumbleweed", "tunnelshaped", "turbaned", "turreted", "turtlenecked", "tuskshaped", "tweed", "twigged", "typified", "ulcered", "ultracivilised", "ultracivilized", "ultracooled", "ultradignified", "ultradispersed", "ultrafiltered", "ultrared", "ultrasimplified", "ultrasophisticated", "unabandoned", "unabashed", "unabbreviated", "unabetted", "unabolished", "unaborted", "unabraded", "unabridged", "unabsolved", "unabsorbed", "unaccelerated", "unaccented", "unaccentuated", "unacclimatised", "unacclimatized", "unaccompanied", "unaccomplished", "unaccosted", "unaccredited", "unaccrued", "unaccumulated", "unaccustomed", "unacidulated", "unacquainted", "unacquitted", "unactivated", "unactuated", "unadapted", "unaddicted", "unadjourned", "unadjudicated", "unadjusted", "unadmonished", "unadopted", "unadored", "unadorned", "unadsorbed", "unadulterated", "unadvertised", "unaerated", "unaffiliated", "unaggregated", "unagitated", "unaimed", "unaired", "unaliased", "unalienated", "unaligned", "unallocated", "unalloyed", "unalphabetized", "unamassed", "unamortized", "unamplified", "unanaesthetised", "unanaesthetized", "unaneled", "unanesthetised", "unanesthetized", "unangered", "unannealed", "unannexed", "unannihilated", "unannotated", "unanointed", "unanticipated", "unappareled", "unappendaged", "unapportioned", "unapprenticed", "unapproached", "unappropriated", "unarbitrated", "unarched", "unarchived", "unarmored", "unarmoured", "unarticulated", "unascertained", "unashamed", "unaspirated", "unassembled", "unasserted", "unassessed", "unassociated", "unassorted", "unassuaged", "unastonished", "unastounded", "unatoned", "unattained", "unattainted", "unattenuated", "unattributed", "unauctioned", "unaudited", "unauthenticated", "unautographed", "unaverted", "unawaked", "unawakened", "unawarded", "unawed", "unbaffled", "unbaited", "unbalconied", "unbanded", "unbanished", "unbaptised", "unbaptized", "unbarreled", "unbarrelled", "unbattered", "unbeaded", "unbearded", "unbeneficed", "unbesotted", "unbetrayed", "unbetrothed", "unbiased", "unbiassed", "unbigoted", "unbilled", "unblackened", "unblanketed", "unblasphemed", "unblazoned", "unblistered", "unblockaded", "unbloodied", "unbodied", "unbonded", "unbothered", "unbounded", "unbracketed", "unbranded", "unbreaded", "unbrewed", "unbridged", "unbridled", "unbroached", "unbudgeted", "unbuffed", "unbuffered", "unburnished", "unbutchered", "unbuttered", "uncached", "uncaked", "uncalcified", "uncalibrated", "uncamouflaged", "uncamphorated", "uncanceled", "uncancelled", "uncapitalized", "uncarbonated", "uncarpeted", "uncased", "uncashed", "uncastrated", "uncatalogued", "uncatalysed", "uncatalyzed", "uncategorised", "uncatered", "uncaulked", "uncelebrated", "uncensored", "uncensured", "uncertified", "unchambered", "unchanneled", "unchannelled", "unchaperoned", "uncharacterized", "uncharted", "unchartered", "unchastened", "unchastised", "unchelated", "uncherished", "unchilled", "unchristened", "unchronicled", "uncircumcised", "uncircumscribed", "uncited", "uncivilised", "uncivilized", "unclarified", "unclassed", "unclassified", "uncleaved", "unclimbed", "unclustered", "uncluttered", "uncoagulated", "uncoded", "uncodified", "uncoerced", "uncoined", "uncollapsed", "uncollated", "uncolonised", "uncolonized", "uncolumned", "uncombined", "uncommented", "uncommercialised", "uncommercialized", "uncommissioned", "uncommitted", "uncompacted", "uncompartmentalized", "uncompartmented", "uncompensated", "uncompiled", "uncomplicated", "uncompounded", "uncomprehened", "uncomputed", "unconcealed", "unconceded", "unconcluded", "uncondensed", "unconditioned", "unconfined", "unconfirmed", "uncongested", "unconglomerated", "uncongratulated", "unconjugated", "unconquered", "unconsecrated", "unconsoled", "unconsolidated", "unconstipated", "unconstricted", "unconstructed", "unconsumed", "uncontacted", "uncontracted", "uncontradicted", "uncontrived", "unconverted", "unconveyed", "unconvicted", "uncooked", "uncooled", "uncoordinated", "uncopyrighted", "uncored", "uncorrelated", "uncorroborated", "uncosted", "uncounseled", "uncounselled", "uncounterfeited", "uncoveted", "uncrafted", "uncramped", "uncrannied", "uncrazed", "uncreamed", "uncreased", "uncreated", "uncredentialled", "uncredited", "uncrested", "uncrevassed", "uncrippled", "uncriticised", "uncriticized", "uncropped", "uncrosslinked", "uncrowded", "uncrucified", "uncrumbled", "uncrystalized", "uncrystallised", "uncrystallized", "uncubed", "uncuddled", "uncued", "unculled", "uncultivated", "uncultured", "uncupped", "uncurated", "uncurbed", "uncurried", "uncurtained", "uncushioned", "undamped", "undampened", "undappled", "undarkened", "undated", "undaubed", "undazzled", "undeadened", "undeafened", "undebated", "undebunked", "undeceased", "undecimalized", "undeciphered", "undecked", "undeclared", "undecomposed", "undeconstructed", "undedicated", "undefeated", "undeferred", "undefied", "undefined", "undeflected", "undefrauded", "undefrayed", "undegassed", "undejected", "undelegated", "undeleted", "undelimited", "undelineated", "undemented", "undemolished", "undemonstrated", "undenatured", "undenied", "undented", "undeodorized", "undepicted", "undeputized", "underaged", "underarmed", "underassessed", "underbred", "underbudgeted", "undercapitalised", "undercapitalized", "underdiagnosed", "underdocumented", "underequipped", "underexploited", "underexplored", "underfed", "underfeed", "underfurnished", "undergoverned", "undergrazed", "underinflated", "underinsured", "underinvested", "underived", "undermaintained", "undermentioned", "undermotivated", "underperceived", "underpowered", "underprivileged", "underqualified", "underrehearsed", "underresourced", "underripened", "undersaturated", "undersexed", "undersized", "underspecified", "understaffed", "understocked", "understressed", "understudied", "underutilised", "underventilated", "undescaled", "undesignated", "undetached", "undetailed", "undetained", "undeteriorated", "undeterred", "undetonated", "undevised", "undevoted", "undevoured", "undiagnosed", "undialed", "undialysed", "undialyzed", "undiapered", "undiffracted", "undigested", "undignified", "undiluted", "undiminished", "undimmed", "undipped", "undirected", "undisciplined", "undiscouraged", "undiscussed", "undisfigured", "undisguised", "undisinfected", "undismayed", "undisposed", "undisproved", "undisputed", "undisrupted", "undissembled", "undissipated", "undissociated", "undissolved", "undistilled", "undistorted", "undistracted", "undistributed", "undisturbed", "undiversified", "undiverted", "undivulged", "undoctored", "undocumented", "undomesticated", "undosed", "undramatised", "undrilled", "undrugged", "undubbed", "unduplicated", "uneclipsed", "unedged", "unedited", "unejaculated", "unejected", "unelaborated", "unelapsed", "unelected", "unelectrified", "unelevated", "unelongated", "unelucidated", "unemaciated", "unemancipated", "unemasculated", "unembalmed", "unembed", "unembellished", "unembodied", "unemboldened", "unemerged", "unenacted", "unencoded", "unencrypted", "unencumbered", "unendangered", "unendorsed", "unenergized", "unenfranchised", "unengraved", "unenhanced", "unenlarged", "unenlivened", "unenraptured", "unenriched", "unentangled", "unentitled", "unentombed", "unentranced", "unentwined", "unenumerated", "unenveloped", "unenvied", "unequaled", "unequalised", "unequalized", "unequalled", "unequipped", "unerased", "unerected", "uneroded", "unerupted", "unescorted", "unestablished", "unevaluated", "unexaggerated", "unexampled", "unexcavated", "unexceeded", "unexcelled", "unexecuted", "unexerted", "unexhausted", "unexpensed", "unexperienced", "unexpired", "unexploited", "unexplored", "unexposed", "unexpurgated", "unextinguished", "unfabricated", "unfaceted", "unfanned", "unfashioned", "unfathered", "unfathomed", "unfattened", "unfavored", "unfavoured", "unfazed", "unfeathered", "unfed", "unfeigned", "unfermented", "unfertilised", "unfertilized", "unfilleted", "unfiltered", "unfinished", "unflavored", "unflavoured", "unflawed", "unfledged", "unfleshed", "unflurried", "unflushed", "unflustered", "unfluted", "unfocussed", "unforested", "unformatted", "unformulated", "unfortified", "unfractionated", "unfractured", "unfragmented", "unfrequented", "unfretted", "unfrosted", "unfueled", "unfunded", "unfurnished", "ungarbed", "ungarmented", "ungarnished", "ungeared", "ungerminated", "ungifted", "unglazed", "ungoverned", "ungraded", "ungrasped", "ungratified", "ungroomed", "ungrounded", "ungrouped", "ungummed", "ungusseted", "unhabituated", "unhampered", "unhandicapped", "unhardened", "unharvested", "unhasped", "unhatched", "unheralded", "unhindered", "unhomogenised", "unhomogenized", "unhonored", "unhonoured", "unhooded", "unhusked", "unhyphenated", "unified", "unillustrated", "unimpacted", "unimpaired", "unimpassioned", "unimpeached", "unimpelled", "unimplemented", "unimpregnated", "unimprisoned", "unimpugned", "unincorporated", "unincubated", "unincumbered", "unindemnified", "unindexed", "unindicted", "unindorsed", "uninduced", "unindustrialised", "unindustrialized", "uninebriated", "uninfected", "uninflated", "uninflected", "uninhabited", "uninhibited", "uninitialised", "uninitialized", "uninitiated", "uninoculated", "uninseminated", "uninsulated", "uninsured", "uninterpreted", "unintimidated", "unintoxicated", "unintroverted", "uninucleated", "uninverted", "uninvested", "uninvolved", "unissued", "unjaundiced", "unjointed", "unjustified", "unkeyed", "unkindled", "unlabelled", "unlacquered", "unlamented", "unlaminated", "unlarded", "unlaureled", "unlaurelled", "unleaded", "unleavened", "unled", "unlettered", "unlicenced", "unlighted", "unlimbered", "unlimited", "unlined", "unlipped", "unliquidated", "unlithified", "unlittered", "unliveried", "unlobed", "unlocalised", "unlocalized", "unlocated", "unlogged", "unlubricated", "unmagnified", "unmailed", "unmaimed", "unmaintained", "unmalted", "unmangled", "unmanifested", "unmanipulated", "unmannered", "unmanufactured", "unmapped", "unmarred", "unmastered", "unmatriculated", "unmechanised", "unmechanized", "unmediated", "unmedicated", "unmentioned", "unmerged", "unmerited", "unmetabolised", "unmetabolized", "unmetamorphosed", "unmethylated", "unmineralized", "unmitigated", "unmoderated", "unmodernised", "unmodernized", "unmodified", "unmodulated", "unmolded", "unmolested", "unmonitored", "unmortgaged", "unmotivated", "unmotorised", "unmotorized", "unmounted", "unmutated", "unmutilated", "unmyelinated", "unnaturalised", "unnaturalized", "unnotched", "unnourished", "unobligated", "unobstructed", "unoccupied", "unoiled", "unopposed", "unoptimised", "unordained", "unorganised", "unorganized", "unoriented", "unoriginated", "unornamented", "unoxidized", "unoxygenated", "unpacified", "unpackaged", "unpaired", "unparalleled", "unparallelled", "unparasitized", "unpardoned", "unparodied", "unpartitioned", "unpasteurised", "unpasteurized", "unpatented", "unpaved", "unpedigreed", "unpenetrated", "unpenned", "unperfected", "unperjured", "unpersonalised", "unpersuaded", "unperturbed", "unperverted", "unpestered", "unphosphorylated", "unphotographed", "unpigmented", "unpiloted", "unpledged", "unploughed", "unplumbed", "unpoised", "unpolarized", "unpoliced", "unpolled", "unpopulated", "unposed", "unpowered", "unprecedented", "unpredicted", "unprejudiced", "unpremeditated", "unprescribed", "unpressurised", "unpressurized", "unpriced", "unprimed", "unprincipled", "unprivileged", "unprized", "unprocessed", "unprofaned", "unprofessed", "unprohibited", "unprompted", "unpronounced", "unproposed", "unprospected", "unproved", "unpruned", "unpublicised", "unpublicized", "unpublished", "unpuckered", "unpunctuated", "unpurified", "unqualified", "unquantified", "unquenched", "unquoted", "unranked", "unrated", "unratified", "unrebuked", "unreckoned", "unrecompensed", "unreconciled", "unreconstructed", "unrectified", "unredeemed", "unrefined", "unrefreshed", "unrefrigerated", "unregarded", "unregimented", "unregistered", "unregulated", "unrehearsed", "unrelated", "unrelieved", "unrelinquished", "unrenewed", "unrented", "unrepealed", "unreplicated", "unreprimanded", "unrequited", "unrespected", "unrestricted", "unretained", "unretarded", "unrevised", "unrevived", "unrevoked", "unrifled", "unripened", "unrivaled", "unrivalled", "unroasted", "unroofed", "unrounded", "unruffled", "unsalaried", "unsalted", "unsanctified", "unsanctioned", "unsanded", "unsaponified", "unsated", "unsatiated", "unsatisfied", "unsaturated", "unscaled", "unscarred", "unscathed", "unscented", "unscheduled", "unschooled", "unscreened", "unscripted", "unseamed", "unseared", "unseasoned", "unseeded", "unsegmented", "unsegregated", "unselected", "unserviced", "unsexed", "unshamed", "unshaped", "unsharpened", "unsheared", "unshielded", "unshifted", "unshirted", "unshoed", "unshuttered", "unsifted", "unsighted", "unsilenced", "unsimplified", "unsized", "unskewed", "unskinned", "unslaked", "unsliced", "unsloped", "unsmoothed", "unsoiled", "unsoldered", "unsolicited", "unsolved", "unsophisticated", "unsorted", "unsourced", "unsoured", "unspaced", "unspanned", "unspecialised", "unspecialized", "unspecified", "unspiced", "unstaged", "unstandardised", "unstandardized", "unstapled", "unstarched", "unstarred", "unstated", "unsteadied", "unstemmed", "unsterilised", "unsterilized", "unstickered", "unstiffened", "unstifled", "unstigmatised", "unstigmatized", "unstilted", "unstippled", "unstipulated", "unstirred", "unstocked", "unstoked", "unstoppered", "unstratified", "unstressed", "unstriped", "unstructured", "unstudied", "unstumped", "unsubdued", "unsubmitted", "unsubsidised", "unsubsidized", "unsubstantiated", "unsubstituted", "unsugared", "unsummarized", "unsupervised", "unsuprised", "unsurveyed", "unswayed", "unsweetened", "unsyllabled", "unsymmetrized", "unsynchronised", "unsynchronized", "unsyncopated", "unsyndicated", "unsynthesized", "unsystematized", "untagged", "untainted", "untalented", "untanned", "untaped", "untapered", "untargeted", "untarnished", "untattooed", "untelevised", "untempered", "untenanted", "unterminated", "untextured", "unthickened", "unthinned", "unthrashed", "unthreaded", "unthrottled", "unticketed", "untiled", "untilled", "untilted", "untimbered", "untinged", "untinned", "untinted", "untitled", "untoasted", "untoggled", "untoothed", "untopped", "untoughened", "untracked", "untrammeled", "untrammelled", "untranscribed", "untransduced", "untransferred", "untranslated", "untransmitted", "untraumatized", "untraversed", "untufted", "untuned", "untutored", "unupgraded", "unupholstered", "unutilised", "unutilized", "unuttered", "unvaccinated", "unvacuumed", "unvalidated", "unvalued", "unvandalized", "unvaned", "unvanquished", "unvapourised", "unvapourized", "unvaried", "unvariegated", "unvarnished", "unvented", "unventilated", "unverbalised", "unverbalized", "unverified", "unversed", "unvetted", "unvictimized", "unviolated", "unvitrified", "unvocalized", "unvoiced", "unwaged", "unwarped", "unwarranted", "unwaxed", "unweakened", "unweaned", "unwearied", "unweathered", "unwebbed", "unwed", "unwedded", "unweeded", "unweighted", "unwelded", "unwinterized", "unwired", "unwitnessed", "unwonted", "unwooded", "unworshipped", "unwounded", "unzoned", "uprated", "uprighted", "upsized", "upswelled", "vacuolated", "valanced", "valueoriented", "varied", "vascularised", "vascularized", "vasectomised", "vaunted", "vectorised", "vectorized", "vegged", "verdured", "verified", "vermiculated", "vernacularized", "versified", "verticillated", "vesiculated", "vied", "vilified", "virtualised", "vitrified", "vivified", "volumed", "vulcanised", "wabbled", "wafered", "waisted", "walleyed", "wared", "warmblooded", "warmhearted", "warted", "waterbased", "waterbed", "watercooled", "watersaturated", "watershed", "wavegenerated", "waxweed", "weakhearted", "weakkneed", "weakminded", "wearied", "weatherised", "weatherstriped", "webfooted", "wedgeshaped", "weed", "weeviled", "welladapted", "welladjusted", "wellbred", "wellconducted", "welldefined", "welldisposed", "welldocumented", "wellequipped", "wellestablished", "wellfavored", "wellfed", "wellgrounded", "wellintentioned", "wellmannered", "wellminded", "wellorganised", "wellrounded", "wellshaped", "wellstructured", "whinged", "whinnied", "whiplashed", "whiskered", "wholehearted", "whorled", "widebased", "wideeyed", "widemeshed", "widemouthed", "widenecked", "widespaced", "wilded", "wildered", "wildeyed", "willinghearted", "windspeed", "winterfed", "winterfeed", "winterised", "wirehaired", "wised", "witchweed", "woaded", "wombed", "wooded", "woodshed", "wooled", "woolled", "woollyhaired", "woollystemmed", "woolyhaired", "woolyminded", "wormholed", "wormshaped", "wrappered", "wretched", "wronghearted", "ycleped", "yolked", "zincified", "zinckified", "zinkified", "zombified"];
var uA = {};
Object.defineProperty(uA, "__esModule", {
  value: !0
});
uA.default = eFa;
var RP = K, Yqa = ee, Qqa = Xqa(Zc);
function Xqa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  matchRegularParticiples: Zqa,
  getWords: Jqa
} = Yqa.languageProcessing;
function eFa(e) {
  const a = Jqa(e), t = [];
  return (0, RP.forEach)(a, function(n) {
    (Zqa(n, [/\w+ed($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig]).length !== 0 || (0, RP.includes)(Qqa.default, n)) && t.push(n);
  }), t;
}
Object.defineProperty(My, "__esModule", {
  value: !0
});
My.default = void 0;
var zk = K, DP = Qa, aFa = $6(qy), tFa = $6(uA), nFa = ee;
function $6(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  precedenceException: rFa,
  directPrecedenceException: sFa,
  values: iFa
} = nFa.languageProcessing, oFa = iFa.Clause;
class lFa extends oFa {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, tFa.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns {boolean} Returns true if no exception is found.
   */
  checkParticiples() {
    const a = this.getClauseText(), t = this.getParticiples().filter((n) => !(0, zk.includes)(aFa.default, n) && !this.hasRidException(n) && !sFa(a, n, DP.cannotDirectlyPrecedePassiveParticiple) && !rFa(a, n, DP.cannotBeBetweenPassiveAuxiliaryAndParticiple));
    this.setPassive(t.length > 0);
  }
  /**
   * Checks whether the participle is 'rid' in combination with 'get', 'gets', 'getting', 'got' or 'gotten'.
   * If this is true, the participle is not passive.
   *
   * @param {string} participle   The participle
   *
   * @returns {boolean} Returns true if 'rid' is found in combination with a form of 'get'
   * otherwise returns false.
   */
  hasRidException(a) {
    if (a === "rid") {
      const t = ["get", "gets", "getting", "got", "gotten"];
      return !(0, zk.isEmpty)((0, zk.intersection)(t, this.getAuxiliaries()));
    }
    return !1;
  }
}
My.default = lFa;
Object.defineProperty(dA, "__esModule", {
  value: !0
});
dA.default = zFa;
var dFa = ee, uFa = Fy(My), NP = Fy(Ot), cFa = Fy(wp), pFa = K, gFa = Fy(Xt), mFa = Rt;
function Fy(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  createRegexFromArray: fFa,
  getClauses: hFa
} = dFa.languageProcessing, Dm = {
  Clause: uFa.default,
  stopwords: cFa.default,
  auxiliaries: NP.default,
  ingExclusions: ["king", "cling", "ring", "being", "thing", "something", "anything"],
  regexes: {
    auxiliaryRegex: fFa(NP.default),
    stopCharacterRegex: /([:,]|('ll)|('ve))(?=[ \n\r\t'"+\-»«‹›<>])/ig,
    verbEndingInIngRegex: /\w+ing(?=$|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig
  },
  otherStopWordIndices: []
}, yFa = function(e) {
  let a = e.match(Dm.regexes.verbEndingInIngRegex) || [];
  return a = a.filter((t) => !(0, pFa.includes)(Dm.ingExclusions, (0, gFa.default)(t))), (0, mFa.getIndicesByWordList)(a, e);
};
function zFa(e) {
  return Dm.otherStopWordIndices = yFa(e), hFa(e, Dm);
}
var cA = {}, di = {}, pA = {};
Object.defineProperty(pA, "__esModule", {
  value: !0
});
pA.default = EFa;
var bFa = ee, wFa = Bo, vFa = kFa(T6);
function kFa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  buildFormRule: bk,
  createRulesFromArrays: wk
} = bFa.languageProcessing, LP = (e, a, t, n) => {
  const r = (0, wFa.countSyllablesInWord)(e, vFa.default);
  if (e.endsWith(a)) {
    if (r <= 1)
      return !1;
    const o = `i${a}`, l = e.endsWith(o), u = n.includes(e.slice(0, -o.length)) || n.includes(e.slice(0, -a.length)), c = t.includes(e);
    if (u || r <= (l ? 3 : 2) && !c)
      return !0;
  }
  return !1;
}, _Fa = (e, a, t) => e.endsWith(a) && !t.includes(e), vk = function(e, a, t = [], n = [], r = _Fa) {
  return (o) => o.length < a ? !1 : r(o, e, t, n);
};
function EFa(e, a, t, n) {
  if (vk("er", 4, t.erExceptions, n, LP)(e)) {
    const u = wk(a.comparativeToBase);
    return {
      base: bk(e, u) || e,
      guessedForm: "er"
    };
  }
  if (vk("est", 5, t.estExceptions, n, LP)(e)) {
    const u = wk(a.superlativeToBase);
    return {
      base: bk(e, u) || e,
      guessedForm: "est"
    };
  }
  if (vk("ly", 5, t.lyExceptions)(e)) {
    const u = wk(a.adverbToBase);
    return {
      base: bk(e, u),
      guessedForm: "ly"
    };
  }
  return {
    base: e,
    guessedForm: "base"
  };
}
var ms = {};
Object.defineProperty(ms, "__esModule", {
  value: !0
});
ms.normalizePrefixed = ms.getInfinitive = ms.endsWithIng = ms.checkIrregulars = void 0;
var MP = K, AFa = ee;
const {
  buildFormRule: kk,
  createRulesFromArrays: _k
} = AFa.languageProcessing, j6 = /([aeiouy])/g, x6 = function(e, a) {
  for (const t in a)
    a.hasOwnProperty && (a[t] = new RegExp(a[t], "i"));
  if (a.sevenLetterHyphenPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.sevenLetterHyphenPrefixes, ""),
      prefix: e.substring(0, 8)
    };
  if (a.sevenLetterPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.sevenLetterPrefixes, ""),
      prefix: e.substring(0, 7)
    };
  if (a.fiveLetterHyphenPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.fiveLetterHyphenPrefixes, ""),
      prefix: e.substring(0, 6)
    };
  if (a.fiveLetterPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.fiveLetterPrefixes, ""),
      prefix: e.substring(0, 5)
    };
  if (a.fourLetterHyphenPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.fourLetterHyphenPrefixes, ""),
      prefix: e.substring(0, 5)
    };
  if (a.fourLetterPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.fourLetterPrefixes, ""),
      prefix: e.substring(0, 4)
    };
  if (a.threeLetterHyphenPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.threeLetterHyphenPrefixes, ""),
      prefix: e.substring(0, 4)
    };
  if (a.threeLetterPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.threeLetterPrefixes, ""),
      prefix: e.substring(0, 3)
    };
  if (a.twoLetterHyphenPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.twoLetterHyphenPrefixes, ""),
      prefix: e.substring(0, 3)
    };
  if (a.twoLetterPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.twoLetterPrefixes, ""),
      prefix: e.substring(0, 2)
    };
  if (a.oneLetterPrefixes.test(e) === !0)
    return {
      normalizedWord: e.replace(a.oneLetterPrefixes, ""),
      prefix: e.substring(0, 1)
    };
};
ms.normalizePrefixed = x6;
const TFa = function(e, a, t) {
  let n;
  if (a.forEach(function(r) {
    r.forEach(function(o) {
      o === e && (n = r);
    });
  }), (0, MP.isUndefined)(n)) {
    const r = x6(e, t);
    (0, MP.isUndefined)(r) || a.forEach(function(o) {
      o.forEach(function(l) {
        l === r.normalizedWord && (n = o.map(function(u) {
          return r.prefix.concat(u);
        }));
      });
    });
  }
  return n;
};
ms.checkIrregulars = TFa;
const $Fa = function(e) {
  return e.length > 3 ? e[e.length - 1] === "s" : !1;
}, S6 = function(e) {
  return (e.match(j6) || []).length > 1 && e.length > 4 ? e.substring(e.length - 3, e.length) === "ing" : !1;
};
ms.endsWithIng = S6;
const jFa = function(e) {
  const a = (e.match(j6) || []).length;
  return a > 1 || a === 1 && e.substring(e.length - 3, e.length - 2) !== "e" ? e.substring(e.length - 2, e.length) === "ed" : !1;
}, xFa = function(e, a) {
  const t = _k(a.sFormToInfinitive), n = _k(a.ingFormToInfinitive), r = _k(a.edFormToInfinitive);
  return $Fa(e) ? {
    infinitive: kk(e, t),
    guessedForm: "s"
  } : S6(e) ? {
    infinitive: kk(e, n),
    guessedForm: "ing"
  } : jFa(e) ? {
    infinitive: kk(e, r) || e,
    guessedForm: "ed"
  } : {
    infinitive: e,
    guessedForm: "inf"
  };
};
ms.getInfinitive = xFa;
Object.defineProperty(di, "__esModule", {
  value: !0
});
di.default = void 0;
di.determineIrregularStem = zm;
di.determineIrregularVerbStem = I6;
di.determineRegularStem = C6;
di.determineStem = P6;
di.findShortestAndAlphabeticallyFirst = O6;
var pc = K, SFa = ee, OFa = IFa(pA), l0 = ms;
function IFa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  buildFormRule: hm,
  createRulesFromArrays: ym
} = SFa.languageProcessing;
function O6(e) {
  const a = (0, pc.flatten)(e);
  let t = a.pop();
  return a.forEach((n) => {
    const r = n.length - t.length;
    r === 0 ? n.localeCompare(t) < 0 && (t = n) : r < 0 && (t = n);
  }), t;
}
function zm(e, a) {
  for (const t of a)
    if (t.includes(e))
      return t[0];
  return null;
}
function I6(e, a) {
  const t = (0, l0.checkIrregulars)(e, a.irregularVerbs, a.regexVerb.verbPrefixes);
  return (0, pc.isUndefined)(t) ? null : t[0];
}
function C6(e, a) {
  const t = a.verbs.regexVerb, n = hm(e, ym(a.nouns.regexNoun.singularize));
  if (!(0, pc.isUndefined)(n))
    return (0, l0.endsWithIng)(n) ? hm(n, ym(t.ingFormToInfinitive)) : n;
  const r = a.adjectives.regexAdjective, o = hm(e, ym(r.icallyToBase));
  if (!(0, pc.isUndefined)(o))
    return o;
  const l = [], u = (0, l0.getInfinitive)(e, t).infinitive;
  l.push(u);
  const c = a.adjectives.stopAdjectives, f = a.adjectives.multiSyllableAdjectives ? a.adjectives.multiSyllableAdjectives.list : [], y = (0, OFa.default)(e, r, c, f).base;
  return l.push(y), O6(l);
}
function P6(e, a) {
  const t = a.nouns, n = hm(e, ym(t.regexNoun.possessiveToBase));
  let r, o;
  return (0, pc.isUndefined)(n) ? (r = e, o = zm(e, t.irregularNouns) || zm(e, a.adjectives.irregularAdjectives) || I6(e, a.verbs)) : (r = n, o = zm(n, t.irregularNouns)), o || C6(r, a);
}
di.default = P6;
Object.defineProperty(cA, "__esModule", {
  value: !0
});
cA.default = LFa;
var CFa = K, PFa = ee, RFa = DFa(di);
function DFa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: NFa
} = PFa.languageProcessing;
function LFa(e) {
  const a = (0, CFa.get)(e.getData("morphology"), "en", !1);
  return a ? (t) => (0, RFa.default)(t, a) : NFa;
}
var gA = {};
Object.defineProperty(gA, "__esModule", {
  value: !0
});
gA.default = FFa;
var MFa = ee;
const {
  formatNumber: qFa
} = MFa.helpers;
function FFa(e) {
  const a = 206.835 - 1.015 * e.averageWordsPerSentence - 84.6 * (e.numberOfSyllables / e.numberOfWords);
  return qFa(a);
}
Object.defineProperty(lA, "__esModule", {
  value: !0
});
var R6 = lA.default = void 0, BFa = ee, WFa = co(Ny), UFa = Qa, HFa = co(wp), GFa = co(br), VFa = co(Ly), KFa = co(T6), YFa = co(dA), QFa = co(cA), XFa = co(gA);
function co(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: ZFa
} = BFa.languageProcessing;
let JFa = class extends ZFa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), Object.assign(this.config, {
      language: "en",
      passiveConstructionType: "periphrastic",
      firstWordExceptions: WFa.default,
      functionWords: UFa.all,
      stopWords: HFa.default,
      transitionWords: GFa.default,
      twoPartTransitionWords: VFa.default,
      syllables: KFa.default
    }), Object.assign(this.helpers, {
      getClauses: YFa.default,
      getStemmer: QFa.default,
      fleschReadingScore: XFa.default
    });
  }
};
R6 = lA.default = JFa;
var mA = {}, By = {};
Object.defineProperty(By, "__esModule", {
  value: !0
});
By.default = void 0;
By.default = [
  // Definite articles:
  "el",
  "los",
  "la",
  "las",
  // Indefinite articles:
  "un",
  "una",
  "unas",
  "unos",
  // Numbers 1-10:
  "uno",
  "dos",
  "tres",
  "cuatro",
  "cinco",
  "seis",
  "siete",
  "ocho",
  "nueve",
  "diez",
  // Demonstrative pronouns:
  "este",
  "estos",
  "esta",
  "estas",
  "ese",
  "esos",
  "esa",
  "esas",
  "aquel",
  "aquellos",
  "aquella",
  "aquellas",
  "esto",
  "eso",
  "aquello"
];
var tt = {}, Er = {};
Object.defineProperty(Er, "__esModule", {
  value: !0
});
Er.singleWords = Er.multipleWords = Er.default = Er.allWords = void 0;
const eBa = Er.singleWords = ["además", "adicional", "así", "asimismo", "aún", "aunque", "ciertamente", "como", "concluyendo", "conque", "contrariamente", "cuando", "decididamente", "decisivamente", "después", "diferentemente", "efectivamente", "entonces", "especialmente", "específicamente", "eventualmente", "evidentemente", "finalmente", "frecuentemente", "generalmente", "igualmente", "lógicamente", "luego", "mas", "mientras", "pero", "por", "porque", "posteriormente", "primero", "principalmente", "pronto", "próximamente", "pues", "raramente", "realmente", "seguidamente", "segundo", "semejantemente", "si", "siguiente", "sino", "súbitamente", "supongamos", "también", "tampoco", "tercero", "verbigracia", "vice-versa", "ya"], aBa = Er.multipleWords = ["a causa de", "a continuación", "a diferencia de", "a fin de cuentas", "a la inversa", "a la misma vez", "a más de", "a más de esto", "a menos que", "a no ser que", "a pesar de", "a pesar de eso", "a pesar de todo", "a peser de", "a propósito", "a saber", "a todo esto", "ahora bien", "al contrario", "al fin y al cabo", "al final", "al inicio", "al mismo tiempo", "al principio", "ante todo", "antes bien", "antes de", "antes de nada", "antes que nada", "aparte de", "as así como", "así como", "así mismo", "así pues", "así que", "así y todo", "aún así", "claro está que", "claro que", "claro que sí", "como caso típico", "como decíamos", "como era de esperar", "como es de esperar", "como muestra", "como resultado", "como se ha notado", "como sigue", "comparado con", "con el objeto de", "con el propósito de", "con que", "con relación a", "con tal de que", "con todo", "dado que", "de ahí", "de cierta manera", "de cualquier manera", "de cualquier modo", "de ello resulta que", "de este modo", "de golpe", "de hecho", "de igual manera", "de igual modo", "de igualmanera", "de la manera siguiente", "de la misma forma", "de la misma manera", "de manera semejante", "del mismo modo", "de modo que", "de nuevo", "de otra manera", "de otro modo", "de pronto", "de qualquier manera", "de repente", "de suerte que", "de tal modo", "de todas formas", "de todas maneras", "de todos modos", "de veras", "debido a", "debido a que", "del mismo modo", "dentro de poco", "desde entonces", "después de", "después de todo", "ejemplo de esto", "el caso es que", "en aquel tiempo", "en cambio", "en cierto modo", "en comparación con", "en conclusión", "en concreto", "en conformidad con", "en consecuencia", "en consiguiente", "en contraste con", "en cualquier caso", "en cuanto", "en cuanto a", "en definitiva", "en efecto", "en el caso de que", "en este sentido", "en fin", "en fin de cuentas", "en general", "en lugar de", "en otras palabras", "en otro orden", "en otros términos", "en particular", "en primer lugar", "en primer término", "en primera instancia", "en realidad", "en relación a", "en relación con", "en representación de", "en resumen", "en resumidas cuentas", "en segundo lugar", "en seguida", "en síntesis", "en suma", "en todo caso", "en último término", "en verdad", "en vez de", "en virtud de", "entre ellas figura", "entre ellos figura", "es cierto que", "es decir", "es evidente que", "es incuestionable", "es indudable", "es más", "está claro que", "esto indica", "excepto si", "generalmente por ejemplo", "gracias a", "hasta aquí", "hasta cierto punto", "hasta el momento", "hay que añadir", "igual que", "la mayor parte del tiempo", "la mayoría del tiempo", "lo que es peor", "más tarde", "mejor dicho", "mientras tanto", "mirándolo todo", "nadie puede ignorar", "no faltaría más", "no obstante", "o sea", "otra vez", "otro aspecto", "para ilustrar", "para concluir", "para conclusión", "para continuar", "para empezar", "para finalizar", "para mencionar una cosa", "para que", "para resumir", "para terminar", "pongamos por caso", "por añadidura", "por cierto", "por consiguiente", "por ejemplo", "por el consiguiente", "por el contrario", "por el hecho que", "por eso", "por esta razón", "por esto", "por fin", "por la mayor parte", "por lo general", "por lo que", "por lo tanto", "por otro lado", "por otra parte", "por otro lado", "por supuesto", "por tanto", "por último", "por un lado", "por una parte", "primero que nada", "primero que todo", "pues bien", "puesto que", "rara vez", "resulta que", "sea como sea", "seguidamente entre tanto", "si bien", "siempre que", "siempre y cuando", "sigue que", "sin duda", "sin embargo", "sin ir más lejos", "sobre todo", "supuesto que", "tal como", "tales como", "tan pronto como", "tanto como", "una vez", "ya que"], tBa = Er.allWords = eBa.concat(aBa);
Er.default = tBa;
Object.defineProperty(tt, "__esModule", {
  value: !0
});
tt.filteredAtEnding = tt.filteredAtBeginningAndEnding = tt.filteredAtBeginning = tt.filteredAnywhere = tt.default = tt.cannotDirectlyPrecedePassiveParticiple = tt.cannotBeBetweenPassiveAuxiliaryAndParticiple = tt.all = void 0;
var D6 = Er, gl = nBa(Ba);
function nBa(e) {
  return e && e.__esModule ? e : { default: e };
}
const fA = ["el", "la", "los", "las", "un", "una", "unos", "unas"], hA = ["dos", "tres", "cuatro", "cinco", "seis", "siete", "ocho", "nueve", "diez", "once", "doce", "trece", "catorce", "quince", "dieciseis", "diecisiete", "dieciocho", "diecinueve", "veinte", "cien", "centena", "mil", "millon", "millones"], yA = ["primera", "segunda", "tercera", "cuarto", "cuarta", "quinto", "quinta", "sexto", "sexta", "septimo", "septima", "octavo", "octava", "noveno", "novena", "décimo", "décima", "vigésimo", "vigésima", "primeros", "primeras", "segundos", "segundas", "terceros", "terceras", "cuartos", "cuartas", "quintos", "quintas", "sextos", "sextas", "septimos", "septimas", "octavos", "octavas", "novenos", "novenas", "décimos", "décimas", "vigésimos", "vigésimas"], N6 = ["yo", "yos", "yoes", "tú", "él", "ella", "ello", "nosotros", "nosotras", "vosotros", "vosotras", "ustedes", "ellos", "ellas"], zA = ["me", "te", "lo", "se", "nos", "os", "les"], bA = ["mí", "ti", "ud", "uds", "usted"], wA = ["conmigo", "contigo", "consigo"], L6 = ["este", "ese", "aquel", "esta", "esa", "aquella", "estos", "esos", "aquellos", "estas", "esas", "aquellas", "esto", "eso", "aquello"], vA = ["mi", "mis", "mío", "míos", "mía", "mías", "nuestro", "nuestros", "nuestra", "nuestras", "tuyo", "tuyos", "tuya", "tuyas", "tu", "tus", "vuestro", "vuestros", "vuestra", "vuestras", "suyo", "suyos", "suya", "suyas", "su", "sus"], M6 = ["bastante", "bastantes", "mucho", "muchas", "mucha", "muchos", "más", "muchísimo", "muchísima", "muchísimos", "muchísimas", "demasiado", "demasiada", "demasiados", "demasiadas", "poco", "poca", "pocos", "pocas", "menos", "poquísimo", "poquísima", "poquísimos", "poquísimas", "demás", "otros", "otras", "todo", "toda", "todos", "todas"], kA = ["alguien", "algo", "algún", "alguno", "alguna", "algunos", "algunas", "nadie", "nada", "ningún", "ninguno", "ninguna", "ningunos", "ningunas", "tanto", "tantos", "tanta", "tantas"], _A = ["cuyas", "cual"], EA = ["cuyo"], AA = ["comoquiera", "cualesquiera", "cualquier", "cuanta", "cuantas", "cuanto", "cuantos", "cuál", "cuáles", "cuánta", "cuántas", "cuánto", "cuántos", "cómo", "dondequiera", "dónde", "quien", "quienes", "quienquiera", "quién", "quiénes", "qué"], q6 = ["allí", "ahí", "allá", "aquí", "acá", "adónde", "delante", "detrás", "debajo", "adelante", "atrás", "adentro", "afuera"], F6 = ["he", "has", "ha", "hay", "hemos", "habéis", "han", "hube", "hubiste", "hubo", "hubimos", "hubisteis", "hubieron", "había", "habías", "habíamos", "habíais", "habían", "habría", "habrías", "habríais", "habrían", "habré", "habrás", "habrá", "habremos", "habréis", "habrán", "haya", "hayas", "hayamos", "hayáis", "hayan", "hubiera", "hubieras", "hubiéramos", "hubierais", "hubieran", "hubiese", "hubieses", "hubiésemos", "hubieseis", "hubiesen", "hubiere", "hubieres", "hubiéremos", "hubiereis", "hubieren", "habed", "habido", "debo", "debes", "debe", "debemos", "debéis", "deben", "debí", "debiste", "debió", "debimos", "debisteis", "debieron", "debía", "debías", "debíamos", "debíais", "debían", "debería", "deberías", "deberíamos", "deberíais", "deberían", "deberé", "deberás", "deberá", "deberemos", "deberéis", "deberán", "deba", "debas", "debamos", "debáis", "deban", "debiera", "debieras", "debiéramos", "debierais", "debieran", "debiese", "debieses", "debiésemos", "debieseis", "debiesen", "debiere", "debieres", "debiéremos", "debiereis", "debieren", "debed", "debido", "empiezo", "empiezas", "empieza", "empezáis", "empiezan", "empecé", "empezaste", "empezó", "empezamos", "empezasteis", "empezaron", "empezaba", "empezabas", "empezábamos", "empezabais", "empezaban", "empezaría", "empezarías", "empezaríamos", "empezaríais", "empezarían", "empezaré", "empezarás", "empezará", "empezaremos", "empezaréis", "empezarán", "empiece", "empieces", "empecemos", "empecéis", "empiecen", "empezara", "empezaras", "empezáramos", "empezarais", "empezaran", "empezase", "empezases", "empezásemos", "empezaseis", "empezasen", "empezare", "empezares", "empezáremos", "empezareis", "empezaren", "empezad", "empezado", "comienzo", "comienzas", "comienza", "comenzamos", "comenzáis", "comienzan", "comencé", "comenzaste", "comenzó", "comenzasteis", "comenzaron", "comenzaba", "comenzabas", "comenzábamos", "comenzabais", "comenzaban", "comenzaría", "comenzarías", "comenzaríamos", "comenzaríais", "comenzarían", "comenzaré", "comenzarás", "comenzará", "comenzaremos", "comenzaréis", "comenzarán", "comience", "comiences", "comencemos", "comencéis", "comiencen", "comenzara", "comenzaras", "comenzáramos", "comenzarais", "comenzaran", "comenzase", "comenzases", "comenzásemos", "comenzaseis", "comenzasen", "comenzare", "comenzares", "comenzáremos", "comenzareis", "comenzaren", "comenzad", "comenzado", "sigo", "sigues", "sigue", "seguimos", "seguis", "siguen", "seguí", "seguiste", "siguió", "seguisteis", "siguieron", "seguía", "seguías", "seguíamos", "seguíais", "seguían", "seguiría", "seguirías", "seguiríamos", "seguiríais", "seguirían", "seguiré", "seguirás", "seguirá", "seguiremos", "seguiréis", "seguirán", "siga", "sigas", "sigamos", "sigáis", "sigan", "siguiera", "siguieras", "siguiéramos", "siguierais", "siguieran", "siguiese", "siguieses", "siguiésemos", "siguieseis", "siguiesen", "siguiere", "siguieres", "siguiéremos", "siguiereis", "siguieren", "seguid", "seguido", "tengo", "tienes", "tiene", "tenemos", "tenéis", "tienen", "tuve", "tuviste", "tuvo", "tuvimos", "tuvisteis", "tuvieron", "tenía", "tenías", "teníamos", "teníais", "tenían", "tendría", "tendrías", "tendríamos", "tendríais", "tendrían", "tendré", "tendrás", "tendrá", "tendremos", "tendréis", "tendrán", "tenga", "tengas", "tengamos", "tengáis", "tengan", "tuviera", "tuvieras", "tuviéramos", "tuvierais", "tuvieran", "tuviese", "tuvieses", "tuviésemos", "tuvieseis", "tuviesen", "tuviere", "tuvieres", "tuviéremos", "tuviereis", "tuvieren", "ten", "tened", "tenido", "ando", "andas", "andamos", "andáis", "andan", "anduve", "anduviste", "anduvo", "anduvimos", "anduvisteis", "anduvieron", "andaba", "andabas", "andábamos", "andabais", "andaban", "andaría", "andarías", "andaríamos", "andaríais", "andarían", "andaré", "andarás", "andará", "andaremos", "andaréis", "andarán", "ande", "andes", "andemos", "andéis", "anden", "anduviera", "anduvieras", "anduviéramos", "anduvierais", "anduvieran", "anduviese", "anduvieses", "anduviésemos", "anduvieseis", "anduviesen", "anduviere", "anduvieres", "anduviéremos", "anduviereis", "anduvieren", "andad", "andado", "quedo", "quedas", "queda", "quedamos", "quedáis", "quedan", "quedé", "quedasteis", "quedaron", "quedaba", "quedabas", "quedábamos", "quedabais", "quedaban", "quedaría", "quedarías", "quedaríamos", "quedaríais", "quedarían", "quedaré", "quedarás", "quedará", "quedaremos", "quedaréis", "quedarán", "quede", "quedes", "quedemos", "quedéis", "queden", "quedara", "quedaras", "quedáramos", "quedarais", "quedaran", "quedase", "quedases", "quedásemos", "quedaseis", "quedasen", "quedare", "quedares", "quedáremos", "quedareis", "quedaren", "quedad", "quedado", "hallo", "hallas", "halla", "hallamos", "halláis", "hallan", "hallé", "hallaste", "halló", "hallasteis", "hallaron", "hallaba", "hallabas", "hallábamos", "hallabais", "hallaban", "hallaría", "hallarías", "hallaríamos", "hallaríais", "hallarían", "hallaré", "hallarás", "hallará", "hallaremos", "hallaréis", "hallarán", "halle", "halles", "hallemos", "halléis", "hallen", "hallara", "hallaras", "halláramos", "hallarais", "hallaran", "hallase", "hallases", "hallásemos", "hallaseis", "hallasen", "hallare", "hallares", "halláremos", "hallareis", "hallaren", "hallad", "hallado", "vengo", "vienes", "viene", "venimos", "venis", "vienen", "vine", "viniste", "vino", "vinimos", "vinisteis", "vinieron", "venía", "vanías", "verníamos", "veníais", "venían", "vendría", "vendrías", "vendríamos", "vendíais", "vendrían", "vendré", "vendrás", "vendrá", "vendremos", "vendréis", "vendrán", "venga", "vengas", "vengamos", "vengáis", "vengan", "viniera", "vinieras", "viniéramos", "vinierais", "vinieran", "viniese", "vinieses", "viniésemos", "vinieseis", "viniesen", "viniere", "vinieres", "viniéremos", "viniereis", "vinieren", "ven", "venid", "venido", "abro", "abres", "abre", "abrismos", "abrís", "abren", "abrí", "abriste", "abrió", "abristeis", "abrieron", "abría", "abrías", "abríais", "abrían", "abriría", "abrirías", "abriríamos", "abriríais", "abrirían", "abriré", "abrirás", "abrirá", "abriremos", "abriréis", "abrirán", "abra", "abras", "abramos", "abráis", "abran", "abriera", "abrieras", "abriéramos", "abrierais", "abrieran", "abriese", "abrieses", "abriésemos", "abrieseis", "abriesen", "abriere", "abrieres", "abriéremos", "abriereis", "abrieren", "abrid", "abierto", "voy", "vas", "va", "vamos", "vais", "van", "iba", "ibas", "íbamos", "ibais", "iban", "iría", "irías", "iríamos", "iríais", "irían", "iré", "irás", "irá", "iremos", "iréis", "irán", "vaya", "vayas", "vayamos", "vayáis", "vayan", "ve", "id", "ido", "acabo", "acabas", "acaba", "acabamos", "acabáis", "acaban", "acabé", "acabaste", "acabó", "acabasteis", "acabaron", "acababa", "acababas", "acabábamos", "acababais", "acababan", "acabaría", "acabarías", "acabaríamos", "acabaríais", "acabarían", "acabaré", "acabarás", "acabará", "acabaremos", "acabaréis", "acabarán", "acabe", "acabes", "acabemos", "acabéis", "acaben", "acabara", "acabaras", "acabáramos", "acabarais", "acabaran", "acabase", "acabases", "acabásemos", "acabaseis", "acabasen", "acabare", "acabares", "acabáremos", "acabareis", "acabaren", "acabad", "acabado", "llevo", "llevas", "lleva", "llevamos", "lleváis", "llevan", "llevé", "llevaste", "llevó", "llevasteis", "llevaron", "llevaba", "llevabas", "llevábamos", "llevabais", "llevaban", "llevaría", "llevarías", "llevaríamos", "llevaríais", "llevarían", "llevaré", "llevarás", "llevará", "llevaremos", "llevaréis", "llevarán", "lleve", "lleves", "llevemos", "llevéis", "lleven", "llevara", "llevaras", "lleváramos", "llevarais", "llevaran", "llevase", "llevases", "llevásemos", "llevaseis", "llevasen", "llevare", "llevares", "lleváremos", "llevareis", "llevaren", "llevad", "llevado", "alcanzo", "alcanzas", "alcanza", "alcanzamos", "alcanzáis", "alcanzan", "alcancé", "alcanzaste", "alcanzó", "alcanzasteis", "alcanzaron", "alcanzaba", "alcanzabas", "alcanzábamos", "alcanzabais", "alcanzaban", "alcanzaría", "alcanzarías", "alcanzaríamos", "alcanzaríais", "alcanzarían", "alcanzaré", "alcanzarás", "alcanzará", "alcanzaremos", "alcanzaréis", "alcanzarán", "alcance", "alcances", "alcancemos", "alcancéis", "alcancen", "alcanzara", "alcanzaras", "alcanzáramos", "alcanzarais", "alcanzaran", "alcanzase", "alcanzases", "alcanzásemos", "alcanzaseis", "alcanzasen", "alcanzare", "alcanzares", "alcanzáremos", "alcanzareis", "alcanzaren", "alcanzad", "alcanzado", "digo", "dices", "dice", "decimos", "decís", "dicen", "dije", "dijiste", "dijo", "dijimos", "dijisteis", "dijeron", "decía", "decías", "decíamos", "decíais", "decían", "diría", "dirías", "diríamos", "diríais", "dirían", "diré", "dirás", "dirá", "diremos", "diréis", "dirán", "diga", "digas", "digamos", "digáis", "digan", "dijera", "dijeras", "dijéramos", "dijerais", "dijeran", "dijese", "dijeses", "dijésemos", "dijeseis", "dijesen", "dijere", "dijeres", "dijéremos", "dijereis", "dijeren", "di", "decid", "dicho", "continúo", "continúas", "continúa", "continuamos", "continuáis", "continúan", "continué", "continuaste", "continuó", "continuasteis", "continuaron", "continuaba", "continuabas", "continuábamos", "continuabais", "continuaban", "continuaría", "continuarías", "continuaríamos", "continuaríais", "continuarían", "continuaré", "continuarás", "continuará", "continuaremos", "continuaréis", "continuarán", "continúe", "continúes", "continuemos", "continuéis", "continúen", "continuara", "continuaras", "continuáramos", "continuarais", "continuaran", "continuase", "continuases", "continuásemos", "continuaseis", "continuasen", "continuare", "continuares", "continuáremos", "continuareis", "continuaren", "continuad", "continuado", "resulto", "resultas", "resulta", "resultamos", "resultáis", "resultan", "resulté", "resultaste", "resultó", "resultasteis", "resultaron", "resultaba", "resultabas", "resultábamos", "resultabais", "resultaban", "resultaría", "resultarías", "resultaríamos", "resultaríais", "resultarían", "resultaré", "resultarás", "resultará", "resultaremos", "resultaréis", "resultarán", "resulte", "resultes", "resultemos", "resultéis", "resulten", "resultara", "resultaras", "resultáramos", "resultarais", "resultaran", "resultase", "resultases", "resultásemos", "resultaseis", "resultasen", "resultare", "resultares", "resultáremos", "resultareis", "resultaren", "resultad", "resultado", "puedo", "puedes", "puede", "podemos", "podéis", "pueden", "pude", "pudiste", "pudo", "pudimos", "pudisteis", "pudieron", "podía", "podías", "podíamos", "podíais", "podían", "podría", "podrías", "podríamos", "podríais", "podrían", "podré", "podrás", "podrá", "podremos", "podréis", "podrán", "pueda", "puedas", "podamos", "podáis", "puedan", "pudiera", "pudieras", "pudiéramos", "pudierais", "pudieran", "pudiese", "pudieses", "pudiésemos", "pudieseis", "pudiesen", "pudiere", "pudieres", "pudiéremos", "pudiereis", "pudieren", "poded", "podido", "quiero", "quieres", "quiere", "queremos", "queréis", "quieren", "quise", "quisiste", "quiso", "quisimos", "quisisteis", "quisieron", "quería", "querías", "queríamos", "queríais", "querían", "querría", "querrías", "querríamos", "querríais", "querrían", "querré", "querrás", "querrá", "querremos", "querréis", "querrán", "quiera", "quieras", "queramos", "queráis", "quieran", "quisiera", "quisieras", "quisiéramos", "quisierais", "quisieran", "quisiese", "quisieses", "quisiésemos", "quisieseis", "quisiesen", "quisiere", "quisieres", "quisiéremos", "quisiereis", "quisieren", "quered", "querido", "sabes", "sabe", "sabemos", "sabéis", "saben", "supe", "supiste", "supo", "supimos", "supisteis", "supieron", "sabía", "sabías", "sabíamos", "sabíais", "sabían", "sabría", "sabrías", "sabríamos", "sabríais", "sabrían", "sabré", "sabrás", "sabrá", "sabremos", "sabréis", "sabrán", "sepa", "sepas", "sepamos", "sepáis", "sepan", "supiera", "supieras", "supiéramos", "supierais", "supieran", "supiese", "supieses", "supiésemos", "supieseis", "supiesen", "supiere", "supieres", "supiéremos", "supiereis", "supieren", "sabed", "sabido", "suelo", "sueles", "suele", "solemos", "soléis", "suelen", "solí", "soliste", "solió", "solimos", "solisteis", "solieron", "solía", "solías", "solíamos", "solíais", "solían", "solería", "solerías", "soleríamos", "soleríais", "solerían", "soleré", "solerás", "solerá", "soleremos", "soleréis", "solerán", "suela", "suelas", "solamos", "soláis", "suelan", "soliera", "solieras", "soliéramos", "solierais", "solieran", "soliese", "solieses", "soliésemos", "solieseis", "soliesen", "soliere", "solieres", "soliéremos", "soliereis", "solieren", "soled", "solido", "necesito", "necesitas", "necesitamos", "necesitáis", "necesitan", "necesité", "necesitaste", "necesitó", "necesitasteis", "necesitaron", "necesitaba", "necesitabas", "necesitábamos", "necesitabais", "necesitaban", "necesitaría", "necesitarías", "necesitaríamos", "necesitaríais", "necesitarían", "necesitaré", "necesitarás", "necesitará", "necesitaremos", "necesitaréis", "necesitarán", "necesite", "necesites", "necesitemos", "necesitéis", "necesiten", "necesitara", "necesitaras", "necesitáramos", "necesitarais", "necesitaran", "necesitase", "necesitases", "necesitásemos", "necesitaseis", "necesitasen", "necesitare", "necesitares", "necesitáremos", "necesitareis", "necesitaren", "necesita", "necesitad", "necesitado"], B6 = ["haber", "deber", "empezar", "comenzar", "seguir", "tener", "andar", "quedar", "hallar", "venir", "abrir", "ir", "acabar", "llevar", "alcanzar", "decir", "continuar", "resultar", "poder", "querer", "saber", "soler", "necesitar"], TA = ["estoy", "estás", "está", "estamos", "estáis", "están", "estuve", "estuviste", "estuvo", "estuvimos", "estuvisteis", "estuvieron", "estuba", "estabas", "estábamos", "estabais", "estaban", "estraría", "estarías", "estaríamos", "estaríais", "estarían", "estaré", "estarás", "estará", "estaremos", "estaréis", "estarán", "esté", "estés", "estemos", "estéis", "estén", "estuviera", "estuviese", "estuvieras", "estuviéramos", "estuvierais", "estuvieran", "estuvieses", "estuviésemos", "estuvieseis", "estuviesen", "estuviere", "estuvieres", "estuviéremos", "estuviereis", "estuvieren", "estad", "estado"], W6 = ["soy", "eres", "es", "somos", "sois", "son", "fui", "fuiste", "fuimos", "fuisteis", "fueron", "era", "eras", "éramos", "erais", "eran", "sería", "serías", "seríamos", "seríais", "serían", "seré", "serás", "seremos", "seréis", "serán", "sea", "seas", "seamos", "seáis", "sean", "fueras", "fuéramos", "fuerais", "fueran", "fuese", "fueses", "fuésemos", "fueseis", "fuesen", "fuere", "fueres", "fuéremos", "fuereis", "fueren", "sé", "sed", "sido"], $A = ["estar"], U6 = ["ser"], jA = ["a", "ante", "abajo", "adonde", "al", "allende", "alrededor", "amén", "antes", "arriba", "aun", "bajo", "cabe", "cabo", "con", "contigo", "contra", "de", "dejante", "del", "dentro", "desde", "donde", "durante", "en", "encima", "entre", "excepto", "fuera", "hacia", "hasta", "incluso", "mediante", "más", "opuesto", "par", "para", "próximo", "salvo", "según", "sin", "so", "sobre", "tras", "versus", "vía"], xA = ["cerca"], H6 = ["o", "y", "entonces", "e", "u", "ni", "bien", "ora"], G6 = ["igual"], V6 = ["apenas", "segun", "que"], SA = ["apunto", "apunta", "confieso", "confiesa", "confesaba", "revelado", "revelo", "revela", "revelaba", "declarado", "declaro", "declara", "declaba", "señalo", "señala", "señalaba", "declaraba", "comento", "comenta"], rBa = ["básicamente", "esencialmente", "primeramente", "siempre", "nunca", "ahora", "quizá", "acaso", "inclusive", "probablemente", "verdaderamente", "seguramente", "jamás", "obviamente", "indiscutiblement", "inmediatamente", "previamente"], K6 = ["muy", "tan", "completamente", "suficiente", "tal", "tales"], OA = ["hago", "haces", "hace", "hacemos", "hacéis", "hacen", "hice", "hiciste", "hizo", "hicimos", "hicisteis", "hicieron", "hacía", "hacías", "hacíamos", "hacíais", "hacían", "haría,", "harías", "haríamos", "haríais", "harían", "haré", "harás", "hará", "haremos", "haréis", "harán", "haga", "hagas", "hagamos", "hagáis", "hagan", "hiciera", "hicieras", "hiciéramos", "hicierais", "hicieran", "hiciese", "hicieses", "hiciésemos", "hicieseis", "hiciesen", "hiciere", "hicieres", "hiciéremos", "hiciereis", "hicieren", "haz", "haced", "hecho", "parezco", "pareces", "parece", "parecemos", "parecéis", "parecen", "parecí", "pareciste", "pareció", "parecimos", "parecisteis", "parecieron", "parecía", "parecías", "parecíamos", "parecíais", "parecían", "parecería", "parecerías", "pareceríamos", "pareceríais", "parecerían", "pareceré", "parecerás", "parecerá", "pareceremos", "pareceréis", "parecerán", "parezca", "parezcas", "parezcamos", "parezcáis", "parezcan", "pareciera", "parecieras", "pareciéramos", "parecierais", "parecieran", "pareciese", "parecieses", "pareciésemos", "parecieseis", "pareciesen", "pareciere", "parecieres", "pareciéremos", "pareciereis", "parecieren", "pareced", "parecido", "iba", "ibais", "iban", "ibas", "id", "ido", "iremos", "irá", "irán", "irás", "iré", "iréis", "iría", "iríais", "iríamos", "irían", "irías", "va", "vais", "vamos", "van", "vas", "vaya", "vayamos", "vayan", "vayas", "vayáis", "ve", "voy", "yendo", "íbamos"], IA = ["hacer", "parecer", "ir"], Y6 = ["enfrente", "claro", "bueno", "mejor", "mejores", "buena", "buenos", "buenas", "óptimo", "óptimos", "óptimas", "bonísimo", "bonísima", "bonísimos", "bonísimas", "buenísimo", "buenísima", "buenísimos", "buenísimas", "buenérrimo", "buenérrima", "buenérrimos", "buenérrimas", "nuevo", "nueva", "nuevos", "nuevas", "novísimo", "novísima", "novísimos", "novísimas", "nuevísimo", "nuevísima", "nuevísimos", "nuevísimas", "viejo", "viejos", "vieja", "viejas", "anterior", "grande", "gran", "grandes", "mayores", "mayor", "máximo", "máxima", "grandísimo", "grandísima", "máximos", "máximas", "grandísimos", "grandísimas", "fácil", "fáciles", "rápido", "rápida", "rápidos", "rápidas", "lejos", "lejas", "lejote", "lejotes", "difícil", "difíciles", "propio", "propios", "propia", "propias", "largo", "larga", "largos", "largas", "bajos", "baja", "bajas", "inferior", "ínfimo", "ínfima", "ínfimos", "ínfimas", "bajísimo", "bajísima", "bajísimos", "bajísimas", "alto", "alta", "altos", "altas", "superior", "superiores", "supremo", "suprema", "supremos", "supremas", "sumo", "suma", "sumos", "sumas", "altísimo", "altísima", "altísimos", "altísimas", "regular", "regulares", "normal", "pequeño", "pequeña", "pequeños", "pequeñas", "menor", "pequeñísimo", "pequeñísima", "pequeñísimos", "pequeñísimas", "mínimo", "mínima", "mínimos", "mínimas", "diminuta", "diminuto", "diminutas", "diminutos", "chiquitito", "chiquititos", "chiquitita", "chiquititas", "corta", "corto", "cortas", "cortos", "principal", "principales", "mismo", "mismos", "misma", "mismas", "capaz", "capaces", "cierta", "cierto", "ciertas", "ciertos", "certísimos", "certísimas", "ciertísimo", "ciertísima", "ciertísimos", "ciertísimas", "llamado", "llamada", "llamados", "llamadas", "mayormente", "reciente", "recientes", "completa", "completo", "completas", "completos", "absoluta", "absoluto", "absolutas", "absolutos", "últimamente", "posible", "común", "comúnes", "comúnmente", "constantemente", "continuamente", "directamente", "fácilmente", "casi", "ligeramente", "estima", "estimada", "estimado", "aproximada", "aproximadamente", "última", "últimas", "último", "últimos", "diferente", "diferentes", "similar", "mal", "malo", "malos", "mala", "malas", "peor", "pésimo", "pésima", "malísimo", "malísima", "pésimos", "pésimas", "malísimos", "malísimas", "perfectamente", "excelente", "final", "general"], Q6 = ["ah", "eh", "ejem", "ele", "achís", "adiós", "agur", "ajá", "ajajá", "ala", "alá", "albricias", "aleluya", "alerta", "alirón", "aló", "amalaya", "ar", "aro", "arrarray", "arre", "arsa", "atatay", "aúpa", "ax", "ay", "ayayay", "bah", "banzai", "barajo", "bla", "bravo", "buf", "bum", "ca", "caguendiós", "canastos", "caracho", "caracoles", "carajo", "caramba", "carape", "caray", "cáscaras", "cáspita", "cataplum", "ce", "chao", "chau", "che", "chis", "chist", "chitón", "cho", "chucho", "chus", "cielos", "clo", "coche", "cochi", "cojones", "concho", "coño", "córcholis", "cuchí", "cuidado", "cuz", "demonio", "demontre", "despacio", "diablo", "diantre", "dios", "ea", "epa", "equilicuá", "estúpido", "eureka", "evohé", "exacto", "fantástico", "firmes", "fo", "forte", "gua", "gualá", "guarte", "guay", "hala", "hale", "he", "hi", "hin", "hola", "hopo", "huesque", "huiche", "huichó", "huifa", "hurra", "huy", "ja", "jajajá", "jajay", "jaque", "jau", "jo", "jobar", "joder", "jolín", "jopo", "leñe", "listo", "malhayas", "mamola", "mecachis", "miéchica", "mondo", "moste", "mutis", "nanay", "narices", "oh", "ojalá", "ojo", "okay", "ole", "olé", "órdiga", "oste", "ostras", "ox", "oxte", "paf", "pardiez", "paso", "pucha", "puf", "puff", "pumba", "puñeta", "quia", "quiúbole", "recórcholis", "rediez", "rediós", "salve", "sanseacabó", "sniff", "socorro", "ta", "tararira", "tate", "tururú", "uf", "uh", "ui", "upa", "uste", "uy", "victoria", "vítor", "viva", "za", "zambomba", "zapateta", "zape", "zas"], X6 = ["kg", "mg", "gr", "g", "km", "m", "l", "ml", "cl"], Z6 = ["minuto", "minutos", "hora", "horas", "día", "días", "semana", "semanas", "mes", "meses", "año", "años", "hoy", "mañana", "ayer"], J6 = ["cosa", "cosas", "manera", "maneras", "caso", "casos", "pieza", "piezas", "vez", "veces", "parte", "partes", "porcentaje", "instancia", "aspecto", "aspectos", "punto", "puntos", "objeto", "objectos", "persona", "personas"], eq = ["no", "euros", "sí", "síes", "noes"], sBa = ["sra", "sras", "srta", "sr", "sres", "dra", "dr", "profa", "prof"], iBa = ["jr", "sr"], oBa = tt.filteredAtBeginning = (0, gl.default)(Y6), lBa = tt.filteredAtEnding = (0, gl.default)([].concat(yA, B6, $A, U6, IA)), dBa = tt.filteredAtBeginningAndEnding = (0, gl.default)([].concat(fA, jA, H6, L6, K6, M6, vA)), uBa = tt.filteredAnywhere = (0, gl.default)([].concat(D6.singleWords, N6, zA, bA, wA, Q6, hA, F6, TA, W6, SA, OA, kA, G6, V6, _A, EA, AA, q6, eq, xA, X6, Z6, J6)), cBa = tt.cannotDirectlyPrecedePassiveParticiple = (0, gl.default)([].concat(fA, jA, zA, vA, kA, AA, hA, yA, OA, IA, SA, _A, EA, wA, bA, xA)), pBa = tt.cannotBeBetweenPassiveAuxiliaryAndParticiple = (0, gl.default)([].concat(TA, $A)), gBa = tt.all = (0, gl.default)([].concat(fA, hA, yA, L6, vA, N6, wA, bA, zA, M6, kA, _A, EA, AA, q6, xA, F6, B6, TA, W6, $A, U6, jA, H6, G6, V6, SA, D6.singleWords, rBa, K6, OA, IA, Q6, Y6, X6, J6, eq, Z6, sBa, iBa));
tt.default = {
  filteredAtBeginning: oBa,
  filteredAtEnding: lBa,
  filteredAtBeginningAndEnding: dBa,
  filteredAnywhere: uBa,
  cannotDirectlyPrecedePassiveParticiple: cBa,
  cannotBeBetweenPassiveAuxiliaryAndParticiple: pBa,
  all: gBa
};
var vp = {};
Object.defineProperty(vp, "__esModule", {
  value: !0
});
vp.default = void 0;
vp.default = ["pero", "ora", "aunque", "aun", "mientras", "porque", "apenas", "si", "antes", "después", "cómo", "como", "empero", "que", "cuanto", "cuando", "cual", "cuales", "quién", "quien", "quienes", "dónde", "adónde", "cuyo", "cuyos", "cuya", "cuyas"];
var Wy = {};
Object.defineProperty(Wy, "__esModule", {
  value: !0
});
Wy.default = void 0;
Wy.default = [["de un lado", "de otra parte"], ["de un lado", "de otro"], ["no", "sino que"], ["no", "sino"], ["por un lado", "por otro lado"], ["por una parte", "por otra parte"], ["por una parte", "por otra"], ["tanto", "como"], ["bien", "bien"]];
const mBa = "aeiouáéíóúü", fBa = {
  vowels: [
    {
      fragments: [
        "i[ií]",
        "[íú][aeo]",
        "o[aáeéíóú]",
        "uu",
        "flu[iea]",
        "ru[ie]",
        "eio",
        "eu[aá]",
        "oi[aó]",
        "[iu]ei",
        "ui[éu]",
        "^anti[aeoá]",
        "^zoo",
        "coo",
        "microo"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "[eéó][aáeéíoóú]"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "[aáü][aáeéiíoóú]",
        "eoi",
        "oeu",
        "[eu]au"
      ],
      countModifier: 1
    }
  ],
  words: {
    full: [
      {
        word: "scooter",
        syllables: 2
      },
      {
        word: "y",
        syllables: 1
      },
      {
        word: "beat",
        syllables: 1
      },
      {
        word: "via",
        syllables: 2
      },
      {
        word: "ok",
        syllables: 2
      }
    ],
    fragments: {
      global: [
        {
          word: "business",
          syllables: 2
        },
        {
          word: "coach",
          syllables: 1
        },
        {
          word: "reggae",
          syllables: 2
        },
        {
          word: "mail",
          syllables: 1
        },
        {
          word: "airbag",
          syllables: 2
        },
        {
          word: "affaire",
          syllables: 2
        },
        {
          word: "training",
          syllables: 2
        },
        {
          word: "hawaian",
          syllables: 3
        },
        {
          word: "saharaui",
          syllables: 3
        },
        {
          word: "nouveau",
          syllables: 2
        },
        {
          word: "chapeau",
          syllables: 2
        },
        {
          word: "free",
          syllables: 1
        },
        {
          word: "green",
          syllables: 1
        },
        {
          word: "jeep",
          syllables: 1
        },
        {
          word: "toffee",
          syllables: 2
        },
        {
          word: "tweet",
          syllables: 1
        },
        {
          word: "tweed",
          syllables: 1
        },
        {
          word: "semiautomátic",
          syllables: 6
        },
        {
          word: "estadou",
          syllables: 4
        },
        {
          word: "broadway",
          syllables: 2
        },
        {
          word: "board",
          syllables: 1
        },
        {
          word: "load",
          syllables: 1
        },
        {
          word: "roaming",
          syllables: 2
        },
        {
          word: "heavy",
          syllables: 2
        },
        {
          word: "break",
          syllables: 1
        }
      ]
    }
  }
}, hBa = {
  vowels: mBa,
  deviations: fBa
};
var Uy = {};
Object.defineProperty(Uy, "__esModule", {
  value: !0
});
Uy.default = void 0;
Uy.default = {
  recommendedLength: 25
};
var CA = {}, Hy = {}, PA = {}, Gy = {};
Object.defineProperty(Gy, "__esModule", {
  value: !0
});
Gy.default = void 0;
Gy.default = ["ababillad", "abacorad", "abadernad", "abajad", "abalanzad", "abaldonad", "abalead", "abaluartad", "abanad", "abancalad", "abanderad", "abanderizad", "abandonad", "abanicad", "abañad", "abaratad", "abarbetad", "abarcad", "abarload", "abarquillad", "abarracad", "abarrad", "abarrotad", "abastad", "abastardad", "abastecid", "abastionad", "abatanad", "abatatad", "abatid", "abatojad", "abdicad", "abducid", "abejead", "abejonead", "abejorread", "abeldad", "abemolad", "aberrad", "abetunad", "abiert", "abigarrad", "abisagrad", "abismad", "abjurad", "ablacionad", "ablandad", "abluid", "abnegad", "abobad", "abocad", "abocetad", "abochornad", "abocinad", "abofad", "abofetead", "abogad", "abolid", "abollad", "abombad", "abominad", "abonad", "abordad", "aborrascad", "aborrecid", "aborregad", "abortad", "abotagad", "abotargad", "abotonad", "abovedad", "aboyad", "abracad", "abrasad", "abrazad", "abrevad", "abreviad", "abribonad", "abrigad", "abrillantad", "abrochad", "abrogad", "abroncad", "abrotoñad", "abrumad", "abscedid", "abscondid", "absolutizad", "absorbid", "abstenid", "abstergid", "abstraíd", "absuelt", "abuchead", "abultad", "abundad", "abuñolad", "aburguesad", "aburrid", "aburujad", "abusad", "acabad", "acaballad", "acachetead", "academizad", "acaecid", "acairelad", "acalambrad", "acalenturad", "acallad", "acalmad", "acalorad", "acamad", "acampad", "acampanad", "acanalad", "acantilad", "acantonad", "acañonead", "acaparad", "acaramelad", "acardenalad", "acariciad", "acarread", "acartonad", "acastillad", "acatad", "acatarrad", "acaudillad", "accedid", "accesad", "accidentad", "accionad", "acechad", "acedad", "aceitad", "acelerad", "acendrad", "acensad", "acensuad", "acentuad", "acepillad", "aceptad", "acerad", "acercad", "acerrojad", "acertad", "acervad", "acetad", "acetificad", "acezad", "achacad", "achaflanad", "achantad", "achaparrad", "achatad", "achatarrad", "achicad", "achicharrad", "achicopalad", "achinad", "achispad", "achocolatad", "acholad", "achorad", "achuchad", "acibarad", "acicalad", "acicatead", "acidificad", "acidulad", "aciemad", "acitronad", "aclamad", "aclarad", "aclimatad", "acobardad", "acobijad", "acodad", "acoderad", "acogid", "acogotad", "acojinad", "acojonad", "acolad", "acolchad", "acolchonad", "acolitad", "acollad", "acollarad", "acometid", "acomodad", "acompañad", "acompasad", "acomplejad", "acondicionad", "aconductad", "acongojad", "aconsejad", "acontecid", "acopiad", "acoplad", "acoquinad", "acorad", "acorazad", "acorchad", "acordad", "acordonad", "acorralad", "acorrid", "acortad", "acosad", "acostad", "acostumbrad", "acotad", "acotejad", "acotolad", "acovachad", "acrecentad", "acrecid", "acreditad", "acreíd", "acremad", "acrianzad", "acribillad", "acriminad", "acrisolad", "acristalad", "activad", "actuad", "actualizad", "acuantiad", "acuarelad", "acuartelad", "acuatizad", "acuchillad", "acuciad", "acuclillad", "acudid", "acuerpad", "acuitad", "aculad", "aculebrad", "aculturad", "acumulad", "acunad", "acuñad", "acurrucad", "acusad", "adamad", "adamascad", "adaptad", "adarvad", "adecentad", "adecuad", "adehesad", "adelantad", "adelgazad", "ademad", "adentrad", "aderezad", "adestrad", "adeudad", "adherid", "adiad", "adicionad", "adiestrad", "adietad", "adinerad", "adivinad", "adjetivad", "adjudicad", "adjuntad", "administrad", "admirad", "admitid", "adobad", "adocenad", "adoctrinad", "adolecid", "adoptad", "adoquinad", "adorad", "adormecid", "adormid", "adormilad", "adornad", "adosad", "adquirid", "adscript", "adscrit", "aducid", "adueñad", "adujad", "adulad", "adulterad", "adurid", "advenid", "adverad", "adversad", "advertid", "advocad", "adyacid", "aerad", "aerografiad", "aerotransportad", "afamad", "afanad", "afantasmad", "afead", "afectad", "afeitad", "afelpad", "afeminad", "aferrad", "afianzad", "aficionad", "afiebrad", "afilad", "afiliad", "afiligranad", "afinad", "afincad", "afirmad", "aflamencad", "afligid", "aflojad", "aflorad", "afluid", "aforad", "aforrad", "afortunad", "afrancesad", "afrentad", "africanizad", "afrontad", "agachad", "agarrad", "agarrotad", "agasajad", "agavillad", "agazapad", "agenciad", "agendad", "agermanad", "aggiornad", "agigantad", "agilipollad", "agilizad", "agitad", "agitanad", "aglomerad", "aglutinad", "agobiad", "agolpad", "agonizad", "agorad", "agostad", "agotad", "agraciad", "agradad", "agradecid", "agrandad", "agravad", "agraviad", "agredid", "agregad", "agremiad", "agriad", "agrietad", "agringad", "agripad", "agrisad", "agrumad", "agrupad", "aguad", "aguaitad", "aguantad", "aguapad", "aguardad", "agudizad", "agüevad", "aguijad", "aguijonead", "aguisad", "agüitad", "agujerad", "agujeread", "agusanad", "aguzad", "ahajad", "ahechad", "aherrojad", "aherrumbrad", "ahijad", "ahilad", "ahincad", "ahinojad", "ahitad", "ahogad", "ahondad", "ahorcad", "ahorcajad", "ahormad", "ahorquillad", "ahorrad", "ahuecad", "ahumad", "ahusad", "ahuyentad", "airad", "airead", "aislad", "ajad", "ajamonad", "ajardinad", "ajetread", "ajuarad", "ajuntad", "ajustad", "ajusticiad", "alabad", "alabead", "alaciad", "alambicad", "alambrad", "alampad", "alancead", "alardead", "alargad", "alarmad", "albead", "albergad", "alboread", "alborotad", "alborozad", "alburead", "alcahuetead", "alcalinizad", "alcanforad", "alcantarillad", "alcanzad", "alcoholad", "alcoholizad", "alcorzad", "alead", "aleatorizad", "alebrestad", "aleccionad", "alechugad", "alegad", "alegorizad", "alegrad", "alejad", "alelad", "alentad", "alertad", "aletargad", "aletead", "alevantad", "alfabetizad", "alfalfad", "alfombrad", "algodonad", "alhajad", "aliad", "alicatad", "alienad", "aligerad", "alijad", "alijarad", "alimentad", "alindad", "alinead", "aliñad", "alisad", "alistad", "aliviad", "alivianad", "allanad", "allegad", "almacenad", "almagrad", "almenad", "almendrad", "almibarad", "almidonad", "almizclad", "almohadillad", "almohazad", "almorzad", "alocad", "alojad", "alongad", "alquilad", "alquitarad", "alquitranad", "altead", "alterad", "altercad", "alternad", "aluciflipad", "alucinad", "aludid", "alumbrad", "alunizad", "aluzad", "alzad", "amacollad", "amad", "amadrinad", "amaestrad", "amagad", "amainad", "amaitinad", "amalgamad", "amamantad", "amancebad", "amancillad", "amanecid", "amanerad", "amansad", "amanzanad", "amañad", "amarad", "amargad", "amariconad", "amarillead", "amarillecid", "amarizad", "amarrad", "amartelad", "amartillad", "amartizad", "amasad", "amasijad", "ambicionad", "ambientad", "amblad", "ambulad", "amedrentad", "amelcochad", "amenazad", "amenguad", "amenizad", "americanizad", "ameritad", "amerizad", "ametrallad", "amigad", "amilanad", "aminorad", "amistad", "amnistiad", "amoblad", "amodorrad", "amohinad", "amojamad", "amojonad", "amolad", "amoldad", "amonad", "amonedad", "amonestad", "amontonad", "amoratad", "amordazad", "amorrad", "amortajad", "amortiguad", "amortizad", "amoscad", "amostazad", "amotinad", "amovid", "amparad", "ampliad", "amplificad", "ampollad", "amputad", "amueblad", "amurad", "amurallad", "amurrad", "amusgad", "anadead", "analizad", "anarquizad", "anastomosad", "anatematizad", "anchad", "anclad", "ancorad", "andad", "andaluzad", "andamiad", "aneblad", "anegad", "anestesiad", "anexad", "anexionad", "anglicanizad", "anglificad", "angostad", "angulad", "angustiad", "anhelad", "anidad", "anihilad", "anillad", "animad", "animalizad", "aniñad", "aniquilad", "anisad", "anochecid", "anodizad", "anonadad", "anonimizad", "anotad", "anoticiad", "anquilosad", "ansiad", "antagonizad", "antecedid", "antecogid", "antedatad", "antedich", "antepagad", "antepasad", "antepuest", "antevenid", "antevist", "anticipad", "anticuad", "antiguad", "antojad", "antologad", "antologizad", "antropizad", "antropomorfizad", "anualizad", "anublad", "anudad", "anulad", "anunciad", "añadid", "añejad", "añorad", "añublad", "añudad", "aojad", "aovad", "apabullad", "apacentad", "apachad", "apachurrad", "apaciguad", "apadrinad", "apagad", "apalabrad", "apalancad", "apalead", "apalizad", "apanad", "apandad", "apaniguad", "apantallad", "apañad", "apapachad", "aparad", "aparatad", "aparcad", "aparead", "aparecid", "aparejad", "aparentad", "apartad", "apasionad", "apatrullad", "apayasad", "apead", "apechugad", "apedazad", "apedrad", "apedread", "apegad", "apelad", "apellidad", "apelmazad", "apelotad", "apelotonad", "apenad", "apencad", "apercibid", "aperrad", "aperread", "apersonad", "apertrechad", "aperturad", "apesadumbrad", "apesarad", "apestad", "apetecid", "apiadad", "apilad", "apiñad", "apiolad", "apipad", "apisonad", "aplacad", "aplanad", "aplanchad", "aplastad", "aplatanad", "aplaudid", "aplazad", "aplegad", "aplicad", "aplomad", "apocad", "apocopad", "apodad", "apoderad", "apolillad", "apoltronad", "apoquinad", "aporread", "aportad", "aposentad", "apostad", "apostatad", "apostillad", "apostrofad", "apoyad", "apreciad", "aprehendid", "apremiad", "aprendid", "apresad", "aprestad", "apresurad", "apretad", "apretujad", "apriscad", "aprisionad", "aprobad", "aproblemad", "aprontad", "apropiad", "apropriad", "aprovechad", "aprovisionad", "aproximad", "aptad", "apuest", "apuntad", "apuntalad", "apuntillad", "apuñalad", "apurad", "aquejad", "aquerenciad", "aquietad", "aquilatad", "arabizad", "arad", "arañad", "araucanizad", "arbitrad", "arbolad", "arborizad", "archivad", "arcillad", "ardid", "arenad", "arengad", "argentad", "argüendead", "argüid", "argumentad", "arietad", "armad", "armonizad", "aromad", "aromatizad", "arpegiad", "arponad", "arponead", "arquead", "arrabalizad", "arracimad", "arraigad", "arramblad", "arramplad", "arrancad", "arranchad", "arrasad", "arrastrad", "arread", "arrebañad", "arrebatad", "arrebolad", "arrebujad", "arreciad", "arrecid", "arredrad", "arregazad", "arreglad", "arrejuntad", "arrellanad", "arremangad", "arrematad", "arremedad", "arremetid", "arremolinad", "arrempujad", "arrendad", "arrepentid", "arrestad", "arriad", "arribad", "arriesgad", "arrimad", "arrinconad", "arriostrad", "arriscad", "arrobad", "arrodillad", "arrogad", "arrojad", "arrollad", "arromad", "arropad", "arrostrad", "arroyad", "arruad", "arrugad", "arruinad", "arrullad", "arrumad", "arrumbad", "articulad", "artillad", "aruñad", "asad", "asaetead", "asalariad", "asaltad", "ascendid", "asead", "asechad", "asediad", "asegurad", "asemejad", "asenderead", "asentad", "asentid", "aserrad", "aserruchad", "asesinad", "asesorad", "asestad", "aseverad", "asfaltad", "asfixiad", "asid", "asignad", "asilad", "asilvestrad", "asimilad", "asistid", "asociad", "asolad", "asolead", "asomad", "asombrad", "asonantad", "asordad", "aspad", "asperjad", "aspirad", "asquead", "astillad", "astreñid", "astringid", "astriñid", "asturianizad", "asumid", "asustad", "atacad", "atad", "atajad", "atalayad", "atañid", "atarantad", "atarazad", "ataread", "atarragad", "atarugad", "atascad", "ataviad", "atemorizad", "atemperad", "atenacead", "atenazad", "atendid", "atenid", "atentad", "atenuad", "aterid", "aterrad", "aterrazad", "aterrizad", "aterrorizad", "atesad", "atesorad", "atestad", "atestiguad", "atezad", "atiborrad", "atiesad", "atildad", "atinad", "atirantad", "atisbad", "atizad", "atollad", "atolondrad", "atomizad", "atontad", "atorad", "atorgad", "atormentad", "atornillad", "atorrad", "atosigad", "atracad", "atragantad", "atraíd", "atraillad", "atrancad", "atrapad", "atrasad", "atravesad", "atreguad", "atrevid", "atribuid", "atribulad", "atrincherad", "atrofiad", "atrojad", "atronad", "atropad", "atropellad", "atufad", "aturad", "aturdid", "aturrullad", "aturullad", "atusad", "audicionad", "auditad", "augmentad", "augurad", "aullad", "aumentad", "aunad", "aupad", "aureolad", "auscultad", "ausentad", "auspiciad", "autenticad", "autentificad", "autoabastecid", "autoadiestrad", "autoadministrad", "autoafirmad", "autoaislad", "autoalimentad", "autoanalizad", "autoaplicad", "autoasignad", "autobautizad", "autobloquead", "autobombead", "autocalificad", "autocensurad", "autocompletad", "autoconducid", "autoconsiderad", "autoconsumid", "autoconvocad", "autocoronad", "autocorregid", "autocremad", "autodeclarad", "autodefendid", "autodefinid", "autodelatad", "autodenominad", "autodescartad", "autodescript", "autodescrit", "autodestruid", "autodeterminad", "autodirigid", "autodisuelt", "autoeditad", "autoeliminad", "autoengañad", "autoensamblad", "autoevacuad", "autoevaluad", "autoexcluid", "autoexigid", "autoexiliad", "autoexplotad", "autofinanciad", "autogestionad", "autogobernad", "autografiad", "autoidentificad", "autoimpuest", "autoinculpad", "autoinmolad", "autolesionad", "autolimitad", "automarginad", "automatizad", "automedicad", "automejorad", "automutilad", "autonombrad", "autonomizad", "autopagad", "autoparodiad", "autopreparad", "autopresentad", "autoproclamad", "autoproducid", "autoprogramad", "autopromocionad", "autopropagad", "autoprotegid", "autopublicad", "autoreconocid", "autoregulad", "autorizad", "autorrealizad", "autorreconocid", "autorregulad", "autorreportad", "autorreproducid", "autorretratad", "autosabotead", "autotitulad", "auxiliad", "avalad", "avalentad", "avalorad", "avaluad", "avanzad", "avasallad", "avecinad", "avecindad", "avellanad", "avenid", "aventad", "aventajad", "aventurad", "averad", "avergonzad", "averiad", "averiguad", "avezad", "aviad", "avinagrad", "avisad", "avispad", "avistad", "avituallad", "avivad", "avizorad", "avocad", "avulsionad", "ayudad", "ayunad", "ayuntad", "ayustad", "azadonad", "azafranad", "azarad", "azogad", "azolvad", "azorad", "azotad", "azucarad", "azufrad", "azulad", "azulead", "azulejad", "azuzad", "babead", "babosead", "bachaquead", "bachead", "badajead", "bailad", "bailotead", "bajad", "bajonead", "balacead", "balad", "balancead", "balbucead", "balbucid", "balcanizad", "balconead", "baldad", "baldead", "balead", "balizad", "balotad", "balsead", "bambolead", "banalizad", "bancad", "bancarizad", "bandead", "banderillead", "banead", "banquetead", "bañad", "baptizad", "baquetead", "baquiad", "barajad", "barajead", "baratad", "barbad", "barbarizad", "barbechad", "barbotad", "barbotead", "baremad", "barequead", "barloventead", "barnizad", "barrad", "barread", "barrenad", "barretead", "barrid", "barritad", "barruntad", "basad", "basculad", "bastad", "bastardead", "bastid", "bastonead", "basuread", "batallad", "batead", "batid", "bautizad", "baylad", "beatificad", "bebid", "becad", "becerread", "bendecid", "bendit", "beneficiad", "berread", "besad", "besucad", "besuquead", "bichead", "bifurcad", "bilateralizad", "binad", "bioacumulad", "bioconcentrad", "biodegradad", "biodiversificad", "biofortificad", "biografiad", "biosintetizad", "birlad", "bisad", "bisbisad", "bisecad", "biselad", "bizcad", "bizmad", "bizquead", "blandead", "blandid", "blanquead", "blanquecid", "blasfemad", "blasonad", "blindad", "blocad", "blofead", "bloguead", "bloquead", "bobead", "bobinad", "bochad", "bocinad", "bofetead", "bogad", "boicotead", "bojad", "bojead", "bolead", "boletead", "boletinad", "bolivianizad", "bolsead", "bombardead", "bombead", "bonificad", "bootead", "boquead", "borbollad", "borbotad", "borbotead", "bordad", "bordead", "bordonead", "borrad", "borrajead", "borronead", "bosad", "bosquejad", "bostezad", "botad", "botanizad", "botead", "botonad", "botonead", "boxead", "boyad", "bracead", "bramad", "brasead", "bread", "bregad", "brezad", "bridad", "brillad", "brincad", "brindad", "britanizad", "brizad", "bromead", "broncead", "brotad", "brujulead", "bruñid", "brutalizad", "bucead", "buelt", "bufad", "bufonead", "buitread", "bulead", "bullid", "burbujead", "burilad", "burlad", "burocratizad", "buscad", "buzad", "buzonead", "bypasead", "cabalgad", "cabecead", "cabestrad", "cabestread", "cabid", "cabildead", "cabizbajad", "cablead", "cablegrafiad", "cabrahigad", "cabread", "cabrestead", "cabrillead", "cabriolad", "cabriolead", "çabullid", "caçad", "cacaread", "cachad", "cachead", "cachetead", "cachimbead", "cachiporread", "cachondead", "cachuread", "caducad", "cafichad", "cafichead", "cagad", "caíd", "cairelad", "cajonead", "calabriad", "calad", "calafatead", "calcad", "calcetad", "calcificad", "calcinad", "calculad", "caldead", "calefaccionad", "calefactad", "calendarizad", "calentad", "calibrad", "calificad", "caligrafiad", "callad", "callejead", "calmad", "calumniad", "calzad", "cambalachad", "cambalachead", "cambiad", "camelad", "caminad", "camorread", "camotead", "campad", "campanead", "campead", "campeonad", "camuflad", "camuflajead", "canalizad", "cancanead", "cancelad", "cancerad", "candad", "candidatad", "candidatead", "candidatizad", "canead", "canibalizad", "canjead", "canonizad", "cansad", "cantad", "cantead", "cantinflead", "canturread", "canturriad", "cañonead", "caotizad", "capacitad", "capad", "capead", "capitalizad", "capitanead", "capitulad", "capolad", "capotad", "capotead", "capsulad", "captad", "capturad", "capuzad", "caracolead", "caracterizad", "caramelizad", "caratulad", "carbonad", "carbonead", "carbonizad", "carburad", "carburizad", "carcajead", "carcomid", "cardad", "caread", "carecid", "carenad", "cargad", "cariad", "caricaturad", "caricaturizad", "cariciad", "carminad", "carnavalead", "carnavalizad", "carnead", "carnetizad", "carpid", "carraspead", "carretead", "carrilead", "carrozad", "cartead", "cartelizad", "carteread", "cartografiad", "casad", "cascabelead", "cascad", "castañead", "castañetead", "castellanizad", "castigad", "castrad", "catabolizad", "catad", "catalanizad", "catalizad", "catalogad", "catapultad", "catead", "categorizad", "catequizad", "cativad", "catolizad", "caucionad", "causad", "cautelad", "cauterizad", "cautivad", "cavad", "cavilad", "cazad", "cebad", "cecead", "cedid", "cedulad", "cegad", "cejad", "celad", "celebrad", "cementad", "cenad", "cencerread", "cendrad", "censad", "censurad", "centellad", "centellead", "centrad", "centralizad", "centrifugad", "centuplicad", "ceñid", "cepillad", "cercad", "cercenad", "cerchad", "cerciorad", "cerdead", "cernid", "cerrad", "certificad", "cesad", "cesantead", "cespitad", "chachad", "chacharead", "chacotead", "chafad", "chafardead", "chalad", "chamarilead", "chambead", "champurrad", "chamullad", "chamuscad", "chamuyad", "chancead", "chancletead", "chanelad", "changuead", "chantajead", "chantead", "chapad", "chapalead", "chapead", "chapotead", "chapucead", "chapurrad", "chapurread", "chapuzad", "chaquetead", "charlad", "charlatanead", "charlotead", "charolad", "charquead", "chascad", "chasquead", "chatead", "chavetead", "checad", "chequead", "chicanead", "chichad", "chicharrad", "chicotead", "chiflad", "chillad", "chinchad", "chinead", "chingad", "chinguead", "chipead", "chiquead", "chirlad", "chirriad", "chismead", "chismorread", "chismosead", "chispad", "chispead", "chisporrotead", "chistad", "chivad", "chivatead", "chocad", "chochead", "chollad", "chopead", "choread", "chorizad", "chorread", "chotad", "chotead", "chufad", "chulead", "chupad", "chupetead", "churrascad", "churrasquead", "churruscad", "chusmead", "chutad", "chuzad", "ciad", "ciberacosad", "cicatrizad", "cifrad", "cilindrad", "cimad", "cimblad", "cimbrad", "cimbread", "cimentad", "cincelad", "cinchad", "cinematografiad", "cinglad", "cintilad", "circuid", "circulad", "circuncidad", "circundad", "circunferid", "circunnavegad", "circunscript", "circunscrit", "circunstanciad", "circunvalad", "circunvenid", "circunvolad", "ciscad", "citad", "ciudadanizad", "civilizad", "cizallad", "cizañad", "cizañead", "clamad", "clamoread", "claread", "clarificad", "clasificad", "claudicad", "clausurad", "clavad", "clavetead", "clicad", "climatizad", "cliquead", "clocad", "clonad", "cloquead", "clorad", "clorinad", "cloroformizad", "coaccionad", "coactuad", "coadyuvad", "coagulad", "coaligad", "coanimad", "coartad", "coauspiciad", "cobijad", "cobrad", "cocead", "cocid", "cocinad", "cocread", "codead", "codesarrollad", "codescubiert", "codiciad", "codificad", "codirigid", "coeditad", "coescript", "coescrit", "coestructurad", "coevolucionad", "coexistid", "cofabricad", "cofinanciad", "cofundad", "cogid", "cogitad", "cogobernad", "cohabitad", "cohechad", "cohesionad", "cohibid", "cohondid", "cohonestad", "coimead", "coincidid", "cojead", "colaborad", "colad", "colapsad", "colchad", "colead", "coleccionad", "colectad", "colectivizad", "colegiad", "colegid", "coleguead", "colgad", "colidid", "coligad", "colimad", "colindad", "colisionad", "colmad", "colmatad", "colocad", "colonizad", "colorad", "coloread", "colorid", "coludid", "columbrad", "columpiad", "comadread", "comandad", "combad", "combatid", "combinad", "comedid", "comentad", "comenzad", "comerciad", "comercializad", "cometid", "comid", "comisad", "comisariad", "comiscad", "comisionad", "comisquead", "compactad", "compadecid", "compadrad", "compadread", "compaginad", "comparad", "comparecid", "compartid", "compartimentad", "compartimentalizad", "compasad", "compatibilizad", "compelid", "compendiad", "compenetrad", "compensad", "competid", "compilad", "compinchad", "complacid", "complejizad", "complementad", "completad", "complicad", "complotad", "comportad", "compostad", "comprad", "comprehendid", "comprendid", "comprimid", "comprobad", "comprometid", "compuest", "compulsad", "compungid", "compurgad", "computad", "computarizad", "computerizad", "comulgad", "comunicad", "comunitarizad", "concadenad", "concatenad", "concebid", "concedid", "concelebrad", "concentrad", "conceptuad", "conceptualizad", "concernid", "concertad", "concesionad", "conchabad", "concienciad", "concientizad", "conciliad", "concitad", "concluid", "concordad", "concretad", "concretizad", "conculcad", "concurrid", "concursad", "condecorad", "condenad", "condensad", "condesad", "condescendid", "condich", "condicionad", "condimentad", "condolid", "condonad", "conducid", "conectad", "conexionad", "confabulad", "confeccionad", "confederad", "conferenciad", "conferid", "confesad", "confiad", "configurad", "confinad", "confirmad", "confiscad", "confitad", "conflictuad", "confligid", "confluid", "conformad", "confortad", "confraternizad", "confrontad", "confundid", "congelad", "congeniad", "congestionad", "conglomerad", "congojad", "congraciad", "congratulad", "congregad", "conhortad", "conjeturad", "conjugad", "conjuntad", "conjurad", "conllevad", "conmemorad", "conmensurad", "conminad", "conmocionad", "conmovid", "conmutad", "connaturalizad", "connotad", "conocid", "conquistad", "consagrad", "conseguid", "consejad", "consensuad", "consentid", "conservad", "considerad", "consignad", "consistid", "consolad", "consolidad", "consonad", "consorciad", "conspirad", "constad", "constatad", "constelad", "consternad", "constipad", "constitucionalizad", "constituid", "constreñid", "construid", "consultad", "consumad", "consumid", "contabilizad", "contactad", "contad", "contagiad", "contaminad", "contemplad", "contemporizad", "contendid", "contenid", "contentad", "contestad", "contextuad", "contextualizad", "continuad", "contonead", "contornad", "contornead", "contorsionad", "contraargumentad", "contraatacad", "contrabalancead", "contrabandead", "contrademandad", "contradich", "contragolpead", "contrahech", "contraíd", "contraindicad", "contramandad", "contramarchad", "contrapesad", "contraprogramad", "contrapuest", "contrapuntead", "contrargumentad", "contrariad", "contrarrestad", "contrastad", "contratacad", "contratad", "contravenid", "contribuid", "contristad", "controlad", "controvertid", "contundid", "conturbad", "contusionad", "convalecid", "convalidad", "convencid", "convenid", "convergid", "conversad", "convertid", "convidad", "convivid", "convocad", "convulsionad", "conzederad", "cooperad", "cooperativizad", "cooptad", "coordenad", "coordinad", "coorganizad", "copad", "copatrocinad", "copead", "copetead", "copiad", "copilotad", "copresentad", "copresidid", "coproducid", "coprotagonizad", "copulad", "coquetead", "coquificad", "corcovead", "coread", "coreografiad", "corlad", "corlead", "cornead", "coronad", "corporizad", "corregid", "correlacionad", "correspondid", "corresponsabilizad", "corretead", "corrid", "corroborad", "corroíd", "corrompid", "corrugad", "cortad", "cortejad", "cortocircuitad", "corvad", "coscad", "cosechad", "cosid", "cosificad", "cosmetizad", "cosquillead", "costad", "costead", "cotejad", "cotillead", "cotizad", "cotorread", "crackead", "cranead", "cread", "crecid", "creíd", "cremad", "creosotad", "crepitad", "crespad", "crevad", "criad", "cribad", "criminad", "criminalizad", "crinad", "criogenizad", "criopreservad", "crismad", "crispad", "cristalizad", "cristianad", "cristianizad", "cristinead", "criticad", "croad", "cromad", "cronificad", "cronometrad", "crotorad", "crotoread", "crucificad", "crujid", "cruzad", "cuadrad", "cuadriculad", "cuadriplicad", "cuadruplicad", "cuajad", "cualificad", "cuantificad", "cuantizad", "cuartead", "cuartelad", "cuatriplicad", "cubanizad", "cubicad", "cubiert", "cubijad", "cuchad", "cucharead", "cuchichead", "cuchuchead", "cueread", "cuerpead", "cuestionad", "cuetead", "cuidad", "cuitad", "culead", "culebread", "culiad", "culminad", "culpabilizad", "culpad", "cultivad", "culturad", "culturalizad", "culturizad", "cumplid", "cumplimentad", "cumulad", "cundid", "cunead", "cuñad", "cuotead", "curad", "curiosead", "currad", "currelad", "cursad", "curtid", "curvad", "curvead", "custodiad", "customizad", "dactilografiad", "dad", "damnificad", "danzad", "dañad", "dañinead", "darlusad", "datad", "datead", "deambulad", "debatid", "debelad", "debid", "debilitad", "debitad", "debutad", "decaíd", "decantad", "decapad", "decapitad", "decebid", "decelerad", "decepcionad", "decidid", "decimalizad", "declamad", "declarad", "declinad", "decodificad", "decolad", "decolorad", "decomisad", "decomisionad", "deconstruid", "decorad", "decrecid", "decrementad", "decretad", "decuplad", "decuplicad", "decusad", "dedead", "dedicad", "deducid", "defecad", "defeccionad", "defendid", "defenestrad", "defensad", "deferid", "definid", "deflagrad", "deflectad", "deflorad", "defoliad", "deforestad", "deformad", "defosforilad", "defraudad", "degenerad", "deglutid", "degollad", "degradad", "degustad", "deificad", "dejad", "delaminad", "delatad", "delegad", "deleitad", "deletread", "deleznad", "delgazad", "deliberad", "delimitad", "delinead", "delinquid", "delirad", "deludid", "demacrad", "demandad", "demaquillad", "demarcad", "demarrad", "demediad", "demeritad", "democratizad", "demodulad", "demolid", "demonizad", "demorad", "demostrad", "demudad", "denegad", "denigrad", "denodad", "denominad", "denostad", "denotad", "densificad", "dentad", "dentellead", "dentrad", "denudad", "denunciad", "deparad", "departid", "depauperad", "dependid", "depilad", "deplorad", "deportad", "depositad", "depravad", "deprecad", "depreciad", "depredad", "deprimid", "depuest", "depurad", "deputad", "derechizad", "derelinquid", "derivad", "derogad", "derramad", "derrapad", "derrelinquid", "derrengad", "derretid", "derribad", "derrocad", "derrochad", "derrot", "derrotad", "derruid", "derrumbad", "desabastecid", "desabejad", "desabotonad", "desabrid", "desabrigad", "desabrochad", "desacatad", "desacelerad", "desacertad", "desacomodad", "desaconsejad", "desacoplad", "desacordad", "desacostumbrad", "desacralizad", "desacreditad", "desactivad", "desactualizad", "desaduanizad", "desafectad", "desafiad", "desafilad", "desafiliad", "desafinad", "desaforad", "desagotad", "desagradad", "desagradecid", "desagraviad", "desagregad", "desaguad", "desahijad", "desahogad", "desahuciad", "desainad", "desairad", "desajustad", "desalad", "desalentad", "desalinead", "desalinizad", "desaliñad", "desalmacenad", "desalojad", "desalquilad", "desamad", "desamarrad", "desambiguad", "desamistad", "desamortizad", "desamparad", "desandad", "desangrad", "desanimad", "desanudad", "desapalancad", "desaparead", "desaparecid", "desapasionad", "desapegad", "desaplicad", "desaprendid", "desaprobad", "desaprovechad", "desarbolad", "desarchivad", "desarenad", "desarmad", "desarraigad", "desarreglad", "desarrollad", "desarropad", "desarrugad", "desarticulad", "desasid", "desasnad", "desasosegad", "desatad", "desatascad", "desatendid", "desatentad", "desatinad", "desatornillad", "desatracad", "desatraillad", "desatrancad", "desautorizad", "desavenid", "desayunad", "desazolvad", "desazonad", "desballestad", "desbancad", "desbandad", "desbarajustad", "desbaratad", "desbarrad", "desbarrancad", "desbastad", "desbloquead", "desbocad", "desbordad", "desbotonad", "desbravad", "desbrozad", "descabalgad", "descabellad", "descabezad", "descachad", "descachimbad", "descaecid", "descafeinad", "descalabrad", "descalibrad", "descalificad", "descalzad", "descambiad", "descaminad", "descampad", "descansad", "descapitalizad", "descarad", "descarapelad", "descarbonatad", "descarbonizad", "descarboxilad", "descargad", "descarnad", "descarriad", "descarrilad", "descartad", "descasad", "descascarad", "descascarillad", "descastad", "descatalogad", "descendid", "descentrad", "descentralizad", "desceñid", "descerebrad", "descerrajad", "descertificad", "deschavad", "deschongad", "descifrad", "desclasad", "desclasificad", "desclavad", "descobijad", "descocad", "descocid", "descodificad", "descogid", "descogollad", "descohesionad", "descojonad", "descolgad", "descollad", "descolocad", "descolonizad", "descombrad", "descomedid", "descomid", "descompensad", "descompilad", "descompresionad", "descomprimid", "descompuest", "descomulgad", "desconcentrad", "desconceptuad", "desconcertad", "desconchad", "desconectad", "desconfiad", "descongelad", "descongestionad", "desconocid", "desconsagrad", "desconsiderad", "desconsolad", "desconsolidad", "descontad", "descontaminad", "descontentad", "descontextualizad", "descontinuad", "descontracturad", "descontratad", "descontrolad", "desconvenid", "desconvocad", "descoordinad", "descorazonad", "descorchad", "descordad", "descornad", "descorrid", "descortezad", "descosid", "descostillad", "descoyuntad", "descreíd", "descriminalizad", "descript", "descrit", "descruzad", "descuadrad", "descuajad", "descualificad", "descuartizad", "descubiert", "descuidad", "desdeñad", "desdibujad", "desdich", "desdoblad", "desdolarizad", "desdorad", "desdramatizad", "desead", "desecad", "desechad", "desembalad", "desembalsad", "desembarazad", "desembarcad", "desembargad", "desembarrancad", "desembocad", "desembolsad", "desembolsillad", "desemborrachad", "desembozad", "desembragad", "desembrollad", "desembrujad", "desembuchad", "desempacad", "desempalmad", "desempañad", "desempaquetad", "desempatad", "desempedrad", "desempeñad", "desempolvad", "desenamorad", "desencabestrad", "desencadenad", "desencajad", "desencallad", "desencaminad", "desencantad", "desencasillad", "desencerrad", "desenchufad", "desenclavad", "desencontrad", "desencorsetad", "desencorvad", "desencriptad", "desendeudad", "desenfadad", "desenfardelad", "desenfocad", "desenfrenad", "desenfundad", "desenganchad", "desengañad", "desengrasad", "desenlazad", "desenmarañad", "desenmascarad", "desenojad", "desenredad", "desenrollad", "desenroscad", "desensamblad", "desensibilizad", "desensillad", "desentendid", "desenterrad", "desentonad", "desentrañad", "desentubad", "desentumecid", "desenvainad", "desenvuelt", "desequilibrad", "desertad", "desertificad", "desertizad", "desescalad", "desescolarizad", "desescombrad", "desesperad", "desesperanzad", "desestabilizad", "desestacionalizad", "desestimad", "desestimulad", "desestresad", "desestructurad", "desfalcad", "desfallecid", "desfasad", "desfascistizad", "desfavorecid", "desfigurad", "desfilad", "desfinanciad", "desflecad", "desflorad", "desfogad", "desfondad", "desforzad", "desfragmentad", "desgajad", "desganad", "desgañitad", "desgarrad", "desgastad", "desglasad", "desglosad", "desgobernad", "desgonzad", "desgraciad", "desgranad", "desgravad", "desguanguañad", "desguarnecid", "desguazad", "desgubernamentalizad", "desguinzad", "deshabilitad", "deshabitad", "deshabituad", "deshebrad", "deshech", "deshelad", "desheredad", "deshidratad", "deshidrogenizad", "deshilachad", "deshilad", "deshilvanad", "deshinchad", "deshojad", "deshonorad", "deshonrad", "deshuesad", "deshumanizad", "deshumidificad", "desidentificad", "desideologizad", "designad", "desilusionad", "desimpresionad", "desimputad", "desincentivad", "desincorporad", "desincronizad", "desincrustad", "desindustrializad", "desinfectad", "desinflad", "desinflamad", "desinformad", "desinhibid", "desinsectad", "desinstalad", "desintegrad", "desinteresad", "desintoxicad", "desinvertid", "desionizad", "desistid", "desjarretad", "desjudicializad", "deslastrad", "deslavad", "deslazad", "deslegitimad", "desleíd", "deslenguad", "desliad", "desligad", "deslindad", "deslizad", "deslocalizad", "deslomad", "deslucid", "deslumbrad", "deslustrad", "desmadejad", "desmadrad", "desmalezad", "desmandad", "desmantelad", "desmaquillad", "desmarcad", "desmarimbad", "desmasculinizad", "desmaterializad", "desmayad", "desmedid", "desmedrad", "desmejorad", "desmelenad", "desmembrad", "desmentid", "desmenuzad", "desmerecid", "desmeritad", "desmesurad", "desmigad", "desmigajad", "desmilitarizad", "desminad", "desmitificad", "desmochad", "desmoldad", "desmonetizad", "desmontad", "desmonterad", "desmoralizad", "desmoronad", "desmotad", "desmotivad", "desmovilizad", "desmuert", "desnacid", "desnacionalizad", "desnatad", "desnaturalizad", "desnivelad", "desnortad", "desnucad", "desnuclearizad", "desnudad", "desnutrid", "desobedecid", "desobligad", "desobstruid", "desoccidentalizad", "desocupad", "desodorizad", "desoíd", "desolad", "desoldad", "desollad", "desorbitad", "desordenad", "desorejad", "desorganizad", "desorientad", "desornamentad", "desosad", "desosegad", "desovad", "desovillad", "desoxigenad", "despabilad", "despachad", "despachurrad", "despampanad", "despanzurrad", "desparasitad", "desparecid", "desparpajad", "desparramad", "despartidizad", "despatarrad", "despechad", "despedazad", "despedid", "despegad", "despeinad", "despejad", "despellejad", "despelotad", "despeluzad", "despenad", "despenalizad", "despeñad", "despepitad", "desperad", "despercudid", "desperdiciad", "desperdigad", "desperecid", "desperezad", "despersonalizad", "despertad", "despezad", "despicad", "despiezad", "despilfarrad", "despintad", "despiojad", "despistad", "desplantad", "desplazad", "desplegad", "desplomad", "desplumad", "despoblad", "despoetizad", "despojad", "despolarizad", "despolitizad", "despollad", "despolvad", "despolvoread", "desportillad", "desposad", "desposeíd", "despotizad", "despotricad", "despreciad", "desprecintad", "desprendid", "despreocupad", "desprestigiad", "desprivatizad", "desprofesionalizad", "desprogramad", "desprotegid", "desprotonad", "desproveíd", "desprovist", "despuntad", "desquebrajad", "desquiciad", "desquitad", "desrabad", "desrabotad", "desratizad", "desregulad", "desregularizad", "destacad", "destapad", "destartalad", "destazad", "destechad", "destejid", "destellad", "destemplad", "destendid", "destensad", "desteñid", "desternillad", "desterrad", "destetad", "destilad", "destinad", "destituid", "destocad", "destorcid", "destornillad", "destorvad", "destrabad", "destrancad", "destratad", "destrenzad", "destrepad", "destripad", "destrocad", "destronad", "destroncad", "destrozad", "destruid", "destupid", "desturcad", "desubicad", "desunid", "desuscript", "desuscrit", "desvaíd", "desvainad", "desvalijad", "desvalorizad", "desvanecid", "desvariad", "desvasad", "desvelad", "desvenad", "desvencijad", "desventad", "desventajad", "desventrad", "desvertebrad", "desvestid", "desviad", "desvinculad", "desvirgad", "desvirtuad", "desvivid", "detallad", "detectad", "detenid", "detentad", "detergid", "deteriorad", "determinad", "detestad", "detonad", "detoxificad", "detraíd", "deturpad", "devaluad", "devanad", "devastad", "develad", "devengad", "devenid", "devid", "devisad", "devorad", "devuelt", "dexad", "dezmad", "diabolizad", "diafragmad", "diagnosticad", "diagonalizad", "diagramad", "dializad", "dialogad", "diamantad", "dibujad", "dich", "dicotomizad", "dictad", "dictaminad", "dietad", "diezmad", "difamad", "diferenciad", "diferid", "dificultad", "difractad", "difuminad", "difundid", "digerid", "digitad", "digitalizad", "dignad", "dignificad", "dilapidad", "dilatad", "diligenciad", "dilucidad", "diluid", "dimanad", "dimensionad", "dimerizad", "dimidiad", "dimisionad", "dimitid", "dinamitad", "dinamizad", "diñad", "diplomad", "dippead", "diptongad", "diputad", "direccionad", "dirigid", "dirimid", "discad", "discapacitad", "discernid", "disciplinad", "discontinuad", "discordad", "discrepad", "discretead", "discriminad", "disculpad", "discurrid", "discursad", "discursead", "discutid", "disecad", "diseccionad", "disectad", "diseminad", "disentid", "diseñad", "disertad", "disfamad", "disfrazad", "disfrutad", "disgregad", "disgustad", "disimulad", "disipad", "dislocad", "disminuid", "disociad", "disonad", "disparad", "disparatad", "dispensad", "dispensarizad", "dispersad", "dispuest", "disputad", "distad", "distanciad", "distendid", "distilad", "distinguid", "distorsionad", "distraíd", "distribuid", "disturbad", "disuadid", "disuelt", "divagad", "divergid", "diversificad", "divertid", "dividid", "divinad", "divinizad", "divisad", "divorciad", "divulgad", "doblad", "doblegad", "dobletead", "doctorad", "doctrinad", "documentad", "dogmatizad", "dolad", "dolarizad", "dolid", "domad", "domeñad", "domesticad", "domiciliad", "dominad", "donad", "doñead", "dopad", "dorad", "dormid", "dormitad", "dosificad", "dotad", "dovelad", "draftead", "dragad", "dragonead", "dramatizad", "drapead", "drenad", "driblad", "driblead", "drogad", "dubdad", "duchad", "dudad", "dulcificad", "duplicad", "durad", "echad", "eclipsad", "eclosionad", "economizad", "ecualizad", "edificad", "editad", "editorializad", "educad", "educid", "edulcorad", "efectivizad", "efectuad", "efeminad", "eficientad", "eficientizad", "efundid", "egresad", "ejecutad", "ejecutoriad", "ejemplarizad", "ejemplificad", "ejercid", "ejercitad", "elaborad", "elect", "electoralizad", "electrificad", "electrizad", "electrocutad", "elegid", "elevad", "elidid", "eligid", "elijad", "eliminad", "elogiad", "elongad", "elucidad", "elucubrad", "eludid", "eluid", "emanad", "emancipad", "emasculad", "embadurnad", "embaíd", "embalad", "embaldosad", "embalsad", "embalsamad", "embanderad", "embarazad", "embarcad", "embargad", "embarrad", "embarrancad", "embarullad", "embasad", "embastad", "embaucad", "embaulad", "embazad", "embebecid", "embebid", "embejucad", "embelecad", "embelesad", "embellecid", "embestid", "embetunad", "emblanquecid", "embobad", "embocad", "embodegad", "embolad", "embolizad", "embolsad", "embolsillad", "embonad", "emboquillad", "emborrachad", "emborronad", "emboscad", "embotad", "embotellad", "embovedad", "embozad", "embozalad", "embragad", "embravecid", "embrazad", "embread", "embretad", "embriagad", "embridad", "embrollad", "embromad", "embrujad", "embrutecid", "embuchad", "embullad", "embustead", "embustid", "embutid", "emendad", "emergid", "emigrad", "emitid", "emocionad", "empacad", "empachad", "empadronad", "empalad", "empalagad", "empalidecid", "empalizad", "empalmad", "empanad", "empanizad", "empantanad", "empañad", "empapad", "empapelad", "empapuciad", "empapuzad", "empaquetad", "emparedad", "emparejad", "emparentad", "emparrillad", "empastad", "empastillad", "empatad", "empatizad", "empavad", "empavesad", "empecid", "empecinad", "empedernid", "empedrad", "empelad", "empellad", "empellid", "empenachad", "empeñad", "empeorad", "empequeñecid", "emperad", "emperejilad", "emperifollad", "emperrad", "empezad", "empiltrad", "empinad", "empingorotad", "empitonad", "emplatad", "emplazad", "emplead", "emplomad", "emplumad", "empobrecid", "empoderad", "empodrecid", "empollad", "empolvad", "emponzoñad", "empotrad", "empozad", "emprendid", "empreñad", "emprestad", "emproblemad", "empujad", "empuñad", "emputad", "emputecid", "emulad", "emulgid", "emulsificad", "emulsionad", "emungid", "enajenad", "enalmagrad", "enaltecid", "enamorad", "enamoriscad", "enarbolad", "enarcad", "enardecid", "enarenad", "enastad", "enbiad", "encabad", "encabalgad", "encabestrad", "encabezad", "encabritad", "encabronad", "encachimbad", "encadenad", "encajad", "encajonad", "encalabozad", "encalabrinad", "encalad", "encallad", "encallecid", "encalmad", "encalzad", "encamad", "encaminad", "encandilad", "encanecid", "encantad", "encañonad", "encaperuzad", "encapotad", "encaprichad", "encapsulad", "encapuchad", "encapuzad", "encarad", "encaramad", "encarcelad", "encarecid", "encargad", "encariñad", "encarnad", "encarnecid", "encarnizad", "encarrilad", "encartad", "encasillad", "encasquetad", "encasquillad", "encastad", "encastillad", "encastrad", "encatusad", "encausad", "encauzad", "encebad", "enceguecid", "encelad", "encenagad", "encendid", "encenizad", "encerad", "encerrad", "encestad", "encetad", "enchachad", "enchapad", "enchapopotad", "encharcad", "enchilad", "enchinad", "enchiquerad", "enchironad", "enchuecad", "enchufad", "enchuflad", "enchulad", "encimad", "encintad", "enclaustrad", "enclavad", "encofrad", "encogid", "encolad", "encolerizad", "encolumnad", "encomendad", "encomenzad", "encomiad", "enconad", "enconchad", "encontrad", "encoñad", "encopetad", "encorajinad", "encorazad", "encordad", "encornudad", "encorsetad", "encorvad", "encostad", "encostalad", "encrespad", "encriptad", "encuadernad", "encuadrad", "encuartelad", "encubad", "encubertad", "encubiert", "encuclillad", "encuerad", "encuestad", "enculad", "encumbrad", "encunetad", "encurtid", "endechad", "endemoniad", "enderezad", "endeudad", "endiablad", "endilgad", "endiñad", "endiosad", "endomingad", "endosad", "endrogad", "endulzad", "endurecid", "enemistad", "energizad", "enervad", "enfadad", "enfangad", "enfardad", "enfatizad", "enfebrecid", "enfermad", "enfervorizad", "enfeudad", "enfilad", "enflacad", "enflaquecid", "enflorad", "enfocad", "enforcad", "enfoscad", "enfrascad", "enfrenad", "enfrentad", "enfriad", "enfrontad", "enfundad", "enfurecid", "enfurruñad", "engalanad", "engalgad", "engallad", "enganchad", "engangrenad", "engañad", "engarruchad", "engarzad", "engastad", "engatillad", "engatusad", "engavetad", "engendrad", "englobad", "engolfad", "engolondrinad", "engolosinad", "engomad", "engominad", "engordad", "engranad", "engrandad", "engrandecid", "engrapad", "engrasad", "engravecid", "engreíd", "engrillad", "engrilletad", "engrosad", "engrudad", "engruesad", "engrupid", "enguacalad", "enguantad", "enguatad", "enguirnaldad", "engullid", "enharinad", "enhebrad", "enherbolad", "enhilad", "enhornad", "enjabonad", "enjaezad", "enjaguad", "enjalbegad", "enjalmad", "enjambrad", "enjaretad", "enjaulad", "enjoyad", "enjuagad", "enjugad", "enjuiciad", "enjuncad", "enjutad", "enlaciad", "enladrillad", "enlatad", "enlazad", "enlentecid", "enlenzad", "enlistad", "enlodad", "enloquecid", "enlosad", "enlozad", "enlucid", "enlutad", "enmaderad", "enmadrad", "enmallad", "enmanillad", "enmarañad", "enmarcad", "enmarrocad", "enmascarad", "enmasillad", "enmendad", "enmohecid", "enmoquetad", "enmudecid", "enmugrad", "ennegrecid", "ennoblecid", "enojad", "enorgullecid", "enquistad", "enrabietad", "enracimad", "enraizad", "enramad", "enranciad", "enrarecid", "enrasad", "enratonad", "enredad", "enrejad", "enrevesad", "enrielad", "enripiad", "enriquecid", "enriscad", "enristrad", "enrocad", "enrojecid", "enrolad", "enrollad", "enronquecid", "enroscad", "enrostrad", "enrubiad", "enrumbad", "enrutad", "ensalzad", "ensamblad", "ensanchad", "ensangrentad", "ensañad", "ensartad", "ensayad", "ensebad", "ensecad", "enseñad", "enseñoread", "ensillad", "ensimismad", "ensoberbecid", "ensobrad", "ensogad", "ensombrecid", "ensoñad", "ensopad", "ensordecid", "ensortijad", "ensuciad", "entablad", "entablillad", "entallad", "entapizad", "entecad", "entendid", "entenebrecid", "enterad", "entercad", "enternecid", "enterrad", "entesad", "entibiad", "entiesad", "entintad", "entoldad", "entomatad", "entonad", "entontecid", "entorchad", "entornad", "entorpecid", "entortijad", "entrabad", "entrad", "entramad", "entrampad", "entrañad", "entreabiert", "entrecerrad", "entrechocad", "entrecomillad", "entrecortad", "entrecruzad", "entredich", "entregad", "entrelazad", "entremetid", "entremezclad", "entrenad", "entreoíd", "entresacad", "entretejid", "entretenid", "entrevenid", "entreverad", "entrevist", "entrevistad", "entripad", "entristecid", "entrojad", "entrometid", "entronad", "entroncad", "entronizad", "entropezad", "entrujad", "entubad", "entumecid", "entunicad", "enturbiad", "entusiasmad", "enumerad", "enunciad", "envainad", "envalentonad", "envanecid", "envarad", "envasad", "envejecid", "envenenad", "envergad", "envergonzad", "envestid", "enviad", "enviciad", "envidad", "envidiad", "envigad", "envilecid", "enviscad", "enviudad", "envuelt", "enyerbad", "enyesad", "enzacatad", "enzarzad", "epatad", "epitomad", "equidistad", "equilibrad", "equipad", "equiparad", "equivalid", "equivocad", "erguid", "erigid", "erizad", "erogad", "erosionad", "erotizad", "errad", "erradicad", "eructad", "erupcionad", "esbarad", "esbozad", "escabechad", "escabiad", "escabullid", "escachad", "escaecid", "escalad", "escaldad", "escalentad", "escalfad", "escalofriad", "escalonad", "escamad", "escamotead", "escampad", "escanciad", "escandalizad", "escandid", "escanead", "escapad", "escaquead", "escarabajead", "escaramuzad", "escarapelad", "escarbad", "escarchad", "escardad", "escariad", "escarificad", "escarmenad", "escarmentad", "escarnecid", "escarpad", "escasead", "escatimad", "escavad", "escayolad", "escenificad", "escenografiad", "escindid", "esclarecid", "esclavizad", "esclerosad", "esclerotizad", "escobad", "escobillad", "escocid", "escodad", "escofinad", "escogid", "escolarizad", "escoltad", "escombrad", "escondid", "escoplead", "escorad", "escoriad", "escorzad", "escotad", "escrachad", "escript", "escrit", "escriturad", "escrudiñad", "escrupulizad", "escrutad", "escuadrad", "escuadronad", "escuchad", "escudad", "escudriñad", "esculpid", "escupid", "escurrid", "escusad", "esencializad", "esfollad", "esforzad", "esfumad", "esgrafiad", "esgrimid", "esguazad", "eslabonad", "esleíd", "esmaltad", "esmerad", "esmerilad", "esmorecid", "esnifad", "espabilad", "espachurrad", "espaciad", "espacializad", "espantad", "españolizad", "esparcid", "espartad", "especiad", "especializad", "especificad", "especulad", "espejead", "espeluznad", "esperad", "esperanzad", "espesad", "espetad", "espiad", "espichad", "espigad", "espinad", "espirad", "espiritualizad", "esplanad", "esplendid", "esplicad", "espolead", "espoliad", "espolvoread", "esponjad", "esponsorizad", "espontanead", "esposad", "espresad", "esprintad", "espulgad", "espumad", "espumead", "esputad", "esquematizad", "esquiad", "esquilad", "esquilmad", "esquinad", "esquinzad", "esquivad", "estabilizad", "establecid", "estabulad", "estacad", "estacionad", "estacionalizad", "estad", "estafad", "estallad", "estampad", "estampillad", "estancad", "estandarizad", "estañad", "estaquillad", "estarcid", "estatizad", "estatuid", "estelarizad", "estendid", "esterad", "estercolad", "estereotipad", "esterificad", "esterilizad", "estetizad", "estibad", "estigmatizad", "estilad", "estilizad", "estimad", "estimulad", "estipulad", "estirad", "estofad", "estoquead", "estorbad", "estornudad", "estozolad", "estragad", "estrangulad", "estratificad", "estrechad", "estregad", "estrellad", "estremecid", "estrenad", "estreñid", "estresad", "estriad", "estribad", "estropead", "estruchad", "estructurad", "estrujad", "estucad", "estudiad", "esvarad", "eterizad", "eternizad", "etimologizad", "etiquetad", "etoxilad", "europeizad", "euscaldunizad", "euskaldunizad", "evacuad", "evadid", "evaluad", "evanescid", "evangelizad", "evaporad", "evidenciad", "eviscerad", "evitad", "evocad", "evolucionad", "exacerbad", "exagerad", "exaltad", "examinad", "exasperad", "excarcelad", "excavad", "excedid", "exceptuad", "excitad", "exclamad", "exclaustrad", "excluid", "excomulgad", "excoriad", "excretad", "exculpad", "excusad", "execrad", "executad", "exentad", "exercitad", "exfiltrad", "exfoliad", "exhalad", "exhibid", "exhortad", "exhumad", "exigid", "exilad", "exiliad", "eximid", "existid", "existimad", "exonerad", "exorcizad", "exornad", "expandid", "expansionad", "expatriad", "expectad", "expectorad", "expedicionad", "expedid", "expedientad", "expeditad", "expelid", "expendid", "experienciad", "experimentad", "expiad", "expirad", "explanad", "explayad", "explicad", "explicitad", "explorad", "explosionad", "explotad", "expoliad", "exponenciad", "exportad", "expresad", "exprimid", "expropiad", "expuest", "expugnad", "expulsad", "expurgad", "extasiad", "extendid", "extenuad", "exteriorizad", "exterminad", "externad", "externalizad", "extinguid", "extirpad", "extorsionad", "extractad", "extraditad", "extraíd", "extralimitad", "extrañad", "extrapolad", "extravasad", "extraviad", "extremad", "extrudid", "extruid", "extubad", "exudad", "exulcerad", "exultad", "eyaculad", "eyectad", "fabricad", "fabulad", "fachad", "facilitad", "factorizad", "facturad", "facultad", "faenad", "fagocitad", "fajad", "falagad", "falcacead", "faldead", "fallad", "fallecid", "fallid", "falsad", "falsead", "falsificad", "faltad", "familiarizad", "fanatizad", "fanfarronead", "fantasead", "fantasiad", "fantasmead", "farandulead", "fardad", "farfullad", "farolead", "farread", "fascinad", "fastidiad", "fatigad", "favelizad", "favorecid", "fech", "fechad", "fecundad", "fecundizad", "fedatad", "fedatead", "federad", "federalizad", "felicitad", "femad", "feminizad", "fenecid", "feriad", "fermentad", "ferrad", "fertilizad", "fervorizad", "festejad", "festinad", "festonad", "festonead", "fetichizad", "fiad", "fibrilad", "ficad", "ficcionad", "ficcionalizad", "fichad", "fidelizad", "figurad", "fijad", "filad", "fildead", "filetead", "filiad", "filmad", "filosofad", "filtrad", "finad", "finalizad", "financiad", "fincad", "fingid", "finid", "finiquitad", "fintad", "firmad", "fiscalizad", "fisgad", "fisgonead", "fisionad", "fisurad", "flagelad", "flambead", "flamead", "flanquead", "flaquead", "flechad", "fletad", "flexead", "flexibilizad", "flexionad", "flipad", "flirtead", "flojead", "florad", "floread", "florecid", "floretead", "flotad", "fluctuad", "fluid", "fluidizad", "fluorad", "focalizad", "foguead", "folgad", "foliad", "follad", "folletead", "fomentad", "fondead", "forcejad", "forcejead", "forestad", "forjad", "formad", "formalizad", "formatead", "formulad", "fornicad", "forrad", "forrajead", "fortalecid", "fortificad", "forzad", "fosfatad", "fosfatizad", "fosforecid", "fosforescid", "fosforilad", "fosilizad", "fotocopiad", "fotografiad", "fotoshopead", "fracasad", "fraccionad", "fracturad", "fragilizad", "fragmentad", "fraguad", "franelead", "frangid", "franjead", "franquead", "franquiciad", "frasead", "fraternizad", "frecuentad", "fregad", "fregotead", "freíd", "frenad", "frentead", "fresad", "frezad", "friccionad", "frisad", "frit", "fritad", "frivolizad", "frizad", "frotad", "fructificad", "fruid", "fruncid", "frustrad", "frutad", "fufad", "fugad", "fulgid", "fulgurad", "fulminad", "fumad", "fumblead", "fumigad", "funad", "funcionad", "fundad", "fundamentad", "fundid", "fungid", "fuñid", "furtad", "furulad", "fusilad", "fusionad", "fustigad", "gafad", "gaguead", "galantead", "galardonad", "galguead", "gallardead", "gallead", "gallofead", "galonead", "galopad", "galopead", "galvanizad", "gamberread", "gambetead", "ganad", "gandujad", "gandulead", "gangrenad", "ganguead", "gañid", "garabatead", "garantid", "garantizad", "garapiñad", "garbad", "garchad", "gargarizad", "garlad", "garpad", "garrapatead", "garrapiñad", "garronead", "garrotead", "gasead", "gasificad", "gastad", "gatead", "gatillad", "gayad", "gelatinizad", "gelificad", "gemid", "geminad", "generad", "generalizad", "genotipad", "gentrificad", "geobloquead", "geolocalizad", "georeferenciad", "georreferenciad", "gerenciad", "germanizad", "germinad", "gestad", "gesticulad", "gestionad", "gibad", "gilipollead", "gimotead", "girad", "giroelongad", "gitanead", "glasead", "globalizad", "gloriad", "glorificad", "glosad", "glotalizad", "glotonead", "gobernad", "golead", "golfead", "golosead", "golpead", "golpetead", "googlead", "gorgotead", "gorjead", "gorread", "gorronead", "gostead", "gotead", "gozad", "grabad", "gradad", "graduad", "graffitead", "graficad", "grafitead", "granad", "granead", "granizad", "granjead", "granulad", "grapad", "gratificad", "gratinad", "gravad", "gravitad", "graznad", "grillad", "griñotad", "gripad", "gritad", "gruñid", "guacaread", "guadañad", "guapead", "guarachead", "guardad", "guarecid", "guarid", "guarnecid", "guarnid", "guasapead", "guataquead", "guayad", "guerread", "guglead", "guiad", "guillotinad", "guinchad", "guindad", "guiñad", "guionad", "guionizad", "guisad", "guitarread", "gulusmead", "gustad", "habid", "habilitad", "habitad", "habituad", "hablad", "hacendad", "hachad", "hacinad", "hackead", "halad", "halagad", "hallad", "halogenad", "hamacad", "hamaquead", "hambread", "hanguead", "haraganead", "hartad", "hastiad", "hech", "hechizad", "hedid", "hegemonizad", "helad", "helenizad", "helitransportad", "henchid", "hendid", "heñid", "herbad", "herborizad", "heredad", "herid", "hermanad", "hermandad", "hermetizad", "hermosead", "herniad", "herrad", "herrumbrad", "hervid", "hesitad", "hibernad", "hibridad", "hidratad", "hidrogenad", "hidrolizad", "higienizad", "hilad", "hilvanad", "hincad", "hinchad", "hipad", "hiperactivad", "hiperbolizad", "hipertrofiad", "hiperventilad", "hipnotizad", "hipotecad", "hipotetizad", "hisopad", "hispanizad", "hispid", "historiad", "hocicad", "hociquead", "hojaldrad", "hojead", "holgad", "holgazanead", "hollad", "hombread", "homenajead", "homogeneizad", "homologad", "homosexualizad", "honestad", "honorad", "honrad", "horadad", "horizontalizad", "hormigonad", "hormiguead", "hornead", "horripilad", "horrorizad", "hospedad", "hospitalizad", "hostiad", "hostigad", "hostilizad", "hozad", "huevead", "huid", "humad", "humanad", "humanizad", "humead", "humectad", "humedecid", "humidificad", "humillad", "hundid", "hurgad", "huronead", "hurtad", "husmad", "husmead", "idead", "idealizad", "identificad", "ideologizad", "idiotizad", "idolatrad", "ignorad", "igualad", "ilegalizad", "ilegitimad", "iludid", "iluminad", "ilusionad", "ilustrad", "imaginad", "imanad", "imantad", "imbecilizad", "imbricad", "imbuid", "imitad", "impacientad", "impactad", "impagad", "impartid", "impedid", "impelid", "impendid", "imperad", "impermeabilizad", "impersonalizad", "impetrad", "implantad", "implementad", "implicad", "implorad", "implosionad", "importad", "importunad", "imposibilitad", "impostad", "imprecad", "impregnad", "impres", "impresionad", "imprimad", "imprimid", "improbad", "improvisad", "impuest", "impugnad", "impulsad", "impurificad", "imputad", "inactivad", "inadmitid", "inaugurad", "incapacitad", "incardinad", "incautad", "incendiad", "incensad", "incentivad", "incidentad", "incidid", "incinerad", "incitad", "inclinad", "incluid", "incoad", "incomodad", "incomunicad", "inconformad", "incordiad", "incorporad", "incrementad", "increpad", "incriminad", "incrustad", "incubad", "inculcad", "inculpad", "incumbid", "incumplid", "incurrid", "incursionad", "indagad", "indemnizad", "independizad", "indexad", "indicad", "indiciad", "indigestad", "indignad", "indisciplinad", "indispuest", "individualizad", "indizad", "inducid", "indultad", "industriad", "industrializad", "inejecutad", "inervad", "infamad", "infantilizad", "infartad", "infatuad", "infeccionad", "infectad", "inferid", "infestad", "infeudad", "inficionad", "infiltrad", "inflacionad", "inflad", "inflamad", "infligid", "influenciad", "influid", "informad", "informalizad", "informatizad", "infraccionad", "infraexplotad", "infrautilizad", "infravalorad", "infringid", "infundid", "infusionad", "ingeniad", "ingerid", "ingresad", "ingurgitad", "inhabilitad", "inhalad", "inhibid", "inhumad", "iniciad", "inicializad", "injerid", "injertad", "injuriad", "inmatriculad", "inmigrad", "inmiscuid", "inmolad", "inmortalizad", "inmovilizad", "inmunizad", "inmutad", "innovad", "inobservad", "inoculad", "inquietad", "inquinad", "inquirid", "inscript", "inscrit", "inseminad", "insensibilizad", "inserid", "insertad", "insidiad", "insinuad", "insistid", "insolentad", "insonorizad", "inspeccionad", "inspirad", "instad", "instalad", "instanciad", "instaurad", "instigad", "instilad", "institucionalizad", "instituid", "instruid", "instrumentad", "instrumentalizad", "insubordinad", "insuflad", "insultad", "insumid", "insurreccionad", "integrad", "inteligid", "intencionad", "intendid", "intensificad", "intentad", "interaccionad", "interactuad", "intercalad", "intercambiad", "intercedid", "interceptad", "intercomunicad", "interconectad", "interconvertid", "interdich", "interesad", "interferid", "interfoliad", "intergradad", "interiorizad", "interlocutad", "intermediad", "intermezclad", "internacionalizad", "internad", "internalizad", "interoperad", "interpelad", "interpolad", "interpretad", "interpuest", "interrelacionad", "interrogad", "interrumpid", "intersecad", "intersectad", "intervenid", "intestad", "intimad", "intimidad", "intitulad", "intoxicad", "intranquilizad", "intricad", "intrigad", "intrincad", "introducid", "intrusad", "intubad", "intuid", "inundad", "inutilizad", "invadid", "invaginad", "invalidad", "invenid", "inventad", "inventariad", "invernad", "invertid", "investid", "investigad", "inviabilizad", "invisibilizad", "invitad", "invocad", "involucionad", "involucrad", "inyectad", "iñocid", "ionizad", "irisad", "ironizad", "irradiad", "irrespetad", "irrigad", "irritad", "irrogad", "irrumpid", "islamizad", "italianizad", "iterad", "itinerad", "izad", "jabonad", "jactad", "jadead", "jalad", "jalbegad", "jalead", "jalonad", "jalonead", "jaquead", "jaquid", "jaranead", "jaspead", "jech", "jerarquizad", "jeringad", "jibarizad", "jimad", "jinetead", "jiñad", "jodid", "jonronead", "jorobad", "josead", "jotead", "jubilad", "judaizad", "judicializad", "jugad", "juguetead", "jumad", "juntad", "jurad", "juramentad", "justad", "justificad", "justipreciad", "juzgad", "labializad", "laborad", "labrad", "laburad", "lacad", "lacead", "lacerad", "lacrad", "lacrimad", "lactad", "ladead", "ladrad", "lagartead", "lagrimad", "lagrimead", "laicizad", "lalad", "lambid", "lambiscad", "lamentad", "lamid", "laminad", "lampad", "lampasead", "lancead", "languidecid", "lanzad", "lapidad", "lapizad", "laquead", "largad", "lascad", "lastimad", "lastrad", "lateralizad", "latid", "latinad", "latinizad", "laudad", "lauread", "lavad", "laxad", "lazad", "lechad", "legad", "legalizad", "legislad", "legitimad", "legitimizad", "leíd", "lematizad", "lengüetead", "lentificad", "leñad", "lesead", "lesionad", "leudad", "levad", "levantad", "levigad", "levitad", "lexicalizad", "liad", "libad", "liberad", "liberalizad", "libertad", "librad", "licenciad", "licitad", "licuad", "liderad", "lideread", "liderizad", "lidiad", "ligad", "lignificad", "lijad", "likead", "limad", "limitad", "limosnead", "limpiad", "linchad", "lindad", "linead", "linealizad", "liofilizad", "liquenizad", "liquidad", "lisiad", "lisonjead", "listad", "litad", "litigad", "litografiad", "lixiviad", "llagad", "llamad", "llamead", "llavead", "llegad", "llenad", "llevad", "llorad", "lloriquead", "llovid", "lloviznad", "load", "lobotomizad", "localizad", "locutad", "logad", "lograd", "loguead", "lonchead", "loncotead", "loquead", "lotead", "lotificad", "lubricad", "lubrificad", "luchad", "lucid", "lucrad", "ludid", "ludificad", "lustrad", "luxad", "macad", "macerad", "machacad", "machad", "machetead", "machihembrad", "machucad", "macizad", "macollad", "maculad", "madread", "madrugad", "madurad", "magancead", "magnetizad", "magnificad", "magread", "magulad", "magullad", "maicead", "majad", "malabaread", "malacostumbrad", "malbaratad", "malcriad", "maldecid", "maldit", "malead", "maleducad", "maleficiad", "malentendid", "malfuncionad", "malgastad", "malherid", "maliciad", "malinformad", "malinterpretad", "mallad", "malmatad", "malograd", "malparad", "malparid", "malpuest", "malquerid", "malquistad", "maltead", "maltraíd", "maltratad", "malvendid", "malversad", "malvivid", "mamad", "mamonead", "mampostead", "manad", "mancad", "manchad", "mancillad", "mancomunad", "mancornad", "mandad", "mandatad", "mandonead", "mandrilad", "manducad", "manead", "manejad", "mangad", "mangonead", "manguead", "maniatad", "manifestad", "maniobrad", "manipulad", "manosead", "manotead", "mantead", "mantenid", "manufacturad", "manumitid", "manuscript", "manuscrit", "manutenid", "mañanead", "mapead", "mapuchizad", "maquead", "maquetad", "maquilad", "maquillad", "maquinad", "maravillad", "marcad", "marchad", "marchitad", "maread", "marginad", "marginalizad", "maridad", "marinad", "mariposead", "mariscad", "marmolead", "marrad", "martillad", "martillead", "martirizad", "masacrad", "masad", "masajead", "mascad", "mascujad", "masculinizad", "mascullad", "masificad", "masterizad", "masticad", "masturbad", "matad", "matasellad", "matead", "materializad", "matizad", "matonead", "matraquead", "matriculad", "matrimoniad", "maullad", "maximizad", "mayad", "mazad", "maznad", "mead", "mecanizad", "mecanografiad", "mecatead", "mechad", "mecid", "mediad", "mediatizad", "medicad", "medicalizad", "medicinad", "medid", "meditad", "medrad", "mejorad", "melad", "melezinad", "melgad", "mellad", "membretad", "memorad", "memorializad", "memorizad", "menad", "mencionad", "mendigad", "menead", "menguad", "menoscabad", "menospreciad", "mensajead", "menstruad", "mensurad", "mentad", "mentalizad", "mentid", "mentorizad", "menudead", "menuzad", "mercad", "mercadead", "mercantilizad", "mercerizad", "merecid", "merendad", "merengad", "meritad", "mermad", "merodead", "mesad", "mestizad", "mesturad", "mesurad", "metabolizad", "metaforizad", "metalizad", "metamorfizad", "metamorfosead", "metastatizad", "metastizad", "meteorizad", "metid", "metilad", "metodizad", "metrificad", "mexicanizad", "mezclad", "mezquinad", "microfilmad", "microfinanciad", "microperforad", "microscopiad", "mielinizad", "migad", "migrad", "militad", "militarizad", "mimad", "mimeografiad", "mimetizad", "mimid", "minad", "mineralizad", "miniad", "miniaturizad", "minimalizad", "minimizad", "ministerializad", "ministrad", "minorad", "minusvalorad", "mirad", "misad", "misionad", "mistificad", "mitificad", "mitigad", "mixturad", "mocad", "mochad", "mochilead", "mocionad", "modelad", "modelizad", "moderad", "modernizad", "modificad", "modorrad", "modulad", "modularizad", "mofad", "mojad", "mojonad", "mojonead", "molad", "moldad", "moldead", "moldurad", "molestad", "molid", "molinad", "momificad", "mondad", "monetarizad", "monetizad", "monitoread", "monitorizad", "monologad", "monopolizad", "montad", "mopead", "moquead", "morad", "moralizad", "mordid", "mordiscad", "mordisquead", "morfad", "morigerad", "morread", "mortificad", "moscad", "mosquead", "mostrad", "mostread", "motead", "motejad", "motivad", "motorizad", "movid", "movilizad", "mudad", "muert", "muertead", "muestread", "mufad", "mugid", "mulcid", "muletead", "mulgid", "mullid", "multad", "multiplexad", "multiplicad", "mundializad", "municionad", "municipalizad", "munid", "muñid", "murad", "murmurad", "musealizad", "musicad", "musicalizad", "musid", "musitad", "mutad", "mutilad", "nacid", "nacionalizad", "nadad", "nalguead", "narcotizad", "narrad", "nasalizad", "naturalizad", "naufragad", "navalizad", "navegad", "nebulizad", "necead", "necesitad", "negad", "negligid", "negociad", "negread", "negrecid", "negrificad", "neocolonizad", "neutralizad", "nevad", "neviscad", "nidificad", "nimbad", "ningunead", "niquelad", "nitrificad", "nivelad", "nixtamalizad", "nombrad", "nominad", "nominalizad", "noquead", "normad", "normalizad", "normativizad", "notad", "notariad", "notarizad", "noticiad", "notificad", "novad", "novelad", "novelizad", "noviad", "nublad", "nuclead", "nudrid", "nukead", "nulificad", "numerad", "nutrid", "ñangotad", "ñoñead", "obcecad", "obedecid", "obispad", "objetad", "objetivad", "obligad", "obliterad", "obnubilad", "obrad", "obscurecid", "obsequiad", "observad", "obsesionad", "obstaculizad", "obstad", "obstinad", "obstruid", "obtenid", "obturad", "obviad", "ocasionad", "occidentalizad", "ocluid", "ocultad", "ocupad", "ocurrid", "odiad", "ofendid", "ofertad", "oficiad", "oficializad", "ofrecid", "ofrendad", "ofuscad", "oíd", "ojead", "okupad", "olead", "olfatead", "olid", "oliscad", "olisquead", "olvidad", "ominad", "omitid", "ondead", "ondulad", "opacad", "operad", "operativizad", "opinad", "opositad", "opresad", "oprimid", "optad", "optimad", "optimizad", "opuest", "opugnad", "orad", "oralizad", "orbitad", "ordenad", "ordeñad", "oread", "organizad", "orientad", "orientalizad", "originad", "orillad", "orinad", "orlad", "ornad", "ornamentad", "orquestad", "ortigad", "osad", "oscilad", "oscurecid", "osead", "osificad", "ostentad", "otad", "otead", "otorgad", "ovacionad", "ovad", "ovillad", "ovulad", "oxead", "oxidad", "oxigenad", "pacid", "pacificad", "pactad", "padecid", "pagad", "paginad", "pajaread", "pajaronead", "pajead", "palabread", "paladead", "palatalizad", "palead", "paletizad", "paliad", "palidecid", "paliquead", "pallad", "palmad", "palmead", "palmotead", "palpad", "palpitad", "pandead", "paniaguad", "papad", "parabolizad", "parad", "parafrasead", "paralelad", "paralelizad", "paralizad", "parametrad", "parametrizad", "parangonad", "parapetad", "parapetead", "parasitad", "parcelad", "parchad", "parchead", "parcializad", "paread", "parecid", "parid", "parlad", "parlamentad", "parlotead", "parodiad", "parpad", "parpadead", "parquead", "parquizad", "partead", "particionad", "participad", "particularizad", "partid", "partidizad", "pasad", "pasead", "pasmad", "pastad", "pastead", "pastelead", "pasterizad", "pasteurizad", "pastoread", "patalead", "patead", "patentad", "patentizad", "patinad", "patologizad", "patrimonializad", "patrocinad", "patronead", "patrullad", "patullad", "pauperizad", "pausad", "pautad", "pavimentad", "pavonad", "pavonead", "payasead", "peatonalizad", "pecad", "pechad", "pedalead", "pedid", "pedorread", "pegad", "pegotead", "peíd", "peinad", "pelad", "pelead", "pelechad", "peletizad", "peligrad", "pellizcad", "pelotead", "peluquead", "penad", "penalizad", "pendejead", "pendid", "pendonead", "penetrad", "penitenciad", "pensad", "pensionad", "pepead", "pepenad", "peraltad", "percatad", "perchad", "percibid", "percolad", "percudid", "percutad", "percutid", "perdid", "perdonad", "perdurad", "perecead", "perecid", "peregrinad", "perennizad", "perfeccionad", "perfilad", "perforad", "performad", "perfumad", "pergeñad", "periclitad", "perifonead", "perimetrad", "periodizad", "peritad", "perjudicad", "perjurad", "perlad", "permanecid", "permeabilizad", "permead", "permitid", "permutad", "pernead", "pernoctad", "peronizad", "perorad", "perpetrad", "perpetuad", "perquirid", "perread", "perseguid", "perseverad", "persignad", "persistid", "personad", "personalizad", "personificad", "persuadid", "pertenecid", "pertenid", "pertrechad", "perturbad", "pervertid", "pervivid", "pesad", "pescad", "pescuecead", "pespuntad", "pespuntead", "pesquisad", "pestañead", "petad", "petardead", "petead", "peticionad", "petrificad", "photoshopead", "piad", "piafad", "pialad", "picad", "pichad", "pichicatead", "pichulead", "picotead", "pifead", "pifiad", "pigmentad", "pignorad", "pilad", "pillad", "pilotad", "pilotead", "pimplad", "pincelad", "pinchad", "pingad", "pintad", "pintarrajead", "pintead", "pintorread", "pintorretead", "pinzad", "pipad", "pipiad", "piquetead", "pirad", "piratead", "pirograbad", "piropead", "pirrad", "pisad", "pisotead", "pispad", "pispead", "pistead", "pitad", "pitchead", "pitorread", "pivotad", "pivotead", "pixelad", "pizcad", "placad", "placead", "placid", "plagad", "plagiad", "planchad", "planchead", "planead", "planificad", "planillad", "plantad", "plantead", "plañid", "plasmad", "plastificad", "platead", "platicad", "plebiscitad", "plegad", "pleitead", "plisad", "plorad", "pluralizad", "pluriemplead", "plurinacionalizad", "poblad", "pochad", "pochead", "podad", "podemizad", "podid", "podrid", "poetizad", "polarizad", "polemizad", "policromad", "polid", "polimerizad", "polinizad", "politiquead", "politizad", "pololead", "ponchad", "ponderad", "pontificad", "ponzoñad", "popularizad", "pordiosead", "porfiad", "pormenorizad", "portad", "portead", "posad", "poseíd", "posesionad", "posibilitad", "posicionad", "positivad", "pospuest", "postead", "postensad", "postergad", "postpuest", "postrad", "postulad", "posturead", "potabilizad", "potad", "potenciad", "potencializad", "practicad", "pread", "preagrupad", "prealimentad", "preanunciad", "preaprobad", "prearmad", "preavisad", "prebendad", "precalentad", "precalificad", "precargad", "precarizad", "precautelad", "precavid", "precedid", "preceptuad", "preciad", "precintad", "precipitad", "precisad", "precocid", "precocinad", "precompilad", "precomprad", "preconcebid", "preconfigurad", "preconizad", "preconocid", "preconstituid", "preconvocad", "predad", "predestinad", "predeterminad", "predicad", "predich", "prediseñad", "predispuest", "predominad", "preelaborad", "preenvasad", "preestablecid", "preestrenad", "preferid", "prefigurad", "prefijad", "preformad", "pregad", "pregonad", "preguntad", "pregustad", "preinscript", "preinscrit", "preinstalad", "prejubilad", "prejuiciad", "prejuzgad", "preludiad", "premeditad", "premiad", "premostrad", "premuert", "prenasalizad", "prendad", "prendid", "prensad", "preñad", "preocupad", "preordenad", "prepagad", "preparad", "prepintad", "preponderad", "preprogramad", "presagiad", "prescindid", "prescript", "prescrit", "preseleccionad", "presenciad", "presentad", "presentid", "preservad", "presidid", "presionad", "presolicitad", "prestad", "prestigiad", "presumid", "presupuest", "presupuestad", "presurizad", "pretendid", "pretensad", "preterid", "pretermitid", "pretextad", "prevalecid", "prevalid", "prevaricad", "prevenid", "previsionad", "previst", "previsualizad", "primad", "principalizad", "principiad", "pringad", "priorizad", "privad", "privatizad", "privilegiad", "probad", "problematizad", "procedid", "procesad", "procesionad", "proclamad", "procrastinad", "procread", "procurad", "prodigad", "producid", "profanad", "proferid", "profesad", "profesionalizad", "profetizad", "profugad", "profundad", "profundizad", "programad", "progresad", "prohibid", "prohijad", "proletarizad", "proliferad", "prologad", "prolongad", "promediad", "promesad", "prometid", "promiscuad", "promocionad", "promovid", "promulgad", "pronominalizad", "pronosticad", "pronunciad", "propagad", "propalad", "propasad", "propendid", "propiciad", "propinad", "proporcionad", "propuest", "propugnad", "propulsad", "prorratead", "prorrogad", "prorrumpid", "proscript", "proscrit", "proseguid", "prospectad", "prosperad", "prosternad", "prostituid", "protagonizad", "protegid", "protestad", "protocolizad", "protonad", "prototipad", "protruid", "proveíd", "provenid", "provincializad", "provisionad", "provist", "provocad", "proyectad", "psicoanalizad", "publicad", "publicitad", "puentead", "puest", "pugnad", "pujad", "pulid", "pulimentad", "pulsad", "pulsead", "pululad", "pulverizad", "punchad", "puncionad", "pungid", "punid", "puntad", "puntead", "puntuad", "puntualizad", "punzad", "punzonad", "puñad", "puñetead", "purgad", "purificad", "purpurad", "putañead", "putead", "puyad", "quebrad", "quebrantad", "quedad", "quejad", "quelad", "quemad", "querellad", "querid", "quietad", "quilatad", "quimbad", "quintaesenciad", "quintuplicad", "quitad", "rabead", "rabiad", "racanead", "racializad", "raciocinad", "racionad", "racionalizad", "radiad", "radicad", "radicalizad", "radiodifundid", "radiografiad", "rafaguead", "raíd", "rajad", "rajuñad", "ralbad", "ralead", "ralentizad", "rallad", "ramblead", "ramificad", "ramonead", "rancad", "ranchad", "ranchead", "randomizad", "rankead", "ranquead", "ranurad", "rapad", "rapead", "rapiñad", "raptad", "raquead", "rarificad", "rasad", "rascad", "rascañad", "rascuñad", "rasgad", "rasguead", "rasguñad", "raspad", "rasquetead", "rasterizad", "rastrad", "rastread", "rastrillad", "rasurad", "ratead", "ratificad", "ratonad", "rayad", "razonad", "reabastecid", "reabiert", "reabsorbid", "reaccionad", "reacomodad", "reacondicionad", "reactivad", "reactualizad", "readaptad", "readecuad", "readiestrad", "readmitid", "readquirid", "reafirmad", "reagrupad", "reajustad", "realimentad", "realinead", "realistad", "realizad", "realojad", "realquilad", "realzad", "reanimad", "reanudad", "reaparecid", "reaplicad", "reaprendid", "reaprovechad", "reaprovisionad", "reargüid", "rearmad", "rearticulad", "reasegurad", "reasentad", "reasfaltad", "reasignad", "reasumid", "reatad", "reautorizad", "reavivad", "rebajad", "rebalancead", "rebalsad", "rebanad", "rebañad", "rebasad", "rebatad", "rebatid", "rebautizad", "rebelad", "reblandecid", "rebobinad", "rebordad", "rebordead", "rebosad", "rebotad", "rebozad", "rebramad", "rebrillad", "rebrincad", "rebrotad", "rebullid", "rebuscad", "rebuznad", "recabad", "recaíd", "recalad", "recalcad", "recalculad", "recalendarizad", "recalentad", "recalibrad", "recalificad", "recamad", "recapacitad", "recapitalizad", "recapitulad", "recapturad", "recargad", "recatad", "recatead", "recategorizad", "recauchutad", "recaudad", "recebid", "recelad", "recentad", "recentralizad", "recepcionad", "receptad", "recercad", "recertificad", "recesad", "recetad", "rechazad", "rechinad", "rechistad", "recibid", "reciclad", "reciprocad", "recirculad", "recitad", "reclamad", "reclasificad", "reclinad", "recluid", "reclutad", "recobrad", "recochinead", "recocid", "recocinad", "recodad", "recodificad", "recogid", "recolad", "recolectad", "recolegid", "recolocad", "recolonizad", "recombinad", "recomendad", "recomenzad", "recompensad", "recompilad", "recomprad", "recompuest", "reconcentrad", "reconceptualizad", "reconciliad", "reconcomid", "reconducid", "reconectad", "reconfigurad", "reconfirmad", "reconfortad", "reconocid", "reconquistad", "reconsagrad", "reconsiderad", "reconstituid", "reconstruid", "recontad", "recontextualizad", "recontratad", "reconvenid", "reconvertid", "recopilad", "recordad", "recorrid", "recortad", "recosid", "recostad", "recovad", "recread", "recrecid", "recriad", "recriminad", "recristalizad", "recrudecid", "rectificad", "rectorad", "recuadrad", "recubiert", "recudid", "reculad", "recuperad", "recurrid", "recurvad", "recusad", "redactad", "redargüid", "redecorad", "rededicad", "redefinid", "redemocratizad", "redenominad", "redensificad", "redescript", "redescrit", "redescubiert", "redesignad", "redibujad", "redich", "redimensionad", "redimid", "redireccionad", "redirigid", "rediscutid", "rediseñad", "redistribuid", "redituad", "redoblad", "redondead", "reducid", "redundad", "reedificad", "reeditad", "reeducad", "reelaborad", "reelect", "reelegid", "reembarcad", "reembolsad", "reemitid", "reemplazad", "reemprendid", "reenamorad", "reencaminad", "reencantad", "reencarnad", "reencauzad", "reencontrad", "reencuadernad", "reenergizad", "reenfocad", "reenganchad", "reensamblad", "reenterrad", "reentrad", "reentrenad", "reenvasad", "reenviad", "reequilibrad", "reequipad", "reescript", "reescrit", "reestabilizad", "reestablecid", "reestatizad", "reestilizad", "reestrenad", "reestructurad", "reevaluad", "reexaminad", "reexpedid", "refaccionad", "refacturad", "refanfinflad", "referenciad", "referid", "refigurad", "refilad", "refinad", "refinanciad", "reflectad", "reflejad", "reflexionad", "reflotad", "refluid", "refocilad", "reforestad", "reforjad", "reformad", "reformalizad", "reformatead", "reformulad", "reforzad", "refotografiad", "refractad", "refregad", "refreíd", "refrenad", "refrendad", "refrescad", "refrigerad", "refrit", "refugiad", "refulgid", "refundad", "refundid", "refunfuñad", "refutad", "regad", "regalad", "regalonead", "regañad", "regatead", "regazad", "regenerad", "regentad", "regentead", "regid", "regimentad", "regionalizad", "registrad", "reglad", "reglamentad", "regobernad", "regocijad", "regodead", "regoldad", "regrabad", "regresad", "reguetonead", "regulad", "regularizad", "regurgitad", "rehabilitad", "rehech", "rehidratad", "rehilad", "rehogad", "rehuid", "rehundid", "rehusad", "reíd", "reimaginad", "reimplantad", "reimpres", "reimprimid", "reimpuest", "reimpulsad", "reinad", "reinaugurad", "reincidid", "reincorporad", "reindustrializad", "reingresad", "reiniciad", "reinscript", "reinscrit", "reinsertad", "reinstalad", "reinstaurad", "reinstitucionalizad", "reintegrad", "reintensificad", "reintentad", "reinterpretad", "reintroducid", "reinventad", "reinvertid", "reiterad", "reivindicad", "rejuvenecid", "relacionad", "relajad", "relamid", "relampaguead", "relanzad", "relatad", "relativizad", "relegad", "relegitimad", "releíd", "relevad", "religad", "relinchad", "rellamad", "rellenad", "relocalizad", "relojead", "reluchad", "relucid", "relumbrad", "remachad", "remad", "remangad", "remansad", "remanufacturad", "remarcad", "remasterizad", "rematad", "rembolsad", "remecid", "remedad", "remediad", "rememorad", "remendad", "remezclad", "remirad", "remitid", "remixad", "remodelad", "remojad", "remolcad", "remoldead", "remolinead", "remolonead", "remontad", "remordid", "remotorizad", "removid", "remozad", "remplazad", "rempujad", "remudad", "remunerad", "remusgad", "renacid", "renacionalizad", "renderizad", "rendid", "renegad", "renegociad", "renguead", "renombrad", "renovad", "renquead", "rentabilizad", "rentad", "renumerad", "renunciad", "reñid", "reocupad", "reordenad", "reorganizad", "reorientad", "repagad", "repanchigad", "repantigad", "repantingad", "reparad", "repartid", "repasad", "repatead", "repatriad", "repautad", "repavimentad", "repechad", "repelad", "repelid", "repensad", "repentizad", "repercutid", "reperfilad", "repescad", "repetid", "repicad", "repintad", "repiquetead", "repisad", "replantad", "replantead", "replegad", "repletad", "replicad", "repoblad", "repolarizad", "repolitizad", "repollad", "reportad", "reportead", "reposad", "reposicionad", "repostad", "repostead", "repostulad", "repotenciad", "repreguntad", "reprehendid", "reprendid", "represad", "represaliad", "representad", "reprimid", "reprobad", "reprocesad", "reprochad", "reproducid", "reprogramad", "reptad", "republicad", "repudiad", "repuest", "repugnad", "repujad", "repulsad", "repuntad", "reputad", "requebrad", "requemad", "requerid", "requintad", "requisad", "resabid", "resacad", "resaltad", "resanad", "resarcid", "resbalad", "rescaldad", "rescatad", "rescindid", "rescript", "resecad", "resellad", "resemblad", "resembrad", "resentid", "reseñad", "reservad", "resetead", "resfriad", "resguardad", "residenciad", "residid", "resignad", "resignificad", "resincronizad", "resintonizad", "resistid", "resituad", "resobad", "resocializad", "resollad", "resonad", "resondrad", "resoplad", "resorbid", "respaldad", "respectad", "respetad", "respingad", "respirad", "resplandecid", "respondid", "responsabilizad", "resquebrad", "resquebrajad", "restablecid", "restad", "restallad", "restañad", "restaurad", "restead", "restituid", "restregad", "restringid", "restructurad", "resucitad", "resuelt", "resultad", "resumid", "resurgid", "retad", "retardad", "retemblad", "retemplad", "retenid", "reteñid", "retimbrad", "retipificad", "retirad", "retitulad", "retocad", "retomad", "retoñad", "retorcid", "retornad", "retortijad", "retozad", "retractad", "retraducid", "retraíd", "retranquead", "retransmitid", "retrasad", "retrasmitid", "retratad", "retrepad", "retribuid", "retroalimentad", "retrocad", "retrocedid", "retrogradad", "retroiluminad", "retrotraíd", "retrovendid", "retrucad", "retuitead", "retumbad", "retundid", "retwitead", "retwittead", "reubicad", "reunid", "reunificad", "reurbanizad", "reusad", "reutilizad", "revacunad", "revalidad", "revalorad", "revalorizad", "revaluad", "revelad", "revencid", "revendid", "revenid", "reventad", "reverberad", "reverdecid", "reverenciad", "reversad", "reversionad", "revertid", "revesad", "revestid", "revictimizad", "revinculad", "revirad", "revisad", "revisionad", "revisitad", "revist", "revistad", "revitalizad", "revivid", "revivificad", "revocad", "revolad", "revolcad", "revolead", "revolotead", "revolucionad", "revuelt", "rezad", "rezagad", "rezongad", "rezumad", "rezurcid", "ribetead", "ridiculizad", "rielad", "rifad", "rilad", "rimad", "rimbombad", "ringad", "ripead", "ripiad", "ripostad", "ritualizad", "rivalizad", "rizad", "robad", "robotizad", "robustecid", "rochad", "rociad", "rockanrolead", "rockead", "rodad", "rodead", "rogad", "roíd", "rojead", "rolad", "romancead", "romanizad", "romantizad", "romanzad", "rompid", "roncad", "rondad", "ronead", "ronronead", "ronzad", "rootead", "roquead", "roscad", "rosead", "rostizad", "rot", "rotad", "rotomoldead", "rotulad", "roturad", "rozad", "ruborizad", "rubricad", "rugad", "rugid", "ruinad", "rulad", "rumbead", "rumbiad", "rumiad", "rumorad", "rumoread", "runrunead", "ruralizad", "rusificad", "rusticad", "rutead", "rutilad", "sabid", "sablead", "saboread", "saborizad", "sabotead", "sacad", "sacarificad", "sachad", "saciad", "sacodid", "sacralizad", "sacramentad", "sacrificad", "sacudid", "saetad", "saetead", "sahumad", "sajad", "salad", "salariad", "saldad", "salid", "salinizad", "salivad", "sallad", "salmodiad", "salpicad", "salpimentad", "salpresad", "salsead", "saltad", "saltead", "saludad", "salvad", "salvaguardad", "sambenitad", "samplead", "sanad", "sancionad", "sancochad", "sandunguead", "sanead", "sangrad", "sanitizad", "sanjad", "santificad", "santiguad", "sapead", "saponificad", "saquead", "sargentead", "sarmentad", "satanizad", "satinad", "satirizad", "satisfech", "saturad", "sazonad", "secad", "seccionad", "secretad", "secretead", "sectorizad", "secuenciad", "secuestrad", "secularizad", "secundad", "sedad", "sedentarizad", "sedimentad", "seducid", "segad", "segmentad", "segregad", "seguid", "segundad", "segurad", "seleccionad", "selfiad", "sellad", "semaforizad", "semblad", "sembrad", "semejad", "sementad", "sensibilizad", "sentad", "sentenciad", "sentid", "señad", "señalad", "señalizad", "señoread", "separad", "sepultad", "sequestrad", "serenad", "seriad", "serializad", "serigrafiad", "sermonead", "serpead", "serpentead", "serrad", "serruchad", "servid", "sesead", "sesgad", "sesionad", "sestead", "setead", "sexad", "sextuplicad", "sexualizad", "shockead", "sicoanalizad", "sid", "sigilad", "signad", "significad", "silabad", "silabead", "silbad", "silenciad", "siluetead", "simbolizad", "simpatizad", "simplificad", "simulad", "simultanead", "sincerad", "sincopad", "sincretizad", "sincronizad", "sindicad", "sindicalizad", "singad", "singularizad", "sinonimizad", "sinterizad", "sintetizad", "sintonizad", "sirgad", "sisad", "sisead", "sistematizad", "sitiad", "situad", "sobad", "sobajad", "sobornad", "sobrad", "sobreactuad", "sobrealimentad", "sobreasad", "sobrecalentad", "sobrecargad", "sobrecogid", "sobreconsumid", "sobrecumplid", "sobredemandad", "sobredeterminad", "sobredimensionad", "sobredorad", "sobredosificad", "sobreentendid", "sobreescript", "sobreescrit", "sobreestimad", "sobreestimulad", "sobreexcitad", "sobreexplotad", "sobreexpresad", "sobreexpuest", "sobregirad", "sobregrabad", "sobreimpres", "sobreimprimid", "sobreinfectad", "sobrellenad", "sobrellevad", "sobremedicad", "sobrenadad", "sobrentendid", "sobrepasad", "sobrepoblad", "sobreprotegid", "sobrepuest", "sobrepujad", "sobrerreaccionad", "sobrerrepresentad", "sobresalid", "sobresaltad", "sobresaturad", "sobrescript", "sobrescrit", "sobreseíd", "sobrestimad", "sobrevalorad", "sobrevaluad", "sobrevenid", "sobrevirad", "sobrevivid", "sobrevolad", "socarrad", "socavad", "sociabilizad", "socializad", "socorrid", "sodomizad", "sofisticad", "sofocad", "sofreíd", "sofrenad", "sofrit", "soguead", "sojuzgad", "solad", "solapad", "solarizad", "solazad", "soldad", "solead", "solemnizad", "solevad", "solfead", "solicitad", "solid", "solidad", "solidarizad", "solidificad", "soliviantad", "sollozad", "soltad", "solubilizad", "solucionad", "solventad", "somatizad", "sombrad", "sombread", "sometid", "somorgujad", "sompesad", "sonad", "sondad", "sondead", "sonorizad", "sonreíd", "sonrojad", "sonrosad", "sonsacad", "soñad", "sopad", "sopesad", "soplad", "soportad", "sorbid", "sorprendid", "sortead", "sosegad", "soslayad", "sospechad", "sostenid", "sotad", "soterrad", "stalkead", "suavizad", "subalimentad", "subalquilad", "subalternizad", "subarrendad", "subastad", "subclasificad", "subcontratad", "subdividid", "subducid", "subentendid", "subestimad", "subid", "sublevad", "sublimad", "subministrad", "subordinad", "subrayad", "subrogad", "subsanad", "subscript", "subscrit", "subseguid", "subsidiad", "subsistid", "substanciad", "substantivad", "substituid", "substraíd", "subsumid", "subtendid", "subtitulad", "subutilizad", "subvaluad", "subvencionad", "subvenid", "subvertid", "subvirad", "subyacid", "subyugad", "succionad", "sucedid", "sucitad", "sucumbid", "sudad", "suelt", "sufijad", "sufragad", "sufrid", "sugerid", "sugestionad", "suicidad", "sujetad", "sujuzgad", "sulcad", "sulfatad", "sulfurad", "sumad", "sumariad", "sumergid", "sumid", "suministrad", "supeditad", "superad", "superimpuest", "superpoblad", "superpuest", "supervalorad", "supervenid", "supervigilad", "supervisad", "supervivid", "suplantad", "suplementad", "suplicad", "suplid", "suprimid", "supuest", "supurad", "suputad", "surcad", "surcid", "surfead", "surgid", "surtid", "suscitad", "suscript", "suscrit", "suspendid", "suspirad", "sustanciad", "sustantivad", "sustentad", "sustituid", "sustraíd", "susurrad", "sutilizad", "suturad", "tabicad", "tablad", "tabletead", "tabulad", "tachad", "tachonad", "tacid", "tacklead", "taclead", "taconead", "tajad", "talad", "taladrad", "tallad", "tambalead", "tamboread", "tamborilead", "tamizad", "tamponad", "tangad", "tanquead", "tantead", "tañid", "tapad", "tapead", "tapiad", "tapiscad", "tapizad", "taponad", "taponead", "taquead", "taquillad", "taracead", "tarad", "tararead", "tardad", "tarifad", "tarificad", "tarjad", "tartamudead", "tasad", "tascad", "tatemad", "tatuad", "taxiad", "teatralizad", "techad", "teclead", "tecnificad", "tejad", "tejid", "telefonead", "telegrafiad", "teleportad", "teletrabajad", "teletransportad", "televisad", "telonead", "temad", "tematizad", "temblad", "temblequead", "temid", "temperad", "templad", "temporizad", "tendid", "tenid", "tensad", "tensionad", "tentad", "teñid", "teorizad", "tercerizad", "terciad", "terciarizad", "tergiversad", "terminad", "ternad", "terracead", "terraformad", "terraplenad", "territorializad", "tertuliad", "tesad", "testad", "testead", "testificad", "testiguad", "testimoniad", "textead", "texturizad", "tictaquead", "tijeretead", "tildad", "timad", "timbead", "timbrad", "timonead", "tincad", "tintad", "tintinead", "tinturad", "tipad", "tipead", "tipificad", "tipologizad", "tirad", "tiranizad", "tiritad", "tironead", "tirotead", "titilad", "titrad", "titubad", "titubead", "titulad", "titularizad", "tiznad", "tocad", "togad", "toldad", "tolerad", "tollid", "tomad", "tongonead", "tonificad", "tonsurad", "tontead", "topad", "topead", "topetad", "toquetead", "torcid", "toread", "tormientad", "tornad", "tornead", "torpedead", "torrad", "torturad", "tosid", "tostad", "totalizad", "toxificad", "trabad", "trabajad", "trabucad", "traccionad", "traducid", "traficad", "tragad", "traicionad", "traíd", "trajead", "trajinad", "tramad", "tramitad", "trampead", "trancad", "tranquead", "tranquilizad", "transad", "transbordad", "transcendid", "transcodificad", "transcript", "transcrit", "transcurrid", "transfectad", "transferid", "transfigurad", "transformad", "transfundid", "transgredid", "transicionad", "transigid", "transistorizad", "transitad", "transladad", "transliterad", "translocad", "translucid", "transmigrad", "transmitid", "transmutad", "transparentad", "transpirad", "transplantad", "transportad", "transpuest", "transtornad", "transustanciad", "transvasad", "transversalizad", "tranzad", "trapacead", "trapalead", "trapead", "trapichead", "traquetead", "trasbordad", "trascendid", "trascript", "trascrit", "trascurrid", "trasegad", "trasferid", "trasfigurad", "trasformad", "trasgredid", "trashumad", "trasladad", "traslapad", "trasliterad", "trasluchad", "traslucid", "trasmigrad", "trasmitid", "trasmontad", "trasmutad", "trasnochad", "trasoíd", "traspalad", "traspapelad", "trasparentad", "traspasad", "traspillad", "traspirad", "trasplantad", "trasportad", "traspuest", "trasquilad", "trastabillad", "trastabillead", "trastead", "trastocad", "trastornad", "trastrabillad", "trastrocad", "trasudad", "trasuntad", "trasvasad", "tratad", "traumad", "traumatizad", "travestid", "trazad", "trebejad", "trechad", "trefilad", "tremid", "tremolad", "trenad", "trenzad", "trepad", "trepanad", "trepidad", "triangulad", "tribulad", "tributad", "tricotad", "trillad", "trinad", "trincad", "trinchad", "triplicad", "triptongad", "tripulad", "triscad", "trisecad", "tristead", "triturad", "triunfad", "trivializad", "trocad", "trocead", "trolead", "trompetead", "trompezad", "trompicad", "tronad", "troncad", "tronchad", "tropezad", "tropicalizad", "troquelad", "trotad", "trovad", "trozad", "trucad", "trucidad", "trufad", "truncad", "truquead", "tugurizad", "tuitead", "tullid", "tumbad", "tumultuad", "tunad", "tundid", "tunead", "tunelad", "tupid", "turbad", "turbinad", "turboalimentad", "turbocargad", "turistead", "turistificad", "turnad", "turquead", "tusad", "tutead", "tutelad", "twitead", "twittead", "ubicad", "ufanad", "ulcerad", "ultimad", "ultracentrifugad", "ultrajad", "ululad", "uncid", "ungid", "unid", "unificad", "uniformad", "uniformizad", "universalizad", "untad", "upad", "urbanizad", "urdid", "urgid", "uruguayizad", "usad", "ustedead", "usucapid", "usufructuad", "usurpad", "utilizad", "vacacionad", "vacad", "vaciad", "vacilad", "vacunad", "vadead", "vagabundead", "vagad", "vaguead", "valid", "validad", "vallad", "valorad", "valorizad", "valsad", "valuad", "vampirizad", "vanagloriad", "vandalizad", "vapead", "vaporizad", "vapulead", "varad", "varead", "variad", "vascularizad", "vaticinad", "vectorizad", "vedad", "vegetad", "vehiculad", "vehiculizad", "vejad", "velad", "velarizad", "velicad", "venadead", "vencid", "vendad", "vendid", "vendimiad", "venenciad", "venerad", "vengad", "venid", "ventad", "ventead", "ventilad", "ventosead", "veranead", "verbalizad", "verberad", "verdead", "verdeguead", "verguead", "verificad", "versad", "versead", "versificad", "versionad", "versionead", "vertebrad", "verticalizad", "vertid", "vestid", "vetad", "vetead", "vezad", "viabilizad", "viajad", "viboread", "vibrad", "vichead", "viciad", "victimad", "victimizad", "victoread", "videograbad", "vidriad", "vigilad", "vigorizad", "vilipendiad", "vinculad", "vindicad", "vinificad", "violad", "violentad", "virad", "viralizad", "virtualizad", "visad", "visibilizad", "visionad", "visitad", "vislumbrad", "visoriad", "vist", "visualizad", "vitalizad", "vitoread", "vitrificad", "vituperad", "vivad", "vivaquead", "vivenciad", "vivid", "vivificad", "vocalizad", "vocead", "vociferad", "volad", "volantead", "volatilizad", "volcad", "volead", "voltead", "voltejead", "vomitad", "vosead", "votad", "voznad", "vuelt", "vulcanizad", "vulgarizad", "vulnerad", "wasapead", "whatsappead", "wikificad", "xerocopiad", "xerografiad", "yacid", "yantad", "yapad", "yerad", "yermad", "yirad", "yodurad", "yugulad", "yuxtapuest", "zabordad", "zabullid", "zafad", "zaherid", "zamarread", "zambullid", "zampad", "zancadillead", "zancajead", "zanganead", "zanjad", "zanquead", "zapad", "zapatead", "zapead", "zarandead", "zarpad", "zascandilead", "zigzaguead", "zombificad", "zonificad", "zorread", "zozobrad", "zumbad", "zurcid", "zuread", "zurrad", "zurriad", "zurrid", "zuzad"];
Object.defineProperty(PA, "__esModule", {
  value: !0
});
PA.default = kBa;
var yBa = ee, zBa = bBa(Gy);
function bBa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: wBa
} = yBa.languageProcessing;
function vBa(e) {
  return ["a", "o", "as", "os"].some((t) => {
    if (e.length > 3 && e.endsWith(t)) {
      const n = e.slice(0, -t.length);
      return zBa.default.includes(n);
    }
  });
}
function kBa(e) {
  return wBa(e).filter((t) => vBa(t));
}
Object.defineProperty(Hy, "__esModule", {
  value: !0
});
Hy.default = void 0;
var qP = tt, _Ba = ABa(PA), EBa = ee;
function ABa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  precedenceException: TBa,
  directPrecedenceException: $Ba,
  values: jBa
} = EBa.languageProcessing, xBa = jBa.Clause;
class SBa extends xBa {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, _Ba.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns { void }
   */
  checkParticiples() {
    const a = this.getClauseText(), t = this.getParticiples().filter((n) => !$Ba(a, n, qP.cannotDirectlyPrecedePassiveParticiple) && !TBa(a, n, qP.cannotBeBetweenPassiveAuxiliaryAndParticiple));
    this.setPassive(t.length > 0);
  }
}
Hy.default = SBa;
var Vy = {};
Object.defineProperty(Vy, "__esModule", {
  value: !0
});
Vy.default = void 0;
Vy.default = ["ser", "soy", "eres", "es", "somos", "sois", "son", "fui", "fuiste", "fue", "fuimos", "fuisteis", "fueron", "era", "eras", "era", "éramos", "erais", "eran", "sería", "serías", "seríamos", "seríais", "serían", "seré", "serás", "será", "seremos", "seréis", "serán", "seas", "sea", "seamos", "seáis", "sean", "fuera", "fueras", "fuéramos", "fuerais", "fueran", "fuese", "fueses", "fuésemos", "fueseis", "fuesen", "fuere", "fueres", "fuéremos", "fuereis", "fueren", "sé", "sed", "siendo", "sido"];
Object.defineProperty(CA, "__esModule", {
  value: !0
});
CA.default = NBa;
var OBa = ee, IBa = RA(Hy), FP = RA(Vy), CBa = RA(vp);
function RA(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  createRegexFromArray: BP,
  getClauses: PBa
} = OBa.languageProcessing, RBa = ["el", "la", "los", "las", "una"], DBa = {
  Clause: IBa.default,
  stopwords: CBa.default,
  auxiliaries: FP.default,
  regexes: {
    auxiliaryRegex: BP(FP.default),
    stopCharacterRegex: /([:,])(?=[ \n\r\t'"+\-»«‹›<>])/ig,
    followingAuxiliaryExceptionRegex: BP(RBa)
  }
};
function NBa(e) {
  return PBa(e, DBa);
}
var DA = {}, NA = {}, LA = {}, MA = {};
Object.defineProperty(MA, "__esModule", {
  value: !0
});
MA.default = LBa;
function LBa(e, a) {
  if (e.search(new RegExp(a[0])) !== -1)
    return e = e.replace(new RegExp(a[0]), a[1]), e;
}
Object.defineProperty(LA, "__esModule", {
  value: !0
});
LA.default = FBa;
var MBa = qA(Mc), qBa = qA(ys), WP = qA(MA);
function qA(e) {
  return e && e.__esModule ? e : { default: e };
}
function FBa(e, a) {
  const t = a.verbStemModifications, n = (0, WP.default)(e, t.quToC);
  if (n) {
    const o = (0, WP.default)(n, t.ueToOSimple);
    return o || n;
  }
  const r = (0, MBa.default)(e, (0, qBa.default)([...t.stemModifications, t.ueToO]));
  return r || null;
}
Object.defineProperty(NA, "__esModule", {
  value: !0
});
NA.default = n8a;
var BBa = ee, WBa = UBa(LA);
function UBa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  buildFormRule: FA,
  createRulesFromArrays: BA,
  findMatchingEndingInArray: zt
} = BBa.languageProcessing, Ks = function(e) {
  return /[aeiouáéíóú]/gi.test(e);
}, HBa = function(e, a) {
  const t = e.length;
  for (let n = a; n < t; n++)
    if (Ks(e[n]))
      return n;
  return t;
}, GBa = function(e, a) {
  const t = e.length;
  for (let n = a; n < t; n++)
    if (!Ks(e[n]))
      return n;
  return t;
}, os = function(e) {
  const a = ["á", "é", "í", "ó", "ú"], t = ["a", "e", "i", "o", "u"];
  for (let n = 0; n < a.length; n++)
    e = e.replace(a[n], t[n]);
  return e;
}, md = function(e, a) {
  return e.length < a.length ? !1 : e.slice(-a.length) === a;
}, UP = function(e, a) {
  const t = [];
  for (const r in a)
    md(e, a[r]) && t.push(a[r]);
  const n = t.sort(function(r, o) {
    return o.length - r.length;
  })[0];
  return n || "";
}, VBa = function(e, a) {
  for (const t of a)
    if (t[1].includes(e))
      return t[0];
  return null;
}, KBa = function(e, a) {
  return zt(a, ["ano", "anos", "ana", "anas"]) !== "" ? e.endsWith("s") ? e.slice(0, e.length - 2) : e.slice(0, e.length - 1) : e;
}, YBa = function(e, a, t) {
  return !md(a, "mente") || t.notMenteAdverbs.includes(e) ? e : FA(e, BA(t.menteToStem)) || e;
}, QBa = function(e, a, t) {
  return zt(a, t.superlativeSuffixes) === "" || t.notSuperlatives.includes(e) ? e : FA(e, BA(t.superlativeToStem));
}, XBa = function(e, a) {
  if (zt(e, ["ito", "ita", "itos", "itas", "íto", "íta", "ítos", "ítas"]) === "" || a.notDiminutives.includes(e))
    return e;
  const n = e.endsWith("s") ? e.slice(0, e.length - 2) : e.slice(0, e.length - 1);
  for (const r of a.irregularDiminutives)
    if (r[1].includes(n))
      return r[0];
  return FA(e, BA(a.diminutiveToStem)) || e;
}, aq = function(e, a) {
  for (const t of a.nouns)
    if (t.includes(e))
      return t[0];
  for (const t of a.adjectives)
    if (t.includes(e))
      return t[0];
  for (const t of a.verbs)
    if (t.includes(e))
      return t[0];
  return null;
}, ZBa = function(e, a, t, n, r) {
  const o = zt(t, ["ya", "ye", "yan", "yen", "yeron", "yendo", "yo", "yó", "yas", "yes", "yais", "yamos"]);
  if (o !== "" && e.slice(-o.length - 1, -o.length) === "u" && (e = e.slice(0, -o.length)), e !== a && (t = e.slice(n)), e === a) {
    const l = ["arían", "arías", "arán", "arás", "aríais", "aría", "aréis", "aríamos", "aremos", "ará", "aré", "erían", "erías", "erán", "erás", "eríais", "ería", "eréis", "eríamos", "eremos", "erá", "eré", "irían", "irías", "irán", "irás", "iríais", "iría", "iréis", "iríamos", "iremos", "irá", "iré", "aba", "ada", "ida", "ía", "ara", "iera", "ad", "ed", "id", "ase", "iese", "aste", "iste", "an", "aban", "ían", "aran", "ieran", "asen", "iesen", "aron", "ieron", "ado", "ido", "ando", "iendo", "ió", "ar", "er", "ir", "as", "abas", "adas", "idas", "ías", "aras", "ieras", "ases", "ieses", "ís", "áis", "abais", "íais", "arais", "ierais", "  aseis", "ieseis", "asteis", "isteis", "ados", "idos", "amos", "ábamos", "íamos", "imos", "áramos", "iéramos", "iésemos", "ásemos"], u = zt(t, l), c = zt(t, ["en", "es", "éis", "emos"]);
    if (u !== "")
      e = e.slice(0, -u.length);
    else if (c !== "") {
      if (e = e.slice(0, -c.length), md(e, "gu") && (e = e.slice(0, -1)), r.wordsThatLookLikeButAreNot.notVerbForms.map(os).includes(os(e)))
        return e;
      const y = aq(e, r.stemsThatBelongToOneWord);
      if (y)
        return y;
      t = e.slice(n);
      const z = zt(t, l);
      z !== "" && (e = e.slice(0, -z.length));
    }
  }
  return e;
}, JBa = function(e) {
  let a = e.length, t = e.length, n = e.length;
  for (let r = 0; r < e.length - 1 && a === e.length; r++)
    Ks(e[r]) && !Ks(e[r + 1]) && (a = r + 2);
  for (let r = a; r < e.length - 1 && t === e.length; r++)
    Ks(e[r]) && !Ks(e[r + 1]) && (t = r + 2);
  return e.length > 3 && (Ks(e[1]) ? Ks(e[0]) && Ks(e[1]) ? n = GBa(e, 2) + 1 : n = 3 : n = HBa(e, 2) + 1), [a, t, n];
}, e8a = function(e, a, t) {
  const n = ["me", "se", "sela", "selo", "selas", "selos", "la", "le", "lo", "las", "les", "los", "nos"], r = ["iéndo", "ándo", "ár", "ér", "ír"], o = ["iendo", "ando", "ar", "er", "ir"], l = zt(e, n);
  if (l !== "" && !t.wordsThatLookLikeButAreNot.notVerbsEndingInPersonalPronouns.includes(e)) {
    let u = zt(a.slice(0, -l.length), r);
    u === "" ? (u = zt(a.slice(0, -l.length), o), (u !== "" || md(e.slice(0, -l.length), "uyendo")) && (e = e.slice(0, -l.length))) : e = os(e.slice(0, -l.length));
  }
  return e;
}, a8a = function(e, a) {
  const t = zt(a, ["anza", "anzas", "ico", "ica", "icos", "icas", "ismo", "ismos", "able", "ables", "ible", "ibles", "ista", "istas", "oso", "osa", "osos", "osas", "amiento", "amientos", "imiento", "imientos"]), n = zt(a, ["icadora", "icador", "icación", "icadoras", "icadores", "icaciones", "icante", "icantes", "icancia", "icancias", "adora", "ador", "ación", "adoras", "adores", "aciones", "ante", "antes", "ancia", "ancias"]), r = zt(a, ["logía", "logías"]), o = zt(a, ["ución", "uciones"]), l = zt(a, ["encia", "encias"]), u = zt(a, ["abilidad", "abilidades", "icidad", "icidades", "ividad", "ividades", "idad", "idades"]), c = zt(a, ["ativa", "ativo", "ativas", "ativos", "iva", "ivo", "ivas", "ivos"]);
  return t !== "" ? e = e.slice(0, -t.length) : n !== "" ? e = e.slice(0, -n.length) : r !== "" ? e = e.slice(0, -r.length) + "log" : o !== "" ? e = e.slice(0, -o.length) + "u" : l !== "" ? e = e.slice(0, -l.length) + "ente" : u !== "" ? e = e.slice(0, -u.length) : c !== "" && (e = e.slice(0, -c.length)), e;
}, t8a = function(e, a, t) {
  const n = UP(a, ["os", "a", "o", "á", "í", "ó"]);
  return n !== "" ? e = e.slice(0, -n.length) : UP(a, ["e", "é"]) !== "" && (e = e.slice(0, -1), a = e.slice(t), md(a, "u") && md(e, "gu") && (e = e.slice(0, -1))), e;
};
function n8a(e, a) {
  e.toLowerCase();
  const t = VBa(e, a.exceptionStemsWithFullForms);
  if (t)
    return t;
  if (a.wordsThatLookLikeButAreNot.nonPluralsOnS.includes(e) || e.length < 2)
    return os(e);
  const [o, l, u] = JBa(e);
  let c = e.slice(o), f = e.slice(l), y = e.slice(u);
  const z = e, v = KBa(e, c);
  if (v !== e)
    return os(v);
  e = e8a(e, y, a), e !== z && (c = e.slice(o), f = e.slice(l), y = e.slice(u));
  const O = e;
  e = a8a(e, f);
  const I = YBa(e, c, a.menteStemming);
  if (I !== e)
    return os(I);
  const A = QBa(e, c, a.superlativesStemming);
  if (A !== e)
    return os(A);
  const x = XBa(e, a.diminutivesStemming);
  if (x !== e)
    return os(x);
  e !== O && (y = e.slice(u));
  const w = e;
  let j = !1;
  const S = a.wordsThatLookLikeButAreNot.notVerbForms;
  if (O === w) {
    let M = e;
    e.endsWith("s") && (M = e.slice(0, -1)), S.includes(M) ? (e = M, j = !0) : e = ZBa(e, w, y, u, a);
  }
  y = e.slice(u), e = t8a(e, y, u);
  const P = aq(e, a.stemsThatBelongToOneWord);
  if (P)
    return P;
  if (!j) {
    const M = (0, WBa.default)(e, a);
    if (M)
      return M;
  }
  return os(e);
}
Object.defineProperty(DA, "__esModule", {
  value: !0
});
DA.default = d8a;
var r8a = K, s8a = ee, i8a = o8a(NA);
function o8a(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: l8a
} = s8a.languageProcessing;
function d8a(e) {
  const a = (0, r8a.get)(e.getData("morphology"), "es", !1);
  return a ? (t) => (0, i8a.default)(t, a) : l8a;
}
var WA = {};
Object.defineProperty(WA, "__esModule", {
  value: !0
});
WA.default = p8a;
var u8a = ee;
const {
  formatNumber: c8a
} = u8a.helpers;
function p8a(e) {
  const a = 206.84 - 1.02 * e.numberOfWords / e.numberOfSentences - 0.6 * e.syllablesPer100Words;
  return c8a(a);
}
Object.defineProperty(mA, "__esModule", {
  value: !0
});
var tq = mA.default = void 0, g8a = ee, m8a = ui(By), f8a = tt, h8a = ui(vp), y8a = ui(Er), z8a = ui(Wy), b8a = ui(hBa), w8a = ui(Uy), v8a = ui(CA), k8a = ui(DA), _8a = ui(WA);
function ui(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: E8a
} = g8a.languageProcessing;
let A8a = class extends E8a {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), Object.assign(this.config, {
      language: "es",
      passiveConstructionType: "periphrastic",
      firstWordExceptions: m8a.default,
      functionWords: f8a.all,
      stopWords: h8a.default,
      transitionWords: y8a.default,
      twoPartTransitionWords: z8a.default,
      syllables: b8a.default,
      sentenceLength: w8a.default
    }), Object.assign(this.helpers, {
      getClauses: v8a.default,
      getStemmer: k8a.default,
      fleschReadingScore: _8a.default
    });
  }
};
tq = mA.default = A8a;
var UA = {}, fd = {}, Ar = {};
Object.defineProperty(Ar, "__esModule", {
  value: !0
});
Ar.singleWords = Ar.multipleWords = Ar.default = Ar.allWords = void 0;
const T8a = Ar.singleWords = ["اگر", "اما", "باری", "پس", "چون", "چه", "خواه", "زیرا", "لیکن", "نیز", "و", "ولی", "هم", "یا", "ازآنکه", "اگرچه", "اگرچنانکه", "بالعکس", "بلکه", "چنانچه", "چنانکه", "همچنین", "سپس", "وانگهی", "تااینکه", "بااینکه", "بنابراین", "وگرنه", "ولو"], $8a = Ar.multipleWords = ["ازآنجا که", "از این رو", "از این گذشته", "از بس", "از بس که", "از بهر آ‌نکه", "اکنون که", "الا اینکه", "آنجا که", "آنگاه که", "با این حال", "با وجود این", "با وجود اینکه", "بس که", "به جز", "به شرط آ‌نکه", "به طوری که", "به هر حال", "بی آنکه", "تا آنکه", "تا جایی که", "چندان که", "در حالیکه", "در صورتی که", "در نتیجه", "علیرغم اینکه", "مگر این که", "وقتی که", "هر چند", "هر گاه که", "هر وقت که", "همان طور که", "همان که", "همین که", "به غیر از", "بر طبق", "بر اساس", "بر اثر", "در خصوص", "چونان که", "با این وجود", "برای این", "آن‌جا که", "برای این که", "به شرطی که", "به خاطر", "به جهت", "به استثنای", "به علاوه ی", "به اضافه", "درباره ی", "در مقابل", "از جمله", "از حیث", "از لحاظ", "از قبیل", "با وجود", "به معنای واقعی کلمه"], j8a = Ar.allWords = T8a.concat($8a);
Ar.default = j8a;
Object.defineProperty(fd, "__esModule", {
  value: !0
});
fd.default = fd.all = void 0;
var x8a = Ar, S8a = O8a(Ba);
function O8a(e) {
  return e && e.__esModule ? e : { default: e };
}
const I8a = ["ی", "یک", "برخی", "از", "معدود", "چندتا", "مقداری"], C8a = ["سه", "چهار", "پنج", "شش", "هفت", "هشت", "نه", "ده", "یازده", "دوازده", "سیزده", "چهارده", "پانزده", "شانزده", "هفده", "هجده", "نوزده", "بیست", "هزار", "میلیون", "میلیارد", "هفتده", "نونزده", "و", "سی", "چهل", "پنجاه", "شصت", "هفتاد", "هشتاد", "نود", "دویست", "تریلیارد"], P8a = ["اول", "اوّل", "دوم", "سوم", "چهارم", "پنجم", "ششم", "هفتم", "هشتم", "نهم", "دهم", "یازدهم", "دوازدهم", "سیزدهم", "چهاردهم", "پانزدهم", "شانزدهم", "هفدهم", "هجدهم", "نوزدهم", "بیستم", "پانزدهمین", "هفتهمین", "هجدهمین", "نوزدهمین", "بیستمین", "یکم", "ام", "چهلم", "پنجاهم", "شصتم", "هفتادم", "هشتادم", "نودم", "صدم", "دویستم", "هزارم", "میلیونم", "میلیاردم", "هفتهم"], R8a = ["نیم"], D8a = ["مرا", "من", "را", "من‌را", "به", "تو", "اون", "اونو", "او", "ایشان", "ایشون", "این", "رو", "اینو", "ما", "اونا", "آن‌ها", "آنها", "اونارو", "همین", "اینان", "آنان"], N8a = ["خودم", "خودت", "خودش", "خودمان", "خودتان", "خودشان", "خود"], L8a = [" هر", "کس", "هرکس", "کسی", "فلان", "کس", "هیچ‌کس", "شخصی", "چیز", "هیچ‌چیز", "همه‌چیز", "چیزی", "یکی", "دیگر", "کدام", "هرکدام", "هیچ‌کدام", "دیگری", "بعضی", "اندکی", "دیگران", "چندین "], M8a = ["همدیگر", "یکدیگر"], q8a = ["کی", "کِی", "کجا", "چه", "چرا", "چطور", "آیا"], F8a = ["کمی", "زیاد", "فراوان", "بیشتر", "بسیار", "مشتی", "تعداد", "زیادی", "بسیارکم", "بخش", "چند", "تمام"], B8a = ["با", "باری", "نیز", "ان", "که", "تا", "اینکه", "چون‌که", "اگرچه", "باوجوداین", "واسهی", "بی", "بر", "چون", "چندان‌که", "تااینکه", "چنانچه", "برای", "چونان", "زیرا", "آنکه", "اگرچنانچه", "بس", "واسه", "چونان‌که", "زیراکه", "تاآنکه", "ازاین‌رو", "الا", "این‌که", "یا", "ای", "چنان", "آن‌جا", "ازین‌رو", "بس‌که", "چنان‌چه", "همین‌که", "آن‌گاه", "بااین‌حال", "اندر", "چنان‌که", "همان‌که", "ازآنجاکه", "بااین‌که", "به‌شرط", "علیه", "مگر", "ازبس", "بدون", "خواه", "چونکه", "بلکه", "آن‌که", "ازبس‌که", "بااینکه", "ضد", "جز", "ازآنکه", "الی", "غیر", "الاّ", "بیرون", "پایین", "پشت", "پهلوی", "پی", "توی", "درون", "دنبال", "زیر", "کنار", "مانند", "مثل", "شبیه", "نزدیک", "پر", "زی", "سوای", "وسیله", "ازسر", "درباره", "درمورد", "میان", "درمیان", "درخصوص", "براثر", "براساس", "برطبق", "برحسب", "سبک", "محلی", "جدید", "پرسروصدا", "قدیمی", "قوی", "ساکت", "درست", "نرم", "ضعیف", "مرطوب", "اشتباه", "جوان", "بزرگ", "عمیق", "طولانی", "دراز", "کشیده", "باریک", "کوتاه", "کوچک", "وسیع", "ضخیم", "نازک", "ناخواسته", "ناپاک", "نااهل", "بعضی وقت ها", "امروز", "امسال", "فردا", "همیشه", "اینجا", "آنجا", "مدرسه", "هر کجا", "مسجد", "خوب", "آرامی", "افتان", "وخیزان", "گریان", "افسوس", "متاسفانه", "عجبا", "شگفتا", "حتماً", "یقیناً", "چگونه", "شاید", "پنداری", "قطره", "خدا", "مانا", "همانا", "چنین", "بکردار", "بسان", "وگر", "ور", "هرگز", "اصلاً", "ابداً", "نخست", "درآغاز", "پیاپی", "گروه", "دسته", "دوتا", "جزکه", "اتفاقاً", "احتمالاً", "دائماً", "اجباراً", "معمولاً", "سریعاً", "مخصوصاً", "تقریباً", " آخرالامر", "الآن", "بالعکس"], W8a = ["اما", "پس", "لیکن", "ولی", "هم", "چنانکه", "شرط", "طوری", "بنابراین", "جایی", "چندانکه", "حالی", "صورتی", "نتیجه", "وانگهی", "وقتی", "وگرنه", "هرچند", "گاه", "وقت", "همانطور", "فقط"], U8a = ["پرسیدن", "فهمیدن", "عقیده", "مکالمه"], H8a = ["خیلی", "کاملا", "تقریبا", "انصافاً", "انصافا", "بیش ازحد", "بخصوص", "وحشتناک", "نسبتا", "واقعاً", "واقعا", "العاده"], G8a = ["خواستن", "باید", "بایستن", "شایستن", "توانستن", "داشتن", "می‌شود", "می شود", "میشود", "گشت", "گردید", "می‌گردد", "خواهم", "بود", "است", "نیست", "باشد", "می‌توان", "میتوان", "شده", "دارد", "دارند"], V8a = ["سیاه", "سفید", "آبی", "خاکستری", "سبز", "نارنجی", "ارغوانی", "قرمز", "زرد", "دایره", "راست", "مربع", "مثلث", "تازه", "تلخ", "شور", "ترش", "تند", "شیرین", "بد", "تمیز", "پاک", "تاریک", "دشوار", "تار", "کثیف", "خشک", "ساده", "خالی", "گران", "سریع", "خارجی", "کامل", "سخت", "سنگین", "سفت", "ارزان", "فی", "الفور", "بالطبع", "مادام", "حتی", "المقدور ", "هنوز", "نو", "دوباره", "باز", "مجدد", "خارج", "بالا", "عقب", "همه جا", "امیدوارم", "الهی", "خداکند", "آرزومندم", "ان شالله", "احتمال", "امکان", "کند", "آهسته", "آسان", "نیک", "زشت", "نالان", "دیروز"], K8a = ["اِه", "دِ", "اَه", "آخ", "آخیش", "آخیییی", "وا", "ای بابا", "ای وای", "اِواا", "نُچّ", "اَاَ", "بابا", "هیس", "وای", "اُوه", "حالا"], Y8a = ["شکستن", "لایه", "ورقه", "زدن", "دادن", "چشیدن", "برش", "جوشیدن", "ریختن", "باربیکیو", "پختن", "غل", "آشپزی", "مواد", "اولیه", "دستور", "پخت", "دستورالعمل", "ملاقه", "کشیدن", "جوشاندن", "دست", "زن", "برقی", "حرکت", "باحرکت", "جلووعقب", "ورز", "آتش", "مستقیم", "ادویه", "روغن", "اضافی", "گرفتن", "پیچیدن", "پخته", "نشده", "پز", "خام", "یخ", "زده", "قاشق", "چایخوری", "فر", "گاز", "سطح", "حرارت", "ملایم", "عصاره", "مرغ", "گوشت", "سبزیجات", "وپز", "خمیر", "کتاب"], Q8a = ["فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", "صبح", "عصر", "مغرب", "غروب", "بامداد", "نیمه", "ساعت", "روز", "تقویم", "دقیقه", "اوایل", "هفته", "گذشته", "آینده", "بهار", "تابستان", "پاییز", "زمستان", "گرینویچ", "دهه", "قمری", "شمسی", "نجومی", "شنی", "عقربه", "جهانی", "لحظه", "ماه", "الان", "ربع", "روزمره", "روزانه", "اکنون", "تاخیر"], X8a = ["خیلی ", "بسیاری", "قدری", "پاره ای", "پاره‌ای", "چندان"], Z8a = ["آقا", "آقای", "خانم", "دوشیزه", "جناب", "سرکار", "دکتر"], J8a = ["کاملاً", "بعد"], e5a = fd.all = (0, S8a.default)([].concat(C8a, P8a, D8a, q8a, F8a, N8a, L8a, B8a, W8a, U8a, H8a, G8a, V8a, K8a, Y8a, Q8a, X8a, Z8a, J8a, M8a, R8a, I8a, x8a.singleWords));
fd.default = e5a;
var Ky = {};
Object.defineProperty(Ky, "__esModule", {
  value: !0
});
Ky.default = void 0;
Ky.default = [["چه", "چه"], ["خواه", "خواه"], ["نه", "نه"], ["هم", "هم"], ["یا", "یا"]];
var Yy = {};
Object.defineProperty(Yy, "__esModule", {
  value: !0
});
Yy.default = void 0;
Yy.default = {
  recommendedLength: 25
};
var Qy = {};
Object.defineProperty(Qy, "__esModule", {
  value: !0
});
Qy.default = void 0;
Qy.default = [
  // Indefinite articles:
  "برخی از",
  "یک",
  "ی",
  "مقداری",
  "چندتا",
  "معدود",
  // Numbers 1-10:
  "یک",
  "دو",
  "سه",
  "چهار",
  "پنج",
  "شش",
  "هفت",
  "هشت",
  "نه",
  "ده",
  // Demonstratives:
  "همان",
  "همین",
  "آنها",
  "اینان",
  "آنان",
  "اینها",
  "این",
  "آن"
];
var HA = {};
Object.defineProperty(HA, "__esModule", {
  value: !0
});
HA.default = r5a;
var a5a = ee;
const {
  regexHelpers: {
    searchAndReplaceWithRegex: t5a
  }
} = a5a.languageProcessing, HP = function(e) {
  const a = "ن", t = ["مان", "شان", "تان", "ش", "ت", "م", "ی"], n = ["یی", "یم", "یت", "یش"], r = ["‌ای", "‌یی", "‌ام", "‌ات", "‌اش"], o = ["یی", "ی"], l = [];
  return l.push(a + e), e.endsWith("ها") ? l.push(...o.map((u) => e + u)) : /([^وای]ه)$/i.test(e) ? l.push(...r.map((u) => e + u)) : /([وا])$/i.test(e) ? l.push(...n.map((u) => e + u)) : (e.endsWith("ی") && l.push(e + "‌ای"), l.push(...t.map((u) => e + u))), l;
}, n5a = function(e) {
  const a = "ن", t = [["(و|ا)(یش|یت|یم|یی)$", "$1"], ["([^وای]ه)(‌یی|‌ای|‌اش|‌ات|‌ام)$", "$1"], ["(ی)‌ای$", "$1"], ["(ها)یی$", "$1"], ["(مان|شان|تان|ش|ت|م|ی)$", ""]];
  return e.startsWith(a) ? e.slice(1, e.length) : t5a(e, t);
};
function r5a(e) {
  const a = [];
  a.push(...HP(e));
  const t = n5a(e);
  return t && (a.push(t), a.push(...HP(t))), a;
}
var GA = {};
Object.defineProperty(GA, "__esModule", {
  value: !0
});
GA.default = o5a;
var s5a = ee;
const {
  baseStemmer: i5a
} = s5a.languageProcessing;
function o5a() {
  return i5a;
}
var VA = {}, Xy = {};
Object.defineProperty(Xy, "__esModule", {
  value: !0
});
Xy.default = void 0;
Xy.default = [
  "آراسته",
  "آزرده",
  "آزموده",
  "آشفته",
  "آغشته",
  "آفریده",
  "آلوده",
  "آمده",
  "آورده",
  "آمیخته",
  "آورده",
  "آویخته",
  "اُفتاده",
  "اَفراشته",
  "اَفروخته",
  "اَفزوده",
  "اَفشانده",
  "اَنباشته",
  "اَنداخته",
  "اَندوخته",
  "اِنگاشته",
  "برانگیخته",
  "باریده",
  "بافته",
  "بخشوده",
  "بخشیده",
  "برده",
  "برگردانده",
  "برگزیده",
  "بسته",
  "بلعیده",
  "بوسیده",
  "بوییده",
  "پاشیده",
  "پخته",
  "پذیرفته",
  "پراکنده",
  "پرداخته",
  "پرستیده",
  "پرسیده",
  "پژمرده",
  "پسندیده",
  "پنداریده",
  "پوشیده",
  "پوشانده",
  "پیچیده",
  "پیوسته",
  "پیموده",
  "تافته",
  "تراشیده",
  "ترسانده",
  "ترکیده",
  "ترکانده",
  "تَکانده",
  "تنیده",
  "توانسته",
  "جوشانده",
  "جوشیده",
  "جَویده",
  "جوییده",
  "چاپیده",
  "چرخیده",
  "چسبانده",
  "چسبیده",
  "چشیده",
  "چیده",
  "خاسته",
  "خشکیده",
  "خراشیده",
  "خریده",
  "خوانده",
  "خورده",
  "داده",
  "دریده",
  "دزدیده",
  "دوخته",
  "دوشیده",
  "دیده",
  "رانده",
  "ربوده",
  "رسانده",
  "رسیده",
  "رشته",
  "رفته",
  "ریخته",
  "زاده",
  "زده",
  "زدوده",
  "ساخته",
  "سابیده",
  "ساییده",
  "ستانده",
  "ستوده",
  "سرشته",
  "سروده",
  "سوخته",
  "سوزانده",
  "شده",
  "شسته",
  "شکافته",
  "شکانده",
  "شکسته",
  "شکفته",
  "شکافیده",
  "شمرده",
  "شناسانده",
  "شنفته",
  "شنیده",
  "طلبیده",
  "فرساییده",
  "فرستاده",
  "فرسوده",
  "فرموده",
  "فروخته",
  "فریفته",
  "فشرده",
  "کاسته",
  "کاشته",
  "کشته",
  "کشیده",
  "گفته",
  "کوبیده",
  "گداخته",
  "گذاشته",
  "گردانده",
  "گرفته",
  "گزارده",
  "گَزیده",
  "گُسترانده",
  "گُسترده",
  "گسسته",
  "گسیخته",
  "گشته",
  "گشوده",
  "گفته",
  "گماشته",
  "مالیده",
  "نامیده",
  "نگاشته",
  "نواخته",
  "نوردیده",
  "نِوِشته",
  "نوشیده",
  "نهاده",
  "نهفته",
  "وابسته",
  "واگذاشته",
  "واگفته",
  "وانهاده",
  "انداخته",
  "افتاده",
  "ورانداخته",
  "ورزیده",
  "وزیده",
  "ویرایش شده",
  "یافته",
  "ستانده شده",
  "آغازشده",
  "آماده",
  "اَرزیده",
  "آمده",
  // Compound participles (used with prepositional verbs, auxiliary, or a compound verb. both verbs are in the participle form)
  "پذیرایی شده",
  "تولید شده",
  "استفاده شده",
  "آسفالت شده",
  "اخراج شده",
  "خلق شده",
  "خیس شده",
  "آماده شده",
  "باز شده",
  "بازپس گرفته شده",
  "بشمار آمده",
  "بررسی شده",
  "پاره شده",
  "پیدا شده",
  "زخم خورده",
  "انعام داده شده",
  "زخم شده",
  "ضایع شده",
  "شکست یافته",
  "شروع شده",
  "گول خورده",
  "دزدی رفته",
  "انجام گرفته",
  "فرمایش داده",
  "فرمایش شده",
  "به سر برده",
  "سر رفته",
  "سر آمده",
  "روشن شده",
  "راهنمایی شده",
  "تکان خورده",
  "زمین خورده",
  "دیده شده",
  "بر آمده",
  "تلفیق شده",
  "تخلیه شده",
  "توافق شده",
  "توجه شده",
  "توقف شده",
  "توقیف شده",
  "حمله شده",
  "خبردار شده",
  "گرفتار شده",
  "مسخره شده",
  "مقصر شناخته شده",
  "مضاعف شده",
  "ممکن شده",
  "نقشه کشیده",
  "آغازشدن",
  "آماده شدن",
  "ارزیابی شدن",
  "پذیرایی شدن",
  "تولید شدن",
  "استفاده شدن",
  "آسفالت شدن",
  "اخراج شدن",
  "خلق شدن",
  "خیس شدن",
  "آماده شدن",
  "باز کردن",
  "باز پس گرفتن",
  "بشمار آمدن",
  "بررسی شدن",
  "پاره شدن",
  "پیدا شدن",
  "زخم خوردن",
  "انعام گرفتن",
  "زخم شدن",
  "ضایع شدن",
  "شکست یافتن",
  "شروع شدن",
  "گول خوردن",
  "دزدی رفتن",
  "انجام گرفتن",
  "فرمایش دادن",
  "فرمایش شدن",
  "به سر بردن",
  "سر رفتن",
  "سر آمدن",
  "روشن شدن",
  "راهنمایی کردن",
  "تکان خوردن",
  "زمین خوردن",
  "دیده شدن",
  "بر آمدن",
  "تلفیق شدن",
  "تخلیه شدن",
  "توافق شدن",
  "توجه شدن",
  "توقف کردن",
  "توقیف شدن",
  "حمله شدن",
  "خبردار شدن",
  "گرفتار آمدن",
  "مسخره شدن",
  "مقصر شناخته شدن",
  "مضاعف کردن",
  "ممکن شدن",
  "نقشه کشیدن",
  "آغاز شده",
  "آماده شد",
  "ارزیابی شدم",
  "پذیرایی شدم",
  "تولید شد",
  "استفاده شد",
  "آسفالت شد",
  "اخراج شدم",
  "خلق شدم",
  "خیس شدم",
  "آماده شد",
  "باز شد",
  "باز پس گرفته شد",
  "بشمار آمد",
  "بررسی شد",
  "پاره شد",
  "پیدا شد",
  "زخم خورد",
  "انعام گرفتم",
  "زخم شد",
  "ضایع شد",
  "شکست یافتم",
  "شروع شد",
  "گول خوردم",
  "دزدی رفت",
  "انجام گرفت",
  "سر رفت",
  "سر آمد",
  "روشن شد",
  "راهنمایی شدم",
  "تکان خورد",
  "زمین خورد",
  "دیده شدم",
  "تلفیق شد",
  "تخلیه شد",
  "توافق شد",
  "توجه شد",
  "توقف کرد",
  "توقیف شدم",
  "حمله شد",
  "خبردار شدم",
  "گرفتار آمد",
  "مسخره شدم",
  "مقصر شناخته شدم",
  "مضاعف شد",
  "ممکن شد",
  "نقشه کشیده شد",
  "آغاز شده است",
  "آماده می‌شد",
  "ارزیابی شدی",
  "پذیرایی شدی",
  "تولید می‌شد",
  "استفاده می‌شد",
  "آسفالت می‌شد",
  "اخراج شدی",
  "خلق شدی",
  "خیس شدی",
  "آماده می‌شد",
  "باز شدند",
  "باز پس گرفته شد",
  "بشمار آمدند",
  "بررسی شدند",
  "پاره شدند",
  "پیدا شدند",
  "زخم خوردند",
  "انعام گرفتی",
  "زخم شدند",
  "ضایع شدند",
  "شکست یافتی",
  "شروع می‌شد",
  "گول خوردی",
  "دزدی رفته",
  "انجام گرفتند",
  "سر می‌رفت",
  "داشت سر می‌آمد",
  "روشن شدند",
  "راهنمایی شدی",
  "تکان خوردند",
  "زمین خواهد خورد",
  "دیده شدی",
  "تلفیق شدند",
  "تخلیه شدند",
  "توافق شده",
  "توجه می‌شد",
  "توقف کردند",
  "توقیف شدی",
  "حمله می‌شد",
  "خبردار شدی",
  "گرفتار آمده",
  "مسخره شدی",
  "مقصر شناخته شدی",
  "مضاعف شده",
  "ممکن شده",
  "نقشه کشیده شده است",
  "داشت آغاز می‌شد",
  "داشت آماده می‌شد",
  "ارزیابی شد",
  "پذیرایی شد",
  "داشت تولید می‌شد",
  "داشت استفاده می‌شد",
  "داشت آسفالت می‌شد",
  "اخراج شد",
  "خلق شد",
  "خیس شد",
  "آماده می‌شدند",
  "باز می‌شد",
  "داشت باز پس گرفته می‌شد",
  "بشمار می‌آمد",
  "بررسی می‌شد",
  "پاره می‌شد",
  "پیدا شده",
  "زخم خورده",
  "انعام گرفت",
  "زخم شده",
  "ضایع شده",
  "شکست یافت",
  "داشت شروع می‌شد",
  "گول خورد",
  "دزدی رفته است",
  "انجام می‌گرفت",
  "سر رفته",
  "سر آمده",
  "روشن می‌شد",
  "راهنمایی شد",
  "تکان می‌خورد",
  "دیده شد",
  "تلفیق می‌شد",
  "تخلیه می‌شد",
  "توافق شده است",
  "توجه شده",
  "توقف کرده",
  "توقیف شد",
  "داشت حمله می‌شد",
  "خبردار شد",
  "گرفتار آمده است",
  "مسخره شد",
  "مقصر شناخته شد",
  "مضاعف شده است",
  "ممکن شده است",
  "نقشه کشیده خواهد شد",
  "آغاز شده بود",
  "آماده شده",
  "ارزیابی شدیم",
  "پذیرایی شدیم",
  "تولید شده ",
  "استفاده شده",
  "آسفالت شده",
  "اخراج شدیم",
  "خلق شدیم",
  "خیس شدیم",
  "داشت آماده می‌شد",
  "باز می‌شدند",
  "داشتند باز پس گرفته می‌شدند",
  "بشمار می‌آمدند",
  "بررسی می‌شدند",
  "پاره می‌شدند",
  "پیدا شده است",
  "زخم خورده است",
  "انعام گرفتیم",
  "زخم شده است",
  "ضایع شده است",
  "شکست یافتیم",
  "شروع شده",
  "گول خوردیم",
  "دزدی رفته بود",
  "انجام می‌گرفتند",
  " سر رفته است",
  "سر آمده است",
  "روشن می‌شدند",
  "راهنمایی شدیم",
  "تکان می‌خوردند",
  "دیده شدیم",
  "تلفیق می‌شدند",
  "تخلیه می‌شدند",
  "توافق شده بود",
  "توجه شده است",
  "توقف کرده است",
  "توقیف شدیم",
  "حمله شده",
  "خبردار شدیم",
  "گرفتار آمده بود",
  "مسخره شدیم",
  "مقصر شناخته شدیم",
  "مضاعف شده بود",
  "ممکن شده بود",
  "آغاز شود",
  "آماده شده است",
  "ارزیابی شدید",
  "پذیرایی شدید",
  "تولید شده است",
  "استفاده شده است",
  "آسفالت شده است",
  "اخراج شدید",
  "خلق شدید",
  "خیس شدید",
  "داشتند آماده می‌شدند",
  "داشت باز می‌شد",
  "باز پس گرفته شده",
  "داشت بشمار می‌آمد",
  "داشت بررسی می‌شد",
  "پاره شده",
  "پیدا شده بود",
  "زخم خورده بود",
  "انعام گرفتید",
  "زخم شده‌اند",
  "ضایع شده بود",
  "شکست یافتید",
  "شروع شده است",
  "گول خوردید",
  "دزدی می‌رود",
  "داشت انجام می‌گرفت",
  "سر رفته بود",
  "سر آمده بود",
  "داشت روشن می‌شد",
  "راهنمایی شدید",
  "داشت تکان می‌خورد",
  "دیده شدید",
  "داشت تلفیق می‌شد",
  "داشت تخلیه می‌شد",
  "توافق شود",
  "توجه شده بود",
  "توقف کرده بود",
  "توقیف شدید",
  "حمله شده است",
  "خبردار شدید",
  "گرفتار خواهد آمد",
  "مسخره شدید",
  "مقصر شناخته شدید",
  "مضاعف شود",
  "ممکن شود",
  "آغاز می‌شود",
  "آماده شده بود",
  "ارزیابی شدند",
  "پذیرایی شدند",
  "تولید شده بود",
  "استفاده شده بود",
  "آسفالت شده بود",
  "اخراج شدند",
  "خلق شدند",
  "خیس شدند",
  "آماده شده",
  "داشتند باز می‌شدند",
  "باز پس گرفته شده است",
  "داشتند بشمار می‌آمدند",
  "داشتند بررسی می‌شدند",
  "پاره شده است",
  "پیدا شده بودند",
  "زخم خورده بودند",
  "انعام گرفتند",
  "زخم شده بود",
  "ضایع شده بودند",
  "شکست یافتند",
  "شروع شده‌اند",
  "گول خوردند",
  "دزدی رفته باشد",
  "داشتند انجام می‌گرفتند",
  "دارد سر می‌رود",
  "سر خواهد آمد",
  "داشتند روشن می‌شدند",
  "راهنمایی شدند",
  "داشتند تکان می‌خوردند",
  "دیده شدند",
  "داشتند تلفیق می‌شدند",
  "داشتند تخلیه می‌شدند",
  "توافق می‌شود",
  "توجه می‌شود",
  "توقف می‌کند",
  "توقیف شدند",
  "حمله شده بود",
  "خبردار شدند",
  "مسخره شدند",
  "مقصر شناخته شدند",
  "مضاعف می‌شود",
  "ممکن خواهد شد",
  "آراستن",
  "آزردن",
  "آزمودن",
  "آشفتن",
  "آغشتن",
  "آفریدن",
  "آلودن",
  "آمدن",
  "آمیختن",
  "آوردن",
  "آویختن",
  "اُفتادن",
  "اَفراشتن",
  "اَفروختن",
  "اَفزودن",
  "اَفشاندن",
  "اَنباشتن",
  "اَنداختن",
  "اَندوختن",
  "برانگیختن",
  "بافتن",
  "بخشودن",
  "بخشیدن",
  "بردن",
  "برگرداندن",
  "برگزیدن",
  "بستن",
  "بلعیدن",
  "بوسیدن",
  "بوییدن",
  "پاشیدن",
  "پختن",
  "پذیرفتن",
  "پراکندن",
  "پرداختن",
  "پرستیدن",
  "پرسیدن",
  "پژمردن",
  "پسندیدن",
  "پوشیدن",
  "پوشاندن",
  "پیچیدن",
  "پیوستن",
  "پیمودن",
  "تافتن",
  "تراشیدن",
  "ترساندن",
  "ترکیدن",
  "ترکاندن",
  "تَکاندن",
  "تنیدن",
  "توانستن",
  "جوشاندن",
  "جوشیدن",
  "جَویدن",
  "جوییدن",
  "چاپیدن",
  "چرخییدن",
  "چسباندن",
  "چسبیدن",
  "چشیدن",
  "چیدن",
  "خاستن",
  "خشکاندن",
  "خراشیدن",
  "خریدن",
  "خواندن",
  "خوردن",
  "دادن",
  "دریدن",
  "دزدیدن",
  "دوختن",
  "دوشیدن",
  "راندن",
  "ربودن",
  "رساندن",
  "رسیدن",
  "ریختن",
  "زادن",
  "زدن",
  "زدودن",
  "ساختن",
  "سابیدن",
  "ساییدن",
  "ستاندن",
  "ستودن",
  "سرشتن",
  "سرودن",
  "سوختن",
  "سوزاندن",
  "انجام شدن",
  "شستن",
  "شکافتن",
  "شکاندن",
  "شکستن",
  "شکُفتن",
  "شمردن",
  "شناساندن",
  "شِنُفتن",
  "شنیدن",
  "طلبیدن",
  "فرساییدن",
  "فرستادن",
  "فرسودن",
  "فرمودن",
  "فروختن",
  "فریفتن",
  "فِشُردن",
  "کاستن",
  "کاشتن",
  "کُشتن",
  "کشیدن",
  "کَفتن",
  "کوبیدن",
  "گُداختن",
  "گذاشتن",
  "گرداندن",
  "گرفتن",
  "گزاردن",
  "گَزیدن",
  "گُستراندن",
  "گُستَردن",
  "گُسستن",
  "گُسیختن",
  "گشودن",
  "گفتن",
  "گُماشتن",
  "مالیدن",
  "نامیدن",
  "نگاشتن",
  "نواختن",
  "نَوردیدن",
  "نِوِشتن",
  "نوشیدن",
  "نهادن",
  "نهفتن",
  "واگذاشتن",
  "وانهادن",
  "افتادن",
  "ورانداختن",
  "ورزیدن",
  "ویرایش کردن",
  "یافتن",
  "ستاندن",
  "آراسته شد",
  "آزرده شدم",
  "آزموده شدم",
  "آشفته شدم",
  "آغشته شد",
  "آفریده شد",
  "آلوده شد",
  "آمد",
  "آمیخته شد",
  "آورده شد",
  "آویخته شد",
  "افتاده شده",
  "افراشته شد",
  "افروخته شد",
  "افزوده شد",
  "افشانده شد",
  "انباشته شد",
  "انداخته شد",
  "اندوخته شد",
  "برانگیخته شد",
  "بافته شد",
  "بخشوده شد",
  "بخشیده شد",
  "برده شد",
  "برگردانده شد",
  "برگزیده شده",
  "بسته شد",
  "بلعیده شد",
  "بوسیده شدم",
  "بوییده شد",
  "پاشیده شد",
  "پخته شد",
  "پذیرفته شدم",
  "پراکنده شد",
  "پرداخته شد",
  "پرستیده شد",
  "پرسیده شد",
  "پژمرده شد",
  "پسندیده شد",
  "پوشیده شد",
  "پیچیده شد",
  "پیوسته شده",
  "پیموده شد",
  "تافته شد",
  "تراشیده شد",
  "ترسانده شدم",
  "ترکیده شد",
  "تکانده شد",
  "تنیده شد",
  "جوشانده شد",
  "جوشیده شد",
  "جویده شد",
  "جوییده شده",
  "چاپیده شدم",
  "چرخیده شد",
  "چسبانده شد",
  "چسبیده شد",
  "چشیده شد",
  "چیده شد",
  "خاسته شد",
  "خشکیده شد",
  "خراشیده شد",
  "خریده شد",
  "خوانده شد",
  "خورده شد",
  "داده شد",
  "دریده شد",
  "دزدیده شد",
  "دوخته شد",
  "دوشیده شد",
  "رانده شد",
  "ربوده شد",
  "رسانده شد",
  "رسیده شد",
  "ریخته شد",
  "زاده شد",
  "زده شد",
  "زدوده شد",
  "ساخته شد",
  "سابیده شد",
  "ستانده شد",
  "ستوده شد",
  "سرشته شد",
  "سروده می‌شود",
  "سوخته شد",
  "سوزانده شد",
  "انجام شد",
  "شسته شد",
  "شکافته شد",
  "شکانده شد",
  "شکسته شد",
  "شکفته شد",
  "شمرده شد",
  "شناسانده شد",
  "شنفته شد",
  "شنیده شد",
  "طلبیده شدم",
  "فرساییده شد",
  "فرستاده شد",
  "فرسوده شد",
  "فرموده شد",
  "فروخته شد",
  "فریفته شد",
  "فشرده شد",
  "کاسته شد",
  "کاشته شد",
  "کشته شد",
  "کشیده شد",
  "گفته شد",
  "کوبیده شد",
  "گداخته شده",
  "گذاشته شد",
  "گردانده شد",
  "گرفته شد",
  "گزارده شد",
  "گزیده شد",
  "گسترانده شد",
  "گسترده شد",
  "گسسته شد",
  "گسیخته شد",
  "گشوده شد",
  "گفته شد",
  "گماشته شده",
  "مالیده شد",
  "نامیده شد",
  "نگاشته شد",
  "نواخته شد",
  "نوردیده شد",
  "نوشته شد",
  "نوشیده شد",
  "نهاده شد",
  "نهفته شده",
  "واگذاشته شد",
  "وانهاده شد",
  "افتاده شد",
  "ورانداخته شد",
  "ورزیده شد",
  "ویرایش شد",
  "یافته شد",
  "ستانده شد",
  "آراسته شدند",
  "آزرده شدی",
  "آزموده شدی",
  "آشفته شدی",
  "آغشته شده",
  "آفریده شدیم",
  "آلوده شدند",
  "آمدند",
  "آمیخته شدند",
  "آورده شدند",
  "آویخته شدند",
  "افتاده شده است",
  "افراشته شدند",
  "داشت افروخته می‌شد",
  "افزوده شدند",
  "افشانده شدند",
  "انباشته شدند",
  "انداخته شدند",
  "اندوخته شدند",
  "برانگیخته می‌شد",
  "بافته شدند",
  "بخشوده شدند",
  "بخشیده شدند",
  "برده شدند",
  "برگردانده شدند",
  "برگزیده شده است",
  "بسته شدند",
  "بلعیده شدند",
  "بوسیده شد",
  "بوییده شده",
  "پاشیده شده",
  "پخته شدند",
  "پذیرفته شد",
  "پراکنده شدند",
  "پرداخته شده",
  "پرستیده می‌شود",
  "پرسیده شدند",
  "پژمرده شدند",
  "پسندیده شدند",
  "پوشیده شدند",
  "پیچیده شده",
  "پیوسته شده است",
  "پیموده شده",
  "تافته شدند",
  "تراشیده شدند",
  "ترسانده شد",
  "ترکیده شده",
  "تکانده شدند",
  "تنیده شده",
  "داشت جوشانده می‌شد",
  "داشت جوشیده می‌شد",
  "جویده شده",
  "جوییده شده است",
  "چاپیده شدی",
  "چرخیده شدند",
  "چسبانده شدند",
  "چسبیده شدند",
  "چشیده شدند",
  "چیده شدند",
  "خاسته شدند",
  "خشکیده شدند",
  "خراشیده شدند",
  "خریده شدند",
  "خوانده شدند",
  "خورده شدند",
  "داده شدند",
  "دریده شدند",
  "دزدیده شدند",
  "دوخته شدند",
  "دوشیده شدند",
  "رانده شدند",
  "ربوده شدند",
  "رسانده شده",
  "رسیده شده",
  "داشت ریخته می‌شد",
  "زاده شده",
  "داشت زده می‌شد",
  "زدوده شده",
  "ساخته شدند",
  "سابیده شدند",
  "ستانده شده",
  "ستوده می‌شد",
  "سرشته شده",
  "سروده شوده",
  "داشت سوخته می‌شد",
  "سوزانده شدند",
  "انجام شدند",
  "شسته شدند",
  "شکافته شدند",
  "شکانده شدند",
  "شکسته شدند",
  "شکفته شدند",
  "شمرده شدند",
  "شناسانده شدند",
  "شنفته می‌شد",
  "شنیده می‌شد",
  "طلبیده شدی",
  "فرساییده شدند",
  "فرستاده شدند",
  "فرسوده شدند",
  "فرموده شده",
  "فروخته شدند",
  "داشت فریفته می شد",
  "فشرده شده",
  "کاسته می‌شد",
  "کاشته شده",
  "کشته شدند",
  "کشیده شدند",
  "گفته شده",
  "داشت کوبیده می‌شد",
  "گداخته شده است",
  "داشت گذاشته می‌شد",
  "گردانده شده",
  "داشت گرفته می‌شد",
  "گزارده شده",
  "گزیده شدم",
  "گسترانده شده",
  "گسترده شده",
  "گسسته شده",
  "گسیخته شده",
  "داشت گشوده می‌شد",
  "داشت گفته می‌شد",
  "گماشته شده است",
  "مالیده شده",
  "نامیده شده",
  "داشت نگاشته می‌شد",
  "نواخته می‌شد",
  "نوردیده شده",
  "نوشته شدند",
  "نوشیده شده",
  "نهاده شده",
  "نهفته شده است",
  "واگذاشته شده",
  "وانهاده شده",
  "افتاده شدند",
  "ورانداخته شده",
  "ورزیده شده",
  "ویرایش شدند",
  "یافته شدند",
  "ستانده شده",
  "آراسته شده",
  "آزرده شد",
  "آزموده شد",
  "آشفته شد",
  " آغشته شده است",
  "آفریده شدند",
  "داشت آلوده می‌شد",
  "داشت می‌آمد",
  "آمیخته می‌شد",
  "آورده می‌شد",
  "آویخته شده",
  "افتاده شده بود",
  "افراشته شده",
  "افروخته شده",
  "داشت افزوده می‌شد",
  "افشانده شده",
  "داشت انباشته می‌شد",
  "انداخته می‌شد",
  "اندوخته می‌شد",
  "برانگیخته شده",
  "داشت بافته می‌شد",
  "بخشوده شده",
  "بخشیده شده",
  "داشت برده می‌شد",
  "برگردانده شده",
  "برگزیده شده بود",
  "بسته می‌شد",
  "بلعیده شده",
  "بوییده شده است",
  "پاشیده شده است",
  "پخته می‌شد",
  "پذیرفته شدند",
  "پراکنده می‌شد",
  "پرداخته شده است",
  "پرستیده خواهد شد",
  "داشت پرسیده می‌شد",
  "پژمرده می‌شد",
  "پسندیده شده",
  "داشت پوشیده می‌شد",
  "پیچیده شده است",
  "پیموده شده است",
  "تافته شده",
  "داشت تراشیده می‌شد",
  "ترسانده شدند",
  "ترکیده شده است",
  "تکانده شده",
  "تنیده شده است",
  "جوشانده شده",
  "جوشیده شده",
  "جویده شده است",
  "چاپیده شد",
  "چرخیده شده",
  "داشت چسبانده می‌شد",
  "چسبیده شده",
  "چشیده شده",
  "داشت چیده می‌شد",
  "خاسته شده",
  "خشکیده شده",
  "خراشیده شده",
  "خریده شده",
  "داشت خوانده می‌شد",
  "خورده می‌شد",
  "داده شده",
  "دریده شده",
  "داشت دزدیده می‌شد",
  "داشت دوخته می‌شد",
  "داشت دوشیده می‌شد",
  "رانده شده",
  "ربوده شده",
  "رسانده شده است",
  "رسیده شده است",
  "ریخته شده",
  "زاده شده است",
  "زده شده",
  "زدوده شده است",
  "داشت ساخته می‌شد",
  "داشت سابیده می‌شد",
  "ستانده شده است",
  "ستوده شده",
  "سرشته شده است",
  "سروده شوده است",
  "داشتند سوخته می‌شدند",
  "داشت سوزانده می‌شد",
  "انجام می‌شد",
  "شسته می‌شد",
  "داشت شکافته می‌شد",
  "داشت شکانده می‌شد",
  "شکسته می‌شد",
  "شکفته می‌شد",
  "شمرده شده",
  "شناسانده شده",
  "داشت شنفته می‌شد",
  "داشت شنیده می‌شد",
  "طلبیده شد",
  "فرساییده شده",
  "فرستاده شده",
  "داشت فرسوده می‌شد",
  "فرموده شده است",
  "فروخته می‌شد",
  "فریفته شده",
  "فشرده شده است",
  "داشت کاسته می‌شد",
  "کاشته شده است",
  "کشته شده",
  "داشت کشیده می‌شد",
  "گفته شده است",
  "کوبیده می‌شود",
  "گداخته شد",
  "گذاشته شده",
  "گردانده شده است",
  "گرفته شده",
  "گزارده شده است",
  "گزیده شدی",
  "گسترانده شده است",
  "گسترده شده است",
  "گسسته شده است",
  "گسیخته شده است",
  "گشوده شده",
  "گفته شده",
  "گماشته خواهد شد",
  "مالیده شده است",
  "نامیده شده است",
  "نگاشته شده",
  "داشت نواخته می‌شد",
  "نوردیده شده است",
  "داشت نوشته می‌شد",
  "نوشیده شده است",
  "نهاده شده است",
  "نهفته شده بود",
  "واگذاشته شده است",
  "وانهاده شده است",
  "افتاده شده",
  "ورانداخته شده است",
  "ورزیده شده است",
  "ویرایش شده",
  "یافته شده",
  "ستانده شده",
  "آراسته شده است",
  "آزرده شدیم",
  "آزموده شدیم",
  "آشفته شدیم",
  "آغشته شده بود",
  "آفریده شده‌ام",
  "داشتند آلوده می‌شدند",
  "آمیخته می‌شدند",
  "آورده می‌شدند",
  "آویخته شده است",
  "افتاده شده بودند",
  "افراشته شده است",
  "افروخته شده است",
  "داشتند افزوده می‌شدند",
  "افشانده شده است",
  "داشتند انباشته می‌شدند",
  "انداخته می‌شدند",
  "اندوخته می‌شدند",
  "برانگیخته شده است",
  "داشتند بافته می‌شدند",
  "بخشوده شده است",
  "بخشیده شده است",
  "داشتند برده می‌شدند",
  "برگردانده شده است",
  "برگزیده خواهد شد",
  "بسته می‌شدند",
  "بلعیده شده است",
  "پاشیده شده بود",
  "پخته می‌شدند",
  "پذیرفته شده‌ام",
  "پراکنده می‌شدند",
  "پرداخته شده بود",
  "پرستیده بشود",
  "پرسیده شده",
  "پژمرده می‌شدند",
  "پسندیده شده است",
  "داشتند پوشیده می‌شدند",
  "پیچیده شده بود",
  "پیموده شده بود",
  "تافته شده است",
  "داشتند تراشیده می‌شدند",
  "ترسانده شده",
  "تکانده شده است",
  "تنیده شده بود",
  "جوشانده شده است",
  "جوشیده شده است",
  "جویده بشود",
  "چاپیده شدیم",
  "چرخیده شده است",
  "چسبانده شده",
  "چسبیده شده است",
  "چشیده شده است",
  "داشتند چیده می‌شدند",
  "خاسته شده است",
  "خشکیده شده است",
  "خراشیده شده است",
  "خریده شده است",
  "داشتند خوانده می‌شدند",
  "خورده می‌شدند",
  "داده شده است",
  "دریده شده است",
  "دزدیده شده",
  "داشتند دوخته می‌شدند",
  "داشتند دوشیده می‌شدند",
  "رانده شده است",
  "ربوده شده است",
  "رسانده شده بود",
  "رسیده شده بود",
  "ریخته شده است",
  "زاده شده بود",
  "زده شده است",
  "زدوده شده بود",
  "داشتند ساخته می‌شدند",
  "داشتند سابیده می‌شدند",
  "ستانده شده بود",
  "ستوده شده است",
  "سروده شوده بود",
  "سوخته شده",
  "داشتند سوزانده می‌شدند",
  "انجام می‌شدند",
  "شسته می‌شدند",
  "داشتند شکافته می‌شدند",
  "داشتند شکانده می‌شدند",
  "شکسته می‌شدند",
  "شکفته می‌شدند",
  "شمرده شده است",
  "شناسانده شده است",
  "شنفته شده",
  "شنیده شده",
  "طلبیده شدیم",
  "فرساییده شده است",
  "فرستاده شده است",
  "فرسوده شده",
  "فروخته می‌شدند",
  "فریفته شده است",
  "فشرده شده بود",
  "کاسته شده",
  "کاشته شده بود",
  "کشته شده است",
  "کشیده شده",
  "گفته شده بود",
  "گذاشته شده است",
  "گردانده بشود",
  "گرفته شده است",
  "گزارده شده باشد",
  "گزیده شد",
  "گسترانده شده بود",
  "گسترده شده بود",
  "گسسته شده بود",
  "گشوده شده است",
  "گفته شده است",
  "مالیده می‌شود",
  "نگاشته شده است",
  "نواخته شده",
  "دارد نوردیده می‌شود",
  "داشتند نوشته می‌شدند",
  "نوشیده شده بود",
  "افتاده شده است",
  "ورانداخته شده بود",
  "ویرایش شده است",
  "یافته شده است",
  "ستانده شده بود",
  "آراسته شده بود",
  "آزرده شدید",
  "آزموده شدید",
  "آشفته شدید",
  "آغشته شده بودند",
  "آفریده شده‌ای",
  "آلوده شده",
  "آمده است",
  "داشت آمیخته می‌شد",
  "داشت آورده می‌شد",
  "آویخته شده‌اند",
  "افتاده خواهد شد",
  "افراشته شده بود",
  "افروخته شده بود",
  "افزوده شده",
  "افشانده شده بود",
  "انباشته شده",
  "داشت انداخته می‌شد",
  "داشت اندوخته می‌شد",
  "برانگیخته شده بود",
  "بافته شده",
  "بخشوده شده‌اند",
  "بخشیده شده اند",
  "برده شده",
  "برگردانده شده‌اند",
  "داشت بسته می‌شد",
  "داشت پخته می‌شد",
  "پذیرفته شده",
  "داشت پراکنده می‌شد",
  "پرداخته شود",
  "پرسیده شده است",
  "داشت پژمرده می‌شد",
  "پسندیده شده بود",
  "پوشیده شده",
  "پیموده خواهد شد",
  "تافته شود",
  "تراشیده شده",
  "ترسانده شده است",
  "تکانده شده‌اند",
  "جوشانده شده بود",
  "جوشیده شده بود",
  "چاپیده شدید",
  "چرخیده شده بود",
  "چسبانده شده است",
  "چسبیده شده‌اند",
  "چشیده شده بود",
  "چیده شده",
  "خاسته شده بود",
  "خشکیده شده‌اند",
  "خراشیده شده بود",
  "خریده شده بودند",
  "خوانده شده",
  "داشت خورده می‌شد",
  "داده شده‌اند",
  "دزدیده شده است",
  "دوخته شده",
  "دوشیده شده",
  "رانده شده بود",
  "ربوده شده‌اند",
  "رسانده می‌شود",
  "رسیده خواهد شد",
  "ریخته شده بود",
  "زده شده بود",
  "زدوده خواهد شد",
  "ساخته شده",
  "سابیده شده",
  "ستانده شود",
  "ستوده می‌شود",
  "سوخته شده است",
  "سوزانده شده",
  "داشت انجام می‌شد",
  "داشت شسته می‌شد",
  "شکافته شده",
  "شکانده شده",
  "داشت شکسته می‌شد",
  "داشت شکفته می‌شد",
  "شمرده شده بود",
  "شناسانده خواهد شد",
  "شنفته شده است",
  "شنیده شده است",
  "طلبیده شدید",
  "فرساییده شده بود",
  "فرستاده شده بود",
  "فرسوده شده است",
  "داشت فروخته می‌شد",
  "دارد فشرده می‌شود",
  "کاسته شده است",
  "کاشته شود",
  "کشته شده‌اند",
  "کشیده شده است",
  "گفته بشود",
  "گذاشته شده بود",
  "گرفته شده بود",
  "گزیده شدیم",
  "گسسته خواهد شد",
  "گشوده شده بود",
  "گفته شده بود",
  "مالیده بشود",
  "نواخته شده است",
  "نوردیده بشود",
  "نوشته شده",
  "افتاده شده بود",
  "ورانداخته خواهد شد",
  "ویرایش شده‌اند",
  "یافته شده‌اند",
  "ستانده شود",
  "آراسته شود",
  "آزرده شدند",
  "آزموده شدند",
  "آشفته شدند",
  "آفریده شده",
  "آلوده شده است",
  "آمده‌اند",
  "داشتند آمیخته می‌شدند",
  "داشتند آورده می‌شدند",
  "آویخته شده بود",
  "افتاده خواهند شد",
  "افراشته بشود",
  "افروخته می‌شود",
  "افزوده شده است",
  "افشانده شده بودند",
  "انباشته شده است",
  "داشتند انداخته می‌شدند",
  "اندوخته شده",
  "برانگیخته شود",
  "بافته شده است",
  "بخشوده شود",
  "بخشیده شود",
  "برده شده است",
  "برگردانده شده بود",
  "داشتند بسته می‌شدند",
  "پخته شده",
  "پذیرفته شده است",
  "داشتند پراکنده می‌شدند",
  "پرداخته خواهد شد",
  "پرسیده شده‌اند",
  "داشتند پژمرده می‌شدند",
  "پسندیده شود",
  "پوشیده شده است",
  "پیموده بشود",
  "تافته بشود",
  "تراشیده شده است",
  "ترسانده شده‌اند",
  "دارد جوشانده می‌شود",
  "جوشیده شود",
  "چاپیده شدند",
  "چرخیده شده بودند",
  "چسبانده شده بود",
  "چسبیده شده بود",
  "چشیده شود",
  "چیده شده است",
  "خشکیده خواهد شد",
  "خراشیده شده بودند",
  "خریده خواهد شد",
  "خوانده شده است",
  "داشتند خورده می‌شدند",
  "داده شده بود",
  "دزدیده شده‌اند",
  "دوخته شده است",
  "دوشیده شده است",
  "رانده شده باشد",
  "ربوده شده بود",
  "رسانده خواهد شد",
  "رسیده شده باشد",
  "دارد ریخته می‌شود",
  "دارد زده می‌شود",
  "ساخته شده است",
  " سابیده شده است",
  "ستانده خواهد شد",
  "ستوده می‌شوند",
  "سوخته شده‌اند",
  "سوزانده شده است",
  "داشتند انجام می‌شدند",
  "داشتند شسته می‌شدند",
  "شکافته شده است",
  "شکانده شده است",
  "داشتند شکسته می‌شدند",
  "داشتند شکفته می‌شدند",
  "شمرده شده بودند",
  "شناسانده خواهند شد",
  "شنفته می‌شود",
  "شنیده شده بود",
  "طلبیده شدند",
  "فرساییده خواهد شد",
  "فرستاده خواهد شد",
  "فرسوده شده بود",
  "داشتند فروخته می‌شدند",
  "فشرده خواهد شد",
  "کاسته شده بود",
  "کاشته خواهد شد",
  "کشته شده بود",
  "کشیده شده بود",
  "گرفته می‌شود",
  "گزیده شدید",
  "گشوده شده بودند",
  "گفته شده باشد",
  "نواخته شده بود",
  "نوشته شده است",
  "افتاده شده بودند",
  "ورانداخته خواهند شد",
  "ویرایش شده بود",
  "یافته شده بود",
  "ستانده خواهد شد"
];
Object.defineProperty(VA, "__esModule", {
  value: !0
});
VA.default = p5a;
var l5a = ee, d5a = u5a(Xy);
function u5a(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  areWordsInSentence: c5a
} = l5a.languageProcessing;
function p5a(e) {
  return c5a(d5a.default, e);
}
Object.defineProperty(UA, "__esModule", {
  value: !0
});
var nq = UA.default = void 0, g5a = ee, m5a = po(fd), f5a = po(Ar), h5a = po(Ky), y5a = po(Yy), z5a = po(Qy), b5a = po(HA), w5a = po(GA), v5a = po(VA);
function po(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: k5a
} = g5a.languageProcessing;
let _5a = class extends k5a {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      passiveConstructionType: "morphological",
      language: "fa",
      functionWords: m5a.default,
      transitionWords: f5a.default,
      twoPartTransitionWords: h5a.default,
      sentenceLength: y5a.default,
      firstWordExceptions: z5a.default
    }), Object.assign(this.helpers, {
      createBasicWordForms: b5a.default,
      getStemmer: w5a.default,
      isPassiveSentence: v5a.default
    });
  }
};
nq = UA.default = _5a;
var KA = {}, Zy = {};
Object.defineProperty(Zy, "__esModule", {
  value: !0
});
Zy.default = void 0;
Zy.default = [
  // Definite articles:
  "le",
  "la",
  "les",
  // Indefinite articles:
  "un",
  "une",
  // Numbers 2-10 ('une' is already included in the indefinite articles):
  "deux",
  "trois",
  "quatre",
  "cinq",
  "six",
  "sept",
  "huit",
  "neuf",
  "dix",
  // Demonstrative pronouns:
  "celui",
  "celle",
  "ceux",
  "celles",
  "celui-ci",
  "celle-là",
  "celui-là",
  "celle-ci"
];
var nt = {}, Tr = {};
Object.defineProperty(Tr, "__esModule", {
  value: !0
});
Tr.singleWords = Tr.multipleWords = Tr.default = Tr.allWords = void 0;
const E5a = Tr.singleWords = ["ainsi", "alors", "aussi", "car", "cependant", "certainement", "certes", "conséquemment", "d'abord", "d'ailleurs", "d'après", "davantage", "désormais", "deuxièmement", "donc", "dorénavant", "effectivement", "également", "enfin", "ensuite", "entre-temps", "essentiellement", "excepté", "finalement", "globalement", "jusqu'ici", "là-dessus", "lorsque", "mais", "malgré", "néanmoins", "notamment", "partant", "plutôt", "pourtant", "précédemment", "premièrement", "probablement", "puis", "puisque", "quoique", "sauf", "selon", "semblablement", "sinon", "suivant", "toutefois", "troisièmement"], A5a = Tr.multipleWords = ["à cause de", "à ce jour", "à ce propos", "à ce sujet", "à cet égard", "à cette fin", "à compter de", "à condition que", "à défaut de", "à force de", "à juste titre", "à la lumière de", "à la suite de", "à l'aide de", "à l'appui de", "à l'encontre de", "à l'époque actuelle", "à l'exception de", "à l'exclusion de", "à l'heure actuelle", "à l'image de", "à l'instar de", "à l'inverse", "à l'inverse de", "à l'opposé", "à la condition que", "à mesure que", "à moins que", "à nouveau", "à partir de", "à première vue", "à savoir", "à seule fin que", "à supposer que", "à tel point que", "à tout prendre", "à vrai dire", "afin de", "afin d'attirer l'attention sur", "afin que", "ainsi donc", "ainsi que", "alors que", "antérieurement", "après cela", "après quoi", "après que", "à propos de", "en l'occurence", "après réflexion", "après tout", "attendu que", "au cas où", "au contraire", "au fond", "au fur et à mesure", "au lieu de", "au même temps", "au moment où", "au moyen de", "au point que", "au risque de", "au surplus", "au total", "aussi bien que", "aussitôt que", "autant que", "autrement dit", "avant que", "avant tout", "ayant fini", "bien que", "c'est à dire que", "c'est ainsi que", "c'est dans ce but que", "c'est dire", "c'est le cas de", "c'est la raison pour laquelle", "c'est pourquoi", "c'est qu'en effet", "c'est-à-dire", "ça confirme que", "ça montre que", "ça prouve que", "cela étant", "cela dit", "cependant que", "compte tenu", "comme l'illustre", "comme le souligne", "comme on pouvait s'y attendre", "comme quoi", "comme si", "commençons par examiner", "comparativement à", "conformément à", "contrairement à", "considérons par exemple", "d'autant plus", "d'autant que", "d'autre part", "d'ici là", "d'où", "d'un autre côté", "d'un côté", "d'une façon générale", "dans ce cas", "dans ces conditions", "dans cet esprit", "dans l'ensemble", "dans l'état actuel des choses", "dans l'éventualité où", "dans l'hypothèse où", "dans la mesure où", "dans le but de", "dans le cadre de", "dans le cas où", "dans les circonstances actuelles", "dans les grandes lignes", "dans un autre ordre d'idée", "dans un délai de", "de ce fait", "de cette façon", "de crainte que", "de façon à", "de façon à ce que", "de façon que", "de fait", "de l'autre côté", "de la même manière", "de la même façon que", "de manière que", "de même", "de même qu'à", "de même que", "de nos jours", "de peur que", "de prime abord", "de sorte que", "de surcroît", "de telle manière que", "de telle sorte que", "de toute évidence", "de toute façon", "de toute manière", "depuis que", "dès lors que", "dès maintenant", "dès qua", "dès que", "du fait que", "du moins", "du moment que", "du point de vue de", "du reste", "d'ici là", "d'ores et déjà", "en admettant que", "en attendant que", "en bref", "en cas de", "en cas que", "en ce cas", "en ce domaine", "en ce moment", "en ce qui a trait à", "en ce qui concerne", "en ce sens", "en cela", "en comparaison de", "en conclusion", "en conformité avec", "en conséquence", "en d'autres termes", "en définitive", "en dépit de", "pour cela", "en dernier lieu", "en deuxième lieu", "en effet", "en face de", "en fait", "en fin de compte", "en général", "en guise de conclusion", "en matière de", "en même temps que", "en outre", "en particulier", "en plus", "en premier lieu", "en principe", "en raison de", "en réalité", "en règle générale", "en résumé", "en revanche", "en second lieu", "en somme", "en sorte que", "en supposant que", "en tant que", "en terminant", "en théorie", "en tout cas", "en tout premier lieu", "en troisième lieu", "en un mot", "en vérité", "en vue que", "encore que", "encore une fois", "entre autres", "et même", "et puis", "étant donné qu'à", "étant donné que", "face à", "grâce à", "il est à noter que", "il est indéniable que", "il est question de", "il est vrai que", "il faut dire aussi que", "il faut reconnaître que", "il faut souligner que", "il ne faut pas oublier que", "il s'ensuit que", "il suffit de prendre pour exemple", "jusqu'ici", "il y a aussi", "jusqu'à ce que", "jusqu'à ce jour", "jusqu'à maintenant", "jusqu'à présent", "jusqu'au moment où", "jusqu'ici", "l'aspect le plus important de", "l'exemple le plus significatif", "jusqu'au moment où", "la preuve c'est que", "loin que", "mais en réalité", "malgré cela", "malgré tout", "même si", "mentionnons que", "mis à part le fait que", "notons que", "nul doute que", "ou bien", "outre cela", "où que", "par ailleurs", "par conséquent", "par contre", "par exception", "par exemple", "par la suite", "par l'entremise de", "par l'intermédiaire de", "par rapport à", "par suite", "par suite de", "par surcroît", "parce que", "pareillement", "partant de ce fait", "pas du tout", "pendant que", "plus précisément", "plus tard", "pour ainsi dire", "pour autant que", "pour ce qui est de", "pour ces motifs", "pour ces raisons", "pour cette raison", "pour commencer", "pour conclure", "pour le moment", "pour marquer la causalité", "pour l'instant", "pour peu que", "pour prendre un autre exemple", "pour que", "pour résumé", "pour terminer", "pour tout dire", "pour toutes ces raisons", "pourvu que", "prenons le cas de", "quand bien même que", "quand même", "quant à", "quel que soit", "qui plus est", "surtout quand", "qui que", "quitte à", "quoi qu'il en soit", "quoi que", "quoiqu'il en soit", "sans délai", "sans doute", "sans parler de", "sans préjuger", "sans tarder", "sauf si", "selon que", "si bien que", "si ce n'est que", "si l'on songe que", "sitôt que", "somme toute", "sur ce point", "surtout si", "sous cette réserve", "sous prétexte que", "sous réserve de", "sous réserve que", "suivant que", "supposé que", "sur le plan de", "tandis que", "tant et si bien que", "tant que", "tel que", "tellement que", "touchant à", "tout à fait", "tout bien pesé", "tout compte fait", "tout d'abord", "tout de même", "tout en reconnaissant que", "une fois de plus", "vu que"], T5a = Tr.allWords = E5a.concat(A5a);
Tr.default = T5a;
Object.defineProperty(nt, "__esModule", {
  value: !0
});
nt.filteredAtEnding = nt.filteredAtBeginningAndEnding = nt.filteredAtBeginning = nt.filteredAnywhere = nt.default = nt.cannotDirectlyPrecedePassiveParticiple = nt.cannotBeBetweenPassiveAuxiliaryAndParticiple = nt.all = void 0;
var rq = Tr, kp = $5a(Ba);
function $5a(e) {
  return e && e.__esModule ? e : { default: e };
}
const YA = ["le", "la", "les", "un", "une", "des", "aux", "du", "au", "d'un", "d'une", "l'un", "l'une"], QA = ["deux", "trois", "quatre", "cinq", "six", "sept", "huit", "neuf", "dix", "onze", "douze", "treize", "quatorze", "quinze", "seize", "dix-sept", "dix-huit", "dix-neuf", "vingt", "trente", "quarante", "cinquante", "soixante", "soixante-dix", "quatre-vingt", "quatre-vingt-dix", "septante", "huitante", "octante", "nonante", "cent", "mille", "million", "milliard"], XA = ["second", "secondes", "deuxième", "deuxièmes", "troisième", "troisièmes", "quatrième", "quatrièmes", "cinquième", "cinquièmes", "sixième", "sixièmes", "septième", "septièmes", "huitième", "huitièmes", "neuvième", "neuvièmes", "dixième", "dixièmes", "onzième", "onzièmes", "douzième", "douzièmes", "treizième", "treizièmes", "quatorzième", "quatorzièmes", "quinzième", "quinzièmes", "seizième", "seizièmes", "dix-septième", "dix-septièmes", "dix-huitième", "dix-huitièmes", "dix-neuvième", "dix-neuvièmes", "vingtième", "vingtièmes"], sq = ["je", "tu", "il", "elle", "on", "nous", "vous", "ils", "elles", "qu'il", "qu'elle", "qu'ils", "qu'elles", "qu'on", "d'elle", "d'elles"], ZA = ["moi", "toi", "lui", "soi", "eux", "d'eux", "qu'eux"], JA = ["me", "te"], iq = ["celui", "celle", "ceux", "celles", "ce", "celui-ci", "celui-là", "celle-ci", "celle-là", "ceux-ci", "ceux-là", "celles-ci", "celles-là", "ceci", "cela", "ça", "cette", "cet", "ces"], eT = ["mon", "ton", "son", "ma", "ta", "sa", "mes", "tes", "ses", "notre", "votre", "leur", "nos", "vos", "leurs"], oq = ["beaucoup", "peu", "quelque", "quelques", "tous", "tout", "toute", "toutes", "plusieurs", "plein", "chaque", "suffisant", "suffisante", "suffisantes", "suffisants", "faible", "moins", "tant", "plus", "divers", "diverse", "diverses"], aT = ["se"], tT = ["aucun", "aucune", "autre", "autres", "d'autres", "certain", "certaine", "certaines", "certains", "chacun", "chacune", "même", "mêmes", "quelqu'un", "quelqu'une", "quelques'uns", "quelques'unes", "autrui", "nul", "personne", "quiconque", "rien", "d'aucunes", "d'aucuns", "nuls", "nules", "l'autre", "tel", "telle", "tels", "telles"], lq = ["qui", "que", "lequel", "laquelle", "auquel", "auxquels", "auxquelles", "duquel", "desquels", "desquelles", "dont", "où", "quoi"], dq = ["combien", "comment", "pourquoi", "d'où"], nT = ["quel", "quels", "quelle"], uq = ["y", "n'y"], cq = ["là", "ici", "d'ici", "voici"], rT = ["a", "a-t-elle", "a-t-il", "a-t-on", "ai", "ai-je", "aie", "as", "as-tu", "aura", "aurai", "auraient", "aurais", "aurait", "auras", "aurez", "auriez", "aurons", "auront", "avaient", "avais", "avait", "avez", "avez-vous", "aviez", "avions", "avons", "avons-nous", "ayez", "ayons", "eu", "eûmes", "eurent", "eus", "eut", "eûtes", "j'ai", "j'aurai", "j'avais", "j'eus", "ont", "ont-elles", "ont-ils", "vais", "vas", "va", "allons", "allez", "vont", "vais-je", "vas-tu", "va-t-il", "va-t-elle", "va-t-on", "allons-nous", "allez-vous", "vont-elles", "vont-ils", "allé", "allés", "j'allai", "allai", "allas", "alla", "allâmes", "allâtes", "allèrent", "j'allais", "allais", "allait", "allions", "alliez", "allaient", "j'irai", "iras", "ira", "irons", "irez", "iront", "j'aille", "aille", "ailles", "aillent", "j'allasse", "allasse", "allasses", "allât", "allassions", "allassiez", "allassent", "j'irais", "irais", "irait", "irions", "iriez", "iraient", "allant", "viens", "vient", "venons", "venez", "viennent", "viens-je", "viens-de", "vient-il", "vient-elle", "vient-on", "venons-nous", "venez-vous", "viennent-elles", "viennent-ils", "vins", "vint", "vînmes", "vîntes", "vinrent", "venu", "venus", "venais", "venait", "venions", "veniez", "venaient", "viendrai", "viendras", "viendra", "viendrons", "viendrez", "viendront", "vienne", "viennes", "vinsse", "vinsses", "vînt", "vinssions", "vinssiez", "vinssent", "viendrais", "viendrait", "viendrions", "viendriez", "viendraient", "venant", "dois", "doit", "devons", "devez", "doivent", "dois-je", "dois-tu", "doit-il", "doit-elle", "doit-on", "devons-nous", "devez-vous", "doivent-elles", "doivent-ils", "dus", "dut", "dûmes", "dûtes", "durent", "dû", "devais", "devait", "devions", "deviez", "devaient", "devrai", "devras", "devra", "devrons", "devrez", "devront", "doive", "doives", "dusse", "dusses", "dût", "dussions", "dussiez", "dussent", "devrais", "devrait", "devrions", "devriez", "devraient", "peux", "peut", "pouvons", "pouvez", "peuvent", "peux-je", "peux-tu", "peut-il", "peut-elle", "peut-on", "pouvons-nous", "pouvez-vous", "peuvent-ils", "peuvent-elles", "pus", "put", "pûmes", "pûtes", "purent", "pu", "pouvais", "pouvait", "pouvions", "pouviez", "pouvaient", "pourrai", "pourras", "pourra", "pourrons", "pourrez", "pourront", "puisse", "puisses", "puissions", "puissiez", "puissent", "pusse", "pusses", "pût", "pussions", "pussiez", "pussent", "pourrais", "pourrait", "pourrions", "pourriez", "pourraient", "pouvant", "semble", "sembles", "semblons", "semblez", "semblent", "semble-je", "sembles-il", "sembles-elle", "sembles-on", "semblons-nous", "semblez-vous", "semblent-ils", "semblent-elles", "semblai", "semblas", "sembla", "semblâmes", "semblâtes", "semblèrent", "semblais", "semblait", "semblions", "sembliez", "semblaient", "semblerai", "sembleras", "semblera", "semblerons", "semblerez", "sembleront", "semblé", "semblasse", "semblasses", "semblât", "semblassions", "semblassiez", "semblassent", "semblerais", "semblerait", "semblerions", "sembleriez", "sembleraient", "parais", "paraît", "ait", "paraissons", "paraissez", "paraissent", "parais-je", "parais-tu", "paraît-il", "paraît-elle", "paraît-on", "ait-il", "ait-elle", "ait-on", "paraissons-nous", "paraissez-vous", "paraissent-ils", "paraissent-elles", "parus", "parut", "parûmes", "parûtes", "parurent", "paraissais", "paraissait", "paraissions", "paraissiez", "paraissaient", "paraîtrai", "paraîtras", "paraîtra", "paraîtrons", "paraîtrez", "paraîtront", "paru", "paraisse", "paraisses", "parusse", "parusses", "parût", "parussions", "parussiez", "parussent", "paraîtrais", "paraîtrait", "paraîtrions", "paraîtriez", "paraîtraient", "paraitrais", "paraitrait", "paraitrions", "paraitriez", "paraitraient", "paraissant", "mets", "met", "mettons", "mettez", "mettent", "mets-je", "mets-tu", "met-il", "met-elle", "met-on", "mettons-nous", "mettez-vous", "mettent-ils", "mettent-elles", "mis", "mit", "mîmes", "mîtes", "mirent", "mettais", "mettait", "mettions", "mettiez", "mettaient", "mettrai", "mettras", "mettra", "mettrons", "mettrez", "mettront", "mette", "mettes", "misse", "misses", "mît", "missions", "missiez", "missent", "mettrais", "mettrait", "mettrions", "mettriez", "mettraient", "mettant", "finis", "finit", "finissons", "finissez", "finissent", "finis-je", "finis-tu", "finit-il", "finit-elle", "finit-on", "finissons-nous", "finissez-vous", "finissent-ils", "finissent-elles", "finîmes", "finîtes", "finirent", "finissais", "finissait", "finissions", "finissiez", "finissaient", "finirai", "finiras", "finira", "finirons", "finirez", "finiront", "fini", "finisse", "finisses", "finît", "finirais", "finirait", "finirions", "finiriez", "finiraient", "finissant", "n'a", "n'ai", "n'aie", "n'as", "n'aura", "n'aurai", "n'auraient", "n'aurais", "n'aurait", "n'auras", "n'aurez", "n'auriez", "n'aurons", "n'auront", "n'avaient", "n'avais", "n'avait", "n'avez", "n'avez-vous", "n'aviez", "n'avions", "n'avons", "n'avons-nous", "n'ayez", "n'ayons", "n'ont", "n'ont-elles", "n'ont-ils", "n'allons", "n'allez", "n'allais", "n'allait", "n'allions", "n'alliez", "n'allaient", "n'iras", "n'ira", "n'irons", "n'irez", "n'iront", "qu'a"], sT = ["avoir", "aller", "venir", "devoir", "pouvoir", "sembler", "paraître", "paraitre", "mettre", "finir", "d'avoir", "d'aller", "n'avoir", "l'avoir"], pq = ["suis", "es", "est", "est-ce", "n'est", "sommes", "êtes", "sont", "suis-je", "es-tu", "est-il", "est-elle", "est-on", "sommes-nous", "êtes-vous", "sont-ils", "sont-elles", "étais", "était", "étions", "étiez", "étaient", "serai", "seras", "sera", "serons", "serez", "seront", "serais", "serait", "serions", "seriez", "seraient", "sois", "soit", "soyons", "soyez", "soient", "été", "n'es", "n'est-ce", "n'êtes", "n'était", "n'étais", "n'étions", "n'étiez", "n'étaient", "qu'est"], gq = ["être", "d'être"], iT = ["à", "après", "d'après", "au-delà", "au-dessous", "au-dessus", "avant", "avec", "concernant", "chez", "contre", "dans", "de", "depuis", "derrière", "dès", "devant", "durant", "en", "entre", "envers", "environ", "hormis", "hors", "jusque", "jusqu'à", "jusqu'au", "jusqu'aux", "loin", "moyennant", "outre", "par", "parmi", "pendant", "pour", "près", "quant", "sans", "sous", "sur", "travers", "vers", "voilà"], mq = ["et", "ni", "or", "ou"], fq = ["non", "pas", "seulement", "sitôt", "aussitôt", "d'autre"], hq = ["afin", "autant", "comme", "d'autant", "d'ici", "quand", "lors", "parce", "si", "tandis"], oT = ["dit", "disent", "dit-il", "dit-elle", "disent-ils", "disent-elles", "disait", "disait-il", "disait-elle", "disaient-ils", "disaient-elles", "dirent", "demande", "demandent", "demande-t-il", "demande-t-elle", "demandent-ils", "demandent-elles", "demandait", "demandaient", "demandait-il", "demandait-elle", "demandaient-ils", "demandaient-elles", "demanda", "demanda-t-il", "demanda-t-elle", "demandé", "pense", "pensent", "pense-t-il", "pense-t-elle", "pensent-ils", "pensent-elles", "pensait", "pensaient", "pensait-il", "pensait-elle", "pensaient-ils", "pensaient-elles", "pensa", "pensa-t-il", "pensa-t-elle", "pensé", "affirme", "affirme-t-il", "affirme-t-elle", "affirmé", "avoue", "avoue-t-il", "avoue-t-elle", "avoué", "concède", "concède-t-il", "concède-t-elle", "concédé", "confie", "confie-t-il", "confie-t-elle", "confié", "continue", "continue-t-il", "continue-t-elle", "continué", "déclame", "déclame-t-il", "déclame-t-elle", "déclamé", "déclare", "déclare-t-il", "déclare-t-elle", "déclaré", "déplore", "déplore-t-il", "déplore-t-elle", "déploré", "explique", "explique-t-il", "explique-t-elle", "expliqué", "lance", "lance-t-il", "lance-t-elle", "lancé", "narre", "narre-t-il", "narre-t-elle", "narré", "raconte", "raconte-t-il", "raconte-t-elle", "raconté", "rappelle", "rappelle-t-il", "rappelle-t-elle", "rappelé", "réagit", "réagit-il", "réagit-elle", "réagi", "répond", "répond-il", "répond-elle", "répondu", "rétorque", "rétorque-t-il", "rétorque-t-elle", "rétorqué", "souligne", "souligne-t-il", "souligne-t-elle", "souligné", "affirme-t-il", "affirme-t-elle", "ajoute-t-il", "ajoute-t-elle", "analyse-t-il", "analyse-t-elle", "avance-t-il", "avance-t-elle", "écrit-il", "écrit-elle", "indique-t-il", "indique-t-elle", "poursuit-il", "poursuit-elle", "précise-t-il", "précise-t-elle", "résume-t-il", "résume-t-elle", "souvient-il", "souvient-elle", "témoigne-t-il", "témoigne-t-elle"], yq = ["dire", "penser", "demander", "concéder", "continuer", "confier", "déclamer", "déclarer", "déplorer", "expliquer", "lancer", "narrer", "raconter", "rappeler", "réagir", "répondre", "rétorquer", "souligner", "affirmer", "ajouter", "analyser", "avancer", "écrire", "indiquer", "poursuivre", "préciser", "résumer", "témoigner"], j5a = ["encore", "éternellement", "immédiatement", "compris", "comprenant", "inclus", "naturellement", "particulièrement", "notablement", "actuellement", "maintenant", "ordinairement", "généralement", "habituellement", "d'habitude", "vraiment", "finalement", "uniquement", "peut-être", "initialement", "déjà", "c.-à-d", "souvent", "fréquemment", "régulièrement", "simplement", "éventuellement", "quelquefois", "parfois", "probable", "plausible", "jamais", "toujours", "incidemment", "accidentellement", "récemment", "dernièrement", "relativement", "clairement", "évidemment", "apparemment", "pourvu"], zq = ["assez", "trop", "tellement", "presque", "très", "absolument", "extrêmement", "quasi", "quasiment", "fort"], lT = ["fais", "fait", "faisons", "faites", "font", "fais-je", "fait-il", "fait-elle", "fait-on", "faisons-nous", "faites-vous", "font-ils", "font-elles", "fis", "fit", "fîmes", "fîtes", "firent", "faisais", "faisait", "faisions", "faisiez", "faisaient", "ferai", "feras", "fera", "ferons", "ferez", "feront", "veux", "veut", "voulons", "voulez", "veulent", "voulus", "voulut", "voulûmes", "voulûtes", "voulurent", "voulais", "voulait", "voulions", "vouliez", "voulaient", "voudrai", "voudras", "voudra", "voudrons", "voudrez", "voudront", "voulu", "veux-je", "veux-tu", "veut-il", "veut-elle", "veut-on", "voulons-nous", "voulez-vous", "veulent-ils", "veulent-elles", "voudrais", "voudrait", "voudrions", "voudriez", "voudraient", "voulant"], dT = ["faire", "vouloir"], bq = ["antérieur", "antérieures", "antérieurs", "antérieure", "précédent", "précédents", "précédente", "précédentes", "facile", "faciles", "simple", "simples", "vite", "vites", "vitesse", "vitesses", "difficile", "difficiles", "propre", "propres", "long", "longe", "longs", "longes", "longue", "longues", "bas", "basse", "basses", "ordinaire", "ordinaires", "bref", "brefs", "brève", "brèves", "sûr", "sûrs", "sûre", "sûres", "sure", "sures", "surs", "habituel", "habituels", "habituelle", "habituelles", "soi-disant", "surtout", "récent", "récents", "récente", "récentes", "total", "totaux", "totale", "totales", "complet", "complets", "complète", "complètes", "possible", "possibles", "communément", "constamment", "facilement", "continuellement", "directement", "légèrement", "dernier", "derniers", "dernière", "dernières", "différent", "différents", "différente", "différentes", "similaire", "similaires", "pareil", "pareils", "pareille", "pareilles", "largement", "mal", "super", "bien", "pire", "pires", "suivants", "suivante", "suivantes", "prochain", "prochaine", "prochains", "prochaines", "proche", "proches", "fur"], wq = ["nouveau", "nouvel", "nouvelle", "nouveaux", "nouvelles", "vieux", "vieil", "vieille", "vieilles", "beau", "bel", "belle", "belles", "bon", "bons", "bonne", "bonnes", "grand", "grande", "grands", "grandes", "haut", "hauts", "haute", "hautes", "petit", "petite", "petits", "petites", "meilleur", "meilleurs", "meilleure", "meilleures", "joli", "jolis", "jolie", "jolies", "gros", "grosse", "grosses", "mauvais", "mauvaise", "mauvaises", "dernier", "derniers", "dernière", "dernières"], vq = ["ah", "ha", "oh", "ho", "bis", "plouf", "vlan", "ciel", "pouf", "paf", "crac", "hurrah", "allo", "stop", "bravo", "ô", "eh", "hé", "aïe", "oef", "ahi", "fi", "zest", "hem", "holà", "chut"], kq = ["mg", "g", "kg", "ml", "dl", "cl", "l", "grammes", "gram", "once", "onces", "oz", "lbs", "càc", "cc", "càd", "càs", "càt", "cd", "cs", "ct"], _q = ["minute", "minutes", "heure", "heures", "journée", "journées", "semaine", "semaines", "mois", "année", "années", "aujourd'hui", "demain", "hier", "après-demain", "avant-hier"], Eq = ["chose", "choses", "façon", "façons", "pièce", "pièces", "truc", "trucs", "fois", "cas", "aspect", "aspects", "objet", "objets", "idée", "idées", "thème", "thèmes", "sujet", "sujets", "personnes", "manière", "manières", "sorte", "sortes"], Aq = ["ne", "oui", "d'accord", "amen", "euro", "euros", "etc"], x5a = ["mme", "mmes", "mlle", "mlles", "mm", "dr", "pr"], S5a = ["jr", "sr"], O5a = nt.filteredAtEnding = (0, kp.default)([].concat(XA, sT, dT, gq, yq, wq)), I5a = nt.filteredAtBeginning = (0, kp.default)(bq), C5a = nt.filteredAtBeginningAndEnding = (0, kp.default)([].concat(YA, iT, mq, iq, zq, oq, eT)), P5a = nt.filteredAnywhere = (0, kp.default)([].concat(rq.singleWords, sq, JA, ZA, aT, vq, QA, pq, oT, rT, lT, tT, fq, hq, nT, lq, cq, Aq, uq, kq, _q, Eq)), R5a = nt.cannotDirectlyPrecedePassiveParticiple = [].concat(YA, iT, ZA, JA, eT, aT, tT, dq, nT, QA, XA, lT, oT, dT), D5a = nt.cannotBeBetweenPassiveAuxiliaryAndParticiple = [].concat(rT, sT), N5a = nt.all = (0, kp.default)([].concat(YA, QA, XA, iq, eT, aT, sq, JA, lq, oq, tT, dq, uq, cq, rT, sT, nT, pq, gq, iT, mq, fq, hq, oT, yq, rq.singleWords, j5a, zq, lT, dT, vq, bq, wq, kq, Eq, Aq, _q, x5a, S5a, ZA));
nt.default = {
  filteredAtEnding: O5a,
  filteredAtBeginning: I5a,
  filteredAtBeginningAndEnding: C5a,
  filteredAnywhere: P5a,
  cannotBeBetweenPassiveAuxiliaryAndParticiple: D5a,
  cannotDirectlyPrecedePassiveParticiple: R5a,
  all: N5a
};
var _p = {};
Object.defineProperty(_p, "__esModule", {
  value: !0
});
_p.default = void 0;
_p.default = ["et", "ou", "car", "or", "puisque", "puisqu'il", "puisqu'ils", "puisqu'elle", "puisqu'elles", "puisqu'un", "puisqu'une", "puisqu'on", "quand", "lorsque", "lorsqu'il", "lorsqu'elle", "lorsqu'ils", "lorsqu'elles", "lorsqu'on", "lorsqu'un", "lorsqu'une", "quoique", "quoiqu'il", "quoiqu'ils", "quoiqu'elle", "quoiqu'elles", "quoiqu'on", "quoiqu'un", "quoiqu'une", "qu'elle", "qu'il", "qu'ils", "qu'elles", "qu'on", "qu'un", "qu'une", "si", "s'ils", "s'il", "quand bien même", "pourquoi", "après", "avant", "afin de", "compte tenu de", "pour ne pas dire", "sinon", "une fois", "sitôt", "dont", "lequel", "laquelle", "lesquels", "lesquelles", "auquel", "auxquels", "auxquelles", "duquel", "desquels", "desquelles", "qui", "où", "d'où", ":", "allé", "entré", "resté", "retombé", "apparu", "réapparu", "devenu", "redevenu", "intervenu", "provenu", "resurvenu", "survenu", "allés", "entrés", "restés", "retombés", "apparus", "réapparus", "devenus", "redevenus", "intervenus", "provenus", "resurvenus", "survenus", "allée", "entrée", "restée", "retombée", "apparue", "réapparue", "devenue", "redevenue", "intervenue", "provenue", "resurvenue", "survenue", "allées", "entrées", "restées", "retombées", "apparues", "réapparues", "devenues", "redevenues", "intervenues", "provenues", "resurvenues", "survenues"];
var Jy = {};
Object.defineProperty(Jy, "__esModule", {
  value: !0
});
Jy.default = void 0;
Jy.default = [["à première vue", "mais à bien considérer les choses"], ["à première vue", "mais toute réflexion faite"], ["aussi", "que"], ["autant de", "que"], ["certes", "mais"], ["d'un côté", "de l'autre côté"], ["d'un côté", "de l'autre"], ["d'un côté", "d'un autre côté"], ["d'une part", "d'autre part"], ["d'une parte", "de l'autre parte"], ["moins de", "que"], ["non seulement", "mais aussi"], ["non seulement", "mais en outre"], ["non seulement", "mais encore"], ["plus de", "que"], ["quelque", "que"], ["si", "que"], ["soit", "soit"], ["tantôt", "tantôt"], ["tout d'abord", "ensuite"], ["tout", "que"]];
const L5a = "aeiouyàâéèêëîïûüùôæœ", M5a = {
  vowels: [
    {
      fragments: [
        "[ptf]aon(ne)?[s]?$"
      ],
      countModifier: -1
    },
    {
      fragments: [
        "aoul",
        "[^eéiïou]e(s|nt)?$",
        "[qg]ue(s|nt)?$"
      ],
      countModifier: -1
    },
    {
      fragments: [
        "o[ëaéèï]"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "a[eéèïüo]",
        "é[aâèéiîuo]",
        "ii[oe]",
        "[aeéuo]y[aâeéèoui]",
        "coe[^u]",
        "zoo",
        "coop",
        "coord",
        "poly[ae]",
        "[bcd]ry[oa]",
        "[bcdfgptv][rl](ou|u|i)[aéèouâ]",
        "ouez",
        "[blmnt]uio",
        "uoia",
        "ment$",
        "yua",
        "[bcdfgptv][rl](i|u|eu)e([ltz]|r[s]?$|n[^t])",
        "[^aeiuyàâéèêëîïûüùôæœqg]uie[rz]$"
      ],
      countModifier: 1
    }
  ],
  words: {
    full: [
      {
        word: "ok",
        syllables: 2
      },
      {
        word: "eyeliner",
        syllables: 3
      },
      {
        word: "coati",
        syllables: 3
      },
      {
        word: "que",
        syllables: 1
      },
      {
        word: "flouer",
        syllables: 2
      },
      {
        word: "relouer",
        syllables: 3
      },
      {
        word: "évaluons",
        syllables: 4
      },
      {
        word: "instituons",
        syllables: 4
      },
      {
        word: "atténuons",
        syllables: 4
      },
      {
        word: "remuons",
        syllables: 3
      },
      {
        word: "redestribuons",
        syllables: 5
      },
      {
        word: "suons",
        syllables: 2
      },
      {
        word: "reconstituons",
        syllables: 5
      },
      {
        word: "dent",
        syllables: 1
      },
      {
        word: "fréquent",
        syllables: 2
      },
      {
        word: "permanent",
        syllables: 3
      },
      {
        word: "mécontent",
        syllables: 3
      },
      {
        word: "grandiloquent",
        syllables: 4
      },
      {
        word: "continent",
        syllables: 3
      },
      {
        word: "occident",
        syllables: 3
      },
      {
        word: "référent",
        syllables: 3
      },
      {
        word: "indigent",
        syllables: 3
      },
      {
        word: "concurrent",
        syllables: 3
      },
      {
        word: "gent",
        syllables: 1
      },
      {
        word: "différent",
        syllables: 3
      },
      {
        word: "strident",
        syllables: 2
      },
      {
        word: "équivalent",
        syllables: 4
      },
      {
        word: "ardent",
        syllables: 2
      },
      {
        word: "impotent",
        syllables: 3
      },
      {
        word: "argent",
        syllables: 2
      },
      {
        word: "immanent",
        syllables: 3
      },
      {
        word: "indécent",
        syllables: 3
      },
      {
        word: "effluent",
        syllables: 3
      },
      {
        word: "agent",
        syllables: 2
      },
      {
        word: "dolent",
        syllables: 2
      },
      {
        word: "contingent",
        syllables: 3
      },
      {
        word: "impénitent",
        syllables: 4
      },
      {
        word: "adjacent",
        syllables: 3
      },
      {
        word: "incident",
        syllables: 3
      },
      {
        word: "content",
        syllables: 2
      },
      {
        word: "incontinent",
        syllables: 4
      },
      {
        word: "éloquent",
        syllables: 3
      },
      {
        word: "convent",
        syllables: 2
      },
      {
        word: "dissident",
        syllables: 3
      },
      {
        word: "innocent",
        syllables: 3
      },
      {
        word: "ventripotent",
        syllables: 4
      },
      {
        word: "convalescent",
        syllables: 4
      },
      {
        word: "accident",
        syllables: 3
      },
      {
        word: "récent",
        syllables: 2
      },
      {
        word: "absent",
        syllables: 2
      },
      {
        word: "décadent",
        syllables: 3
      },
      {
        word: "réticent",
        syllables: 3
      },
      {
        word: "évent",
        syllables: 2
      },
      {
        word: "souvent",
        syllables: 2
      },
      {
        word: "intelligent",
        syllables: 3
      },
      {
        word: "inhérent",
        syllables: 3
      },
      {
        word: "adolescent",
        syllables: 4
      },
      {
        word: "couvent",
        syllables: 2
      },
      {
        word: "cent",
        syllables: 1
      },
      {
        word: "urgent",
        syllables: 2
      },
      {
        word: "précédent",
        syllables: 3
      },
      {
        word: "imprudent",
        syllables: 3
      },
      {
        word: "torrent",
        syllables: 2
      },
      {
        word: "abstinent",
        syllables: 3
      },
      {
        word: "indifférent",
        syllables: 4
      },
      {
        word: "excédent",
        syllables: 3
      },
      {
        word: "déférent",
        syllables: 3
      },
      {
        word: "incandescent",
        syllables: 4
      },
      {
        word: "intermittent",
        syllables: 4
      },
      {
        word: "présent",
        syllables: 3
      },
      {
        word: "astringent",
        syllables: 3
      },
      {
        word: "trident",
        syllables: 2
      },
      {
        word: "impertinent",
        syllables: 4
      },
      {
        word: "détergent",
        syllables: 3
      },
      {
        word: "évident",
        syllables: 3
      },
      {
        word: "influent",
        syllables: 3
      },
      {
        word: "pertinent",
        syllables: 3
      },
      {
        word: "subséquent",
        syllables: 3
      },
      {
        word: "féculent",
        syllables: 3
      },
      {
        word: "déférent",
        syllables: 3
      },
      {
        word: "ambivalent",
        syllables: 4
      },
      {
        word: "omnipotent",
        syllables: 4
      },
      {
        word: "décent",
        syllables: 2
      },
      {
        word: "compétent",
        syllables: 3
      },
      {
        word: "adhérent",
        syllables: 3
      },
      {
        word: "afférent",
        syllables: 3
      },
      {
        word: "luminescent",
        syllables: 4
      },
      {
        word: "lent",
        syllables: 1
      },
      {
        word: "apparent",
        syllables: 3
      },
      {
        word: "effervescent",
        syllables: 4
      },
      {
        word: "parent",
        syllables: 2
      },
      {
        word: "pénitent",
        syllables: 3
      },
      {
        word: "fluorescent",
        syllables: 3
      },
      {
        word: "impudent",
        syllables: 3
      },
      {
        word: "diligent",
        syllables: 3
      },
      {
        word: "entregent",
        syllables: 3
      },
      {
        word: "flatulent",
        syllables: 3
      },
      {
        word: "serpent",
        syllables: 2
      },
      {
        word: "violent",
        syllables: 2
      },
      {
        word: "somnolent",
        syllables: 3
      },
      {
        word: "déliquescent",
        syllables: 4
      },
      {
        word: "proéminent",
        syllables: 4
      },
      {
        word: "résident",
        syllables: 3
      },
      {
        word: "putrescent",
        syllables: 3
      },
      {
        word: "talent",
        syllables: 2
      },
      {
        word: "spumescent",
        syllables: 3
      },
      {
        word: "tangent",
        syllables: 2
      },
      {
        word: "chiendent",
        syllables: 2
      },
      {
        word: "négligent",
        syllables: 3
      },
      {
        word: "antécédent",
        syllables: 4
      },
      {
        word: "régent",
        syllables: 2
      },
      {
        word: "polyvalent",
        syllables: 4
      },
      {
        word: "latent",
        syllables: 2
      },
      {
        word: "opulent",
        syllables: 3
      },
      {
        word: "arpent",
        syllables: 2
      },
      {
        word: "adent",
        syllables: 2
      },
      {
        word: "concupiscent",
        syllables: 4
      },
      {
        word: "sanguinolent",
        syllables: 4
      },
      {
        word: "opalescent",
        syllables: 4
      },
      {
        word: "prudent",
        syllables: 2
      },
      {
        word: "conséquent",
        syllables: 3
      },
      {
        word: "pourcent",
        syllables: 2
      },
      {
        word: "transparent",
        syllables: 3
      },
      {
        word: "sergent",
        syllables: 2
      },
      {
        word: "diligent",
        syllables: 3
      },
      {
        word: "inconséquent",
        syllables: 4
      },
      {
        word: "turbulent",
        syllables: 3
      },
      {
        word: "fervent",
        syllables: 2
      },
      {
        word: "truculent",
        syllables: 3
      },
      {
        word: "interférent",
        syllables: 4
      },
      {
        word: "confluent",
        syllables: 3
      },
      {
        word: "succulent",
        syllables: 3
      },
      {
        word: "purulent",
        syllables: 3
      },
      {
        word: "patent",
        syllables: 2
      },
      {
        word: "indulgent",
        syllables: 3
      },
      {
        word: "engoulevent",
        syllables: 4
      },
      {
        word: "auvent",
        syllables: 2
      },
      {
        word: "président",
        syllables: 3
      },
      {
        word: "confident",
        syllables: 3
      },
      {
        word: "incompétent",
        syllables: 4
      },
      {
        word: "accent",
        syllables: 2
      },
      {
        word: "arborescent",
        syllables: 4
      },
      {
        word: "contrevent",
        syllables: 3
      },
      {
        word: "cohérent",
        syllables: 3
      },
      {
        word: "relent",
        syllables: 2
      },
      {
        word: "insolent",
        syllables: 3
      },
      {
        word: "virulent",
        syllables: 3
      },
      {
        word: "rémanent",
        syllables: 3
      },
      {
        word: "vent",
        syllables: 1
      },
      {
        word: "turgescent",
        syllables: 3
      },
      {
        word: "incohérent",
        syllables: 4
      },
      {
        word: "malcontent",
        syllables: 3
      },
      {
        word: "lactescent",
        syllables: 3
      },
      {
        word: "inintelligent",
        syllables: 5
      },
      {
        word: "omniprésent",
        syllables: 4
      },
      {
        word: "récurrent",
        syllables: 3
      },
      {
        word: "covalent",
        syllables: 3
      },
      {
        word: "éminent",
        syllables: 3
      },
      {
        word: "onguent",
        syllables: 2
      },
      {
        word: "indolent",
        syllables: 3
      },
      {
        word: "event",
        syllables: 2
      },
      {
        word: "corpulent",
        syllables: 3
      },
      {
        word: "divergent",
        syllables: 3
      },
      {
        word: "excellent",
        syllables: 3
      },
      {
        word: "phosphorescent",
        syllables: 4
      },
      {
        word: "évanescent",
        syllables: 4
      },
      {
        word: "paravent",
        syllables: 3
      },
      {
        word: "avent",
        syllables: 2
      },
      {
        word: "iridescent",
        syllables: 4
      },
      {
        word: "prénomment",
        syllables: 2
      },
      {
        word: "consument",
        syllables: 2
      },
      {
        word: "dégomment",
        syllables: 2
      },
      {
        word: "enveniment",
        syllables: 3
      },
      {
        word: "proclament",
        syllables: 2
      },
      {
        word: "chôment",
        syllables: 1
      },
      {
        word: "infirment",
        syllables: 2
      },
      {
        word: "briment",
        syllables: 1
      },
      {
        word: "fument",
        syllables: 1
      },
      {
        word: "acclament",
        syllables: 2
      },
      {
        word: "referment",
        syllables: 2
      },
      {
        word: "impriment",
        syllables: 2
      },
      {
        word: "paument",
        syllables: 1
      },
      {
        word: "déciment",
        syllables: 2
      },
      {
        word: "accoutument",
        syllables: 3
      },
      {
        word: "essaiment",
        syllables: 2
      },
      {
        word: "ferment",
        syllables: 1
      },
      {
        word: "dépriment",
        syllables: 2
      },
      {
        word: "raniment",
        syllables: 2
      },
      {
        word: "programment",
        syllables: 2
      },
      {
        word: "fantasment",
        syllables: 2
      },
      {
        word: "animent",
        syllables: 2
      },
      {
        word: "affirment",
        syllables: 2
      },
      {
        word: "filment",
        syllables: 1
      },
      {
        word: "dament",
        syllables: 1
      },
      {
        word: "parsèment",
        syllables: 3
      },
      {
        word: "priment",
        syllables: 1
      },
      {
        word: "assomment",
        syllables: 2
      },
      {
        word: "rament",
        syllables: 1
      },
      {
        word: "pâment",
        syllables: 1
      },
      {
        word: "conforment",
        syllables: 2
      },
      {
        word: "embaument",
        syllables: 2
      },
      {
        word: "calment",
        syllables: 1
      },
      {
        word: "blasphèment",
        syllables: 2
      },
      {
        word: "désarment",
        syllables: 2
      },
      {
        word: "consomment",
        syllables: 2
      },
      {
        word: "griment",
        syllables: 1
      },
      {
        word: "abîment",
        syllables: 2
      },
      {
        word: "blâment",
        syllables: 1
      },
      {
        word: "endorment",
        syllables: 2
      },
      {
        word: "allument",
        syllables: 2
      },
      {
        word: "blâment",
        syllables: 1
      },
      {
        word: "confirment",
        syllables: 2
      },
      {
        word: "escriment",
        syllables: 2
      },
      {
        word: "trament",
        syllables: 1
      },
      {
        word: "hument",
        syllables: 1
      },
      {
        word: "surnomment",
        syllables: 2
      },
      {
        word: "écument",
        syllables: 2
      },
      {
        word: "triment",
        syllables: 1
      },
      {
        word: "estiment",
        syllables: 2
      },
      {
        word: "rallument",
        syllables: 2
      },
      {
        word: "enflamment",
        syllables: 2
      },
      {
        word: "riment",
        syllables: 1
      },
      {
        word: "plument",
        syllables: 1
      },
      {
        word: "suppriment",
        syllables: 2
      },
      {
        word: "gomment",
        syllables: 1
      },
      {
        word: "affament",
        syllables: 2
      },
      {
        word: "friment",
        syllables: 1
      },
      {
        word: "clament",
        syllables: 1
      },
      {
        word: "dorment",
        syllables: 1
      },
      {
        word: "dénomment",
        syllables: 2
      },
      {
        word: "entament",
        syllables: 2
      },
      {
        word: "arriment",
        syllables: 2
      },
      {
        word: "résument",
        syllables: 2
      },
      {
        word: "enrhument",
        syllables: 2
      },
      {
        word: "rendorment",
        syllables: 2
      },
      {
        word: "compriment",
        syllables: 2
      },
      {
        word: "aiment",
        syllables: 1
      },
      {
        word: "rythment",
        syllables: 1
      },
      {
        word: "périment",
        syllables: 2
      },
      {
        word: "réclament",
        syllables: 2
      },
      {
        word: "subliment",
        syllables: 2
      },
      {
        word: "brument",
        syllables: 1
      },
      {
        word: "embrument",
        syllables: 2
      },
      {
        word: "germent",
        syllables: 1
      },
      {
        word: "renferment",
        syllables: 2
      },
      {
        word: "sèment",
        syllables: 1
      },
      {
        word: "reforment",
        syllables: 2
      },
      {
        word: "liment",
        syllables: 1
      },
      {
        word: "cament",
        syllables: 1
      },
      {
        word: "parfument",
        syllables: 2
      },
      {
        word: "arment",
        syllables: 1
      },
      {
        word: "brament",
        syllables: 1
      },
      {
        word: "déforment",
        syllables: 2
      },
      {
        word: "assument",
        syllables: 2
      },
      {
        word: "crament",
        syllables: 1
      },
      {
        word: "exclament",
        syllables: 2
      },
      {
        word: "forment",
        syllables: 1
      },
      {
        word: "diffament",
        syllables: 2
      },
      {
        word: "somment",
        syllables: 1
      },
      {
        word: "oppriment",
        syllables: 2
      },
      {
        word: "miment",
        syllables: 1
      },
      {
        word: "enferment",
        syllables: 2
      },
      {
        word: "nomment",
        syllables: 1
      },
      {
        word: "reprogramment",
        syllables: 3
      },
      {
        word: "transforment",
        syllables: 2
      },
      {
        word: "expriment",
        syllables: 2
      },
      {
        word: "informent",
        syllables: 2
      },
      {
        word: "légitiment",
        syllables: 3
      },
      {
        word: "de",
        syllables: 1
      },
      {
        word: "le",
        syllables: 1
      },
      {
        word: "je",
        syllables: 1
      },
      {
        word: "te",
        syllables: 1
      },
      {
        word: "ce",
        syllables: 1
      },
      {
        word: "ne",
        syllables: 1
      },
      {
        word: "re",
        syllables: 1
      },
      {
        word: "me",
        syllables: 1
      },
      {
        word: "se",
        syllables: 1
      },
      {
        word: "ses",
        syllables: 1
      },
      {
        word: "mes",
        syllables: 1
      },
      {
        word: "mes",
        syllables: 1
      },
      {
        word: "ces",
        syllables: 1
      },
      {
        word: "des",
        syllables: 1
      },
      {
        word: "tes",
        syllables: 1
      },
      {
        word: "les",
        syllables: 1
      },
      {
        word: "oye",
        syllables: 1
      },
      {
        word: "es",
        syllables: 1
      },
      {
        word: "remerciâmes",
        syllables: 4
      },
      {
        word: "herniaires",
        syllables: 3
      },
      {
        word: "autopsiais",
        syllables: 4
      },
      {
        word: "août",
        syllables: 1
      }
    ],
    fragments: {
      global: [
        {
          word: "business",
          syllables: 2
        },
        {
          word: "skate",
          syllables: 1
        },
        {
          word: "board",
          syllables: 1
        },
        {
          word: "coach",
          syllables: 1
        },
        {
          word: "roadster",
          syllables: 2
        },
        {
          word: "soap",
          syllables: 1
        },
        {
          word: "goal",
          syllables: 1
        },
        {
          word: "coaltar",
          syllables: 2
        },
        {
          word: "loader",
          syllables: 2
        },
        {
          word: "coat",
          syllables: 1
        },
        {
          word: "baseball",
          syllables: 2
        },
        {
          word: "foëne",
          syllables: 1
        },
        {
          word: "cacaoyer",
          syllables: 4
        },
        {
          word: "scoop",
          syllables: 1
        },
        {
          word: "zoom",
          syllables: 1
        },
        {
          word: "bazooka",
          syllables: 3
        },
        {
          word: "tatoueu",
          syllables: 3
        },
        {
          word: "cloueu",
          syllables: 2
        },
        {
          word: "déchouer",
          syllables: 2
        },
        {
          word: "écrouelles",
          syllables: 3
        },
        {
          word: "maestria",
          syllables: 3
        },
        {
          word: "maestro",
          syllables: 3
        },
        {
          word: "vitae",
          syllables: 3
        },
        {
          word: "paella",
          syllables: 3
        },
        {
          word: "vae",
          syllables: 2
        },
        {
          word: "thaï",
          syllables: 1
        },
        {
          word: "skaï",
          syllables: 1
        },
        {
          word: "masaï",
          syllables: 2
        },
        {
          word: "samouraï",
          syllables: 3
        },
        {
          word: "bonsaï",
          syllables: 2
        },
        {
          word: "bonzaï",
          syllables: 2
        },
        {
          word: "aïkido",
          syllables: 3
        },
        {
          word: "daïquiri",
          syllables: 3
        },
        {
          word: "pagaïe",
          syllables: 2
        },
        {
          word: "chiite",
          syllables: 2
        },
        {
          word: "pays",
          syllables: 2
        },
        {
          word: "antiaérien",
          syllables: 5
        },
        {
          word: "bleui",
          syllables: 2
        },
        {
          word: "remerciai",
          syllables: 4
        },
        {
          word: "monstrueu",
          syllables: 3
        },
        {
          word: "niakoué",
          syllables: 3
        },
        {
          word: "minoen",
          syllables: 3
        },
        {
          word: "groenlandais",
          syllables: 4
        },
        {
          word: "remerciant",
          syllables: 4
        },
        {
          word: "skiant",
          syllables: 2
        },
        {
          word: "ruade",
          syllables: 2
        },
        {
          word: "weltanschauung",
          syllables: 4
        }
      ],
      atBeginning: [
        {
          word: "roast",
          syllables: 1
        },
        {
          word: "taï",
          syllables: 1
        }
      ],
      atEnd: [
        {
          word: "écrouer",
          syllables: 3
        },
        {
          word: "clouer",
          syllables: 2
        }
      ]
    }
  }
}, q5a = {
  vowels: L5a,
  deviations: M5a
};
var uT = {}, ez = {}, cT = {}, Wi = {};
Object.defineProperty(Wi, "__esModule", {
  value: !0
});
Wi.irregularsRegular = Wi.irregularsIrregular = Wi.irregularsEndingInS = void 0;
Wi.irregularsRegular = ["abâtardi", "abattu", "abêti", "aboli", "abouti", "abruti", "abstenu", "abstrait", "accompli", "accouru", "accroupi", "accru", "accueilli", "adjoint", "adouci", "advenu", "affadi", "affaibli", "affermi", "agi", "agrandi", "aguerri", "ahuri", "aigri", "alangui", "alenti", "alourdi", "aluni", "amaigri", "amati", "amerri", "aminci", "amoindri", "amolli", "amorti", "anéanti", "apâli", "aperçu", "aplani", "appartenu", "appauvri", "appendu", "appesanti", "applaudi", "approfondi", "arrondi", "assagi", "assailli", "assaini", "asservi", "assombri", "assorti", "assoupi", "assoupli", "assourdi", "assouvi", "assujetti", "astreint", "attendri", "attendu", "atterri", "attiédi", "attrait", "autodétruit", "avachi", "aveuli", "avili", "banni", "barri", "bâti", "battu", "béni", "blanchi", "blêmi", "bleui", "blondi", "blotti", "bonni", "bouffi", "bouilli", "bruni", "bu", "calmi", "candi", "ceint", "chéri", "choisi", "circonscrit", "circonvenu", "combattu", "comparu", "compati", "conclu", "concouru", "condescendu", "conduit", "confit", "confondu", "conjoint", "connu", "consenti", "construit", "contenu", "contraint", "contredit", "contrefait", "contrevenu", "convaincu", "convenu", "converti", "coproduit", "correspondu", "couru", "cousu", "craint", "cramoisi", "crépi", "croupi", "cru", "cueilli", "cuit", "débattu", "décati", "déchu", "déconfit", "déconstruit", "décousu", "découvert", "décrépi", "décrit", "décru", "déçu", "dédit", "déduit", "défailli", "défendu", "défini", "défleuri", "défraîchi", "dégarni", "dégluti", "dégourdi", "démenti", "démoli", "démordu", "démuni", "départi", "dépeint", "dépendu", "dépéri", "déplu", "dépoli", "dépourvu", "désobéi", "desservi", "déteint", "détendu", "détenu", "détruit", "dévêtu", "discouru", "disjoint", "disparu", "distendu", "distrait", "dit", "diverti", "dormi", "durci", "ébahi", "ébaubi", "ébaudi", "éclairci", "éconduit", "écrit", "élargi", "élu", "embelli", "embouti", "émoulu", "empli", "empreint", "empuanti", "ému", "enchéri", "encouru", "endolori", "endormi", "enduit", "endurci", "enfoui", "enfreint", "enfui", "englouti", "engourdi", "enhardi", "enjoint", "enlaidi", "ennobli", "enorgueilli", "enrichi", "enseveli", "entendu", "entr'aperçu", "entraperçu", "entreclos", "entremis", "entretenu", "entrevu", "entrouvert", "envahi", "épanoui", "éperdu", "équarri", "équivalu", "estourbi", "établi", "éteint", "étendu", "étourdi", "étréci", "étreint", "eu", "évanoui", "exclu", "extrait", "faibli", "fait", "fallu", "farci", "feint", "fendu", "fini", "fléchi", "fleuri", "fondu", "forci", "foui", "fourbi", "fourni", "foutu", "fraîchi", "franchi", "frémi", "frit", "fui", "garanti", "garni", "gauchi", "gémi", "glapi", "grandi", "grossi", "guéri", "haï", "imparti", "induit", "infléchi", "inscrit", "instruit", "interdit", "interrompu", "interverti", "introduit", "inverti", "investi", "jailli", "jauni", "joint", "joui", "langui", "loti", "lu", "maintenu", "méconnu", "mécru", "médit", "menti", "minci", "moisi", "moiti", "molli", "mordu", "morfondu", "moulu", "mugi", "muni", "nanti", "noirci", "nourri", "nui", "obéi", "obscurci", "obtenu", "offert", "oint", "ouï", "ourdi", "ouvert", "pâli", "parcouru", "paru", "pâti", "peint", "pendu", "perçu", "péri", "perverti", "pétri", "plaint", "portrait", "pourfendu", "pourri", "poursuivi", "pourvu", "prédéfini", "prédit", "préétabli", "prémuni", "prescrit", "prétendu", "prévalu", "prévenu", "prévu", "produit", "promu", "proscrit", "pu", "puni", "rabattu", "rabougri", "radouci", "raffermi", "ragaillardi", "raidi", "rajeuni", "ralenti", "ramolli", "ranci", "ravi", "réadmis", "réagi", "réappris", "rebâti", "rebattu", "rebondi", "rebu", "reconnu", "reconstruit", "reconverti", "recouru", "recouvert", "recrépi", "récrit", "recru", "reçu", "recueilli", "recuit", "redécouvert", "redéfini", "redit", "réduit", "réécrit", "réélu", "réentendu", "refendu", "réfléchi", "refondu", "refoutu", "refroidi", "regarni", "régi", "réinscrit", "réintroduit", "réinvesti", "rejoint", "réjoui", "relu", "relui", "rembruni", "remordu", "rempli", "renchéri", "rendormi", "rendu", "rentrait", "répandu", "reparcouru", "réparti", "reparu", "repeint", "rependu", "repenti", "reperdu", "répondu", "reproduit", "résolu", "resplendi", "ressaisi", "resservi", "restreint", "resurgi", "rétabli", "retendu", "retenu", "retraduit", "retrait", "retranscrit", "rétréci", "réuni", "réussi", "revécu", "revendu", "reverdi", "reverni", "revêtu", "revu", "ri", "roidi", "rosi", "rôti", "rougi", "roussi", "rousti", "rouvert", "rugi", "saisi", "sali", "satisfait", "sauri", "secouru", "séduit", "senti", "serti", "servi", "sévi", "souffert", "souri", "sous-entendu", "sous-tendu", "souscrit", "soustrait", "soutenu", "souvenu", "su", "subi", "subvenu", "suffi", "suivi", "surenchéri", "surgi", "suri", "survécu", "suspendu", "tapi", "tari", "teint", "tendu", "tenu", "terni", "terri", "tiédi", "tondu", "tordu", "traduit", "trahi", "trait", "transcrit", "transi", "travesti", "tressailli", "uni", "vagi", "vaincu", "valu", "vécu", "vendu", "verdi", "verni", "vêtu", "vieilli", "vomi", "voulu", "vu"];
Wi.irregularsIrregular = ["absous", "absoute", "absoutes", "dissous", "dissoute", "dissoutes", "crû", "crus", "crue", "crues", "dû", "dus", "dues", "mû", "mus", "mue", "mues"];
Wi.irregularsEndingInS = ["repris", "démis", "omis", "dépris", "retransmis", "assis", "promis", "circoncis", "permis", "compris", "mépris", "inclus", "soumis", "rassis", "sursis", "enclos", "acquis", "compromis", "commis", "désappris", "appris", "conquis", "transmis", "remis", "surpris", "reconquis", "mis", "enquis", "pris", "admis", "clos", "émis", "entrepris", "épris", "requis"];
Object.defineProperty(cT, "__esModule", {
  value: !0
});
cT.default = H5a;
var pT = K, F5a = ee, Ek = Wi;
const {
  getWords: B5a,
  matchRegularParticiples: W5a
} = F5a.languageProcessing, GP = function(e, a, t) {
  const n = [];
  return (0, pT.forEach)(a, function(r) {
    const o = new RegExp("^" + r + t + "?$", "ig"), l = e.match(o);
    l && n.push(l[0]);
  }), n;
}, U5a = function(e) {
  let a = [].concat(GP(e, Ek.irregularsRegular, "(e|s|es)"));
  return a = a.concat(GP(e, Ek.irregularsEndingInS, "(e|es)")), (0, pT.includes)(Ek.irregularsIrregular, e) && a.push(e), a;
};
function H5a(e) {
  const a = B5a(e), t = [];
  return (0, pT.forEach)(a, function(n) {
    (W5a(n, [/\S+(é|ée|és|ées)($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig]).length !== 0 || U5a(n).length !== 0) && t.push(n);
  }), t;
}
var Ui = {};
Object.defineProperty(Ui, "__esModule", {
  value: !0
});
Ui.others = Ui.nouns = Ui.adjectivesVerbs = void 0;
Ui.adjectivesVerbs = [
  // The following words are participles of verbs that cannot be passives.
  "allé",
  "arrivé",
  "décédé",
  "demeuré",
  "entré",
  "été",
  "né",
  "resté",
  "retombé",
  "tombé",
  // The following words are non-participles ending in é.
  "achalandé",
  "aéroporté",
  "affilé",
  "affixé",
  "âgé",
  "aîné",
  "aisé",
  "aligoté",
  "alizé",
  "alliacé",
  "alluré",
  "alphabétisé",
  "alvéolé",
  "aminé",
  "ammoniaqué",
  "ampoulé",
  "archi-prouvé",
  "archi-usé",
  "asexué",
  "autoguidé",
  "autopropulsé",
  "aviné",
  "baleiné",
  "barbelé",
  "baryté",
  "bien-aimé",
  "bisexué",
  "bouqueté",
  "brioché",
  "burkinabé",
  "cagoulé",
  "calamistré",
  "cannelé",
  "carabiné",
  "carboné",
  "caréné",
  "carié",
  "carminé",
  "carné",
  "carpé",
  "censé",
  "cérusé",
  "charançonné",
  "chenillé",
  "chocolaté",
  "chtarbé",
  "citronné",
  "cofondé",
  "contrecollé",
  "côtelé",
  "courbaturé",
  "crawlé",
  "crossé",
  "crustacé",
  "cutané",
  "damasquiné",
  "damassé",
  "débellé",
  "décavé",
  "déguenillé",
  "demi-paralysé",
  "denté",
  "dépenaillé",
  "désenchanté",
  "désodé",
  "diapré",
  "ébranché",
  "écervelé",
  "effréné",
  "effronté",
  "éhonté",
  "embourgeoisé",
  "embroussaillé",
  "embruiné",
  "émerillonné",
  "encalminé",
  "encaustiqué",
  "encorné",
  "endiablé",
  "endiamanté",
  "enfoiré",
  "enfouraillé",
  "ensellé",
  "entrelardé",
  "éploré",
  "ergoté",
  "erroné",
  "étagé",
  "éthéré",
  "éversé",
  "éwé",
  "ex-associé",
  "exorbité",
  "expansé",
  "famé",
  "férié",
  "fibré",
  "filoguidé",
  "flammé",
  "fleurdelisé",
  "fliqué",
  "flûté",
  "forcené",
  "fortuné",
  "foulbé",
  "frelaté",
  "friqué",
  "futé",
  "gazonné",
  "gracieusé",
  "gradé",
  "granulé",
  "herminé",
  "hiérarchisé",
  "huppé",
  "hydrogéné",
  "igné",
  "illettré",
  "illimité",
  "imbriqué",
  "immaculé",
  "immérité",
  "immodéré",
  "immunodéprimé",
  "impayé",
  "impensé",
  "impollué",
  "imprononcé",
  "inaccoutumé",
  "inachevé",
  "inactivé",
  "inadapté",
  "inaltéré",
  "inanimé",
  "inapproprié",
  "inarticulé",
  "inavoué",
  "inchangé",
  "inconditionné",
  "inconsidéré",
  "inconsolé",
  "incontesté",
  "incontrôlé",
  "incréé",
  "indéfriché",
  "indéterminé",
  "indifférencié",
  "indiscipliné",
  "indiscuté",
  "indivisé",
  "indompté",
  "inébranlé",
  "inemployé",
  "inentamé",
  "inespéré",
  "inexpérimenté",
  "inexpliqué",
  "inexploité",
  "inexploré",
  "inexprimé",
  "infondé",
  "informulé",
  "infortuné",
  "inhabité",
  "inimité",
  "injustifié",
  "inné",
  "innommé",
  "inoccupé",
  "inopiné",
  "inorganisé",
  "inoublié",
  "insensé",
  "insoupçonné",
  "instantané",
  "insubordonné",
  "insurpassé",
  "intentionné",
  "interallié",
  "intouché",
  "inusité",
  "inutilisé",
  "invertébré",
  "inviolé",
  "iodé",
  "irraisonné",
  "irréalisé",
  "lacté",
  "lamé",
  "lamifié",
  "larvé",
  "laryngé",
  "léopardé",
  "lettré",
  "lié",
  "lifté",
  "losangé",
  "luné",
  "lunetté",
  "madré",
  "maillé",
  "malaisé",
  "malavisé",
  "maléficié",
  "malfamé",
  "malformé",
  "malintentionné",
  "mendé",
  "ménopausé",
  "mentholé",
  "mi-accablé",
  "mi-allongé",
  "mi-café",
  "mi-consterné",
  "mi-enterré",
  "mi-étonné",
  "mi-pincé",
  "mi-terrorisé",
  "miellé",
  "millimétré",
  "miraculé",
  "momentané",
  "monoclé",
  "monté",
  "mordoré",
  "mort-né",
  "névrosé",
  "nitré",
  "non-initié",
  "nouveau-né",
  "olé-olé",
  "ongulé",
  "paillé",
  "palé",
  "papilionacé",
  "paqueté",
  "paraffiné",
  "passé",
  "pasteurisé",
  "patenté",
  "paysagé",
  "pédonculé",
  "pestiféré",
  "platiné",
  "pocheté",
  "polychromé",
  "poplité",
  "potelé",
  "pourpré",
  "praliné",
  "précité",
  "prédigéré",
  "préencollé",
  "préfabriqué",
  "prématuré",
  "premier-né",
  "préprogrammé",
  "prostré",
  "protéiné",
  "pyramidé",
  "quadrilobé",
  "racé",
  "re-café",
  "re-rêvé",
  "re-vérifié",
  "rebarré",
  "redécoré",
  "relargué",
  "remonté",
  "rentré",
  "résiné",
  "ressuscité",
  "réticulé",
  "retourné",
  "revérifié",
  "revivifié",
  "rose-thé",
  "safrané",
  "satiné",
  "saumoné",
  "sébacé",
  "sensé",
  "sexué",
  "sigillé",
  "silicosé",
  "simultané",
  "sinistré",
  "soufré",
  "sous-cutané",
  "sous-développé",
  "sous-qualifié",
  "soussigné",
  "spiralé",
  "spontané",
  "stratifié",
  "sulfaté",
  "sulfuré",
  "sulfurisé",
  "suractivé",
  "suranné",
  "surbooké",
  "surbrodé",
  "surdéveloppé",
  "surdimensionné",
  "surdoué",
  "surentraîné",
  "suroxygéné",
  "surpeuplé",
  "surqualifié",
  "susmentionné",
  "susnommé",
  "systématisé",
  "tarabiscoté",
  "taupé",
  "thrombosé",
  "tiercé",
  "timoré",
  "tiqueté",
  "transcutané",
  "triphasé",
  "usagé",
  "usité",
  "vallonné",
  "vanillé",
  "vascularisé",
  "veinulé",
  "venté",
  "vergé",
  "vert-de-grisé",
  "vertébré",
  "vitaminé",
  "vulcanisé",
  "zélé"
];
Ui.nouns = ["à-côté", "abbé", "absurdité", "accessibilité", "acerbité", "acidité", "acmé", "acné", "âcreté", "activité", "actualité", "acuité", "adaptabilité", "adiposité", "admissibilité", "adversité", "affabilité", "affectivité", "affidé", "affinité", "agilité", "agressivité", "alacrité", "alcalinité", "altérité", "amabilité", "ambiguïté", "amé", "aménité", "américanité", "amirauté", "amitié", "amoralité", "ancestralité", "ancienneté", "anfractuosité", "angulosité", "animalité", "animosité", "anormalité", "anti-acné", "anti-cité", "anti-criminalité", "anti-gravité", "anti-intimité", "anti-société", "antigravité", "antiquité", "anxiété", "aparté", "applicabilité", "âpreté", "archevêché", "aridité", "artificialité", "asexualité", "asociabilité", "aspérité", "assiduité", "astarté", "atrocité", "austérité", "authenticité", "autodafé", "autorité", "avé", "aveugle-né", "avidité", "ébriété", "effectivité", "efficacité", "égalité", "élasticité", "électricité", "élément-clé", "élémentarité", "éligibilité", "émotivité", "empaffé", "énormité", "entièreté", "entité", "enviandé", "épitomé", "équanimité", "équité", "étanchéité", "éternité", "ethnicité", "étrangéité", "étrangeté", "euromarché", "évêché", "éventualité", "ex-abbé", "ex-fiancé", "excentricité", "exclusivité", "exemplarité", "exhaustivité", "exiguïté", "extériorité", "externalité", "exterritorialité", "extrémité", "idée-clé", "identité", "illégalité", "illégitimité", "imbécillité", "immatérialité", "immaturité", "immédiateté", "immensité", "immobilité", "immoralité", "immortalité", "immuabilité", "immunité", "immutabilité", "impalpabilité", "impartialité", "impassibilité", "impeccabilité", "impécuniosité", "impénétrabilité", "imperméabilité", "impersonnalité", "impétuosité", "impiété", "implacabilité", "impopularité", "impossibilité", "impraticabilité", "imprévisibilité", "improbabilité", "impudicité", "impulsivité", "impunité", "impureté", "inaccessibilité", "inactivité", "inanité", "inauthenticité", "incapacité", "incommodité", "incommunicabilité", "incompatibilité", "incongruité", "incorruptibilité", "incrédibilité", "incrédulité", "incuriosité", "indemnité", "indestructibilité", "indignité", "indisponibilité", "individualité", "indivisibilité", "indocilité", "industrie-clé", "inefficacité", "inégalité", "inéligibilité", "inéluctabilité", "inévitabilité", "inexorabilité", "infaillibilité", "infécondité", "infériorité", "infertilité", "infidélité", "infinité", "infirmité", "inflammabilité", "inflexibilité", "ingéniosité", "ingénuité", "inhospitalité", "inhumanité", "inimitié", "iniquité", "innocuité", "inopportunité", "insalubrité", "insanité", "insécurité", "insensibilité", "inséparabilité", "insincérité", "insipidité", "insonorité", "instabilité", "instantanéité", "insularité", "intangibilité", "intégralité", "intégrité", "intelligibilité", "intemporalité", "intensité", "intentionnalité", "interactivité", "intériorité", "intimité", "intrépidité", "inusabilité", "inutilité", "invalidité", "inventivité", "invincibilité", "inviolabilité", "invisibilité", "invulnérabilité", "irrationalité", "irréalité", "irrecevabilité", "irrégularité", "irréligiosité", "irresponsabilité", "irréversibilité", "irrévocabilité", "irritabilité", "obésité", "objectivité", "obliquité", "obscénité", "obscurité", "obséquiosité", "officialité", "oiseau-clé", "oisiveté", "okoumé", "onctuosité", "opacité", "opiniâtreté", "opportunité", "oralité", "originalité", "ubiquité", "ukulélé", "unanimité", "unicité", "uniformité", "unilatéralité", "unité", "universalité", "université", "urbanité", "utilité", "yé-yé", "yéyé", "achillée", "almée", "aménorrhée", "année", "anti-nausée", "apnée", "apogée", "araignée", "arrière-pensée", "assiettée", "athénée", "auloffée", "aveugle-née", "avrillée", "azalée", "échauffourée", "écuellée", "élysée", "embardée", "empyrée", "épée", "épopée", "étuvée", "ex-allée", "ex-dulcinée", "ex-fiancée", "ex-lycée", "idée", "ipomée", "odyssée", "onomatopée", "orchidée", "orée", "orphée", "urée", "banalité", "bas-côté", "beaupré", "beauté", "bébé", "bédé", "bénédicité", "bénignité", "bestialité", "bien-fondé", "biodiversité", "bipolarité", "bisexualité", "blé", "bonté", "bout-rimé", "bovidé", "brièveté", "brutalité", "caducité", "café", "callosité", "camélidé", "canapé", "capacité", "capillarité", "captivité", "carte-clé", "caté", "catholicité", "causalité", "causticité", "cavité", "cécité", "célébrité", "célérité", "cérébralité", "cétacé", "charité", "chassé-croisé", "chasteté", "cherté", "chétivité", "chimpanzé", "chrétienté", "ciné", "cinéma-vérité", "circularité", "citoyenneté", "civilité", "clandé", "clandestinité", "clarté", "clé", "clergé", "co-propriété", "coaccusé", "cochonceté", "code-clé", "collectivité", "collégialité", "combativité", "comestibilité", "comité", "commodité", "communauté", "communicabilité", "compacité", "comparabilité", "compatibilité", "compétitivité", "complémentarité", "complexité", "complicité", "comptabilité", "comté", "concavité", "condé", "conductibilité", "conductivité", "confidentialité", "conformité", "confraternité", "congé", "conjugalité", "connectivité", "consanguinité", "constitutionnalité", "contiguïté", "continuité", "contrariété", "contre-gré", "contre-plaqué", "contre-vérité", "contreplaqué", "contrevérité", "convexité", "convivialité", "coopé", "copropriété", "cordialité", "coré", "coriacité", "corporalité", "côté", "créativité", "crédibilité", "crédulité", "crétacé", "criminalité", "cruauté", "crudité", "culpabilité", "cupidité", "curiosité", "cybercafé", "cyprinidé", "dangerosité", "daphné", "dé", "débotté", "décimalité", "décision-clé", "déclivité", "déductibilité", "défectuosité", "degré", "déité", "déloyauté", "demi-clarté", "demi-degré", "demi-liberté", "demi-obscurité", "demi-vérité", "dénatalité", "densité", "député", "dératé", "dernier-né", "désirabilité", "dextérité", "difficulté", "difformité", "dignité", "discontinuité", "disparité", "disponibilité", "diversité", "divinité", "docilité", "domesticité", "doyenné", "dualité", "duché", "duplicité", "durabilité", "dureté", "faculté", "faillibilité", "faisabilité", "familiarité", "fatalité", "fatuité", "fausseté", "fébrilité", "fécondité", "félidé", "félinité", "féminité", "féodalité", "fermeté", "férocité", "ferté", "fertilité", "festivité", "fétidité", "fiabilité", "fibrillé", "fidélité", "fierté", "finalité", "fiscalité", "fixité", "flaccidité", "flatuosité", "flexibilité", "flexuosité", "flottabilité", "fluidité", "fonctionnalité", "formalité", "fossé", "fragilité", "francité", "fraternité", "friabilité", "frigidité", "frilosité", "fringillidé", "frivolité", "frugalité", "fugacité", "furtivité", "futilité", "gaieté", "gaîté", "gallinacé", "gémellité", "généralité", "générosité", "génialité", "génitalité", "germanité", "gibbosité", "globalité", "godemiché", "gracieuseté", "gracilité", "grand-duché", "granité", "gratuité", "gravidité", "gré", "grossièreté", "habileté", "habitabilité", "haute-fidélité", "henné", "hérédité", "hétérogénéité", "hétérosexualité", "hilarité", "histocompatibilité", "historicité", "homme-clé", "homogénéité", "homosexualité", "honnêteté", "honorabilité", "horizontalité", "hospitalité", "hostilité", "humanité", "humidité", "humilité", "hyperacidité", "hyperactivité", "hypercoagulabilité", "hyperémotivité", "hypermarché", "hyperréactivité", "hypersensibilité", "jovialité", "joyeuseté", "jubé", "judaïcité", "judaïté", "judéité", "juvénilité", "karaoké", "karaté", "karité", "kiné", "koré", "lâcheté", "laïcité", "lamedé", "lascivité", "latéralité", "latinité", "laubé", "laxité", "lé", "légalité", "légèreté", "légitimité", "lèse-majesté", "létalité", "lettre-clé", "libéralité", "liberté", "licéité", "limpidité", "liquidité", "lisibilité", "littéralité", "lividité", "localité", "longanimité", "longévité", "loquacité", "loyauté", "lubricité", "lucidité", "luminosité", "macramé", "magnanimité", "majesté", "majorité", "mal-aimé", "mal-baisé", "malhonnêteté", "malignité", "malinké", "malléabilité", "malpropreté", "maniabilité", "manoeuvrabilité", "marginalité", "masculinité", "maskinongé", "massivité", "matérialité", "maternité", "matité", "maturité", "mauvaiseté", "méchanceté", "médiocrité", "médiumnité", "mémé", "mémorabilité", "mendicité", "mensualité", "mentalité", "merveillosité", "méticulosité", "mi-capacité", "mi-été", "mi-meublé", "mi-porté", "mi-réalité", "mi-résigné", "miché", "microgravité", "minorité", "mitoyenneté", "mixité", "mobilité", "mocheté", "modalité", "modernité", "modicité", "moment-clé", "mondanité", "monstruosité", "mont-de-piété", "monumentalité", "mooré", "moralité", "morbidité", "morosité", "mortalité", "mot-clé", "motilité", "motricité", "mousmé", "mucosité", "multiplicité", "multipropriété", "municipalité", "musicalité", "mutabilité", "mutité", "mutualité", "naïveté", "narghilé", "narguilé", "natalité", "nationalité", "nativité", "navigabilité", "nébulosité", "négativité", "néné", "nervosité", "nescafé", "netteté", "neutralité", "névé", "niakoué", "niébé", "nocivité", "non-conformité", "non-culpabilité", "nordicité", "normalité", "notabilité", "notoriété", "nouveauté", "nouvelleté", "nubilité", "nudité", "nue-propriété", "nullité", "nuptialité", "papauté", "papé", "parenté", "parité", "partialité", "particularité", "passiveté", "passivité", "pâté", "paternité", "pause-café", "pauses-café", "pauvreté", "pédé", "pédégé", "pénalité", "pépé", "pérennité", "perfectibilité", "périodicité", "perméabilité", "permissivité", "péroné", "perpétuité", "perplexité", "perré", "personnage-clé", "personnalité", "perspicacité", "perversité", "pèse-bébé", "petit-salé", "photosensibilité", "phrase-clé", "pilosité", "pisé", "pitié", "placidité", "plasticité", "plausibilité", "pluralité", "pluviosité", "point-clé", "poiré", "poire-vérité", "polarité", "polycopié", "polytonalité", "ponctualité", "pongé", "popularité", "porosité", "portabilité", "porte-bébé", "porte-clé", "position-clé", "positivité", "possessivité", "possibilité", "poste-clé", "postérité", "potentialité", "pousse-café", "pré", "pré-salé", "précarité", "préciosité", "précocité", "prématurité", "prévisibilité", "prévôté", "prieuré", "primauté", "principauté", "priorité", "privauté", "probabilité", "probité", "prodigalité", "productivité", "profitabilité", "prolixité", "promiscuité", "proportionnalité", "propreté", "propriété", "prospérité", "proximité", "psyché", "puberté", "publicité", "pudicité", "puérilité", "pugnacité", "puîné", "pureté", "pusillanimité", "qualité", "quantité", "quarté", "quasi-impossibilité", "quasi-impunité", "quasi-nudité", "quasi-totalité", "quasi-unanimité", "question-clé", "quinté", "quotidienneté", "quotité", "radioactivité", "raisiné", "rapacité", "raphé", "rapidité", "rareté", "rationalité", "raucité", "ré", "réactivité", "réalité", "récépissé", "réceptivité", "recevabilité", "réciprocité", "récré", "régularité", "relativité", "religiosité", "rentabilité", "reportage-vérité", "respectabilité", "responsabilité", "réversibilité", "rigidité", "risibilité", "rivalité", "romanité", "rotondité", "roulé-boulé", "royauté", "rugosité", "rusticité", "sagacité", "saint-honoré", "sainteté", "saké", "salacité", "saleté", "salinité", "salmonidé", "salubrité", "santé", "sapidité", "satiété", "sauveté", "scène-clé", "scientificité", "scissiparité", "scolarité", "scrupulosité", "sécurité", "sédentarité", "sélectivité", "semi-liberté", "séné", "sénevé", "sénilité", "sensibilité", "sensorialité", "sensualité", "sentimentalité", "septicité", "sérénité", "sergé", "séropositivité", "sérosité", "serviabilité", "servilité", "sévérité", "sexualité", "similarité", "simplicité", "simultanéité", "sincérité", "singularité", "sinuosité", "sobriété", "sociabilité", "société", "solennité", "solidarité", "solidité", "solubilité", "soluté", "solvabilité", "sommité", "somptuosité", "sonorité", "sordidité", "sororité", "soudaineté", "sous-comité", "sous-humanité", "souveraineté", "spasticité", "spécialité", "spécificité", "sphéricité", "spiritualité", "spontanéité", "sportivité", "spumosité", "stabilité", "sténopé", "stérilité", "stupidité", "suavité", "subjectivité", "sublimité", "subtilité", "succédané", "suggestibilité", "suggestivité", "superficialité", "superfluité", "supériorité", "supermarché", "supraconductivité", "suractivité", "surcapacité", "surdité", "sûreté", "surgé", "surhumanité", "surintensité", "surréalité", "susceptibilité", "suzeraineté", "synthé", "taboulé", "taciturnité", "tamouré", "tangibilité", "tarpé", "technicité", "télé", "témérité", "témoin-clé", "temporalité", "ténacité", "tendreté", "ténébrionidé", "ténuité", "territorialité", "tévé", "thé", "théâtralité", "tiaré", "timidité", "tollé", "tonalité", "tonicité", "totalité", "toxicité", "traçabilité", "tranquillité", "translucidité", "transsexualité", "trinité", "trivialité", "tsé-tsé", "tubérosité", "turbé", "vacuité", "vahiné", "validité", "vanité", "variabilité", "variété", "vassalité", "vastité", "velléité", "vélocité", "vénalité", "vénusté", "véracité", "verbosité", "vérité", "versatilité", "verticalité", "vétusté", "viabilité", "vicinalité", "vicomté", "viduité", "virginité", "virilité", "virtualité", "virtuosité", "viscosité", "visibilité", "vitalité", "vivacité", "volatilité", "volonté", "volubilité", "volupté", "voracité", "vulgarité", "vulnérabilité", "batée", "becquée", "billevesée", "bolée", "bondrée", "borée", "bouée", "bougainvillée", "brouettée", "buée", "caducée", "canne-épée", "casserolée", "cavée", "centaurée", "cépée", "céphalée", "charretée", "chaudronnée", "chicorée", "chorée", "cochlée", "cochonnée", "colée", "contre-allée", "contre-plongée", "corvée", "coryphée", "cucurbitacée", "cuillerée", "culée", "cylindrée", "demi-journée", "demi-volée", "denrée", "dernière-née", "diarrhée", "diatomée", "dionée", "dragée", "dulcinée", "dysménorrhée", "dyspnée", "fée", "feuillée", "flopée", "fournée", "fricassée", "friselée", "galathée", "galée", "giboulée", "giroflée", "gonorrhée", "goulée", "graminée", "guinée", "gynécée", "haquenée", "hottée", "hyménée", "hyperborée", "hypogée", "journée", "lance-fusée", "litée", "logorrhée", "lycée", "macchabée", "mainlevée", "maisonnée", "mal-aimée", "mal-baisée", "maréchaussée", "marée", "mausolée", "mélopée", "mi-effrontée", "mi-journée", "miellée", "mijaurée", "mosquée", "moteur-fusée", "muflée", "nausée", "nuée", "nuitée", "panacée", "pâtée", "peignée", "pelletée", "pépée", "périgée", "périnée", "pharmacopée", "pipée", "platée", "pochetée", "pochetée", "poignée", "poirée", "poisson-épée", "porte-épée", "potée", "poupée", "première-née", "prérentrée", "presse-purée", "prytanée", "purée", "quasi-fiancée", "ramée", "raz-de-marée", "resucée", "rétrofusée", "rez-de-chaussée", "risée", "ruchée", "scarabée", "séborrhée", "sigisbée", "simagrée", "singe-araignée", "soirée", "solanacée", "tablée", "tinée", "trachée", "trâlée", "transfusée", "travée", "trépanée", "trochée", "trophée", "vallée", "ventrée", "vesprée"];
Ui.others = ["bé", "cré", "crédié", "é", "loucedé", "eussé", "hé", "malgré", "moitié-moitié", "ohé", "olé", "ollé", "sacrédié", "quasi-instantanée"];
Object.defineProperty(ez, "__esModule", {
  value: !0
});
ez.default = void 0;
var G5a = K, V5a = Y5a(cT), K5a = ee, VP = nt, Fu = Ui;
function Y5a(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  precedenceException: Q5a,
  directPrecedenceException: X5a,
  values: Z5a
} = K5a.languageProcessing, {
  Clause: J5a
} = Z5a;
class eWa extends J5a {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, V5a.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns {boolean} Returns true if no exception is found.
   */
  checkParticiples() {
    const a = this.getClauseText(), t = this.getParticiples().filter((n) => !n.startsWith("l'") && !n.startsWith("d'") && !(0, G5a.includes)(Fu.others, n) && !this.isOnAdjectiveVerbExceptionList(n) && !this.isOnNounExceptionList(n) && !X5a(a, n, VP.cannotDirectlyPrecedePassiveParticiple) && !Q5a(a, n, VP.cannotBeBetweenPassiveAuxiliaryAndParticiple));
    this.setPassive(t.length > 0);
  }
  /**
   * Checks whether the participle is on an exception list of words that look like participles but are adjectives or verbs.
   *
   * @param {string}	participle	The participle to check.
   *
   * @returns {boolean}	Whether or not the participle is on the adjective and verb exception list.
   */
  isOnAdjectiveVerbExceptionList(a) {
    return Fu.adjectivesVerbs.includes(a) ? !0 : (a.endsWith("es") ? a = a.slice(0, -2) : (a.endsWith("e") || a.endsWith("s")) && (a = a.slice(0, -1)), Fu.adjectivesVerbs.includes(a));
  }
  /**
   * Checks whether the participle is on an exception list of words that look like participles but are nouns.
   *
   * @param {string}	participle	The participle to check.
   *
   * @returns {boolean}	Whether or not the participle is on the noun exception list.
   */
  isOnNounExceptionList(a) {
    return Fu.nouns.includes(a) ? !0 : (a.endsWith("s") && (a = a.slice(0, -1)), Fu.nouns.includes(a));
  }
}
ez.default = eWa;
var az = {};
Object.defineProperty(az, "__esModule", {
  value: !0
});
az.default = void 0;
az.default = ["être", "d'être", "suis", "es", "est", "sommes", "êtes", "sont", "n'est", "n'es", "n'êtes", "été", "j'étais", "étais", "était", "étions", "étiez", "étaient", "c'était", "n'étais", "n'était", "n'étions", "n'étiez", "n'étaient", "serai", "seras", "sera", "serons", "serez", "seront", "sois", "soit", "soyons", "soyez", "soient", "fusse", "fusses", "fût", "fussions", "fussiez", "fussent", "serais", "serait", "serions", "seriez", "seraient", "fus", "fut", "fûmes", "fûtes", "furent", "suis-je", "es-tu", "est-il", "est-elle", "est-on", "sommes-nous", "êtes-vous", "sont-ils", "sont-elles", "est-ce", "étais-je", "étais-tu", "était-il", "était-elle", "était-on", "était-ce", "étions-nous", "étiez-vous", "étaient-ils", "étaient-elles", "serai-je", "seras-tu", "sera-t-il", "sera-t-elle", "sera-t-on", "sera-ce", "serons-nous", "serez-vous", "seront-ils", "seront-elles", "serais-je", "serais-tu", "serait-il", "serait-elle", "serait-on", "serait-ce", "serions-nous", "seriez-vous", "seraient-ils", "seraient-elles", "fus-je", "fus-tu", "fut-il", "fut-elle", "fut-on", "fut-ce", "fûmes-nous", "fûtes-vous", "furent-ils", "furent-elles"];
Object.defineProperty(uT, "__esModule", {
  value: !0
});
uT.default = dWa;
var aWa = ee, tWa = gT(ez), KP = gT(az), nWa = gT(_p);
function gT(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  createRegexFromArray: nm,
  getClauses: rWa
} = aWa.languageProcessing, sWa = ["le", "la", "les", "une", "l'un", "l'une"], iWa = ["se", "me", "te", "s'y", "m'y", "t'y", "nous nous", "vous vous"], oWa = ["c'", "s'", "peut-"], lWa = {
  Clause: tWa.default,
  stopwords: nWa.default,
  auxiliaries: KP.default,
  regexes: {
    auxiliaryRegex: nm(KP.default),
    stopCharacterRegex: /(,)(?=[ \n\r\t'"+\-»«‹›<>])/ig,
    followingAuxiliaryExceptionRegex: nm(sWa),
    directPrecedenceExceptionRegex: nm(iWa),
    elisionAuxiliaryExceptionRegex: nm(oWa, !0)
  }
};
function dWa(e) {
  return rWa(e, lWa);
}
var mT = {}, fT = {};
Object.defineProperty(fT, "__esModule", {
  value: !0
});
fT.default = wWa;
var uWa = ee;
const {
  exceptionListHelpers: {
    checkIfWordEndingIsOnExceptionList: cWa
  },
  regexHelpers: {
    applyAllReplacements: YP
  }
} = uWa.languageProcessing, pWa = function(e, a) {
  let t;
  e.search(new RegExp(a.rvRegex1)) !== -1 || e.search(new RegExp(a.rvRegex2)) !== -1 ? t = 3 : (t = e.substring(1).search(new RegExp(a.rvRegex3)), t === -1 ? t = e.length : t += 2);
  const n = new RegExp(a.r1Regex);
  let r = e.search(n), o = "";
  r === -1 ? r = e.length : (r += 2, o = e.substring(r));
  let l = o.search(n);
  return l === -1 ? l = e.length : (l += 2, l += r), r !== -1 && r < 3 && (r = 3), [r, l, t];
}, gWa = function(e, a, t, n, r) {
  const o = e.search(new RegExp(a.standardSuffixes1)), l = e.search(new RegExp(a.standardSuffixes2)), u = e.search(new RegExp(a.standardSuffixes3[0])), c = e.search(new RegExp(a.standardSuffixes4[0])), f = e.search(new RegExp(a.standardSuffixes5[0])), y = e.search(new RegExp(a.standardSuffixes6)), z = e.search(new RegExp(a.standardSuffixes7)), v = e.search(new RegExp(a.standardSuffixes8)), O = e.search(new RegExp(a.standardSuffixes9[0])), I = e.search(new RegExp(a.standardSuffixes10[0])), A = e.search(new RegExp(a.standardSuffixes11[0])), x = e.search(new RegExp(a.standardSuffixes12)), w = e.search(new RegExp(a.standardSuffixes13[0])), j = e.search(new RegExp(a.standardSuffixes14[0])), S = e.search(new RegExp(a.standardSuffixes15));
  if (o !== -1 && o >= n)
    e = e.substring(0, o);
  else if (l !== -1 && l >= n) {
    e = e.substring(0, l);
    const P = e.search(new RegExp(a.suffixesPrecedingChar1[0]));
    P !== -1 && P >= n ? e = e.substring(0, P) : e = e.replace(new RegExp(a.suffixesPrecedingChar1[0]), a.suffixesPrecedingChar1[1]);
  } else if (u !== -1 && u >= n)
    e = e.slice(0, u) + a.standardSuffixes3[1];
  else if (c !== -1 && c >= n)
    e = e.slice(0, c) + a.standardSuffixes4[1];
  else if (f !== -1 && f >= n)
    e = e.slice(0, f) + a.standardSuffixes5[1];
  else if (x !== -1 && x >= t)
    e = e.substring(0, x + 1);
  else if (y !== -1 && y >= r) {
    e = e.substring(0, y);
    const P = e.search(new RegExp(a.suffixesPrecedingChar2[0])), M = e.search(new RegExp(a.suffixesPrecedingChar4[0])), G = e.search(new RegExp(a.suffixesPrecedingChar5[0])), U = e.search(new RegExp(a.suffixesPrecedingChar6[0]));
    if (P >= n) {
      e = e.slice(0, P) + a.suffixesPrecedingChar2[1];
      const V = e.search(new RegExp(a.suffixesPrecedingChar3[0]));
      V >= n && (e = e.slice(0, V) + a.suffixesPrecedingChar3[1]);
    } else e.search(new RegExp(a.suffixesPrecedingChar4[0])) !== -1 ? M >= n ? e = e.substring(0, M) : M >= t && (e = e.substring(0, M) + a.suffixesPrecedingChar4[1]) : G >= n ? e = e.slice(0, G) + a.suffixesPrecedingChar5[1] : U >= r && (e = e.slice(0, U) + a.suffixesPrecedingChar6[1]);
  } else if (z !== -1 && z >= n) {
    e = e.substring(0, z);
    const P = e.search(new RegExp(a.suffixesPrecedingChar7[0])), M = e.search(new RegExp(a.suffixesPrecedingChar1[0]));
    P !== -1 ? P >= n ? e = e.substring(0, P) : e = e.substring(0, P) + a.suffixesPrecedingChar7[1] : M !== -1 ? M !== -1 && M >= n ? e = e.substring(0, M) : e = e.substring(0, M) + a.suffixesPrecedingChar1[1] : e.search(new RegExp(a.suffixesPrecedingChar2[0])) >= n && (e = e.replace(new RegExp(a.suffixesPrecedingChar2[0]), a.suffixesPrecedingChar2[1]));
  } else if (v !== -1 && v >= n)
    e = e.substring(0, v), e.search(new RegExp(a.suffixesPrecedingChar3[0])) >= n && (e = e.replace(new RegExp(a.suffixesPrecedingChar3[0]), a.suffixesPrecedingChar3[1]), e.search(new RegExp(a.suffixesPrecedingChar1[0])) >= n ? e = e.replace(new RegExp(a.suffixesPrecedingChar1[0]), "") : e = e.replace(new RegExp(a.suffixesPrecedingChar1[0]), a.suffixesPrecedingChar1[1]));
  else if (O !== -1)
    e = e.replace(new RegExp(a.standardSuffixes9[0]), a.standardSuffixes9[1]);
  else if (I >= t)
    e = e.replace(new RegExp(a.standardSuffixes10[0]), a.standardSuffixes10[1]);
  else if (A !== -1) {
    const P = e.search(new RegExp(a.standardSuffixes11[0]));
    P >= n ? e = e.substring(0, P) : P >= t && (e = e.substring(0, P) + a.standardSuffixes11[1]);
  } else w !== -1 && w >= r ? e = e.replace(new RegExp(a.standardSuffixes13[0]), a.standardSuffixes13[1]) : j !== -1 && j >= r ? e = e.replace(new RegExp(a.standardSuffixes14[0]), a.standardSuffixes14[1]) : S !== -1 && S >= r && (e = e.substring(0, S + 1));
  return e;
}, mWa = function(e, a, t, n) {
  let r = !1;
  if (a === e.toLowerCase() || cWa(a, n.exceptions)) {
    r = !0;
    const o = new RegExp(n.suffixes[0]);
    e.search(o) >= t && (e = e.replace(o, n.suffixes[1]));
  }
  return {
    word: e,
    step2aDone: r
  };
}, fWa = function(e, a, t, n, r, o) {
  const l = o.regularStemmer.otherVerbSuffixes;
  if (a && t === e) {
    const u = new RegExp(l[0]);
    if (e.search(u) >= n)
      return e.replace(u, "");
    for (let f = 1; f < l.length; f++) {
      const y = new RegExp(l[f]);
      if (e.search(y) >= r)
        return e.replace(y, "");
    }
    if (e.endsWith("ions"))
      return e;
    const c = new RegExp(o.regularStemmer.verbSuffixOns);
    e.search(c) >= r && (e = e.replace(c, ""));
  }
  return e;
}, hWa = function(e, a, t, n) {
  const r = n.residualSuffixes;
  e.search(new RegExp(r.residualSuffixes1[0])) >= a && (e = e.replace(new RegExp(r.residualSuffixes1[0]), r.residualSuffixes1[1]));
  const o = e.search(new RegExp(r.residualSuffix2));
  if (o >= t && e.search(new RegExp(r.residualSuffix3)) >= a)
    e = e.substring(0, o);
  else {
    let l = e.search(new RegExp(r.residualSuffixes4[0]));
    l >= a ? e = e.substring(0, l) + r.residualSuffixes4[1] : (l = e.search(new RegExp(r.residualSuffix5)), l >= a ? e = e.substring(0, l) : (l = e.search(new RegExp(r.residualSuffix6[0])), l >= a && (e = e.substring(0, l) + r.residualSuffix6[1])));
  }
  return e;
}, yWa = function(e, a) {
  for (const t of a)
    if (t[1].includes(e))
      return t[0];
  return null;
}, zWa = function(e, a) {
  for (const t of a.adjectives)
    if (t.includes(e))
      return t[0];
  for (const t of a.verbs)
    if (t.includes(e))
      return t[0];
}, bWa = function(e, a) {
  for (const t of a.cannotTakeExtraSuffixS)
    if (t[0] === e)
      return t[1];
  e.endsWith("s") && (e = e.slice(0, -1));
  for (const t of a.canTakeExtraSuffixS)
    if (t[0] === e)
      return t[1];
};
function wWa(e, a) {
  e = e.toLowerCase();
  const t = e, n = bWa(e, a.shortWordsAndStems);
  if (n)
    return n;
  const r = yWa(e, a.exceptionStemsWithFullForms);
  if (r)
    return r;
  if (e.endsWith("x") && a.pluralsWithXSuffix.includes(e))
    return e.slice(0, -1);
  if (e.endsWith("s") && a.sShouldNotBeStemmed.includes(e))
    return e;
  const o = a.nonVerbsOnEnt;
  if (e.endsWith("ent") && o.includes(e))
    return e;
  if (e.endsWith("ents") && o.includes(e.slice(0, -1)))
    return e.slice(0, -1);
  const l = a.nonVerbsOnOns;
  if (e.endsWith("ons") && l.includes(e))
    return e.slice(0, -1);
  e = YP(e, a.regularStemmer.preProcessingStepsRegexes);
  const [u, c, f] = pWa(e, a.regularStemmer.rIntervals);
  e = gWa(e, a.regularStemmer.standardSuffixes, u, c, f);
  const y = e, z = mWa(e, t, f, a.regularStemmer.verbSuffixesWithIBeginning);
  e = z.word;
  const v = z.step2aDone;
  if (o.includes(e) || (e = fWa(e, v, y, c, f, a)), t === e.toLowerCase())
    e = hWa(e, f, c, a.regularStemmer);
  else {
    const A = a.regularStemmer.yAndSoftCEndingAndReplacement.yEndingAndReplacement, x = a.regularStemmer.yAndSoftCEndingAndReplacement.softCEndingAndReplacement;
    e.endsWith(A[0]) ? e = e.slice(0, -1) + A[1] : e.endsWith(x[0]) && (e = e.slice(0, -1) + x[1]);
  }
  e = YP(e, a.regularStemmer.finalConsonantUndoubling);
  const O = a.regularStemmer.unaccentERegex;
  e = e.replace(new RegExp(O[0]), O[1]), e = e.toLowerCase();
  const I = zWa(e, a.stemsThatBelongToOneWord);
  return I || e;
}
Object.defineProperty(mT, "__esModule", {
  value: !0
});
mT.default = TWa;
var vWa = K, kWa = ee, _Wa = EWa(fT);
function EWa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: AWa
} = kWa.languageProcessing;
function TWa(e) {
  const a = (0, vWa.get)(e.getData("morphology"), "fr", !1);
  return a ? (t) => (0, _Wa.default)(t, a) : AWa;
}
var hT = {};
Object.defineProperty(hT, "__esModule", {
  value: !0
});
hT.default = xWa;
var $Wa = ee;
const {
  formatNumber: jWa
} = $Wa.helpers;
function xWa(e) {
  const a = 207 - 1.015 * e.numberOfWords / e.numberOfSentences - 73.6 * e.numberOfSyllables / e.numberOfWords;
  return jWa(a);
}
Object.defineProperty(KA, "__esModule", {
  value: !0
});
var Tq = KA.default = void 0, SWa = ee, OWa = go(Zy), IWa = nt, CWa = go(_p), PWa = go(Tr), RWa = go(Jy), DWa = go(q5a), NWa = go(uT), LWa = go(mT), MWa = go(hT);
function go(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: qWa
} = SWa.languageProcessing;
let FWa = class extends qWa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), Object.assign(this.config, {
      language: "fr",
      passiveConstructionType: "periphrastic",
      firstWordExceptions: OWa.default,
      functionWords: IWa.all,
      stopWords: CWa.default,
      transitionWords: PWa.default,
      twoPartTransitionWords: RWa.default,
      syllables: DWa.default
    }), Object.assign(this.helpers, {
      getClauses: NWa.default,
      getStemmer: LWa.default,
      fleschReadingScore: MWa.default
    });
  }
};
Tq = KA.default = FWa;
var yT = {}, hd = {}, $r = {};
Object.defineProperty($r, "__esModule", {
  value: !0
});
$r.singleWords = $r.multipleWords = $r.default = $r.allWords = void 0;
const BWa = $r.singleWords = ["לכן", "משום‎", "בגלל", "מפני", "אחרי", "לפני", "חוץ", "בזכות", "כתוצאה", "הודות", "בשביל", "למרות‎", "בשל‎", "ו", "או", "אבל", "אולם", "אך", "אם", "גם", "רק", "אכן", "אלא", "עדיין", "כאשר", "אז", "לכן", "כבר", "לאחר", "אפילו", "אף", "כך", "כדי", "על", "עד", "בשנת", "כמו", "שני", "באופן", "במהלך", "במקום", "וכן", "בעיקר", "מאז", " בינתיים", "במקום", "תחת", "מתוך", "מול", "כגון", "באמצעות", "מכן", "במשך", "ואף", "ועל", "לעתים", "בנוסף", "בעקבות", "לפי", "בקרב", "כי", "ראשית", "שנית", "תחילה", "לבסוף", "הבא", "ברם", "ואילו", "להפך", "כנגד", "מנגד", "אמנם", "אדרבא", "לחילופין", "בייחוד", "במיוחד", "ודאי", "ואפילו", "לו", "אילו", "לולא", "אלמלא", "אילולא", "מאחורי", "בקרבת", "כאן", "שם", "כן", "למעט", "בלבד", "מלבד", "שוב", "כלומר", "דהיינו", "לאמור", "כאמור", "כידוע", "כש", "אחר-כך", "כעבור", "לאחרונה", "בטרם", "עכשיו", "עתה", "מלכתחילה", "למען", "פן", "לבל", "שמא", "עקב", "לרגל", "מפאת", "בגין", "בהתאם", "לפיכך", "למשל", "לדוגמה", "כדוגמת", "לסיכום", "בהתחשב", "בקיצור", "בקצרה", "חרף"], WWa = $r.multipleWords = ["כתוצאה מכך", "כתוצאה מ", "בעקבות ה", "בעקבות זאת", "לעומת זאת", "אלא אם כן", "בזמן ש", "מתי ש", "אף על פי ש", "אף על פי", "חוץ מ", "אחרי ש", "לפני ש", "בעוד ש", "בגלל ה", "הודות ל", "בניגוד ל", "מפני ש", "אלא ש", "קודם כל", "והחשוב ביותר", "לפני כן", "לאחר מכן", "אחר כך", "שלב ראשון", "בניגוד לכך", "ראוי לציין", "יש להדגיש", "ללא ספק", "קל וחומר", "אין ספק ש", "לא כל שכן", "בתנאי ש", "בדומה ל", "כשם ש", "כפי ש", "כך גם", "יחסית ל", "בהשוואה ל", "לשם כך", "במקביל ל", "במידה ש", "במקום ש", "על יד", "בסמוך ל", "במרחק מה", "אל אשר", "מעבר ל", "כמו כן", "יתר על כן", "זאת ועוד", "נוסף על כך", "פרט ל", "למעלה מכך", "פנים נוספות לעניין", "יתרה מכך", "אך ורק", "מעבר לכך", "זאת אומרת", "במילים אחרות", "רוצה לומר", "הווה אומר", "משתמע מזאת", "הוא אשר", "ללמד ש", "פירושו של דבר", "לשון אחרת", "בהקשר זה", "דרך אגב", "כדי ש", "כנזכר לעיל", "בקשר לכך", "במסגרת זו", "עד ש", "בשעה ש", "כל זמן ש", "לפי שעה", "בזמן האחרון", "עד כה", "בו בזמן", "כל אימת ש", "על מנת", "לתכלית זו", "במטרה ל", "מחמת ה", "הואיל ו", "מאחר ש", "היות ש", "כיוון ש", "יען כי", "באופן ש", "בצורה ש", "כמו ש", "אם כן", "אפוא", "על כן", "משום כך", "עקב כך", "בשל כך", "אי לכך", "נובע מכך", "הודות לכך", "כמו למשל", "סיכומו של דבר", "מכל האמור ניתן לומר", "בסך הכול", "בכל מקרה", "בסיכום כולל", "לטווח ארוך", "על כל פנים", "אף על פי כן", "על אף ש", "על אף זאת", "אף ש", "למרות זאת", "בכל אופן", "עם זאת", "אם כי", "גם אם"], UWa = $r.allWords = BWa.concat(WWa);
$r.default = UWa;
Object.defineProperty(hd, "__esModule", {
  value: !0
});
hd.default = hd.all = void 0;
var HWa = $r, GWa = VWa(Ba);
function VWa(e) {
  return e && e.__esModule ? e : { default: e };
}
const KWa = [
  // 1-10
  "אחת",
  "אחד",
  "שתים",
  "שנים",
  "שתיים",
  "שלש",
  "שלשה",
  "ארבע",
  "ארבעה",
  "חמש",
  "חמשה",
  "שש",
  "ששה",
  "שבע",
  "שבעה",
  "שמונה",
  "שמונה",
  "תשע",
  "תשעה",
  "עשר",
  "עשרה",
  // 20
  "עשרים",
  // 100
  "מאה",
  // 1000
  "אלף",
  // Million
  "מיליון",
  // Billion
  "מילירד"
], YWa = [
  // Ordinals for 1-10; for higher numbers ordinal numerals are the same as the cardinals.
  "ראשון",
  "ראשונה",
  "שני",
  "שניה",
  "שלישי",
  "שלישית",
  "רביעי",
  "רביעית",
  "חמישי",
  "חמישית",
  "ששי",
  "ששית",
  "שביעי",
  "שביעית",
  "שמיני",
  "שמינית",
  "תשיעי",
  "תשיעית",
  "עשירי",
  "עשירית"
], QWa = [
  "אני‎",
  "אנחנו‎",
  "אנו‎",
  "אתה‎",
  "את‎",
  "אתם‎",
  "אתן‎",
  "הוא‎",
  "היא‎",
  "הם‎",
  "הן‎",
  // Personal pronouns - prefixed forms
  "שאני",
  "שאתה",
  "שהוא",
  "ואני",
  "שהיא"
], XWa = [
  // Demonstrative pronoun "ze"
  "זה",
  "זאת",
  "זו",
  "ההוא",
  "ההיא",
  "איזה",
  "איזו",
  "אלה",
  "אלו",
  "ההם",
  "ההן",
  "אילו",
  "לזה",
  // Demonstrative pronoun "ze" - prefixed forms
  "הזה",
  "שזה"
], ZWa = [
  // What
  "מה",
  // Who
  "מי",
  // Why
  "למה",
  // How much/many
  "כמה",
  // Particle for y/n questions
  "האם",
  // Where
  "איפה",
  // Which
  "איזה",
  "איזו",
  "אילו",
  // When
  "מתי",
  "כאשר",
  // How
  "איך",
  // If
  "אי",
  // Unless
  "אלמלא"
], JWa = [
  // All
  "כולם",
  "כול",
  // Most
  "רוב",
  // Part
  "חלק",
  // Less
  "פחות",
  // Few, little
  "מעט",
  // Many, much
  "הרבה",
  // Many, numerous
  "רב",
  "רבה",
  "רבים",
  "רבות",
  // At least
  "לפחות"
], eUa = ["עצמי", "לעצמי", "בעצמי", "עצמך", "לעצמך", "בעצמך", "עצמך", "לעצמך", "בעצמך", "עצמו", "עצמה", "עצמנו", "עצמכם", "עצמכן", "עצמם", "עצמן"], aUa = [
  // Something
  "משהו",
  // Someone
  "מישהו",
  "מישהי",
  // Nothing
  "כלום"
], tUa = [
  // Each paradigm is one preposition with different pronominal affixes and possibly prefixes
  // Definite object preposition
  "את",
  "אותי",
  "אותנו",
  "אותך",
  "אתכם",
  "אתכן",
  "אותו",
  "אותה",
  "אותם",
  "אותן",
  "שאת",
  // Possessive preposition
  "של",
  "שלי",
  "שלנו",
  "שלך",
  "שלכם",
  "שלכן",
  "שלו",
  "שלהם",
  "שלהן",
  // To/for/of
  "לי",
  "לך",
  "לו",
  "לה",
  "לנו",
  "לכם",
  "לכן",
  "להם",
  "להן",
  // On/upon
  "על",
  "עליי",
  "עלינו",
  "עליך",
  "עלייך",
  "עליכם",
  "עליכן",
  "עליו",
  "עליה",
  "עליהם",
  "עליהן",
  "גבי",
  "גבנו",
  "גבך",
  "גבה",
  "גבנו",
  "גבכם",
  "גבכן",
  "גבם",
  "גבן",
  // To/towards/into
  "אל",
  "אליי",
  "אלינו",
  "אליך",
  "אלייך",
  "אליכם",
  "אליכן",
  "אליו",
  "אליה",
  "אליהם",
  "אליהן",
  "ואל",
  // With
  "עם",
  "איתי",
  "עימי",
  "איתנו",
  "עימנו",
  "איתך",
  "עימך",
  "איתכם",
  "איתכן",
  "איתו",
  "איתה",
  "איתם",
  "עימם",
  // As
  "כמו",
  "כמוני",
  "כמונו",
  "כמוך",
  "כמוך",
  "כמוכם",
  "כמוכן",
  "כמוהו",
  "כמוה",
  "כמוהם",
  "כמוהן",
  "כמוכם",
  "כמוכן",
  // Before
  "לפני",
  "לפניי",
  "לפנינו",
  "לפניך",
  "לפנייך",
  "לפניו",
  "לפניה",
  "לפניכם",
  "לפניכן",
  "לפניהם",
  "לפניהן",
  // In
  "ובכן",
  "בן",
  "בי",
  "בנו",
  "בך",
  "בכם",
  "בכן",
  "בו",
  "בה",
  "בהם",
  "בהן",
  // Because
  "בגלל",
  "בגללי",
  "בגללנו",
  "בגללך",
  "בגללכם",
  "בגללכן",
  "בגללו",
  "בגללה",
  "בגללם",
  "בגללן",
  // After
  "אחר",
  "אחריי",
  "אחרינו",
  "אחריך",
  "אחרייך",
  "אחריכם",
  "אחריכן",
  "אחריו",
  "אחריה",
  "אחריהם",
  "אחריהן",
  // For the sake of
  "בשביל",
  "בשבילי",
  "בשבילנו",
  "בשבילך",
  "בשבילו",
  "בשבילה",
  "בשבילכם",
  "בשבילכן",
  "בשבילם",
  "בשבילן",
  // Instead of
  "במקום",
  "במקומי",
  "במקומנו",
  "במקומך",
  "במקומו",
  "במקומה",
  "במקומכם",
  "במקומכן",
  "במקומם",
  "במקומן",
  // Until, up to
  "עד",
  // About
  "אודות",
  "אודותי",
  "אודותנו",
  "אודותך",
  "אודותכם",
  "אודותכן",
  "אודותו",
  "אודותה",
  "אודותם",
  "אודותן",
  // Behind
  "מאחורי",
  "מאחוריי",
  "מאחורינו",
  "מאחוריך",
  "מאחורייך",
  "מאחוריכם",
  "מאחוריכן",
  "מאחוריו",
  "מאחוריה",
  "מאחוריהם",
  "מאחוריהן",
  // At
  "אצל",
  "אצלי",
  "אצלנו",
  "אצלך",
  "אצלך",
  "אצלכם",
  "אצלכן",
  "אצלו",
  "אצלה",
  "אצלם",
  "אצלן",
  // By means of
  "באמצעות",
  "באמצעותי",
  "באמצעותנו",
  "באמצעותך",
  "באמצעותכם",
  "באמצעותכן",
  "באמצעותו",
  "באמצעותה",
  "באמצעותם",
  "באמצעותן",
  // Due to
  "בזכות",
  "בזכותי",
  "בזכותנו",
  "בזכותך",
  "בזכותכם",
  "בזכותכן",
  "בזכותו",
  "בזכותה",
  "בזכותם",
  "בזכותן",
  // Between
  "ביני",
  "בינינו",
  "בינך",
  "ביניכם",
  "ביניכן",
  "בינו",
  "בינה",
  "ביניהם",
  "ביניהן",
  // Without
  "בלעדיי",
  "בלעדינו",
  "בלעדיך",
  "בלעדייך",
  "בלעדיכם",
  "בלעדיכן",
  "בלעדיו",
  "בלעדיה",
  "בלעדיהם",
  "בלעדיהן",
  // In favor of
  "בעד",
  "בעדי",
  "בעדנו",
  "בעדך",
  "בעדך",
  "בעדכם",
  "בעדכן",
  "בעדו",
  "בעדה",
  "בעדם",
  "בעדן",
  // As a result of
  "בעקבות",
  "בעקבי",
  "בעקביי",
  "בעקבינו",
  "בעקביך",
  "בעקבייך",
  "בעקביכם",
  "בעקביכן",
  "בעקביו",
  "בעקביה",
  "בעקביהם",
  "בעקביהן",
  // Facing
  "בפני",
  "בפניי",
  "בפנינו",
  "בפניך",
  "בפנייך",
  "בפניכם",
  "בפניכן",
  "בפניו",
  "בפניה",
  "בפניהם",
  "בפניהן",
  // Among
  "בקרב",
  "בקרבי",
  "בקרבנו",
  "בקרבך",
  "בקרבך",
  "בקרבכם",
  "בקרבכן",
  "בקרבו",
  "בקרבה",
  "בקרבם",
  "בקרבן",
  // On behalf of
  "בשם",
  "בשמי",
  "בשמנו",
  "בשמך",
  "בשמך",
  "בשמכם",
  "בשמכן",
  "בשמו",
  "בשמה",
  "בשמם",
  "בשמן",
  // Inside
  "בתוך",
  "בתוכי",
  "בתוכנו",
  "בתוכך",
  "בתוכך",
  "בתוככם",
  "בתוככן",
  "בתוכו",
  "בתוכה",
  "בתוכם",
  "בתוכן",
  // As
  "כמוני",
  "כמונו",
  "כמוך",
  "כמוך",
  "כמוכם",
  "כמוכן",
  "כמוהו",
  "כמוה",
  "כמוהם",
  "כמוהן",
  // In relation
  "כלפי",
  "כלפיי",
  "כלפינו",
  "כלפיך",
  "כלפייך",
  "כלפיכם",
  "כלפיכן",
  "כלפיו",
  "כלפיה",
  "כלפיהם",
  "כלפיהן",
  // Against
  "כנגד",
  "כנגדי",
  "כנגדנו",
  "כנגדך",
  "כנגדך",
  "כנגדכם",
  "כנגדכן",
  "כנגדו",
  "כנגדה",
  "כנגדם",
  "כנגדן",
  // Along
  "לאורך",
  "לאורכי",
  "לאורכנו",
  "לאורכך",
  "לאורכך",
  "לאורככם",
  "לאורככן",
  "לאורכו",
  "לאורכה",
  "לאורכם",
  "לאורכן",
  // Regarding
  "לגבי",
  "לגביי",
  "לגבינו",
  "לגביך",
  "לגבייך",
  "לגביכם",
  "לגביכן",
  "לגביו",
  "לגביה",
  "לגביהם",
  "לגביהן",
  // According to
  "לדברי",
  "לדבריי",
  "לדברינו",
  "לדבריך",
  "לדברייך",
  "לדבריכם",
  "לדבריכן",
  "לדבריו",
  "לדבריה",
  "לדבריהם",
  "לדבריהן",
  // Near
  "ליד",
  "לידי",
  "לידנו",
  "לידך",
  "לידך",
  "לידכם",
  "לידכן",
  "לידו",
  "לידה",
  "לידם",
  "לידן",
  // For the sake of
  "למען",
  "למעני",
  "למעננו",
  "למענך",
  "למענך",
  "למענכם",
  "למענכן",
  "למענו",
  "למענה",
  "למענם",
  "למענן",
  // According to
  "לפי",
  "לפי",
  "לפינו",
  "לפיך",
  "לפיך",
  "לפיכם",
  "לפיכן",
  "לפיו",
  "לפיהו",
  "לפיה",
  "לפיהם",
  "לפיהן",
  // Towards
  "לקראת",
  "לקראתי",
  "לקראתנו",
  "לקראתך",
  "לקראתך",
  "לקראתכם",
  "לקראתכן",
  "לקראתו",
  "לקראתה",
  "לקראתם",
  "לקראתן",
  // Across
  "לרוחב",
  "לרוחבי",
  "לרוחבנו",
  "לרוחבך",
  "לרוחבך",
  "לרוחבכם",
  "לרוחבכן",
  "לרוחבו",
  "לרוחבה",
  "לרוחבם",
  "לרוחבן",
  // Opposite
  "מול",
  "מולי",
  "מולנו",
  "מולך",
  "מולך",
  "מולכם",
  "מולכן",
  "מולו",
  "מולה",
  "מולם",
  "מולן",
  // From
  "מן",
  "ממני",
  "ממנו",
  "מאיתנו",
  "ממך",
  "ממך",
  "מכם",
  "מכן",
  "ממנו",
  "ממנה",
  "מהם",
  "מהן",
  // Over
  "מעל",
  "מעליי",
  "מעלינו",
  "מעליך",
  "מעלייך",
  "מעליכם",
  "מעליכן",
  "מעליו",
  "מעליה",
  "מעליהם",
  "מעליהן",
  // From
  "מפני",
  "מפניי",
  "מפנינו",
  "מפניך",
  "מפנייך",
  "מפניכם",
  "מפניכן",
  "מפניו",
  "מפניה",
  "מפניהם",
  "מפניהן",
  // Below
  "מתחת",
  "מתחתיי",
  "מתחתינו",
  "מתחתיך",
  "מתחתייך",
  "מתחתיכם",
  "מתחתיכן",
  "מתחתיו",
  "מתחתיה",
  "מתחתיהם",
  "מתחתם",
  "מתחתיהן",
  "מתחתן",
  // For
  "עבור",
  "עבורי",
  "עבורנו",
  "עבורך",
  "עבורכם",
  "עבורכן",
  "עבורו",
  "עבורה",
  "עבורם",
  "עבורן",
  // Under
  "תחת",
  "תחתיי",
  "תחתינו",
  "תחתיך",
  "תחתייך",
  "תחתיכם",
  "תחתיכן",
  "תחתיו",
  "תחתיה",
  "תחתיהם",
  "תחתם",
  "תחתיהן",
  "תחתן",
  // Compared with
  "לעומת",
  "לעומתי",
  "לעומתנו",
  "לעומתך",
  "לעומתך",
  "לעומתכם",
  "לעומתכן",
  "לעומתו",
  "לעומתה",
  "לעומתם",
  "לעומתן",
  // Part of according to
  "פי"
], nUa = [
  // But
  "אבל",
  "אך",
  "אלא",
  // If
  "אם",
  // Then
  "אז",
  // Or
  "או",
  // In order to
  "כדי",
  // Because
  "כי",
  // Indeed
  "אכן",
  // By the way
  "אגב",
  // However
  "אולם",
  // Although
  "אע״פ",
  // Relative clause marker
  "אשר",
  // While
  "בעוד",
  // And/or
  "ו/או",
  // Since
  "יען",
  // Were it not for
  "לולא",
  // Unless
  "פן"
], rUa = [
  // Say
  "אומר",
  "אומרת",
  "אומרים",
  "אומרות",
  "אמרתי",
  "אמרנו",
  "אמרת",
  "אמרתם",
  "אמרתן",
  "אמר",
  "אמרה",
  "אמרו",
  "נאמר",
  "תאמר",
  "תאמרי",
  "תאמרו",
  "תאמרנה",
  "יאמר",
  "תאמר",
  "תאמרנה",
  "יאמר",
  "יאמרו",
  "אמור",
  "אמרי",
  "אמורנה",
  // Speak
  "מדבר",
  "מדברת",
  "מדברים",
  "מדברות",
  "דיברתי",
  "דיברנו",
  "דיברת",
  "דיברתם",
  "דיברתן",
  "דיבר",
  "דיברה",
  "דיברו",
  "אדבר",
  "נדבר",
  "תדבר",
  "תדברי",
  "תדברו",
  "תדברנה",
  "ידבר",
  "ידברו",
  "דבר‏",
  "דברי‏",
  "דברו‏",
  "דברנה‏",
  "לדבר",
  // Understand
  "מבין",
  "מבינה",
  "מבינים",
  "מבינות",
  "הבנתי",
  "הבינותי",
  "הבנו",
  "הבינונו",
  "הבנת",
  "הבינות",
  "הבנתם",
  "הבינותם",
  "הבנתן",
  "הבינותן",
  "הבין",
  "הבינה",
  "הבינו",
  "אבין",
  "נבין",
  "תבין",
  "תביני",
  "תבינו",
  "תבנה",
  "יבין",
  "יבינו",
  "תבינינה",
  "הבן‏",
  "הביני‏",
  "הבנה‏",
  "להבין",
  // Believe
  "מאמין",
  "מאמינה",
  "מאמינים",
  "מאמינות",
  "האמנתי",
  "האמנו",
  "האמנת",
  "האמנתם",
  "האמנתן",
  "האמין",
  "האמינה",
  "האמינו",
  "אאמין",
  "נאמין",
  "תאמין",
  "תאמיני",
  "תאמינו",
  "תאמנה",
  "יאמין",
  "יאמינו",
  "האמן‏",
  "האמיני‏",
  "האמינו‏",
  "האה‏",
  "להאמין",
  // Know
  "יודע",
  "יודעת",
  "יודעים",
  "יודעות",
  "ידעתי",
  "ידענו",
  "ידעת",
  "ידעתם",
  "ידעתן",
  "ידע",
  "ידעה",
  "ידעו",
  "אדע",
  "נדע",
  "תדע",
  "תדעי",
  "תדעו",
  "תדענה",
  "דע‏",
  "דעי‏",
  "דעו‏",
  "דענה‏",
  "לדעת",
  // Ask
  "שואל",
  "שואלת",
  "שואלים",
  "שואלות",
  "שאלתי",
  "שאלנו",
  "שאלת",
  "שאלתם",
  "שאלתן",
  "שאל",
  "שאלה",
  "שאלו",
  "אשאל",
  "נשאל",
  "תשאל",
  "תשאלי",
  "תשאלו",
  "תשאלנה",
  "ישאל",
  "ישאלו",
  "שאל‏",
  "שאלי‏",
  "שאלו‏",
  "שאלנה‏",
  "לשאול"
], sUa = [
  // Very
  "מאוד",
  // Definitely
  "בהחלט",
  // The most
  "ביותר",
  // Terribly
  "נורא",
  // Completely
  "לגמרי",
  // Enough
  "די"
], iUa = [
  // To be - infinitive
  "להיות",
  // To be - past
  "היי",
  "הייתי",
  "יהיה",
  "היית",
  "הייתה",
  "היינו",
  "הייתם",
  "הייתן",
  "היו",
  // To be - future
  "אהיה",
  "תהיה",
  "תהיי",
  "יהיה",
  "נהיה",
  "תהיו",
  "תהיינה",
  "יהיו",
  "היינה",
  // There is
  "יש",
  "שיש",
  // Here is
  "הנה",
  // There is not
  "אין",
  // Want
  "רוצה",
  "רוצים",
  "רציתי",
  "רצה",
  // Can
  "יכול",
  "יכולה",
  "יכולים",
  "נוכל",
  // Should
  "צריך",
  "צריכה",
  // Must
  "חייב",
  // Do, make
  "לעשות",
  "עושה",
  // Think
  "חושב",
  "חשבתי",
  "חושבת",
  // See
  "נראה",
  "לראות",
  "רואה",
  // Come
  "בוא",
  // Go
  "הולך",
  "ללכת",
  "הולכת",
  "הלכתי",
  "הלכת",
  "הלכת",
  "הלך",
  "הלכה",
  "אלך",
  "תלך",
  "תלכי",
  "ילך",
  "לכי",
  "הולכים",
  "הולכות",
  "הלכנו",
  "הלכתם",
  "הלכתן",
  "הלכו",
  "נלך",
  "תלכו",
  "תלכנה",
  "ילכו",
  "לכו",
  "לכנה",
  // To be sorry
  "מצטער",
  // Happen
  "קרה",
  "קורה",
  // Love
  "אוהב",
  // Put
  "שום",
  // Use
  "להשתמש",
  // Try
  "לנסות",
  "מנסה",
  // Take
  "לוקח",
  "אקח",
  // Put
  "לשים",
  // Give
  "נותן",
  "נותנת",
  "נותנים",
  "נותנות",
  "נת",
  "תינתנו",
  "נתת",
  "נתתם",
  "נתתן",
  "נתן",
  "נתנה",
  "נתנו",
  "אתן",
  "ניתן",
  "תיתן",
  "תיתני",
  "תיתנותיתנה",
  "ייתןנתתתיתן",
  "ייתנו",
  "תיתנה",
  "תן‏",
  "תני‏",
  "תנו‏",
  "תנה‏",
  "לתת"
], oUa = [
  // Only
  "רק",
  // All
  "כל",
  // More
  "יותר",
  // Here
  "כאן",
  // So, such
  "כך",
  "כה",
  // Right, correct
  "נכון",
  // Now
  "עכשיו",
  "עכשיו",
  // There
  "שם",
  // Forward
  "קדימה",
  // Also
  "אף",
  // Yet, still
  "עוד",
  // Really
  "באמת",
  "ממש",
  // Maybe
  "אולי",
  // Already
  "כבר",
  // Here
  "פה",
  // Slightly
  "קצת",
  // Still
  "עדיין",
  // Just
  "בדיוק",
  // Again
  "שוב",
  // Always
  "תמיד",
  // Even
  "אפילו",
  // Certainly
  "בטח",
  // Late
  "מאוחר",
  // Recently
  "לאחרונה",
  // Soon
  "בקרוב",
  // Immediately
  "מיד",
  // Outside
  "בחוץ",
  // Fast
  "מהר",
  // Hard
  "קשה",
  // Slowly
  "לאט",
  // Mostly
  "לרוב",
  // Almost
  "כמעט",
  // Usually
  "בדרך",
  "כלל",
  // Sometimes
  "לפעמים",
  // Together
  "יחד",
  // Alone
  "לבד",
  // Backwards
  "אחורה",
  // As if
  "כאילו",
  // Too
  "גם",
  // Approximately
  "בערך",
  // The most
  "הכי",
  // Full
  "מלא",
  "מלאה",
  "מלאים",
  "מלאות",
  // Good
  "טוב",
  "טובה",
  "טובים",
  "טובות",
  // New
  "חדש",
  "חדשה",
  "חדשים",
  "חדשות",
  // Old
  "ישן",
  "ישנה",
  "ישנים",
  "ישנות",
  // Young
  "צעיn",
  "צעירה",
  "צעירים",
  "צעירות",
  // Big
  "גדול",
  "גדולה",
  "גדולים",
  "גדולות",
  // Easy
  "קל",
  "קלה",
  "קלים",
  "קלות",
  // Fast
  "מהיר",
  "מהירה",
  "מהירים",
  "מהירות",
  // Far
  "רחוק",
  "רחוקה",
  "רחוקים",
  "רחוקות",
  // Nice
  "נחמד",
  "נחמדה",
  "נחמדים",
  "נחמדות",
  // Special
  "מיוחד",
  "מיוחדת",
  "מיוחדים",
  "מיוחדות",
  // Simple
  "פשוט",
  "פשוטה",
  "פשוטים",
  "פשוטות",
  // Small
  "קטן",
  "קטנה",
  "קטנים",
  "קטנות",
  // Long
  "ארוך",
  "ארוכה",
  "ארוכים",
  "ארוכות",
  // Short
  "קצר",
  "קצרה",
  "קצרים",
  "קצרות",
  // Low
  "נמוך",
  "נמוכה",
  "נמוכים",
  "נמוכות",
  // Complete
  "שלם",
  "שלמה",
  "שלמים",
  "שלמות",
  // High
  "גבוה",
  "גבוהה",
  "גבוהים",
  "גבוהות",
  // Important
  "חשוב",
  "חשובה",
  "חשובים",
  "חשובות"
], lUa = [
  // Ha (laughter)
  "ח",
  // Oh
  "הו",
  // Wow
  "וואו"
], dUa = [
  // Kg
  'ק"ג',
  // G
  "ג'",
  // Gram
  "גרם",
  // Cl
  'סמ"ק',
  // Ml
  'מ"ל',
  // Liter
  "ליטר",
  // Tbsp
  "כף",
  // Tsp
  "כפית",
  // Cup
  "כוס",
  "כוסות"
], uUa = [
  // Today
  "היום",
  // Yesterday
  "אתמול",
  // Tomorrow
  "מחר",
  // Day
  "יום",
  "ימים",
  // Week
  "שבוע",
  "בשבוע",
  "שבועות",
  // Hour
  "שעה",
  "שעות",
  // Minute
  "דקה",
  "דקות",
  // Moment
  "רגע",
  "רגעים",
  // Month
  "חודש",
  "חודשים",
  // Year
  "שנה",
  "שנים",
  "השנה"
], cUa = [
  // Thing
  "דבר",
  // Time(s)
  "פעם",
  "פעמים",
  // Time
  "זמן",
  "הזמן",
  // All
  "הכל",
  "בכל",
  // Men
  "אנשים",
  // Place (used in multiple constructions such as e.g. "everywhere")
  "מקום",
  // Time (used for some adverbial constructions)
  "לעתים",
  // Number (e.g. in "a number of")
  "מספר",
  // Percent
  "אחוז",
  "אחוזים"
], pUa = [
  // Yes
  "כן",
  // No, not (incl. prefixed forms)
  "לא",
  "שלא",
  // All right
  "בסדר",
  // Thank you
  "תודה",
  // Please
  "בבקשה",
  // Hello
  "שלום",
  // Percent
  "אחוז",
  // Mr
  "מר",
  "אדוני",
  // Ms, Mrs
  "גברת",
  // Person
  "אדם"
], gUa = hd.all = (0, GWa.default)([].concat(KWa, YWa, QWa, XWa, ZWa, JWa, eUa, aUa, tUa, nUa, rUa, sUa, iUa, oUa, lUa, dUa, uUa, cUa, pUa, HWa.singleWords));
hd.default = gUa;
var tz = {};
Object.defineProperty(tz, "__esModule", {
  value: !0
});
tz.default = void 0;
tz.default = [["או", "או"], ["אין", "אלא"], ["לא", "אלא"], ["מצד אחד", "מצד אחר"], ["מחד גיסא", "מאידך גיסא"], ["ראשית", "שנית"], ["תחילה", "לבסוף"], ["משום ש", "מפני ש"], ["לכאורה", "אך"]];
var nz = {};
Object.defineProperty(nz, "__esModule", {
  value: !0
});
nz.default = void 0;
nz.default = [
  // Indefinite articles:
  "אחד",
  "כמה",
  "מעטים",
  // Numbers 1-10 (feminine-masculine pairs):
  "אחת",
  "שנים",
  "שתים",
  "שלשה",
  "שלש",
  "ארבעה",
  "ארבע",
  "חמשה",
  "חמש",
  "ששה",
  "שש",
  "שבעה",
  "שבע",
  "שמונה",
  "שמונה",
  "תשעה",
  "תשע",
  "עשרה",
  "עשר",
  // Demonstrative pronouns:
  "זה",
  "זאת",
  "אלה",
  "אוה",
  "היא",
  "אלה",
  "המה",
  "הם",
  "הנה"
];
var rz = {};
Object.defineProperty(rz, "__esModule", {
  value: !0
});
rz.default = void 0;
rz.default = {
  recommendedLength: 15
};
var zT = {}, Ho = {};
Object.defineProperty(Ho, "__esModule", {
  value: !0
});
Ho.PREFIXED_FUNCTION_WORDS_REGEX = Ho.PREFIXED_FUNCTION_WORDS = void 0;
const mUa = Ho.PREFIXED_FUNCTION_WORDS = ["ב", "ה", "ו", "כ", "ל", "מ", "ש"];
Ho.PREFIXED_FUNCTION_WORDS_REGEX = new RegExp(`^(${mUa.join("|")})`);
Object.defineProperty(zT, "__esModule", {
  value: !0
});
zT.createBasicWordForms = hUa;
var fUa = jc, Ak = Ho;
function hUa(e) {
  const a = [];
  a.push(...Ak.PREFIXED_FUNCTION_WORDS.map((r) => r + e));
  const {
    stem: t,
    prefix: n
  } = (0, fUa.stemPrefixedFunctionWords)(e, Ak.PREFIXED_FUNCTION_WORDS_REGEX);
  return n !== "" && (a.push(t), a.push(...Ak.PREFIXED_FUNCTION_WORDS.map((r) => r + t))), a;
}
var bT = {}, wT = {};
Object.defineProperty(wT, "__esModule", {
  value: !0
});
wT.default = yUa;
const QP = function(e, a) {
  return a.some((t) => e.startsWith(t)) ? e.slice(1) : e;
};
function yUa(e, a) {
  const t = a.dictionary;
  let n = t[e];
  if (n)
    return n;
  const r = QP(e, a.prefixes);
  if (r !== e) {
    if (n = t[r], n)
      return n;
    const o = QP(r, a.prefixes);
    if (o !== r && (n = t[o], n))
      return n;
  }
  return e;
}
Object.defineProperty(bT, "__esModule", {
  value: !0
});
bT.default = _Ua;
var zUa = K, bUa = ee, wUa = vUa(wT);
function vUa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: kUa
} = bUa.languageProcessing;
function _Ua(e) {
  const a = (0, zUa.get)(e.getData("morphology"), "he", !1);
  return a ? (t) => (0, wUa.default)(t, a) : kUa;
}
var vT = {}, sz = {};
Object.defineProperty(sz, "__esModule", {
  value: !0
});
sz.default = void 0;
sz.default = ["אכל", "דבר", "עבר", "עמד", "קרא", "שמע", "זכר", "חזק", "חטא", "כתב", "מלך", "מצא", "נגד", "נפל", "עבר", "פקד", "רום", "שכב", "אבד", "אמן", "גדל", "חשב", "יטב", "כבד", "לבש", "קדש", "קרב", "שנא", "שאל", "שאר", "שבע", "שחת", "שכן", "שכח", "שלך", "שלם", "בער", "בקע", "ברא", "ברח", "דבק", "דרך", "זעק", "חלק", "חרם", "חרש", "כעס", "כשל", "מאס", "משל", "נבט", "נחל", "נצח", "סגר", "סתר", "ערך", "פרה", "פלא", "פלל", "פעל", "פרד", "פרש", "צלח", "צרר", "קלל", "קנה", "רחק", "רכב", "רעע", "שבע", "שכל", "שכם", "אשם", "בדל", "בהל", "בחן", "בשל", "גבה", "גנב", "זרק", "חלם", "חלף", "חרב", "חרד", "חרף", "חשך", "חתם", "טמן", "טרף", "כלם", "כנע", "כרע", "משך", "נהג", "סמך", "פחד", "פרד", "פרח", "פשט", "צדק", "צמח", "צפן", "קדם", "קצף", "קשב", "רבץ", "רגז", "רגל", "רחב", "רעש", "רשע", "שפל", "שקט", "ברר", "גבר", "געל", "טעם", "כזב", "כחש", "כנס", "לחץ", "מטר", "מעט", "מרד", "משל", "נגש", "נזל", "עלם", "עצב", "עשר", "פגש", "פרע", "צבא", "צמת", "קסם", "רבע", "רגע", "רעב", "רעם", "רקע", "שאב", "שבח", "שחר", "שכל", "שכר", "שען", "שקף", "שתל", "שלכ‎", "מלכ‎", "דרכ‎", "ערכ‎", "חשכ‎", "משכ‎", "סמכ‎", "אמנ", "שכנ", "בחנ", "טמנ", "צפנ", "שענ", "רומ", "שלמ", "חרמ", "שכמ", "אשמ", "חלמ", "חתמ", "כלמ", "קדמ", "עלמ", "טעמ", "חלפ", "חרפ", "טרפ", "קצפ", "שקפ", "רבצ", "לחצ"];
var iz = {};
Object.defineProperty(iz, "__esModule", {
  value: !0
});
iz.default = void 0;
iz.default = ["אכל", "אמר", "לקח", "נשא", "נתן", "קרא", "שלח", "שמע", "אהב", "אסף", "כרת", "כתב", "מצא", "פקד", "שמר", "שפט", "אבד", "אמן", "גאל", "דרש", "הרג", "חשב", "טמא", "יתר", "לכד", "ספר", "עזב", "קבץ", "קבר", "רדף", "שרף", "שאל", "שבר", "שחת", "שכח", "שלם", "שפך", "אסר", "בחר", "בלע", "בקע", "ברא", "דרך", "זרע", "חלק", "חנן", "חרש", "טהר", "למד", "מכר", "משל", "סגר", "סתר", "עזר", "ערך", "פרד", "פרש", "צפה", "קנה", "קרע", "רחץ", "רפא", "שבע", "שחט", "שמר", "תפש", "תקע", "אשם", "בגד", "בדל", "בחן", "גזל", "גמל", "גנב", "הרס", "זרק", "חבא", "חבש", "חלץ", "חצב", "חקר", "חרב", "חתם", "טמן", "טרף", "לקט", "מנע", "סלח", "סמך", "ספר", "עצר", "פגע", "פלט", "פרד", "פרץ", "פשט", "צפן", "קצר", "קשר", "רעש", "רצח", "שחק", "שטף", "אטם", "אלם", "ארג", "בצע", "גאל", "גדר", "גזז", "גזר", "גלח", "גרע", "דחה", "דקר", "חבל", "חרש", "חכה", "חפר", "חקק", "חרץ", "חשק", "טבח", "טבל", "טבע", "כבש", "כלא", "לחץ", "מחץ", "מסס", "משל", "נשא", "סחר", "סלל", "סער", "סקל", "סתם", "עטף", "עכר", "פרע", "פרק", "רמס", "שאב", "שאף", "שבר", "שכר", "שלל", "שלף", "שקל", "שקף", "שתל", "תכן", "תמך", "תעב", "שפכ‎", "דרכ‎", "ערכ‎", "סמכ‎", "תמכ‎", "נתנ", "אמנ", "חננ", "בחנ", "טמנ", "צפנ", "תכנ", "שלמ", "אשמ", "חתמ", "אטמ", "אלמ", "סתמ", "אספ", "רדפ", "שרפ", "טרפ", "שטפ", "עטפ", "שאפ", "שלפ", "שקפ", "קבצ", "רחצ", "חלצ", "פרצ", "חרצ", "לחצ", "מחצ"];
var oz = {};
Object.defineProperty(oz, "__esModule", {
  value: !0
});
oz.default = void 0;
oz.default = ["אכל", "דבר", "עבר", "שלח", "בקש", "ברך", "חזק", "חטא", "כתב", "נצל", "עבר", "פקד", "רום", "שמר", "אבד", "אמן", "בטח", "גדל", "הלל", "חלל", "חשב", "טמא", "יתר", "כבד", "כסה", "כפר", "לחם", "לכד", "נבא", "נגע", "סבב", "ספר", "קבץ", "קדש", "קרב", "שמח", "שבר", "שכן", "שלם", "שרת", "בער", "בקע", "ברא", "חלק", "חנן", "טהר", "כבס", "למד", "מרר", "מהר", "מלט", "נכר", "נצח", "פלל", "פרש", "צפה", "קלל", "רחם", "רחק", "רנן", "רפא", "שמר", "בדל", "בצר", "בשל", "גרש", "דמם", "זמר", "חבר", "מאן", "נשק", "נתץ", "נתק", "ספר", "ערב", "פשט", "צרף", "קדם", "קנא", "קצר", "קשר", "רגל", "שחק", "בצע", "ברר", "בשר", "גדר", "גלל", "דכא", "דשן", "חבל", "חבק", "חמם", "חפש", "חשק", "כהן", "כזב", "כנס", "מסס", "מעט", "מרר", "נגן", "נדב", "נהל", "נחש", "נער", "נפח", "נפץ", "נשך", "סכך", "סכן", "סקל", "עלל", "ענג", "עצב", "פאר", "פזר", "פצה", "פקח", "פרק", "פתה", "קבל", "קדד", "קצץ", "רמה", "רצץ", "רקע", "שבח", "שבר", "שנה", "שקר", "שקף", "תכן", "תעב", "ברכ‎", "נשכ‎", "סככ‎", "אמנ", "שכנ", "חננ", "רננ", "מאנ", "דשנ", "כהנ", "נגנ", "סכנ", "תכנ", "רומ", "לחמ", "שלמ", "רחמ", "דממ", "קדמ", "חממ", "צרפ", "שקפ", "קבצ", "נתצ", "קצצ", "רצצ", "נפצ"];
Object.defineProperty(vT, "__esModule", {
  value: !0
});
vT.default = xUa;
var EUa = ee, AUa = kT(sz), TUa = kT(iz), $Ua = kT(oz);
function kT(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: jUa
} = EUa.languageProcessing, XP = function(e, a, t) {
  return a.some((n) => t.some(function(r) {
    return new RegExp("^" + r.prefix + n + r.suffix + "$").test(e);
  }));
};
function xUa(e) {
  const a = jUa(e);
  for (const t of a) {
    const n = [{
      prefix: "(נ|אי|תי|הי|יי|ני|להי)",
      suffix: ""
    }, {
      prefix: "(תי|הי)",
      suffix: "(י|ו|נה)"
    }, {
      prefix: "נ",
      suffix: "(ים|ת|ות|תי|ה|נו|תם|תן|ו)"
    }, {
      prefix: "יי",
      suffix: "ו"
    }];
    if (XP(t, TUa.default, n))
      return !0;
    const o = [{
      prefix: "(מ|א|ת|י|נ)",
      suffix: ""
    }, {
      prefix: "תי",
      suffix: "נה"
    }, {
      prefix: "מ",
      suffix: "(ת|ים|ות)"
    }, {
      prefix: "ת",
      suffix: "(י|ו|נה)"
    }, {
      prefix: "י",
      suffix: "ו"
    }, {
      prefix: "",
      suffix: "(תי|ת|ה|נו|תם|תן|ו)"
    }, {
      prefix: "",
      suffix: ""
    }], l = "ו";
    if ($Ua.default.some((y) => o.some(function(z) {
      return new RegExp("^" + z.prefix + y[0] + l + y[1] + y[2] + z.suffix + "$").test(t);
    })))
      return !0;
    const c = [{
      prefix: "(מו|הו|או|תו|יו|נו)",
      suffix: ""
    }, {
      prefix: "מו",
      suffix: "(ת|ים|ות)"
    }, {
      prefix: "הו",
      suffix: "(תי|ת|ית|ה|נו|תם|תן|ו)"
    }, {
      prefix: "תו",
      suffix: "(ו|נה|י)"
    }, {
      prefix: "יו",
      suffix: "ו"
    }];
    if (XP(t, AUa.default, c))
      return !0;
  }
  return !1;
}
Object.defineProperty(yT, "__esModule", {
  value: !0
});
var $q = yT.default = void 0, SUa = ee, OUa = ml(hd), IUa = ml($r), CUa = ml(tz), PUa = ml(nz), RUa = ml(rz), DUa = zT, NUa = ml(bT), LUa = ml(vT), MUa = Ho;
function ml(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: qUa
} = SUa.languageProcessing;
let FUa = class extends qUa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "he",
      passiveConstructionType: "morphological",
      firstWordExceptions: PUa.default,
      functionWords: OUa.default,
      transitionWords: IUa.default,
      twoPartTransitionWords: CUa.default,
      sentenceLength: RUa.default,
      prefixedFunctionWordsRegex: MUa.PREFIXED_FUNCTION_WORDS_REGEX
    }), Object.assign(this.helpers, {
      createBasicWordForms: DUa.createBasicWordForms,
      getStemmer: NUa.default,
      isPassiveSentence: LUa.default
    });
  }
};
$q = yT.default = FUa;
var _T = {}, yd = {}, jr = {};
Object.defineProperty(jr, "__esModule", {
  value: !0
});
jr.singleWords = jr.multipleWords = jr.default = jr.allWords = void 0;
const BUa = jr.singleWords = ["ahányszor", "ahelyett", "ahogy", "ahol", "ahonnan", "ahová", "akár", "akárcsak", "akkor", "alapvetően", "alighogy", "ám", "ámbár", "ámde", "ameddig", "amennyiben", "amennyire", "amennyiszer", "amíg", "amikor", "amikorra", "aminthogy", "amióta", "amire", "annálfogva", "annyira", "avagy", "azaz", "azazhogy", "azért", "azonban", "azonkívül", "azután", "bár", "befejezésül", "bizony", "csakhogy", "de", "dehát", "dehogy", "egybehangzóan", "egyidejűleg", "egyöntetűen", "egyöntetűleg", "ekképpen", "ellenben", "először", "előzőleg", "elsősorban", "ennélfogva", "eredményeképp", "eredményeképpen", "és", "eszerint", "ezért", "feltétlenül", "főként", "főleg", "függetlenül", "ha", "habár", "hanem", "hányszor", "harmadjára", "harmadszor", "hasonlóan", "hasonlóképpen", "hát", "hirtelen", "hirtelenjében", "hisz", "hiszen", "hogy", "hogyha", "hol", "holott", "honnan", "hová", "így", "illetőleg", "illetve", "immár", "is", "jóllehet", "kár", "kétségtelenül", "kifejezetten", "kiváltképp", "következésképpen", "legalábbis", "legfőképp", "maga", "máskülönben", "másodsorban", "másodszor", "meg", "mégis", "megkérdőjelezhetetlenül", "megkérdőjelezhetően", "mégpedig", "mégsem", "mennél", "mennyiszer", "merre", "mert", "merthogy", "midőn", "mielőtt", "míg", "mihelyt", "miként", "miképp", "mikor", "mikorra", "mindamellett", "mindazáltal", "mindazonáltal", "mindenekelőtt", "minél", "mint", "mintha", "minthogy", "mióta", "mire", "miután", "mivel", "mivelhogy", "nahát", "nehogy", "noha", "nos", "nyilvánvalóan", "óh", "összefoglalva", "összehasonlításképp", "összehasonlításképpen", "pedig", "például", "plusz", "s", "sajna", "satöbbi", "se", "sem", "sőt", "szintén", "tagadhatatlanul", "tehát", "továbbá", "tudniillik", "úgy", "ugyan", "ugyanis", "úgyhogy", "vagy", "vagyis", "valamennyi", "valamint", "valóban", "végezetül", "végül", "végülis", "viszont", "amerről", "hiába", "miközben", "egyszersmind", "csakugyan", "különben", "mialatt", "mintegy", "miszerint", "nemde", "ugye", "vajon", "semmint", "hacsak", "úgymint", "mintsem"], WUa = jr.multipleWords = ["a továbbiakban", "abba, hogy", "abban, hogy", "abból, hogy", "addig, amíg", "addig, hogy", "addig, míg", "afelé, hogy", "ahelyett, hogy", "ahhoz, hogy", "ahogy fent látható", "ahogy írtam", "ahogy megmutattam", "ahogy megjegyeztem", "akként, hogy", "akkorra, hogy", "amiatt, hogy", "amellett, hogy", "amint azt megjegyeztük", "amint csak", "amint láthatjuk", "anélkül, hogy", "annak érdekében, hogy", "annak okáért", "annyi, hogy", "annyi, mint", "annyira, hogy", "annyira, mint", "arra, hogy", "arról, hogy", "attól fogva, hogy", "attól, hogy", "avégett, hogy", "avégre, hogy", "az ellen, hogy", "az első dolog", "az első dolog, amit meg kell jegyezni", "az iránt, hogy", "azelőtt, hogy", "azért, hogy", "azonos módon", "azok után, hogy", "azon, hogy", "azonkívül, hogy", "azóta, hogy", "azt követően", "aztán pedig", "azután, hogy", "azzal a feltétellel, hogy", "azzal, hogy", "bár igaz lehet", "ebből a célból", "ebből az okból", "előbb vagy utóbb", "ennek eredményeként", "ennek folytán", "ennek megfelelően", "éppen ellenkezőleg", "éppen úgy", "erre a célra", "ezen felül", "fenntartás nélkül", "ha egyébként", "ha egyszer", "ha különben", "ha ugyan", "hasonló módon", "hogy sem", "hogy sem mint", "hol hol", "holott pedig", "időről időre", "igaz, hogy", "így tehát", "ilyen körülmények között", "késedelem nélkül", "kétség nélkül", "más szóval", "más szavakkal", "másképpen fogalmazva", "még akkor is", "még ha", "mert különben", "mert tény, hogy", "mind mind", "mindaddig, amíg", "mindezek után", "mint sem hogy", "nem is beszélve", "nem különben", "nem úgy, mint", "oda, hogy", "oly módon, hogy", "sem hogy", "szem előtt tartva", "tény, hogy", "úgy, hogy", "úgy, mint", "ugyanazon okból", "ugyanolyan okból", "olybá tűnik", "egyszer s mindenkorra", "akkor, amikor", "azóta, mióta", "attól kezdve, mióta", "attól kezdve, hogy", "akkorra, amikorra", "akkor, ha", "azóta, amióta", "akkorra, amikorra", "addigra, amikorra", "akkor, hogyha", "akkor, ha", "úgy-ahogy", "mintsem hogy"], UUa = jr.allWords = BUa.concat(WUa);
jr.default = UUa;
Object.defineProperty(yd, "__esModule", {
  value: !0
});
yd.default = yd.all = void 0;
var HUa = jr, GUa = VUa(Ba);
function VUa(e) {
  return e && e.__esModule ? e : { default: e };
}
const KUa = ["a", "az", "egy"], YUa = ["egy", "kettő", "három", "négy", "öt", "hat", "hét", "nyolc", "kilenc", "tíz", "tizenegy", "tizenkettő", "tizenhárom", "tizennégy", "tizenöt", "tizenhat", "tizenhét", "tizennyolc", "tizenkilenc", "húsz", "száz", "ezer", "tízezer", "százezer", "millió", "félmillió", "egymillió"], QUa = ["első", "második", "harmadik", "negyedik", "ötödik", "hatodik", "hetedik", "nyolcadik", "kilencedik", "tizedik", "tizenegyedik", "tizenkettedik", "tizenharmadik", "tizennegyedik", "tizenötödik", "tizenhatodik", "tizenhetedik", "tizennyolcadik", "tizenkilencedik", "huszadik", "századik", "ezredik", "tízezredik", "százezredik", "milliomodik", "egymilliomodik"], XUa = [
  // Personal pronouns.
  "én",
  "engem",
  "enyém",
  "nekem",
  "velem",
  "értem",
  "bennem",
  "belém",
  "belőlem",
  "nálam",
  "hozzám",
  "tőlem",
  "rajtam",
  "rám",
  "rólam",
  "te",
  "téged",
  "tiéd",
  "neked",
  "veled",
  "érted",
  "benned",
  "beléd",
  "belőled",
  "nálad",
  "hozzád",
  "tőled",
  "rajtad",
  "rád",
  "rólad",
  "ő",
  "őt",
  "övé",
  "neki",
  "vele",
  "érte",
  "benne",
  "bele",
  "belé",
  "nála",
  "hozzá",
  "tőle",
  "rajta",
  "rá",
  "róla",
  "mi",
  "minket",
  "mienk",
  "nekünk",
  "velünk",
  "értünk",
  "bennünk",
  "belénk",
  "nálunk",
  "hozzánk",
  "tőlünk",
  "rajtunk",
  "ránk",
  "rólunk",
  "ti",
  "titeket",
  "tiétek",
  "nektek",
  "veletek",
  "értetek",
  "bennetek",
  "belétek",
  "nálatok",
  "hozzátok",
  "tőletek",
  "rajtatok",
  "rátok",
  "rólatok",
  "ők",
  "őket",
  "övék",
  "nekik",
  "velük",
  "értük",
  "bennük",
  "beléjük",
  "náluk",
  "hozzájuk",
  "tőlük",
  "rajtuk",
  "rájuk",
  "róluk",
  "Ön",
  "Önt",
  "Öné",
  "Önnek",
  "Önnel",
  "Önért",
  "Önben",
  "Önbe",
  // Formal pronouns.
  "Ön",
  "Önt",
  "Öné",
  "Önnek",
  "Önnel",
  "Önért",
  "Önben",
  "Önbe",
  "Önből",
  "Önnél",
  "Önhöz",
  "Öntől",
  "Önön",
  "Önre",
  "Önről",
  "Önök",
  "Önöket",
  "Önöké",
  "Önöknek",
  "Önökkel",
  "Önökért",
  "Önökben",
  "Önökbe",
  "Önökből",
  "Önöknél",
  "Önökhöz",
  "Önöktől",
  "Önökön",
  "Önökre",
  "Önökről",
  // Demonstrative pronouns.
  "ez",
  "emez",
  "ugyanez",
  "ezt",
  "emezt",
  "ugyanezt",
  "ezé",
  "emezé",
  "ugyanezé",
  "ennek",
  "emennek",
  "ugyanennek",
  "ezzel",
  "emezzel",
  "ugyanezzel",
  "ezért",
  "emezért",
  "ugyanezért",
  "ebben",
  "emebben",
  "ugyanebben",
  "ebbe",
  "emebbe",
  "ugyanebbe",
  "ebből",
  "emebből",
  "ugyanebből",
  "ennél",
  "emennél",
  "ugyanennél",
  "ehhez",
  "emehhez",
  "ugyanehhez",
  "ettől",
  "emettől",
  "ugyanettől",
  "ezen",
  "emezen",
  "ugyanezen",
  "erre",
  "emerre",
  "ugyanerre",
  "erről",
  "emerről",
  "ugyanerről",
  "eddig",
  "emeddig",
  "ugyaneddig",
  "ekkor",
  "emekkor",
  "ugyanekkor",
  "ezzé",
  "emezzé",
  "ugyanezzé",
  "ekként",
  "emekként",
  "ugyanekként",
  "az",
  "amaz",
  "ugyanaz",
  "azt",
  "amazt",
  "ugyanazt",
  "azé",
  "amazé",
  "ugyanazé",
  "annak",
  "amannak",
  "ugyanannak",
  "azzal",
  "amazzal",
  "ugyanazzal",
  "azért",
  "amazért",
  "ugyanazért",
  "abban",
  "amabban",
  "ugyanabban",
  "abba",
  "amabba",
  "ugyanabba",
  "abból",
  "amabból",
  "ugyanabból",
  "annál",
  "amannál",
  "ugyanannál",
  "ahhoz",
  "amahhoz",
  "ugyanahhoz",
  "attól",
  "amattól",
  "ugyanattól",
  "azon",
  "amazon",
  "ugyanazon",
  "arra",
  "amarra",
  "ugyanarra",
  "arról",
  "amarról",
  "ugyanarról",
  "addig",
  "amaddig",
  "ugyanaddig",
  "akkor",
  "amakkor",
  "ugyanakkor",
  "azzá",
  "amazzá",
  "ugyanazzá",
  "akként",
  "amakként",
  "ugyanakként",
  "ilyen",
  "emilyen",
  "ugyanilyen",
  "ilyet",
  "emilyet",
  "ugyanilyet",
  "ilyennek",
  "emilyennek",
  "ugyanilyennek",
  "ilyennel",
  "emilyennel",
  "ugyanilyennel",
  "ilyenért",
  "emilyenért",
  "ugyanilyenért",
  "ilyenben",
  "emilyenben",
  "ugyanilyenben",
  "ilyenbe",
  "emilyenbe",
  "ugyanilyenbe",
  "ilyenből",
  "emilyenből",
  "ugyanilyenből",
  "ilyennél",
  "emilyennél",
  "ugyanilyennél",
  "ilyenhez",
  "emilyenhez",
  "ugyanilyenhez",
  "ilyentől",
  "emilyentől",
  "ugyanilyentől",
  "ilyenen",
  "emilyenen",
  "ugyanilyenen",
  "ilyenre",
  "emilyenre",
  "ugyanilyenre",
  "ilyenről",
  "emilyenről",
  "ugyanilyenről",
  "ilyenkor",
  "emilyenkor",
  "ugyanilyenkor",
  "ilyenné",
  "emilyenné",
  "ugyanilyenné",
  "olyan",
  "amolyan",
  "ugyanolyan",
  "olyat",
  "amolyat",
  "ugyanolyat",
  "olyannak",
  "amolyannak",
  "ugyanolyannak",
  "olyannal",
  "amolyannal",
  "ugyanolyannal",
  "olyanért",
  "amolyanért",
  "ugyanolyanért",
  "olyanban",
  "amolyanban",
  "ugyanolyanban",
  "olyanba",
  "amolyanba",
  "ugyanolyanba",
  "olyanból",
  "amolyanból",
  "ugyanolyanból",
  "olyannál",
  "amolyannál",
  "ugyanolyannál",
  "olyanhoz",
  "amolyanhoz",
  "ugyanolyanhoz",
  "olyantól",
  "amolyantól",
  "ugyanolyantól",
  "olyanon",
  "amolyanon",
  "ugyanolyanon",
  "olyanra",
  "amolyanra",
  "ugyanolyanra",
  "olyanról",
  "amolyanról",
  "ugyanolyanról",
  "olyankor",
  "amolyankor",
  "ugyanolyankor",
  "olyanná",
  "amolyanná",
  "ugyanolyanná",
  "ennyi",
  "emennyi",
  "ugyanennyi",
  "ennyit",
  "emennyit",
  "ugyanennyit",
  "ennyinek",
  "emennyinek",
  "ugyanennyinek",
  "ennyivel",
  "emennyivel",
  "ugyanennyivel",
  "ennyiért",
  "emennyiért",
  "ugyanennyiért",
  "ennyiben",
  "emennyiben",
  "ugyanennyiben",
  "ennyibe",
  "emennyibe",
  "ugyanennyibe",
  "ennyiből",
  "emennyiből",
  "ugyanennyiből",
  "ennyinél",
  "emennyinél",
  "ugyanennyinél",
  "ennyihez",
  "emennyihez",
  "ugyanennyihez",
  "ennyitől",
  "emennyitől",
  "ugyanennyitől",
  "ennyin",
  "emennyin",
  "ugyanennyin",
  "ennyire",
  "emennyire",
  "ugyenennyire",
  "ennyiről",
  "emennyiről",
  "ugyanennyiről",
  "ennyivé",
  "emennyivé",
  "ugyanennyivé",
  "annyi",
  "amannyi",
  "ugyanannyi",
  "annyit",
  "amannyit",
  "ugyanannyit",
  "annyinak",
  "amannyinak",
  "ugyanannyinak",
  "annyival",
  "amannyival",
  "ugyanannyival",
  "annyiért",
  "amannyiért",
  "ugyanannyiért",
  "annyiban",
  "amannyiban",
  "ugyanannyiban",
  "annyiba",
  "amannyiba",
  "ugyanannyiba",
  "annyiból",
  "amannyiból",
  "ugyanannyiból",
  "annyinál",
  "amannyinál",
  "ugyanannyinál",
  "annyihoz",
  "amannyihoz",
  "ugyanannyihoz",
  "annyitól",
  "amannyitól",
  "ugyananyitól",
  "annyin",
  "amannyin",
  "ugyanannyin",
  "annyira",
  "amannyira",
  "ugyanannyira",
  "annyiról",
  "amannyiról",
  "ugyanannyiról",
  "annyivá",
  "amannyivá",
  "ugyanannyivá",
  "így",
  "emígy",
  "ugyanígy",
  "úgy",
  "amúgy",
  "ugyanúgy",
  "itt",
  "ott",
  "ugyanitt",
  "ogyanott",
  "ide",
  "oda",
  "ugyanide",
  "ugyanoda",
  "amoda",
  "emide",
  "innen",
  "onnan",
  "ugyaninnen",
  "ogyanonnan",
  "amonnan",
  "eminnen",
  "eddig",
  "addig",
  "ezután",
  "azután",
  "ezelőtt",
  "azelőtt",
  "ugyaneddig",
  "ugyanaddig",
  "emeddig",
  "amaddig",
  "ekkora",
  "ekkorát",
  "ekkorának",
  "ekkorával",
  "ekkoráért",
  "ekkorában",
  "ekkorába",
  "ekkorából",
  "ekkoránál",
  "ekkorához",
  "ekkorától",
  "ekkorán",
  "ekkorára",
  "ekkoráról",
  "ekkorává",
  "akkora",
  "akkorát",
  "akkorának",
  "akkorával",
  "akkoráért",
  "akkorában",
  "akkorába",
  "akkorából",
  "akkoránál",
  "akkorához",
  "akkorától",
  "akkorán",
  "akkorára",
  "akkoráról",
  "akkorává",
  "ekképpen",
  "akképpen",
  "ezek",
  "emezek",
  "ugyanezek",
  "ezeket",
  "emezeket",
  "ugyanezeket",
  "ezeké",
  "emezeké",
  "ugyanezeké",
  "ezeknek",
  "emezeknek",
  "ugyanezeknek",
  "ezekkel",
  "emezekkel",
  "ugyanezekkel",
  "ezekért",
  "emezekért",
  "ugyanezekért",
  "ezekben",
  "emezekben",
  "ugyanezekben",
  "ezekbe",
  "emezekbe",
  "ugyanezekbe",
  "ezekből",
  "emezekből",
  "ugyanezekből",
  "ezeknél",
  "emezeknél",
  "ugyanezeknél",
  "ezekhez",
  "emezekhez",
  "ugyanezekhez",
  "ezektől",
  "emezektől",
  "ugyanezektől",
  "ezekre",
  "emezekre",
  "ugyanezekre",
  "ezekről",
  "emezekről",
  "ugyanezekről",
  "ezekig",
  "emezekig",
  "ugyanezekig",
  "ezekké",
  "emezekké",
  "ugyanezekké",
  "ezekként",
  "emezekként",
  "ugyanezekként",
  "azok",
  "amazok",
  "ugyanazok",
  "azokat",
  "amazokat",
  "ugyanazokat",
  "azoké",
  "amazoké",
  "ugyanazoké",
  "azoknak",
  "amazoknak",
  "ugyanazoknak",
  "azokkal",
  "amazokkal",
  "ugyanazokkal",
  "azokért",
  "amazokért",
  "ugyanazokért",
  "azokban",
  "amazokban",
  "ugyanazokban",
  "azokba",
  "amazokba",
  "ugyanazokba",
  "azokból",
  "amazokból",
  "ugyanazokból",
  "azoknál",
  "amazoknál",
  "ugyanazoknál",
  "azokhoz",
  "amazokhoz",
  "ugyanazokhoz",
  "azoktól",
  "amazoktól",
  "ugyanazoktól",
  "azokra",
  "amazokra",
  "ugyanazokra",
  "azokról",
  "amazokról",
  "ugyanazokról",
  "azokig",
  "amazokig",
  "ugyanazokig",
  "azokká",
  "amazokká",
  "ugyanazokká",
  "ilyenek",
  "emilyenek",
  "ugyanilyenek",
  "ilyeneket",
  "emilyeneket",
  "ugyanilyeneket",
  "ilyeneknek",
  "emilyeneknek",
  "ugyanilyeneknek",
  "ilyenekkel",
  "emilyenekkel",
  "ugyanilyenekkel",
  "ilyenekért",
  "emilyenekért",
  "ugyanilyenekért",
  "ilyenekben",
  "emilyenekben",
  "ugyanilyenekben",
  "ilyenekbe",
  "emilyenekbe",
  "ugyanilyenekbe",
  "ilyenekből",
  "emilyenekből",
  "ugyanilyenekből",
  "ilyeneknél",
  "emilyeneknél",
  "ugyanilyeneknél",
  "ilyenekhez",
  "emilyenekhez",
  "ugyanilyenekhez",
  "ilyenektől",
  "emilyenektől",
  "ugyanilyenektől",
  "ilyeneken",
  "emilyeneken",
  "ugyanilyeneken",
  "ilyenekre",
  "emilyenekre",
  "ugyanilyenekre",
  "ilyenekről",
  "emilyenekről",
  "ugyanilyenekről",
  "ilyenekké",
  "emilyenekké",
  "ugyanilyenekké",
  "olyanok",
  "amolyanok",
  "ugyanolyanok",
  "olyanokat",
  "amolyanokat",
  "ugyanolyanokat",
  "olyanoknak",
  "amolyanoknak",
  "ugyanolyanoknak",
  "olyanokkal",
  "amolyanokkal",
  "ugyanolyanokkal",
  "olyanokért",
  "amolyanokért",
  "ugyanolyanokért",
  "olyanokban",
  "amolyanokban",
  "ugyanolyanokban",
  "olyanokba",
  "amolyanokba",
  "ugyanolyanokba",
  "olyanokból",
  "amolyanokból",
  "ugyanolyanokból",
  "olyanoknál",
  "amolyanoknál",
  "ugyanolyanoknál",
  "olyanokhoz",
  "amolyanokhoz",
  "ugyanolyanokhoz",
  "olyanoktól",
  "amolyanoktól",
  "ugyanolyanoktól",
  "olyanokon",
  "amolyanokon",
  "ugyanolyanokon",
  "olyanokra",
  "amolyanokra",
  "ugyanolyanokra",
  "olyanokról",
  "amolyanokról",
  "ugyanolyanokról",
  "olyanokká",
  "amolyanokká",
  "ugyanolyanokká",
  // Relative pronouns.
  "aki",
  "akit",
  "akié",
  "akinek",
  "akivel",
  "akiért",
  "akiben",
  "akibe",
  "akiből",
  "akinél",
  "akihez",
  "akitől",
  "akin",
  "akire",
  "akiről",
  "akivé",
  "ami",
  "amit",
  "amié",
  "aminek",
  "amivel",
  "amiért",
  "amiben",
  "amibe",
  "amiből",
  "aminél",
  "amihez",
  "amitől",
  "amin",
  "amire",
  "amiről",
  "amivé",
  "amilyen",
  "amilyet",
  "amilyennek",
  "amilyennel",
  "amilyenért",
  "amilyenben",
  "amilyenbe",
  "amilyenből",
  "amilyennél",
  "amilyenhez",
  "amilyentől",
  "amilyenen",
  "amilyenre",
  "amilyenről",
  "amilyenné",
  "amekkora",
  "amekkorát",
  "amekkorának",
  "amekkorával",
  "amekkoráért",
  "amekkorában",
  "amekkorába",
  "amekkorából",
  "amekkoránál",
  "amekkorához",
  "amekkorától",
  "amekkorán",
  "amekkorára",
  "amekkoráról",
  "amekkorává",
  "amely",
  "amelyet",
  "amelynek",
  "amellyel",
  "amelyért",
  "amelyben",
  "amelybe",
  "amelyből",
  "amelynél",
  "amelyhez",
  "amelytől",
  "amelyen",
  "amelyre",
  "amelyről",
  "amellyé",
  "ahány",
  "ahányat",
  "ahánynak",
  "ahánnyal",
  "ahányért",
  "ahányban",
  "ahányba",
  "ahányból",
  "ahánynál",
  "ahányhoz",
  "ahánytól",
  "ahányan",
  "ahányra",
  "ahányról",
  "ahánnyá",
  "amennyi",
  "amennyit",
  "amennyinek",
  "amennyivel",
  "amennyiért",
  "amennyiben",
  "amennyibe",
  "amennyiből",
  "amennyinél",
  "amennyihez",
  "amennyitől",
  "amennyin",
  "amennyire",
  "amennyiről",
  "amennyivé",
  "ahányadik",
  "ahányadikat",
  "ahányadiknak",
  "ahányadika",
  "ahányadikért",
  "ahányadikban",
  "ahányadikba",
  "ahányadikból",
  "ahányadiknál",
  "ahányadikhoz",
  "ahányadiktól",
  "ahányadikon",
  "ahányadikra",
  "ahányadikról",
  "ahányadikká",
  "ahová",
  "ahonnan",
  "ahonnantól",
  "amerre",
  "amerről",
  "ahogy",
  "ahogyan",
  "amiért",
  "amikor",
  "amikortól",
  "amikorra",
  "akik",
  "akiket",
  "akiké",
  "akiknek",
  "akikkel",
  "akikért",
  "akikben",
  "akikbe",
  "akikból",
  "akiknél",
  "akikhez",
  "akiktől",
  "akiken",
  "akikre",
  "akikről",
  "akikké",
  "amik",
  "amiket",
  "amiké",
  "amiknek",
  "amikkel",
  "amikért",
  "amikben",
  "amikbe",
  "amikból",
  "amiknél",
  "amikhez",
  "amiktől",
  "amiken",
  "amikre",
  "amikről",
  "amikké",
  "amilyenek",
  "amilyeneket",
  "amilyeneknek",
  "amilyenekkel",
  "amilyenekért",
  "amilyenekben",
  "amilyenekbe",
  "amilyenekből",
  "amilyeneknél",
  "amilyenekhez",
  "amilyenektől",
  "amilyeneken",
  "amilyenekre",
  "amilyenekről",
  "amekkorák",
  "amekkorákat",
  "amekkoráknak",
  "amekkorákkal",
  "amekkorákért",
  "amekkorákban",
  "amekkorákba",
  "amekkorákból",
  "amekkoráknál",
  "amekkorákhoz",
  "amekkoráktól",
  "amekkorákon",
  "amekkorákra",
  "amekkorákról",
  "amekkorákká",
  "amelyek",
  "amelyeket",
  "amelyeknek",
  "amelyekkel",
  "amelyekért",
  "amelyekben",
  "amelyekbe",
  "amelyekből",
  "amelyeknél",
  "amelyekhez",
  "amelyektől",
  "amelyeken",
  "amelyekre",
  "amelyekről",
  "ahányak",
  "ahányakat",
  "ahányaknak",
  "ahányakkal",
  "ahányakért",
  "ahányakban",
  "ahányakba",
  "ahányakból",
  "ahányaknál",
  "ahányakhoz",
  "ahányaktól",
  "ahányakon",
  "ahányakra",
  "ahányakról",
  "ahányakká",
  "amennyik",
  "amennyiket",
  "amennyiknek",
  "amennyikkel",
  "amennyikért",
  "amennyikben",
  "amennyikbe",
  "amennyikből",
  "amennyiknél",
  "amennyikhez",
  "amennyiktől",
  "amennyiken",
  "amennyikre",
  "amennyikről",
  "amennyikké",
  "ahányadikak",
  "ahányadikat",
  "ahányadiknak",
  "ahányadikkal",
  "ahányadikért",
  "ahányadikban",
  "ahányadikba",
  "ahányadikból",
  "ahányadiknál",
  "ahányadikhoz",
  "ahányadiktól",
  "ahányadikon",
  "ahányadikra",
  "ahányadikról",
  "ahányadikká",
  "amikért",
  // Reciprocal pronouns.
  "egymás",
  "egymást",
  "egymásé",
  "egymásnak",
  "egymással",
  "egymásért",
  "egymásban",
  "egymásba",
  "egymásból",
  "egymásnál",
  "egymáshoz",
  "egymástól",
  "egymáson",
  "egymásra",
  "egymásról",
  "egymássá"
], ZUa = ["ki", "kit", "kié", "kinek", "kivel", "kiért", "kiben", "kibe", "kiből", "kinél", "kihez", "kitől", "kin", "kire", "kiről", "kicsoda", "kicsodát", "kicsodának", "kicsodával", "kicsodáért", "kicsodában", "kicsodába", "kicsodából", "kicsodánál", "kicsodához", "kicsodától", "kicsodán", "kicsodára", "kicsodáról", "mi", "mit", "minek", "mivel", "miért", "miben", "mibe", "miből", "minél", "mihez", "mitől", "min", "mire", "miről", "micsoda", "micsodát", "micsodának", "micsodával", "micsodáért", "micsodában", "micsodába", "micsodából", "micsodánál", "micsodához", "micsodától", "micsodán", "micsodára", "micsodáról", "milyen", "milyet", "milyennek", "milyennel", "milyenért", "milyenben", "milyenbe", "milyenből", "milyennél", "milyenhez", "milyentől", "milyenen", "milyenre", "milyenről", "mekkora", "mekkorát", "mekkorának", "mekkorával", "mekkoráért", "mekkorában", "mekkorába", "mekkorából", "mekkoránál", "mekkorához", "mekkorától", "mekkorán", "mekkorára", "mekkoráról", "miféle", "mifélét", "mifélének", "mifélével", "miféléért", "mifélében", "mifélébe", "miféléből", "mifélénél", "miféléhez", "mifélétől", "mifélén", "mifélére", "miféléről", "melyik", "melyiket", "melyiknek", "melyikkel", "melyikért", "melyikben", "melyikbe", "melyikből", "melyiknél", "melyikhez", "melyiktől", "melyiken", "melyikre", "melyikről", "hány", "hányat", "hánynak", "hánnyal", "hányért", "hányban", "hányba", "hányból", "hánynál", "hányhoz", "hánytól", "hányon", "hányra", "hányról", "mennyi", "mennyit", "mennyinek", "mennyivel", "mennyiért", "mennyiben", "mennyibe", "mennyiből", "mennyinél", "mennyihez", "mennyitől", "mennyin", "mennyire", "mennyiről", "hányadik", "hányadikat", "hányadiknak", "hányadikkal", "hányadikért", "hányadikban", "hányadikba", "hányadikból", "hányadiknál", "hányadikhoz", "hányadiktól", "hányadikon", "hányadikra", "hányadikról", "hol", "hová", "honnan", "honnantól", "honnanról", "merre", "mettől", "merről", "meddig", "meddigtől", "meddigről", "mióta", "hogyan", "miként", "kik", "kiket", "kiknek", "kikkel", "kikért", "kikben", "kikbe", "kikből", "kiknél", "kikhez", "kiktől", "kiken", "kikre", "kikről", "kicsodák", "kicsodákat", "kicsodáknak", "kicsodákkal", "kicsodákért", "kicsodákban", "kicsodákba", "kicsodákból", "kicsodáknál", "kicsodákhoz", "kicsodáktól", "kicsodákon", "kicsodákra", "kicsodáról", "mik", "miket", "miknek", "mikkel", "mikért", "mikben", "mikbe", "mikből", "miknél", "mikhez", "miktől", "miken", "mikre", "mikről", "micsodák", "micsodákat", "micsodáknak", "micsodákkal", "micsodákért", "micsodákban", "micsodákba", "micsodákból", "micsodáknál", "micsodákhoz", "micsodáktól", "micsodákon", "micsodákra", "micsodákról", "milyenek", "milyeneket", "milyeneknek", "milyenekkel", "milyenekért", "milyenekben", "milyenekbe", "milyenekből", "milyeneknél", "milyenekhez", "milyenektől", "milyeneken", "milyenekre", "milyenekről", "mekkorák", "mekkorákat", "mekkoráknak", "mekkorákkal", "mekkorákért", "mekkorákban", "mekkorákba", "mekkorákból", "mekkoráknál", "mekkorákhoz", "mekkoráktól", "mekkorákon", "mekkorákra", "mekkorákról", "mifélék", "miféléket", "miféléknek", "mifélékkel", "mifélékért", "mifélékben", "mifélékbe", "mifélékből", "miféléknél", "mifélékhez", "miféléktől", "miféléken", "mifélékre", "mifélékről", "melyikek", "melyikeket", "melyikeknek", "melyikekkel", "melyikekért", "melyikekben", "melyikekbe", "melyikekből", "melyikeknél", "melyikekhez", "melyikektől", "melyikeken", "melyikekre", "melyikekről", "hányak", "hányakat", "hányaknak", "hányakkal", "hányakért", "hányakban", "hányakba", "hányakból", "hányaknál", "hányakhoz", "hányaktól", "hányakon", "hányakra", "hányakról", "mennyik", "mennyiket", "mennyiknek", "mennyikkel", "mennyikért", "mennyikben", "mennyikbe", "mennyikből", "mennyiknél", "mennyikhez", "mennyiktől", "mennyiken", "mennyikre", "mennyikről", "hányadikak", "hányadikakat", "hányadikaknak", "hányadikakkal", "hányadikakért", "hányadikakban", "hányadikakba", "hányadikakból", "hányadikaknál", "hányadikakhoz", "hányadikaktól", "hányadikakon", "hányadikakra", "hányadikakról"], JUa = ["sok", "kevés", "elég", "jónéhány", "néhány", "rengeteg", "töredék", "temérdek", "tengernyi", "számtalan", "számos", "elegendő", "kevéske", "egy csomó", "egy rakás", "egy halom"], e9a = ["magam", "magamat", "magamé", "magamnak", "magammal", "magamért", "magamban", "magamba", "magamból", "magamnál", "magamhoz", "magamtól", "magamon", "magamra", "magamról", "magammá", "magad", "magadat", "magadé", "magadnak", "magaddal", "magadért", "magadban", "magadba", "magadból", "magadnál", "magadhoz", "magadtól", "magadon", "magadra", "magadról", "magaddá", "maga", "magát", "magáé", "magának", "magával", "magáért", "magában", "magába", "magából", "magánál", "magához", "magától", "magán", "magára", "magáról", "magává", "magunk", "magunkat", "magunké", "magunknak", "magunkkal", "magunkért", "magunkban", "magunkba", "magunkból", "magunknál", "magunkhoz", "magunktól", "magunkon", "magunkra", "magunkról", "magunkká", "magatok", "magatokat", "magatoké", "magatoknak", "magatokkal", "magatokért", "magatokban", "magatokba", "magatokból", "magatoknál", "magatokhoz", "magatoktól", "magatokon", "magatokra", "magatokról", "magatokká", "maguk", "magukat", "maguké", "maguknak", "magukkal", "magukért", "magukban", "magukba", "magukból", "maguknál", "magukhoz", "maguktól", "magukon", "magukra", "magukról", "magukká"], a9a = ["valaki", "valakit", "valakié", "valakinek", "valakivel", "valakiért", "valakiben", "valakibe", "valakiből", "valakinél", "valakihez", "valakitől", "valakin", "valakire", "valakiről", "valakivé", "valami", "valamit", "valamié", "valaminek", "valamivel", "valamiért", "valamiben", "valamibe", "valamiből", "valaminél", "valamihez", "valamitől", "valamin", "valamire", "valamiről", "valamivé", "valamilyen", "valamilyet", "valamilyennek", "valamilyennel", "valamilyenért", "valamilyenben", "valamilyenbe", "valamilyenből", "valamilyennél", "valamilyenhez", "valamilyentől", "valamilyenen", "valamilyenre", "valamilyenről", "valaminő", "valamelyes", "valamelyest", "valamekkora", "valamekkorát", "valamekkorának", "valamekkorával", "valamekkoráért", "valamekkorában", "valamekkorába", "valamekkorából", "valamekkoránál", "valamekkorához", "valamekkorától", "valamekkorán", "valamekkorára", "valamekkoráról", "valamekkorává", "valamely", "valamelyet", "valamelynek", "valamellyel", "valamelyért", "valamelyben", "valamelybe", "valamelyből", "valamelynél", "valamelyhez", "valamelytől", "valamelyen", "valamelyre", "valamelyről", "valamellyé", "valamelyik", "valamelyiket", "valemelyiknek", "valamelyikkel", "valamelyikért", "valamelyikben", "valamelyikbe", "valamelyikből", "valamelyiknél", "valamelyikhez", "valamelyiktől", "valamelyiken", "valamelyikre", "valamelyikről", "valamelyikké", "valamiféle", "valamifélét", "valamifélének", "valamifélével", "valamiféléért", "valamifélében", "valamifélébe", "valamiféléből", "valamifélénél", "valamiféléhez", "valamifélétől", "valamifélén", "valamifélére", "valamiféléről", "valamennyi", "valamennyit", "valamennyié", "valamennyinek", "valamennyivel", "valamennyiért", "valamennyiben", "valamennyibe", "valamennyiből", "valamennyinél", "valamennyihez", "valamennyitől", "valamennyin", "valamennyire", "valamennyiről", "valamennyivé", "valahány", "valahányat", "valahánynak", "valahánnyal", "valahányért", "valahányban", "valahányba", "valahányból", "valahánynál", "valahányhoz", "valahánytól", "valahányon", "valahányra", "valahányról", "valahánnyá", "némely", "némelyet", "némelynek", "némelynél", "némelyért", "némelyben", "némelybe", "némelyből", "némelynél", "némelyhez", "némelytől", "némelyen", "némelyre", "némelyről", "némi", "némelyik", "némelyiket", "némelyiknek", "némelyikkel", "némelyikért", "némelyikben", "némelyikbe", "némelyikből", "némelyiknél", "némelyikhez", "némelyiktől", "némelyiken", "némelyikre", "némelyikről", "néminemű", "néhány", "néhányat", "néhánynak", "néhánnyal", "néhányért", "néhányban", "néhányba", "néhányból", "néhánynál", "néhányhoz", "néhánytól", "néhányon", "néhányra", "néhányról", "valahol", "valahová", "valamerre", "valahonnan", "valamikor", "valaha", "valaha", "valahogyan", "valamiképpen", "valamiért", "néhol", "néha", "némelykor", "némiképpen", "némileg", "mindenki", "mindenféle", "mindegyik", "mindahány", "mindenhol", "mindenütt", "mindenhová", "mindenhonnan", "mindenkor", "mindenhogyan", "mindenképpen", "bárki", "bármi", "bármelyik", "bármilyen", "bármennyi", "bárhol", "bárhová", "bárhonnan", "bármikor", "bármeddig", "bárhogyan", "akárki", "akármi", "akármelyik", "akármilyen", "akármennyi", "akárhány", "akárhol", "akárhová", "akárhonnan", "akármikor", "akárhogyan", "senki", "semmi", "semmilyen", "semennyi", "sehány", "sehol", "sehová", "sehonnan", "semmikor", "sehogy", "semmiképp", "valakik", "valakiket", "valakiké", "valakiknek", "valakikkel", "valakikért", "valakikben", "valakikbe", "valakikből", "valakiknél", "valakikhez", "valakiktől", "valakiken", "valakikre", "valakikről", "valakikké", "valamik", "valamiket", "valamiké", "valamiknek", "valamikkel", "valamikért", "valamikben", "valamikbe", "valamikből", "valamiknél", "valamikhez", "valamiktől", "valamiken", "valamikre", "valamikről", "valamikké", "valamilyenek", "valamilyeneket", "valamilyeneknek", "valamilyenekkel", "valamilyenekért", "valamilyenekben", "valamilyenekbe", "valamilyenekből", "valamilyeneknél", "valamilyenekhez", "valamilyenektől", "valamilyeneken", "valamilyenekre", "valamilyenekről", "valamilyenekké", "valaminők", "valamekkorák", "valamekkorákat", "valamekkoráknak", "valamekkorákkal", "valamekkorákért", "valamekkorákban", "valamekkorákba", "valamekkorákból", "valamekkoráknál", "valamekkorákhoz", "valamekkoráktól", "valamekkorákon", "valamekkorákra", "valamekkorákról", "valamelyek", "valamelyeket", "valamelyeknek", "valamelyekkel", "valamelyekért", "valamelyekben", "valamelyekbe", "valamelyekből", "valamelyeknél", "valamelyekhez", "valamelyektől", "valamelyeken", "valamelyekre", "valamelyekről", "valamelyekké", "valamelyikek", "valamelyikeket", "valamelyikeknek", "valamelyikekkel", "valamelyikekért", "valamelyikekben", "valamelyikekbe", "valamelyikekből", "valamelyikeknél", "valamelyikekhez", "valamelyikektől", "valamelyikeken", "valamelyikekre", "valamelyikekről", "valamifélék", "valamiféléket", "valamiféléknek", "valamifélékkel", "valamifélékért", "valamifélékben", "valamifélékbe", "valamifélékből", "valamiféléknél", "valamifélékhez", "valamiféléktől", "valamiféléken", "valamifélékre", "valamifélékről", "valamennyik", "valamennyiket", "valamennyiknek", "valamennyikkel", "valamennyikért", "valamennyikben", "valamennyikbe", "valamennyikből", "valamennyiknél", "valamennyikhez", "valamennyiktől", "valamennyiken", "valamennyikre", "valamennyikről", "valahányak", "valahányakat", "valahányaknak", "valahányakkal", "valahányakért", "valahányakban", "valahányakba", "valahányakból", "valahányaknál", "valahányakhoz", "valahányaktól", "valahányakon", "valahányakra", "valahányakról", "némelyek", "némelyeket", "némelyeknek", "némelyekkel", "némelyekért", "némelyekben", "némelyekbe", "némelyekből", "némelyeknél", "némelyekhez", "némelyektől", "némelyeken", "némelyekre", "némelyekről", "némelyikek", "némelyikeket", "némelyikeknek", "némelyikekkel", "némelyikekért", "némelyikekben", "némelyikekbe", "némelyikekből", "némelyikeknél", "némelyikekhez", "némelyikektől", "némelyikeken", "némelyikekre", "némelyikekről", "néhányak", "néhányakat", "néhányaknak", "néhányakkal", "néhányakért", "néhányakban", "néhányakba", "néhányakból", "néhányaknál", "néhányakhoz", "néhányaktól", "néhányakon", "néhányakra", "néhányakról"], t9a = ["előtt", "elé", "elől", "alatt", "alá", "alól", "túl", "alatt", "belül", "előtt", "fogva", "hosszat", "múlva", "óta", "tájt", "ellen", "helyett", "iránt", "miatt", "nélkül", "részére", "számára", "végett", "között"], n9a = ["és", "s", "se", "sem", "vagy", "is", "de"], r9a = ["mond", "bejelent", "megerősít", "kijelent", "javasol", "említ", "tájékoztat", "értesít", "kérdez", "beszél", "megkérdez", "állít", "elmagyaráz", "magyaráz", "gondol", "hisz", "megtárgyal", "tárgyal", "vitat", "megvitat", "ért", "megért", "elmond", "elmesél", "tud", "megtud", "megbeszél", "megmond", "megmagyaráz"], s9a = ["alig", "kissé", "különösen", "nagyon", "teljesen", "túl", "túlságosan", "kevésbé", "nagyrészt", "kicsit", "picit", "szörnyen", "borzasztóan", "iszonyatosan", "irtó", "irtózatosan", "komolyan", "súlyosan", "könnyedén", "nehezen"], i9a = ["fog", "volna", "akar", "bír", "kell", "kíván", "látszik", "lehet", "tud", "szabad", "tetszik", "méltóztatik", "szokott"], o9a = [
  // General adjective.
  "nagy",
  "kicsi",
  "gyors",
  "lassú",
  "jó",
  "rossz",
  "drága",
  "olcsó",
  "vastag",
  "vékony",
  "keskeny",
  "széles",
  "puha",
  "hangos",
  "halk",
  "intelligens",
  "buta",
  "nedves",
  "száraz",
  "nehéz",
  "könnyű",
  "kemény",
  "lágy",
  "sekély",
  "mély",
  "gyönge",
  "erős",
  "gazdag",
  "szegény",
  "fiatal",
  "öreg",
  "hosszú",
  "rövid",
  "magas",
  "alacsony",
  "bőkezű",
  "fukar",
  "igaz",
  "hamis",
  "gyönyörű",
  "csúnya",
  "új",
  "régi",
  "boldog",
  "szomorú",
  "idős",
  "gyenge",
  "biztonságos",
  "veszélyes",
  "korán",
  "későn",
  "világos",
  "sötét",
  "nyitva",
  "zárva",
  "szoros",
  "laza",
  "teli",
  "üres",
  "sok",
  "kevés",
  "élő",
  "halott",
  "meleg",
  "hideg",
  "érdekes",
  "unalmas",
  "szerencsés",
  "szerencsétlen",
  "fontos",
  "lényegtelen",
  "messze",
  "közel",
  "tiszta",
  "piszkos",
  "kedves",
  "gonosz",
  "kellemes",
  "kellemetlen",
  "kiváló",
  "borzalmas",
  "normális",
  "szép",
  // General adverbs.
  "nagyon",
  "kicsit",
  "gyorsan",
  "lassan",
  "jól",
  "rosszul",
  "drágán",
  "olcsón",
  "hangosan",
  "halkan",
  "nehezen",
  "könnyen",
  "gyengén",
  "erősen",
  "gazdagon",
  "fiatalon",
  "öreg",
  "hosszan",
  "röviden",
  "magasan",
  "alacsonyan",
  "bőkezűen",
  "gyönyörűen",
  "csúnyán",
  "boldogan",
  "szomorúan",
  "gyengéden",
  "biztonságosan",
  "veszélyesen",
  "világosan",
  "szorosan",
  "lazán",
  "sokan",
  "kevesen",
  "élve",
  "melegen",
  "hidegen",
  "érdekesen",
  "unalmasan",
  "szerencsésen",
  "szerencsétlenül",
  "tisztán",
  "piszkosan",
  "kedvesen",
  "gonoszan",
  "kellemesen",
  "kellemetlenül",
  "kiválóan",
  "borzalmasan",
  "normálisan",
  "szépen"
], l9a = ["ó", "óh", "jaj", "a kutyafáját", "a fenébe", "a csudába", "a francba", "atyaég", "atyavilág", "azta", "aztamindenit", "juj", "juhú", "éljen", "jé", "hű", "hú", "ajjaj", "pszt", "csitt", "hess", "hé", "ej", "ejnye", "na", "nicsak", "nocsak", "natessék", "nahát", "rajta", "hajrá", "juhú", "teringettét", "nosza", "uccu", "csitt", "kuss", "dirr", "durr"], d9a = ["liter", "l", "deciliter", "dl", "milliliter", "gramm", "g", "dekagramm", "dkg", "kilogramm", "kg", "milligramm", "mg", "tucat", "centiliter", "cl", "méter", "m", "deciméter", "dm", "centiméter", "cm", "milliméter", "mm", "evőkanál", "ek.", "mokkáskanál", "mk.", "kávéskanál", "kk.", "gyermekkanál", "gyk.", "kávéscsésze", "kcs.", "teáscsésze", "tcs.", "csésze", "csé.", "bögre", "bgr.", "mélytányér", "ujjnyi", "csomag", "gerezd", "csokor"], u9a = ["másodperc", "perc", "óra", "nap", "hét", "hónap", "év", "évtized", "évszázad", "évezred", "ma", "holnap", "tegnap", "jövő héten", "jövő hónapban", "jövő évben", "múlt héten", "múlt hónapban", "múlt évben", "tavaly", "jövőre", "reggel", "délben", "este", "éjszaka", "hajnalban", "délután", "délelőtt"], c9a = ["dolog", "izé", "valami", "személy", "ember", "alkalom", "eset", "ügy", "tárgy", "valamicsoda", "téma", "ötlet"], p9a = [
  "stb.",
  // Fractions.
  "fél",
  "harmad",
  "negyed",
  "ötöd",
  "hatod",
  "heted",
  "nyolcad",
  "kilenced",
  "tized",
  "egyharmad",
  "egynegyed",
  "egyötöd",
  "egyhatod",
  "egyheted",
  "egynyolcad",
  "egykilenced",
  "egytized",
  "század",
  "ezred"
], g9a = yd.all = (0, GUa.default)([].concat(KUa, YUa, QUa, XUa, ZUa, JUa, e9a, a9a, t9a, n9a, r9a, s9a, i9a, o9a, l9a, d9a, u9a, c9a, p9a, HUa.singleWords));
yd.default = g9a;
var lz = {};
Object.defineProperty(lz, "__esModule", {
  value: !0
});
lz.default = void 0;
lz.default = [["nemcsak", "hanem", "is"], ["ahogy", "akkor"], ["ahogy", "azonnal"], ["ahogy", "azután"], ["ahogy", "máris"], ["ahogy", "nyomban"], ["ahogy", "tüstént"], ["akkor", "amikor"], ["akkor", "ha"], ["akkor", "hogy"], ["akkor", "hogyha"], ["akkor", "mikor"], ["akkorra", "amikorra"], ["akkorra", "mikorra"], ["akkorra", "mire"], ["akkortól", "amikor"], ["akkortól", "mikor"], ["alighogy", "máris"], ["alighogy", "nyomban"], ["alighogy", "tüstént"], ["addig", "ameddig"], ["ameddig", "addig"], ["abba", "hogy"], ["abban", "hogy"], ["abból", "hogy"], ["addig", "amíg"], ["addig", "hogy"], ["addig", "míg"], ["afelé", "hogy"], ["ahelyett", "hogy"], ["ahhoz", "hogy"], ["akként", "hogy"], ["akkorra", "hogy"], ["amiatt", "hogy"], ["amellett", "hogy"], ["anélkül", "hogy"], ["annyi", "hogy"], ["annyi", "mint"], ["annyira", "hogy"], ["annyira", "mint"], ["arra", "hogy"], ["arról", "hogy"], ["attól fogva", "hogy"], ["attól", "hogy"], ["avégett", "hogy"], ["avégre", "hogy"], ["az ellen", "hogy"], ["az iránt", "hogy"], ["azelőtt", "hogy"], ["azért", "hogy"], ["azon", "hogy"], ["azonkívül", "hogy"], ["azóta", "hogy"], ["azután", "hogy"], ["azzal", "hogy"], ["hol", "hol"], ["igaz", "hogy"], ["mind", "mind"], ["nem úgy", "mint"], ["oly módon", "hogy"], ["inkább", "semhogy"], ["úgy", "hogy"], ["úgy", "mint"], ["vagy", "vagy"], ["se", "se"], ["sem", "sem"], ["is", "is"], ["akár", "akár"], ["is", "meg"], ["nem", "hanem"], ["egyrészt", "másrészt"], ["minél", "annál"], ["amíg", "addig"], ["amíg", "addigra"], ["amikor", "akkor"], ["akkor", "amikor"], ["amikor", "aközben"], ["amikor", "azalatt"], ["addigra", "amikorra"], ["amikorra", "addigra"], ["amikorra", "akkorra"], ["amint", "akkor"], ["amint", "azonnal"], ["amint", "máris"], ["amint", "nyomban"], ["amint", "tüstént"], ["amióta", "attól kezdve"], ["azóta", "amióta"], ["amióta", "azóta"], ["amire", "addig"], ["amire", "addigra"], ["azóta", "hogy"], ["ha", "akkor"], ["hogyha", "akkor"], ["is", "is"], ["azalatt", "mialatt"], ["mialatt", "azalatt"], ["mielőtt", "azelőtt"], ["azelőtt", "mielőtt"], ["mihelyt", "azonnal"], ["mihelyt", "máris"], ["mihelyt", "nyomban"], ["mihelyt", "tüstént"], ["mikor", "akkor"], ["mikor", "aközben"], ["mikor", "azalatt"], ["mikor", "azután"], ["mikorra", "addigra"], ["akkorra", "mikorra"], ["mikorra", "akkorra"], ["miközben", "azalatt"], ["mióta", "attól kezdve"], ["mire", "addigra"], ["miután", "azután"], ["attól kezdve", "mióta"], ["mióta", "azóta"], ["azóta", "mióta"], ["mire", "addig"], ["addigra", "mire"], ["azután", "miután"], ["nemcsak", "hanem"], ["sem", "sem"], ["vagy", "vagy"]];
var dz = {};
Object.defineProperty(dz, "__esModule", {
  value: !0
});
dz.default = void 0;
dz.default = [
  // Definite articles:
  "az",
  "a",
  // Indefinite article:
  "egy",
  // Numbers 0 to 10, 100, 1000:
  "nulla",
  "egy",
  "kettő",
  "kettő",
  "három",
  "négy",
  "öt",
  "hat",
  "hét",
  "nyolc",
  "kilenc",
  "tíz",
  "száz",
  "ezer",
  // Conjunctions:
  "és",
  "se",
  "sem",
  "vagy",
  "de",
  // Adverbs:
  "aztán",
  "ezután",
  "azután",
  "majd",
  "ezek után",
  "nagyon",
  "kicsit",
  "nagy",
  "kevés",
  "sok",
  "sokan",
  "kevesen",
  "jól",
  // Demonstrative pronouns:
  "ez",
  "ezek",
  "az",
  "azok",
  "néhány",
  "aki",
  "ami",
  // Personal pronouns:
  "én",
  "mi",
  "ő",
  "ők",
  "engem",
  "nekem",
  "velem",
  "nálam",
  "hozzám",
  "tőlem",
  "rajtam",
  "rám",
  "rólam",
  "téged",
  "neked",
  "veled",
  "érted",
  "nálad",
  "hozzád",
  "tőled",
  "rólad",
  "őt",
  "neki",
  "vele",
  "érte",
  "nála",
  "hozzá",
  "tőle",
  "rajta",
  "rá",
  "róla",
  "minket",
  "nekünk",
  "velünk",
  "értünk",
  "nálunk",
  "hozzánk",
  "tőlünk",
  "rólunk",
  "titeket",
  "nektek",
  "veletek",
  "értetek",
  "nálatok",
  "hozzátok",
  "tőletek",
  "rajtatok",
  "rátok",
  "rólatok",
  "őket",
  "nekik",
  "velük",
  "értük",
  "bennük",
  "náluk",
  "hozzájuk",
  "tőlük",
  "rajtuk",
  "rájuk",
  "róluk",
  // Transition words:
  "azonban",
  "ám",
  "ha",
  "szerintem",
  "míg",
  "bár",
  "habár",
  "hát",
  "ha",
  "amennyiben",
  "mivel",
  "azonban",
  "amíg",
  "azért",
  "ezért",
  // Interrogatives:
  "mi",
  "mit",
  "miért",
  "meddig",
  "mikor",
  "hány",
  "mennyi",
  "ki",
  "kit",
  "merre",
  "hogy",
  "hogyan",
  "miként",
  "hol",
  "honnan",
  "hová",
  "mivel",
  "milyen",
  // Interjections:
  "ó",
  "óh",
  "jaj",
  // Colours:
  "kék",
  "zöld",
  "fekete",
  "sárga",
  "piros",
  "szürke",
  // Miscellaneous:
  "ne",
  "nem",
  "hát",
  "nos"
];
var Ep = {};
Object.defineProperty(Ep, "__esModule", {
  value: !0
});
Ep.default = void 0;
Ep.default = ["a", "ahogy", "ahol", "aki", "akik", "akkor", "alatt", "által", "általában", "amely", "amelyek", "amelyekben", "amelyeket", "amelyet", "amelynek", "ami", "amit", "amolyan", "amíg", "amikor", "át", "abban", "ahhoz", "annak", "arra", "arról", "az", "azok", "azon", "azt", "azzal", "azért", "aztán", "azután", "azonban", "bár", "be", "belül", "benne", "cikk", "cikkek", "cikkeket", "csak", "de", "e", "eddig", "egész", "egy", "egyes", "egyetlen", "egyéb", "egyik", "egyre", "ekkor", "el", "elég", "ellen", "elé", "először", "előtt", "első", "én", "éppen", "ebben", "ehhez", "emilyen", "ennek", "erre", "ez", "ezt", "ezek", "ezen", "ezzel", "ezért", "és", "fel", "felé", "hanem", "hiszen", "hogy", "hogyan", "igen", "így", "illetve", "ill.", "ill", "ilyen", "ilyenkor", "ismét", "itt", "jó", "jól", "jobban", "kell", "kellett", "keresztül", "keressünk", "ki", "kívül", "között", "közül", "legalább", "lehet", "lehetett", "legyen", "lenne", "lenni", "lesz", "lett", "maga", "magát", "majd", "majd", "már", "más", "másik", "meg", "még", "mellett", "mert", "mely", "melyek", "mi", "mit", "míg", "miért", "milyen", "mikor", "minden", "mindent", "mindenki", "mindig", "mint", "mintha", "mivel", "most", "nagy", "nagyobb", "nagyon", "ne", "néha", "nekem", "neki", "nem", "néhány", "nélkül", "nincs", "olyan", "ott", "össze", "ő", "ők", "őket", "pedig", "persze", "rá", "s", "saját", "sem", "semmi", "sok", "sokat", "sokkal", "számára", "szemben", "szerint", "szinte", "talán", "tehát", "teljes", "tovább", "továbbá", "több", "úgy", "ugyanis", "új", "újabb", "újra", "után", "utána", "utolsó", "vagy", "vagyis", "valaki", "valami", "valamint", "való", "vissza", "viszont"];
var ET = {}, AT = {};
Object.defineProperty(AT, "__esModule", {
  value: !0
});
AT.default = j9a;
const m9a = function(e, a) {
  const t = e.externalStemmer.vowels, n = new RegExp(t);
  return a.search(n);
}, f9a = function(e, a) {
  const t = new RegExp(e.externalStemmer.digraphs), n = new RegExp(e.externalStemmer.consonants), r = a.search(t), o = a.search(n);
  return r === o ? r + 1 : o;
}, ir = function(e, a) {
  const t = m9a(e, a);
  return t === 0 ? f9a(e, a) + 1 : t + 1;
}, h9a = function(e, a) {
  if (e.length < 3)
    return e;
  const t = ir(a, e);
  if (e.search(new RegExp(a.externalStemmer.suffixes1)) >= t) {
    let r = e.slice(0, -2);
    const o = new RegExp(a.externalStemmer.doubleConsonants);
    r.search(o) !== -1 && (r = r.slice(0, -1));
    const u = new RegExp(a.externalStemmer.tripleDoubleConsonants);
    if (r.search(u) !== -1 && (r = r.slice(0, -2) + r.charAt(r.length - 1)), r.length !== e.slice(0, -2).length)
      return r;
  }
  return e;
}, y9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e), r = e.search(new RegExp(a));
  if (r >= n) {
    const o = e.substring(0, r);
    return o.endsWith("á") ? o.replace(/á$/i, "a") : o.endsWith("é") ? o.replace(/é$/i, "e") : o;
  }
  return e;
}, z9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e), r = e.search(new RegExp(a));
  return r >= n ? e.substring(0, r) + "a" : e;
}, b9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e), r = e.search(new RegExp(a));
  return r >= n ? e.substring(0, r) : e;
}, w9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e);
  if (e.search(new RegExp(a)) >= n) {
    let o = e.slice(0, -1);
    const l = new RegExp(t.externalStemmer.doubleConsonants);
    return o.search(l) !== -1 && (o = o.slice(0, -1)), o;
  }
  return e;
}, v9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e), r = e.search(new RegExp(a));
  return r >= n ? e.substring(0, r) : e;
}, k9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e), r = e.search(new RegExp(a));
  return r >= n ? e.substring(0, r) : e;
}, _9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e), r = e.search(new RegExp(a));
  return r >= n ? e.substring(0, r) : e;
}, E9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e), r = e.search(new RegExp(a.suffixes9a));
  if (r >= n)
    return e.substring(0, r) + "a";
  const o = e.search(new RegExp(a.suffixes9b));
  return o >= n ? e.substring(0, o) + "e" : e;
}, A9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e), r = e.search(new RegExp(a));
  return r >= n ? e.substring(0, r) + "a" : e;
}, T9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e);
  return e.search(new RegExp(a.suffixes11a)) >= n ? e.slice(0, -2) + "a" : e.search(new RegExp(a.suffixes11b)) >= n ? e.slice(0, -2) + "e" : e;
}, $9a = function(e, a, t) {
  if (e.length < 3)
    return e;
  const n = ir(t, e), r = e.search(new RegExp(a));
  return r >= n ? e.substring(0, r) : e;
};
function j9a(e, a) {
  const t = h9a(e, a), n = y9a(t, a.externalStemmer.suffixes2, a), r = z9a(n, a.externalStemmer.suffixes3, a), o = b9a(r, a.externalStemmer.suffixes4, a), l = w9a(o, a.externalStemmer.suffixes5, a), u = v9a(l, a.externalStemmer.suffixes6, a), c = k9a(u, a.externalStemmer.suffixes7, a), f = _9a(c, a.externalStemmer.suffixes8, a), y = E9a(f, a.externalStemmer.suffixes9, a), z = A9a(y, a.externalStemmer.suffixes10, a), v = T9a(z, a.externalStemmer.suffixes11, a);
  return $9a(v, a.externalStemmer.suffixes12, a);
}
Object.defineProperty(ET, "__esModule", {
  value: !0
});
ET.default = P9a;
var x9a = K, S9a = ee, O9a = I9a(AT);
function I9a(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: C9a
} = S9a.languageProcessing;
function P9a(e) {
  const a = (0, x9a.get)(e.getData("morphology"), "hu", !1);
  return a ? (t) => (0, O9a.default)(t, a) : C9a;
}
var TT = {}, uz = {}, $T = {}, cz = {};
Object.defineProperty(cz, "__esModule", {
  value: !0
});
cz.default = void 0;
cz.default = [
  // Participles ending in -re.
  "megvételre",
  "megrendezésre",
  "képzésre",
  "kifejezésre",
  "következtetésre",
  "fejlesztésre",
  "bevezetésre",
  "kezelésre",
  "ellenőrzésre",
  "elhelyezésre",
  "értékesítésre",
  "cselekvésre",
  "beépítésre",
  "intézkedésre",
  "kifizetésre",
  "működésre",
  "értékelésre",
  "egyeztetésre",
  "rögzítésre",
  "megjelenésre",
  "meghirdetésre",
  "fizetésre",
  "megbeszélésre",
  "bejelentésre",
  "bekezdésre",
  "közreműködésre",
  "teljesítésre",
  "elküldésre",
  "kivitelezésre",
  "kihirdetésre",
  "korszerűsítésre",
  "előterjesztésre",
  "üzemeltetésre",
  "szerződéskötésre",
  "visszafizetésre",
  "befektetésre",
  "minősítésre",
  "telepítésre",
  "megfigyelésre",
  "berendezésre",
  "megerősítésre",
  "megtekintésre",
  "feltüntetésre",
  "megkülönböztetésre",
  "befizetésre",
  "megszüntetésre",
  "kinevezésre",
  "előkészítésre",
  "felmentésre",
  "megszervezésre",
  "gyógykezelésre",
  "mérlegelésre",
  "végkielégítésre",
  "engedélyezésre",
  "kihelyezésre",
  "megsemmisítésre",
  "előrelépésre",
  "tenyésztésre",
  "elnevezésre",
  "befejezésre",
  "ismétlésre",
  "egyesülésre",
  "közvetítésre",
  "lekérdezésre",
  "szervezésre",
  "csökkentésre",
  "területfejlesztésre",
  "költségtérítésre",
  "felfüggesztésre",
  "frissítésre",
  "vámfizetésre",
  "kifejlesztésre",
  "elhelyezkedésre",
  "teremtésre",
  "megjelölésre",
  "töltésre",
  "kiegyenlítésre",
  "kifejtésre",
  "megépítésre",
  "átszervezésre",
  "termesztésre",
  "felemelkedésre",
  "átépítésre",
  "áremelésre",
  "áthelyezésre",
  "újjáépítésre",
  "megbecsülésre",
  "átültetésre",
  "visszaigénylésre",
  "feljegyzésre",
  "törlesztésre",
  "helyettesítésre",
  "követelésre",
  "érvelésre",
  "elkülönítésre",
  "átképzésre",
  "kiértékelésre",
  "térítésre",
  "továbbfejlesztésre",
  "ösztönzésre",
  "szerkesztésre",
  "megítélésre",
  "letöltésre",
  "selejtezésre",
  "segélyezésre",
  "érintkezésre",
  "emelkedésre",
  "megküldésre",
  "erősítésre",
  "felderítésre",
  "védésre",
  "elbeszélgetésre",
  "megemlítésre",
  "felépítésre",
  "megfejtésre",
  "mentesítésre",
  "előfizetésre",
  "megtervezésre",
  "szakképesítésre",
  "hitelesítésre",
  "megnevezésre",
  "érvényesítésre",
  "számonkérésre",
  "terjeszkedésre",
  "beterjesztésre",
  "összevetésre",
  "jogsértésre",
  "véglegesítésre",
  "kiküldetésre",
  "megörökítésre",
  "kivégzésre",
  "költözésre",
  "megtérülésre",
  "kézbesítésre",
  "közmegegyezésre",
  "idézésre",
  "kirekesztésre",
  "visszaesésre",
  "beszerelésre",
  "beültetésre",
  "kiterjesztésre",
  "kifüggesztésre",
  "leépítésre",
  "megismerkedésre",
  "végzésre",
  "részletfizetésre",
  "megfizetésre",
  "kiürítésre",
  "ízesítésre",
  "méregtelenítésre",
  "rendszerezésre",
  "felterjesztésre",
  "szemléltetésre",
  "megtermékenyítésre",
  "lekötésre",
  "kiegyezésre",
  "előrejelzésre",
  "ellenvetésre",
  "növelésre",
  "képesítésre",
  "beszedésre",
  "ellenjegyzésre",
  "áttelepítésre",
  "egységesítésre",
  "akadálymentesítésre",
  "előtörlesztésre",
  // Participles ending in -ra.
  "azonosításra",
  "aktiválásra",
  "hasznosításra",
  "foglalkoztatásra",
  "finanszírozásra",
  "megfinanszírozásra",
  "benyújtásra",
  "pontosításra",
  "forgalmazásra",
  "beszállításra",
  "felzárkózásra",
  "továbbításra",
  "differenciálásra",
  "folyósításra",
  "kiszállításra",
  "átcsoportosításra",
  "kártalanításra",
  "továbbgondolásra",
  "felzárkóztatásra",
  "megválaszolásra",
  "átállásra",
  "számlázásra",
  "fotózásra",
  "megvásárlásra",
  "felszámításra",
  "kiszámlázásra",
  "lehívásra",
  "leszámlázásra",
  "továbbjutásra",
  "szaporításra",
  "raktározásra",
  "kinyomtatásra",
  "reklámozásra",
  "újrahasznosításra",
  "archiválásra",
  "elővásárlásra",
  "visszautalásra",
  "létrehozásra",
  "tanúsításra",
  "ártalmatlanításra",
  "adományozásra",
  "kisorsolásra",
  "utalványozásra",
  "átgondolásra",
  "azonosulásra",
  "postázásra",
  "televíziózásra",
  "átsorolásra",
  "finomításra",
  "privatizálásra",
  "dokumentálásra",
  "beiskolázásra",
  "digitalizálásra",
  "újragondolásra",
  "aktualizálásra",
  "delegálásra",
  "pályáztatásra",
  "voksolásra",
  "felhordásra",
  "moderálásra",
  "áthaladásra",
  "gyámolításra",
  "lajstromozásra",
  "sokszorosításra",
  "elsajátításra",
  "szigorításra",
  "klónozásra",
  "elhatárolódásra",
  "elbontásra",
  "kiaknázásra",
  "befolyásolásra",
  "renoválásra",
  "kivárásra",
  "feliratozásra",
  "akkreditálásra",
  "parkosításra",
  "szakosodásra",
  "legyártásra",
  "továbbgondolkodásra",
  "magánosításra",
  "összehangolásra",
  "megvilágosodásra",
  "titkosításra",
  "integrálásra",
  "visszaadásra",
  "rangsorolásra",
  "kilábalásra",
  "szponzorálásra",
  "szankcionálásra",
  "modernizálásra",
  "leltározásra",
  "koordinálásra",
  "apostolkodásra",
  "definiálásra",
  "komposztálásra",
  "elvándorlásra",
  "átváltásra",
  "kódolásra",
  "naplózásra",
  "adagolásra",
  "megtámadásra",
  "exportálásra",
  "betáplálásra",
  "kompenzálásra",
  "kapaszkodásra",
  "áthallgatásra",
  "dedikálásra",
  "beindításra",
  "kimunkálásra",
  "hamisításra",
  "megigazulásra",
  "újratárgyalásra",
  "visszaszállításra",
  "megalapításra",
  "szabványosításra",
  "tartósításra",
  "meditálásra",
  "palackozásra",
  "bírságolásra",
  "listázásra",
  "liberalizálásra",
  "iskoláztatásra",
  "auditálásra",
  "monitorozásra",
  "visszapótlásra",
  "sugalmazásra",
  "kipostázásra",
  "előrejutásra",
  "gyarapításra",
  "visszaosztásra",
  "konzerválásra",
  "adóztatásra",
  "decentralizálásra",
  "diagnosztizálásra",
  "harmonizálásra",
  "konszolidálásra",
  "átszállításra",
  "realizálásra",
  "beazonosításra",
  "szelektálásra",
  "újraszabályozásra",
  "kihúzásra",
  "optimalizálásra",
  "bevizsgálásra",
  "kiválogatásra",
  "leosztásra",
  "szállítmányozásra",
  "torzításra",
  "visszaigazolásra",
  "visszaszolgáltatásra",
  "rehabilitálásra",
  "továbbtartásra",
  "darabolásra",
  "felhasználásra",
  "bemutatásra",
  "ellátásra",
  "felújításra",
  "kialakításra",
  "átadásra",
  "kiállításra",
  "feldolgozásra",
  "módosításra",
  "változásra",
  "kiosztásra",
  "beavatkozásra",
  "megvalósításra",
  "megállapodásra",
  "jóváhagyásra",
  "szabályozásra",
  "változtatásra",
  "elszámolásra",
  "felhívásra",
  "meghallgatásra",
  "elbírálásra",
  "végrehajtásra",
  "lemondásra",
  "elhatározásra",
  "kiírásra",
  "megfogalmazásra",
  "népszavazásra",
  "kiválasztásra",
  "hozzájárulásra",
  "bemutatkozásra",
  "felszólalásra",
  "elutasításra",
  "megvitatásra",
  "levonásra",
  "átutalásra",
  "kizárásra",
  "előállításra",
  "bizonyításra",
  "kárpótlásra",
  "nyomtatásra",
  "felállításra",
  "beszámításra",
  "pótlásra",
  "publikálásra",
  "megbízásra",
  "felbontásra",
  "megválasztásra",
  "kibocsátásra",
  "kivizsgálásra",
  "lebontásra",
  "feltárásra",
  "felosztásra",
  "visszavonásra",
  "elosztásra",
  "felvásárlásra",
  "megbocsátásra",
  "szétosztásra",
  "megújításra",
  "megnyitásra",
  "korlátozásra",
  "bérbeadásra",
  "eltiltásra",
  "elbocsátásra",
  "meghosszabbításra",
  "bebocsátásra",
  "levágásra",
  "restaurálásra",
  "felajánlásra",
  "kivágásra",
  "kormányalakításra",
  "megmunkálásra",
  "osztályozásra",
  "sorozatgyártásra",
  "betakarításra",
  "leszámolásra"
];
Object.defineProperty($T, "__esModule", {
  value: !0
});
$T.default = M9a;
var R9a = ee, D9a = N9a(cz);
function N9a(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: L9a
} = R9a.languageProcessing;
function M9a(e) {
  const a = L9a(e), t = new RegExp("(ve|va|ódni|ődni)$");
  return a.filter((n) => t.test(n) || D9a.default.includes(n));
}
var pz = {};
Object.defineProperty(pz, "__esModule", {
  value: !0
});
pz.default = void 0;
pz.default = [
  // Non passives ending in -va.
  "éva",
  "szava",
  "moszkva",
  "alternatíva",
  "normatíva",
  "java",
  "jelszava",
  "direktíva",
  "perspektíva",
  "dráva",
  "lova",
  "kurva",
  "szilva",
  "páva",
  "kollektíva",
  "lárva",
  "szarva",
  "tava",
  "láva",
  "díva",
  "ponyva",
  "hava",
  "offenzíva",
  "előszava",
  "borotva",
  "színe-java",
  "hamva",
  "káva",
  "legjava",
  "mályva",
  "murva",
  "olíva",
  "híre-hamva",
  "pelyva",
  "címszava",
  "dudva",
  "sava",
  "csóva",
  "golyva",
  "árva",
  "fénycsóva",
  "utószava",
  "antikva",
  "közjava",
  "aktíva",
  "hadiárva",
  "morotva",
  "gyomorsava",
  "villanyborotva",
  "alapszava",
  "szerva",
  "odva",
  "naiva",
  "szupernova",
  "félárva",
  "harangszava",
  "szlalomozva",
  "halastava",
  "vezényszava",
  "falova",
  "defenzíva",
  "lángcsóva",
  "varázsszava",
  "végszava",
  "hadova",
  "dzsuva",
  "pányva",
  "sátorponyva",
  "parancsszava",
  "vezérszava",
  "falva",
  "durva",
  "gyáva",
  "tétova",
  "zagyva",
  "mogorva",
  "morva",
  "híva",
  "báva",
  "hova",
  "fordítva",
  "ahova",
  "felváltva",
  "valahova",
  "kurva",
  "sehova",
  "kisvártatva",
  "játszva",
  "hivatva",
  "mindenhova",
  "tova",
  "bárhova",
  "lopva",
  "idestova",
  "elragadtatva",
  "lélekszakadva",
  "fejcsóválva",
  "akárhova",
  "fogcsikorgatva",
  "tárva-nyitva",
  "hagyatva",
  "szájtátva",
  "készakarva",
  "karonfogva",
  "szívdobogva",
  "lélegzet-visszafojtva",
  "szívszorongva",
  "orozva",
  "fogvacogva",
  "szívszakadva",
  "fogvicsorítva",
  "bélapátfalva",
  "albertfalva",
  // Non passives ending in -ve.
  "éve",
  "neve",
  "könyve",
  "szíve",
  "teve",
  "elve",
  "műve",
  "kedve",
  "terve",
  "nyelve",
  "szerve",
  "medve",
  "híve",
  "alapelve",
  "törvénykönyve",
  "életműve",
  "irányelve",
  "kézikönyve",
  "felhasználóneve",
  "jegyzőkönyve",
  "diáknyelve",
  "leve",
  "ismérve",
  "tanterve",
  "hírneve",
  "objektíve",
  "íve",
  "emlékműve",
  "anyanyelve",
  "beceneve",
  "forgatókönyve",
  "féléve",
  "orgonaműve",
  "tankönyve",
  "alapköve",
  "jókedve",
  "évkönyve",
  "járműve",
  "köve",
  "keresztneve",
  "ráckeve",
  "munkaterve",
  "vezetékneve",
  "remekműve",
  "túrkeve",
  "töve",
  "öve",
  "futóműve",
  "heve",
  "sarokköve",
  "életéve",
  "vendégkönyve",
  "negyedéve",
  "jegesmedve",
  "csöve",
  "szócsöve",
  "keve",
  "üdve",
  "nedve",
  "gyűjtőneve",
  "fedőneve",
  "mérföldköve",
  "kéve",
  "ütemterve",
  "próbaköve",
  "gépjárműve",
  "domborműve",
  "ékköve",
  "rokonszenve",
  "érzékszerve",
  "kollektíve",
  "életkedve",
  "örve",
  "sérve",
  "verseskönyve",
  "füve",
  "építőköve",
  "ellenszenve",
  "álneve",
  "tanulmányterve",
  "szakácskönyve",
  "erőműve",
  "sarkköve",
  "barnamedve",
  "hajtóműve",
  "mesterműve",
  "színműve",
  "törzskönyve",
  "utóneve",
  "családneve",
  "formanyelve",
  "távcsöve",
  "tanéve",
  "mosómedve",
  "talpköve",
  "szövegkönyve",
  "sírköve",
  "keserve",
  "boltíve",
  "márkaneve",
  "munkakedve",
  "kérdőíve",
  "rosszkedve",
  "emlékkönyve",
  "gúnyneve",
  "szakkönyve",
  "pályaműve",
  "olvasókönyve",
  "előneve",
  "csúcsszerve",
  "személyneve",
  "atomerőműve",
  "útikönyve",
  "cséve",
  "telefonkönyve",
  "képeskönyve",
  "szabálykönyve",
  "nyakörve",
  "cseppköve",
  "látószerve",
  "mozgásszerve",
  "daloskönyve",
  "halászleve",
  "heresérve",
  "jogelve",
  "köldöksérve",
  "utcaneve",
  "eleve",
  "közvetve",
  "elvétve",
  "relatíve",
  "karöltve",
  "együttvéve",
  "vállvetve"
];
Object.defineProperty(uz, "__esModule", {
  value: !0
});
uz.default = void 0;
var q9a = ee, F9a = jq($T), B9a = jq(pz);
function jq(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  values: W9a
} = q9a.languageProcessing, {
  Clause: U9a
} = W9a;
class H9a extends U9a {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, F9a.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns {void}
   */
  checkParticiples() {
    const a = this.getParticiples().filter((t) => !B9a.default.includes(t));
    this.setPassive(a.length > 0);
  }
}
uz.default = H9a;
var gz = {};
Object.defineProperty(gz, "__esModule", {
  value: !0
});
gz.default = void 0;
const ZP = ["kerülök", "kerülsz", "kerül", "kerülünk", "kerültök", "kerülnek", "kerüljek", "kerülj", "kerüljön", "kerüljünk", "kerüljetek", "kerüljenek", "kerülnék", "kerülnél", "kerülne", "kerülnénk", "kerülnétek", "kerülnének", "kerültem", "kerültél", "került", "kerültünk", "kerültetek", "kerültek", "kerültem volna", "kerültél volna", "került volna", "kerültünk volna", "kerültetek vola", "kerültek volna", "fogok kerülni", "fogsz kerülni", "fog kerülni", "fogunk kerülni", "fogtok kerülni", "fognak kerülni"], JP = ["vagyok", "vagy", "van", "vagyunk", "vagytok", "vannak", "legyek", "legyél", "legyen", "legyünk", "legyetek", "legyenek", "lennék", "lennél", "lenne", "lennénk", "lennétek", "lennének", "leszek", "leszel", "lesz", "leszünk", "lesztek", "lesznek", "voltam", "voltál", "volt", "voltunk", "voltatok", "voltak", "lettem volna", "lettél volna", "lett volna", "lettünk volna", "lettetek volna", "lettek volna"], eR = ["fogok", "fogsz", "fog", "fogunk", "fogtok", "fognak"];
gz.default = {
  auxiliaries1: ZP,
  auxiliaries2: JP,
  auxiliaries3: eR,
  allAuxiliaries: [].concat(ZP, JP, eR)
};
Object.defineProperty(TT, "__esModule", {
  value: !0
});
TT.default = Z9a;
var G9a = ee, V9a = jT(uz), K9a = jT(gz), Y9a = jT(Ep);
function jT(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getClausesSplitOnStopWords: Q9a,
  createRegexFromArray: aR
} = G9a.languageProcessing, X9a = {
  Clause: V9a.default,
  regexes: {
    auxiliaryRegex: aR(K9a.default.allAuxiliaries),
    stopwordRegex: aR(Y9a.default)
  }
};
function Z9a(e) {
  return Q9a(e, X9a);
}
var xT = {}, mz = {};
Object.defineProperty(mz, "__esModule", {
  value: !0
});
mz.default = void 0;
const tR = ["ábrázol", "ad", "adományoz", "ajándékoz", "akadályoz", "alakít", "alapít", "álcáz", "áldoz", "alkalmaz", "alkot", "állít", "arat", "ás", "automatizál", "azonosít", "befolyásol", "bírál", "bizonyít", "bocsát", "bont", "bonyolít", "csatol", "definiál", "deklarál", "digitalizál", "dob", "dokumentál", "dolgoz", "finanszíroz", "fogalmaz", "foglal", "foglalkoztat", "fogyaszt", "fojt", "fokoz", "fontol", "fordít", "forgalmaz", "garantál", "gyakorl", "gyárt", "gyógyít", "hagy", "hajt", "hálál", "hallgat", "hamisít", "hárít", "használ", "határoz", "hidal", "hoz", "igazít", "igazol", "illusztrál", "importál", "indít", "ír", "irányít", "istáz", "javasol", "javít", "jutalmaz", "kattint", "kínál", "kombinál", "kompenzál", "komponál", "kritizál", "kutat", "lapoz", "listáz", "locsol", "magyaráz", "másol", "moderál", "mond", "motivál", "mozgósít", "mulaszt", "mutat", "nyomtat", "nyújt", "olvas", "oszt", "parancsol", "postáz", "pótl", "próbál", "produkál", "ragaszt", "rak", "ráz", "regisztrál", "reklámoz", "rombol", "ront", "ruház", "sajátít", "sorol", "strukturál", "sugárz", "szabályoz", "szakít", "szállít", "számít", "számláz", "számol", "szavaz", "szimbolizál", "szólít", "szorít", "talál", "támogat", "tanít", "tárol", "tart", "taszít", "távolít", "tilt", "tisztít", "továbbít", "tudósít", "tulajdonít", "újít", "utal", "utasít", "válaszol", "választ", "válogat", "vált", "változtat", "varázsol", "világít", "világosít", "vitat", "vizsgál", "von"], nR = ["beszél", "böngész", "bővít", "címz", "cserél", "derít", "díszít", "dönt", "egészít", "egyeztet", "egyszerűsít", "elégít", "emel", "említ", "engedélyez", "enyhít", "épít", "érint", "erősít", "ért", "értékel", "értelmez", "érzékeltet", "ev", "fedez", "fejleszt", "fejt", "fektet", "felejt", "feltev", "figyel", "fizet", "győz", "gyűjt", "hegeszt", "helyettesít", "helyez", "hirdet", "idéz", "igényl", "illeszt", "intéz", "ismer", "ítél", "ízesít", "jegyz", "jelenít", "jelent", "jelentkez", "jelöl", "kényszerít", "képvisel", "kérdez", "kerekít", "keresztel", "készít", "késztet", "kezel", "kivitelez", "kölcsönz", "köt", "követ", "közl", "közvetít", "küld", "különít", "küszöböl", "melegít", "mellékl", "mér", "nevez", "néz", "nyel", "nyer", "örökít", "őrz", "összegz", "összesít", "rendel", "rendez", "rögzít", "semmisít", "sürget", "szed", "szeg", "szennyez", "szerel", "szerkeszt", "szervez", "szigetel", "színez", "tekint", "telepít", "teljesít", "tenyészt", "teremt", "térít", "terjeszt", "tervez", "testesít", "tesztel", "tev", "tölt", "tömörít", "törl", "üldöz", "ültet", "végz", "veszélyeztet", "vet", "vetít", "vev", "vezet"];
mz.default = {
  odikVerbStems1: tR,
  odikVerbStems2: nR,
  all: tR.concat(nR)
};
var Hi = {};
Object.defineProperty(Hi, "__esModule", {
  value: !0
});
Hi.verbPrefixes = Hi.odikSuffixes2 = Hi.odikSuffixes1 = void 0;
Hi.odikSuffixes1 = ["ódom", "ódsz", "ódik", "ódunk", "ódtok", "ódnak", "ódtam", "ódtál", "ódott", "ódtunk", "ódtatok", "ódtak", "ódjak", "ódj", "ódjon", "ódjunk", "ódjatok", "ódjanak", "ódnék", "ódnál", "ódna", "ódnánk", "ódnátok", "ódnának"];
Hi.odikSuffixes2 = ["ődöm", "ődsz", "ődik", "ődünk", "ődtök", "ődnek", "ődtem", "ődtél", "ődött", "ődtünk", "ődtetek", "ődtek", "ődjek", "ődj", "ődjön", "ődjünk", "ődjetek", "ődjenek", "ődnék", "ődnél", "ődne", "dnénk", "ődnétek", "ődnének"];
Hi.verbPrefixes = ["abba", "agyon", "alul", "alá", "alább", "által", "át", "be", "bele", "belé", "benn", "egybe", "együtt", "el", "ellen", "elő", "előre", "észre", "fel", "föl", "félbe", "félre", "felül", "fölül", "fenn", "fönn", "hátra", "haza", "helyre", "hozzá", "ide", "jóvá", "keresztül", "ketté", "ki", "kölcsön", "körül", "körbe", "közbe", "közre", "közzé", "külön", "le", "létre", "meg", "mellé", "neki", "oda", "össze", "rá", "rajta", "széjjel", "szembe", "szerte", "szét", "tele", "teli", "tova", "tovább", "tönkre", "utol", "túl", "újjá", "újra", "utána", "végbe", "végig", "vissza"];
Object.defineProperty(xT, "__esModule", {
  value: !0
});
xT.default = t7a;
var J9a = ee, rR = e7a(mz), rm = Hi;
function e7a(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: a7a
} = J9a.languageProcessing, sR = function(e, a, t, n) {
  return a.some((r) => n.some(function(o) {
    const l = r + o;
    if (e.endsWith(l)) {
      const u = e.slice(0, e.indexOf(l));
      return u === "" || t.includes(u);
    }
  }));
};
function t7a(e) {
  const a = a7a(e), t = rR.default.odikVerbStems1, n = rR.default.odikVerbStems2;
  return a.some((r) => sR(r, t, rm.verbPrefixes, rm.odikSuffixes1) || sR(r, n, rm.verbPrefixes, rm.odikSuffixes2));
}
Object.defineProperty(_T, "__esModule", {
  value: !0
});
var xq = _T.default = void 0, n7a = ee, r7a = mo(yd), s7a = mo(jr), i7a = mo(lz), o7a = mo(dz), l7a = mo(Ep), d7a = mo(ET), u7a = mo(TT), c7a = mo(xT);
function mo(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: p7a
} = n7a.languageProcessing;
let g7a = class extends p7a {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "hu",
      passiveConstructionType: "morphologicalAndPeriphrastic",
      functionWords: r7a.default,
      transitionWords: s7a.default,
      twoPartTransitionWords: i7a.default,
      firstWordExceptions: o7a.default,
      stopWords: l7a.default
    }), Object.assign(this.helpers, {
      getStemmer: d7a.default,
      getClauses: u7a.default,
      isPassiveSentence: c7a.default
    });
  }
};
xq = _T.default = g7a;
var ST = {}, fz = {};
Object.defineProperty(fz, "__esModule", {
  value: !0
});
fz.default = void 0;
fz.default = [
  // Indefinite articles:
  "sebuah",
  "seorang",
  "sang",
  "si",
  // Numbers 1-10:
  "satu",
  "dua",
  "tiga",
  "empat",
  "lima",
  "enam",
  "tujuh",
  "delapan",
  "sembilan",
  "sepuluh",
  "sebelas",
  "seratus",
  "seribu",
  "sejuta",
  "semiliar",
  "setriliun",
  // Demonstrative pronouns:
  "ini",
  "itu",
  "hal",
  "ia"
];
var fn = {}, xr = {};
Object.defineProperty(xr, "__esModule", {
  value: !0
});
xr.singleWords = xr.multipleWords = xr.default = xr.allWords = void 0;
const m7a = xr.singleWords = ["adakalanya", "agak", "agar", "akhirnya", "alhasil", "andaikan", "bahkan", "bahwasannya", "berikut", "betapapun", "biarpun", "biasanya", "contohnya", "dahulunya", "diantaranya", "dikarenakan", "disebabkan", "dulunya", "faktanya", "hasilnya", "intinya", "jadi", "jua", "juga", "kadang-kadang", "kapanpun", "karena", "karenanya", "kedua", "kelak", "kemudian", "kesimpulannya", "khususnya", "langsung", "lantaran", "maka", "makanya", "masih", "memang", "meski", "meskipun", "misalnya", "mulanya", "nantinya", "nyatanya", "pendeknya", "pertama", "ringkasnya", "rupanya", "seakan-akan", "sebaliknya", "sebelum", "sebetulnya", "sedangkan", "segera", "sehingga", "sekali-sekali", "sekalipun", "sekiranya", "selagi", "selain", "selama", "selanjutnya", "semasa", "semasih", "semenjak", "sementara", "semula", "sepanjang", "serasa", "seraya", "seringkali", "sesungguhnya", "setelahnya", "seterusnya", "setidak-tidaknya", "setidaknya", "sewaktu-waktu", "sewaktu", "tadinya", "tentunya", "terakhir", "terdahulu", "terlebih", "ternyata", "terpenting", "terutama", "terutamanya", "tetapi", "umpamanya", "umumnya", "utamanya", "walau", "walaupun", "yaitu", "yakni", "akibatnya", "hingga", "kadang", "kendatipun", "ketiga", "lainnya", "manakala", "namun", "pastinya", "pertama-tama", "sampai-sampai", "sebaliknya", "sebelumnya", "sebetulnya", "sesekali"], f7a = xr.multipleWords = ["agar supaya", "akan tetapi", "apa lagi", "asal saja", "bagaimanapun juga", "bahkan jika", "bahkan lebih", "begitu juga", "berbeda dari", "biarpun begitu", "biarpun demikian", "bilamana saja", "cepat atau lambat", "dalam hal ini", "dalam jangka panjang", "dalam kasus ini", "dalam kasus lain", "dalam kedua kasus", "dalam kenyataannya", "dalam pandangan", "dalam situasi ini", "dalam situasi seperti itu", "dan lagi", "dari awal", "dari pada", "dari waktu ke waktu", "demikian juga", "demikian pula", "dengan serentak", "dengan cara yang sama", "dengan jelas", "dengan kata lain", "dengan ketentuan", "dengan nyata", "dengan panjang lebar", "dengan pemikiran ini", "dengan syarat bahwa", "dengan terang", "di pihak lain", "di sisi lain", "dibandingkan dengan", "disebabkan oleh", "ditambah dengan", "hanya jika", "harus diingat", "hasil dari", "hingga kini", "kalau tidak", "kalau-kalau", "kali ini", "kapan saja", "karena alasan itulah", "karena alasan tersebut", "kecuali kalau", "kendatipun begitu", "kendatipun demikian", "lebih jauh", "lebih lanjut", "maka dari itu", "meskipun demikian", "oleh karena itu", "oleh karenanya", "oleh sebab itu", "pada akhirnya", "pada awalnya", "pada dasarnya", "pada intinya", "pada kenyataannya", "pada kesempatan ini", "pada mulanya", "pada saat ini", "pada saat", "pada situasi ini", "pada umumnya", "pada waktu yang sama", "pada waktunya", "paling tidak", "pendek kata", "penting untuk disadari", "poin penting lainnya", "saat ini", "sama halnya", "sama pentingnya", "sama sekali", "sampai sekarang", "sebab itu", "sebagai akibatnya", "sebagai contoh", "sebagai gambaran", "sebagai gantinya", "sebagai hasilnya", "sebagai tambahan", "sebelum itu", "secara bersamaan", "secara eksplisit", "secara keseluruhan", "secara keseluruhan", "secara khusus", "secara menyeluruh", "secara signifikan", "secara singkat", "secara umum", "sejalan dengan ini", "sejalan dengan itu", "sejauh ini", "sekali lagi", "sekalipun begitu", "sekalipun demikian", "sementara itu", "seperti yang bisa dilihat", "seperti yang sudah saya katakan", "seperti yang sudah saya tunjukkan", "sesudah itu", "setelah ini", "setelah itu", "tak pelak lagi", "tanpa menunda-nunda lagi", "tentu saja", "terutama sekali", "tidak perlu dipertanyakan lagi", "tidak sama", "tidak seperti", "untuk alasan ini", "untuk alasan yang sama", "untuk memperjelas", "untuk menekankan", "untuk menyimpulkan", "untuk satu hal", "untuk sebagian besar", "untuk selanjutnya", "untuk tujuan ini", "walaupun demikian", "yang lain", "yang terakhir", "yang terpenting", "begitu pula", "berbeda dengan", "betapapun juga", "dalam hal itu", "di samping itu", "hal pertama yang perlu diingat", "kadang kala", "karena itu", "lagi pula", "lambat laun", "mengingat bahwa", "meskipun begitu", "pada umumnya", "pada waktu", "saat ini juga", "sampai saat ini", "sebagian besar", "secara terperinci", "selain itu", "seperti yang sudah dijelaskan", "seperti yang tertera di", "tak seperti", "tanpa memperhatikan", "tentu saja", "untuk memastikan", "untuk menggambarkan", "walaupun begitu"], h7a = xr.allWords = m7a.concat(f7a);
xr.default = h7a;
Object.defineProperty(fn, "__esModule", {
  value: !0
});
fn.filteredAtEnding = fn.filteredAtBeginningAndEnding = fn.filteredAtBeginning = fn.filteredAnywhere = fn.default = fn.all = void 0;
var Sq = xr, Ap = y7a(Ba);
function y7a(e) {
  return e && e.__esModule ? e : { default: e };
}
const Oq = ["si", "sang", "kaum", "sri", "hang", "dang", "para"], Iq = ["nol", "satu", "dua", "tiga", "empat", "lima", "enam", "tujuh", "delapan", "sembilan", "sepuluh", "sebelas", "seratus", "seribu", "sejuta", "semiliar", "setriliun"], Cq = ["kesatu", "pertama", "kedua", "ketiga", "keempat", "kelima", "keenam", "ketujuh", "kedelapan", "kesembilan", "kesepuluh", "kesebelas", "keseratus", "keseribu"], z7a = ["lah", "pun", "dong", "kan", "sih", "toh", "nah", "lho", "kok", "ding"], b7a = ["sebuah", "seorang", "seekor", "sebiji", "selembar", "secarik", "sehelai", "sebutir", "sebatang", "sebidang", "sebentuk", "sebilah", "sekuntum", "sepatah", "sepucuk", "setangkai", "seutas", "sebelah", "segenggam", "segugus", "sepiring", "sejenis", "semacam", "sepotong", "setetes", "suatu"], Pq = ["aku", "saya", "engkau", "kau", "kamu", "anda", "kita", "kami", "kalian", "ia", "dia", "beliau", "mereka", "dikau", "daku", "beta", "sayalah", "engkaulah", "kaulah", "kamulah", "andalah", "kitalah", "kamilah", "kalianlah", "dialah", "kamu-kamu", "saya-saya", "mereka-mereka", "beliau-beliau", "anda-anda", "mereka-merekalah", "beliau-beliaulah", "kamu-kamulah", "anda-andalah"], Rq = ["yang"], Dq = ["ini", "itu", "tersebut", "tadi", "inilah", "itulah"], Nq = ["milikku", "milikmu", "miliknya", "punyanya", "punyaku", "punyamu", "kepunyaannya", "kepunyaanmu", "kepunyaanku"], w7a = ["bu", "pak", "bang", "nak", "kak", "dik"], Lq = ["belasan", "puluhan", "ribuan", "miliaran", "triliunan", "setengah", "seperdua", "sepertiga", "seperempat", "seperlima", "seperenam", "sepertujuh", "seperdelapan", "sepersembilan", "sepersepuluh", "sedikit", "setiap", "banyak", "semua", "lebih", "kurang", "sebagian", "cukup", "beberapa", "berpuluh-puluh", "beratus-ratus", "beribu-ribu", "berjuta-juta", "ratusan", "paling", "tiap-tiap"], Mq = ["diriku", "dirinya", "dirimu"], qq = ["lain", "lainnya", "seseorang", "sesuatu", "siapa-siapa", "apa-apa", "semuanya", "segalanya", "seluruhnya", "keduanya", "ketiganya", "ketiga-tiganya", "kedua-duanya", "dua-duanya", "tiga-tiganya", "masing-masing", "apapun", "siapapun", "manapun", "sedemikian", "demikian"], Fq = ["apa", "manakah", "mana", "apanya", "inikah", "itukah", "manalagi"], Bq = ["siapa", "siapakah", "kamukah", "andakah", "sayakah", "akukah", "diakah", "merekakah", "engkaukah", "kamikah", "kitakah", "beliaukah", "iakah", "dirinyakah", "dirikukah", "siapatah", "siapalah", "siapanya"], Wq = ["bagaimana", "mengapa", "kenapa", "kapan", "berapa", "kapankah", "berapakah", "bagaimanakah", "apakah", "kapanpun", "apatah", "apalah", "berapatah", "berapalah", "mengapakah", "mengapatah", "mengapalah", "kenapakah", "kenapatah", "kenapalah", "kapantah", "kapanlah", "manatah", "mananya", "manalah", "bagaimanatah", "bagaimanalah", "bilamana", "bilamanakah", "bilamanatah", "bilamananya", "bilamanalah", "keberapa", "mampukah", "beginikah", "begitukah"], Uq = ["selalu", "sekali", "berkali-kali"], Hq = ["dapat", "dapatkah", "bisa", "bisakah", "boleh", "bolehkah", "akan", "akankah", "bukan", "dapatlah", "bisatah", "bisanya", "bisalah", "bolehtah", "bolehnya", "bolehlah", "akantah", "akannya", "akanlah", "harus", "haruskah", "harustah", "harusnya", "haruslah", "bukankah", "bukantah", "bukannya", "bukanlah", "mungkin", "mungkinkah", "mungkintah", "mungkinlah", "belum", "belumkah", "belumlah", "sudah", "sudahkah", "sudahlah", "takkan", "masih", "masihkah", "pernah", "pernahkah"], Gq = ["adalah", "ialah", "merupakan", "ada", "berada"], Vq = ["antara", "seantero", "bagai", "bagaikan", "bagi", "buat", "dari", "demi", "dengan", "di", "terhadap", "menjelang", "ke", "kecuali", "sekeliling", "mengenai", "sekitar", "melalui", "selama", "lepas", "lewat", "oleh", "selewat", "pada", "sepanjang", "per", "seputar", "bersama", "sejak", "semenjak", "seperti", "serta", "tentang", "menuju", "menurut", "untuk", "tanpa", "adapun", "antar", "diantara", "silam", "lalu", "selaku", "melalui", "sebagai", "bahwasanya"], Kq = ["atas", "bawah", "dalam", "luar", "depan", "belakang", "sebelah", "samping"], Yq = ["dan", "atau", "lalu", "kemudian", "serta", "sedangkan", "sementara", "sambil", "seraya", "ataupun", "ataukah"], Qq = ["maupun", "bukan", "begitu", "baru", "hanya"], Xq = ["setelah", "sehabis", "sejak", "sampai", "ketika", "waktu", "tatkala", "saat", "kalau", "jika", "jikalau", "bila", "bilamana", "apabila", "asal", "asalkan", "seandainya", "andaikata", "sekiranya", "karena", "sebab", "lantaran", "gara-gara", "mentang-mentang", "kalau-kalau", "supaya", "agar", "guna", "sehingga", "hingga", "sampai", "sebelum", "sesudah", "meski", "meskipun", "kendati", "kendatipun", "walau", "walaupun", "sekalipun", "biarpun", "sungguhpun", "padahal", "seakan-akan", "seolah-olah", "daripada", "alih-alih", "melainkan", "apalagi", "bahwa", "saja"], Zq = ["kata", "bilang", "berkata", "mengeklaim", "bertanya", "menayakan", "menyatakan", "tanya", "klaim", "jelas", "jelaskan", "menjelaskan", "dijelaskan", "ditanya", "pikir", "berpikir", "berbicara", "membicarakan", "mengumumkan", "diumumkan", "dibicarakan", "mendiskusikan", "menyarankan", "disarankan", "mengerti"], v7a = ["yakni", "yaitu", "artinya", "awalnya", "akhirnya", "makanya", "malahan", "malah", "memang", "nantinya", "nanti", "pula", "seketika", "sekarang", "benar-benar", "kadang", "justru", "tetapi", "tapi"], Jq = ["sangat", "amat", "terlalu", "terlampau", "sungguh", "serba", "agak", "begitu", "demikian", "makin", "semakin", "kian", "tambah", "bertambah", "begini", "amatlah"], eF = ["ada", "punya", "milik", "terlihat", "kelihatan", "mari", "marilah", "membuat", "dibuat", "menunjukkan", "ditunjukkan", "pergi", "ambil", "diambil", "meletkakkan", "letakkan", "ambilkan", "mencoba", "dicoba", "bermakna", "berarti", "terdiri", "memastikan", "dipastikan", "mengandung", "termasuk", "maknanya", "artinya", "ingin", "inginkan"], aF = ["terbesar", "besar", "terkecil", "kecil", "terbaru", "baru", "tertua", "tua", "lalu", "semudah", "termudah", "mudah", "cepat", "jauh", "susah", "keras", "panjang", "rendah", "pendek", "tinggi", "biasa", "simpel", "kebanyakan", "baru-baru", "lagi", "selesai", "mungkin", "umum", "baik", "buruk", "bagus", "utama", "sama", "tertentu", "biasanya", "spesifik", "langsung", "dekat", "terbaru", "berbeda", "beda", "sibuk", "terkini", "penting", "terpenting", "sebesar", "sekecil", "setua", "termuda", "semuda", "muda", "tercepat", "secepat", "termudah", "semudah", "terjauh", "sejauh", "tersusah", "sesusah", "terkeras", "sekeras", "sepanjang", "terpanjang", "terpendek", "sependek", "terbiasa", "tersimpel", "sesimpel", "terbaik", "sebaik", "terburuk", "seburuk", "sebagus", "terbagus", "terutama", "terdekat", "sedekat", "tersibuk", "sepenting", "lambat", "terlambat", "luas", "terluas", "seluas", "keren", "tersedia", "cepat-cepat", "erat-erat", "betul-betul", "diam-diam", "keras-keras", "jauh-jauh", "secepat-cepatnya", "baik-baik", "sebaik-baiknya", "sekeras-kerasnya", "lekas-lekas", "selekas-lekasnya", "tinggi-tinggi", "setinggi-tingginya", "seberat-beratnya", "sejauh-jauhnya", "sedikit-dikitnya", "sekurang-kurangnya", "setidak-tidaknya", "sedapat-dapatnya", "seenak-enaknya", "seenaknya", "seadanya", "sekenanya", "selambat-lambatnya", "selebih-lebihnya", "sedikitnya", "sepenuhnya", "besar-besaran", "kecil-kecilan", "habis-habisan", "mati-matian", "terang-terangan", "terus-terusan", "untung-untungan", "kesekian", "berdua-dua", "bertiga-tiga", "berdua", "bertiga", "berempat", "berlima", "berenam", "bertujuh", "berdelapan", "bersembilan", "bersepuluh", "bersebelas", "berseratus", "berseribu", "berduaan", "agaknya", "sepenting-pentingnya", "sepanjang-panjangnya", "spesifik", "spesial", "semuda-mudanya", "setua-tuanya", "seburuk-buruknya", "seluas-luasnya", "terlebih", "selamanya", "selama-lamanya", "mampu", "begini", "beginilah", "begitu", "begitulah", "sebegini", "sebegitu", "semula", "pasti", "pastilah", "pastinya", "dini", "sedini", "sering", "seringnya", "jarang", "terbanyak"], k7a = ["putus-putusnya", "jemu-jemunya", "jera-jeranya", "puas-puasnya", "bosan-bosannya", "henti-hentinya", "berhenti-hentinya"], tF = ["bah", "cis", "ih", "idih", "sialan", "buset", "aduh", "waduh", "duh", "aduhai", "amboi", "asyik", "wah", "syukur", "alhamdulillah", "untung", "aduh", "aih", "aih", "lo", "duilah", "eh", "oh", "ah", "astaga", "astagfirullah", "masyaallah", "masa", "alamak", "gila", "ayo", "yuk", "mari", "hai", "he", "hai", "halo"], nF = ["sdm", "sdt", "gr", "kg", "cm", "mg", "ml", "l", "dl", "cl", "ons", "lbr", "cc", "bh", "ltr", "pon"], rF = ["detik", "menit", "jam", "detik-detik", "menit-menit", "jam-jam", "hari", "hari-hari", "minggu", "minggu-minggu", "bulan", "bulan-bulan", "tahun", "tahun-tahun", "besok", "kemarin", "lusa", "malam-malam", "siang-siang", "subuh", "bedug", "keesokan"], sF = ["cara", "barang", "masalah", "bagian", "bagian-bagian", "aspek", "aspek-aspek", "ide", "item", "tema", "hal", "perkara", "faktor", "faktor-faktor", "detil", "perbedaan", "adanya", "beginian", "rupanya", "diri"], iF = ["tidak", "iya", "tak", "tentu", "ok", "oke", "amin", "dll", "maaf", "tolong", "mohon", "jangan", "sebagainya", "hanya", "cuma", "jangankan", "janganlah", "tolonglah"], _7a = ["tuan", "nyonya", "nona", "bang", "pak", "bu", "bang", "kak", "prof", "gus", "ning", "kyai", "ustad", "ustadzah", "nyai", "raden", "tengku"], E7a = fn.filteredAtEnding = (0, Ap.default)(z7a), A7a = fn.filteredAtBeginning = (0, Ap.default)([].concat(Cq, b7a)), T7a = fn.filteredAtBeginningAndEnding = (0, Ap.default)([].concat(Oq, Yq, Dq, Jq, Nq, w7a)), $7a = fn.filteredAnywhere = (0, Ap.default)([].concat(Uq, Pq, Mq, tF, Iq, Hq, Gq, Zq, eF, qq, Qq, Xq, Fq, Bq, Wq, k7a, iF, Kq, nF, rF, sF, aF, Rq, Vq, Lq, Sq.singleWords)), j7a = fn.all = (0, Ap.default)([].concat(Oq, Iq, Cq, Dq, Nq, Mq, Pq, Lq, qq, Fq, Bq, Wq, Kq, Uq, Hq, Gq, Vq, Yq, Qq, Xq, Zq, v7a, Jq, eF, tF, aF, nF, sF, iF, _7a, Rq, Sq.singleWords, rF));
fn.default = {
  filteredAtEnding: E7a,
  filteredAtBeginning: A7a,
  filteredAtBeginningAndEnding: T7a,
  filteredAnywhere: $7a,
  all: j7a
};
var hz = {};
Object.defineProperty(hz, "__esModule", {
  value: !0
});
hz.default = void 0;
hz.default = [["baik", "maupun"], ["bukan", "melainkan"], ["bukan", "tetapi"], ["bukannya", "melainkan"], ["bukannya", "tetapi"], ["tidak", "melainkan"], ["tidak", "tetapi"], ["tidak hanya", "tetapi juga"], ["begitu", "sehingga"], ["begitu", "sampai"], ["demikian", "sehingga"], ["demikian", "sampai"], ["sedemikian", "sehingga"], ["sedemikian", "sampai"], ["meskipun", "namun"], ["biarpun", "namun"], ["bukan hanya", "melainkan juga"], ["sedemikian rupa", "sehingga"], ["sebaiknya", "daripada"], ["entah", "entah"], ["kalau", "maka"], ["apabila", "maka"], ["apa", "atau"], ["jangankan", "pun"], ["saja", "apalagi"], ["apakah", "atau"]];
var OT = {}, IT = {}, Tp = {};
Object.defineProperty(Tp, "__esModule", {
  value: !0
});
Tp.calculateTotalNumberOfSyllables = P7a;
Tp.checkBeginningsList = D7a;
Tp.removeEnding = R7a;
var x7a = ee;
const {
  buildFormRule: S7a,
  createRulesFromArrays: O7a
} = x7a.languageProcessing, I7a = ["a", "e", "i", "o", "u"];
function C7a(e) {
  return I7a.includes(e);
}
function P7a(e) {
  let a = 0;
  for (let t = 0; t < e.length; t++)
    C7a(e[t]) && a++;
  return a;
}
function R7a(e, a, t, n) {
  if (t.includes(e))
    return e;
  const r = n.stemming.doNotStemWords.doNotStemK;
  if (e.endsWith("kan")) {
    const u = e.substring(0, e.length - 2);
    r.includes(u) && (e = u);
  }
  const o = O7a(a);
  return S7a(e, o) || e;
}
function D7a(e, a, t) {
  const n = e.slice(a);
  return t.some((r) => n.startsWith(r));
}
Object.defineProperty(IT, "__esModule", {
  value: !0
});
IT.default = H7a;
var N7a = ee, Pa = Tp;
const {
  flattenSortLength: iR,
  buildFormRule: oF,
  createRulesFromArrays: lF
} = N7a.languageProcessing, L7a = function(e, a) {
  for (const t of a)
    if (e.match(t))
      return !0;
}, M7a = function(e, a) {
  return e.startsWith("di") && (0, Pa.checkBeginningsList)(e, 2, a.stemming.singleSyllableWords) ? e.substring(2, e.length) : /^[mp]enge/i.test(e) && (0, Pa.checkBeginningsList)(e, 5, a.stemming.singleSyllableWords) ? e.substring(5, e.length) : e;
}, q7a = function(e, a) {
  const t = a.stemming.singleSyllableWords, n = a.stemming.singleSyllableWordsSuffixes, r = e;
  if (e = M7a(e, a), t.some((o) => e.startsWith(o)) && (0, Pa.calculateTotalNumberOfSyllables)(e) <= 3 && L7a(e, n)) {
    e = (0, Pa.removeEnding)(e, a.stemming.regexRules.removeParticle, a.stemming.doNotStemWords.doNotStemParticle, a), e = (0, Pa.removeEnding)(e, a.stemming.regexRules.removePronoun, a.stemming.doNotStemWords.doNotStemPronounSuffix, a);
    const o = (0, Pa.removeEnding)(e, a.stemming.regexRules.removeSuffixes, a.stemming.doNotStemWords.doNotStemSuffix, a);
    t.includes(o) && (e = o);
  }
  return ((0, Pa.calculateTotalNumberOfSyllables)(e) > 1 || e.length === 1) && (e = r), e;
}, F7a = function(e, a) {
  const t = e.stemming.doNotStemWords.doNotStemPrefix.doNotStemFirstOrderPrefix.doNotStemTer;
  if (a.startsWith("keter") && (a = a.substring(2, a.length)), a.startsWith("ter"))
    return t.some((n) => a.startsWith(n)) ? a : (0, Pa.checkBeginningsList)(a, 3, e.stemming.beginningModification.rBeginning) ? a.replace(/^ter/i, "r") : a.substring(3, a.length);
}, B7a = function(e, a) {
  const t = a.stemming.beginningModification;
  if (/^[mp]en/i.test(e) && (0, Pa.checkBeginningsList)(e, 3, t.nBeginning))
    return e.replace(/^[mp]en/i, "n");
  if (/^[mp]eng/i.test(e) && (0, Pa.checkBeginningsList)(e, 4, t.kBeginning))
    return e.replace(/^[mp]eng/i, "k");
  if (/^[mp]em/i.test(e)) {
    if ((0, Pa.checkBeginningsList)(e, 3, t.pBeginning))
      return e.replace(/^(mem|pem)/i, "p");
    if ((0, Pa.checkBeginningsList)(e, 3, t.mBeginning))
      return e.replace(/^(mem|pem)/i, "m");
  }
  const n = F7a(a, e);
  if (n)
    return n;
}, W7a = function(e, a) {
  const t = B7a(e, a);
  if (t)
    return t;
  const n = lF(a.stemming.regexRules.removeFirstOrderPrefixes);
  return oF(e, n) || e;
}, oR = function(e, a) {
  if ((e.startsWith("ber") || e.startsWith("per")) && (0, Pa.checkBeginningsList)(e, 3, a.stemming.beginningModification.rBeginning))
    return e.replace(/^(ber|per)/i, "r");
  if (/^peng/i.test(e) && (0, Pa.checkBeginningsList)(e, 4, a.stemming.beginningModification.kBeginning))
    return e.replace(/^peng/i, "k");
  const t = lF(a.stemming.regexRules.removeSecondOrderPrefixes);
  return oF(e, t) || e;
}, lR = function(e, a) {
  let t = e.length;
  const n = a.stemming.regexRules.removeSuffixes, r = a.stemming.doNotStemWords.doNotStemSuffix, o = iR(a.stemming.doNotStemWords.doNotStemPrefix.doNotStemFirstOrderPrefix), l = iR(a.stemming.doNotStemWords.doNotStemPrefix.doNotStemSecondOrderPrefix);
  return o.some((u) => e.startsWith(u)) || (e = W7a(e, a)), t === e.length ? (l.some((u) => e.startsWith(u)) || (e = oR(e, a)), (0, Pa.calculateTotalNumberOfSyllables)(e) > 2 && (e = (0, Pa.removeEnding)(e, n, r, a))) : (t = e.length, (0, Pa.calculateTotalNumberOfSyllables)(e) > 2 && (e = (0, Pa.removeEnding)(e, n, r, a)), t !== e.length && !l.includes(e) && (0, Pa.calculateTotalNumberOfSyllables)(e) > 2 && (e = oR(e, a))), e;
}, d0 = function(e, a) {
  e = q7a(e, a);
  const n = a.stemming.doNotStemWords.doNotStemParticle, r = a.stemming.doNotStemWords.doNotStemPronounSuffix;
  if ((0, Pa.calculateTotalNumberOfSyllables)(e) <= 2)
    return e;
  const o = lR(e, a);
  return n.includes(o) || r.includes(o) ? o : (e = (0, Pa.removeEnding)(e, a.stemming.regexRules.removeParticle, n, a), (0, Pa.calculateTotalNumberOfSyllables)(e) > 2 && (e = (0, Pa.removeEnding)(e, a.stemming.regexRules.removePronoun, r, a)), (0, Pa.calculateTotalNumberOfSyllables)(e) > 2 && (e = lR(e, a)), e);
}, U7a = function(e, a) {
  if (e.indexOf("-") === -1)
    return null;
  const n = e.split("-");
  if (n.length === 2) {
    let r = n[0], o = n[1];
    r = d0(r, a), o = d0(o, a);
    const l = r.substring(1), u = o.startsWith("ng") || o.startsWith("ny") ? o.substring(2) : o.substring(1);
    if (l === u) {
      const c = a.stemming.nonPluralReduplications;
      return c.includes(r) && c.includes(o) ? r + "-" + r : r;
    }
  }
  return null;
};
function H7a(e, a) {
  if (a.stemming.shouldNotBeStemmed.includes(e))
    return e;
  const t = U7a(e, a);
  return t || (e = d0(e, a), e);
}
Object.defineProperty(OT, "__esModule", {
  value: !0
});
OT.default = X7a;
var G7a = K, V7a = ee, K7a = Y7a(IT);
function Y7a(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: Q7a
} = V7a.languageProcessing;
function X7a(e) {
  const a = (0, G7a.get)(e.getData("morphology"), "id", !1);
  return a ? (t) => (0, K7a.default)(t, a) : Q7a;
}
var CT = {}, yz = {};
Object.defineProperty(yz, "__esModule", {
  value: !0
});
yz.default = void 0;
yz.default = ["diskontinuitas", "diskualifikasi", "diskriminatif", "diskriminator", "digitalisasi", "disinformasi", "disintegrasi", "diskriminasi", "disorientasi", "distabilitas", "diktatorial", "disinfektan", "disinsentif", "diskrepansi", "distributor", "diagnostik", "dialketika", "diktatoris", "dinosaurus", "diplomatik", "diplomatis", "direktorat", "dirgantara", "disimilasi", "diskontinu", "diskulpasi", "disparitas", "dispensasi", "distilator", "distingtif", "distribusi", "diversitas", "diafragma", "diagnosis", "diakritik", "diakronis", "dialektal", "dialektik", "dialektis", "digenesis", "digitalis", "dilematik", "diminutif", "dinamisme", "dingklang", "diplomasi", "dirgahayu", "disertasi", "disfungsi", "diskredit", "diskursif", "disleksia", "dislokasi", "dismutasi", "disonansi", "disosiasi", "dispenser", "disposisi", "distilasi", "distingsi", "divestasi", "diabeter", "diagonal", "dialisis", "diameter", "diaspora", "difraksi", "digestif", "diglosia", "dikotomi", "diktator", "dilatasi", "dimorfik", "dinamika", "dioksida", "diopsida", "diplomat", "direktur", "disentri", "disensus", "disiplin", "diskotek", "diskresi", "dispersi", "disrupsi", "distansi", "distorsi", "diagram", "difabel", "digdaya", "digital", "digresi", "diletan", "dimensi", "dinamik", "dinamis", "dinamit", "dinasti", "dioksin", "diorama", "diploma", "diptera", "direksi", "dirigen", "disagio", "disiden", "disjoki", "diskoid", "diskusi", "disuasi", "dividen", "diadem", "diakon", "dialek", "dialog", "diaper", "diayah", "diesel", "dilasi", "dinamo", "diniah", "diorit", "diare", "diode", "didih", "didik", "didis", "digit", "dikau", "dikir", "diksi", "dikte", "dinas", "dipan", "dirah", "direk", "disko", "dinda", "difusi", "dilema", "dingin", "diniah", "diorit", "dirham", "disket", "diskon", "divisi", "diftong", "difteri", "dinding", "dingkis", "dingkit", "dioksin", "diorama", "diploma", "dirigen", "disiden", "displin", "disjoki", "diskusi", "distrik", "dividen", "digestif", "diglosia", "dikotomi", "dingklik", "dioksida", "diplomat", "direktur", "disentri", "diskresi", "disorder", "dispersi", "distansi", "disrupsi", "divergen", "dingklang", "diplomasi", "dirgahayu", "disertasi", "disfungsi", "disilabik", "diskredit", "disleksia", "dislokasi", "disosiasi", "dispenser", "disposisi", "distilasi", "dinosaurus", "diplomatik", "diplomatis", "dirgantara", "disimilasi", "diskontinu", "disparitas", "distilator", "distribusi", "divergensi", "diversitas", "disabilitas", "disinfektan", "diskrepansi", "disintegrasi", "diskriminasi", "diskriminatif", "diskontinuitas", "diskualifikasi"];
Object.defineProperty(CT, "__esModule", {
  value: !0
});
CT.default = nHa;
var Z7a = ee, J7a = eHa(yz);
function eHa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: aHa
} = Z7a.languageProcessing, tHa = "di";
function nHa(e) {
  const a = aHa(e.toLowerCase());
  let t = a.filter((n) => n.length > 4);
  if (t = t.filter((n) => n.startsWith(tHa)), t.length === 0)
    return !1;
  for (const n of J7a.default)
    t = t.filter((r) => !r.startsWith(n));
  return t = t.filter(function(n) {
    let r = !0;
    const o = a.indexOf(n);
    return a[o - 1] === "untuk" && (r = !1), r;
  }), t.length !== 0;
}
var zz = {};
Object.defineProperty(zz, "__esModule", {
  value: !0
});
zz.default = void 0;
var rHa = sHa(Lc);
function sHa(e) {
  return e && e.__esModule ? e : { default: e };
}
const iHa = /([\s\t\u00A0\u2013\u2014[\]])/;
function oHa(e) {
  if (!e)
    return [];
  const a = e.split(iHa).filter((t) => t !== "");
  return (0, rHa.default)(a);
}
zz.default = oHa;
Object.defineProperty(ST, "__esModule", {
  value: !0
});
var dF = ST.default = void 0, lHa = ee, dHa = eu(fz), uHa = fn, cHa = eu(xr), pHa = eu(hz), gHa = eu(OT), mHa = eu(CT), fHa = eu(zz);
function eu(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: hHa
} = lHa.languageProcessing;
let yHa = class extends hHa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "id",
      passiveConstructionType: "morphological",
      firstWordExceptions: dHa.default,
      functionWords: uHa.all,
      transitionWords: cHa.default,
      twoPartTransitionWords: pHa.default,
      areHyphensWordBoundaries: !1
    }), Object.assign(this.helpers, {
      getStemmer: gHa.default,
      isPassiveSentence: mHa.default,
      splitIntoTokensCustom: fHa.default
    });
  }
};
dF = ST.default = yHa;
var PT = {}, bz = {};
Object.defineProperty(bz, "__esModule", {
  value: !0
});
bz.default = void 0;
bz.default = [
  // Definite articles:
  "il",
  "lo",
  "la",
  "i",
  "gli",
  "le",
  // Indefinite articles:
  "uno",
  "un",
  "una",
  // Numbers 1-10 ('uno' is already included above):
  "due",
  "tre",
  "quattro",
  "cinque",
  "sei",
  "sette",
  "otto",
  "nove",
  "dieci",
  // Demonstrative pronouns:
  "questo",
  "questa",
  "quello",
  "quella",
  "questi",
  "queste",
  "quelli",
  "quelle",
  "codesto",
  "codesti",
  "codesta",
  "codeste"
];
var rt = {}, Sr = {};
Object.defineProperty(Sr, "__esModule", {
  value: !0
});
Sr.singleWords = Sr.multipleWords = Sr.default = Sr.allWords = void 0;
const zHa = Sr.singleWords = ["abbastanza", "acciocché", "acciocchè", "adesso", "affinché", "affinchè", "allora", "almeno", "alquanto", "altrettanto", "altrimenti", "analogamente", "anche", "ancora", "antecedentemente", "anzi", "anzitutto", "apertamente", "appena", "assai", "attualmente", "benché", "benchè", "beninteso", "bensì", "brevemente", "bruscamente", "casomai", "celermente", "certamente", "certo", "chiaramente", "ciononostante", "cioé", "cioè", "comparabilmente", "come", "complessivamente", "completamente", "comunque", "concisamente", "concludendo", "conformemente", "congiuntamente", "conseguentemente", "considerando", "considerato", "considerevolmente", "contemporaneamente", "continuamente", "contrariamente", "controbilanciato", "così", "cosicché", "cosicchè", "dapprima", "dato", "davvero", "definitivamente", "dettagliatamente", "differentemente", "diversamente", "dopo", "dopodiché", "dopodichè", "durante", "dunque", "eccetto", "eccome", "effettivamente", "egualmente", "elencando", "enfaticamente", "eppure", "esaurientemente", "esplicitamente", "espressamente", "estesamente", "evidentemente", "finalmente", "finché", "finchè", "fino", "finora", "fintanto", "fintanto che", "fintantoché", "fintantochè", "fondamentalmente", "frattanto", "frequentemente", "generalmente", "già", "gradualmente", "illustrando", "immantinente", "immediatamente", "importantissimo", "incontestabilmente", "incredibilmente", "indipendentemente", "indiscutibilmente", "indubbiamente", "infatti", "infine", "innanzitutto", "innegabilmente", "inoltre", "insomma", "intanto", "interamente", "istantaneamente", "invece", "logicamente", "lentamente", "ma", "malgrado", "marcatamente", "memorabile", "mentre", "motivatamente", "naturalmente", "né", "nè", "neanche", "neppure", "nonché", "nonchè", "nondimeno", "nonostante", "notevolmente", "occasionalmente", "oltretutto", "onde", "onestamente", "ossia", "ostinatamente", "ovvero", "ovviamente", "parimenti", "particolarmente", "peraltro", "perché", "perchè", "perciò", "perlomeno", "però", "pertanto", "pesantemente", "piuttosto", "poi", "poiché", "poichè", "praticamente", "precedentemente", "preferibilmente", "precisamente", "prematuramente", "presto", "prima", "primariamente", "primo", "principalmente", "prontamente", "proporzionalmente", "pure", "purché", "purchè", "quando", "quanto", "quantomeno", "quindi", "raramente", "realmente", "relativamente", "riassumendo", "riformulando", "ripetutamente", "saltuariamente", "schiettamente", "sebbene", "secondariamente", "secondo", "sempre", "sennò", "seguente", "sensibilmente", "seppure", "seriamente", "siccome", "sicuramente", "significativamente", "similmente", "simultaneamente", "singolarmente", "sinteticamente", "solitamente", "solo", "soltanto", "soprattutto", "sopravvalutato", "sorprendentemente", "sostanzialmente", "sottolineando", "sottovalutato", "specialmente", "specificamente", "specificatamente", "subitamente", "subito", "successivamente", "successivo", "talmente", "terzo", "totalmente", "tranne", "tuttavia", "ugualmente", "ulteriormente", "ultimamente", "veramente", "verosimilmente", "visto"], bHa = Sr.multipleWords = ["a breve", "a causa", "a causa di", "a condizione che", "a conseguenza", "a conti fatti", "a differenza di", "a differenza del", "a differenza della", "a differenza dei", "a differenza degli", "a differenza delle", "a dire il vero", "a dire la verità", "a dirla tutta", "a dispetto di", "a lungo", "a lungo termine", "a maggior ragione", "a meno che non", "a parte", "a patto che", "a prescindere", "a prima vista", "a proposito", "a qualunque costo", "a quanto", "a quel proposito", "a quel tempo", "a quell'epoca", "a questo fine", "a questo proposito", "a questo punto", "a questo riguardo", "a questo scopo", "a riguardo", "a seguire", "a seguito", "a sottolineare", "a tal fine", "a tal proposito", "a tempo debito", "a tutti gli effetti", "a tutti i costi", "a una prima occhiata", "ad eccezione di", "ad esempio", "ad essere maliziosi", "ad essere sinceri", "ad ogni buon conto", "ad ogni costo", "ad ogni modo", "ad una prima occhiata", "adesso che", "al che", "al contrario", "al contrario di", "al fine di", "al fine di fare", "al giorno d'oggi", "al momento", "al momento giusto", "al momento opportuno", "al più presto", "al posto di", "al suo posto", "al termine", "all'epoca", "all'infuori di", "all'inizio", "all'opposto", "all'ultimo", "alla fine", "alla fine della fiera", "alla luce", "alla luce di", "alla lunga", "alla moda", "alla stessa maniera", "allo scopo di", "allo stesso modo", "allo stesso tempo", "anch'esso", "anch'io", "anche se", "ancora più", "ancora di più", "assumendo che", "bisogna chiarire che", "bisogna considerare che", "causato da", "ciò nondimeno", "ciò nonostante", "col tempo", "con il tempo", "come a dire", "come abbiamo dimostrato", "come è stato notato", "come è stato detto", "come è stato dimostrato", "come hanno detto", "come ho detto", "come ho dimostrato", "come ho notato", "come potete notare", "come potete vedere", "come puoi notare", "come puoi vedere", "come si è dimostrato", "come si può vedere", "come si può notare", "come sopra indicato", "comunque sia", "con attenzione", "con enfasi", "con il risultato che", "con l'obiettivo di", "con ostinazione", "con questa intenzione", "con questa idea", "con queste idee", "con questo in testa", "con questo scopo", "così che", "così da", "d'altra parte", "d'altro canto", "d'altro lato", "d'altronde", "d'ora in avanti", "d'ora in poi", "da allora", "da quando", "da quanto", "da quel momento", "da quella volta", "da questo momento in poi", "da questo momento", "da qui", "da ultimo", "da un certo punto di vista", "da un lato", "da una parte", "dall'altro lato", "dall'epoca", "dal che", "dato che", "dato per assunto che", "davanti a", "del tutto", "dell'epoca", "detto questo", "di certo", "di colpo", "di conseguenza", "di fatto", "di fronte", "di fronte a", "di lì a poco", "di punto in bianco", "di quando in quando", "di quanto non sia", "di quel tempo", "di qui a", "di rado", "di seguito", "di si", "di sicuro", "di solito", "di tanto in tanto", "di tutt'altra pasta", "di quando in quando", "differente da", "diversamente da", "diverso da", "dopotutto", "dovuto a", "e anche", "e inoltre", "entro breve", "fermo restando che", "faccia a faccia", "fin da", "fin dall'inizio", "fin quando", "finché non", "finchè non", "fin dal primo momento", "fin dall'inizio", "fino a", "fino a questo momento", "fino ad oggi", "fino ai giorni nostri", "fino adesso", "fino a un certo punto", "fino adesso", "fra quanto", "il prima possibile", "in aggiunta", "in altre parole", "in altri termini", "in ambo i casi", "in breve", "in caso di", "in conclusione", "in conformità", "in confronto", "in confronto a", "in conseguenza", "in considerazione", "in considerazione di", "in definitiva", "in dettaglio", "importante rendersi conto", "in effetti", "in entrambi i casi", "in fin dei conti", "in generale", "in genere", "in linea di massima", "in poche parole", "il più possibile", "in maggior parte", "in maniera analoga", "in maniera convincente", "in maniera esauriente", "in maniera esaustiva", "in maniera esplicita", "in maniera evidente", "in maniera incontestabile", "in maniera indiscutibile", "in maniera innegabile", "in maniera significativa", "in maniera simile", "in modo allusivo", "in modo analogo", "in modo che", "in modo convincente", "in modo da", "in modo identico", "in modo notevole", "in modo significativo", "in modo significativo", "in modo simile", "in ogni caso", "in ogni modo", "in ogni momento", "in parte considerevole", "in parti uguali", "in particolare", "in particolare per", "in particolare", "in più", "in pratica", "in precedenza", "in prima battuta", "in prima istanza", "in primo luogo", "in rapporto", "in qualche modo", "in qualsiasi modo", "in qualsiasi momento", "in qualunque modo", "in qualunque momento", "in quarta battuta", "in quarta istanza", "in quarto luogo", "in quel caso", "in quelle circostanze", "in questa occasione", "in questa situazione", "in questo caso", "in questo caso particolare", "in questo istante", "in questo momento", "in rare occasioni", "in realtà", "in seconda battuta", "in seconda istanza", "in secondo luogo", "in seguito", "in sintesi", "in sostanza", "in tempo", "in terza battuta", "in terza istanza", "in terzo luogo", "in totale", "in tutto", "in ugual maniera", "in ugual misura", "in ugual modo", "in ultima analisi", "in ultima istanza", "in un altro caso", "in una parola", "in verità", "insieme a", "insieme con", "invece che", "invece di", "la prima cosa da considerare", "la prima cosa da tenere a mente", "lo stesso", "mentre potrebbe essere vero", "motivo per cui", "motivo per il quale", "ne consegue che", "ne deriva che", "nei dettagli", "nel caso", "nel caso che", "nel caso in cui", "nel complesso", "nel corso del", "nel corso di", "nel frattempo", "nel lungo periodo", "nel mentre", "nell'eventualità che", "nella misura in cui", "nella speranza che", "nella stessa maniera", "nella stessa misura", "nello specifico", "nello stesso modo", "nello stesso momento", "nello stesso stile", "non appena", "non per essere maliziosi", "non più da", "nonostante ciò", "nonostante tutto", "ogni qualvolta", "ogni tanto", "ogni volta", "oltre a", "oltre a ciò", "ora che", "passo dopo passo", "per causa di", "per certo", "per chiarezza", "per chiarire", "per come", "per concludere", "per conto di", "per contro", "per cui", "per davvero", "per di più", "per dirla in altro modo", "per dirla meglio", "per dirla tutta", "per es.", "per esempio", "per essere sinceri", "per far vedere", "per farla breve", "per finire", "per l'avvenire", "per l'ultima volta", "per la maggior parte", "per la stessa ragione", "per la verità", "per lo più", "per mettere in luce", "per metterla in altro modo", "per non dire di", "per non parlare di", "per ora", "per ovvi motivi", "per paura di", "per paura dei", "per paura delle", "per paura degli", "per prima cosa", "per quanto", "per questa ragione", "per questo motivo", "per riassumere", "per sottolineare", "per timore", "per trarre le conclusioni", "per ultima", "per ultime", "per ultimi", "per ultimo", "per via di", "perché si", "perchè si", "perfino se", "piano piano", "più di ogni altra cosa", "più di tutto", "più facilmente", "più importante", "più tardi", "poco a poco", "poco dopo", "prendiamo il caso di", "presto o tardi", "prima che", "prima di", "prima di ogni cosa", "prima di tutto", "prima o dopo", "prima o poi", "questo è probabilmente vero", "questo potrebbe essere vero", "restando inteso che", "riassumendo", "quanto prima", "questa volta", "se confrontato con", "se e solo se", "se no", "seduta stante", "sempreché", "semprechè", "sempre che", "senz'altro", "senza alcun riguardo", "senza dubbio", "senz'ombra di dubbio", "senza ombra di dubbio", "senza riguardo per", "senza tregua", "senza ulteriore ritardo", "sia quel che sia", "solo se", "sotto questa luce", "sperando che", "sta volta", "su tutto", "subito dopo", "sul serio", "tanto per cominciare", "tanto quanto", "tra breve", "tra l'altro", "tra poco", "tra quanto", "tutte le volte", "tutti insieme", "tutto a un tratto", "tutto ad un tratto", "tutto d'un tratto", "tutto considerato", "tutto sommato", "un passo alla volta", "un tempo", "una volta", "una volta ogni tanto", "unito a", "va chiarito che", "va considerato che", "vada come vada", "vale a dire", "visto che"], wHa = Sr.allWords = zHa.concat(bHa);
Sr.default = wHa;
Object.defineProperty(rt, "__esModule", {
  value: !0
});
rt.filteredAtEnding = rt.filteredAtBeginningAndEnding = rt.filteredAtBeginning = rt.filteredAnywhere = rt.default = rt.cannotDirectlyPrecedePassiveParticiple = rt.cannotBeBetweenPassiveAuxiliaryAndParticiple = rt.all = void 0;
var uF = Sr, fl = vHa(Ba);
function vHa(e) {
  return e && e.__esModule ? e : { default: e };
}
const RT = ["il", "i", "la", "le", "lo", "gli", "un", "uno", "una"], DT = ["due", "tre", "quattro", "cinque", "sette", "otto", "nove", "dieci", "undici", "dodici", "tredici", "quattordici", "quindici", "sedici", "diciassette", "diciotto", "diciannove", "venti", "cento", "mille", "mila", "duemila", "tremila", "quattromila", "cinquemila", "seimila", "settemila", "ottomila", "novemila", "diecimila", "milione", "milioni", "miliardo", "miliardi"], NT = ["prima", "primi", "prime", "secondo", "seconda", "secondi", "seconde", "terzo", "terza", "terzi", "terze", "quarto", "quarta", "quarti", "quarte", "quinto", "quinta", "quinti", "quinte", "sesto", "sesta", "sesti", "seste", "settimo", "settima", "settimi", "settime", "ottavo", "ottava", "ottavi", "ottave", "nono", "nona", "noni", "none", "decimo", "decima", "decimi", "decime", "undicesimo", "undicesima", "undicesimi", "undicesime", "dodicesimo", "dodicesima", "dodicesimi", "dodicesime", "tredicesimo", "tredicesima", "tredicesimi", "tredicesime", "quattordicesimo", "quattordicesima", "quattordicesimi", "quattordicesime", "quindicesimo", "quindicesima", "quindicesimi", "quindicesime", "sedicesimo", "sedicesima", "sedicesimi", "sedicesime", "diciassettesimo", "diciassettesima", "diciassettesimi", "diciassettesime", "diciannovesimo", "diciannovesima", "diciannovesimi", "diciannovesime", "ventesimo", "ventesima", "ventesimi", "ventesime"], cF = ["io", "tu", "egli", "esso", "lui", "ella", "essa", "lei", "noi", "voi", "essi", "esse", "loro"], LT = ["mi", "ti", "si", "ci", "vi", "li", "me", "te", "se", "glie", "glielo", "gliela", "glieli", "gliele", "gliene", "ce", "ve"], MT = ["sé"], pF = ["ciò", "codesto", "codesta", "codesti", "codeste", "colei", "colui", "coloro", "costei", "costui", "costoro", "medesimo", "medesima", "medesimi", "medesime", "questo", "questa", "questi", "queste", "quello", "quella", "quelli", "quelle", "quel", "quei", "quegli"], qT = ["mio", "mia", "miei", "mie", "tuo", "tua", "tuoi", "tue", "suo", "sua", "suoi", "sue", "nostro", "nostra", "nostri", "nostre", "vostro", "vostra", "vostri", "vostre"], gF = ["affatto", "alcun", "alcuna", "alcune", "alcuni", "alcuno", "bastantemente", "grandemente", "massimamente", "meno", "minimamente", "molta", "molte", "molti", "moltissimo", "molto", "nessun", "nessuna", "nessuno", "niente", "nulla", "ogni", "più", "po'", "poca", "poche", "pochi", "poco", "pochissime", "pochissimi", "qualche", "qualsiasi", "qualunque", "quintali", "rara", "rarissima", "rarissimo", "raro", "spesso", "spessissimo", "sufficientemente", "taluno", "taluna", "taluni", "talune", "tanta", "tante", "tanti", "tantissime", "tantissimi", "tanto", "tonnellate", "troppa", "troppe", "troppi", "troppo", "tutta", "tutte", "tutti", "tutto"], FT = ["alcunché", "alcunchè", "altro", "altra", "altri", "altre", "certa", "certi", "certe", "checché", "checchè", "chicchessia", "chiunque", "ciascuno", "ciascuna", "ciascun", "diverso", "diversa", "diversi", "diverse", "parecchio", "parecchia", "parecchi", "parecchie", "qualcosa", "qualcuno", "qualcuna", "vario", "varia", "vari", "varie"], BT = ["che", "cosa", "cui", "qual", "quale", "quali"], WT = ["chi", "quanta", "quante", "quanti", "quanto"], UT = ["com'è", "com'era", "com'erano", "donde", "d'onde", "dove", "dov'è", "dov'era", "dov'erano", "dovunque"], mF = ["ne"], fF = ["accanto", "altrove", "attorno", "dappertutto", "giù", "là", "laggiù", "lassù", "lì", "ovunque", "qua", "quaggiù", "quassù", "qui"], hF = ["vengano", "vengo", "vengono", "veniamo", "veniate", "venimmo", "venisse", "venissero", "venissi", "venissimo", "veniste", "venisti", "venite", "veniva", "venivamo", "venivano", "venivate", "venivi", "venivo", "venne", "vennero", "venni", "verrà", "verrai", "verranno", "verrebbe", "verrebbero", "verrei", "verremmo", "verremo", "verreste", "verresti", "verrete", "verrò", "viene", "vieni"], yF = ["venire", "venir"], HT = ["abbi", "abbia", "abbiamo", "abbiano", "abbiate", "abbiente", "avemmo", "avendo", "avente", "avesse", "avessero", "avessi", "avessimo", "aveste", "avesti", "avete", "aveva", "avevamo", "avevano", "avevate", "avevi", "avevo", "avrà", "avrai", "avranno", "avrebbe", "avrebbero", "avrei", "avremmo", "avremo", "avreste", "avresti", "avrete", "avrò", "avuto", "ebbe", "ebbero", "ebbi", "ha", "hai", "hanno", "ho", "l'abbi", "l'abbia", "l'abbiamo", "l'abbiano", "l'abbiate", "l'abbiente", "l'avemmo", "l'avendo", "l'avente", "l'avesse", "l'avessero", "l'avessi", "l'avessimo", "l'aveste", "l'avesti", "l'avete", "l'aveva", "l'avevamo", "l'avevano", "l'avevate", "l'avevi", "l'avevo", "l'avrà", "l'avrai", "l'avranno", "l'avrebbe", "l'avrebbero", "l'avrei", "l'avremmo", "l'avremo", "l'avreste", "l'avresti", "l'avrete", "l'avrò", "l'avuto", "l'ebbe", "l'ebbero", "l'ebbi", "l'ha", "l'hai", "l'hanno", "l'ho", "possa", "possano", "possiamo", "possiate", "posso", "possono", "poté", "potei", "potemmo", "potendo", "potente", "poterono", "potesse", "potessero", "potessi", "potessimo", "poteste", "potesti", "potete", "potette", "potettero", "potetti", "poteva", "potevamo", "potevano", "potevate", "potevi", "potevo", "potrà", "potrai", "potranno", "potrebbe", "potrebbero", "potrei", "potremmo", "potremo", "potreste", "potresti", "potrete", "potrò", "potuto", "può", "puoi", "voglia", "vogliamo", "vogliano", "vogliate", "voglio", "vogliono", "volemmo", "volendo", "volente", "volesse", "volessero", "volessi", "volessimo", "voleste", "volesti", "volete", "voleva", "volevamo", "volevano", "volevate", "volevi", "volevo", "volle", "vollero", "volli", "voluto", "vorrà", "vorrai", "vorranno", "vorrebbe", "vorrebbero", "vorrei", "vorremmo", "vorremo", "vorreste", "vorresti", "vorrete", "vorrò", "vuoi", "vuole", "debba", "debbano", "debbono", "deva", "deve", "devi", "devo", "devono", "dobbiamo", "dobbiate", "dové", "dovei", "dovemmo", "dovendo", "doverono", "dovesse", "dovessero", "dovessi", "dovessimo", "doveste", "dovesti", "dovete", "dovette", "dovettero", "dovetti", "doveva", "dovevamo", "dovevano", "dovevate", "dovevi", "dovevo", "dovrà", "dovrai", "dovranno", "dovrebbe", "dovrebbero", "dovrei", "dovremmo", "dovremo", "dovreste", "dovresti", "dovrete", "dovrò", "dovuto", "sa", "sai", "sanno", "sapemmo", "sapendo", "sapesse", "sapessero", "sapessi", "sapessimo", "sapeste", "sapesti", "sapete", "sapeva", "sapevamo", "sapevano", "sapevate", "sapevi", "sapevo", "sappi", "sappia", "sappiamo", "sappiano", "sappiate", "saprà", "saprai", "sapranno", "saprebbe", "saprebbero", "saprei", "sapremmo", "sapremo", "sapreste", "sapresti", "saprete", "saprò", "saputo", "seppe", "seppero", "seppi", "so", "soglia", "sogliamo", "sogliano", "sogliate", "soglio", "sogliono", "solesse", "solessero", "solessi", "solessimo", "soleste", "solete", "soleva", "solevamo", "solevano", "solevate", "solevi", "solevo", "suoli", "sta", "stai", "stando", "stanno", "stante", "starà", "starai", "staranno", "staremo", "starete", "starò", "stava", "stavamo", "stavano", "stavate", "stavi", "stavo", "stemmo", "stessero", "stessimo", "steste", "stesti", "stette", "stettero", "stetti", "stia", "stiamo", "stiano", "stiate", "sto"], GT = ["avere", "l'avere", "aver", "l'aver", "potere", "poter", "volere", "voler", "dovere", "dover", "sapere", "saper", "solere", "stare", "star"], zF = ["è", "e'", "era", "erano", "eravamo", "eravate", "eri", "ero", "essendo", "essente", "fosse", "fossero", "fossi", "fossimo", "foste", "fosti", "fu", "fui", "fummo", "furono", "sarà", "sarai", "saranno", "sarebbe", "sarebbero", "sarei", "saremmo", "saremo", "sareste", "saresti", "sarete", "sarò", "sei", "sia", "siamo", "siano", "siate", "siete", "sii", "sono", "stata", "state", "stati", "stato"], bF = ["essere", "esser"], VT = ["di", "del", "dello", "della", "dei", "degli", "delle", "a", "ad", "al", "allo", "alla", "ai", "agli", "alle", "da", "dal", "dallo", "dalla", "dai", "dagli", "dalle", "in", "nel", "nello", "nella", "nei", "negli", "nelle", "con", "col", "collo", "colla", "coi", "cogli", "colle", "su", "sul", "sullo", "sulla", "sui", "sugli", "sulle", "per", "pel", "pello", "pella", "pei", "pegli", "tra", "fra", "attraverso", "circa", "contro", "davanti", "dentro", "dietro", "entro", "escluso", "fuori", "insieme", "intorno", "lontano", "lungo", "mediante", "oltre", "presso", "rasente", "riguardo", "senza", "sopra", "sotto", "tramite", "vicino"], wF = ["e", "ed", "o", "oppure"], vF = ["tale", "l'uno", "l'altro", "tali", "dall'altra"], kF = ["anziché", "anzichè", "fuorché", "fuorchè", "giacché", "giacchè", "laddove", "modo", "ove", "qualora", "quantunque", "volta"], KT = ["dice", "dicono", "diceva", "dicevano", "disse", "dissero", "detto", "domanda", "domandano", "domandava", "domandavano", "domandò", "domandarono", "domandato", "afferma", "affermato", "aggiunge", "aggiunto", "ammette", "ammesso", "annuncia", "annunciato", "assicura", "assicurato", "chiede", "chiesto", "commentato", "conclude", "concluso", "continua", "continuato", "denuncia", "denunciato", "dichiara", "dichiarato", "esordisce", "esordito", "inizia", "iniziato", "precisato", "prosegue", "proseguito", "racconta", "raccontato", "recita", "recitato", "replica", "replicato", "risponde", "risposto", "rimarca", "rimarcato", "rivela", "rivelato", "scandisce", "scandito", "segnala", "segnalato", "sottolinea", "sottolineato", "spiega", "spiegato"], _F = ["affermare", "aggiungere", "ammettere", "annunciare", "assicurare", "chiedere", "commentare", "concludere", "continuare", "denunciare", "dichiarare", "esordire", "iniziare", "precisare", "proseguire", "raccontare", "recitare", "replicare", "rispondere", "rimarcare", "rivelare", "scandire", "segnalare", "sottolineare", "spiegare"], kHa = ["eventualmente", "forse", "mai", "probabilmente"], EF = ["addirittura", "assolutamente", "ben", "estremamente", "mica", "nemmeno", "quasi"], YT = ["fa", "fa'", "faccia", "facciamo", "facciano", "facciate", "faccio", "facemmo", "facendo", "facente", "facesse", "facessero", "facessi", "facessimo", "faceste", "facesti", "faceva", "facevamo", "facevano", "facevate", "facevi", "facevo", "fai", "fanno", "farà", "farai", "faranno", "farebbe", "farebbero", "farei", "faremmo", "faremo", "fareste", "faresti", "farete", "farò", "fate", "fatto", "fece", "fecero", "feci", "fo"], QT = ["fare"], AF = ["anteriore", "anteriori", "precedente", "precedenti", "facile", "facili", "facilissimo", "facilissima", "facilissimi", "facilissime", "semplice", "semplici", "semplicissima", "semplicissimo", "semplicissimi", "semplicissime", "semplicemente", "rapido", "rapida", "rapidi", "rapide", "veloce", "veloci", "differente", "difficile", "difficili", "difficilissimo", "difficilissima", "difficilissimi", "difficilissime", "basso", "bassa", "bassi", "basse", "alto", "alta", "alti", "alte", "normale", "normali", "normalmente", "corto", "corta", "corti", "corte", "breve", "brevi", "recente", "recenti", "totale", "totali", "completo", "completa", "completi", "complete", "possibile", "possibili", "ultimo", "ultima", "ultimi", "ultime", "differenti", "simile", "simili", "prossimo", "prossima", "prossimi", "prossime", "giusto", "giusta", "giusti", "giuste", "giustamente", "cosiddetto", "bene", "meglio", "benissimo", "male", "peggio", "malissimo", "comunemente", "constantemente", "direttamente", "esattamente", "facilmente", "generalmente", "leggermente", "personalmente", "recentemente", "sinceramente", "solamente", "avanti", "indietro"], TF = ["nuovo", "nuova", "nuovi", "nuove", "vecchio", "vecchia", "vecchi", "vecchie", "bello", "bella", "belli", "belle", "bei", "begli", "bellissimo", "bellissima", "bellissimi", "bellissime", "buono", "buona", "buoni", "buone", "buonissimo", "buonissima", "buonissimi", "buonissime", "grande", "grandi", "grandissimo", "grandissima", "grandissimi", "grandissime", "lunga", "lunghi", "lunghe", "piccolo", "piccola", "piccoli", "piccole", "piccolissimo", "piccolissima", "piccolissimi", "piccolissime", "proprio", "propria", "propri", "proprie", "solito", "solita", "soliti", "solite", "stesso", "stessa", "stessi", "stesse"], $F = ["accidenti", "acciderba", "ah", "aah", "ahi", "ahia", "ahimé", "bah", "beh", "boh", "ca", "caspita", "chissà", "de'", "diamine", "ecco", "eh", "ehi", "eeh", "ehilà", "ehm", "gna", "ih", "magari", "macché", "macchè", "mah", "mhm", "nca", "neh", "oibò", "oh", "ohe", "ohé", "ohilá", "ohibò", "ohimé", "okay", "ok", "olà", "poh", "pota", "puah", "sorbole", "to'", "toh", "ts", "uff", "uffa", "uh", "uhi"], jF = ["cc", "g", "hg", "hl", "kg", "l", "prs", "pz", "q.b.", "qb", "ta", "tz"], xF = ["minuto", "minuti", "ora", "ore", "giorno", "giorni", "giornata", "giornate", "settimana", "settimane", "mese", "mesi", "anno", "anni", "oggi", "domani", "ieri", "stamattina", "stanotte", "stasera", "tardi"], SF = ["aspetto", "aspetti", "caso", "casi", "cose", "idea", "idee", "istanza", "maniera", "oggetto", "oggetti", "parte", "parti", "persona", "persone", "pezzo", "pezzi", "punto", "punti", "sorta", "sorte", "tema", "temi", "volte"], OF = ["sì", "no", "non", "€", "euro", "euros", "ecc", "eccetera"], _Ha = ["sig.na", "sig.ra", "sig", "sigg", "dr", "dr.ssa", "dott", "dott.ssa", "prof", "prof.ssa", "gent", "gent.mo", "gent.mi", "gent.ma", "gent.me", "egr", "egr.i", "egr.ia", "egr.ie", "preg.mo", "preg.mo", "preg.ma", "preg.me", "ill", "ill.mo", "ill.mi", "ill.ma", "ill.me", "cav", "on", "spett"], EHa = rt.filteredAtBeginning = (0, fl.default)(AF), AHa = rt.filteredAtEnding = (0, fl.default)([].concat(NT, _F, yF, GT, bF, QT, TF)), THa = rt.filteredAtBeginningAndEnding = (0, fl.default)([].concat(RT, VT, wF, pF, EF, gF, qT)), $Ha = rt.filteredAnywhere = (0, fl.default)([].concat(uF.singleWords, cF, LT, MT, $F, DT, hF, HT, zF, KT, YT, FT, vF, kF, BT, WT, UT, fF, OF, mF, jF, xF, SF)), jHa = rt.cannotDirectlyPrecedePassiveParticiple = (0, fl.default)([].concat(RT, VT, LT, qT, FT, DT, NT, YT, QT, KT, BT, WT, MT, UT)), xHa = rt.cannotBeBetweenPassiveAuxiliaryAndParticiple = (0, fl.default)([].concat(HT, GT)), SHa = rt.all = (0, fl.default)([].concat(RT, DT, NT, pF, qT, cF, LT, MT, gF, FT, WT, UT, BT, mF, fF, hF, yF, HT, GT, zF, bF, VT, wF, vF, kF, KT, _F, uF.singleWords, kHa, EF, YT, QT, $F, AF, TF, jF, SF, OF, xF, _Ha));
rt.default = {
  filteredAtBeginning: EHa,
  filteredAtEnding: AHa,
  filteredAtBeginningAndEnding: THa,
  filteredAnywhere: $Ha,
  cannotDirectlyPrecedePassiveParticiple: jHa,
  cannotBeBetweenPassiveAuxiliaryAndParticiple: xHa,
  all: SHa
};
var $p = {};
Object.defineProperty($p, "__esModule", {
  value: !0
});
$p.default = void 0;
$p.default = ["a condizione che", "a meno che non", "a patto che", "a seconda che", "acché", "affinché", "al fine di", "allorché", "allorquando", "anche se", "anziché", "avvegnaché", "basta que", "benché", "beninteso que", "chi", "cui", "dal momento che", "dopo che", "dove", "finché non", "fintantoché", "i quali", "il quale", "in caso", "in modo che", "la quale", "le quali", "malgrado", "mentre", "nel caso in cui", "nel eventualità che", "nonostante che", "ogni volta che", "per il fatto che", "perché", "piuttosto che", "piuttosto di", "poiche", "prima che", "purché", "qualora", "quando", "quantunque", "quello che", "sebbene", "senza che", "siccome", "tranne che", "una volta che"];
var wz = {};
Object.defineProperty(wz, "__esModule", {
  value: !0
});
wz.default = void 0;
wz.default = [["né", "né"], ["non", "ma"], ["non prima", "che"], ["non prima", "di"], ["non solo", "ma anche"], ["o", "o"], ["se", "allora"], ["se", "o"], ["sia", "che"]];
const OHa = "aeiouyàèéìîïòù", IHa = {
  vowels: [
    {
      fragments: [
        "a[íúeo]",
        "e[íúao]",
        "o[íúaeè]",
        "í[aeo]",
        "ú[aeo]",
        "ai[aeou]",
        "àii",
        "aiì",
        "au[eé]",
        "ei[aàeèé]",
        "èia",
        "ia[èiì]",
        "iài",
        "oi[aàeèo]",
        "òia",
        "óio",
        "uí",
        "ui[aàó]",
        "ùio",
        "ouï",
        "coo[cmnpr]",
        "lcool",
        "coòf",
        "[aeuioìùèéàò]y[aeuioíìùèàó]",
        "ìa$",
        "èa$"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "aoi",
        "aoì",
        "ioe",
        "riae",
        "ïa$"
      ],
      countModifier: 1
    }
  ],
  words: {
    full: [
      {
        word: "via",
        syllables: 2
      },
      {
        word: "guaime",
        syllables: 3
      },
      {
        word: "guaina",
        syllables: 3
      },
      {
        word: "coke",
        syllables: 1
      },
      {
        word: "frame",
        syllables: 1
      },
      {
        word: "goal",
        syllables: 1
      },
      {
        word: "live",
        syllables: 1
      },
      {
        word: "mouse",
        syllables: 1
      },
      {
        word: "coon",
        syllables: 1
      }
    ],
    fragments: {
      global: [
        {
          word: "mayoyào",
          syllables: 4
        },
        {
          word: "eye-liner",
          syllables: 3
        },
        {
          word: "scooner",
          syllables: 2
        },
        {
          word: "cocoon",
          syllables: 2
        },
        {
          word: "silhouette",
          syllables: 4
        },
        {
          word: "circuíto",
          syllables: 4
        },
        {
          word: "cruento",
          syllables: 3
        },
        {
          word: "cruènto",
          syllables: 3
        },
        {
          word: "rituale",
          syllables: 4
        },
        {
          word: "duello",
          syllables: 3
        },
        {
          word: "fuorviante",
          syllables: 4
        },
        {
          word: "league",
          syllables: 1
        },
        {
          word: "leader",
          syllables: 2
        },
        {
          word: "appeal",
          syllables: 2
        },
        {
          word: "backstage",
          syllables: 2
        },
        {
          word: "badge",
          syllables: 1
        },
        {
          word: "baseball",
          syllables: 2
        },
        {
          word: "beauty",
          syllables: 2
        },
        {
          word: "bondage",
          syllables: 2,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "break",
          syllables: 1
        },
        {
          word: "brokerage",
          syllables: 3
        },
        {
          word: "business",
          syllables: 2
        },
        {
          word: "cache",
          syllables: 2,
          notFollowedBy: [
            "s",
            "r"
          ]
        },
        {
          word: "cashmere",
          syllables: 2
        },
        {
          word: "challenge",
          syllables: 2,
          notFollowedBy: [
            "s",
            "r"
          ]
        },
        {
          word: "charleston",
          syllables: 2
        },
        {
          word: "cheap",
          syllables: 1
        },
        {
          word: "cottage",
          syllables: 2,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "cruise",
          syllables: 1,
          notFollowedBy: [
            "s",
            "r"
          ]
        },
        {
          word: "device",
          syllables: 2,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "downgrade",
          syllables: 2,
          notFollowedBy: [
            "d"
          ]
        },
        {
          word: "download",
          syllables: 2
        },
        {
          word: "drive",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "endorsement",
          syllables: 3
        },
        {
          word: "drive",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "executive",
          syllables: 4
        },
        {
          word: "firmware",
          syllables: 2
        },
        {
          word: "fobia",
          syllables: 3
        },
        {
          word: "float",
          syllables: 1
        },
        {
          word: "freak",
          syllables: 1
        },
        {
          word: "game",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "guideline",
          syllables: 2
        },
        {
          word: "hardware",
          syllables: 2
        },
        {
          word: "homeless",
          syllables: 2
        },
        {
          word: "hardware",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "hardware",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "hardware",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "hospice",
          syllables: 2,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "impeachment",
          syllables: 3
        },
        {
          word: "jeans",
          syllables: 1
        },
        {
          word: "jukebox",
          syllables: 2
        },
        {
          word: "leasing",
          syllables: 2
        },
        {
          word: "lease",
          syllables: 1,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "lounge",
          syllables: 1,
          notFollowedBy: [
            "r",
            "s"
          ]
        },
        {
          word: "magazine",
          syllables: 3
        },
        {
          word: "notebook",
          syllables: 2
        },
        {
          word: "office",
          syllables: 2,
          notFollowedBy: [
            "r",
            "s"
          ]
        },
        {
          word: "online",
          syllables: 2
        },
        {
          word: "offline",
          syllables: 2
        },
        {
          word: "overcoat",
          syllables: 3
        },
        {
          word: "offside",
          syllables: 2,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "overdrive",
          syllables: 3
        },
        {
          word: "oversize",
          syllables: 3
        },
        {
          word: "pacemaker",
          syllables: 3
        },
        {
          word: "package",
          syllables: 2,
          notFollowedBy: [
            "r",
            "s"
          ]
        },
        {
          word: "pancake",
          syllables: 2
        },
        {
          word: "performance",
          syllables: 3
        },
        {
          word: "premium",
          syllables: 3
        },
        {
          word: "ragtime",
          syllables: 2
        },
        {
          word: "reading",
          syllables: 2
        },
        {
          word: "residence",
          syllables: 3,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "roaming",
          syllables: 2
        },
        {
          word: "rollerblade",
          syllables: 3,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "royalty",
          syllables: 3
        },
        {
          word: "shake",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "shale",
          syllables: 1
        },
        {
          word: "shampooing",
          syllables: 3
        },
        {
          word: "shareware",
          syllables: 2
        },
        {
          word: "shearling",
          syllables: 2
        },
        {
          word: "sidecar",
          syllables: 2
        },
        {
          word: "hardware",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "skate",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "trial",
          syllables: 2
        },
        {
          word: "toast",
          syllables: 1
        },
        {
          word: "texture",
          syllables: 2
        },
        {
          word: "testimonial",
          syllables: 5
        },
        {
          word: "teaser",
          syllables: 2
        },
        {
          word: "sweater",
          syllables: 2
        },
        {
          word: "suspense",
          syllables: 2,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "subroutine",
          syllables: 3
        },
        {
          word: "steadicam",
          syllables: 3
        },
        {
          word: "spread",
          syllables: 1
        },
        {
          word: "speaker",
          syllables: 2
        },
        {
          word: "board",
          syllables: 1
        },
        {
          word: "sneaker",
          syllables: 2
        },
        {
          word: "smartphone",
          syllables: 2
        },
        {
          word: "slide",
          syllables: 1,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "skyline",
          syllables: 2
        },
        {
          word: "skinhead",
          syllables: 2
        },
        {
          word: "update",
          syllables: 2,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "upgrade",
          syllables: 2,
          notFollowedBy: [
            "r"
          ]
        },
        {
          word: "upload",
          syllables: 2
        },
        {
          word: "vintage",
          syllables: 2
        },
        {
          word: "wakeboard",
          syllables: 2
        },
        {
          word: "website",
          syllables: 2
        },
        {
          word: "welfare",
          syllables: 2
        },
        {
          word: "yeah",
          syllables: 1
        },
        {
          word: "yearling",
          syllables: 2
        }
      ],
      atEnd: [
        {
          word: "byte",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "bite",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "beat",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "coach",
          syllables: 1
        },
        {
          word: "line",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        }
      ],
      atBeginning: [
        {
          word: "cheese",
          syllables: 1
        },
        {
          word: "head",
          syllables: 1
        },
        {
          word: "streak",
          syllables: 1
        }
      ],
      atBeginningOrEnd: [
        {
          word: "team",
          syllables: 1
        },
        {
          word: "stream",
          syllables: 1
        }
      ]
    }
  }
}, CHa = {
  vowels: OHa,
  deviations: IHa
};
var vz = {};
Object.defineProperty(vz, "__esModule", {
  value: !0
});
vz.default = void 0;
vz.default = {
  recommendedLength: 25
};
var XT = {}, kz = {}, ZT = {}, _z = {};
Object.defineProperty(_z, "__esModule", {
  value: !0
});
_z.default = void 0;
_z.default = ["abalienat", "abbacchiat", "abbacinat", "abbadat", "abbagliat", "abbaiat", "abballat", "abbambinat", "abbancat", "abbandonat", "abbarbagliat", "abbarbat", "abbarcat", "abbaruffat", "abbassat", "abbatacchiat", "abbattut", "abbatuffolat", "abbelit", "abbellat", "abbellit", "abbendat", "abbeverat", "abbiadat", "abbicat", "abbigliat", "abbinat", "abbindolat", "abbioccat", "abbiosciat", "abbisciat", "abbittat", "abboccat", "abboffat", "abbominat", "abbonacciat", "abbonat", "abbonit", "abbordat", "abborracciat", "abborrat", "abborrit", "abbottinat", "abbottonat", "abbozzacchiat", "abbozzat", "abbozzolat", "abbracciat", "abbraciat", "abbrancat", "abbreviat", "abbriccat", "abbrigliat", "abbrivat", "abbriviat", "abbrividit", "abbronzat", "abbrostolat", "abbrostolit", "abbruciacchiat", "abbruciat", "abbrunat", "abbrunit", "abbruscat", "abbrusciat", "abbrustiat", "abbrustolat", "abbrustolit", "abbrutit", "abbruttit", "abbuffat", "abbuiat", "abbuonat", "abburattat", "abbuzzit", "abdicat", "abdott", "abiettat", "abilitat", "abissat", "abitat", "abituat", "abiurat", "abolit", "abominat", "abondat", "aborrit", "abortit", "abras", "abrogat", "abusat", "accaffat", "accagionat", "accagliat", "accalappiat", "accalcat", "accaldat", "accallat", "accalorat", "accalorit", "accambiat", "accampat", "accampionat", "accanalat", "accanat", "accaneggiat", "accanit", "accantonat", "accaparrat", "accapezzat", "accapigliat", "accapottat", "accappiat", "accappiettat", "accapponat", "accappucciat", "accaprettat", "accareggiat", "accarezzat", "accarnat", "accarpionat", "accartocciat", "accasat", "accasciat", "accasellat", "accasermat", "accastellat", "accastellinat", "accatarrat", "accatastat", "accattat", "accattivat", "accavalcat", "accavalciat", "accavallat", "accavezzat", "accecat", "acceffat", "accelerat", "accellerat", "accennat", "accensat", "accentat", "accentrat", "accentuat", "acceppat", "accerchiat", "accercinat", "accertat", "acces", "accessoriat", "accettat", "acchetat", "acchiappat", "acchiocciolat", "acchitat", "acchiudut", "acciabattat", "acciaiat", "acciambellat", "acciarpat", "acciecat", "accigliat", "acciglionat", "accignut", "accincignat", "accint", "acciocchit", "acciottolat", "accipigliat", "accismat", "accis", "acciucchit", "acciuffat", "accivettat", "acclamat", "acclarat", "acclimatat", "acclus", "accoccat", "accoccolat", "accoccovat", "accodat", "accollat", "accoltellat", "accolt", "accomandat", "accomiatat", "accommiatat", "accomodat", "accompagnat", "accomunat", "acconciat", "acconigliat", "accontat", "accontentat", "accoppat", "accoppiat", "accorat", "accorciat", "accorcit", "accordat", "accordellat", "accorpat", "accort", "accosciat", "accostat", "accostumat", "accotonat", "accottimat", "accovacciat", "accovat", "accovonat", "accozzat", "accreditat", "accresciut", "accrespat", "accucciat", "accucciolat", "accudit", "acculat", "acculturat", "accumulat", "accumunat", "accusat", "acetificat", "acetilat", "acetit", "acidat", "acidificat", "acidulat", "acquadernat", "acquarellat", "acquartierat", "acquat", "acquattat", "acquerellat", "acquetat", "acquietat", "acquisit", "acquistat", "acromatizzat", "acuit", "acuminat", "acutizzat", "adacquat", "adagiat", "adattat", "addaziat", "addebbiat", "addebitat", "addecimat", "addensat", "addentat", "addentellat", "addentrat", "addestrat", "addett", "addiacciat", "addimandat", "addimesticat", "addimorat", "addimostrat", "addipanat", "addirizzat", "additat", "additivat", "addizionat", "addobbat", "addocilit", "addogliat", "addolcat", "addolciat", "addolcit", "addolorat", "addomandat", "addomesticat", "addoppiat", "addormentat", "addossat", "addott", "addottorat", "addottrinat", "addrizzat", "adduat", "addugliat", "adeguat", "adempit", "adempiut", "adequat", "aderizzat", "adescat", "adibit", "adirat", "adit", "adiuvat", "adizzat", "adocchiat", "adombrat", "adonat", "adonestat", "adontat", "adoperat", "adoprat", "adorat", "adornat", "adottat", "adsorbit", "aduggiat", "adugnat", "adulat", "adulterat", "adunat", "adunghiat", "adusat", "aerat", "aereat", "aerotrainat", "aerotrasportat", "affabulat", "affaccendat", "affacchinat", "affacciat", "affagottat", "affaldat", "affamat", "affamigliat", "affannat", "affardellat", "affascinat", "affastellat", "affaticat", "affattucchiat", "affatturat", "affermat", "afferrat", "affettat", "affezionat", "affiancat", "affiatat", "affibbiat", "affidat", "affienat", "affievolit", "affigliat", "affigurat", "affilat", "affilettat", "affiliat", "affinat", "affiochit", "affiorat", "affisat", "affissat", "affiss", "affittat", "affittit", "afflitt", "afflosciat", "affocat", "affogat", "affogliat", "affollat", "affoltat", "affondat", "afforcat", "afforestat", "afforzat", "affossat", "affralit", "affrancat", "affrant", "affratellat", "affrenat", "affrenellat", "affrescat", "affrettat", "affrittellat", "affrontat", "affumat", "affumicat", "affumigat", "affuocat", "affusolat", "africanizzat", "ageminat", "agevolat", "aggallat", "agganciat", "aggangherat", "aggarbat", "aggattonat", "aggavignat", "aggelat", "aggettivat", "agghiacciat", "agghiadat", "agghiaiat", "agghindat", "aggiaccat", "aggiogat", "aggiornat", "aggirat", "aggiucchit", "aggiudicat", "aggiuntat", "aggiunt", "aggiustat", "agglomerat", "agglutinat", "aggomitolat", "aggottat", "aggradit", "aggraffat", "aggranchiat", "aggranchit", "aggrandit", "aggrappat", "aggraticciat", "aggravat", "aggredit", "aggregat", "aggrevat", "aggricciat", "aggrinzat", "aggrinzit", "aggrommat", "aggrondat", "aggroppat", "aggrottat", "aggrovigliat", "aggrumat", "aggruppat", "aggruzzolat", "agguagliat", "agguantat", "agguardat", "agguatat", "aggueffat", "agitat", "agognat", "agrarizzat", "aguatat", "agucchiat", "agunat", "agurat", "aguzzat", "aitat", "aiutat", "aizzat", "alat", "alberat", "albergat", "alcalinizzat", "alchilat", "alchimiat", "alchimizzat", "alcolizzat", "alcoolizzat", "alenat", "alesat", "alettat", "alfabetat", "alfabetizzat", "alidit", "alienat", "alimentat", "allacciat", "allagat", "allappat", "allargat", "allascat", "allattat", "alleat", "allegat", "alleggerit", "alleggiat", "allegorizzat", "alleluiat", "allenat", "allenit", "allentat", "allertat", "allessat", "allestit", "allettat", "allevat", "alleviat", "allibat", "allibit", "allibrat", "allicciat", "allietat", "allindat", "allineat", "allis", "allocat", "allogat", "alloggiat", "allontanat", "allottat", "allucchettat", "allucciolat", "allucinat", "allumat", "alluminat", "alluminiat", "allungat", "allupat", "allus", "alluzzat", "alogenat", "alonat", "alpeggiat", "alterat", "alternat", "alzat", "amalgamat", "amareggiat", "amaricat", "amat", "ambientat", "ambiguat", "ambit", "americanizzat", "amicat", "ammaccat", "ammaestrat", "ammainat", "ammalat", "ammaliat", "ammalinconit", "ammaltat", "ammanettat", "ammanicat", "ammanierat", "ammanigliat", "ammannat", "ammannellat", "ammannit", "ammansat", "ammansit", "ammantat", "ammantellat", "ammarat", "ammarezzat", "ammassat", "ammassellat", "ammassicciat", "ammatassat", "ammattonat", "ammazzat", "ammelmat", "ammencit", "ammendat", "ammennicolat", "ammess", "ammetat", "ammezzit", "amministrat", "amminutat", "ammirat", "ammiserit", "ammobiliat", "ammodernat", "ammodernizzat", "ammogliat", "ammoinat", "ammollat", "ammollit", "ammonit", "ammonticchiat", "ammonticellat", "ammorbat", "ammorbidat", "ammorbidit", "ammorsat", "ammortat", "ammortit", "ammortizzat", "ammorzat", "ammosciat", "ammoscit", "ammostat", "ammotinat", "ammucchiat", "ammulinat", "ammusat", "ammutat", "ammutinat", "amnistiat", "amoracciat", "ampiat", "ampliat", "amplificat", "amputat", "anagrammat", "analizzat", "anamorfizzat", "anastomizzat", "anatematizzat", "anatomizzat", "anchilosat", "ancis", "ancorat", "andicappat", "anellat", "anemizzat", "anestetizzat", "angariat", "anglicizzat", "angolat", "angosciat", "angustiat", "animat", "annacquat", "annaffiat", "annasat", "annaspat", "annaspicat", "annebbiat", "annegat", "annerat", "annerit", "anness", "annestat", "annichilat", "annichilit", "annidat", "annientat", "annitrit", "annobilit", "annodat", "annodicchiat", "annoiat", "annotat", "annottat", "annottolat", "annoverat", "annullat", "annunciat", "annunziat", "annusat", "annuvolat", "anodizzat", "anonimizzat", "antecedut", "antepost", "antergat", "anticheggiat", "antichizzat", "anticipat", "anticonosciut", "antidatat", "antivedut", "antivist", "antologizzat", "antropizzat", "antropomorfizzat", "aocchiat", "aombrat", "aonestat", "aontat", "apert", "apocopat", "apologizzat", "apostatat", "apostrofat", "appaciat", "appacificat", "appagat", "appaiat", "appalesat", "appallottolat", "appaltat", "appanettat", "appannat", "apparat", "apparecchiat", "apparentat", "apparigliat", "apparit", "appartat", "appassionat", "appastat", "appastellat", "appellat", "appennellat", "appercepit", "appertizzat", "appesantit", "appesit", "appes", "appestat", "appetit", "appezzat", "appiacevolit", "appianat", "appiastrat", "appiatat", "appiattat", "appiattit", "appiccat", "appiccicat", "appiccolit", "appiedat", "appigionat", "appigliat", "appinzat", "appiombat", "appioppat", "appisolat", "applaudit", "applicat", "appoderat", "appoggiat", "appollaiat", "appoppat", "apportat", "appostat", "appost", "appratit", "appresentat", "appres", "appressat", "apprestat", "apprettat", "apprezzat", "approcciat", "approfittat", "approfondat", "approfondit", "approntat", "appropinquat", "appropriat", "approssimat", "approvat", "approvisionat", "approvvigionat", "appruat", "appulcrat", "appuntat", "appuntellat", "appuntit", "appurat", "appuzzat", "arabescat", "arabizzat", "arat", "arbitrat", "arborat", "arcaizzat", "arcat", "architettat", "archiviat", "arcuat", "ardit", "areat", "argentat", "arginat", "argomentat", "arguit", "arianizzat", "arieggiat", "armat", "armonizzat", "aromatizzat", "arpeggiat", "arpionat", "arponat", "arrabattat", "arraffat", "arraffiat", "arrandellat", "arrangiat", "arrapat", "arrapinat", "arrappat", "arrazzat", "arrecat", "arredat", "arreggimentat", "arrembat", "arrenat", "arresis", "arres", "arrestat", "arretrat", "arricchit", "arricciat", "arricciolat", "arriffat", "arringat", "arrischiat", "arrisicat", "arris", "arrocat", "arroccat", "arrochit", "arrogat", "arrolat", "arroncat", "arronzat", "arrosat", "arrossat", "arrostat", "arrostit", "arrotat", "arrotolat", "arrotondat", "arrovellat", "arroventat", "arroventit", "arrovesciat", "arrubinat", "arruffat", "arruffianat", "arrugginit", "arruncigliat", "arruolat", "arruvidit", "arsicciat", "ars", "artefatt", "articolat", "artigliat", "asces", "asciat", "asciolvut", "asciugat", "ascoltat", "ascos", "ascost", "ascritt", "asfaltat", "asfissiat", "aspers", "aspettat", "aspirat", "asportat", "aspreggiat", "assaettat", "assaggiat", "assalit", "assaltat", "assaporat", "assaporit", "assassinat", "assecondat", "assecurat", "assediat", "asseggiat", "assegnat", "assembiat", "assemblat", "assembrat", "assemprat", "assentat", "asserit", "asserragliat", "asservit", "assestat", "assetat", "assettat", "asseverat", "assibilat", "assicurat", "assiderat", "assiemat", "assiepat", "assillat", "assimigliat", "assimilat", "assiomatizzat", "assis", "assistit", "associat", "assodat", "assoggettat", "assolcat", "assoldat", "assolt", "assolutizzat", "assomat", "assommat", "assonat", "assonnat", "assopit", "assorbit", "assordat", "assordit", "assortit", "assottigliat", "assuefatt", "assunt", "asteggiat", "astenut", "asters", "astratt", "astrett", "atomizzat", "atrofizzat", "atrovat", "attaccat", "attagliat", "attanagliat", "attardat", "attediat", "atteggiat", "attempat", "attendat", "attentat", "attenuat", "attenut", "attergat", "atterrat", "atterrit", "atterzat", "attes", "attestat", "atticizzat", "attillat", "attint", "attirat", "attivat", "attivizzat", "attizzat", "attorcigliat", "attorniat", "attort", "attoscat", "attossicat", "attraccat", "attrappit", "attratt", "attraversat", "attrezzat", "attribuit", "attristat", "attristit", "attruppat", "attualizzat", "attuat", "attuffat", "attutat", "attutit", "auggiat", "augumentat", "augurat", "aulit", "aumentat", "aunghiat", "ausat", "auscultat", "auspicat", "autenticat", "autentificat", "autoaccusat", "autoaffondat", "autoalimentat", "autoassolt", "autocandidat", "autocensurat", "autocitat", "autocommiserat", "autoconsumat", "autoconvint", "autodefinit", "autodenunciat", "autodistrutt", "autofinanziat", "autogestit", "autogovernat", "autografat", "autoincensat", "autointersecat", "autoinvitat", "autolesionat", "autolimitat", "automaticizzat", "automatizzat", "automotivat", "autonominat", "autoproclamat", "autoprodott", "autoprotett", "autopubblicat", "autopubblicizzat", "autoregolamentat", "autoregolat", "autoridott", "autoriparat", "autorizzat", "autosomministrat", "autosostenut", "autosuggestionat", "autotassat", "autotrapiantat", "autotrasportat", "autovalutat", "avallat", "avampat", "avanzat", "avariat", "avint", "aviolanciat", "aviotrasportat", "avocat", "avolterat", "avuls", "avutacel", "avut", "avvallat", "avvalorat", "avvals", "avvantaggiat", "avvelat", "avvelenat", "avventat", "avventurat", "avverat", "avversat", "avvertit", "avvezzat", "avviat", "avvicendat", "avvicinat", "avvignat", "avvilit", "avviluppat", "avvinat", "avvinchiat", "avvinghiat", "avvint", "avvisat", "avvistat", "avvitat", "avviticchiat", "avvitit", "avvivat", "avvolt", "avvoltolat", "aziendalizzat", "azionat", "azotat", "azzannat", "azzardat", "azzeccat", "azzerat", "azzimat", "azzittat", "azzittit", "azzoppat", "azzoppit", "azzuffat", "azzurrat", "bacat", "baccagliat", "bacchettat", "bacchiat", "baciat", "badat", "bagnat", "baipassat", "balbettat", "balcanizzat", "ballat", "baloccat", "balzat", "banalizzat", "bancat", "bandit", "bannat", "baraccat", "barattat", "barbarizzat", "barcamenat", "bardat", "barellat", "barrat", "barricat", "basat", "basciat", "basculat", "bassat", "bastat", "bastionat", "bastit", "bastonat", "battezzat", "battut", "bazzicat", "beatificat", "beat", "beccat", "beccheggiat", "becchettat", "beffat", "beffeggiat", "bendat", "benedett", "beneficat", "benvolut", "berlusconizzat", "bersagliat", "bestemmiat", "bevut", "biadat", "bianchettat", "bianchit", "biascicat", "biasimat", "biasmat", "bidonat", "biennalizzat", "biforcat", "bigiat", "bilanciat", "binat", "bindolat", "biodegradat", "biografat", "bipartit", "bisbigliat", "biscottat", "bisecat", "bisellat", "bisognat", "bissat", "bistrat", "bistrattat", "bitumat", "bituminat", "blandit", "bleffat", "blindat", "bloccat", "bloggat", "bluffat", "bobinat", "boccheggiat", "bocciat", "boicottat", "bollat", "bollit", "bombardat", "bombat", "bonderizzat", "bonificat", "bootat", "borbottat", "bordat", "boriat", "borrat", "borseggiat", "braccat", "bracciat", "bramat", "bramit", "brancicat", "brandeggiat", "brandit", "brasat", "bravat", "brevettat", "breviat", "brillantat", "brillat", "brinat", "broccat", "brocciat", "broccolat", "brontolat", "bronzat", "brucat", "bruciacchiat", "bruciat", "brunit", "bruscat", "bruschinat", "brutalizzat", "bruttat", "bucat", "bucherellat", "bufat", "buffat", "bufferizzat", "buggerat", "bugnat", "bulicat", "bulinat", "bullettat", "bullonat", "burattat", "burlat", "burocratizzat", "burrificat", "buscat", "buttat", "butterat", "bypassat", "cablat", "cabrat", "cacat", "cacciat", "cadenzat", "cadmiat", "caducat", "cagat", "caggiat", "cagionat", "cagliat", "calafatat", "calamitat", "calandrat", "calat", "calcat", "calciat", "calcificat", "calcolat", "caldeggiat", "calettat", "calibrat", "calmat", "calmierat", "calpestat", "calumat", "calunniat", "calzat", "cambiat", "camerat", "campionat", "campit", "camuffat", "canalizzat", "cancellat", "cancerizzat", "candeggiat", "candidat", "candit", "canforat", "cangiat", "cannat", "canneggiat", "cannibalizzat", "cannoneggiat", "canonizzat", "cantat", "canterellat", "canticchiat", "cantilenat", "canzonat", "caolinizzat", "capacitat", "capeggiat", "capillarizzat", "capitalizzat", "capitanat", "capitaneggiat", "capit", "capitozzat", "capivolt", "caponat", "capotat", "capottat", "capovolt", "capponat", "captat", "caramellat", "caramellizzat", "caratat", "caratterizzat", "carbonizzat", "carbossilat", "carburat", "carcat", "carcerat", "cardat", "carenat", "carezzat", "cariat", "caricat", "caricaturat", "caricaturizzat", "carotat", "carpionat", "carpit", "carreggiat", "carrozzat", "cartavetrat", "carteggiat", "cartellinat", "cartografat", "cartolarizzat", "cartonat", "cascolat", "cassat", "cass", "castigat", "castrat", "casualizzat", "catabolizzat", "catalizzat", "catalogat", "catapultat", "catechizzat", "categorizzat", "cateterizzat", "catramat", "cattolicizzat", "catturat", "causat", "cautelat", "cauterizzat", "cauzionat", "cavalcat", "cavatasel", "cavat", "cazzat", "cazziat", "cazzottat", "cedrat", "cedut", "celat", "celebrat", "cellofanat", "cementat", "cementificat", "cennat", "censit", "censurat", "centellat", "centellinat", "centimetrat", "centinat", "centralizzat", "centrat", "centrifugat", "centuplicat", "cerat", "cercat", "cerchiat", "cernut", "certificat", "cesellat", "cessat", "cestinat", "cheratinizzat", "chetat", "chiamat", "chiappat", "chiarificat", "chiarit", "chiaroscurat", "chiavat", "chiazzat", "chiest", "chilificat", "chilometrat", "chimificat", "chinat", "chinizzat", "chiodat", "chiosat", "chius", "choccat", "ciancicat", "cianfrinat", "cianfrugliat", "ciangottat", "ciattat", "cibat", "cicatrizzat", "ciccat", "cicchettat", "ciclizzat", "ciclostilat", "cifrat", "cilindrat", "cimat", "cimentat", "cincischiat", "cinematografat", "cintat", "cint", "cioncat", "ciondolat", "circolat", "circoncint", "circoncis", "circondat", "circondott", "circonfless", "circonfluit", "circonfus", "circonscritt", "circonvenut", "circoscritt", "circostanziat", "circuit", "circumcint", "circumnavigat", "citat", "ciucciat", "ciurmat", "civettat", "civilizzat", "clamat", "classat", "classicizzat", "classificat", "cliccat", "climatizzat", "clivat", "clonat", "cloroformizzat", "clorurat", "clusterizzat", "co-dirett", "coacervat", "coadiuvat", "coagulat", "coalizzat", "coartat", "coccolat", "codificat", "coeditat", "coesistit", "cofinanziat", "cofirmat", "cofondat", "cogestit", "cogitat", "coglionat", "cognosciut", "coibentat", "coincis", "cointeressat", "cointestat", "coinvolt", "cokificat", "colat", "colettat", "collassat", "collaudat", "collazionat", "collegat", "collettivizzat", "collezionat", "collimat", "colliquat", "collis", "collocat", "colluttat", "colmat", "colonizzat", "colorat", "colorit", "colorizzat", "colpevolizzat", "colpit", "coltellat", "coltivat", "colt", "coltrat", "comandat", "combattut", "combinat", "comburut", "comicizzat", "cominciat", "commemorat", "commendat", "commensurat", "commentat", "commercializzat", "commess", "comminat", "commiserat", "commissariat", "commissionat", "commisurat", "commoss", "commutat", "comodat", "compaginat", "comparit", "compartimentalizzat", "compartit", "compassionat", "compatibilizzat", "compatit", "compattat", "compendiat", "compenetrat", "compensat", "comperat", "compiaciut", "compiant", "compilat", "compitat", "compiut", "complessat", "complessificat", "compless", "completat", "complicat", "complimentat", "comportat", "compostat", "compost", "comprat", "compravendut", "compres", "compress", "compromess", "comprovat", "compulsat", "compunt", "computat", "computerizzat", "comunicat", "comunistizzat", "concatenat", "concedut", "concelebrat", "concentrat", "concepit", "concertat", "concess", "concettat", "concettualizzat", "conchius", "conciat", "conciliat", "concimat", "concitat", "conclamat", "conclus", "concordat", "concott", "concretat", "concretizzat", "conculcat", "concupit", "condannat", "condensat", "condit", "condivis", "condizionat", "condolut", "condonat", "condott", "confatt", "confederat", "conferit", "confermat", "confessat", "confettat", "confezionat", "conficcat", "confidat", "configurat", "confinat", "confint", "confiscat", "confitt", "conformat", "confortat", "confricat", "confrontat", "confus", "confutat", "congedat", "congegnat", "congelat", "congestionat", "congetturat", "congiunt", "conglobat", "conglomerat", "conglutinat", "congratulat", "congregat", "conguagliat", "coniat", "coniugat", "connaturat", "conness", "connotat", "connumerat", "conosciut", "conquistat", "consacrat", "consapevolizzat", "consegnat", "conseguit", "consentit", "conservat", "considerat", "consigliat", "consistit", "consociat", "consolat", "consolidat", "consorziat", "conspars", "conspers", "constatat", "constrett", "construit", "consultat", "consumat", "consunt", "contabilizzat", "contagiat", "containerizzat", "contaminat", "contat", "contattat", "conteggiat", "contemperat", "contemplat", "contentat", "contenut", "contes", "contestat", "contestualizzat", "contingentat", "continuat", "contornat", "contort", "contrabbandat", "contraccambiat", "contraddett", "contraddistint", "contradett", "contraffatt", "contrappesat", "contrappost", "contrappuntat", "contrariat", "contrassegnat", "contrastat", "contrat", "contrattaccat", "contrattat", "contratt", "contravvals", "contristat", "controbattut", "controbilanciat", "controdatat", "controfirmat", "controindicat", "controllat", "controminat", "contronotat", "contropropost", "controprovat", "controquerelat", "controsoffittat", "controstampat", "controventat", "conturbat", "contus", "convalidat", "convenut", "convenzionat", "convertit", "convint", "convitat", "convocat", "convogliat", "convolt", "coobat", "cooptat", "coordinat", "coperchiat", "copert", "copiaincollat", "copiat", "copolimerizzat", "coppellat", "coprodott", "corazzat", "corbellat", "corcat", "cordonat", "coreografat", "coricat", "cornificat", "coronat", "corredat", "correlat", "corresponsabilizzat", "corrett", "corricchiat", "corrispost", "corroborat", "corros", "corrott", "corrucciat", "corrugat", "cors", "corteat", "corteggiat", "cortocircuitat", "coruscat", "cosat", "coscritt", "cospars", "cospers", "costatat", "costeggiat", "costellat", "costernat", "costicchiat", "costipat", "costituit", "costituzionalizzat", "costrett", "costruit", "costudit", "cotonat", "cott", "covat", "coventrizzat", "coverchiat", "craccat", "creat", "credut", "cremat", "crepat", "cresciut", "cresimat", "crespat", "criminalizzat", "crioconcentrat", "criptat", "cristallizzat", "cristianizzat", "criticat", "crittat", "crittografat", "crivellat", "crocchiat", "crocefiss", "crocefitt", "crocifiss", "crocifitt", "crogiolat", "cromat", "cronicizzat", "cronometrat", "crostat", "crucciat", "crucifiss", "crucifitt", "cuccat", "cucinat", "cucit", "cullat", "cumulat", "cuntat", "curat", "curvat", "curvat", "custodit", "customizzat", "damascat", "damaschinat", "damat", "dannat", "danneggiat", "danzat", "dardeggiat", "datat", "dat", "dattilografat", "dattiloscritt", "daziat", "deacidificat", "deattivat", "debbiat", "debellat", "debilitat", "decaffeinat", "decaffeinizzat", "decalcat", "decalcificat", "decantat", "decapat", "decapitat", "decappottat", "decarbossilat", "decarburat", "decatizzat", "decelerat", "decentralizzat", "decentrat", "decerebrat", "decernut", "decespugliat", "deciferat", "decifrat", "decimalizzat", "decimat", "decis", "declamat", "declassat", "declassificat", "declinat", "declorat", "decodificat", "decolonizzat", "decolorat", "decompartimentat", "decompilat", "decompost", "decompress", "deconcentrat", "decondizionat", "decongelat", "decongestionat", "decontaminat", "decontestualizzat", "decontratt", "decorat", "decorticat", "decostruit", "decrementat", "decretat", "decriminalizzat", "decriptat", "decrittat", "decuplicat", "decurtat", "dedicat", "dedott", "defacciat", "defalcat", "defascistizzat", "defecat", "defenestrat", "deferit", "defilat", "definit", "defiscalizzat", "defitt", "deflazionat", "deflemmat", "deflorat", "defogliat", "defoliat", "deforestat", "deformat", "defosforat", "defosforilat", "deframmentat", "defraudat", "degassat", "degassificat", "deglutit", "degnat", "degradat", "degustat", "deidratat", "deidrogenat", "deificat", "deindicizzat", "deindustrializzat", "deionizzat", "delegat", "delegificat", "delegittimat", "delibat", "deliberat", "delimitat", "delineat", "delirat", "deliziat", "delocalizzat", "delucidat", "delus", "demagnetizzat", "demandat", "demanializzat", "demarcat", "demeritat", "demers", "demetallizzat", "demilitarizzat", "demineralizzat", "demistificat", "demitizzat", "democratizzat", "demodulat", "demolit", "demoltiplicat", "demonetat", "demonetizzat", "demonizzat", "demoralizzat", "demors", "demotivat", "denaturalizzat", "denaturat", "denazificat", "denazionalizzat", "denicotinizzat", "denigrat", "denitrificat", "denocciolat", "denominat", "denotat", "dentellat", "denuclearizzat", "denudat", "denunciat", "denunziat", "deodorat", "deossidat", "deossigenat", "deostruit", "depauperat", "depenalizzat", "depennat", "depilat", "depint", "depistat", "deplorat", "depolarizzat", "depolimerizzat", "depoliticizzat", "depolverizzat", "deportat", "depositat", "depost", "depotenziat", "depravat", "deprecat", "depredat", "depress", "depressurizzat", "deprezzat", "deprivat", "deprotonat", "depuls", "depurat", "dequalificat", "deratizzat", "derattizzat", "dereferenziat", "deregolamentat", "deregolat", "derequisit", "deresponsabilizzat", "deris", "derubat", "derubricat", "desacralizzat", "desalat", "desalinizzat", "descolarizzat", "descritt", "desecretat", "desegretat", "deselezionat", "desensibilizzat", "desessualizzat", "desiat", "desiderat", "designat", "desinat", "desirat", "desolat", "desolforat", "desonorizzat", "desorbit", "desossidat", "desquamat", "destabilizzat", "destagionalizzat", "destalinizzat", "destatalizzat", "destatizzat", "destat", "destinat", "destituit", "destoricizzat", "destreggiat", "destrutt", "destrutturat", "desunt", "detassat", "detenut", "deteriorat", "determinat", "deters", "detestat", "detonat", "detort", "detossificat", "detratt", "detronizzat", "dettagliat", "dettat", "dett", "deturpat", "deumidificat", "devastat", "deventat", "deviat", "deviscerat", "devitalizzat", "devitaminizzat", "devolut", "dezippat", "diaframmat", "diagnosticat", "diagonalizzat", "diagrammat", "dializzat", "dialogat", "dialogizzat", "diazotat", "dibattut", "diboscat", "dichiarat", "diesat", "diesizzat", "difes", "diffamat", "differit", "diffidat", "diffrant", "diffratt", "diffus", "digerit", "digitalizzat", "digitat", "digiunt", "digrassat", "digrignat", "digrossat", "dilacerat", "dilaniat", "dilapidat", "dilatat", "dilavat", "dilazionat", "dileggiat", "dileguat", "dilettat", "dilett", "diliscat", "dilucidat", "diluit", "dilungat", "dimagrat", "dimandat", "dimenat", "dimensionat", "dimenticat", "dimerizzat", "dimess", "dimezzat", "diminuit", "dimissionat", "dimostrat", "dimunt", "dinamizzat", "dinoccat", "dipanat", "dipelat", "dipint", "diplomat", "dipost", "diradat", "diramat", "dirett", "direzionat", "dirimut", "diroccat", "dirottat", "dirott", "dirozzat", "disabilitat", "disabituat", "disaccentat", "disaccoppiat", "disaccordat", "disacerbat", "disacidat", "disacidificat", "disacidit", "disaerat", "disaffezionat", "disaggregat", "disalberat", "disallineat", "disamat", "disambiguat", "disaminat", "disamorat", "disancorat", "disanimat", "disappannat", "disapplicat", "disappres", "disapprovat", "disarcionat", "disarmat", "disarticolat", "disascost", "disassemblat", "disassuefatt", "disatomizzat", "disattes", "disattivat", "disattrezzat", "disavvezzat", "disboscat", "disbrigat", "discacciat", "discalzat", "discantat", "discaricat", "discernut", "disces", "disceverat", "dischiest", "dischius", "discint", "disciolt", "disciplinat", "discolorat", "discolpat", "discommess", "discompagnat", "discompost", "disconclus", "disconfitt", "discongiunt", "disconness", "disconosciut", "discopert", "discordat", "discosces", "discostat", "discreditat", "discresciut", "discriminat", "discritt", "discucit", "discuoiat", "discuss", "disdegnat", "disdettat", "disdett", "diseccat", "diseccitat", "diseducat", "disegnat", "diserbat", "diseredat", "disertat", "disert", "disfatt", "disgelat", "disgiunt", "disgraziat", "disgregat", "disgustat", "disidentificat", "disiderat", "disidratat", "disillus", "disimballat", "disimparat", "disimpegnat", "disimpress", "disincagliat", "disincantat", "disincentivat", "disincrostat", "disindustrializzat", "disinfestat", "disinfettat", "disinflazionat", "disinformat", "disingannat", "disingranat", "disinibit", "disinnamorat", "disinnescat", "disinnestat", "disinquinat", "disinserit", "disinstallat", "disintasat", "disintegrat", "disinteressat", "disintes", "disintossicat", "disinvestit", "disinvolt", "disistimat", "dislocat", "dismess", "disobbedit", "disobbligat", "disonorat", "disordinat", "disorganizzat", "disorientat", "disormeggiat", "disossat", "disossidat", "disostruit", "disotterrat", "disparit", "dispensat", "dispent", "disperdut", "dispers", "dispes", "dispiegat", "dispint", "dispogliat", "dispost", "dispregiat", "disprezzat", "dispromess", "disproporzionat", "disputat", "disqualificat", "disrott", "dissacrat", "dissalat", "dissaldat", "dissanguat", "dissecat", "disseccat", "disselciat", "dissellat", "disseminat", "dissepolt", "disseppellit", "dissequestrat", "disserrat", "dissestat", "dissetat", "dissezionat", "dissigillat", "dissimulat", "dissipat", "dissociat", "dissodat", "dissolt", "dissomigliat", "dissotterrat", "dissuas", "dissuggellat", "distaccat", "distanziat", "distes", "distillat", "distint", "distolt", "distort", "distratt", "distrett", "distribuit", "districat", "distrigat", "distrutt", "disturbat", "disubbidit", "disumanat", "disumanizzat", "disunit", "disusat", "disvedut", "disvelat", "disvestit", "disviat", "disvist", "disvolt", "disvolut", "dittongat", "divallat", "divaricat", "divelt", "diversificat", "divertit", "divezzat", "divinat", "divincolat", "divinizzat", "divis", "divolt", "divorat", "divorziat", "divulgat", "documentat", "dogat", "dogmatizzat", "dolcificat", "dollarizzat", "dolorat", "dolut", "domandat", "domat", "domesticat", "domiciliat", "dominat", "donat", "dondolat", "dopat", "doppiat", "dorat", "dosat", "dotat", "dovut", "dragat", "drammatizzat", "drappeggiat", "drenat", "dribblat", "drizzat", "drogat", "dugliat", "duplicat", "duramificat", "ebraizzat", "eccedut", "eccepit", "eccettuat", "eccitat", "echeggiat", "eclissat", "economizzat", "edificat", "editat", "edott", "educat", "edulcorat", "effettuat", "efficientat", "effigiat", "effint", "effluit", "effus", "egemonizzat", "eguagliat", "eiettat", "elaborat", "elargit", "elasticizzat", "elementarizzat", "elemosinat", "elencat", "elett", "elettrificat", "elettrizzat", "elettrocoagulat", "elettrolizzat", "elevat", "eliminat", "elis", "elitrasportat", "ellenizzat", "elogiat", "elucidat", "elucubrat", "eluit", "elus", "emanat", "emancipat", "emarginat", "embricat", "emendat", "emess", "emozionat", "empit", "empiut", "emulat", "emulsionat", "emunt", "encomiat", "endocitat", "energizzat", "enfatizzat", "enfiat", "entusiasmat", "enucleat", "enumerat", "enunciat", "epicureggiat", "epurat", "equalizzat", "equilibrat", "equipaggiat", "equiparat", "eradicat", "eras", "ereditat", "erett", "erogat", "eroicizzat", "eros", "erotizzat", "erpicat", "ers", "erudit", "eruttat", "esacerbat", "esagerat", "esagitat", "esalat", "esaltat", "esaminat", "esasperat", "esaudit", "esaurit", "esautorat", "esborsat", "esclamat", "esclus", "escogitat", "escomiat", "escoriat", "escoss", "escuss", "esecrat", "esecutat", "eseguit", "esemplificat", "esentat", "esercitat", "esfoliat", "esibit", "esilarat", "esiliat", "esimut", "esitat", "esonerat", "esorbitat", "esorcizzat", "esortat", "espans", "espars", "esperimentat", "esperit", "espettorat", "espiantat", "espiat", "espirat", "espletat", "esplicat", "esplicitat", "esplorat", "esplos", "esportat", "espost", "espress", "espropriat", "espugnat", "espuls", "espunt", "espurgat", "essiccat", "essut", "estasiat", "estenuat", "esterificat", "esteriorizzat", "esterminat", "esternalizzat", "esternat", "estes", "estimat", "estint", "estirpat", "estivat", "estort", "estradat", "estraniat", "estrapolat", "estratt", "estremizzat", "estrinsecat", "estromess", "estrus", "estubat", "esulcerat", "esultat", "esumat", "eterificat", "eterizzat", "eternat", "eternizzat", "etichettat", "etossilat", "euforizzat", "europeizzat", "evacuat", "evangelizzat", "evas", "evet", "evidenziat", "evint", "evirat", "eviscerat", "evitat", "evocat", "evolt", "evolut", "evuls", "fabbricat", "faccettat", "facilitat", "fagocitat", "falciat", "falcidiat", "fallit", "falsat", "falsificat", "familiarizzat", "fanatizzat", "fantasticat", "farcit", "farfugliat", "fasciat", "fascicolat", "fascistizzat", "fattacel", "fatt", "fattorizzat", "fatturat", "favellat", "favoreggiat", "favorit", "faxat", "fecondat", "fedecommess", "federalizzat", "federat", "felicitat", "felpat", "feltrat", "femminilizzat", "fendut", "ferit", "fermat", "fermentat", "ferrat", "fertilizzat", "fess", "fessurat", "festeggiat", "festonat", "feudalizzat", "fiaccat", "fiammeggiat", "fiancheggiat", "ficcat", "fidanzat", "fidat", "fidecommess", "fidelizzat", "figliat", "figurat", "filat", "filettat", "filmat", "filosofat", "filtrat", "finalizzat", "finanziat", "finital", "finit", "finlandizzat", "fintat", "fint", "fiocinat", "fiondat", "fiorettat", "firmat", "fiscalizzat", "fischiat", "fischiettat", "fissat", "fissionat", "fitt", "fiutat", "flagellat", "flaggat", "flambat", "flangiat", "flemmatizzat", "fless", "flippat", "flottat", "fluidificat", "fluidizzat", "fluorizzat", "fluorurat", "focalizzat", "focheggiat", "foderat", "foggiat", "fognat", "folgorat", "follat", "fomentat", "fonat", "fondat", "foracchiat", "foraggiat", "forat", "forestat", "forfettizzat", "forgiat", "formalizzat", "format", "formattat", "formilat", "formulat", "fornit", "fortificat", "forviat", "forwardat", "forzat", "fosfatat", "fosforat", "fosforilat", "fossilizzat", "fotocompost", "fotocopiat", "fotografat", "fottut", "fracassat", "fraintes", "framess", "frammentat", "frammess", "frammezzat", "frammischiat", "franceseggiat", "francesizzat", "frangiat", "frant", "frantumat", "frappat", "frappost", "fraseggiat", "frastagliat", "frastornat", "fratturat", "frazionat", "freddat", "fregat", "fregiat", "frenat", "frequentat", "fresat", "frettat", "friendzonat", "fritt", "frizionat", "frodat", "frollat", "fronteggiat", "frugat", "fruit", "frullat", "frusciat", "frustat", "frustrat", "fruttat", "fucilat", "fucinat", "fugat", "fuggit", "fulminat", "fumat", "fumigat", "funestat", "funt", "funzionat", "fuoriuscit", "fuorviat", "fus", "fustellat", "fustigat", "gabbat", "gabellat", "gallat", "gallicizzat", "gallonat", "galvanizzat", "gambizzat", "garantit", "garnettat", "garrotat", "garzat", "gasat", "gassat", "gassificat", "gazat", "gelatinizzat", "gelat", "gelificat", "gemellat", "gemicat", "geminat", "generalizzat", "generat", "gentrificat", "genufless", "geometrizzat", "georeferenziat", "gerarchizzat", "germanizzat", "gestit", "gettat", "gettonat", "ghermit", "ghettizzat", "ghigliottinat", "ghindat", "gibollat", "gingillat", "ginnat", "giocat", "gioit", "gionglat", "giovaneggiat", "giovat", "girandolat", "girat", "giudicat", "giulebbat", "giuntat", "giunt", "giuracchiat", "giurat", "giustappost", "giustificat", "giustiziat", "glamourizzat", "glassat", "glissat", "globalizzat", "gloriat", "glorificat", "glossat", "godronat", "godut", "goffrat", "gommat", "gonfiat", "googlat", "gottat", "governat", "gradinat", "gradit", "gradualizzat", "graduat", "graffat", "graffiat", "graffit", "graficat", "grafitat", "gramolat", "granagliat", "grandinat", "granellat", "granit", "granulat", "graticciat", "graticolat", "gratificat", "gratinat", "grattat", "grattugiat", "gravat", "graziat", "grecheggiat", "grecizzat", "gremit", "gridat", "griffat", "grigliat", "grippat", "groccat", "grondat", "grugat", "grugnit", "guadagnat", "gualcit", "guardat", "guarit", "guarnit", "guastat", "guatat", "guerreggiat", "gufat", "guidat", "gustat", "hackerat", "handicappat", "ibernat", "ibridat", "idealizzat", "ideat", "identificat", "ideologizzat", "idolatrat", "idoleggiat", "idratat", "idrogenat", "idrolizzat", "iettat", "igienizzat", "ignifugat", "ignorat", "illanguidit", "illeggiadrit", "illividit", "illuminat", "illus", "illustrat", "imbacuccat", "imbaldanzit", "imballat", "imbalsamat", "imbambolat", "imbandierat", "imbandit", "imbarbarit", "imbarcat", "imbarilat", "imbastardit", "imbastit", "imbattut", "imbavagliat", "imbeccat", "imbellettat", "imbellit", "imbestialit", "imbestiat", "imbevut", "imbiaccat", "imbiancat", "imbianchit", "imbibit", "imbiettat", "imbiondit", "imbizzarrit", "imboccat", "imbonit", "imborghesit", "imboscat", "imboschit", "imbottat", "imbottigliat", "imbottit", "imbozzimat", "imbracat", "imbracciat", "imbragat", "imbrancat", "imbrattat", "imbrecciat", "imbrigliat", "imbrillantinat", "imbroccat", "imbrodat", "imbrogliat", "imbronciat", "imbruttit", "imbucat", "imbudellat", "imbullettat", "imbullonat", "imburrat", "imbussolat", "imbustat", "imbutit", "imitat", "immagazzinat", "immaginat", "immalinconit", "immatricolat", "immedesimat", "immers", "immess", "immischiat", "immiserit", "immobilizzat", "immolat", "immortalat", "immunizzat", "immusonit", "impaccat", "impacchettat", "impacciat", "impadronit", "impaginat", "impagliat", "impalat", "impalcat", "impallat", "impallinat", "impalmat", "impaludat", "impanat", "impaniat", "impannat", "impantanat", "impaperat", "impapocchiat", "impappinat", "imparentat", "imparruccat", "impartit", "impastat", "impasticcat", "impasticciat", "impastocchiat", "impastoiat", "impataccat", "impattat", "impaurit", "impavesat", "impeciat", "impedicat", "impedit", "impegnat", "impegolat", "impelagat", "impellicciat", "impennacchiat", "impennat", "impensierit", "impepat", "imperlat", "impermalit", "impermeabilizzat", "imperniat", "impersonat", "impersonificat", "impestat", "impetrat", "impiallacciat", "impiantat", "impiastrat", "impiastricciat", "impiccat", "impicciat", "impicciolit", "impiccolit", "impidocchiat", "impiegat", "impietosit", "impietrit", "impigliat", "impigrit", "impilat", "impillaccherat", "impinguat", "impint", "impinzat", "impiombat", "impipat", "impiumat", "implementat", "implicat", "implorat", "impollinat", "impolpat", "impoltronit", "impolverat", "impomatat", "imporcat", "imporporat", "importat", "importunat", "impossessat", "impossibilitat", "impostat", "impost", "impratichit", "impregnat", "impres", "impressionat", "impress", "imprestat", "impreziosit", "imprigionat", "impromess", "improntat", "improsciuttit", "impugnat", "impuntit", "impunturat", "impupat", "imputat", "impuzzolentit", "inabilitat", "inabissat", "inacerbit", "inacetit", "inacidit", "inacutit", "inaffiat", "inalat", "inalberat", "inalveat", "inalzat", "inamidat", "inanellat", "inarcat", "inargentat", "inaridit", "inasprit", "inastat", "inattivat", "inaugurat", "incacchiat", "incalcinat", "incalorit", "incalzat", "incamerat", "incamiciat", "incamminat", "incanaglit", "incanalat", "incannat", "incannucciat", "incaponit", "incappottat", "incappucciat", "incaprettat", "incapricciat", "incapsulat", "incarcerat", "incardinat", "incaricat", "incarnat", "incarrozzat", "incartat", "incartocciat", "incartonat", "incasellat", "incasinat", "incassat", "incastellat", "incastonat", "incastrat", "incatenat", "incatramat", "incattivit", "incavat", "incavigliat", "incavolat", "incazzat", "incellofanat", "incendiat", "incenerit", "incensat", "incentivat", "incentrat", "inceppat", "incerat", "incernierat", "incerottat", "inces", "incettat", "inchiappettat", "inchiavardat", "inchiest", "inchinat", "inchiodat", "inchiostrat", "incipriat", "incis", "incistat", "incitat", "inciuccat", "incivilit", "inclinat", "inclus", "incoccat", "incocciat", "incoiat", "incollat", "incolonnat", "incolpat", "incominciat", "incomodat", "incontrat", "incoraggiat", "incordat", "incornat", "incorniciat", "incoronat", "incorporat", "incott", "incravattat", "incrementat", "increspat", "incretinit", "incriminat", "incrinat", "incrociat", "incrostat", "incrudelit", "incrudit", "incruscat", "incubat", "inculat", "inculcat", "incuneat", "incuoiat", "incuorat", "incupit", "incuriosit", "incurvat", "incuss", "indagat", "indebitat", "indebolit", "indemaniat", "indennizzat", "indett", "indicat", "indicizzat", "indignat", "indirett", "indirizzat", "indispettit", "indispost", "individualizzat", "individuat", "indolenzit", "indorat", "indossat", "indott", "indottom", "indottrinat", "indovinat", "indugiat", "indult", "indurat", "indurit", "industrializzat", "industriat", "inebetit", "inebriat", "inerit", "inerpicat", "infagottat", "infamat", "infangat", "infarcit", "infarinat", "infastidit", "infatuat", "infeltrit", "inferit", "inferocit", "infert", "infervorat", "infestat", "infettat", "infeudat", "infiacchit", "infialat", "infialettat", "infiammat", "infiascat", "infibulat", "inficiat", "infilat", "infiltrat", "infilzat", "infingardit", "infinocchiat", "infint", "infioccat", "infiocchettat", "infiochit", "infiorat", "infirmat", "infischiat", "infiss", "infittit", "inflazionat", "infless", "inflitt", "influenzat", "infocat", "infoderat", "infognat", "infoibat", "infoltit", "inforcat", "informatizzat", "informat", "informicolat", "informicolit", "infornaciat", "infornat", "infortunat", "infoscat", "infossat", "infradiciat", "inframess", "inframezzat", "inframmess", "inframmezzat", "infrancesat", "infrappost", "infrascat", "infrattat", "infreddat", "infronzolat", "infuocat", "infurbit", "infuriat", "ingabbiat", "ingaggiat", "ingagliardit", "ingannat", "ingarbugliat", "ingavonat", "ingegnat", "ingegnerizzat", "ingelosit", "ingemmat", "ingenerat", "ingentilit", "ingerit", "ingessat", "inghiaiat", "inghiottit", "inghirlandat", "ingiallit", "ingigantit", "inginocchiat", "ingioiellat", "ingiunt", "ingiuriat", "inglesizzat", "inglobat", "ingoffit", "ingoiat", "ingolfat", "ingollat", "ingolosit", "ingombrat", "ingommat", "ingorgat", "ingozzat", "ingranat", "ingrandit", "ingrassat", "ingraticciat", "ingraticolat", "ingravidat", "ingraziat", "ingraziosit", "ingrigit", "ingrommat", "ingrossat", "ingrullit", "inguaiat", "inguainat", "ingualdrappat", "inguantat", "ingurgitat", "inibit", "iniettat", "inimicat", "inizializzat", "iniziat", "inmillat", "innacquat", "innaffiat", "innalzat", "innamorat", "innastat", "innervat", "innervosit", "innescat", "innestat", "innevat", "innocentat", "innocuizzat", "innovat", "inoculat", "inoltrat", "inondat", "inorgoglit", "inorpellat", "inorridit", "inquadrat", "inquietat", "inquisit", "insabbiat", "insacchettat", "insalat", "insaldat", "insalivat", "insanguinat", "insaponat", "insaporit", "inscatolat", "inscenat", "inscritt", "insecchit", "insediat", "insegnat", "inseguit", "insellat", "inselvatichit", "inserit", "insidiat", "insignit", "insilat", "insinuat", "insolentit", "insonnolit", "insonorizzat", "insordit", "insospettit", "insozzat", "inspessit", "inspirat", "installat", "instaurat", "insterilit", "instillat", "instituit", "instradat", "insudiciat", "insufflat", "insultat", "insuperbit", "intabaccat", "intabarrat", "intaccat", "intagliat", "intarsiat", "intasat", "intascat", "intavolat", "integrat", "intelaiat", "intelat", "intellettualizzat", "intenebrat", "intenerit", "intensificat", "intentat", "intepidit", "intercalat", "intercambiat", "intercettat", "intercis", "interclus", "intercollegat", "interconness", "interconvertit", "interdett", "interessat", "interfacciat", "interfogliat", "interfoliat", "interiorizzat", "interlacciat", "interlineat", "intermess", "intermezzat", "internalizzat", "internat", "internazionalizzat", "interpellat", "interpenetrat", "interpolat", "interpost", "interpretat", "interpunt", "interrat", "interrogat", "interrott", "intersecat", "intervallat", "intervistat", "intes", "intessut", "intestardit", "intestat", "intiepidit", "intimat", "intimidit", "intimorit", "intint", "intirizzit", "intitolat", "intonacat", "intonat", "intontit", "intorbidat", "intorbidit", "intorpidit", "intortat", "intossicat", "intralciat", "intramess", "intramezzat", "intrappolat", "intrapres", "intrattenut", "intravedut", "intravist", "intravvedut", "intravvist", "intrecciat", "intricat", "intrigat", "intrinsecat", "intrippat", "intris", "introdott", "introfless", "introiettat", "introitat", "intromess", "intronat", "intronizzat", "intrudut", "intrufolat", "intrugliat", "intruppat", "intrus", "intubat", "intubettat", "intuit", "inumat", "inumidit", "inurbat", "inutilizzat", "invaghit", "invaginat", "invalidat", "invasat", "invas", "invelenit", "inventariat", "inventat", "invenut", "inverdit", "invergat", "inverniciat", "investigat", "investit", "invetriat", "inviat", "invidiat", "invigorit", "inviluppat", "invischiat", "invitat", "invocat", "invogliat", "involat", "involgarit", "involtat", "involt", "inzaccherat", "inzeppat", "inzigat", "inzolfat", "inzuccat", "inzuccherat", "inzuppat", "iodurat", "ionizzat", "ipertrofizzat", "ipnotizzat", "ipostatizzat", "ipotecat", "ipotizzat", "iridat", "irradiat", "irraggiat", "irreggimentat", "irretit", "irrigat", "irrigidit", "irris", "irritat", "irrobustit", "irrogat", "irrorat", "irrugginit", "irruvidit", "ischeletrit", "iscritt", "islamizzat", "isolat", "isomerizzat", "ispanizzat", "ispessit", "ispezionat", "ispirat", "issat", "istallat", "istanziat", "istaurat", "isterilit", "istigat", "istillat", "istituit", "istituzionalizzat", "istoriat", "istradat", "istruit", "istupidit", "italianeggiat", "italianizzat", "iterat", "iudicat", "killerat", "labbreggiat", "labializzat", "laccat", "lacerat", "laconizzat", "lacrimat", "ladroneggiat", "lagnat", "lagrimat", "laicizzat", "lambiccat", "lambit", "lamentat", "laminat", "lanciat", "lapidat", "lappat", "lardat", "lardellat", "largit", "larvat", "lascat", "lasciat", "lastricat", "latinizzat", "laudat", "laureat", "lavat", "lavorat", "leccat", "legalizzat", "legat", "leggicchiat", "leggiucchiat", "legittimat", "legittimizzat", "legnat", "lemmatizzat", "lenit", "lesinat", "lesionat", "les", "lessat", "lett", "levat", "levigat", "liberalizzat", "liberat", "licenziat", "lievitat", "liftat", "lignificat", "limat", "limitat", "linciat", "linearizzat", "lineat", "linkat", "liofilizzat", "liquefatt", "liquidat", "lisat", "lisciat", "lisciviat", "listat", "litografat", "livellat", "lizzat", "lobotomizzat", "localizzat", "locat", "lodat", "logorat", "lordat", "lottat", "lottizzat", "lubrificat", "lucchettat", "lucidat", "lucrat", "lumeggiat", "luppolizzat", "lusingat", "lussat", "lustrat", "macadamizzat", "macchiat", "macchinat", "macellat", "macerat", "macinat", "maciullat", "maggesat", "maggiorat", "magnat", "magnetizzat", "magnificat", "maiolicat", "maledett", "malfatt", "malignat", "malmenat", "malmess", "maltat", "maltrattat", "malvedut", "malversat", "malvist", "malvolut", "mandat", "mandrinat", "manducat", "maneggiat", "manganat", "manganellat", "mangiat", "mangiucchiat", "manifatturat", "manifestat", "manimess", "manipolat", "manlevat", "manomess", "manoscritt", "manovrat", "mansuefatt", "mantecat", "mantenutas", "mantenut", "manualizzat", "manutenut", "mappat", "marcat", "marchiat", "marcit", "marezzat", "marginalizzat", "marginat", "margottat", "marimess", "marinat", "maritat", "marmorizzat", "marnat", "marocchinat", "martellat", "martellinat", "martirizzat", "martoriat", "mascherat", "maschiat", "maschiettat", "mascolinizzat", "massacrat", "massaggiat", "massellat", "massicciat", "massificat", "massimat", "massimizzat", "mastectomizzat", "masterizzat", "masticat", "masturbat", "matematizzat", "materializzat", "matricolat", "mattonat", "maturat", "mazziat", "mazzolat", "meccanizzat", "medagliat", "mediat", "medicalizzat", "medicat", "meditat", "membrat", "memorizzat", "menat", "mendicat", "menomat", "mentovat", "menzionat", "meravigliat", "mercanteggiat", "mercerizzat", "mercificat", "meriat", "meridionalizzat", "meritat", "merlat", "merlettat", "mers", "mesciat", "mesciut", "mescolat", "mescut", "mesmerizzat", "messaggiat", "mess", "messoc", "mestat", "mesticat", "mestruat", "metabolizzat", "metaforeggiat", "metaforizzat", "metallizzat", "metamorfizzat", "metamorfosat", "metanizzat", "metilat", "metodizzat", "microfilmat", "microfonat", "microminiaturizzat", "micronizzat", "mietut", "migliorat", "militarizzat", "millantat", "millimetrat", "mimat", "mimeografat", "mimetizzat", "minacciat", "minat", "minchionat", "mineralizzat", "miniat", "miniaturizzat", "minimizzat", "minuit", "minuzzat", "miracolat", "miscelat", "mischiat", "misconosciut", "missat", "mistificat", "misturat", "misurat", "miticizzat", "mitigat", "mitizzat", "mitragliat", "mitrat", "mixat", "mobiliat", "mobilitat", "mobilizzat", "modanat", "modellat", "modellizzat", "moderat", "modernizzat", "modificat", "modulat", "molat", "molestat", "mollat", "molleggiat", "moltiplicat", "monacat", "mondat", "mondializzat", "monetarizzat", "monetat", "monetizzat", "monitorat", "monitorizzat", "monocromatizzat", "monopolizzat", "monottongat", "montat", "monumentalizzat", "mordenzat", "mordicchiat", "mormorat", "morphat", "morsicat", "morsicchiat", "mors", "mortasat", "mortificat", "moss", "mostrat", "motivat", "motorizzat", "motteggiat", "movimentat", "mozzat", "mugolat", "mulcit", "multat", "multiplexat", "mummificat", "municipalizzat", "munit", "munt", "murat", "musat", "musicat", "mussat", "mutat", "mutilat", "mutizzat", "mutuat", "nappat", "narcotizzat", "narrativizzat", "narrat", "nasalizzat", "nascos", "nascost", "nastrat", "naturaleggiat", "naturalizzat", "nauseat", "naverat", "navicat", "navigat", "nazificat", "nazionalizzat", "nebulizzat", "necessitat", "necrosat", "necrotizzat", "negat", "negativizzat", "neglett", "negoziat", "negreggiat", "neologizzat", "nerbat", "nericat", "nettat", "neutralizzat", "nevat", "nevicat", "nevischiat", "nevrotizzat", "nichelat", "niellat", "ninfeggiat", "ninnat", "ninnolat", "nitratat", "nitrificat", "nobilitat", "noiat", "noleggiat", "nomat", "nominalizzat", "nominat", "normalizzat", "normat", "notat", "notificat", "notiziat", "notricat", "noverat", "nuclearizzat", "nudricat", "nullificat", "numerat", "numerizzat", "nuotat", "nutrit", "obbiettat", "obbliat", "obbligat", "oberat", "obiettat", "obiettivat", "obiettivizzat", "obiurgat", "obliat", "obliterat", "obnubilat", "occasionat", "occhieggiat", "occidentalizzat", "occis", "occlus", "occultat", "occupat", "ocheggiat", "odiat", "odorat", "odorizzat", "offerit", "offert", "offes", "officiat", "offiziat", "offuscat", "ofiziat", "oggettivat", "oggettivizzat", "oggettualizzat", "oliat", "olit", "olografat", "oltraggiat", "oltrapassat", "oltrepassat", "omaggiat", "ombrat", "ombreggiat", "omess", "omogeneizzat", "omogenizzat", "omologat", "ondat", "ondulat", "onestat", "onnubilat", "onorat", "opacat", "opacizzat", "operat", "opinat", "oppiat", "oppignorat", "oppilat", "oppost", "oppress", "oppugnat", "oprat", "opsonizzat", "optat", "opzionat", "orbitat", "orchestrat", "ordinat", "ordit", "orecchiat", "organat", "organicat", "organizzat", "orgasmat", "orientalizzat", "orientat", "originat", "origliat", "orizzontat", "orlat", "orlettat", "ormat", "ormeggiat", "ornat", "orpellat", "orrat", "orripilat", "ortogonalizzat", "osannat", "osat", "osculat", "oscurat", "ospedalizzat", "ospitat", "ossedut", "ossequiat", "osservat", "ossessionat", "ossidat", "ossificat", "ossitonizzat", "ostacolat", "osteggiat", "ostentat", "ostinat", "ostracizzat", "ostruit", "ottemperat", "ottenebrat", "ottenut", "ottimalizzat", "ottimat", "ottimizzat", "ottonat", "ottriat", "ottuplicat", "otturat", "ottus", "ottuss", "ovalizzat", "ovariectomizzat", "ovattat", "overcloccat", "ovrat", "ovviat", "ozieggiat", "ozonizzat", "pacat", "pacciamat", "pacificat", "padroneggiat", "paganizzat", "pagat", "paginat", "palafittat", "palatalizzat", "palat", "palesat", "palettat", "palettizzat", "palificat", "palleggiat", "pallettizzat", "palpat", "palpeggiat", "panat", "panneggiat", "panoramicat", "pappat", "paracadutat", "parafat", "paraffinat", "parafrasat", "paragonat", "paragrafat", "paralizzat", "parallelizzat", "parametrat", "parametrizzat", "parassitat", "parat", "parcat", "parcellizzat", "parcheggiat", "pareggiat", "parificat", "parkerizzat", "parlat", "parlucchiat", "parodiat", "partecipat", "particolareggiat", "particolarizzat", "partizionat", "partorit", "parzializzat", "pasciut", "pascolat", "passat", "passeggiat", "passionat", "passivat", "pasticciat", "pastorizzat", "pasturat", "patinat", "patit", "patrocinat", "patteggiat", "pattugliat", "pattuit", "paventat", "pavesat", "pavimentat", "pavoneggiat", "pazziat", "pedinat", "pedonalizzat", "peggiorat", "pelat", "pellettizzat", "penalizzat", "penetrat", "pennellat", "pensat", "pensionat", "pentit", "pepat", "peptonizzat", "peragrat", "percentualizzat", "percepit", "percolat", "percors", "percoss", "perdonat", "perdott", "perdut", "perequat", "perfatt", "perfezionat", "perforat", "performat", "perit", "periziat", "perlustrat", "permeat", "permess", "perorat", "perpetrat", "perpetuat", "perplimut", "perquisit", "perscrutat", "perseguitat", "perseguit", "pers", "personalizzat", "personificat", "persuas", "perturbat", "pervas", "pervertit", "pesat", "pescat", "pestat", "petrarcheggiat", "pettegolat", "pettinat", "piagat", "piaggiat", "piallat", "pianeggiat", "pianificat", "piantat", "piantatal", "piantat", "piant", "piantonat", "piantumat", "piastrellat", "piatit", "piazzat", "picchettat", "picchiat", "picchierellat", "picchiettat", "picconat", "piegat", "pieghettat", "pietrificat", "pigiat", "pigliat", "pigmentat", "pignorat", "pigolat", "pilotat", "pimentat", "pint", "pinzat", "piombat", "piovigginat", "piovut", "pipat", "pippat", "piratat", "pirogenat", "pisciat", "pitoccat", "pittat", "pitturat", "pizzicat", "pizzicottat", "placat", "placcat", "plagiat", "plasmat", "plasticat", "plastificat", "platinat", "plissettat", "pluralizzat", "poetat", "poeticizzat", "poggiat", "polarizzat", "poligrafat", "polimerizzat", "politicizzat", "polverizzat", "pomiciat", "pompat", "ponderat", "ponzat", "popolarizzat", "popolat", "poppat", "porcellanat", "porfirizzat", "portat", "portes", "port", "porzionat", "posat", "posdatat", "positivizzat", "posizionat", "pospost", "possedut", "postat", "postdatat", "posteggiat", "posticipat", "postillat", "post", "postsincronizzat", "postulat", "potabilizzat", "potat", "potenziat", "potut", "pralinat", "praticat", "preaccennat", "preannunciat", "preannunziat", "preavvertit", "preavvisat", "precaricat", "precedut", "precettat", "precint", "precisat", "preclus", "precompilat", "precompress", "preconfezionat", "preconizzat", "preconosciut", "precors", "precostituit", "predat", "predefinit", "predestinat", "predeterminat", "predett", "predicat", "predigerit", "predilett", "predispost", "preelett", "preesistut", "prefabbricat", "prefat", "prefatt", "prefazionat", "preferit", "prefigurat", "prefinanziat", "prefissat", "prefiss", "preformat", "pregat", "pregiat", "pregiudicat", "pregustat", "preimpregnat", "prelevat", "premeditat", "premescolat", "premess", "premiat", "premonit", "premunit", "premurat", "premut", "prenotat", "preoccupat", "preordinat", "preparat", "prepensionat", "prepigmentat", "prepost", "preprogrammat", "preraffreddat", "prerefrigerat", "preregistrat", "preregolat", "preriscaldat", "pres", "presagit", "presaput", "presasel", "prescelt", "prescritt", "presedut", "presegnalat", "preselezionat", "presentat", "presentit", "preservat", "presidiat", "presiedut", "pres", "pressat", "press", "pressurizzat", "prestabilit", "prestampat", "prestat", "prestigiat", "presunt", "presuppost", "pretermess", "pretes", "pretrattat", "prevaricat", "prevedut", "prevendut", "preventivat", "prevenut", "previst", "prezzat", "prezzolat", "principiat", "privatizzat", "privat", "privilegiat", "problematizzat", "procacciat", "processat", "proclamat", "procrastinat", "procreat", "procurat", "prodigat", "prodott", "profanat", "proferit", "professat", "professionalizzat", "profetat", "profetizzat", "profferit", "profilat", "profondat", "profumat", "profus", "progettat", "prognosticat", "programmat", "proibit", "proiettat", "proletarizzat", "prolungat", "promanat", "promess", "promoss", "promozionat", "promulgat", "pronosticat", "pronunciat", "pronunziat", "propagandat", "propagat", "propagginat", "propalat", "propinat", "propiziat", "proporzionat", "propost", "propugnat", "propuls", "prorogat", "prosciolt", "prosciugat", "proscritt", "proseguit", "prospettat", "prosternat", "prostes", "prostituit", "prostrat", "prosunt", "protes", "protestat", "protett", "protocollat", "protonat", "protratt", "protrus", "provat", "provedut", "provincializzat", "provist", "provocat", "provvedut", "provvist", "psicanalizzat", "psichiatrizzat", "psicoanalizzat", "psicologizzat", "pubblicat", "pubblicizzat", "puddellat", "pugnalat", "pulit", "pungolat", "punit", "puntat", "punteggiat", "puntellat", "punt", "puntualizzat", "punzecchiat", "punzonat", "purgat", "purificat", "putit", "putrefatt", "putrit", "quadrat", "quadrettat", "quadriennalizzat", "quadruplicat", "qualificat", "quantificat", "quantizzat", "querelat", "questuat", "quetat", "quietanzat", "quietat", "quintessenziat", "quintuplicat", "quotat", "quotizzat", "rabberciat", "rabboccat", "rabbonit", "rabbuffat", "rabuffat", "raccapezzat", "raccapricciat", "raccattat", "raccerchiat", "racces", "racchetat", "racchius", "raccolt", "raccolt", "raccomandat", "raccomodat", "raccontat", "raccorciat", "raccorcit", "raccordat", "raccostat", "raccozzat", "racemizzat", "racimolat", "radazzat", "raddensat", "raddobbat", "raddolcit", "raddoppiat", "raddott", "raddrizzat", "radiat", "radicalizzat", "radioassistit", "radioattivat", "radiocomandat", "radiodiffus", "radiografat", "radioguidat", "radiolocalizzat", "radiomarcat", "radiotelegrafat", "radiotrasmess", "radunat", "raffazzonat", "raffermat", "raffigurat", "raffilat", "raffinat", "rafforzat", "raffreddat", "raffrenat", "raffrescat", "raffrontat", "raggelat", "raggentilit", "ragghiat", "raggirat", "raggiunt", "raggiustat", "raggomitolat", "raggranchiat", "raggranchit", "raggranellat", "raggrinzat", "raggrinzit", "raggrumat", "raggruppat", "raggruzzolat", "ragguagliat", "ralingat", "rallegrat", "rallentat", "ramat", "ramazzat", "rammagliat", "rammaricat", "rammemorat", "rammendat", "rammentat", "rammodernat", "rammollit", "rammorbidit", "rampognat", "randellat", "randomizzat", "rannicchiat", "rannuvolat", "ranzat", "rapat", "rapinat", "rapit", "rappacificat", "rappat", "rappattumat", "rappezzat", "rapportat", "rappresantat", "rappresentat", "rappres", "rarefatt", "rasat", "raschiat", "raschiettat", "rasentat", "ras", "raspat", "rassegnat", "rasserenat", "rassettat", "rassicurat", "rassodat", "rassomigliat", "rassottigliat", "rassunt", "rastrellat", "rastremat", "rateat", "rateizzat", "ratificat", "ratinat", "rattizzat", "rattoppat", "rattort", "rattrappit", "rattristat", "rattristit", "raunat", "ravvalorat", "ravvedut", "ravviat", "ravvicinat", "ravviluppat", "ravvisat", "ravvist", "ravvivat", "ravvolt", "ravvoltolat", "razionalizzat", "razionat", "razziat", "razzolat", "realizzat", "reassunt", "recapitat", "recat", "recedut", "recensit", "recepit", "recidivat", "recintat", "recint", "reciprocat", "recis", "recitat", "reclamat", "reclamizzat", "reclinat", "reclus", "reclutat", "recuperat", "redarguit", "redatt", "redazzat", "reddut", "redent", "redistribuit", "redott", "referenziat", "refertat", "refilat", "refless", "reflettut", "refrant", "refrigerat", "regalat", "regimat", "regimentat", "regionalizzat", "registrat", "regolamentat", "regolarizzat", "regolat", "reidratat", "reificat", "reimbarcat", "reimmers", "reimmess", "reimparat", "reimpastat", "reimpiantat", "reimpiegat", "reimportat", "reimpostat", "reincarcerat", "reincaricat", "reincarnat", "reincis", "reincontrat", "reindirizzat", "reindustrializzat", "reinfettat", "reingaggiat", "reinizializzat", "reinnestat", "reinoltrat", "reinscritt", "reinsediat", "reinserit", "reinstallat", "reinstaurat", "reintegrat", "reinterpretat", "reintitolat", "reintrodott", "reinventat", "reinvestit", "reiterat", "relativizzat", "relazionat", "relegat", "remixat", "remunerat", "renderizzat", "reperit", "repertat", "replicat", "repress", "repuls", "reputat", "requisit", "resciss", "resecat", "resettat", "residuat", "resinificat", "res", "resolat", "resolt", "respint", "respirat", "responsabilizzat", "respost", "restaurat", "restituit", "resunt", "resuscitat", "reticolat", "retinat", "retribuit", "retrocedut", "retrocess", "retrodatat", "rettificat", "rett", "reumatizzat", "revisionat", "revocat", "riabbassat", "riabbellit", "riabbonat", "riabbottonat", "riabbracciat", "riabilitat", "riabitat", "riabituat", "riaccadut", "riaccasat", "riacces", "riaccettat", "riacchiappat", "riacciuffat", "riaccolt", "riaccomodat", "riaccompagnat", "riaccordat", "riaccostat", "riaccreditat", "riacquisit", "riacquistat", "riacutizzat", "riadattat", "riaddestrat", "riaddormentat", "riadoperat", "riaffacciat", "riaffermat", "riafferrat", "riaffiorat", "riaffittat", "riaffrontat", "riagganciat", "riaggiornat", "riaggiustat", "riaggravat", "riaggregat", "riagguantat", "rialimentat", "riallacciat", "riallargat", "riallineat", "riallocat", "riallungat", "rialzat", "riamat", "riambientat", "riammalat", "riammess", "riammodernat", "riammogliat", "rianimat", "rianness", "riannodat", "riannunciat", "riapert", "riappacificat", "riappaltat", "riapparecchiat", "riapparit", "riappes", "riappiccicat", "riapplicat", "riappres", "riapprodat", "riappropriat", "riapprovat", "riarmat", "riarrangiat", "riarredat", "riascoltat", "riasfaltat", "riassalit", "riassaporat", "riassegnat", "riassemblat", "riassestat", "riassettat", "riassicurat", "riassociat", "riassopit", "riassorbit", "riassunt", "riattaccat", "riattat", "riattes", "riattint", "riattivat", "riattizzat", "riattraversat", "riaumentat", "riavut", "riavventat", "riavvertit", "riavviat", "riavvicinat", "riavvint", "riavvisat", "riavvistat", "riavvolt", "riazzuffat", "ribaciat", "ribadit", "ribaltat", "ribassat", "ribattezzat", "ribattut", "ribellat", "ribenedett", "ribevut", "ributtat", "ricacciat", "ricalat", "ricalcat", "ricalcificat", "ricalcitrat", "ricalcolat", "ricalibrat", "ricamat", "ricambiat", "ricanalizzat", "ricandidat", "ricantat", "ricapitalizzat", "ricapitolat", "ricaricat", "ricategorizzat", "ricattat", "ricavat", "ricelebrat", "ricercat", "ricetrasmess", "ricettat", "ricevut", "richiamat", "richiest", "richius", "riciclat", "ricint", "ricircolat", "riclassificat", "ricodificat", "ricollegat", "ricollocat", "ricolmat", "ricolonizzat", "ricolorat", "ricolorit", "ricoltivat", "ricombinat", "ricominciat", "ricommess", "ricomparit", "ricompattat", "ricompensat", "ricomperat", "ricompilat", "ricompiut", "ricompost", "ricomprat", "ricompress", "ricomunicat", "riconcedut", "riconcess", "riconciliat", "ricondizionat", "ricondott", "riconfermat", "riconfezionat", "riconfigurat", "riconfortat", "riconfus", "ricongelat", "ricongiunt", "riconness", "riconosciut", "riconquistat", "riconsacrat", "riconsegnat", "riconsiderat", "riconsigliat", "riconsolat", "ricontat", "ricontattat", "ricontrattat", "ricontratt", "ricontrollat", "riconvalidat", "riconvenut", "riconvertit", "riconvint", "riconvocat", "riconvogliat", "ricopert", "ricopiat", "ricordat", "ricoricat", "ricorrett", "ricospars", "ricostituit", "ricostrett", "ricostruit", "ricott", "ricoverat", "ricreat", "ricristallizzat", "ricrocifiss", "ricucit", "ricuperat", "ricusat", "ridat", "ridecorat", "ridefinit", "ridenominat", "ridestat", "rideterminat", "ridett", "ridicolizzat", "ridigitat", "ridimensionat", "ridipint", "ridisces", "ridisciolt", "ridisciplinat", "ridiscuss", "ridisegnat", "ridisfatt", "ridispost", "ridistes", "ridistint", "ridistribuit", "ridivis", "ridomandat", "ridonat", "ridondat", "ridorat", "ridotat", "ridott", "ridovut", "riecheggiat", "riedificat", "rieducat", "rielaborat", "rielett", "riemess", "riempit", "riempiut", "rientrat", "riepilogat", "riequilibrat", "riequipaggiat", "riesaminat", "rieseguit", "riesercitat", "riesplos", "riesportat", "riespost", "riespress", "riespuls", "riestes", "riesumat", "rietichettat", "rievaporat", "rievocat", "rifabbricat", "rifasciat", "rifatt", "rifendut", "riferit", "rifermat", "rifermentat", "rifess", "rificcat", "rifilat", "rifiltrat", "rifinanziat", "rifinit", "rifirmat", "rifischiat", "rifiss", "rifiutat", "rifless", "riflettut", "rifocillat", "rifoderat", "rifondat", "riforestat", "riforgiat", "riformat", "riformattat", "riformulat", "rifornit", "rifrant", "rifritt", "rifrugat", "rifuggit", "rifugiat", "rifus", "rigassificat", "rigat", "rigelat", "rigenerat", "rigettat", "righettat", "rigiocat", "rigirat", "rigiudicat", "rigiunt", "rigodut", "rigonfiat", "rigovernat", "riguadagnat", "riguardat", "rigurgitat", "rilanciat", "rilasciat", "rilassat", "rilavat", "rilavorat", "rilegat", "rilett", "rilevat", "rilocalizzat", "rimagliat", "rimandat", "rimaneggiat", "rimangiat", "rimappat", "rimarcat", "rimarchiat", "rimarginat", "rimaritat", "rimasticat", "rimat", "rimbacuccat", "rimbaldanzit", "rimbarcat", "rimbeccat", "rimbecillit", "rimbellit", "rimbiancat", "rimbiondit", "rimboccat", "rimbombat", "rimborsat", "rimboscat", "rimboschit", "rimbrottat", "rimediat", "rimembrat", "rimemorat", "rimenat", "rimeritat", "rimescolat", "rimess", "rimestat", "rimilitarizzat", "rimirat", "rimischiat", "rimisurat", "rimodellat", "rimodernat", "rimodulat", "rimondat", "rimontat", "rimorchiat", "rimors", "rimoss", "rimostrat", "rimotivat", "rimpacchettat", "rimpadronit", "rimpaginat", "rimpagliat", "rimpannucciat", "rimpastat", "rimpatriat", "rimpiallacciat", "rimpiant", "rimpiattat", "rimpiazzat", "rimpicciolit", "rimpiccolit", "rimpiegat", "rimpinguat", "rimpinzat", "rimpolpat", "rimpossessat", "rimpress", "rimproverat", "rimuginat", "rimunerat", "rimunt", "rimusicat", "rimutat", "rinarrat", "rinascost", "rincalcat", "rincalzat", "rincamminat", "rincantucciat", "rincarat", "rincarcerat", "rincarnat", "rincentrat", "rinchiest", "rinchiodat", "rinchius", "rincitrullit", "rincivilit", "rincoglionit", "rincollat", "rincominciat", "rincontrat", "rincoraggiat", "rincorat", "rincorporat", "rincors", "rincretinit", "rincrudit", "rinculcat", "rincuorat", "rindossat", "rindurit", "rinegoziat", "rinfacciat", "rinfagottat", "rinfiammat", "rinfiancat", "rinfilat", "rinfittit", "rinfocolat", "rinfoderat", "rinforzat", "rinfrancat", "rinfrant", "rinfrescat", "rinfus", "ringagliardit", "ringalluzzit", "ringiovanit", "ringiovenit", "ringoiat", "ringorgat", "ringraziat", "ringuainat", "rinnamorat", "rinnegat", "rinnestat", "rinnovat", "rinnovellat", "rinociut", "rinomat", "rinominat", "rinormalizzat", "rinquadrat", "rinsaccat", "rinsaldat", "rinsanguat", "rinselvatichit", "rinselvat", "rinserrat", "rintanat", "rintasat", "rintascat", "rintavolat", "rintenerit", "rinterrat", "rinterrogat", "rintes", "rintiepidit", "rintoccat", "rintonacat", "rintontit", "rintorpidit", "rintracciat", "rintrodott", "rintronat", "rintuzzat", "rinunciat", "rinunziat", "rinutrit", "rinvangat", "rinvasat", "rinvenut", "rinverdit", "rinvestit", "rinviat", "rinvigorit", "rinvilit", "rinvitat", "rinvoltat", "rinvolt", "rinvoltolat", "rinzaffat", "rinzeppat", "riobbligat", "rioccupat", "rioffert", "rioffes", "rioperat", "riordinat", "riorganizzat", "riorientat", "riosservat", "riottenut", "riottimizzat", "riotturat", "ripagat", "riparametrizzat", "riparat", "ripartit", "ripassat", "ripercors", "ripercoss", "riperdut", "ripers", "ripesat", "ripescat", "ripestat", "ripetut", "ripianat", "ripianificat", "ripiantat", "ripiant", "ripicchiat", "ripiegat", "ripigliat", "ripint", "ripiovut", "ripitturat", "riplasmat", "ripolarizzat", "ripopolat", "riportat", "riport", "riposat", "riposizionat", "ripossedut", "ripost", "ripotut", "ripresentat", "ripres", "riprestat", "ripretes", "riprincipiat", "ripristinat", "riprivatizzat", "riprodott", "riprogettat", "riprogrammat", "ripromess", "ripropost", "riprotett", "riprovat", "riprovvedut", "riprovvist", "ripubblicat", "ripudiat", "ripugnat", "ripulit", "ripuntat", "ripunt", "ripurgat", "riputat", "riquadrat", "riqualificat", "rires", "rirott", "risaldat", "risalit", "risaltat", "risalutat", "risanat", "risaput", "risarcit", "riscalat", "riscaldat", "riscattat", "riscelt", "risces", "rischiarat", "rischiat", "risciacquat", "risciolt", "riscommess", "riscontat", "riscontrat", "risconvolt", "riscopert", "riscoppiat", "riscors", "riscoss", "riscritt", "risecat", "risedut", "risegat", "risegnat", "riselciat", "riselezionat", "riseminat", "risentit", "riseppellit", "riserbat", "riservat", "risicat", "risigillat", "risistemat", "ris", "risoffiat", "risoggiunt", "risolat", "risolidificat", "risollevat", "risolt", "risommat", "risommers", "risonat", "risorpassat", "risospes", "risospint", "risottomess", "risparmiat", "rispars", "rispecchiat", "rispedit", "rispent", "rispers", "rispettat", "rispiegat", "rispint", "rispolverat", "risposat", "rispost", "rissat", "ristabilit", "ristagnat", "ristampat", "ristaurat", "ristes", "ristilizzat", "ristorat", "ristrett", "ristrutt", "ristrutturat", "ristuccat", "ristudiat", "risucchiat", "risultat", "risuolat", "risuonat", "risuscitat", "risvegliat", "risvolt", "ritagliat", "ritarat", "ritardat", "ritemprat", "ritentat", "ritenut", "riters", "rites", "ritint", "ritirat", "ritoccat", "ritolt", "ritort", "ritracciat", "ritradott", "ritrascors", "ritrascritt", "ritrasferit", "ritrasformat", "ritrasmess", "ritraspost", "ritrattat", "ritratt", "ritrovat", "ritualizzat", "rituffat", "riudit", "riunificat", "riunit", "riusat", "riutilizzat", "rivaccinat", "rivaleggiat", "rivalorizzat", "rivals", "rivalutat", "rivangat", "rivedut", "rivelat", "rivendicat", "rivendut", "riverberat", "riverit", "riverniciat", "riversat", "rivestit", "rivettat", "rivint", "rivisitat", "rivissut", "rivist", "rivitalizzat", "rivivificat", "rivoltat", "rivolt", "rivoltolat", "rivolut", "rivoluzionat", "rizappat", "rizzat", "robotizzat", "rodat", "rogat", "rollat", "romanizzat", "romanticizzat", "romanzat", "roncolat", "rosicat", "rosicchiat", "ros", "rosolat", "rotacizzat", "rotat", "roteat", "rotolat", "rottamat", "rott", "rovesciat", "rovinat", "rovistat", "rubacchiat", "rubat", "rullat", "ruminat", "ruotat", "russificat", "ruzzolat", "sabbiat", "sabotat", "saccarificat", "saccheggiat", "sacralizzat", "sacramentat", "sacrificat", "saettat", "saggiat", "sagginat", "sagomat", "salamoiat", "salariat", "salassat", "salat", "saldat", "salificat", "salinizzat", "salit", "salmeggiat", "salmistrat", "salpat", "saltat", "salutat", "salvaguardat", "salvat", "sanat", "sancit", "sanforizzat", "sanificat", "sanitizzat", "santificat", "sanzionat", "saponificat", "saput", "sarchiat", "sarchiellat", "sartiat", "satellizzat", "satinat", "satireggiat", "satisfatt", "satollat", "saturat", "saziat", "sbaccellat", "sbaciucchiat", "sbafat", "sbaffat", "sbalestrat", "sballat", "sballottat", "sballottolat", "sbalordit", "sbalzat", "sbancat", "sbandat", "sbandierat", "sbandit", "sbaraccat", "sbaragliat", "sbarazzat", "sbarbat", "sbarcat", "sbardat", "sbarrat", "sbassat", "sbastit", "sbatacchiat", "sbattezzat", "sbattut", "sbeccat", "sbeffeggiat", "sbellicat", "sbendat", "sbertucciat", "sbiadit", "sbiancat", "sbianchit", "sbiellat", "sbiettat", "sbigottit", "sbilanciat", "sbirbat", "sbirciat", "sbizzarrit", "sbloccat", "sbobinat", "sboccat", "sbocconcellat", "sbollentat", "sbolognat", "sborniat", "sborsat", "sboscat", "sbottonat", "sbozzat", "sbozzimat", "sbozzolat", "sbracat", "sbracciat", "sbraciat", "sbraitat", "sbranat", "sbrancat", "sbrattat", "sbreccat", "sbriciolat", "sbrigat", "sbrigliat", "sbrinat", "sbrindellat", "sbrodolat", "sbrogliat", "sbronzat", "sbruffat", "sbucciat", "sbudellat", "sbuffat", "sbugiardat", "sbullettat", "sbullonat", "sburrat", "scacazzat", "scacchiat", "scacciat", "scaccolat", "scadenzat", "scafat", "scaffalat", "scagionat", "scagliat", "scaglionat", "scalat", "scalcat", "scalcinat", "scaldat", "scalettat", "scalfat", "scalfit", "scalmanat", "scaloppat", "scalpat", "scalpellat", "scalpellinat", "scaltrit", "scalzat", "scambiat", "scamiciat", "scamosciat", "scamozzat", "scampat", "scampatal", "scampat", "scamuffat", "scanalat", "scancellat", "scandagliat", "scandalizzat", "scandit", "scannat", "scannellat", "scannerat", "scannerizat", "scannerizzat", "scansat", "scansionat", "scapecchiat", "scapezzat", "scapicollat", "scapigliat", "scapitozzat", "scapocchiat", "scappat", "scappellat", "scappottat", "scapricciat", "scapsulat", "scarabocchiat", "scaracchiat", "scaraventat", "scarcerat", "scardassat", "scardat", "scardinat", "scaricat", "scarificat", "scarmigliat", "scarnat", "scarnificat", "scarnit", "scarrellat", "scarrocciat", "scarrozzat", "scarruffat", "scartabellat", "scartat", "scartavetrat", "scartinat", "scartocciat", "scassat", "scassinat", "scatenat", "scattat", "scavalcat", "scavallat", "scavat", "scavezzat", "scazzottat", "scekerat", "scelt", "scempiat", "sceneggiat", "scernut", "scervellat", "sces", "sceverat", "schedat", "schedulat", "scheggiat", "scheletrit", "schematizzat", "schermat", "schermit", "schermografat", "schernit", "schiacciat", "schiaffat", "schiaffeggiat", "schiantat", "schiarit", "schiavardat", "schiavizzat", "schiccherat", "schierat", "schifat", "schinciat", "schioccat", "schiodat", "schiumat", "schius", "schivat", "schizzat", "schizzettat", "sciabolat", "sciabordat", "sciacquat", "scialacquat", "sciamanizzat", "sciamannat", "sciancat", "sciancrat", "scimmieggiat", "scimmiottat", "scint", "scioccat", "sciolinat", "sciolt", "sciorinat", "scippat", "sciroppat", "sciss", "sciupacchiat", "sciupat", "sclamat", "sclerosat", "sclerotizzat", "scoccat", "scocciat", "scodat", "scodellat", "scoiat", "scolarizzat", "scolat", "scollacciat", "scollat", "scollegat", "scolorat", "scolorit", "scolpat", "scolpit", "scombaciat", "scombinat", "scombussolat", "scommess", "scomodat", "scompaginat", "scompagnat", "scompartit", "scompattat", "scompensat", "scompiacut", "scompigliat", "scompost", "scomputat", "scomunicat", "sconcertat", "sconciat", "sconclus", "sconfessat", "sconficcat", "sconﬁtt", "sconfortat", "sconfus", "scongelat", "scongiurat", "sconness", "sconosciut", "sconquassat", "sconsacrat", "sconsigliat", "sconsolat", "scontat", "scontentat", "scontornat", "scontort", "scontrat", "sconvolt", "scopat", "scoperchiat", "scopert", "scopiazzat", "scoraggiat", "scoraggit", "scorat", "scorazzat", "scorciat", "scorcit", "scordat", "scoreggiat", "scorificat", "scornat", "scorniciat", "scoronat", "scorporat", "scorrazzat", "scorreggiat", "scorrett", "scors", "scortat", "scortecciat", "scorticat", "scort", "scorzat", "scosces", "scosciat", "scoss", "scostat", "scostolat", "scotennat", "scoticat", "scotolat", "scotomizzat", "scottat", "scott", "scovat", "scovert", "scozzat", "scozzonat", "screditat", "scremat", "screpolat", "screziat", "scribacchiat", "scriminat", "scristianizzat", "scritt", "scritturat", "scroccat", "scrocchiat", "scrollat", "scrostat", "scrutat", "scrutinat", "scucit", "scudisciat", "scuffiat", "sculacciat", "sculettat", "scuoiat", "scuriosat", "scurit", "scusat", "sdaziat", "sdebitat", "sdegnat", "sdemanializzat", "sdentat", "sdilinquit", "sdoganat", "sdolut", "sdoppiat", "sdraiat", "sdrammatizzat", "sdrucit", "secat", "seccat", "secernut", "secolarizzat", "secondat", "secretat", "secret", "sedat", "sedentarizzat", "sedott", "segat", "seghettat", "segmentat", "segnalat", "segnat", "segnoreggiat", "segregat", "segretat", "seguitat", "seguit", "selciat", "selezionat", "sellat", "sembrat", "sementat", "semicint", "seminat", "semplificat", "senilizzat", "sensibilizzat", "sensorizzat", "sentenziat", "sentit", "sentitasel", "sentit", "sentit", "separat", "sepolt", "seppellit", "sequenziat", "sequestrat", "serbat", "serrat", "servit", "servoassistit", "sessualizzat", "sestuplicat", "setacciat", "setificat", "settat", "settorializzat", "settuplicat", "seviziat", "sezionat", "sfaccettat", "sfagliat", "sfaldat", "sfalsat", "sfamat", "sfanalat", "sfangat", "sfarinat", "sfasat", "sfasciat", "sfatat", "sfatt", "sfavillat", "sfavorit", "sfegatat", "sfeltrat", "sfendut", "sferragliat", "sferrat", "sferzat", "sfess", "sfiancat", "sfiatat", "sfiat", "sfibbiat", "sfibrat", "sfidat", "sfiduciat", "sfigurat", "sfilat", "sfilettat", "sfinit", "sfioccat", "sfiorat", "sfittat", "sfocat", "sfociat", "sfoderat", "sfogat", "sfoggiat", "sfogliat", "sfollat", "sfoltit", "sfondat", "sforacchiat", "sforat", "sforbiciat", "sformat", "sfornaciat", "sfornat", "sfornit", "sforzat", "sfottut", "sfracellat", "sfrangiat", "sfrascat", "sfratat", "sfrattat", "sfrecciat", "sfregat", "sfregiat", "sfrenat", "sfrisat", "sfrondat", "sfrucugliat", "sfruculiat", "sfruttat", "sfumat", "sfuocat", "sgamat", "sganasciat", "sganciat", "sgarbugliat", "sgattaiolat", "sgelat", "sghiacciat", "sgocciolat", "sgolat", "sgomberat", "sgombrat", "sgomentat", "sgominat", "sgomitat", "sgomitolat", "sgonfiat", "sgorbiat", "sgottat", "sgovernat", "sgozzat", "sgraffiat", "sgraffignat", "sgranat", "sgranchit", "sgranellat", "sgrassat", "sgravat", "sgretolat", "sgridat", "sgrommat", "sgrondat", "sgroppat", "sgrossat", "sgrovigliat", "sgrugnat", "sguainat", "sgualcit", "sguanciat", "sguarnit", "sguinzagliat", "sgusciat", "shakerat", "shoccat", "shuntat", "sigillat", "siglat", "significat", "signoreggiat", "silenziat", "silicizzat", "sillabat", "sillogizzat", "silurat", "simboleggiat", "simbolizzat", "simmetrizzat", "simpatizzat", "simulat", "sincerat", "sincopat", "sincretizzat", "sincronizzat", "sindacalizzat", "sindacat", "singolarizzat", "sinistrat", "sinizzat", "sinterizzat", "sintetizzat", "sintonizzat", "siringat", "sistematizzat", "sistemat", "situat", "slabbrat", "slacciat", "slamat", "slanciat", "slappolat", "slargat", "slavizzat", "slegat", "slentat", "slinguat", "slogat", "sloggat", "sloggiat", "slombat", "slungat", "smaccat", "smacchiat", "smagliat", "smagnetizzat", "smagrit", "smaliziat", "smallat", "smaltat", "smaltit", "smammat", "smanacciat", "smangiat", "smantellat", "smarcat", "smarginat", "smarrit", "smascellat", "smascherat", "smaterializzat", "smattonat", "smembrat", "smentit", "smerciat", "smerdat", "smerigliat", "smerlat", "smerlettat", "smessal", "smess", "smezzat", "smidollat", "smielat", "smilitarizzat", "sminat", "sminuit", "sminuzzat", "smistat", "smitizzat", "smobiliat", "smobilitat", "smobilizzat", "smoccolat", "smollicat", "smonacat", "smontat", "smorbat", "smorzat", "smoss", "smozzicat", "smunt", "smurat", "smussat", "smutandat", "snaturat", "snazionalizzat", "snebbiat", "snellit", "snervat", "snidat", "sniffat", "snobbat", "snocciolat", "snodat", "snudat", "sobbarcat", "sobbollit", "sobillat", "socchius", "soccors", "soddisfatt", "sodisfatt", "sodomizzat", "sofferit", "soffermat", "soffert", "soffiat", "soffocat", "soffregat", "soffritt", "soffus", "sofisticat", "soggettivat", "soggettivizzat", "sogghignat", "soggiogat", "soggiunt", "sogguardat", "sognat", "solarizzat", "solcat", "soleggiat", "solennizzat", "solfeggiat", "solfitat", "solfonat", "solforat", "solidificat", "solit", "sollazzat", "sollecitat", "solleticat", "sollevat", "solt", "solubilizzat", "solut", "soluzionat", "solvatat", "somatizzat", "someggiat", "somigliat", "sommat", "sommers", "sommess", "somministrat", "sommoss", "sonat", "sondat", "sonorizzat", "sopit", "soppalcat", "soppesat", "soppiantat", "sopportat", "soppost", "soppress", "sopraddotat", "sopraeccitat", "sopraedificat", "sopraelevat", "sopraffat", "sopraffatt", "sopraggiunt", "sopraintes", "soprammess", "soprannominat", "soprapost", "soprappres", "soprascritt", "sopraspes", "soprassaturat", "soprassedut", "sopravanzat", "sopravvalutat", "sopravvedut", "sopravvint", "sopravvist", "sopreccitat", "sopredificat", "soprelevat", "soprintes", "sorbettat", "sorbit", "sorgiunt", "sormontat", "sorpassat", "sorpres", "sorras", "sorrett", "sorseggiat", "sorteggiat", "sortit", "sorvegliat", "sorvolat", "soscritt", "sospes", "sospettat", "sospint", "sospirat", "sostantivat", "sostanziat", "sostentat", "sostenut", "sostituit", "sottaciut", "sotterrat", "sottes", "sottintes", "sottoalimentat", "sottocapitalizzat", "sottodivis", "sottoespost", "sottofirmat", "sottolineat", "sottomess", "sottomurat", "sottopagat", "sottopassat", "sottopost", "sottorappresentat", "sottoris", "sottoscritt", "sottostimat", "sottosviluppat", "sottotitolat", "sottovalutat", "sottratt", "soverchiat", "sovesciat", "sovietizzat", "sovracapitalizzat", "sovraccaricat", "sovradimensionat", "sovraeccitat", "sovraespost", "sovraffaticat", "sovraffollat", "sovraggiunt", "sovraimpost", "sovraintes", "sovralimentat", "sovramodulat", "sovrappopolat", "sovrappost", "sovrariscaldat", "sovrasaturat", "sovrascritt", "sovrastampat", "sovrastat", "sovrastimat", "sovrautilizzat", "sovreccitat", "sovrespost", "sovrimpost", "sovrintes", "sovvenut", "sovvenzionat", "sovvertit", "spaccat", "spacchettat", "spacciat", "spaginat", "spaiat", "spalancat", "spalat", "spalcat", "spalleggiat", "spalmat", "spammat", "spampanat", "spampinat", "spanat", "spanciat", "spandut", "spannat", "spannocchiat", "spans", "spantanat", "spant", "spaparacchiat", "spaparanzat", "spappolat", "sparat", "sparecchiat", "sparigliat", "sparit", "sparlat", "sparpagliat", "spartit", "spassat", "spassatosel", "spastoiat", "spaurat", "spaurit", "spaventat", "spazializzat", "spaziat", "spazieggiat", "spazientit", "spazzat", "spazzolat", "specchiat", "specializzat", "specificat", "specillat", "specolat", "spedit", "spegnat", "spelacchiat", "spelat", "spellat", "spennacchiat", "spennat", "spennellat", "spent", "spenzolat", "sperat", "sperimentat", "spernacchiat", "speronat", "sperperat", "spersonalizzat", "sperticat", "spesat", "spes", "spessit", "spettacolarizzat", "spettinat", "spezzat", "spezzettat", "spezziat", "spezzonat", "spiaccicat", "spianat", "spiantat", "spiat", "spiattellat", "spiazzat", "spiccat", "spicciat", "spiccicat", "spicciolat", "spicconat", "spidocchiat", "spiegat", "spiegazzat", "spietrat", "spifferat", "spigionat", "spignorat", "spigolat", "spigrit", "spillat", "spilluzzicat", "spiluccat", "spint", "spintonat", "spiombat", "spiralizzat", "spirantizzat", "spirat", "spiritualizzat", "spiumat", "spizzicat", "spodestat", "spoetizzat", "spogliat", "spolettat", "spoliat", "spoliticizzat", "spollonat", "spolmonat", "spolpat", "spoltronit", "spolverat", "spolverizzat", "spompat", "spompinat", "sponsorizzat", "spopolat", "spoppat", "sporcat", "sportat", "sport", "sposat", "spossedut", "spossessat", "spostat", "spost", "sprangat", "sprecat", "spregiat", "spremut", "spretat", "sprezzat", "sprigionat", "sprimacciat", "spromess", "spronat", "sprotett", "sprovincializzat", "sprovvedut", "sprovvist", "spruzzat", "spugnat", "spulat", "spulciat", "spuntat", "spuntellat", "spupazzat", "spurgat", "sputacchiat", "sputat", "sputtanat", "squadernat", "squadrat", "squagliat", "squagliatasel", "squagliat", "squalificat", "squamat", "squarciat", "squartat", "squassat", "squattrinat", "squilibrat", "squinternat", "sradicat", "srotolat", "srugginit", "stabbiat", "stabilit", "stabilizzat", "stabulat", "staccat", "stacciat", "staffat", "staffilat", "staggiat", "staggit", "stagionat", "stagliat", "stagnat", "stamburat", "stampat", "stampigliat", "stanat", "stancat", "standardizzat", "stangat", "stanziat", "stappat", "starat", "starnazzat", "stasat", "statalizzat", "statizzat", "statuit", "stazzat", "stazzonat", "steccacciat", "steccat", "stecchit", "stecconat", "stemperat", "stempiat", "stenografat", "stereotipat", "sterilit", "sterilizzat", "sterminat", "sterpat", "sterrat", "sterzat", "stes", "stigliat", "stigmatizzat", "stilat", "stilettat", "stilizzat", "stillat", "stimat", "stimolat", "stint", "stipat", "stipendiat", "stipulat", "stiracchiat", "stirat", "stivat", "stizzit", "stoccat", "stolt", "stomacat", "stonat", "stondat", "stoppat", "stordit", "storicizzat", "stornat", "storpiat", "stortat", "stort", "stozzat", "strabenedett", "strabuzzat", "stracannat", "straccat", "stracciat", "stracott", "strafogat", "stragodut", "stralciat", "stralodat", "stralunat", "stramaledett", "stramortit", "strangolat", "straniat", "stranit", "straorzat", "strapagat", "strapazzat", "straperdut", "strapers", "strappat", "strasaput", "strascicat", "strascinat", "strasformat", "stratificat", "strattonat", "stravaccat", "stravint", "stravolt", "stravolut", "straziat", "stregat", "stremat", "stressat", "striat", "stridulat", "strigat", "strigliat", "strillat", "striminzit", "strimpellat", "strinat", "stringat", "strisciat", "stritolat", "strizzat", "strofinat", "strombat", "strombazzat", "stroncat", "stronzat", "stropicciat", "stroppat", "stroppiat", "strozzat", "struccat", "strumentalizzat", "strumentat", "strusciat", "strutt", "strutturalizzat", "strutturat", "stuccat", "studiacchiat", "studiat", "stuellat", "stufat", "stupefatt", "stupit", "stuprat", "sturat", "stutat", "stuzzicat", "suas", "subaffittat", "subappaltat", "subbiat", "subdelegat", "subissat", "subit", "sublicenziat", "sublimat", "sublocat", "subodorat", "subordinat", "subornat", "suburbanizzat", "sucat", "succhiat", "succhiellat", "succiat", "succint", "succis", "suddistint", "suddivis", "suffissat", "suffiss", "suffragat", "suffumicat", "suffus", "suggellat", "suggerit", "suggestionat", "suicidat", "sunteggiat", "sunt", "suolat", "suonat", "superat", "superpagat", "superraffreddat", "supervalutat", "supervisionat", "supplicat", "supplit", "supportat", "suppost", "suppurat", "surclassat", "surfat", "surgelat", "surraffreddat", "surriscaldat", "surrogat", "survoltat", "suscitat", "susseguit", "sussidiat", "sussunt", "sussurrat", "suturat", "svaccat", "svagat", "svaligiat", "svalutat", "svapat", "svariat", "svasat", "svecchiat", "svegliat", "svelat", "svelenit", "sveltit", "svelt", "svenat", "svendut", "sventagliat", "sventat", "sventolat", "sventrat", "sverginat", "svergognat", "svergolat", "sverminat", "sverniciat", "svestit", "svettat", "svezzat", "sviat", "svignatosel", "svigorit", "svilit", "svillaneggiat", "sviluppat", "svinat", "svincolat", "sviolinat", "svirgolat", "svirilizzat", "svisat", "sviscerat", "svitat", "sviticchiat", "svolat", "svolazzat", "svolt", "svolut", "svuotat", "tabuizzat", "tabulat", "taccat", "taccheggiat", "tacciat", "tacitat", "taciut", "tagliat", "taglieggiat", "tagliuzzat", "talebanizzat", "tallonat", "tampinat", "tamponat", "tangut", "tannat", "tappat", "tappezzat", "tarat", "tardat", "targat", "tariffat", "tarlat", "tarmat", "taroccat", "tarpat", "tartagliat", "tartassat", "tartufat", "tassat", "tassellat", "tastat", "tasteggiat", "tatuat", "tecnicizzat", "tecnologizzat", "tedeschizzat", "tediat", "teflonat", "telecomandat", "telecontrollat", "telediffus", "telefonat", "telegrafat", "teleguidat", "telematizzat", "telemetrat", "teleradiotrasmess", "teletrasmess", "teletrasportat", "tematizzat", "temperat", "tempestat", "tempificat", "templatizzat", "temporizzat", "temprat", "temut", "tentat", "tenut", "teologizzat", "teorizzat", "tepefatt", "terebrat", "terminat", "termostatat", "terrazzat", "terrificat", "terrorizzat", "ters", "terzarolat", "terziarizzat", "terziat", "tesat", "tesaurizzat", "tes", "tesserat", "testat", "testificat", "testimoniat", "timbrat", "tindalizzat", "tinteggiat", "tint", "tipicizzat", "tipizzat", "tippat", "tiranneggiat", "tirat", "titillat", "titolat", "toccat", "toelettat", "tollerat", "tolt", "tonalizzat", "tonificat", "tonneggiat", "tonsurat", "torchiat", "tormentat", "tornit", "torrefatt", "tort", "tortoreggiat", "torturat", "tosat", "toscaneggiat", "toscanizzat", "tostat", "totalizzat", "traboccat", "trabuccat", "tracannat", "tracciat", "tradit", "tradott", "trafficat", "trafilat", "trafitt", "traforat", "trafugat", "traghettat", "traguardat", "trainat", "tralasciat", "tralignat", "tramandat", "tramat", "trambasciat", "tramess", "tramestat", "tramezzat", "tramortit", "tramutat", "tranciat", "trangugiat", "tranquillat", "tranquillizzat", "transatt", "transces", "transcodificat", "transcors", "transcritt", "transennat", "transfluit", "transfus", "transistorizzat", "translitterat", "transpost", "transricevut", "transustanziat", "transvedut", "transvist", "trapanat", "trapassat", "trapiantat", "traportat", "trapost", "trappost", "trapuntat", "trapunt", "trarott", "trasandat", "trasbordat", "trascelt", "trasces", "trascinat", "trascors", "trascritt", "trascurat", "trasdott", "trasferit", "trasfigurat", "trasformat", "trasfus", "trasgredit", "traslat", "traslitterat", "traslocat", "trasmess", "trasmutat", "trasparit", "traspirat", "trasportat", "traspost", "trastullat", "trasudat", "trasvolat", "trasvolt", "trattat", "tratteggiat", "trattenut", "tratt", "traumatizzat", "travagliat", "travalicat", "travasat", "travedut", "traversat", "travestit", "traviat", "travisat", "travist", "travolt", "trebbiat", "triangolat", "tribbiat", "tribolat", "tributat", "triennalizzat", "trimestralizzat", "trincat", "trincerat", "trinciat", "tripartit", "triplicat", "trisecat", "trisezionat", "tritat", "triturat", "trivellat", "trollat", "trombat", "troncat", "tropicalizzat", "trovat", "truccat", "trucidat", "truffat", "tuffat", "tumefatt", "tumulat", "turat", "turbat", "turlupinat", "tutelat", "twittat", "ubbidit", "ubbligat", "ubicat", "ubidit", "ubiquitinat", "ubriacat", "uccellat", "uccellinat", "uccis", "udit", "ufficializzat", "ufficiat", "uggit", "ugnat", "uguagliat", "ulcerat", "ulit", "ulolat", "ultimat", "ultracentrifugat", "ululat", "umanat", "umanizzat", "umettat", "umidificat", "umidit", "umiliat", "uncinat", "unguentat", "unificat", "uniformat", "unit", "univerbat", "universaleggiat", "universalizzat", "untat", "unt", "uperizzat", "urbanizzat", "urgenzat", "urlat", "urtacchiat", "urtat", "urticchiat", "usat", "usciolat", "usolat", "ustionat", "usucapit", "usurat", "usurpat", "utilitat", "utilizzat", "vaccinat", "vagabondeggiat", "vagellat", "vagheggiat", "vagillat", "vagliat", "valcat", "valicat", "validat", "valorizzat", "vals", "valutat", "vanagloriat", "vanat", "vandalizzat", "vangat", "vangelizzat", "vanificat", "vanit", "vantaggiat", "vantat", "vaporat", "vaporizzat", "varat", "varcat", "variat", "vasectomizzat", "vaticinat", "vedovat", "vedut", "vegetat", "veggiat", "vegliat", "veicolat", "velarizzat", "velat", "velettat", "velinat", "vellicat", "vellutat", "velocizzat", "vendemmiat", "vendicat", "vendicchiat", "venducchiat", "vendut", "venerat", "vengiat", "ventagliat", "ventilat", "ventolat", "verbalizzat", "vergat", "vergheggiat", "vergognat", "vergolat", "verificat", "verminat", "vernalizzat", "verniciat", "verrinat", "versat", "verseggiat", "versificat", "verticalizzat", "vessat", "vestit", "vestit", "vetrificat", "vetrinat", "vetrioleggiat", "vettovagliat", "vezzeggiat", "viaggiat", "vicinat", "vicitat", "videochattat", "videochiamat", "videocomunicat", "videoregistrat", "videotrasmess", "vidimat", "vigilat", "vigliat", "vigoreggiat", "vigorit", "vilificat", "vilipes", "villaneggiat", "vincolat", "vint", "violat", "violentat", "violinat", "virgolat", "virgoleggiat", "virgolettat", "virilizzat", "virtualizzat", "visionat", "visitat", "vissut", "vistat", "vist", "visualizzat", "vitaliziat", "vitalizzat", "vitaminizzat", "vittimizzat", "vituperat", "vivacizzat", "vivandat", "vivificat", "vivisezionat", "viziat", "vocabolarizzat", "vocalizzat", "vocat", "vociferat", "volantinat", "volatilizzat", "volgarizzat", "volicchiat", "volpeggiat", "voltat", "volt", "voltolat", "volturat", "voluminizzat", "volut", "volutoc", "vomitat", "vorat", "votat", "vulcanizzat", "vuotat", "wappat", "wikificat", "xerocopiat", "zaffat", "zampat", "zampettat", "zampillat", "zannat", "zappat", "zappettat", "zapponat", "zavorrat", "zeppat", "zigrinat", "zigzagat", "zimbellat", "zincat", "zinnat", "zipolat", "zippat", "zirlat", "zittit", "zizzagat", "zoccolat", "zollat", "zombat", "zonat", "zonizzat", "zoppat", "zoppeggiat", "zoppicat", "zucconat", "zufolat", "zumat", "zuppat"];
Object.defineProperty(ZT, "__esModule", {
  value: !0
});
ZT.default = MHa;
var PHa = ee, RHa = DHa(_z);
function DHa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: NHa
} = PHa.languageProcessing;
function LHa(e) {
  return ["a", "o", "e", "i"].some((t) => {
    if (e.length > 3 && e.endsWith(t)) {
      const n = e.slice(0, -1);
      return RHa.default.includes(n);
    }
  });
}
function MHa(e) {
  return NHa(e).filter((t) => LHa(t));
}
Object.defineProperty(kz, "__esModule", {
  value: !0
});
kz.default = void 0;
var qHa = ee, dR = rt, FHa = BHa(ZT);
function BHa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  directPrecedenceException: WHa,
  precedenceException: UHa,
  values: HHa
} = qHa.languageProcessing, {
  Clause: GHa
} = HHa;
class VHa extends GHa {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, FHa.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.
   * If no exceptions are found, the sentence part is passive.
   *
   * @returns {boolean} Returns true if no exception is found.
   */
  checkParticiples() {
    const a = this.getClauseText(), t = this.getParticiples().filter((n) => !WHa(a, n, dR.cannotDirectlyPrecedePassiveParticiple) && !UHa(a, n, dR.cannotBeBetweenPassiveAuxiliaryAndParticiple));
    this.setPassive(t.length > 0);
  }
}
kz.default = VHa;
var Ez = {};
Object.defineProperty(Ez, "__esModule", {
  value: !0
});
Ez.default = void 0;
Ez.default = ["fui", "fu", "fosti", "fummo", "foste", "furono", "stato", "stati", "stata", "state", "venire", "vengo", "vieni", "viene", "veniamo", "venite", "vengono", "venivo", "venivi", "veniva", "venivamo", "venivate", "venivano", "verrò", "verrai", "verrà", "verremo", "verrete", "verranno", "venni", "venisti", "venne", "venimmo", "veniste", "vennero", "verrei", "verresti", "verrebbe", "verremmo", "verreste", "verrebbero", "venga", "veniamo", "venite", "vengano", "veniate", "venissi", "venisse", "venissimo", "veniste", "venissero", "andare", "vado", "vai", "va", "andiamo", "andate", "vanno", "andavo", "andavi", "andava", "andavamo", "andavate", "andavano", "vada", "andiate", "andante", "andato", "andassi", "andasse", "andassimo", "andaste", "andassero", "andai", "andasti", "andò", "andammo", "andarono", "andrò", "andrai", "andrà", "andremo", "andrete", "andranno", "andrei", "andresti", "andrebbe", "andremmo", "andreste", "andrebbero", "vadano", "andando"];
Object.defineProperty(XT, "__esModule", {
  value: !0
});
XT.default = aGa;
var KHa = ee, YHa = JT(kz), uR = JT(Ez), QHa = JT($p);
function JT(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  createRegexFromArray: Tk,
  getClauses: XHa
} = KHa.languageProcessing, ZHa = ["il", "i", "la", "le", "lo", "gli", "uno", "una"], JHa = ["mi", "ti", "si", "ci", "vi"], eGa = {
  Clause: YHa.default,
  stopwords: QHa.default,
  auxiliaries: uR.default,
  regexes: {
    auxiliaryRegex: Tk(uR.default),
    stopCharacterRegex: /([:,])(?=[ \n\r\t'"+\-»«‹›<>])/ig,
    followingAuxiliaryExceptionRegex: Tk(ZHa),
    directPrecedenceExceptionRegex: Tk(JHa)
  }
};
function aGa(e) {
  return XHa(e, eGa);
}
var e$ = {}, a$ = {};
Object.defineProperty(a$, "__esModule", {
  value: !0
});
a$.default = hGa;
var tGa = ee;
const {
  createSingleRuleFromArray: nGa,
  createRulesFromArrays: rGa
} = tGa.languageProcessing;
function Ys(e, a) {
  return a.externalStemmer.vowels.includes(e);
}
function sGa(e, a, t) {
  t = t + 1;
  const n = e.length;
  for (let r = t; r < n; r++)
    if (Ys(e[r], a))
      return r;
  return n;
}
function iGa(e, a, t) {
  const n = e.length;
  for (let r = t; r < n; r++)
    if (!Ys(e[r], a))
      return r;
  return n;
}
function td(e, a) {
  for (let t = 0; t < a.length; t++)
    if (e.endsWith(a[t]))
      return a[t];
  return "";
}
function oGa(e, a) {
  const t = rGa(a.externalStemmer.preProcessing.acuteReplacements, "gi");
  for (const n of t)
    e = e.replace(n.reg, n.repl);
  return e;
}
function lGa(e, a) {
  return e.replace(new RegExp(a.externalStemmer.preProcessing.vowelMarking, "g"), (t, n, r, o) => n + r.toUpperCase() + o);
}
function dGa(e, a) {
  e = e.toLowerCase(), e = oGa(e, a);
  const t = nGa(a.externalStemmer.preProcessing.quReplacement, "g");
  return e = e.replace(t.reg, t.repl), e = lGa(e, a), e;
}
const uGa = function(e, a) {
  let t = e.length, n = e.length, r = e.length;
  for (let o = 0; o < e.length - 1 && t === e.length; o++)
    Ys(e[o], a) && !Ys(e[o + 1], a) && (t = o + 2);
  for (let o = t; o < e.length - 1 && n === e.length; o++)
    Ys(e[o], a) && !Ys(e[o + 1], a) && (n = o + 2);
  return e.length > 3 && (Ys(e[1], a) ? Ys(e[0], a) && Ys(e[1], a) ? r = iGa(e, a, 2) + 1 : r = 3 : r = sGa(e, a, 1) + 1), {
    r1: t,
    r2: n,
    rv: r
  };
}, cGa = function(e, a, t) {
  const n = td(e, a.externalStemmer.pronounSuffixes.suffixes);
  if (n !== "") {
    const r = td(t.slice(0, -n.length), a.externalStemmer.pronounSuffixes.preSuffixesGerund), o = td(t.slice(0, -n.length), a.externalStemmer.pronounSuffixes.preSuffixesInfinitive);
    r !== "" && (e = e.slice(0, -n.length)), o !== "" && (e = e.slice(0, -n.length) + a.externalStemmer.pronounSuffixes.infinitiveCompletion);
  }
  return e;
}, pGa = function(e, a, t, n, r) {
  const o = {
    r1: n,
    r2: t,
    rv: r
  };
  for (const l of a.externalStemmer.standardSuffixes) {
    const u = td(o[l.region], l.suffixes);
    if (u)
      return e.slice(0, -u.length) + l.replacement;
  }
  return e;
}, gGa = function(e, a, t) {
  const n = td(t, a.externalStemmer.verbSuffixes);
  return n && (e = e.slice(0, -n.length)), e;
}, mGa = function(e, a, t) {
  const n = a.externalStemmer.digraphNormalization.digraphCh, r = a.externalStemmer.digraphNormalization.digraphGh;
  return t.endsWith(n[0]) ? e = e.slice(0, -r[0].length) + n[1] : t.endsWith(r[0]) && (e = e.slice(0, -r[0].length) + r[1]), e;
}, fGa = function(e, a) {
  for (const t of a.verbsWithMultipleStems)
    if (t.includes(e))
      return t[0];
  for (const t of a.irregularDiminutives)
    if (t.includes(e))
      return t[0];
}, cR = function(e, a) {
  for (const t of a)
    if (t[1].includes(e))
      return t[0];
  return null;
};
function hGa(e, a) {
  const t = cR(e, a.irregularPluralNounsAndAdjectives);
  if (t)
    return t;
  const n = cR(e, a.irregularVerbs);
  if (n)
    return n;
  if (e = dGa(e, a), e.length < 3)
    return e;
  const {
    r1: r,
    r2: o,
    rv: l
  } = uGa(e, a);
  let u = e.substring(r), c = e.substring(o), f = e.substring(l);
  const y = e;
  e = cGa(e, a, f), e !== y && (u = e.substring(r), c = e.substring(o), f = e.substring(l));
  const z = e;
  e = pGa(e, a, c, u, f), e !== z && (f = e.substring(l)), z === e && (e = gGa(e, a, f)), f = e.substring(l);
  let O = "";
  (O = td(f, a.externalStemmer.generalSuffixes)) !== "" && (e = e.slice(0, -O.length)), f = e.substring(l), e = mGa(e, a, f), e = e.toLowerCase();
  const I = fGa(e, a.stemsThatBelongToOneWord);
  return I || e.toLowerCase();
}
Object.defineProperty(e$, "__esModule", {
  value: !0
});
e$.default = kGa;
var yGa = K, zGa = ee, bGa = wGa(a$);
function wGa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: vGa
} = zGa.languageProcessing;
function kGa(e) {
  const a = (0, yGa.get)(e.getData("morphology"), "it", !1);
  return a ? (t) => (0, bGa.default)(t, a) : vGa;
}
var t$ = {};
Object.defineProperty(t$, "__esModule", {
  value: !0
});
t$.default = AGa;
var _Ga = ee;
const {
  formatNumber: EGa
} = _Ga.helpers;
function AGa(e) {
  const a = 217 - 1.3 * e.averageWordsPerSentence - 0.6 * e.syllablesPer100Words;
  return EGa(a);
}
Object.defineProperty(PT, "__esModule", {
  value: !0
});
var IF = PT.default = void 0, TGa = ee, $Ga = ci(bz), jGa = rt, xGa = ci($p), SGa = ci(Sr), OGa = ci(wz), IGa = ci(CHa), CGa = ci(vz), PGa = ci(XT), RGa = ci(e$), DGa = ci(t$);
function ci(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: NGa
} = TGa.languageProcessing;
let LGa = class extends NGa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), Object.assign(this.config, {
      language: "it",
      passiveConstructionType: "periphrastic",
      firstWordExceptions: $Ga.default,
      functionWords: jGa.all,
      stopWords: xGa.default,
      transitionWords: SGa.default,
      twoPartTransitionWords: OGa.default,
      syllables: IGa.default,
      sentenceLength: CGa.default
    }), Object.assign(this.helpers, {
      getClauses: PGa.default,
      getStemmer: RGa.default,
      fleschReadingScore: DGa.default
    });
  }
};
IF = PT.default = LGa;
var n$ = {}, Az = {}, au = {}, hl = {};
function Tz() {
  var e = {
    "[一二三四五六七八九十百千万億兆]": "M",
    "[一-龠々〆ヵヶ]": "H",
    "[ぁ-ん]": "I",
    "[ァ-ヴーｱ-ﾝﾞｰ]": "K",
    "[a-zA-Zａ-ｚＡ-Ｚ]": "A",
    "[0-9０-９]": "N"
  };
  this.chartype_ = [];
  for (var a in e) {
    var t = new RegExp();
    t.compile(a), this.chartype_.push([t, e[a]]);
  }
  return this.BIAS__ = -332, this.BC1__ = { HH: 6, II: 2461, KH: 406, OH: -1378 }, this.BC2__ = { AA: -3267, AI: 2744, AN: -878, HH: -4070, HM: -1711, HN: 4012, HO: 3761, IA: 1327, IH: -1184, II: -1332, IK: 1721, IO: 5492, KI: 3831, KK: -8741, MH: -3132, MK: 3334, OO: -2920 }, this.BC3__ = { HH: 996, HI: 626, HK: -721, HN: -1307, HO: -836, IH: -301, KK: 2762, MK: 1079, MM: 4034, OA: -1652, OH: 266 }, this.BP1__ = { BB: 295, OB: 304, OO: -125, UB: 352 }, this.BP2__ = { BO: 60, OO: -1762 }, this.BQ1__ = { BHH: 1150, BHM: 1521, BII: -1158, BIM: 886, BMH: 1208, BNH: 449, BOH: -91, BOO: -2597, OHI: 451, OIH: -296, OKA: 1851, OKH: -1020, OKK: 904, OOO: 2965 }, this.BQ2__ = { BHH: 118, BHI: -1159, BHM: 466, BIH: -919, BKK: -1720, BKO: 864, OHH: -1139, OHM: -181, OIH: 153, UHI: -1146 }, this.BQ3__ = { BHH: -792, BHI: 2664, BII: -299, BKI: 419, BMH: 937, BMM: 8335, BNN: 998, BOH: 775, OHH: 2174, OHM: 439, OII: 280, OKH: 1798, OKI: -793, OKO: -2242, OMH: -2402, OOO: 11699 }, this.BQ4__ = { BHH: -3895, BIH: 3761, BII: -4654, BIK: 1348, BKK: -1806, BMI: -3385, BOO: -12396, OAH: 926, OHH: 266, OHK: -2036, ONN: -973 }, this.BW1__ = { ",と": 660, ",同": 727, B1あ: 1404, B1同: 542, "、と": 660, "、同": 727, "」と": 1682, あっ: 1505, いう: 1743, いっ: -2055, いる: 672, うし: -4817, うん: 665, から: 3472, がら: 600, こう: -790, こと: 2083, こん: -1262, さら: -4143, さん: 4573, した: 2641, して: 1104, すで: -3399, そこ: 1977, それ: -871, たち: 1122, ため: 601, った: 3463, つい: -802, てい: 805, てき: 1249, でき: 1127, です: 3445, では: 844, とい: -4915, とみ: 1922, どこ: 3887, ない: 5713, なっ: 3015, など: 7379, なん: -1113, にし: 2468, には: 1498, にも: 1671, に対: -912, の一: -501, の中: 741, ませ: 2448, まで: 1711, まま: 2600, まる: -2155, やむ: -1947, よっ: -2565, れた: 2369, れで: -913, をし: 1860, を見: 731, 亡く: -1886, 京都: 2558, 取り: -2784, 大き: -2604, 大阪: 1497, 平方: -2314, 引き: -1336, 日本: -195, 本当: -2423, 毎日: -2113, 目指: -724, Ｂ１あ: 1404, Ｂ１同: 542, "｣と": 1682 }, this.BW2__ = { "..": -11822, 11: -669, "――": -5730, "−−": -13175, いう: -1609, うか: 2490, かし: -1350, かも: -602, から: -7194, かれ: 4612, がい: 853, がら: -3198, きた: 1941, くな: -1597, こと: -8392, この: -4193, させ: 4533, され: 13168, さん: -3977, しい: -1819, しか: -545, した: 5078, して: 972, しな: 939, その: -3744, たい: -1253, たた: -662, ただ: -3857, たち: -786, たと: 1224, たは: -939, った: 4589, って: 1647, っと: -2094, てい: 6144, てき: 3640, てく: 2551, ては: -3110, ても: -3065, でい: 2666, でき: -1528, でし: -3828, です: -4761, でも: -4203, とい: 1890, とこ: -1746, とと: -2279, との: 720, とみ: 5168, とも: -3941, ない: -2488, なが: -1313, など: -6509, なの: 2614, なん: 3099, にお: -1615, にし: 2748, にな: 2454, によ: -7236, に対: -14943, に従: -4688, に関: -11388, のか: 2093, ので: -7059, のに: -6041, のの: -6125, はい: 1073, はが: -1033, はず: -2532, ばれ: 1813, まし: -1316, まで: -6621, まれ: 5409, めて: -3153, もい: 2230, もの: -10713, らか: -944, らし: -1611, らに: -1897, りし: 651, りま: 1620, れた: 4270, れて: 849, れば: 4114, ろう: 6067, われ: 7901, を通: -11877, んだ: 728, んな: -4115, 一人: 602, 一方: -1375, 一日: 970, 一部: -1051, 上が: -4479, 会社: -1116, 出て: 2163, 分の: -7758, 同党: 970, 同日: -913, 大阪: -2471, 委員: -1250, 少な: -1050, 年度: -8669, 年間: -1626, 府県: -2363, 手権: -1982, 新聞: -4066, 日新: -722, 日本: -7068, 日米: 3372, 曜日: -601, 朝鮮: -2355, 本人: -2697, 東京: -1543, 然と: -1384, 社会: -1276, 立て: -990, 第に: -1612, 米国: -4268, "１１": -669 }, this.BW3__ = { あた: -2194, あり: 719, ある: 3846, "い.": -1185, "い。": -1185, いい: 5308, いえ: 2079, いく: 3029, いた: 2056, いっ: 1883, いる: 5600, いわ: 1527, うち: 1117, うと: 4798, えと: 1454, "か.": 2857, "か。": 2857, かけ: -743, かっ: -4098, かに: -669, から: 6520, かり: -2670, "が,": 1816, "が、": 1816, がき: -4855, がけ: -1127, がっ: -913, がら: -4977, がり: -2064, きた: 1645, けど: 1374, こと: 7397, この: 1542, ころ: -2757, さい: -714, さを: 976, "し,": 1557, "し、": 1557, しい: -3714, した: 3562, して: 1449, しな: 2608, しま: 1200, "す.": -1310, "す。": -1310, する: 6521, "ず,": 3426, "ず、": 3426, ずに: 841, そう: 428, "た.": 8875, "た。": 8875, たい: -594, たの: 812, たり: -1183, たる: -853, "だ.": 4098, "だ。": 4098, だっ: 1004, った: -4748, って: 300, てい: 6240, てお: 855, ても: 302, です: 1437, でに: -1482, では: 2295, とう: -1387, とし: 2266, との: 541, とも: -3543, どう: 4664, ない: 1796, なく: -903, など: 2135, "に,": -1021, "に、": -1021, にし: 1771, にな: 1906, には: 2644, "の,": -724, "の、": -724, の子: -1e3, "は,": 1337, "は、": 1337, べき: 2181, まし: 1113, ます: 6943, まっ: -1549, まで: 6154, まれ: -793, らし: 1479, られ: 6820, るる: 3818, "れ,": 854, "れ、": 854, れた: 1850, れて: 1375, れば: -3246, れる: 1091, われ: -605, んだ: 606, んで: 798, カ月: 990, 会議: 860, 入り: 1232, 大会: 2217, 始め: 1681, 市: 965, 新聞: -5055, "日,": 974, "日、": 974, 社会: 2024, ｶ月: 990 }, this.TC1__ = { AAA: 1093, HHH: 1029, HHM: 580, HII: 998, HOH: -390, HOM: -331, IHI: 1169, IOH: -142, IOI: -1015, IOM: 467, MMH: 187, OOI: -1832 }, this.TC2__ = { HHO: 2088, HII: -1023, HMM: -1154, IHI: -1965, KKH: 703, OII: -2649 }, this.TC3__ = { AAA: -294, HHH: 346, HHI: -341, HII: -1088, HIK: 731, HOH: -1486, IHH: 128, IHI: -3041, IHO: -1935, IIH: -825, IIM: -1035, IOI: -542, KHH: -1216, KKA: 491, KKH: -1217, KOK: -1009, MHH: -2694, MHM: -457, MHO: 123, MMH: -471, NNH: -1689, NNO: 662, OHO: -3393 }, this.TC4__ = { HHH: -203, HHI: 1344, HHK: 365, HHM: -122, HHN: 182, HHO: 669, HIH: 804, HII: 679, HOH: 446, IHH: 695, IHO: -2324, IIH: 321, III: 1497, IIO: 656, IOO: 54, KAK: 4845, KKA: 3386, KKK: 3065, MHH: -405, MHI: 201, MMH: -241, MMM: 661, MOM: 841 }, this.TQ1__ = { BHHH: -227, BHHI: 316, BHIH: -132, BIHH: 60, BIII: 1595, BNHH: -744, BOHH: 225, BOOO: -908, OAKK: 482, OHHH: 281, OHIH: 249, OIHI: 200, OIIH: -68 }, this.TQ2__ = { BIHH: -1401, BIII: -1033, BKAK: -543, BOOO: -5591 }, this.TQ3__ = { BHHH: 478, BHHM: -1073, BHIH: 222, BHII: -504, BIIH: -116, BIII: -105, BMHI: -863, BMHM: -464, BOMH: 620, OHHH: 346, OHHI: 1729, OHII: 997, OHMH: 481, OIHH: 623, OIIH: 1344, OKAK: 2792, OKHH: 587, OKKA: 679, OOHH: 110, OOII: -685 }, this.TQ4__ = { BHHH: -721, BHHM: -3604, BHII: -966, BIIH: -607, BIII: -2181, OAAA: -2763, OAKK: 180, OHHH: -294, OHHI: 2446, OHHO: 480, OHIH: -1573, OIHH: 1935, OIHI: -493, OIIH: 626, OIII: -4007, OKAK: -8156 }, this.TW1__ = { につい: -4681, 東京都: 2026 }, this.TW2__ = { ある程: -2049, いった: -1256, ころが: -2434, しょう: 3873, その後: -4430, だって: -1049, ていた: 1833, として: -4657, ともに: -4517, もので: 1882, 一気に: -792, 初めて: -1512, 同時に: -8097, 大きな: -1255, 対して: -2721, 社会党: -3216 }, this.TW3__ = { いただ: -1734, してい: 1314, として: -4314, につい: -5483, にとっ: -5989, に当た: -6247, "ので,": -727, "ので、": -727, のもの: -600, れから: -3752, 十二月: -2287 }, this.TW4__ = { "いう.": 8576, "いう。": 8576, からな: -2348, してい: 2958, "たが,": 1516, "たが、": 1516, ている: 1538, という: 1349, ました: 5543, ません: 1097, ようと: -4258, よると: 5865 }, this.UC1__ = { A: 484, K: 93, M: 645, O: -505 }, this.UC2__ = { A: 819, H: 1059, I: 409, M: 3987, N: 5775, O: 646 }, this.UC3__ = { A: -1370, I: 2311 }, this.UC4__ = { A: -2643, H: 1809, I: -1032, K: -3450, M: 3565, N: 3876, O: 6646 }, this.UC5__ = { H: 313, I: -1238, K: -799, M: 539, O: -831 }, this.UC6__ = { H: -506, I: -253, K: 87, M: 247, O: -387 }, this.UP1__ = { O: -214 }, this.UP2__ = { B: 69, O: 935 }, this.UP3__ = { B: 189 }, this.UQ1__ = { BH: 21, BI: -12, BK: -99, BN: 142, BO: -56, OH: -95, OI: 477, OK: 410, OO: -2422 }, this.UQ2__ = { BH: 216, BI: 113, OK: 1759 }, this.UQ3__ = { BA: -479, BH: 42, BI: 1913, BK: -7198, BM: 3160, BN: 6427, BO: 14761, OI: -827, ON: -3212 }, this.UW1__ = { ",": 156, "、": 156, "「": -463, あ: -941, う: -127, が: -553, き: 121, こ: 505, で: -201, と: -547, ど: -123, に: -789, の: -185, は: -847, も: -466, や: -470, よ: 182, ら: -292, り: 208, れ: 169, を: -446, ん: -137, "・": -135, 主: -402, 京: -268, 区: -912, 午: 871, 国: -460, 大: 561, 委: 729, 市: -411, 日: -141, 理: 361, 生: -408, 県: -386, 都: -718, "｢": -463, "･": -135 }, this.UW2__ = { ",": -829, "、": -829, "〇": 892, "「": -645, "」": 3145, あ: -538, い: 505, う: 134, お: -502, か: 1454, が: -856, く: -412, こ: 1141, さ: 878, ざ: 540, し: 1529, す: -675, せ: 300, そ: -1011, た: 188, だ: 1837, つ: -949, て: -291, で: -268, と: -981, ど: 1273, な: 1063, に: -1764, の: 130, は: -409, ひ: -1273, べ: 1261, ま: 600, も: -1263, や: -402, よ: 1639, り: -579, る: -694, れ: 571, を: -2516, ん: 2095, ア: -587, カ: 306, キ: 568, ッ: 831, 三: -758, 不: -2150, 世: -302, 中: -968, 主: -861, 事: 492, 人: -123, 会: 978, 保: 362, 入: 548, 初: -3025, 副: -1566, 北: -3414, 区: -422, 大: -1769, 天: -865, 太: -483, 子: -1519, 学: 760, 実: 1023, 小: -2009, 市: -813, 年: -1060, 強: 1067, 手: -1519, 揺: -1033, 政: 1522, 文: -1355, 新: -1682, 日: -1815, 明: -1462, 最: -630, 朝: -1843, 本: -1650, 東: -931, 果: -665, 次: -2378, 民: -180, 気: -1740, 理: 752, 発: 529, 目: -1584, 相: -242, 県: -1165, 立: -763, 第: 810, 米: 509, 自: -1353, 行: 838, 西: -744, 見: -3874, 調: 1010, 議: 1198, 込: 3041, 開: 1758, 間: -1257, "｢": -645, "｣": 3145, ｯ: 831, ｱ: -587, ｶ: 306, ｷ: 568 }, this.UW3__ = { ",": 4889, 1: -800, "−": -1723, "、": 4889, 々: -2311, "〇": 5827, "」": 2670, "〓": -3573, あ: -2696, い: 1006, う: 2342, え: 1983, お: -4864, か: -1163, が: 3271, く: 1004, け: 388, げ: 401, こ: -3552, ご: -3116, さ: -1058, し: -395, す: 584, せ: 3685, そ: -5228, た: 842, ち: -521, っ: -1444, つ: -1081, て: 6167, で: 2318, と: 1691, ど: -899, な: -2788, に: 2745, の: 4056, は: 4555, ひ: -2171, ふ: -1798, へ: 1199, ほ: -5516, ま: -4384, み: -120, め: 1205, も: 2323, や: -788, よ: -202, ら: 727, り: 649, る: 5905, れ: 2773, わ: -1207, を: 6620, ん: -518, ア: 551, グ: 1319, ス: 874, ッ: -1350, ト: 521, ム: 1109, ル: 1591, ロ: 2201, ン: 278, "・": -3794, 一: -1619, 下: -1759, 世: -2087, 両: 3815, 中: 653, 主: -758, 予: -1193, 二: 974, 人: 2742, 今: 792, 他: 1889, 以: -1368, 低: 811, 何: 4265, 作: -361, 保: -2439, 元: 4858, 党: 3593, 全: 1574, 公: -3030, 六: 755, 共: -1880, 円: 5807, 再: 3095, 分: 457, 初: 2475, 別: 1129, 前: 2286, 副: 4437, 力: 365, 動: -949, 務: -1872, 化: 1327, 北: -1038, 区: 4646, 千: -2309, 午: -783, 協: -1006, 口: 483, 右: 1233, 各: 3588, 合: -241, 同: 3906, 和: -837, 員: 4513, 国: 642, 型: 1389, 場: 1219, 外: -241, 妻: 2016, 学: -1356, 安: -423, 実: -1008, 家: 1078, 小: -513, 少: -3102, 州: 1155, 市: 3197, 平: -1804, 年: 2416, 広: -1030, 府: 1605, 度: 1452, 建: -2352, 当: -3885, 得: 1905, 思: -1291, 性: 1822, 戸: -488, 指: -3973, 政: -2013, 教: -1479, 数: 3222, 文: -1489, 新: 1764, 日: 2099, 旧: 5792, 昨: -661, 時: -1248, 曜: -951, 最: -937, 月: 4125, 期: 360, 李: 3094, 村: 364, 東: -805, 核: 5156, 森: 2438, 業: 484, 氏: 2613, 民: -1694, 決: -1073, 法: 1868, 海: -495, 無: 979, 物: 461, 特: -3850, 生: -273, 用: 914, 町: 1215, 的: 7313, 直: -1835, 省: 792, 県: 6293, 知: -1528, 私: 4231, 税: 401, 立: -960, 第: 1201, 米: 7767, 系: 3066, 約: 3663, 級: 1384, 統: -4229, 総: 1163, 線: 1255, 者: 6457, 能: 725, 自: -2869, 英: 785, 見: 1044, 調: -562, 財: -733, 費: 1777, 車: 1835, 軍: 1375, 込: -1504, 通: -1136, 選: -681, 郎: 1026, 郡: 4404, 部: 1200, 金: 2163, 長: 421, 開: -1432, 間: 1302, 関: -1282, 雨: 2009, 電: -1045, 非: 2066, 駅: 1620, "１": -800, "｣": 2670, "･": -3794, ｯ: -1350, ｱ: 551, ｸﾞ: 1319, ｽ: 874, ﾄ: 521, ﾑ: 1109, ﾙ: 1591, ﾛ: 2201, ﾝ: 278 }, this.UW4__ = { ",": 3930, ".": 3508, "―": -4841, "、": 3930, "。": 3508, "〇": 4999, "「": 1895, "」": 3798, "〓": -5156, あ: 4752, い: -3435, う: -640, え: -2514, お: 2405, か: 530, が: 6006, き: -4482, ぎ: -3821, く: -3788, け: -4376, げ: -4734, こ: 2255, ご: 1979, さ: 2864, し: -843, じ: -2506, す: -731, ず: 1251, せ: 181, そ: 4091, た: 5034, だ: 5408, ち: -3654, っ: -5882, つ: -1659, て: 3994, で: 7410, と: 4547, な: 5433, に: 6499, ぬ: 1853, ね: 1413, の: 7396, は: 8578, ば: 1940, ひ: 4249, び: -4134, ふ: 1345, へ: 6665, べ: -744, ほ: 1464, ま: 1051, み: -2082, む: -882, め: -5046, も: 4169, ゃ: -2666, や: 2795, ょ: -1544, よ: 3351, ら: -2922, り: -9726, る: -14896, れ: -2613, ろ: -4570, わ: -1783, を: 13150, ん: -2352, カ: 2145, コ: 1789, セ: 1287, ッ: -724, ト: -403, メ: -1635, ラ: -881, リ: -541, ル: -856, ン: -3637, "・": -4371, ー: -11870, 一: -2069, 中: 2210, 予: 782, 事: -190, 井: -1768, 人: 1036, 以: 544, 会: 950, 体: -1286, 作: 530, 側: 4292, 先: 601, 党: -2006, 共: -1212, 内: 584, 円: 788, 初: 1347, 前: 1623, 副: 3879, 力: -302, 動: -740, 務: -2715, 化: 776, 区: 4517, 協: 1013, 参: 1555, 合: -1834, 和: -681, 員: -910, 器: -851, 回: 1500, 国: -619, 園: -1200, 地: 866, 場: -1410, 塁: -2094, 士: -1413, 多: 1067, 大: 571, 子: -4802, 学: -1397, 定: -1057, 寺: -809, 小: 1910, 屋: -1328, 山: -1500, 島: -2056, 川: -2667, 市: 2771, 年: 374, 庁: -4556, 後: 456, 性: 553, 感: 916, 所: -1566, 支: 856, 改: 787, 政: 2182, 教: 704, 文: 522, 方: -856, 日: 1798, 時: 1829, 最: 845, 月: -9066, 木: -485, 来: -442, 校: -360, 業: -1043, 氏: 5388, 民: -2716, 気: -910, 沢: -939, 済: -543, 物: -735, 率: 672, 球: -1267, 生: -1286, 産: -1101, 田: -2900, 町: 1826, 的: 2586, 目: 922, 省: -3485, 県: 2997, 空: -867, 立: -2112, 第: 788, 米: 2937, 系: 786, 約: 2171, 経: 1146, 統: -1169, 総: 940, 線: -994, 署: 749, 者: 2145, 能: -730, 般: -852, 行: -792, 規: 792, 警: -1184, 議: -244, 谷: -1e3, 賞: 730, 車: -1481, 軍: 1158, 輪: -1433, 込: -3370, 近: 929, 道: -1291, 選: 2596, 郎: -4866, 都: 1192, 野: -1100, 銀: -2213, 長: 357, 間: -2344, 院: -2297, 際: -2604, 電: -878, 領: -1659, 題: -792, 館: -1984, 首: 1749, 高: 2120, "｢": 1895, "｣": 3798, "･": -4371, ｯ: -724, ｰ: -11870, ｶ: 2145, ｺ: 1789, ｾ: 1287, ﾄ: -403, ﾒ: -1635, ﾗ: -881, ﾘ: -541, ﾙ: -856, ﾝ: -3637 }, this.UW5__ = { ",": 465, ".": -299, 1: -514, E2: -32768, "]": -2762, "、": 465, "。": -299, "「": 363, あ: 1655, い: 331, う: -503, え: 1199, お: 527, か: 647, が: -421, き: 1624, ぎ: 1971, く: 312, げ: -983, さ: -1537, し: -1371, す: -852, だ: -1186, ち: 1093, っ: 52, つ: 921, て: -18, で: -850, と: -127, ど: 1682, な: -787, に: -1224, の: -635, は: -578, べ: 1001, み: 502, め: 865, ゃ: 3350, ょ: 854, り: -208, る: 429, れ: 504, わ: 419, を: -1264, ん: 327, イ: 241, ル: 451, ン: -343, 中: -871, 京: 722, 会: -1153, 党: -654, 務: 3519, 区: -901, 告: 848, 員: 2104, 大: -1296, 学: -548, 定: 1785, 嵐: -1304, 市: -2991, 席: 921, 年: 1763, 思: 872, 所: -814, 挙: 1618, 新: -1682, 日: 218, 月: -4353, 査: 932, 格: 1356, 機: -1508, 氏: -1347, 田: 240, 町: -3912, 的: -3149, 相: 1319, 省: -1052, 県: -4003, 研: -997, 社: -278, 空: -813, 統: 1955, 者: -2233, 表: 663, 語: -1073, 議: 1219, 選: -1018, 郎: -368, 長: 786, 間: 1191, 題: 2368, 館: -689, "１": -514, Ｅ２: -32768, "｢": 363, ｲ: 241, ﾙ: 451, ﾝ: -343 }, this.UW6__ = { ",": 227, ".": 808, 1: -270, E1: 306, "、": 227, "。": 808, あ: -307, う: 189, か: 241, が: -73, く: -121, こ: -200, じ: 1782, す: 383, た: -428, っ: 573, て: -1014, で: 101, と: -105, な: -253, に: -149, の: -417, は: -236, も: -206, り: 187, る: -135, を: 195, ル: -673, ン: -496, 一: -277, 中: 201, 件: -800, 会: 624, 前: 302, 区: 1792, 員: -1212, 委: 798, 学: -960, 市: 887, 広: -695, 後: 535, 業: -697, 相: 753, 社: -507, 福: 974, 空: -822, 者: 1811, 連: 463, 郎: 1082, "１": -270, Ｅ１: 306, ﾙ: -673, ﾝ: -496 }, this;
}
Tz.prototype.ctype_ = function(e) {
  for (var a in this.chartype_)
    if (e.match(this.chartype_[a][0]))
      return this.chartype_[a][1];
  return "O";
};
Tz.prototype.ts_ = function(e) {
  return e || 0;
};
Tz.prototype.segment = function(e) {
  if (e == null || e == null || e == "")
    return [];
  var a = [], t = ["B3", "B2", "B1"], n = ["O", "O", "O"], r = e.split("");
  for (f = 0; f < r.length; ++f)
    t.push(r[f]), n.push(this.ctype_(r[f]));
  t.push("E1"), t.push("E2"), t.push("E3"), n.push("O"), n.push("O"), n.push("O");
  for (var o = t[3], l = "U", u = "U", c = "U", f = 4; f < t.length - 3; ++f) {
    var y = this.BIAS__, z = t[f - 3], v = t[f - 2], O = t[f - 1], I = t[f], A = t[f + 1], x = t[f + 2], w = n[f - 3], j = n[f - 2], S = n[f - 1], P = n[f], M = n[f + 1], G = n[f + 2];
    y += this.ts_(this.UP1__[l]), y += this.ts_(this.UP2__[u]), y += this.ts_(this.UP3__[c]), y += this.ts_(this.BP1__[l + u]), y += this.ts_(this.BP2__[u + c]), y += this.ts_(this.UW1__[z]), y += this.ts_(this.UW2__[v]), y += this.ts_(this.UW3__[O]), y += this.ts_(this.UW4__[I]), y += this.ts_(this.UW5__[A]), y += this.ts_(this.UW6__[x]), y += this.ts_(this.BW1__[v + O]), y += this.ts_(this.BW2__[O + I]), y += this.ts_(this.BW3__[I + A]), y += this.ts_(this.TW1__[z + v + O]), y += this.ts_(this.TW2__[v + O + I]), y += this.ts_(this.TW3__[O + I + A]), y += this.ts_(this.TW4__[I + A + x]), y += this.ts_(this.UC1__[w]), y += this.ts_(this.UC2__[j]), y += this.ts_(this.UC3__[S]), y += this.ts_(this.UC4__[P]), y += this.ts_(this.UC5__[M]), y += this.ts_(this.UC6__[G]), y += this.ts_(this.BC1__[j + S]), y += this.ts_(this.BC2__[S + P]), y += this.ts_(this.BC3__[P + M]), y += this.ts_(this.TC1__[w + j + S]), y += this.ts_(this.TC2__[j + S + P]), y += this.ts_(this.TC3__[S + P + M]), y += this.ts_(this.TC4__[P + M + G]), y += this.ts_(this.UQ1__[l + w]), y += this.ts_(this.UQ2__[u + j]), y += this.ts_(this.UQ3__[c + S]), y += this.ts_(this.BQ1__[u + j + S]), y += this.ts_(this.BQ2__[u + S + P]), y += this.ts_(this.BQ3__[c + j + S]), y += this.ts_(this.BQ4__[c + S + P]), y += this.ts_(this.TQ1__[u + w + j + S]), y += this.ts_(this.TQ2__[u + j + S + P]), y += this.ts_(this.TQ3__[c + w + j + S]), y += this.ts_(this.TQ4__[c + j + S + P]);
    var U = "O";
    y > 0 && (a.push(o), o = "", U = "B"), l = u, u = c, c = U, o += t[f];
  }
  return a.push(o), a;
};
var CF = Tz;
Object.defineProperty(hl, "__esModule", {
  value: !0
});
hl.default = HGa;
var pR = K, MGa = ee, qGa = FGa(CF);
function FGa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  sanitizeString: BGa,
  removePunctuation: WGa
} = MGa.languageProcessing, UGa = new qGa.default();
function HGa(e) {
  if (e = BGa(e), e === "")
    return [];
  let a = UGa.segment(e);
  return a = (0, pR.map)(a, function(t) {
    return WGa(t);
  }), (0, pR.filter)(a, function(t) {
    return t.trim() !== "";
  });
}
var tu = {};
Object.defineProperty(tu, "__esModule", {
  value: !0
});
tu.default = void 0;
tu.default = ["が", "を", "に", "へ", "と", "から", "より", "まで", "で", "か", "の", "や", "やら", "だ", "なり", "わ", "とも", "かしら", "かな", "かい", "っけ", "さ", "よ", "ね", "ばかり", "ばっかり", "ばっか", "ばかし", "だけ", "きり", "っきり", "ほど", "くらい", "ぐらい", "ころ", "ごろ", "など", "は", "も", "こそ", "でも", "しか", "さえ", "ば", "て", "のに", "ので", "ところ", "けれども", "けれど", "くせ", "もの", "もん", "ものか", "もんか", "な", "なあ", "なんか", "なんて", "って", "し", "ずつ", "すら", "ともに", "ぜ", "ぞ", "じゃん", "ながら", "たり", "だり", "つつ", "まま", "ものの", "つまり", "しかし", "よって", "に関する", "に関し", "について", "における", "において", "関", "する", "関し", "ついて", "おえる", "おける", "という", "といっ", "た", "に対する", "対", "に対して", "対して", "にかけ", "による", "により", "によって", "および", "これ", "それ", "あれ", "どれ", "こちら", "こっち", "そちら", "そっち", "あちら", "あっち", "どちら", "どっち", "ここ", "そこ", "あそこ", "どこ", "こう", "そう", "ああ", "どう", "こんな", "そんな", "あんな", "どんな", "この", "よう", "その", "あの", "ど", "こうやって", "そうやって", "ああやって", "やっ", "どの", "こっ", "そっから", "どっ", "さま", "あちらさま", "どちらさま", "そちらさま", "こんだけ", "そんだけ", "あんだけ", "どん", "なに", "なん", "何", "どいつ", "どなた", "だれ", "誰", "いつ", "なぜ", "どうして", "どれくらい", "どれぐらい", "位", "いくら", "いくつ", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "百", "千", "万", "億", "兆", "ひとつ", "ふたつ", "みっつ", "よっつ", "いつつ", "むっつ", "ななつ", "やっつ", "ここのつ", "とお", "つ", "こ", "コ", "個", "人", "ひき", "匹", "まい", "枚", "さつ", "冊", "杯", "回", "キロ", "グラム", "適量", "少々", "大匙", "大さじ", "小匙", "小さじ", "g", "cc", "ml", "l", "kg", "番目", "め", "週", "時間", "週間", "時", "分", "秒", "か月", "カ月", "ヶ月", "部分", "一部", "ほか", "他", "それぞれ", "まっ", "たく", "全く", "ぜんぶ", "全部", "すべて", "全", "すごく", "最高", "最悪", "可能", "良い", "良く", "良さ", "いい", "よい", "悪い", "悪く", "悪さ", "大きな", "おおき", "小さ", "ちいさ", "だめ", "ダメ", "駄目", "ただ", "ちょっと", "すこし", "少し", "なか", "たくさん", "よく", "たまに", "ときどき", "時々", "いつも", "およそ", "やく", "だい", "たい", "約", "程", "大体", "また", "もう", "とて", "おそらく", "たぶん", "恐らく", "多分", "のみ", "多少", "本当", "ほんとう", "まじ", "マジ", "勿論", "もちろん", "やっと", "しっかり", "さっき", "ほんと", "ホント", "きっと", "かならず", "必ず", "絶対", "ぜっ", "ゼッタイ", "にかく", "やっぱり", "やっぱ", "たっ", "はっきり", "すでに", "なる", "いっしょ", "緒", "だいじょうぶ", "ダイジョウブ", "大丈夫", "年", "月", "日", "今日", "明日", "明後", "昨日", "一昨日", "きょう", "あす", "あし", "あさっ", "き", "のう", "おととい", "今年", "来年", "去年", "ことし", "らいねん", "きょねん", "わたし", "わたくし", "あたし", "私", "あたくし", "うち", "うちら", "おら", "おいら", "わたしら", "たち", "わたしど", "われら", "われわ", "れ", "私ら", "私達", "達", "私共", "我ら", "我々", "おれ", "俺", "オレ", "おれら", "ぼく", "ボクら", "僕", "じぶん", "俺ら", "僕ら", "僕達", "自分", "俺達", "ボク", "あなた", "貴方", "貴女", "貴男", "君", "きみ", "おまえ", "お", "前", "あんた", "お宅", "てめえ", "貴殿", "彼", "彼ら", "彼女", "ら", "こいつ", "そいつ", "あいつ", "アイツ", "これら", "それら", "あれら", "あいつら", "ども", "みな", "みなさま", "おのおの", "共", "みんな", "皆様", "各々", "皆", "皆さま", "方", "当方", "自身", "さん", "様", "殿", "ちゃん", "くん", "こと", "事", "物", "コト", "やつ", "ヤツ", "奴", "まえ", "あと", "うえ", "後", "上", "下", "中", "先", "さらに", "更", "とく", "特に", "ほとんど", "再び", "ふたたび", "ほぼ", "そのまま", "すぐ", "あまり", "相当", "しばしば", "わずか", "僅か", "比較", "的", "まだ", "かなり", "つい", "まず", "やが", "やや", "つねに", "常", "ひきつづき", "引き続き", "きわめて", "極めて", "ごく", "別", "べつ", "はり", "必ずし", "かならずしも", "むしろ", "がい", "まも", "なく", "あら", "ためて", "けっし", "おも", "互い", "間", "改めて", "決し", "主", "主として", "もっと", "とりわけ", "あく", "おおむね", "おおい", "概ね", "大い", "そうし", "それほど", "ちょうど", "とえ", "まさに", "なんと", "とか", "あえて", "まる", "おおよそ", "ます", "ぜんぜん", "全然", "じゃ", "ません", "です", "あり", "ませ", "ん", "ない", "しませ", "なら", "ある", "ありませ", "いる", "い", "いませ", "できる", "でき", "れる", "られる", "せる", "させる", "思わ", "考え", "られ", "おっしゃい", "述べ", "言わ", "話", "なられ", "お思い", "らしい", "らしく", "でしょ", "う", "だろ", "ご", "御", "ハイ", "はい", "いいえ", "うん", "うーん", "ええ", "よし", "いや", "まあ", "おい", "ねえ", "どうぞ", "ほら", "おお", "あー", "さあ", "まし", "でし", "だっ", "なかっ", "しまし", "なっ", "あっ", "いた", "せ", "させ", "ますか", "み", "みませ", "ましょ", "でみ", "でみませ", "なられる", "なろ"];
Object.defineProperty(au, "__esModule", {
  value: !0
});
au.default = KGa;
var GGa = PF(hl), VGa = PF(tu);
function PF(e) {
  return e && e.__esModule ? e : { default: e };
}
function KGa(e) {
  let a = (0, GGa.default)(e);
  a = a.filter((n) => !VGa.default.includes(n));
  const t = "じゃ";
  return a = a.map((n) => n.endsWith(t) ? n.slice(0, -t.length) : n), a;
}
Object.defineProperty(Az, "__esModule", {
  value: !0
});
Az.default = ZGa;
var YGa = RF(au), QGa = RF(ni), XGa = $a;
function RF(e) {
  return e && e.__esModule ? e : { default: e };
}
function ZGa(e, a) {
  e = e.toLowerCase();
  const t = (0, QGa.default)(a);
  if (t.exactMatchRequested) {
    e = (0, XGa.normalizeSingle)(e);
    const r = t.keyphrase, o = [];
    let l = e.indexOf(r);
    for (; l !== -1; )
      o.push(r), l = e.indexOf(r, l + r.length);
    return o;
  }
  return (0, YGa.default)(e).filter((r) => a === r);
}
var r$ = {}, s$ = {}, $z = {};
Object.defineProperty($z, "__esModule", {
  value: !0
});
$z.default = eVa;
var sm = K;
function JGa(e, a) {
  const t = a.paradigmGroups;
  let n = (0, sm.uniq)((0, sm.flatten)(t));
  n = n.sort((u, c) => c.length - u.length || u.localeCompare(c));
  const r = n.filter((u) => e.endsWith(u)), o = [];
  if (r.length === 0)
    o.push(e);
  else {
    const u = r[0], c = e.slice(0, -u.length);
    for (const f of t)
      f.includes(u) && o.push(f.map((y) => c + y));
  }
  const l = "る";
  return e.endsWith(l) && o.push(e.slice(0, -l.length)), (0, sm.uniq)((0, sm.flatten)(o));
}
function eVa(e, a) {
  return e.length <= 1 ? [e] : JGa(e, a);
}
Object.defineProperty(s$, "__esModule", {
  value: !0
});
s$.default = nVa;
var aVa = tVa($z);
function tVa(e) {
  return e && e.__esModule ? e : { default: e };
}
function nVa(e, a) {
  let t = (0, aVa.default)(e, a);
  return t = t.sort((n, r) => n.length - r.length || n.localeCompare(r)), t[0];
}
Object.defineProperty(r$, "__esModule", {
  value: !0
});
r$.default = dVa;
var rVa = K, sVa = ee, iVa = oVa(s$);
function oVa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: lVa
} = sVa.languageProcessing;
function dVa(e) {
  const a = (0, rVa.get)(e.getData("morphology"), "ja", !1);
  return a ? (t) => (0, iVa.default)(t, a) : lVa;
}
var jz = {};
Object.defineProperty(jz, "__esModule", {
  value: !0
});
jz.default = uVa;
function uVa(e) {
  const a = [];
  return e.map((t) => a.push(t.length)), e.length === 0 ? 0 : a.reduce((t, n) => t + n);
}
var xz = {};
Object.defineProperty(xz, "__esModule", {
  value: !0
});
xz.default = fVa;
var cVa = ee, pVa = gVa(Dc);
function gVa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  sanitizeString: mVa
} = cVa.languageProcessing;
function fVa(e) {
  return e = (0, pVa.default)(e), e = mVa(e), e = e.replace(/\s/g, ""), e = e.replace(/[。．？！…‥，、・―〜～：゠＝（）「」『』〝〟〔〕【】［］｛｝〈〉《》.?!:;()"'<>]/g, ""), e.length;
}
var i$ = {};
Object.defineProperty(i$, "__esModule", {
  value: !0
});
i$.default = zVa;
var hVa = yVa(hl);
function yVa(e) {
  return e && e.__esModule ? e : { default: e };
}
function zVa(e, a) {
  const t = (0, hVa.default)(e).join("|"), n = [];
  return a.forEach(function(r) {
    const o = r.join("|");
    t.includes(o) && n.push(r);
  }), n;
}
var Sz = {}, Oz = {};
Object.defineProperty(Oz, "__esModule", {
  value: !0
});
Oz.default = void 0;
var bVa = K, wVa = $a, vVa = kVa(Cd);
function kVa(e) {
  return e && e.__esModule ? e : { default: e };
}
const _Va = "?!…。｡！‼？⁇⁉⁈⁉‥";
class EVa extends vVa.default {
  /**
   * Constructor
   * @constructor
   */
  constructor() {
    super(), this.sentenceDelimiters = _Va;
  }
  /**
   * Returns whether a certain character is a number.
   *
   * @param {string} character The character to check.
   * @returns {boolean} Whether or not the character is a capital letter.
   */
  isNumber(a) {
    const t = [
      // Full-width.
      /^[\uFF10-\uFF19]+$/i,
      // Circled digit, parenthesized digit, and digit with full stop.
      /^[\u2460-\u249B]+$/i,
      // Parenthesized ideograph.
      /^[\u3220-\u3229]+$/i,
      // Circled ideograph.
      /^[\u3280-\u3289]+$/i
    ];
    return !(0, bVa.isNaN)(parseInt(a, 10)) || t.some((n) => n.test(a));
  }
  /**
   * Returns whether a given character is quotation mark.
   *
   * @param {string} character The character to check.
   * @returns {boolean} Whether or not the given character is a quotation mark.
   */
  isQuotation(a) {
    return a = (0, wVa.normalize)(a), a === "'" || a === '"' || /^[\u300C\u300E\u3008\u3014\u3010\uFF5B\uFF3B]+$/i.test(a);
  }
  /**
   * Checks whether a character is from Japanese language that could be sentence beginning.
   *
   * @param {string} letter The letter to check.
   *
   * @returns {boolean} Whether the letter is from Japanese language that could be sentence beginning.
   */
  isLetterFromSpecificLanguage(a) {
    return [
      // Hiragana.
      /^[\u3040-\u3096]+$/i,
      // Katakana full-width.
      /^[\u30A1-\u30FA]+$/i,
      /^[\u31F0-\u31FF]+$/i,
      // Katakana half-width.
      /^[\uFF66-\uFF9D]+$/i,
      // Kanji.
      /^[\u4E00-\u9FFC]+$/i
    ].some((n) => n.test(a));
  }
  /**
   * Always returns true as Japanese sentence beginning doesn't need to be preceded by a whitespace to be a valid one.
   *
   * @returns {true}  Always true.
   */
  isCharacterASpace() {
    return !0;
  }
}
Oz.default = EVa;
Object.defineProperty(Sz, "__esModule", {
  value: !0
});
Sz.default = void 0;
var AVa = K, TVa = $Va(Oz);
function $Va(e) {
  return e && e.__esModule ? e : { default: e };
}
function jVa(e, a = !0) {
  const t = new TVa.default(), {
    tokenizer: n,
    tokens: r
  } = t.createTokenizer();
  return t.tokenize(n, e), r.length === 0 ? [] : t.getSentencesFromTokens(r, a);
}
Sz.default = (0, AVa.memoize)(jVa, (...e) => JSON.stringify(e));
var Iz = {};
Object.defineProperty(Iz, "__esModule", {
  value: !0
});
Iz.default = void 0;
var xVa = K, SVa = OVa(CF);
function OVa(e) {
  return e && e.__esModule ? e : { default: e };
}
function IVa(e) {
  if (e === "")
    return [];
  const a = new SVa.default().segment(e);
  return (0, xVa.map)(a);
}
Iz.default = IVa;
var Cz = {};
Object.defineProperty(Cz, "__esModule", {
  value: !0
});
Cz.default = void 0;
Cz.default = [
  // Demonstrative pronouns:
  "この",
  "その",
  "あの",
  "こんな",
  "そんな",
  "あんな",
  "こう",
  "そう",
  "ああ"
];
var Pz = {};
Object.defineProperty(Pz, "__esModule", {
  value: !0
});
Pz.default = void 0;
Pz.default = [["だから"], ["その", "ため"], ["この", "ため"], ["それ", "で"], ["そこ", "で"], ["よって"], ["する", "と"], ["だと", "する", "と"], ["ゆえ", "に"], ["それゆえ", "に"], ["し", "た", "がっ", "て"], ["それゆえ"], ["それ", "なら"], ["それ", "で", "は"], ["ならば"], ["だ", "と", "し", "たら"], ["そう", "する", "と"], ["そう", "し", "たら"], ["さも", "ない", "と"], ["そうし", "ない", "と"], ["そう", "で", "ない", "なら"], ["だと", "すれ", "ば"], ["そう", "なる", "と"], ["と", "なる", "と"], ["と", "なれ", "ば"], ["そうして", "みる", "と"], ["そう", "なれ", "ば"], ["そうして"], ["そのけっか"], ["その", "結果"], ["しかし"], ["けど"], ["ただ"], ["だ", "が"], ["しかし", "ながら"], ["けれど"], ["けれども"], ["だけど"], ["だけども"], ["そう", "で", "は", "ある", "が"], ["それ", "でも"], ["でも"], ["で", "は", "ある", "が"], ["に", "も", "かかわらず"], ["それ", "に", "も", "かかわらず"], ["ところ", "が"], ["しかる", "に"], ["と", "はいう", "もの", "の"], ["と", "は", "言う", "もの", "の"], ["な", "の", "に"], ["それ", "な", "の", "に"], ["と", "は", "いえ"], ["そう", "はいう", "もの", "の"], ["そう", "は", "言う", "もの", "の"], ["そのくせ"], ["さり", "と", "て"], ["さ", "れど"], ["これ", "に", "はんし", "て"], ["これ", "に", "反し", "て"], ["それ", "に", "し", "て", "は"], ["そのわり", "に", "は"], ["そのわり", "に"], ["それ", "なら"], ["ならび", "に"], ["おなじく"], ["同じく"], ["また"], ["どう", "よう", "に"], ["同様", "に"], ["さ", "れど", "も"], ["さらに"], ["おなじ", "よう", "に"], ["同じ", "よう", "に"], ["のみ", "なら", "ず"], ["しかも"], ["おまけ", "に"], ["そのうえ"], ["その", "上"], ["そして"], ["それ", "から"], ["それどころか"], ["どころか"], ["それ", "に"], ["それ", "に", "し", "て", "も"], ["くわえ", "て"], ["加え", "て"], ["それ", "にくわえ", "て"], ["それ", "に", "加え", "て"], ["ひいて", "は"], ["なお"], ["それ", "ばかり", "で", "なく"], ["それ", "ばかりか"], ["とも", "あれ"], ["その", "うえ", "に"], ["その", "上", "に"], ["その", "うえ", "で"], ["その", "上", "で"], ["あまつさえ"], ["いっぽう"], ["一方"], ["たほう"], ["他方"], ["ぎゃく", "に"], ["逆", "に"], ["それ", "に", "たいし", "て"], ["それ", "に対して"], ["たいし", "て"], ["対して"], ["はん", "たい", "に"], ["反対", "に"], ["はんめん"], ["反面"], ["その", "は", "んめん"], ["その", "反面"], ["また", "は"], ["もしく", "は"], ["あるい", "は"], ["それとも"], ["ほか", "に", "は"], ["他", "に", "は"], ["ほか", "に", "も"], ["他", "に", "も"], ["だいいち", "に"], ["第一", "に"], ["だい", "に", "に"], ["第二", "に"], ["だい", "さん", "に"], ["第三", "に"], ["だい", "よん", "に"], ["第四", "に"], ["ひとつめ", "は"], ["一つめ", "は"], ["一つ", "目", "は"], ["１つめ", "は"], ["1つ", "目", "は"], ["ふたつめ", "は"], ["二つめ", "は"], ["二つ", "目", "は"], ["２つめ", "は"], ["2つ", "目", "は"], ["みっつめ", "は"], ["三つめ", "は"], ["三つ", "目", "は"], ["３つめ", "は"], ["3つ", "目", "は"], ["よっつめ", "は"], ["四つめ", "は"], ["四つ", "目", "は"], ["４つめ", "は"], ["4つ", "目", "は"], ["いって", "んめ", "は"], ["一点目", "は"], ["1", "点目", "は"], ["に", "てんめ", "は"], ["二点目", "は"], ["2", "点目", "は"], ["さん", "て", "んめ", "は"], ["三点目", "は"], ["3", "点目", "は"], ["よん", "て", "んめ", "は"], ["四点目", "は"], ["4", "点目", "は"], ["ひとつ", "は"], ["一つ", "は"], ["１つ", "は"], ["もう", "ひ", "とつ", "は"], ["もう", "一つ", "は"], ["もう", "１", "つ", "は"], ["いってん", "は"], ["一点", "は"], ["1点", "は"], ["もういってん", "は"], ["もう", "一点", "は"], ["もう", "1", "点", "は"], ["はじめ", "に"], ["さいしょ", "に"], ["最初", "に"], ["つづい", "て"], ["続い", "て"], ["つい", "で"], ["次い", "で"], ["さいごに"], ["最後", "に"], ["おわり", "に"], ["終わり", "に"], ["終り", "に"], ["その", "ご"], ["その", "後"], ["まず"], ["つぎ", "に"], ["次", "に"], ["さらに"], ["その", "あと"], ["その", "あと", "に"], ["その後", "に"], ["なぜ", "なら"], ["なぜ", "なら", "ば"], ["なぜか", "という", "と"], ["という", "の", "は"], ["という", "の", "も"], ["だっ", "て"], ["なに", "しろ"], ["なにせ"], ["どう", "して", "か", "という", "と"], ["なん", "で", "か", "という", "と"], ["ち", "なみ", "に"], ["ただ"], ["もっとも"], ["その", "かわり"], ["ただし"], ["そも", "そも"], ["じつ", "は"], ["実", "は"], ["じつ", "の", "ところ"], ["実", "の", "ところ"], ["じつ", "は", "という", "と"], ["実", "は", "という", "と"], ["実", "は", "と", "言う", "と"], ["つまり"], ["いいかえる", "と"], ["言い", "かえる", "と"], ["言い換える", "と"], ["す", "なわち"], ["よう", "は"], ["要", "は"], ["とど", "の", "つまり"], ["よう", "する", "に"], ["要", "する", "に"], ["むしろ"], ["かんげん", "する", "と"], ["換言", "する", "と"], ["かえっ", "て"], ["かわり", "に"], ["その", "かわり"], ["いわば"], ["いって", "みれ", "ば"], ["言っ", "て", "みれ", "ば"], ["という", "より"], ["と言う", "より"], ["という", "より", "は"], ["と言う", "より", "は"], ["という", "より", "も"], ["と言う", "より", "も"], ["という", "か"], ["ぐたい", "て", "き", "に", "は"], ["具体", "的", "に", "は"], ["た", "とえば"], ["例え", "ば"], ["とりわけ"], ["なか", "で", "も"], ["こと", "に"], ["殊", "に"], ["とく", "に"], ["特に"], ["それ", "に", "は"], ["その", "ため", "に", "は"], ["そう", "する", "ば", "あい"], ["そう", "する", "場合"], ["その", "ば", "あい"], ["その", "場合"], ["そうすれ", "ば"], ["それ", "によって"], ["そう", "する", "こと", "で"], ["さ", "れ", "ば"], ["さすれ", "ば"], ["さて"], ["それ", "につけて", "も"], ["ところ", "で"], ["とき", "に"], ["時", "に"], ["それ", "は", "さ", "て", "おき"], ["で", "は"], ["それ", "で", "は"], ["じゃ", "あ"], ["とも", "あれ"], ["それ", "は", "そう", "と"], ["そういえ", "ば"], ["それ", "に", "し", "たっ", "て"], ["しょせん"], ["所詮"], ["ど", "の", "みち"], ["どの", "道"], ["どっちみち"], ["どっち道"], ["この", "よう", "に"], ["こうして"], ["いずれ", "に", "せ", "よ"], ["いずれ", "に", "し", "て", "も"], ["どちら", "に", "せ", "よ"], ["どっち", "に", "し", "て", "も"], ["どっち", "に", "せ", "よ"], ["どちら", "に", "し", "て", "も"], ["とも", "あれ"], ["いじょう", "の", "よう", "に"], ["以上", "の", "よう", "に"], ["たしか", "に"], ["確か", "に"], ["いっぽう", "で"], ["一方", "で"], ["いっぽう", "で", "は"], ["一方", "で", "は"], ["たほう", "で"], ["他方", "で"], ["たほう", "で", "は"], ["他方", "で", "は"], ["かり", "に"], ["仮", "に"], ["た", "とえ"], ["よしんば"], ["と", "する", "と"], ["とすれ", "ば"], ["し", "から", "ば"], ["に", "も", "かかわらず"], ["に", "も", "拘わらず"], ["といえども"], ["と", "言え", "ど", "も"], ["といって", "も"], ["と言っ", "て", "も"], ["と", "はいう", "もの", "の"], ["と", "は", "言う", "もの", "の"], ["こと", "に", "は"], ["まも", "なく"], ["やが", "て"], ["と", "たん", "に"], ["つづい", "て"], ["続い", "て"], ["ひきつづき"], ["引き続き"], ["かと", "おも", "う", "と"], ["かと", "思う", "と"], ["かと", "おもえば"], ["かと", "思え", "ば"], ["かと", "おもうまも", "なく"], ["かと", "思う間も", "なく"], ["かと", "思う", "まも", "なく"], ["と", "たん"], ["そのしゅんかん"], ["その", "瞬間"], ["どうじ", "に"], ["同", "時に"], ["まし", "て"], ["まし", "て", "や"], ["これ", "に", "たいし", "て"], ["これ", "に対して"], ["もちろん"], ["も", "とより"], ["それ", "だ", "から"], ["これ", "だ", "から"], ["とうぜん"], ["当然"]];
var Rz = {};
Object.defineProperty(Rz, "__esModule", {
  value: !0
});
Rz.default = void 0;
Rz.default = {
  lengthCriteria: 7
};
var Dz = {};
Object.defineProperty(Dz, "__esModule", {
  value: !0
});
Dz.default = void 0;
Dz.default = {
  defaultAnalysis: {
    recommendedMinimum: 600,
    slightlyBelowMinimum: 500,
    belowMinimum: 400,
    veryFarBelowMinimum: 200
  },
  defaultCornerstone: {
    recommendedMinimum: 1800,
    slightlyBelowMinimum: 800,
    belowMinimum: 600,
    scores: {
      belowMinimum: -20,
      farBelowMinimum: -20
    }
  },
  taxonomyAssessor: {
    recommendedMinimum: 60,
    slightlyBelowMinimum: 20,
    veryFarBelowMinimum: 1
  },
  productSEOAssessor: {
    recommendedMinimum: 400,
    slightlyBelowMinimum: 300,
    belowMinimum: 200,
    veryFarBelowMinimum: 100
  },
  productCornerstoneSEOAssessor: {
    recommendedMinimum: 800,
    slightlyBelowMinimum: 600,
    belowMinimum: 400,
    scores: {
      belowMinimum: -20,
      farBelowMinimum: -20
    }
  },
  collectionSEOAssessor: {
    recommendedMinimum: 60,
    slightlyBelowMinimum: 20,
    veryFarBelowMinimum: 1
  },
  collectionCornerstoneSEOAssessor: {
    recommendedMinimum: 60,
    slightlyBelowMinimum: 20,
    veryFarBelowMinimum: 1
  }
};
var Nz = {};
Object.defineProperty(Nz, "__esModule", {
  value: !0
});
Nz.default = void 0;
Nz.default = {
  defaultPageParams: {
    recommendedLength: 300,
    maximumRecommendedLength: 400
  },
  productPageParams: {
    recommendedLength: 140,
    maximumRecommendedLength: 200
  }
};
var Lz = {};
Object.defineProperty(Lz, "__esModule", {
  value: !0
});
Lz.default = void 0;
Lz.default = {
  transitionWords: 400,
  keyphraseDensity: 200
};
var Mz = {};
Object.defineProperty(Mz, "__esModule", {
  value: !0
});
Mz.default = void 0;
Mz.default = {
  recommendedLength: 40
};
var qz = {};
Object.defineProperty(qz, "__esModule", {
  value: !0
});
qz.default = void 0;
qz.default = {
  defaultParameters: {
    parameters: {
      recommendedMaximumLength: 600,
      slightlyTooMany: 600,
      farTooMany: 700
    },
    applicableIfTextLongerThan: 600
  },
  cornerstoneParameters: {
    parameters: {
      recommendedMaximumLength: 500,
      slightlyTooMany: 500,
      farTooMany: 600
    },
    applicableIfTextLongerThan: 500
  }
};
var Fz = {};
Object.defineProperty(Fz, "__esModule", {
  value: !0
});
Fz.default = void 0;
Fz.default = {
  defaultAnalysis: {
    parameters: {
      recommendedMaximum: 12,
      acceptableMaximum: 18
    }
  },
  productPages: {
    parameters: {
      recommendedMinimum: 8,
      recommendedMaximum: 12,
      acceptableMaximum: 18,
      acceptableMinimum: 4
    }
  }
};
var o$ = {};
Object.defineProperty(o$, "__esModule", {
  value: !0
});
o$.default = NVa;
var CVa = K, PVa = Bz(Zo), RVa = Bz(au), DVa = Bz($z), gR = Bz(vc);
function Bz(e) {
  return e && e.__esModule ? e : { default: e };
}
function mR(e, a) {
  if (gR.default.includes(e[0]) && gR.default.includes(e[e.length - 1]))
    return [[e]];
  const t = (0, RVa.default)(e);
  if (t.length === 0)
    return [[]];
  const n = (0, CVa.get)(a.getData("morphology"), "ja", !1);
  return t.map((r) => n ? (0, DVa.default)(r, n) : [r]);
}
function NVa(e, a) {
  let t = e.getKeyword().toLocaleLowerCase("ja").trim();
  t = t.replace(/\s/g, "");
  const n = (0, PVa.default)(e.getSynonyms().toLocaleLowerCase("ja").trim()), r = mR(t, a), o = n.map((l) => mR(l, a));
  return {
    keyphraseForms: r,
    synonymsForms: o
  };
}
var l$ = {};
Object.defineProperty(l$, "__esModule", {
  value: !0
});
l$.default = qVa;
var LVa = DF(hl), MVa = DF(jz);
function DF(e) {
  return e && e.__esModule ? e : { default: e };
}
function qVa(e) {
  const a = (0, LVa.default)(e.getKeyword());
  return {
    keyphraseLength: (0, MVa.default)(a),
    // Returns empty array because we don't take function words into account for Japanese keyphrase length calculations.
    functionWords: []
  };
}
var d$ = {};
Object.defineProperty(d$, "__esModule", {
  value: !0
});
d$.default = WVa;
var FVa = BVa(xz);
function BVa(e) {
  return e && e.__esModule ? e : { default: e };
}
function WVa(e) {
  return {
    text: e.getText(),
    count: (0, FVa.default)(e.getText()),
    unit: "character"
  };
}
var u$ = {};
Object.defineProperty(u$, "__esModule", {
  value: !0
});
u$.default = XVa;
var UVa = K, HVa = ks(), GVa = nu(bc()), VVa = nu(ni), KVa = nu(au), fR = nu(Az), YVa = nu(tu), QVa = nu(hl);
function nu(e) {
  return e && e.__esModule ? e : { default: e };
}
function hR(e, a) {
  if (a === 0)
    return a;
  let t = e.substring(0, a);
  return t = (0, QVa.default)(t), t = t.filter((n) => !YVa.default.includes(n)), (0, UVa.isEmpty)(t) ? 0 : a;
}
function XVa(e, a) {
  const t = e.getTitle();
  let n = e.getKeyword();
  const r = {
    allWordsFound: !1,
    position: -1,
    exactMatchKeyphrase: !1
  }, o = (0, VVa.default)(n);
  if (o.exactMatchRequested) {
    if (r.exactMatchKeyphrase = !0, !t.includes(o.keyphrase))
      return r;
    n = (0, KVa.default)(o.keyphrase);
    const c = (0, GVa.default)(t, n, "ja", fR.default);
    return c.matches.length === n.length && (r.allWordsFound = !0, r.position = hR(t, c.position)), r;
  }
  const l = a.getResearch("morphology").keyphraseForms, u = (0, HVa.findWordFormsInString)(l, t, "ja", fR.default);
  return u.percentWordMatches === 100 && (r.allWordsFound = !0, r.position = hR(t, u.position)), r;
}
Object.defineProperty(n$, "__esModule", {
  value: !0
});
var NF = n$.default = void 0, ZVa = ee, JVa = Ra(Az), eKa = Ra(hl), aKa = Ra(r$), tKa = Ra(jz), nKa = Ra(xz), rKa = Ra(i$), sKa = Ra(au), iKa = Ra(Sz), oKa = Ra(Iz), lKa = Ra(Cz), dKa = Ra(tu), uKa = Ra(Pz), cKa = Ra(Rz), pKa = Ra(Dz), gKa = Ra(Nz), mKa = Ra(Lz), fKa = Ra(Mz), hKa = Ra(qz), yKa = Ra(Fz), zKa = Ra(Kc), bKa = Ra(o$), wKa = Ra(l$), vKa = Ra(d$), kKa = Ra(u$);
function Ra(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: _Ka
} = ZVa.languageProcessing;
let EKa = class extends _Ka {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, delete this.defaultResearches.getPassiveVoiceResult, delete this.defaultResearches.keywordCountInSlug, Object.assign(this.config, {
      language: "ja",
      firstWordExceptions: lKa.default,
      functionWords: dKa.default,
      transitionWords: uKa.default,
      topicLength: cKa.default,
      textLength: pKa.default,
      paragraphLength: gKa.default,
      assessmentApplicability: mKa.default,
      sentenceLength: fKa.default,
      keyphraseLength: yKa.default,
      subheadingsTooLong: hKa.default,
      countCharacters: !0,
      metaDescriptionLength: zKa.default
    }), Object.assign(this.helpers, {
      matchWordCustomHelper: JVa.default,
      getWordsCustomHelper: eKa.default,
      getContentWords: sKa.default,
      customGetStemmer: aKa.default,
      wordsCharacterCount: tKa.default,
      customCountLength: nKa.default,
      matchTransitionWordsHelper: rKa.default,
      memoizedTokenizer: iKa.default,
      splitIntoTokensCustom: oKa.default
    }), Object.assign(this.defaultResearches, {
      morphology: bKa.default,
      keyphraseLength: wKa.default,
      wordCountInText: vKa.default,
      findKeyphraseInSEOTitle: kKa.default
    });
  }
};
NF = n$.default = EKa;
var c$ = {}, Wz = {};
Object.defineProperty(Wz, "__esModule", {
  value: !0
});
Wz.default = void 0;
Wz.default = [
  // Indefinite articles:
  "ei",
  "et",
  // Numbers 1-10:
  "en",
  "ett",
  "to",
  "tre",
  "fire",
  "fem",
  "seks",
  "sju",
  "syv",
  "åtte",
  "ni",
  "ti",
  // Demonstrative pronouns:
  "denne",
  "dette",
  "disse",
  "den",
  "det",
  "de"
];
var ei = {}, Or = {};
Object.defineProperty(Or, "__esModule", {
  value: !0
});
Or.singleWords = Or.multipleWords = Or.default = Or.allWords = void 0;
const AKa = Or.singleWords = ["også", "fortsatt", "derimot", "derfor", "faktisk", "endelig", "likevel", "følgelig", "likeså", "dessuten", "selvsagt", "deretter", "men", "for", "fordi", "mens", "bare", "da", "dog", "enn", "ettersom", "før", "hvorpå", "inntil", "når", "omennskjønt", "samt", "som", "uaktet", "pga.", "uansett", "foruten", "siden", "m.a.o", "attpåtil", "derved", "følgelig", "forøvrig", "iallfall", "imidlertid", "især", "likefullt", "likeledes", "likeså", "likevel", "omsider", "samstundes", "samtidig", "sikkert", "således", "såleis", "særs", "ellers", "enda", "dersom", "skjønt", "samme", "eansett", "etterpå", "generelt", "herav", "imens"], TKa = Or.multipleWords = ["på den andre siden", "for øyeblikket", "i stedet", "i mellomtiden", "til slutt", "i tillegg", "i tilfelle", "med mindre", "om enn", "om to strakser", "selv om", "på grunn av", "med hensyn til", "for eksempel", "en gang", "fremfor alt", "i alle fall", "i et nøtteskall", "i hvert fall", "i mellomtiden", "med andre ord", "til dømes", "for øvrig", "i ettertid", "så langt", "på tross av", "til tross for", "til tross for at ", "for at", "slik at", "i løpet av", "så at", "slik som", "så lenge", "så ofte", "så snart", "etter hvert som", "så fremt", "så sant", "i fall", "for så vidt som", "fordi om", "enda om", "trass i at", "hvor så", "hva enn", "hvor enn", "sånn at", "som om", "så som", "rett og slett ", "på samme måte", "etter hvert", "av dette følger", "i mellomtiden", "i dette tilfellet", "i motsetning til", "som et resultat", "like viktig", "på grunn av det", "på den positive siden", "på den negative siden", "tvert imot", "kort oppsummert", "i begge tilfeller"], $Ka = Or.allWords = AKa.concat(TKa);
Or.default = $Ka;
Object.defineProperty(ei, "__esModule", {
  value: !0
});
ei.default = ei.cannotBeBetweenPassiveAuxiliaryAndParticiple = ei.all = void 0;
var jKa = Or, LF = xKa(Ba);
function xKa(e) {
  return e && e.__esModule ? e : { default: e };
}
const SKa = ["ei", "et"], OKa = ["null", "en", "ett", "ene", "to", "tre", "fire", "fem", "seks", "syv", "åtte", "ni", "ti", "elleve", "tolv", "tretten", "fjorten", "femten", "seksten", "sytten", "atten", "nitten", "tjue", "tyve", "tjueen", "enogtyve", "tretti", "tredve", "førti", "førr", "femti", "seksti", "sytti", "åtti", "nitti", "hundre", "hundreogen", "etthundreogen", "tohundre", "tusen", "tusenogen", "million", "millioner", "milliard", "milliarder"], IKa = ["nullte", "første", "først", "sekund", "tredje", "fjerde", "femte", "sjette", "syvende", "åttende", "niende", "tiende", "ellevte", "tolvte", "trettende", "fjortende", "femtende", "sekstende", "syttende", "åttende", "nittende", "tjuende", "tjueførst", "tjueførste", "trettiende", "førtiende", "femtiende", "sekstiende", "syttiende", "åttiende", "nittiende", "hundrede", "hundreogfemtiende", "to hundrede", "tusende", "millionte", "millardte"], CKa = [
  // Personal pronouns.
  "jeg",
  "du",
  "den",
  "det",
  "vi",
  "de",
  "han",
  "hun",
  "dere",
  "henne",
  "oss",
  "meg",
  "deg",
  "ham",
  "dem",
  // Possessive pronouns.
  "min",
  "din",
  "deres",
  "vår",
  "deres",
  "ditt",
  "mitt",
  "våre",
  "vårt",
  "hans",
  "hennes",
  "dens",
  "dets",
  "egen",
  "egne",
  "mi",
  "di",
  "sin",
  "si",
  "sitt",
  "sine",
  "mine",
  "dine",
  // Demonstrative pronouns. "De", "det" and "den" are among the personal pronouns.
  "denne",
  "dette",
  "disse",
  "slik",
  "slikt",
  "slike",
  "sånn",
  "sånt",
  "sånne",
  "samme",
  // Reciprocal pronouns.
  "hverandre",
  "hvert",
  // Relative pronouns.
  "som"
], PKa = ["hvem", "hvordan", "hvorfor", "hvor", "hva", "hvilken", "hvilket", "hvilke"], RKa = ["mange", "mye", "mang en", "mangt et", "hele", "mer", "ingen", "ingenting", "ikke noen", "ikke noe", "alle", "all", "alt", "allting", "noen", "noe", "flere", "hver", "hvert", "annenhver", "ammethvert", "begge", "sov", "mest", "fleste", "få", "fæst", "færrest", "flere", "flest"], DKa = ["seg", "selv"], NKa = ["ingenting", "annen", "annet", "andre"], LKa = ["sånn", "ved", "mot", "ned", "enn", "over", "inn", "i", "sa", "opp", "der", "fra", "din", "nei", "mellom", "di", "oppe", "av", "med", "til", "å", "på", "du", "uten", "én", "under", "hos", "inne", "gjennom", "unna", "del", "nede", "til", "over", "under", "etter", "kun", "blant", "for", "mellom", "blant"], MKa = ["eller", "hvis", "ja", "et", "som", "i", "og", "både", "men", "mens", "enten", "verken", "at", "om", "da", "når", "før", "idet", "etter at", "siden", "innen", "med det samme", "til", "inntil", "hver gang", "etter hvert som", "så lenge", "så lenge som", "så ofte", "så ofte som", "så snart", "så snart som", "etter", "etterpå", "foran", "tidligere", "fordi", "ettersom", "derfor", "dersom", "hvis", "så fremt", "så sant", "i fall", "i tilfelle", "med mindre", "uten at", "bare", "for så vidt som", "uten at", "uten å", "enda", "fordi om", "enda om", "skjønt", "om enn", "hva så", "trass i at", "hvor så", "samme", "selv om", "hva enn", "til tross for at", "hvor enn", "uansett", "for at", "så", "så at", "slik at", "sånn at", "for at, så", "slik som", "så som", "som om", "enn", "dess", "jo", "desto"], MF = ["tror", "fortelle", "fortell", "fortalte", "tenkte", "tenk"], qKa = ["virkelig", "akkurat", "visst"], qF = ["ha", "har", "hadde", "gjør", "gjøre", "gjorde", "kaller", "kalte", "kalle", "kalla", "virker", "virka", "virke", "virka", "går", "gikk", "gå", "leges", "lages", "legges", "lages", "består", "bestod", "bestå", "bestått", "bety", "betyr"], FKa = [
  // General adjective.
  "helt",
  "andre",
  "litt",
  "lenge",
  "siste",
  "fint",
  "annet",
  "stor",
  "stort",
  "store",
  "neste",
  "lenger",
  "annen",
  "nye",
  "alene",
  "flott",
  "gammel",
  "gammelt",
  "gamle",
  "klart",
  "liten",
  "langt",
  "gamle",
  "dårlig",
  "hyggelig",
  "gode",
  "sånt",
  "nytt",
  "best",
  "lang",
  "små",
  "lot",
  "større",
  "vakker",
  "vakkert",
  "vakre",
  "ny",
  "bra",
  "bedre",
  "grei",
  "greit",
  "greie",
  "høyt",
  "største",
  "størst",
  "slikt",
  "liten",
  "lita",
  "lite",
  "små",
  "mindre",
  "minst",
  "kort",
  "glad",
  "dårlig",
  "ille",
  "ond",
  "vond",
  "verre",
  "verst",
  "eldre",
  "eldst",
  "lang",
  "lengre",
  "lengst",
  "nær",
  "næmerere",
  "nærere",
  "nærmest",
  "nærest",
  "tung",
  "tyngre",
  "tyngst",
  "ung",
  "yngre",
  "yngst",
  "pen",
  // General adverbs.
  "alltid",
  "godt",
  "sammen",
  "tilbake",
  "etter",
  "igjen",
  "bare",
  "så",
  "veldig",
  "bedre",
  "samme",
  "far",
  "eneste",
  "enig",
  "borte",
  "snart",
  "rundt",
  "beste",
  "bort",
  "vekk",
  "nesten",
  "ganske",
  "senere",
  "videre",
  "straks",
  "svært",
  "neste",
  "bak",
  "bakre",
  "bakerst",
  "borte",
  "bortre",
  "bortest",
  "fremme",
  "fremre",
  "fremst",
  "foran",
  "forrest",
  "inne",
  "indre",
  "innerst",
  "midt",
  "midtre",
  "midterst",
  "nede",
  "nedre",
  "nederst",
  "nord",
  "nordre",
  "nordligst",
  "øvre",
  "øverst",
  "sør",
  "søndre",
  "sørligst",
  "vest",
  "vestre",
  "vestligst",
  "øst",
  "østre",
  "østligst",
  "ute",
  "ytre",
  "ytterst",
  "underst",
  "langt",
  "fram",
  "her",
  "der",
  "nok",
  "aldri",
  "ut",
  "ned",
  "nede",
  "bort",
  "innom",
  "ingensteds",
  "sjelden",
  "sjeldnere",
  "sjeldnest",
  "raskt",
  "raskere",
  "raskest",
  "gjerne",
  "heller",
  "helst",
  "dårligere",
  "dårligst",
  "vondt",
  "vondere",
  "vondest",
  "meget",
  "øverst",
  "enda",
  "neppe",
  "nokså",
  "nesten",
  "helt",
  "bitende",
  "aller",
  "ganske",
  "aldeles",
  "derfra",
  "herfra",
  "utenlands",
  "noensteds",
  "oppå",
  "hjemme",
  "hit",
  "dit",
  "vekk",
  "fram",
  "fort",
  "hyggelig",
  "hvorledes",
  "sånn",
  "således",
  "slik",
  "pent",
  "morsomt",
  "akkurat",
  "alt",
  "ofte",
  "nettopp",
  "bestandig",
  "noen gang",
  "noen ganger",
  "fremdeles",
  "ennå",
  "da",
  "sjeldent"
], BKa = ["hei", "fy", "au", "hurra", "uff", "takk", "hm", "fanden", "pokker", "fillern", "åh", "isj", "hallo", "æsj"], WKa = ["g"], UKa = ["år", "året", "går", "dag", "nå", "tid", "tiden", "morgen", "dager", "minutt", "minutter", "dagen", "uke", "uker", "måneder", "stund", "timer", "time", "morges", "ettermiddag", "tidlig", "fjor", "kveld", "natt", "fogårs", "vinter", "sommer", "vår", "høst"], HKa = ["ting", "tingene"], GKa = [
  "ok",
  "okay",
  "ja",
  "jo",
  "jaså",
  "nei",
  "ikke",
  "unnskyld",
  "beklager",
  "herr",
  "altså",
  "grader",
  "grad",
  "kr",
  // Fractions.
  "en halvdel",
  "en halv",
  "to halve",
  "en tredel",
  "tredjedel",
  "to tredeler",
  "tredjedeler",
  "en firedel",
  "fjerdedel",
  "kvart",
  "en trettendedel",
  "en fjortendedel",
  "en promille",
  "en tusendel",
  "halvannen",
  "en og en halv"
], VKa = ei.cannotBeBetweenPassiveAuxiliaryAndParticiple = (0, LF.default)(qF.concat(MF)), KKa = ei.all = (0, LF.default)([].concat(SKa, OKa, IKa, CKa, PKa, RKa, DKa, NKa, LKa, MKa, MF, qKa, qF, FKa, BKa, WKa, UKa, HKa, GKa, VKa, jKa.singleWords));
ei.default = KKa;
var jp = {};
Object.defineProperty(jp, "__esModule", {
  value: !0
});
jp.default = void 0;
jp.default = ["dette", "at", "disse", "på", "unntatt", "for", "fra", "i", "om", "ovenfor", "på tvers", "etter", "mot", "blant", "rundt", "som", "på", "før", "bak", "nedenfor", "under", "siden", "mellom", "utover", "men", "av", "når", "da", "som", "fordi ", "ikke", "og"];
var Uz = {};
Object.defineProperty(Uz, "__esModule", {
  value: !0
});
Uz.default = void 0;
Uz.default = [["både", "og"], ["enten", "eller"], ["verken", "eller"], ["jo", "dess"], ["dess", "dess"], ["jo", "desto"], ["ikke bare", "men"], ["ikke bare", "også"]];
var p$ = {}, g$ = {};
Object.defineProperty(g$, "__esModule", {
  value: !0
});
g$.default = JKa;
const YKa = function(e) {
  let a = e.search(/[aeiouyøåæ][^aeiouyøåæ]/);
  return a !== -1 && (a += 2), a !== -1 && a < 3 && (a = 3), a;
}, QKa = function(e, a, t) {
  const n = e.search(new RegExp(t.externalStemmer.regexSuffixes1a));
  if (n >= a && a !== -1) {
    let l = e.substring(0, n);
    return /ert$/i.test(l) && (l = l.slice(0, -1)), l;
  }
  const r = e.search(/s$/), o = e.search(new RegExp(t.externalStemmer.regexSuffixes1b));
  return r >= a && o !== -1 && a !== -1 ? e.slice(0, -1) : e;
}, XKa = function(e, a, t) {
  return e.search(new RegExp(t.externalStemmer.regexSuffixes2)) >= a && a !== -1 && (e = e.slice(0, -1)), e;
}, ZKa = function(e, a, t) {
  const n = e.search(new RegExp(t.externalStemmer.regexSuffixes3));
  return n >= a && a !== -1 && (e = e.substring(0, n)), e;
};
function JKa(e, a) {
  let t = -1;
  for (const n of [QKa, XKa, ZKa])
    t = YKa(e), e = n(e, t, a);
  return e;
}
Object.defineProperty(p$, "__esModule", {
  value: !0
});
p$.default = sYa;
var eYa = K, aYa = ee, tYa = nYa(g$);
function nYa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: rYa
} = aYa.languageProcessing;
function sYa(e) {
  const a = (0, eYa.get)(e.getData("morphology"), "nb", !1);
  return a ? (t) => (0, tYa.default)(t, a) : rYa;
}
var m$ = {}, Hz = {}, f$ = {}, Gz = {};
Object.defineProperty(Gz, "__esModule", {
  value: !0
});
Gz.default = void 0;
Gz.default = ["villet", "bruket", "finnet", "legget", "viset", "vitet", "ligget", "ønsket", "holdet", "spillet", "laget", "velget", "tenket", "menet", "trenget", "begynnet", "kjennet", "kjøpet", "startet", "finnest", "leset", "følget", "jobbet", "gjeldet", "sendet", "fortellet", "skremt", "prøvd", "sittet", "høret", "hjelpet", "bygget", "klaret", "kjøret", "føret", "snakket", "øket", "tilbyt", "skapet", "håpet", "vinnet", "møtet", "delet", "følet", "utviklet", "betydd", "kallet", "bidrat", "læret", "selget", "spiset", "opplevet", "fortsettet", "passet", "drivet", "krevet", "fungeret", "levet", "leveret", "virket", "betalet", "forståt", "deltat", "benyttet", "søket", "endret", "spørret", "vurderet", "stillet", "handlet", "inkluderet", "åpnet", "reiset", "inneholdet", "bestemmet", "anbefalet", "trekket", "ventet", "samlet", "flyttet", "nevnet", "gjennomføret", "husket", "luret", "lurt", "sikret", "begynt", "beståt", "reduseret", "slippet", "hentet", "regnet", "svaret", "knyttet", "utføret", "hetet", "merket", "baseret", "trenet", "fallet", "meldet", "ledet", "fyllet", "produseret", "dekket", "endet", "mistet", "gledet", "unngåt", "sørget", "behandlet", "vokset", "mottat", "registreret", "beskrivet", "arrangeret", "forsøket", "etableret", "påvirket", "skjønnet", "fjernet", "fødet", "sjekket", "forklaret", "treffet", "stoppet", "bestillet", "oppnåt", "plasseret", "avsluttet", "henget", "løpet", "forventet", "sluttet", "presenteret", "elsket", "slitet", "kostet", "planlegget", "bæret", "besøket", "glemmet", "støttet", "byttet", "kastet", "testet", "nytet", "oppdaget", "oppståt", "tapet", "brytet", "løset", "styret", "fornøyet", "innebæret", "rettet", "representeret", "tilpasset", "publiseret", "omfattet", "utsettet", "sammenlignet", "tillatet", "sovet", "dannet", "hevdet", "tjenet", "inviteret", "forsvinnet", "manglet", "drepet", "utgjøret", "skillet", "beskyttet", "stemmet", "varieret", "drikket", "opprettet", "inngåt", "forbedret", "ødelegget", "satset", "dukket", "målet", "lastet", "foreslåt", "diskuteret", "ringet", "studeret", "interesseret", "styrket", "begrenset", "varet", "koblet", "skadet", "forlatet", "forlatt", "lovet", "foretat", "skaffet", "foregåt", "godkjennet", "koset", "sparet", "hørest", "hindret", "vedtat", "bringet", "bekreftet", "oppdateret", "anset", "synget", "fokuseret", "forårsaket", "spret", "erstattet", "skytet", "serveret", "kombineret", "kjempet", "latet", "antat", "blandet", "byt", "snut", "preget", "fordelet", "ansettet", "takket", "faret", "utvidet", "skyldest", "minnet", "trykket", "lanseret", "kontaktet", "beholdet", "letet", "forberedet", "festet", "innføret", "undersøket", "brennet", "malet", "medføret", "beveget", "stikket", "skiftet", "hoppet", "involveret", "egnet", "overtat", "monteret", "tålet", "avgjøret", "lykkest", "plukket", "beregnet", "utgit", "peket", "håndteret", "tegnet", "langet", "uttalet", "lagret", "følest", "installeret", "feiret", "opprettholdet", "oppfordret", "reageret", "kontrolleret", "understreket", "havnet", "vasket", "befinnet", "fullføret", "leket", "lidet", "defineret", "omtalet", "løftet", "oppgit", "rammet", "samarbeidet", "fanget", "typet", "opplyset", "strekket", "dreiet", "stenget", "utarbeidet", "fremmet", "overføret", "pleiet", "oppfyllet", "inspireret", "engasjeret", "utnyttet", "oppføret", "organiseret", "smaket", "reddet", "scoret", "hendet", "bekymret", "kuttet", "påpeket", "rekket", "forandret", "aksepteret", "ordnet", "nektet", "presset", "passeret", "savnet", "nærmet", "pakket", "smilet", "møtest", "rapporteret", "dømmet", "oppfattet", "tilhøret", "stiget", "tildelet", "talet", "tydet", "greiet", "markeret", "ivaretat", "fortjenet", "vennet", "leiet", "lånet", "eksisteret", "dokumenteret", "klikket", "vendet", "tvinget", "kommenteret", "innrømmet", "forholdet", "landet", "våknet", "funket", "formidlet", "identifiseret", "tellet", "utstyret", "gratuleret", "formet", "angripet", "overrasket", "foreligget", "hevet", "tørret", "foretrekket", "garanteret", "justeret", "prioriteret", "lyttet", "gjentat", "imponeret", "resulteret", "skjulet", "trengest", "rivet", "trivest", "lukket", "uttrykket", "overlevet", "klaget", "informeret", "tilbringet", "postet", "giftet", "designet", "avsløret", "varslet", "fremståt", "blogget", "innset", "stolet", "opereret", "forsvaret", "forutsettet", "gripet", "ryddet", "utdannet", "skrut", "veiet", "krysset", "utfordret", "gjennomgåt", "reguleret", "støtet", "senket", "lignet", "bevaret", "angit", "utforsket", "tørket", "syklet", "forsterket", "tolket", "slappet", "investeret", "fikset", "berøret", "beviset", "ropet", "koket", "forblit", "opptret", "vekket", "fastsettet", "strikket", "fryktet", "blåset", "avholdet", "drømmet", "syt", "forekommet", "forbyt", "pratet", "observeret", "taklet", "påståt", "konkurreret", "anet", "rennet", "rit", "signeret", "forhindret", "ankommet", "konkluderet", "sporet", "stiftet", "relateret", "forbindet", "avtalet", "varmet", "bitet", "påføret", "bindet", "fellet", "kvalifiseret", "refereret", "utformet", "avviset", "klippet", "overbeviset", "blat", "plaget", "øvet", "orket", "behøvet", "godtat", "beklaget", "henviset", "kommuniseret", "integreret", "seilet", "betraktet", "danset", "giddet", "synket", "lettet", "tilrettelegget", "finansieret", "stimuleret", "bedret", "forebygget", "avhenget", "skuffet", "tilsit", "rullet", "lestt", "analyseret", "hilset", "bosettet", "stjelet", "tilsvaret", "introduseret", "dyrket", "aktiveret", "gravet", "tret", "disset", "farget", "anvendet", "inntat", "oversettet", "hatet", "konsentreret", "utløset", "reflekteret", "grunnlegget", "pustet", "opplevest", "kritiseret", "anerkjennet", "avdekket", "svekket", "slettet", "gjenståt", "hvilet", "redigeret", "kåret", "steket", "røret", "låset", "advaret", "risikeret", "renset", "gråtet", "knuset", "rykket", "underviset", "skjæret", "motiveret", "luktet", "domineret", "fisket", "biståt", "seest", "åpenbaret", "tilføret", "tilknyttet", "påviset", "besluttet", "kartlegget", "filmet", "ytet", "pågåt", "kikket", "gjemmet", "annonseret", "logget", "omhandlet", "returneret", "røyket", "pålegget", "tipset", "tippet", "plantet", "fremstillet", "puttet", "irriteret", "tennet", "stanset", "utøvet", "indikeret", "noteret", "tiltrekket", "fryset", "pyntet", "klatret", "lyset", "oppgraderet", "pusset", "slenget", "fraktet", "fristet", "stammet", "skremmet", "antydet", "utnevnet", "videreføret", "forsket", "vandret", "tilsettet", "oppsøket", "fattet", "svinget", "forhandlet", "skrevet", "lønnet", "stryket", "suget", "viet", "digget", "siktet", "huset", "repareret", "erfaret", "praktiseret", "badet", "forlenget", "baket", "straffet", "realiseret", "stresset", "skrytet", "intervjuet", "flytet", "bekjempet", "illustreret", "bøyet", "droppet", "iverksettet", "ladet", "mistenket", "sovnet", "forpliktet", "tømmet", "fremhevet", "dempet", "tvilet", "begåt", "orienteret", "overvåket", "fastslåt", "banket", "løsnet", "tilfredsstillet", "kopieret", "etterfølget", "rommet", "argumenteret", "angret", "kulet", "drøftet", "sparket", "begrunnet", "betegnet", "flyktet", "erklæret", "oppsummeret", "forelsket", "respekteret", "lydet", "låtet", "avklaret", "isoleret", "smittet", "anslåt", "hellet", "priset", "smøret", "genereret", "oppbevaret", "innledet", "utelukket", "belyset", "omgit", "vektlegget", "listet", "overlatet", "tittet", "dritet", "debuteret", "roet", "konstrueret", "administreret", "gjengit", "ryket", "nomineret", "svømmet", "smeltet", "offentliggjøret", "etterlatet", "skinnet", "smellet", "skriket", "forvaltet", "presteret", "spesialiseret", "siget", "forsikret", "dateret", "klemmet", "forstyrret", "toppet", "skyvet", "linket", "matchet", "ridet", "videreutviklet", "fremgåt", "avgit", "fornyet", "limet", "raset", "spat", "balanseret", "frigjøret", "siteret", "forestillet", "konstateret", "jaktet", "grunnet", "veiledet", "gjenopprettet", "angåt", "besvaret", "sammenliknet", "innhentet", "ristet", "rengjøret", "litet", "kompliseret", "utredet", "nyttet", "arresteret", "moret", "betjenet", "booket", "demonstreret", "strømmet", "anmeldet", "dekoreret", "mestret", "vedlikeholdet", "springet", "erkjennet", "oppholdet", "avviklet", "fotograferet", "parkeret", "vitnet", "sviktet", "rekrutteret", "importeret", "elimineret", "oppmuntret", "belønnet", "blokkeret", "presiseret", "markedsføret", "kjennetegnet", "høstet", "kjennest", "lokaliseret", "våget", "overset", "innstillet", "utmerket", "gjenspeilet", "henvendet", "lokket", "sukket", "utstedet", "innehat", "utbetalet", "rangeret", "avbrytet", "evalueret", "jaget", "hivet", "sprekket", "døpet", "omsettet", "sorteret", "slåsst", "karakteriseret", "fremføret", "rundet", "bemerket", "underlegget", "korresponderet", "verdsettet", "konverteret", "formuleret", "forfølget", "utbret", "disponeret", "avanseret", "strammet", "implementeret", "opparbeidet", "kysset", "korrigeret", "blomstret", "innvilget", "ofret", "knekket", "filet", "matet", "forsinket", "forenet", "reserveret", "spennet", "tilsendet", "transporteret", "vannet", "stavet", "belastet", "forenklet", "skreddersyt", "etterlyset", "skyldet", "spåt", "dyttet", "timet", "rotet", "nedlegget", "dettet", "kvittet", "innredet", "kortet", "motsettet", "lindret", "bremset", "frelset", "foret", "gjenkjennet", "opphevet", "sniket", "tallet", "absorberet", "lekket", "doblet", "distribueret", "synliggjøret", "feilet", "forsynet", "bearbeidet", "ignoreret", "unnet", "forkynnet", "tråkket", "assosieret", "tilegnet", "utviset", "nedsettet", "diagnostiseret", "framståt", "heiet", "planet", "anget", "evnet", "herjet", "sklit", "misforståt", "forbeholdet", "begeistret", "avsettet", "fyret", "oset", "kompenseret", "overstiget", "tilset", "oppkallet", "krypet", "brettet", "bevilget", "skildret", "forvandlet", "minsket", "rømmet", "klassifiseret", "anlegget", "lyvet", "sprenget", "overnattet", "innfrit", "spørrest", "maktet", "forverret", "turet", "stellet", "klargjøret", "arvet", "hemmet", "ledest", "skyllet", "nøyet", "pumpet", "tillegget", "hyllet", "tillet", "behersket", "skjerpet", "berømmet", "vernet", "forankret", "luftet", "svelget", "innkallet", "kunngjøret", "luket", "opphøret", "headet", "vekslet", "fratat", "suppleret", "innlemmet", "trillet", "lenket", "boret", "avlyset", "sponset", "driftet", "medvirket", "motvirket", "ferdigstillet", "grenset", "sprettet", "gjestet", "regisseret", "protesteret", "anklaget", "gjettet", "etterspørret", "duket", "stemplet", "koordineret", "avtat", "oppnevnet", "omkommet", "overholdet", "printet", "misbruket", "forlanget", "dedikeret", "roset", "unnskyldet", "utdelet", "såret", "sertifiseret", "oppløset", "provoseret", "forvirret", "øset", "begravet", "overgåt", "påtat", "helbredet", "stirret", "erobret", "spekuleret", "skiltet", "mobbet", "rustet", "nikket", "gruet", "bommet", "innlegget", "utpeket", "surfet", "kranglet", "tilgit", "utdypet", "sammensettet", "hakket", "fremkommet", "strevet", "igangsettet", "hersket", "brekket", "bristet", "bydet", "draget", "flyget", "fnyset", "fyket", "glippet", "grinet", "gyset", "gytet", "gyvet", "hogget", "hugget", "klinget", "klypet", "klyvet", "knipet", "kommet", "kvedet", "kvekket", "kveppet", "latet", " lyget", "lyvet", "nyset", "pipet", "ridet", "settet", "skitet", "skjelvet", "skridet", "skrivet", "skvettet", "slippet", "smyget", "snytet", "spinnet", "stridet", "supet", "sverget", "sverjet", "ljuget", "sviket", "svinnet", "sleppet", "tigget", "viket", "villt", "brukt", "finnt", "leggt", "vist", "vitt", "liggt", "ønskt", "holdt", "spillt", "lagt", "velgt", "tenkt", "ment", "trengt", "begynnt", "kjennt", "kjøpt", "startt", "finnes", "lest", "følgt", "jobbt", "gjeldt", "sendt", "fortellt", "sitt", "hørt", "hjelpt", "byggt", "klart", "kjørt", "ført", "snakkt", "økt", "tilby", "skapt", "håpt", "vinnt", "møtt", "delt", "følt", "utviklt", "bety", "kallt", "bidra", "lært", "selgt", "spist", "opplevt", "fortsett", "passt", "drivt", "krevt", "fungert", "levt", "levert", "virkt", "betalt", "forstå", "delta", "benytt", "søkt", "endrt", "spørrt", "vurdert", "stillt", "handlt", "inkludert", "åpnt", "reist", "inneholdt", "bestemmt", "anbefalt", "trekkt", "ventt", "samlt", "flytt", "nevnt", "gjennomført", "huskt", "lurt", "sikrt", "bestå", "redusert", "slippt", "hentt", "regnt", "svart", "knytt", "utført", "hett", "merkt", "basert", "trent", "fallt", "meldt", "ledt", "fyllt", "produsert", "dekkt", "endt", "mistt", "gledt", "unngå", "sørgt", "behandlt", "vokst", "motta", "registrert", "beskrivt", "arrangert", "forsøkt", "etablert", "påvirkt", "skjønnt", "fjernt", "født", "sjekkt", "forklart", "trefft", "stoppt", "bestillt", "oppnå", "plassert", "avslutt", "hengt", "løpt", "forventt", "slutt", "presentert", "elskt", "slitt", "kostt", "planleggt", "bært", "besøkt", "glemmt", "støtt", "bytt", "kastt", "testt", "nytt", "oppdagt", "oppstå", "tapt", "brytt", "løst", "styrt", "fornøyt", "innebært", "rett", "representert", "tilpasst", "publisert", "omfatt", "utsett", "sammenlignt", "tillatt", "sovt", "dannt", "hevdt", "tjent", "invitert", "forsvinnt", "manglt", "drept", "utgjørt", "skillt", "beskytt", "stemmt", "variert", "drikkt", "opprett", "inngå", "forbedrt", "ødeleggt", "satst", "dukkt", "målt", "lastt", "foreslå", "diskutert", "ringt", "studert", "interessert", "styrkt", "begrenst", "vart", "koblt", "skadt", "forlatt", "lovt", "foreta", "skafft", "foregå", "godkjennt", "kost", "spart", "høres", "hindrt", "vedta", "bringt", "bekreftt", "oppdatert", "anst", "syngt", "fokusert", "forårsakt", "sprt", "erstatt", "skytt", "servert", "kombinert", "kjempt", "latt", "anta", "blandt", "by", "snu", "pregt", "fordelt", "ansett", "takkt", "fart", "utvidt", "skyldes", "minnt", "trykkt", "lansert", "kontaktt", "beholdt", "lett", "forberedt", "festt", "innført", "undersøkt", "brennt", "malt", "medført", "bevegt", "stikkt", "skiftt", "hoppt", "involvert", "egnt", "overta", "montert", "tålt", "avgjørt", "lykkes", "plukkt", "beregnt", "utgi", "pekt", "håndtert", "tegnt", "langt", "uttalt", "lagrt", "føles", "installert", "feirt", "opprettholdt", "oppfordrt", "reagert", "kontrollert", "understrekt", "havnt", "vaskt", "befinnt", "fullført", "lekt", "lidt", "definert", "omtalt", "løftt", "oppgi", "rammt", "samarbeidt", "fangt", "typt", "opplyst", "strekkt", "dreit", "stengt", "utarbeidt", "fremmt", "overført", "pleit", "oppfyllt", "inspirert", "engasjert", "utnytt", "oppført", "organisert", "smakt", "reddt", "scort", "hendt", "bekymrt", "kutt", "påpekt", "rekkt", "forandrt", "akseptert", "ordnt", "nektt", "presst", "passert", "savnt", "nærmt", "pakkt", "smilt", "møtes", "rapportert", "dømmt", "oppfatt", "tilhørt", "stigt", "tildelt", "talt", "tydt", "greit", "markert", "ivareta", "fortjent", "vennt", "leit", "lånt", "eksistert", "dokumentert", "klikkt", "vendt", "tvingt", "kommentert", "innrømmt", "forholdt", "landt", "våknt", "funkt", "formidlt", "identifisert", "tellt", "utstyrt", "gratulert", "formt", "angript", "overraskt", "foreliggt", "hevt", "tørrt", "foretrekkt", "garantert", "justert", "prioritert", "lytt", "gjenta", "imponert", "resultert", "skjult", "trenges", "rivt", "trives", "lukkt", "uttrykkt", "overlevt", "klagt", "informert", "tilbringt", "postt", "giftt", "designt", "avslørt", "varslt", "fremstå", "bloggt", "innst", "stolt", "operert", "forsvart", "forutsett", "gript", "ryddt", "utdannt", "skru", "veit", "krysst", "utfordrt", "gjennomgå", "regulert", "støtt", "senkt", "lignt", "bevart", "angi", "utforskt", "tørkt", "syklt", "forsterkt", "tolkt", "slappt", "investert", "fikst", "berørt", "bevist", "ropt", "kokt", "forbli", "opptrt", "vekkt", "fastsett", "strikkt", "fryktt", "blåst", "avholdt", "drømmt", "sy", "forekommt", "forby", "pratt", "observert", "taklt", "påstå", "konkurrert", "ant", "rennt", "ri", "signert", "forhindrt", "ankommt", "konkludert", "sport", "stiftt", "relatert", "forbindt", "avtalt", "varmt", "bitt", "påført", "bindt", "fellt", "kvalifisert", "referert", "utformt", "avvist", "klippt", "overbevist", "bla", "plagt", "øvt", "orkt", "behøvt", "godta", "beklagt", "henvist", "kommunisert", "integrert", "seilt", "betraktt", "danst", "giddt", "synkt", "lett", "tilretteleggt", "finansiert", "stimulert", "bedrt", "forebyggt", "avhengt", "skufft", "tilsi", "rullt", "lest", "analysert", "hilst", "bosett", "stjelt", "tilsvart", "introdusert", "dyrkt", "aktivert", "gravt", "trt", "disst", "fargt", "anvendt", "innta", "oversett", "hatt", "konsentrert", "utløst", "reflektert", "grunnleggt", "pustt", "oppleves", "kritisert", "anerkjennt", "avdekkt", "svekkt", "slett", "gjenstå", "hvilt", "redigert", "kårt", "stekt", "rørt", "låst", "advart", "risikert", "renst", "grått", "knust", "rykkt", "undervist", "skjært", "motivert", "luktt", "dominert", "fiskt", "bistå", "sees", "åpenbart", "tilført", "tilknytt", "påvist", "beslutt", "kartleggt", "filmt", "ytt", "pågå", "kikkt", "gjemmt", "annonsert", "loggt", "omhandlt", "returnert", "røykt", "påleggt", "tipst", "tippt", "plantt", "fremstillt", "putt", "irritert", "tennt", "stanst", "utøvt", "indikert", "notert", "tiltrekkt", "fryst", "pyntt", "klatrt", "lyst", "oppgradert", "pusst", "slengt", "fraktt", "fristt", "stammt", "skremmt", "antydt", "utnevnt", "videreført", "forskt", "vandrt", "tilsett", "oppsøkt", "fatt", "svingt", "forhandlt", "skrevt", "lønnt", "strykt", "sugt", "vit", "diggt", "siktt", "hust", "reparert", "erfart", "praktisert", "badt", "forlengt", "bakt", "strafft", "realisert", "stresst", "skrytt", "intervjut", "flytt", "bekjempt", "illustrert", "bøyt", "droppt", "iverksett", "ladt", "mistenkt", "sovnt", "forpliktt", "tømmt", "fremhevt", "dempt", "tvilt", "begå", "orientert", "overvåkt", "fastslå", "bankt", "løsnt", "tilfredsstillt", "kopiert", "etterfølgt", "rommt", "argumentert", "angrt", "kult", "drøftt", "sparkt", "begrunnt", "betegnt", "flyktt", "erklært", "oppsummert", "forelskt", "respektert", "lydt", "lått", "avklart", "isolert", "smitt", "anslå", "hellt", "prist", "smørt", "generert", "oppbevart", "innledt", "utelukkt", "belyst", "omgi", "vektleggt", "listt", "overlatt", "titt", "dritt", "debutert", "rot", "konstruert", "administrert", "gjengi", "rykt", "nominert", "svømmt", "smeltt", "offentliggjørt", "etterlatt", "skinnt", "smellt", "skrikt", "forvaltt", "prestert", "spesialisert", "sigt", "forsikrt", "datert", "klemmt", "forstyrrt", "toppt", "skyvt", "linkt", "matcht", "ridt", "videreutviklt", "fremgå", "avgi", "fornyt", "limt", "rast", "spa", "balansert", "frigjørt", "sitert", "forestillt", "konstatert", "jaktt", "grunnt", "veiledt", "gjenopprett", "angå", "besvart", "sammenliknt", "innhentt", "ristt", "rengjørt", "litt", "komplisert", "utredt", "nytt", "arrestert", "mort", "betjent", "bookt", "demonstrert", "strømmt", "anmeldt", "dekorert", "mestrt", "vedlikeholdt", "springt", "erkjennt", "oppholdt", "avviklt", "fotografert", "parkert", "vitnt", "sviktt", "rekruttert", "importert", "eliminert", "oppmuntrt", "belønnt", "blokkert", "presisert", "markedsført", "kjennetegnt", "høstt", "kjennes", "lokalisert", "vågt", "overst", "innstillt", "utmerkt", "gjenspeilt", "henvendt", "lokkt", "sukkt", "utstedt", "inneha", "utbetalt", "rangert", "avbrytt", "evaluert", "jagt", "hivt", "sprekkt", "døpt", "omsett", "sortert", "slåss", "karakterisert", "fremført", "rundt", "bemerkt", "underleggt", "korrespondert", "verdsett", "konvertert", "formulert", "forfølgt", "utbrt", "disponert", "avansert", "strammt", "implementert", "opparbeidt", "kysst", "korrigert", "blomstrt", "innvilgt", "ofrt", "knekkt", "filt", "matt", "forsinkt", "forent", "reservert", "spennt", "tilsendt", "transportert", "vannt", "stavt", "belastt", "forenklt", "skreddersy", "etterlyst", "skyldt", "spå", "dytt", "timt", "rott", "nedleggt", "dett", "kvitt", "innredt", "kortt", "motsett", "lindrt", "bremst", "frelst", "fort", "gjenkjennt", "opphevt", "snikt", "tallt", "absorbert", "lekkt", "doblt", "distribuert", "synliggjørt", "feilt", "forsynt", "bearbeidt", "ignorert", "unnt", "forkynnt", "tråkkt", "assosiert", "tilegnt", "utvist", "nedsett", "diagnostisert", "framstå", "heit", "plant", "angt", "evnt", "herjt", "skli", "misforstå", "forbeholdt", "begeistrt", "avsett", "fyrt", "ost", "kompensert", "overstigt", "tilst", "oppkallt", "krypt", "brett", "bevilgt", "skildrt", "forvandlt", "minskt", "rømmt", "klassifisert", "anleggt", "lyvt", "sprengt", "overnatt", "innfri", "spørres", "maktt", "forverrt", "turt", "stellt", "klargjørt", "arvt", "hemmt", "ledes", "skyllt", "nøyt", "pumpt", "tilleggt", "hyllt", "tillt", "beherskt", "skjerpt", "berømmt", "vernt", "forankrt", "luftt", "svelgt", "innkallt", "kunngjørt", "lukt", "opphørt", "headt", "vekslt", "frata", "supplert", "innlemmt", "trillt", "lenkt", "bort", "avlyst", "sponst", "driftt", "medvirkt", "motvirkt", "ferdigstillt", "grenst", "sprett", "gjestt", "regissert", "protestert", "anklagt", "gjett", "etterspørrt", "dukt", "stemplt", "koordinert", "avta", "oppnevnt", "omkommt", "overholdt", "printt", "misbrukt", "forlangt", "dedikert", "rost", "unnskyldt", "utdelt", "sårt", "sertifisert", "oppløst", "provosert", "forvirrt", "øst", "begravt", "overgå", "påta", "helbredt", "stirrt", "erobrt", "spekulert", "skiltt", "mobbt", "rustt", "nikkt", "grut", "bommt", "innleggt", "utpekt", "surft", "kranglt", "tilgi", "utdypt", "sammensett", "hakkt", "fremkommt", "strevt", "igangsett", "herskt", "brekkt", "bristt", "bydt", "dragt", "flygt", "fnyst", "fykt", "glippt", "grint", "gyst", "gytt", "gyvt", "hoggt", "huggt", "klingt", "klypt", "klyvt", "knipt", "kommt", "kvedt", "kvekkt", "kveppt", "latt", " lygt", "lyvt", "nyst", "pipt", "ridt", "sett", "skitt", "skjelvt", "skridt", "skrivt", "skvett", "slippt", "smygt", "snytt", "spinnt", "stridt", "supt", "svergt", "sverjt", "ljugt", "svikt", "svinnt", "sleppt", "tiggt", "vikt", "bedt", "betydd", "bundet", "bitt", "blitt", "brekket", "brent", "brutt", "bydd", "budt", "båret", "dettet", "dradd", "dratt", "drukket", "dritet", "dritt", "drevet", "ett", "falt", "funnet", "flydd", "fløyet", "flydd", "fløyet", "flytt", "forsvunnet", "fortalt", "frosset", "fått", "fulgt", "gitt", "giddet", "gjeldet", "gjeldt", "gjort", "kvalt", "glidd", "gravd", "gravet", "grint", "grepet", "grått", "gått", "hatt", "hett", "hivd", "hjulpet", "hogget", "hogd", "holdt", "klypt", "kløpet", "knekket", "knekt", "kommet", "krøpet", "latt", "latt", "ledd", "lagt", "ligget", "lydd", "lydt", "løyet", "løpet", "løpt", "nyst", "nytt", "pepet", "rekket", "rekkt", "rent", "ridd", "revet", "røket", "sett", "solgt", "satt", "sagt", "sittet", "skitt", "skjelvet", "skåret", "sklidd", "skreket", "skrevet", "skrytt", "skutt", "skyvd", "skjøvet", "slengt", "sluppet", "slitt", "slått", "smelt", "snytt", "sovet", "sprukket", "sprettet", "sprunget", "spurt", "stukket", "stjålet", "strukket", "strøket", "stått", "likt", "sverga", "sverget", "svoret", "svidd", "sveket", "svunnet", "sunget", "sunket", "tatt", "truffet", "trukket", "tvunget", "tort", "turt", "valgt", "vikt", "vunnet", "visst", "vridd", "vært", "villed", "bruked", "finned", "legged", "vised", "vited", "ligged", "ønsked", "holded", "spilled", "laged", "velged", "tenked", "mened", "trenged", "begynned", "kjenned", "kjøped", "started", "finnesd", "lesed", "følged", "jobbed", "gjelded", "sended", "fortelled", "sitted", "høred", "hjelped", "bygged", "klared", "kjøred", "føred", "snakked", "øked", "tilbyd", "skaped", "håped", "vinned", "møted", "deled", "føled", "utvikled", "betyd", "kalled", "bidrad", "læred", "selged", "spised", "oppleved", "fortsetted", "passed", "drived", "kreved", "fungered", "leved", "levered", "virked", "betaled", "forståd", "deltad", "benytted", "søked", "endred", "spørred", "vurdered", "stilled", "handled", "inkludered", "åpned", "reised", "inneholded", "bestemmed", "anbefaled", "trekked", "vented", "samled", "flytted", "nevned", "gjennomføred", "husked", "lured", "sikred", "beståd", "redusered", "slipped", "hented", "regned", "svared", "knytted", "utføred", "heted", "merked", "basered", "trened", "falled", "melded", "leded", "fylled", "produsered", "dekked", "ended", "misted", "gleded", "unngåd", "sørged", "behandled", "voksed", "mottad", "registrered", "beskrived", "arrangered", "forsøked", "etablered", "påvirked", "skjønned", "fjerned", "føded", "sjekked", "forklared", "treffed", "stopped", "bestilled", "oppnåd", "plassered", "avslutted", "henged", "løped", "forvented", "slutted", "presentered", "elsked", "slited", "kosted", "planlegged", "bæred", "besøked", "glemmed", "støtted", "bytted", "kasted", "tested", "nyted", "oppdaged", "oppståd", "taped", "bryted", "løsed", "styred", "fornøyed", "innebæred", "retted", "representered", "tilpassed", "publisered", "omfatted", "utsetted", "sammenligned", "tillated", "soved", "danned", "hevded", "tjened", "invitered", "forsvinned", "mangled", "dreped", "utgjøred", "skilled", "beskytted", "stemmed", "variered", "drikked", "oppretted", "inngåd", "forbedred", "ødelegged", "satsed", "dukked", "måled", "lasted", "foreslåd", "diskutered", "ringed", "studered", "interessered", "styrked", "begrensed", "vared", "kobled", "skaded", "forlated", "loved", "foretad", "skaffed", "foregåd", "godkjenned", "kosed", "spared", "høresd", "hindred", "vedtad", "bringed", "bekrefted", "oppdatered", "ansed", "synged", "fokusered", "forårsaked", "spred", "erstatted", "skyted", "servered", "kombinered", "kjemped", "lated", "antad", "blanded", "byd", "snud", "preged", "fordeled", "ansetted", "takked", "fared", "utvided", "skyldesd", "minned", "trykked", "lansered", "kontakted", "beholded", "leted", "forbereded", "fested", "innføred", "undersøked", "brenned", "maled", "medføred", "beveged", "stikked", "skifted", "hopped", "involvered", "egned", "overtad", "montered", "tåled", "avgjøred", "lykkesd", "plukked", "beregned", "utgid", "peked", "håndtered", "tegned", "langed", "uttaled", "lagred", "følesd", "installered", "feired", "opprettholded", "oppfordred", "reagered", "kontrollered", "understreked", "havned", "vasked", "befinned", "fullføred", "leked", "lided", "definered", "omtaled", "løfted", "oppgid", "rammed", "samarbeided", "fanged", "typed", "opplysed", "strekked", "dreied", "stenged", "utarbeided", "fremmed", "overføred", "pleied", "oppfylled", "inspirered", "engasjered", "utnytted", "oppføred", "organisered", "smaked", "redded", "scored", "hended", "bekymred", "kutted", "påpeked", "rekked", "forandred", "akseptered", "ordned", "nekted", "pressed", "passered", "savned", "nærmed", "pakked", "smiled", "møtesd", "rapportered", "dømmed", "oppfatted", "tilhøred", "stiged", "tildeled", "taled", "tyded", "greied", "markered", "ivaretad", "fortjened", "venned", "leied", "låned", "eksistered", "dokumentered", "klikked", "vended", "tvinged", "kommentered", "innrømmed", "forholded", "landed", "våkned", "funked", "formidled", "identifisered", "telled", "utstyred", "gratulered", "formed", "angriped", "overrasked", "foreligged", "heved", "tørred", "foretrekked", "garantered", "justered", "prioritered", "lytted", "gjentad", "imponered", "resultered", "skjuled", "trengesd", "rived", "trivesd", "lukked", "uttrykked", "overleved", "klaged", "informered", "tilbringed", "posted", "gifted", "designed", "avsløred", "varsled", "fremståd", "blogged", "innsed", "stoled", "operered", "forsvared", "forutsetted", "griped", "rydded", "utdanned", "skrud", "veied", "kryssed", "utfordred", "gjennomgåd", "regulered", "støted", "senked", "ligned", "bevared", "angid", "utforsked", "tørked", "sykled", "forsterked", "tolked", "slapped", "investered", "fiksed", "berøred", "bevised", "roped", "koked", "forblid", "opptred", "vekked", "fastsetted", "strikked", "frykted", "blåsed", "avholded", "drømmed", "syd", "forekommed", "forbyd", "prated", "observered", "takled", "påståd", "konkurrered", "aned", "renned", "rid", "signered", "forhindred", "ankommed", "konkludered", "spored", "stifted", "relatered", "forbinded", "avtaled", "varmed", "bited", "påføred", "binded", "felled", "kvalifisered", "referered", "utformed", "avvised", "klipped", "overbevised", "blad", "plaged", "øved", "orked", "behøved", "godtad", "beklaged", "henvised", "kommunisered", "integrered", "seiled", "betrakted", "dansed", "gidded", "synked", "letted", "tilrettelegged", "finansiered", "stimulered", "bedred", "forebygged", "avhenged", "skuffed", "tilsid", "rulled", "lestd", "analysered", "hilsed", "bosetted", "stjeled", "tilsvared", "introdusered", "dyrked", "aktivered", "graved", "tred", "dissed", "farged", "anvended", "inntad", "oversetted", "hated", "konsentrered", "utløsed", "reflektered", "grunnlegged", "pusted", "opplevesd", "kritisered", "anerkjenned", "avdekked", "svekked", "sletted", "gjenståd", "hviled", "redigered", "kåred", "steked", "røred", "låsed", "advared", "risikered", "rensed", "gråted", "knused", "rykked", "undervised", "skjæred", "motivered", "lukted", "dominered", "fisked", "biståd", "seesd", "åpenbared", "tilføred", "tilknytted", "påvised", "beslutted", "kartlegged", "filmed", "yted", "pågåd", "kikked", "gjemmed", "annonsered", "logged", "omhandled", "returnered", "røyked", "pålegged", "tipsed", "tipped", "planted", "fremstilled", "putted", "irritered", "tenned", "stansed", "utøved", "indikered", "notered", "tiltrekked", "frysed", "pynted", "klatred", "lysed", "oppgradered", "pussed", "slenged", "frakted", "fristed", "stammed", "skremmed", "antyded", "utnevned", "videreføred", "forsked", "vandred", "tilsetted", "oppsøked", "fatted", "svinged", "forhandled", "skreved", "lønned", "stryked", "suged", "vied", "digged", "sikted", "hused", "reparered", "erfared", "praktisered", "baded", "forlenged", "baked", "straffed", "realisered", "stressed", "skryted", "intervjued", "flyted", "bekjemped", "illustrered", "bøyed", "dropped", "iverksetted", "laded", "mistenked", "sovned", "forplikted", "tømmed", "fremheved", "demped", "tviled", "begåd", "orientered", "overvåked", "fastslåd", "banked", "løsned", "tilfredsstilled", "kopiered", "etterfølged", "rommed", "argumentered", "angred", "kuled", "drøfted", "sparked", "begrunned", "betegned", "flykted", "erklæred", "oppsummered", "forelsked", "respektered", "lyded", "låted", "avklared", "isolered", "smitted", "anslåd", "helled", "prised", "smøred", "generered", "oppbevared", "innleded", "utelukked", "belysed", "omgid", "vektlegged", "listed", "overlated", "titted", "drited", "debutered", "roed", "konstruered", "administrered", "gjengid", "ryked", "nominered", "svømmed", "smelted", "offentliggjøred", "etterlated", "skinned", "smelled", "skriked", "forvalted", "prestered", "spesialisered", "siged", "forsikred", "datered", "klemmed", "forstyrred", "topped", "skyved", "linked", "matched", "rided", "videreutvikled", "fremgåd", "avgid", "fornyed", "limed", "rased", "spad", "balansered", "frigjøred", "sitered", "forestilled", "konstatered", "jakted", "grunned", "veileded", "gjenoppretted", "angåd", "besvared", "sammenlikned", "innhented", "risted", "rengjøred", "lited", "komplisered", "utreded", "nytted", "arrestered", "mored", "betjened", "booked", "demonstrered", "strømmed", "anmelded", "dekorered", "mestred", "vedlikeholded", "springed", "erkjenned", "oppholded", "avvikled", "fotografered", "parkered", "vitned", "svikted", "rekruttered", "importered", "eliminered", "oppmuntred", "belønned", "blokkered", "presisered", "markedsføred", "kjennetegned", "høsted", "kjennesd", "lokalisered", "våged", "oversed", "innstilled", "utmerked", "gjenspeiled", "henvended", "lokked", "sukked", "utsteded", "innehad", "utbetaled", "rangered", "avbryted", "evaluered", "jaged", "hived", "sprekked", "døped", "omsetted", "sortered", "slåssd", "karakterisered", "fremføred", "runded", "bemerked", "underlegged", "korrespondered", "verdsetted", "konvertered", "formulered", "forfølged", "utbred", "disponered", "avansered", "strammed", "implementered", "opparbeided", "kyssed", "korrigered", "blomstred", "innvilged", "ofred", "knekked", "filed", "mated", "forsinked", "forened", "reservered", "spenned", "tilsended", "transportered", "vanned", "staved", "belasted", "forenkled", "skreddersyd", "etterlysed", "skylded", "spåd", "dytted", "timed", "roted", "nedlegged", "detted", "kvitted", "innreded", "korted", "motsetted", "lindred", "bremsed", "frelsed", "fored", "gjenkjenned", "oppheved", "sniked", "talled", "absorbered", "lekked", "dobled", "distribuered", "synliggjøred", "feiled", "forsyned", "bearbeided", "ignorered", "unned", "forkynned", "tråkked", "assosiered", "tilegned", "utvised", "nedsetted", "diagnostisered", "framståd", "heied", "planed", "anged", "evned", "herjed", "sklid", "misforståd", "forbeholded", "begeistred", "avsetted", "fyred", "osed", "kompensered", "overstiged", "tilsed", "oppkalled", "kryped", "bretted", "bevilged", "skildred", "forvandled", "minsked", "rømmed", "klassifisered", "anlegged", "lyved", "sprenged", "overnatted", "innfrid", "spørresd", "makted", "forverred", "tured", "stelled", "klargjøred", "arved", "hemmed", "ledesd", "skylled", "nøyed", "pumped", "tillegged", "hylled", "tilled", "behersked", "skjerped", "berømmed", "verned", "forankred", "lufted", "svelged", "innkalled", "kunngjøred", "luked", "opphøred", "headed", "veksled", "fratad", "supplered", "innlemmed", "trilled", "lenked", "bored", "avlysed", "sponsed", "drifted", "medvirked", "motvirked", "ferdigstilled", "grensed", "spretted", "gjested", "regissered", "protestered", "anklaged", "gjetted", "etterspørred", "duked", "stempled", "koordinered", "avtad", "oppnevned", "omkommed", "overholded", "printed", "misbruked", "forlanged", "dedikered", "rosed", "unnskylded", "utdeled", "såred", "sertifisered", "oppløsed", "provosered", "forvirred", "øsed", "begraved", "overgåd", "påtad", "helbreded", "stirred", "erobred", "spekulered", "skilted", "mobbed", "rusted", "nikked", "grued", "bommed", "innlegged", "utpeked", "surfed", "krangled", "tilgid", "utdyped", "sammensetted", "hakked", "fremkommed", "streved", "igangsetted", "hersked", "brekked", "bristed", "byded", "draged", "flyged", "fnysed", "fyked", "glipped", "grined", "gysed", "gyted", "gyved", "hogged", "hugged", "klinged", "klyped", "klyved", "kniped", "kommed", "kveded", "kvekked", "kvepped", "lated", "lyged", "lyved", "nysed", "piped", "rided", "setted", "skited", "skjelved", "skrided", "skrived", "skvetted", "slipped", "smyged", "snyted", "spinned", "strided", "suped", "sverged", "sverjed", "ljuged", "sviked", "svinned", "slepped", "tigged", "viked", "kunngjort"];
Object.defineProperty(f$, "__esModule", {
  value: !0
});
f$.default = uYa;
var iYa = ee, oYa = lYa(Gz), yR = K;
function lYa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: dYa
} = iYa.languageProcessing;
function uYa(e) {
  const a = dYa(e), t = [];
  return (0, yR.forEach)(a, function(n) {
    (0, yR.includes)(oYa.default, n) && t.push(n);
  }), t;
}
Object.defineProperty(Hz, "__esModule", {
  value: !0
});
Hz.default = void 0;
var cYa = ee, pYa = mYa(f$), gYa = ei;
function mYa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  precedenceException: fYa,
  values: hYa
} = cYa.languageProcessing, {
  Clause: yYa
} = hYa;
class zYa extends yYa {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, pYa.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns { void }
   */
  checkParticiples() {
    const a = this.getClauseText(), t = this.getParticiples().filter((n) => !fYa(a, n, gYa.cannotBeBetweenPassiveAuxiliaryAndParticiple));
    this.setPassive(t.length > 0);
  }
}
Hz.default = zYa;
var Vz = {};
Object.defineProperty(Vz, "__esModule", {
  value: !0
});
Vz.default = void 0;
Vz.default = ["bli", "blir", "ble ", "blei", "blitt", "bli", "blivende", "blis", "er"];
Object.defineProperty(m$, "__esModule", {
  value: !0
});
m$.default = _Ya;
var bYa = ee, wYa = h$(Hz), zR = h$(Vz), bR = h$(jp);
function h$(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  createRegexFromArray: wR,
  getClauses: vYa
} = bYa.languageProcessing, kYa = {
  Clause: wYa.default,
  stopwords: bR.default,
  auxiliaries: zR.default,
  regexes: {
    auxiliaryRegex: wR(zR.default),
    stopwordRegex: wR(bR.default),
    stopCharacterRegex: /([:,])(?=[ \n\r\t'"+\-»«‹›<>])/ig
  }
};
function _Ya(e) {
  return vYa(e, kYa);
}
Object.defineProperty(c$, "__esModule", {
  value: !0
});
var FF = c$.default = void 0, EYa = ee, AYa = yl(Wz), TYa = yl(ei), $Ya = yl(jp), jYa = yl(Or), xYa = yl(Uz), SYa = yl(p$), OYa = yl(m$);
function yl(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: IYa
} = EYa.languageProcessing;
let CYa = class extends IYa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "nb",
      passiveConstructionType: "periphrastic",
      functionWords: TYa.default,
      firstWordExceptions: AYa.default,
      transitionWords: jYa.default,
      twoPartTransitionWords: xYa.default,
      stopWords: $Ya.default
    }), Object.assign(this.helpers, {
      getStemmer: SYa.default,
      getClauses: OYa.default
    });
  }
};
FF = c$.default = CYa;
var y$ = {}, Kz = {};
Object.defineProperty(Kz, "__esModule", {
  value: !0
});
Kz.default = void 0;
Kz.default = [
  // Definite articles:
  "de",
  "het",
  // Indefinite articles:
  "een",
  // Numbers 1-10:
  "één",
  "eén",
  "twee",
  "drie",
  "vier",
  "vijf",
  "zes",
  "zeven",
  "acht",
  "negen",
  "tien",
  // Demonstrative pronouns:
  "dit",
  "dat",
  "die",
  "deze"
];
var bt = {}, Ir = {};
Object.defineProperty(Ir, "__esModule", {
  value: !0
});
Ir.singleWords = Ir.multipleWords = Ir.default = Ir.allWords = void 0;
const PYa = Ir.singleWords = ["aangezien", "al", "aldus", "allereerst", "als", "alsook", "anderzijds", "bijgevolg", "bijvoorbeeld", "bovendien", "concluderend", "daardoor", "daarentegen", "daarmee", "daarna", "daarnaast", "daarom", "daartoe", "daarvoor", "dadelijk", "dan", "desondanks", "dienovereenkomstig", "dientegevolge", "doch", "doordat", "dus", "echter", "eerst", "evenals", "eveneens", "evenzeer", "hierom", "hoewel", "immers", "indien", "integendeel", "intussen", "kortom", "later", "maar", "mits", "nadat", "namelijk", "net als", "niettemin", "noch", "ofschoon", "omdat", "ondanks", "ondertussen", "ook", "opdat", "resumerend", "samengevat", "samenvattend", "tegenwoordig", "teneinde", "tenzij", "terwijl", "tevens", "toch", "toen", "uiteindelijk", "vanwege", "vervolgens", "voorafgaand", "vooralsnog", "voordat", "voorts", "vroeger", "waardoor", "waarmee", "waaronder", "wanneer", "want", "zoals", "zodat", "zodoende", "zodra"], RYa = Ir.multipleWords = ["aan de andere kant", "aan de ene kant", "aangenomen dat", "al met al", "alles afwegend", "alles bij elkaar", "alles in aanmerking nemend", "als gevolg van", "anders gezegd", "daar staat tegenover", "daarbij komt", "daaruit volgt", "dat betekent", "dat blijkt uit", "de oorzaak daarvan is", "de oorzaak hiervan is", "door middel van", "een voorbeeld hiervan", "een voorbeeld van", "gesteld dat", "hetzelfde als", "hieruit kunnen we afleiden", "hieruit volgt", "hoe het ook zij", "in de derde plaats", "in de eerste plaats", "in de tweede plaats", "in één woord", "in het bijzonder", "in het geval dat", "in plaats van", "in tegenstelling tot", "in vergelijking met", "maar ook", "met als doel", "met andere woorden", "met behulp van", "met de bedoeling", "neem nou", "net als", "om kort te gaan", "onder andere", "op dezelfde wijze", "stel dat", "te danken aan", "te wijten aan", "ten derde", "ten eerste", "ten gevolge van", "ten slotte", "ten tweede", "ter conclusie", "ter illustratie", "ter verduidelijking", "tot nog toe", "tot slot", "vandaar dat", "vergeleken met", "voor het geval dat"], DYa = Ir.allWords = PYa.concat(RYa);
Ir.default = DYa;
Object.defineProperty(bt, "__esModule", {
  value: !0
});
bt.filteredAtEnding = bt.filteredAtBeginningAndEnding = bt.filteredAtBeginning = bt.filteredAnywhere = bt.default = bt.cannotDirectlyPrecedePassiveParticiple = bt.all = void 0;
var BF = Ir, ru = NYa(Ba);
function NYa(e) {
  return e && e.__esModule ? e : { default: e };
}
const z$ = ["de", "het", "een", "der", "des", "den"], b$ = ["eén", "één", "twee", "drie", "vier", "vijf", "zes", "zeven", "acht", "negen", "tien", "elf", "twaalf", "dertien", "veertien", "vijftien", "zestien", "zeventien", "achttien", "negentien", "twintig", "honderd", "honderden", "duizend", "duizenden", "miljoen", "miljoenen", "biljoen", "biljoenen"], WF = ["eerste", "tweede", "derde", "vierde", "vijfde", "zesde", "zevende", "achtste", "negende", "tiende", "elfde", "twaalfde", "dertiende", "veertiende", "vijftiende", "zestiende", "zeventiende", "achttiende", "negentiende", "twinstigste"], UF = ["ik", "je", "jij", "hij", "ze", "we", "wij", "jullie", "zij", "u", "ge", "gij", "men"], HF = ["mij", "jou", "hem", "haar", "hen", "hun", "uw"], GF = ["dit", "dat", "deze", "die", "zelf"], w$ = ["mijn", "mijne", "jouw", "jouwe", "zijne", "hare", "ons", "onze", "hunne", "uwe", "elkaars", "elkanders"], VF = ["alle", "sommige", "sommigen", "weinig", "weinige", "weinigen", "veel", "vele", "velen", "geen", "beetje", "elke", "elk", "genoeg", "meer", "meest", "meeste", "meesten", "paar", "zoveel", "enkele", "enkelen", "zoveelste", "hoeveelste", "laatste", "laatsten", "iedere", "allemaal", "zekere", "ander", "andere", "gene", "enig", "enige", "verscheidene", "verschillende", "voldoende", "allerlei", "allerhande", "enerlei", "enerhande", "beiderlei", "beiderhande", "tweeërlei", "tweeërhande", "drieërlei", "drieërhande", "velerlei", "velerhande", "menigerlei", "menigerhande", "enigerlei", "enigerhande", "generlei", "generhande"], v$ = ["mezelf", "mijzelf", "jezelf", "jouzelf", "zichzelf", "haarzelf", "hemzelf", "onszelf", "julliezelf", "henzelf", "hunzelf", "uzelf", "zich"], KF = ["mekaar", "elkaar", "elkander", "mekander"], YF = ["iedereen", "ieder", "eenieder", "alleman", "allen", "alles", "iemand", "niemand", "iets", "niets", "menigeen"], QF = ["ieders", "aller", "iedereens", "eenieders"], XF = ["welke", "welk", "wat", "wie", "wiens", "wier"], k$ = ["hoe", "waarom", "waar", "hoezo", "hoeveel"], ZF = ["daaraan", "daarachter", "daaraf", "daarbij", "daarbinnen", "daarboven", "daarbuiten", "daardoorheen", "daarheen", "daarin", "daarjegens", "daarmede", "daarnaar", "daarnaartoe", "daaromtrent", "daaronder", "daarop", "daarover", "daaroverheen", "daarrond", "daartegen", "daartussen", "daartussenuit", "daaruit", "daarvan", "daarvandaan", "eraan", "erachter", "erachteraan", "eraf", "erbij", "erbinnen", "erboven", "erbuiten", "erdoor", "erdoorheen", "erheen", "erin", "erjegens", "ermede", "ermee", "erna", "ernaar", "ernaartoe", "ernaast", "erom", "eromtrent", "eronder", "eronderdoor", "erop", "eropaf", "eropuit", "erover", "eroverheen", "errond", "ertegen", "ertegenaan", "ertoe", "ertussen", "ertussenuit", "eruit", "ervan", "ervandaan", "ervandoor", "ervoor", "hieraan", "hierachter", "hieraf", "hierbij", "hierbinnen", "hierboven", "hierbuiten", "hierdoor", "hierdoorheen", "hierheen", "hierin", "hierjegens", "hierlangs", "hiermede", "hiermee", "hierna", "hiernaar", "hiernaartoe", "hiernaast", "hieromheen", "hieromtrent", "hieronder", "hierop", "hierover", "hieroverheen", "hierrond", "hiertegen", "hiertoe", "hiertussen", "hiertussenuit", "hieruit", "hiervan", "hiervandaan", "hiervoor", "vandaan", "waaraan", "waarachter", "waaraf", "waarbij", "waarboven", "waarbuiten", "waardoorheen", "waarheen", "waarin", "waarjegens", "waarmede", "waarna", "waarnaar", "waarnaartoe", "waarnaast", "waarop", "waarover", "waaroverheen", "waarrond", "waartegen", "waartegenin", "waartoe", "waartussen", "waartussenuit", "waaruit", "waarvan", "waarvandaan", "waarvoor"], JF = ["daar", "hier", "ginder", "daarginds", "ginds", "ver", "veraf", "ergens", "nergens", "overal", "dichtbij", "kortbij"], eB = ["word", "wordt", "werd", "werden", "ben", "bent", "is", "was", "waren"], aB = ["worden", "zijn"], tB = ["heb", "hebt", "heeft", "hadden", "had", "kun", "kan", "kunt", "kon", "konden", "mag", "mocht", "mochten", "dien", "dient", "diende", "dienden", "moet", "moest", "moesten", "ga", "gaat", "ging", "gingen"], nB = ["hebben", "kunnen", "mogen", "dienen", "moeten", "gaan"], _$ = ["blijkt", "blijk", "bleek", "bleken", "gebleken", "dunkt", "dunk", "dunkte", "dunkten", "gedunkt", "heet", "heette", "heetten", "geheten", "lijkt", "lijk", "geleken", "leek", "leken", "schijn", "schijnt", "scheen", "schenen", "toescheen", "toeschijnt", "toeschijn", "toeschenen"], E$ = ["blijken", "dunken", "heten", "lijken", "schijnen", "toeschijnen"], A$ = ["à", "aan", "aangaande", "achter", "behalve", "behoudens", "beneden", "benevens", "benoorden", "benoordoosten", "benoordwesten", "beoosten", "betreffende", "bewesten", "bezijden", "bezuiden", "bezuidoosten", "bezuidwesten", "bij", "binnen", "blijkens", "boven", "bovenaan", "buiten", "circa", "conform", "contra", "cum", "dankzij", "door", "gedurende", "gezien", "in", "ingevolge", "inzake", "jegens", "krachtens", "langs", "luidens", "met", "middels", "na", "naar", "naast", "nabij", "namens", "nevens", "niettegenstaande", "nopens", "om", "omstreeks", "omtrent", "onder", "onderaan", "ongeacht", "onverminderd", "op", "over", "overeenkomstig", "per", "plus", "post", "richting", "rond", "rondom", "spijts", "staande", "te", "tegen", "tegenover", "ten", "ter", "tijdens", "tot", "tussen", "uit", "van", "vanaf", "vanuit", "versus", "via", "vis-à-vis", "volgens", "voor", "voorbij", "wegens", "zijdens", "zonder"], rB = ["af", "heen", "mee", "toe", "achterop", "onderin", "voorin", "bovenop", "buitenop", "achteraan", "onderop", "binnenin", "tevoren"], sB = ["en", "alsmede", "of", "ofwel", "en/of"], iB = ["zowel", "evenmin", "zomin", "hetzij"], oB = ["vermits", "dewijl", "dorodien", "naardien", "nademaal", "overmits", "wijl", "eer", "eerdat", "aleer", "vooraleer", "alvorens", "totdat", "zolang", "sinds", "sedert", "ingeval", "tenware", "alhoewel", "hoezeer", "uitgezonderd", "zoverre", "zover", "naargelang", "naarmate", "alsof"], lB = ["zegt", "zei", "vraagt", "vroeg", "denkt", "dacht", "stelt", "pleit", "pleitte"], LYa = ["absoluut", "zeker", "ongetwijfeld", "sowieso", "onmiddelijk", "meteen", "inclusief", "direct", "ogenblikkelijk", "terstond", "natuurlijk", "vanzelfsprekend", "gewoonlijk", "normaliter", "doorgaans", "werkelijk", "daadwerkelijk", "inderdaad", "waarachtig", "oprecht", "bijna", "meestal", "misschien", "waarschijnlijk", "wellicht", "mogelijk", "vermoedelijk", "allicht", "aannemelijk", "oorspronkelijk", "aanvankelijk", "initieel", "eigenlijk", "feitelijk", "wezenlijk", "juist", "reeds", "alvast", "bijv.", "vaak", "dikwijls", "veelal", "geregeld", "menigmaal", "regelmatig", "veelvuldig", "eenvoudigweg", "simpelweg", "louter", "kortweg", "stomweg", "domweg", "zomaar", "eventueel", "mogelijkerwijs", "eens", "weleens", "nooit", "ooit", "anders", "momenteel", "thans", "incidenteel", "trouwens", "elders", "volgend", "recent", "onlangs", "recentelijk", "laatst", "zojuist", "relatief", "duidelijk", "overduidelijk", "klaarblijkelijk", "nadrukkelijk", "ogenschijnlijk", "kennelijk", "schijnbaar", "alweer", "continu", "herhaaldelijk", "nog", "steeds", "nu"], dB = ["zeer", "erg", "redelijk", "flink", "tikkeltje", "bijzonder", "ernstig", "enigszins", "zo", "tamelijk", "nogal", "behoorlijk", "zwaar", "heel", "hele", "reuze", "buitengewoon", "ontzettend", "vreselijk"], uB = ["laat", "liet", "lieten", "kom", "komt", "kwam", "kwamen", "maakt", "maak", "maakte", "maakten", "doe", "doet", "deed", "deden", "vindt", "vind", "vond", "vonden"], cB = ["laten", "komen", "maken", "doen", "vinden"], pB = ["nieuw", "nieuwe", "nieuwer", "nieuwere", "nieuwst", "nieuwste", "oud", "oude", "ouder", "oudere", "oudst", "oudste", "vorig", "vorige", "goed", "goede", "beter", "betere", "best", "beste", "groot", "grote", "groter", "grotere", "grootst", "grootste", "makkelijk", "makkelijke", "makkelijker", "makkelijkere", "makkelijkst", "makkelijste", "gemakkelijk", "gemakkelijke", "gemakkelijker", "gemakkelijkere", "gemakkelijkst", "gemakkelijste", "simpel", "simpele", "simpeler", "simpelere", "simpelst", "simpelste", "snel", "snelle", "sneller", "snellere", "snelst", "snelste", "verre", "verder", "verdere", "verst", "verste", "lang", "lange", "langer", "langere", "langst", "langste", "hard", "harde", "harder", "hardere", "hardst", "hardste", "minder", "mindere", "minst", "minste", "eigen", "laag", "lage", "lager", "lagere", "laagst", "laagste", "hoog", "hoge", "hoger", "hogere", "hoogst", "hoogste", "klein", "kleine", "kleiner", "kleinere", "kleinst", "kleinste", "kort", "korte", "korter", "kortere", "kortst", "kortste", "herhaaldelijke", "directe", "ongeveer", "slecht", "slechte", "slechter", "slechtere", "slechtst", "slechtste", "zulke", "zulk", "zo'n", "zulks", "er", "extreem", "extreme", "bijbehorende", "bijbehorend", "niet"], gB = ["oh", "wauw", "hèhè", "hè", "hé", "au", "ai", "jaja", "welja", "jawel", "ssst", "heremijntijd", "hemeltjelief", "aha", "foei", "hmm", "nou", "nee", "tja", "nja", "okido", "ho", "halt", "komaan", "komop", "verrek", "nietwaar", "brr", "oef", "ach", "och", "bah", "enfin", "afijn", "haha", "hihi", "hatsjie", "hatsjoe", "hm", "tring", "vroem", "boem", "hopla"], mB = ["ml", "cl", "dl", "l", "tl", "el", "mg", "g", "gr", "kg", "ca", "theel", "min", "sec", "uur"], fB = ["seconde", "secondes", "seconden", "minuut", "minuten", "uur", "uren", "dag", "dagen", "week", "weken", "maand", "maanden", "jaar", "jaren", "vandaag", "morgen", "overmorgen", "gisteren", "eergisteren", "'s", "morgens", "avonds", "middags", "nachts"], hB = ["ding", "dingen", "manier", "manieren", "item", "items", "keer", "maal", "procent", "geval", "aspect", "persoon", "personen", "deel"], yB = ["wel", "ja", "neen", "oké", "oke", "okee", "ok", "zoiets", "€", "euro"], MYa = ["mevr", "dhr", "mr", "dr", "prof"], qYa = ["jr", "sr"];
bt.filteredAtBeginning = (0, ru.default)([].concat(aB, nB, E$, cB));
const FYa = bt.filteredAtEnding = (0, ru.default)([].concat(WF, pB)), BYa = bt.filteredAtBeginningAndEnding = (0, ru.default)([].concat(z$, A$, sB, GF, dB, VF)), WYa = bt.filteredAnywhere = (0, ru.default)([].concat(BF.singleWords, UF, HF, v$, gB, b$, eB, tB, _$, lB, uB, YF, iB, oB, k$, XF, JF, yB, rB, ZF, mB, fB, hB, KF, w$)), UYa = bt.cannotDirectlyPrecedePassiveParticiple = (0, ru.default)([].concat(z$, k$, b$, w$, v$, QF, _$, E$, A$)), HYa = bt.all = (0, ru.default)([].concat(z$, b$, WF, GF, w$, v$, KF, UF, HF, VF, YF, QF, XF, k$, ZF, JF, rB, eB, aB, tB, nB, _$, E$, A$, sB, iB, oB, lB, BF.singleWords, LYa, dB, uB, cB, gB, pB, mB, hB, yB, fB, MYa, qYa));
bt.default = {
  filteredAtEnding: FYa,
  filteredAtBeginningAndEnding: BYa,
  filteredAnywhere: WYa,
  cannotDirectlyPrecedePassiveParticiple: UYa,
  all: HYa
};
var xp = {};
Object.defineProperty(xp, "__esModule", {
  value: !0
});
xp.default = void 0;
xp.default = ["alhoewel", "als", "dan", "doordat", "hoewel", "hoezeer", "indien", "mits", "naargelang", "naarmate", "nadat", "ofschoon", "omdat", "opdat", "tenzij", "toen", "voordat", "voorzover", "wanneer", "zoals", "zodat", "zodra", "zolang", "wie", "wiens", "wier", "welke", "welk"];
var Yz = {};
Object.defineProperty(Yz, "__esModule", {
  value: !0
});
Yz.default = void 0;
Yz.default = [["aan de ene kant", "aan de andere kant"], ["enerzijds", "anderzijds"], ["natuurlijk", "maar"], ["niet alleen", "maar ook"], ["noch", "noch"], ["zowel", "als"]];
const GYa = "aáäâeéëêiíïîoóöôuúüûy", VYa = {
  vowels: [
    {
      fragments: [
        "ue$",
        "dge$",
        "[tcp]iënt",
        "ace$",
        "[br]each",
        "[ainpr]tiaal",
        "[io]tiaan",
        "gua[yc]",
        "[^i]deal",
        "tive$",
        "load",
        "[^e]coke",
        "[^s]core$"
      ],
      countModifier: -1
    },
    {
      fragments: [
        "aä",
        "aeu",
        "aie",
        "ao",
        "ë",
        "eo",
        "eú",
        "ieau",
        "ea$",
        "ea[^u]",
        "ei[ej]",
        "eu[iu]",
        "ï",
        "iei",
        "ienne",
        "[^l]ieu[^w]",
        "[^l]ieu$",
        "i[auiy]",
        "stion",
        "[^cstx]io",
        "^sion",
        "riè",
        "oö",
        "oa",
        "oeing",
        "oie",
        "[eu]ü",
        "[^q]u[aeèo]",
        "uie",
        "[bhnpr]ieel",
        "[bhnpr]iël"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "[aeolu]y[aeéèoóu]"
      ],
      countModifier: 1
    }
  ],
  words: {
    full: [
      {
        word: "bye",
        syllables: 1
      },
      {
        word: "core",
        syllables: 1
      },
      {
        word: "cure",
        syllables: 1
      },
      {
        word: "dei",
        syllables: 2
      },
      {
        word: "dope",
        syllables: 1
      },
      {
        word: "dude",
        syllables: 1
      },
      {
        word: "fake",
        syllables: 1
      },
      {
        word: "fame",
        syllables: 1
      },
      {
        word: "five",
        syllables: 1
      },
      {
        word: "hole",
        syllables: 1
      },
      {
        word: "least",
        syllables: 1
      },
      {
        word: "lone",
        syllables: 1
      },
      {
        word: "minute",
        syllables: 2
      },
      {
        word: "move",
        syllables: 1
      },
      {
        word: "nice",
        syllables: 1
      },
      {
        word: "one",
        syllables: 1
      },
      {
        word: "state",
        syllables: 1
      },
      {
        word: "surplace",
        syllables: 2
      },
      {
        word: "take",
        syllables: 1
      },
      {
        word: "trade",
        syllables: 1
      },
      {
        word: "wide",
        syllables: 1
      }
    ],
    fragments: {
      global: [
        {
          word: "adieu",
          syllables: 2
        },
        {
          word: "airline",
          syllables: 2
        },
        {
          word: "airmiles",
          syllables: 2
        },
        {
          word: "alien",
          syllables: 3
        },
        {
          word: "ambient",
          syllables: 3
        },
        {
          word: "announcement",
          syllables: 3
        },
        {
          word: "appearance",
          syllables: 3
        },
        {
          word: "appeasement",
          syllables: 3
        },
        {
          word: "atheneum",
          syllables: 4
        },
        {
          word: "awesome",
          syllables: 2
        },
        {
          word: "baccalaurei",
          syllables: 5
        },
        {
          word: "baccalaureus",
          syllables: 5
        },
        {
          word: "baseball",
          syllables: 3
        },
        {
          word: "basejump",
          syllables: 2
        },
        {
          word: "banlieue",
          syllables: 3
        },
        {
          word: "bapao",
          syllables: 2
        },
        {
          word: "barbecue",
          syllables: 3
        },
        {
          word: "beamer",
          syllables: 2
        },
        {
          word: "beanie",
          syllables: 2
        },
        {
          word: "beat",
          syllables: 1
        },
        {
          word: "belle",
          syllables: 2
        },
        {
          word: "bête",
          syllables: 1
        },
        {
          word: "bingewatch",
          syllables: 2
        },
        {
          word: "blocnote",
          syllables: 2
        },
        {
          word: "blue",
          syllables: 1
        },
        {
          word: "board",
          syllables: 1
        },
        {
          word: "break",
          syllables: 1
        },
        {
          word: "broad",
          syllables: 1
        },
        {
          word: "bulls-eye",
          syllables: 2
        },
        {
          word: "business",
          syllables: 2
        },
        {
          word: "byebye",
          syllables: 2
        },
        {
          word: "cacao",
          syllables: 2
        },
        {
          word: "caesar",
          syllables: 2
        },
        {
          word: "camaieu",
          syllables: 3
        },
        {
          word: "caoutchouc",
          syllables: 2
        },
        {
          word: "carbolineum",
          syllables: 5
        },
        {
          word: "catchphrase",
          syllables: 1
        },
        {
          word: "carrier",
          syllables: 3
        },
        {
          word: "cheat",
          syllables: 1
        },
        {
          word: "cheese",
          syllables: 1
        },
        {
          word: "circonflexe",
          syllables: 3
        },
        {
          word: "clean",
          syllables: 1
        },
        {
          word: "cloak",
          syllables: 1
        },
        {
          word: "cobuying",
          syllables: 3
        },
        {
          word: "comeback",
          syllables: 2
        },
        {
          word: "comfortzone",
          syllables: 3
        },
        {
          word: "communiqué",
          syllables: 4
        },
        {
          word: "conopeum",
          syllables: 4
        },
        {
          word: "console",
          syllables: 2
        },
        {
          word: "corporate",
          syllables: 3
        },
        {
          word: "coûte",
          syllables: 1
        },
        {
          word: "creamer",
          syllables: 2
        },
        {
          word: "crime",
          syllables: 1
        },
        {
          word: "cruesli",
          syllables: 2
        },
        {
          word: "deadline",
          syllables: 2
        },
        {
          word: "deautoriseren",
          syllables: 6
        },
        {
          word: "deuce",
          syllables: 1
        },
        {
          word: "deum",
          syllables: 2
        },
        {
          word: "dirndl",
          syllables: 2
        },
        {
          word: "dread",
          syllables: 2
        },
        {
          word: "dreamteam",
          syllables: 2
        },
        {
          word: "drone",
          syllables: 1
        },
        {
          word: "enquête",
          syllables: 3
        },
        {
          word: "escape",
          syllables: 2
        },
        {
          word: "exposure",
          syllables: 3
        },
        {
          word: "extranei",
          syllables: 4
        },
        {
          word: "extraneus",
          syllables: 4
        },
        {
          word: "eyecatcher",
          syllables: 3
        },
        {
          word: "eyeliner",
          syllables: 3
        },
        {
          word: "eyeopener",
          syllables: 4
        },
        {
          word: "eyetracker",
          syllables: 3
        },
        {
          word: "eyetracking",
          syllables: 3
        },
        {
          word: "fairtrade",
          syllables: 2
        },
        {
          word: "fauteuil",
          syllables: 2
        },
        {
          word: "feature",
          syllables: 2
        },
        {
          word: "feuilletee",
          syllables: 3
        },
        {
          word: "feuilleton",
          syllables: 3
        },
        {
          word: "fisheye",
          syllables: 2
        },
        {
          word: "fineliner",
          syllables: 3
        },
        {
          word: "finetunen",
          syllables: 3
        },
        {
          word: "forehand",
          syllables: 2
        },
        {
          word: "freak",
          syllables: 1
        },
        {
          word: "fusioneren",
          syllables: 4
        },
        {
          word: "gayparade",
          syllables: 3
        },
        {
          word: "gaypride",
          syllables: 2
        },
        {
          word: "goal",
          syllables: 1
        },
        {
          word: "grapefruit",
          syllables: 2
        },
        {
          word: "gruyère",
          syllables: 3
        },
        {
          word: "guele",
          syllables: 1
        },
        {
          word: "guerrilla",
          syllables: 3
        },
        {
          word: "guest",
          syllables: 1
        },
        {
          word: "hardware",
          syllables: 2
        },
        {
          word: "haute",
          syllables: 1
        },
        {
          word: "healing",
          syllables: 2
        },
        {
          word: "heater",
          syllables: 2
        },
        {
          word: "heavy",
          syllables: 2
        },
        {
          word: "hoax",
          syllables: 1
        },
        {
          word: "hotline",
          syllables: 2
        },
        {
          word: "idee-fixe",
          syllables: 3
        },
        {
          word: "inclusive",
          syllables: 3
        },
        {
          word: "inline",
          syllables: 2
        },
        {
          word: "intake",
          syllables: 2
        },
        {
          word: "intensive",
          syllables: 3
        },
        {
          word: "jeans",
          syllables: 1
        },
        {
          word: "Jones",
          syllables: 1
        },
        {
          word: "jubileum",
          syllables: 4
        },
        {
          word: "kalfsribeye",
          syllables: 3
        },
        {
          word: "kraaiennest",
          syllables: 3
        },
        {
          word: "lastminute",
          syllables: 3
        },
        {
          word: "learning",
          syllables: 2
        },
        {
          word: "league",
          syllables: 1
        },
        {
          word: "line-up",
          syllables: 2
        },
        {
          word: "linoleum",
          syllables: 4
        },
        {
          word: "load",
          syllables: 1
        },
        {
          word: "loafer",
          syllables: 2
        },
        {
          word: "longread",
          syllables: 2
        },
        {
          word: "lookalike",
          syllables: 3
        },
        {
          word: "louis",
          syllables: 3
        },
        {
          word: "lyceum",
          syllables: 3
        },
        {
          word: "magazine",
          syllables: 3
        },
        {
          word: "mainstream",
          syllables: 2
        },
        {
          word: "make-over",
          syllables: 3
        },
        {
          word: "make-up",
          syllables: 2
        },
        {
          word: "malware",
          syllables: 2
        },
        {
          word: "marmoleum",
          syllables: 4
        },
        {
          word: "mausoleum",
          syllables: 4
        },
        {
          word: "medeauteur",
          syllables: 4
        },
        {
          word: "midlifecrisis",
          syllables: 4
        },
        {
          word: "migraineaura",
          syllables: 5
        },
        {
          word: "milkshake",
          syllables: 2
        },
        {
          word: "millefeuille",
          syllables: 4
        },
        {
          word: "mixed",
          syllables: 1
        },
        {
          word: "muesli",
          syllables: 2
        },
        {
          word: "museum",
          syllables: 3
        },
        {
          word: "must-have",
          syllables: 2
        },
        {
          word: "must-read",
          syllables: 2
        },
        {
          word: "notebook",
          syllables: 2
        },
        {
          word: "nonsense",
          syllables: 2
        },
        {
          word: "nowhere",
          syllables: 2
        },
        {
          word: "nurture",
          syllables: 2
        },
        {
          word: "offline",
          syllables: 2
        },
        {
          word: "oneliner",
          syllables: 3
        },
        {
          word: "onesie",
          syllables: 2
        },
        {
          word: "online",
          syllables: 2
        },
        {
          word: "opinion",
          syllables: 3
        },
        {
          word: "paella",
          syllables: 3
        },
        {
          word: "pacemaker",
          syllables: 3
        },
        {
          word: "panache",
          syllables: 2
        },
        {
          word: "papegaaienneus",
          syllables: 5
        },
        {
          word: "passe-partout",
          syllables: 3
        },
        {
          word: "peanuts",
          syllables: 2
        },
        {
          word: "perigeum",
          syllables: 4
        },
        {
          word: "perineum",
          syllables: 4
        },
        {
          word: "perpetuum",
          syllables: 4
        },
        {
          word: "petroleum",
          syllables: 4
        },
        {
          word: "phone",
          syllables: 3
        },
        {
          word: "picture",
          syllables: 2
        },
        {
          word: "placemat",
          syllables: 2
        },
        {
          word: "porte-manteau",
          syllables: 3
        },
        {
          word: "portefeuille",
          syllables: 4
        },
        {
          word: "presse-papier",
          syllables: 3
        },
        {
          word: "primetime",
          syllables: 2
        },
        {
          word: "queen",
          syllables: 1
        },
        {
          word: "questionnaire",
          syllables: 3
        },
        {
          word: "queue",
          syllables: 1
        },
        {
          word: "reader",
          syllables: 2
        },
        {
          word: "reality",
          syllables: 3
        },
        {
          word: "reallife",
          syllables: 2
        },
        {
          word: "remake",
          syllables: 2
        },
        {
          word: "repeat",
          syllables: 2
        },
        {
          word: "repertoire",
          syllables: 3
        },
        {
          word: "research",
          syllables: 2
        },
        {
          word: "reverence",
          syllables: 3
        },
        {
          word: "ribeye",
          syllables: 2
        },
        {
          word: "ringtone",
          syllables: 3
        },
        {
          word: "road",
          syllables: 1
        },
        {
          word: "roaming",
          syllables: 2
        },
        {
          word: "sciencefiction",
          syllables: 4
        },
        {
          word: "selfmade",
          syllables: 2
        },
        {
          word: "sidekick",
          syllables: 2
        },
        {
          word: "sightseeing",
          syllables: 3
        },
        {
          word: "skyline",
          syllables: 2
        },
        {
          word: "smile",
          syllables: 1
        },
        {
          word: "sneaky",
          syllables: 2
        },
        {
          word: "software",
          syllables: 2
        },
        {
          word: "sparerib",
          syllables: 2
        },
        {
          word: "speaker",
          syllables: 2
        },
        {
          word: "spread",
          syllables: 1
        },
        {
          word: "statement",
          syllables: 2
        },
        {
          word: "steak",
          syllables: 1
        },
        {
          word: "steeplechase",
          syllables: 3
        },
        {
          word: "stonewash",
          syllables: 2
        },
        {
          word: "store",
          syllables: 1
        },
        {
          word: "streaken",
          syllables: 2
        },
        {
          word: "stream",
          syllables: 1
        },
        {
          word: "streetware",
          syllables: 1
        },
        {
          word: "supersoaker",
          syllables: 4
        },
        {
          word: "surprise-party",
          syllables: 4
        },
        {
          word: "sweater",
          syllables: 2
        },
        {
          word: "teaser",
          syllables: 2
        },
        {
          word: "tenue",
          syllables: 2
        },
        {
          word: "template",
          syllables: 2
        },
        {
          word: "timeline",
          syllables: 2
        },
        {
          word: "tissue",
          syllables: 2
        },
        {
          word: "toast",
          syllables: 1
        },
        {
          word: "tête-à-tête",
          syllables: 3
        },
        {
          word: "typecast",
          syllables: 2
        },
        {
          word: "unique",
          syllables: 2
        },
        {
          word: "ureum",
          syllables: 3
        },
        {
          word: "vibe",
          syllables: 1
        },
        {
          word: "vieux",
          syllables: 1
        },
        {
          word: "ville",
          syllables: 1
        },
        {
          word: "vintage",
          syllables: 2
        },
        {
          word: "wandelyup",
          syllables: 3
        },
        {
          word: "wiseguy",
          syllables: 2
        },
        {
          word: "wake-up-call",
          syllables: 3
        },
        {
          word: "webcare",
          syllables: 2
        },
        {
          word: "winegum",
          syllables: 2
        },
        {
          word: "base",
          syllables: 1,
          notFollowedBy: [
            "e",
            "n",
            "r"
          ]
        },
        {
          word: "game",
          syllables: 1,
          notFollowedBy: [
            "n",
            "l",
            "r"
          ]
        },
        {
          word: "style",
          syllables: 1,
          notFollowedBy: [
            "n",
            "s"
          ]
        },
        {
          word: "douche",
          syllables: 1,
          notFollowedBy: [
            "n",
            "s"
          ]
        },
        {
          word: "space",
          syllables: 1,
          notFollowedBy: [
            "n",
            "s"
          ]
        },
        {
          word: "striptease",
          syllables: 2,
          notFollowedBy: [
            "n",
            "s"
          ]
        },
        {
          word: "jive",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "keynote",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "mountainbike",
          syllables: 3,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "face",
          syllables: 1,
          notFollowedBy: [
            "n",
            "t"
          ]
        },
        {
          word: "challenge",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "cruise",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "house",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "dance",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "franchise",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "freelance",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "lease",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "linedance",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "lounge",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "merchandise",
          syllables: 3,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "performance",
          syllables: 3,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "release",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "resource",
          syllables: 2,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        },
        {
          word: "cache",
          syllables: 1,
          notFollowedBy: [
            "c",
            "l",
            "n",
            "t",
            "x"
          ]
        },
        {
          word: "office",
          syllables: 2,
          notFollowedBy: [
            "r",
            "s"
          ]
        },
        {
          word: "close",
          syllables: 1,
          notFollowedBy: [
            "r",
            "t"
          ]
        }
      ],
      atBeginningOrEnd: [
        {
          word: "byte",
          syllables: 1
        },
        {
          word: "cake",
          syllables: 1
        },
        {
          word: "care",
          syllables: 1
        },
        {
          word: "coach",
          syllables: 1
        },
        {
          word: "coat",
          syllables: 1
        },
        {
          word: "earl",
          syllables: 1
        },
        {
          word: "foam",
          syllables: 1
        },
        {
          word: "gate",
          syllables: 1
        },
        {
          word: "head",
          syllables: 1
        },
        {
          word: "home",
          syllables: 1
        },
        {
          word: "live",
          syllables: 1
        },
        {
          word: "safe",
          syllables: 1
        },
        {
          word: "site",
          syllables: 1
        },
        {
          word: "soap",
          syllables: 1
        },
        {
          word: "teak",
          syllables: 1
        },
        {
          word: "team",
          syllables: 1
        },
        {
          word: "wave",
          syllables: 1
        },
        {
          word: "brace",
          syllables: 1,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "case",
          syllables: 1,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "fleece",
          syllables: 1,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "service",
          syllables: 2,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "voice",
          syllables: 1,
          notFollowedBy: [
            "s"
          ]
        },
        {
          word: "kite",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "skate",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r"
          ]
        },
        {
          word: "race",
          syllables: 1,
          notFollowedBy: [
            "n",
            "r",
            "s"
          ]
        }
      ],
      atBeginning: [
        {
          word: "coke",
          syllables: 1
        },
        {
          word: "deal",
          syllables: 1
        },
        {
          word: "image",
          syllables: 2,
          notFollowedBy: [
            "s"
          ]
        }
      ],
      atEnd: [
        {
          word: "force",
          syllables: 1
        },
        {
          word: "tea",
          syllables: 1
        },
        {
          word: "time",
          syllables: 1
        },
        {
          word: "date",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "hype",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "quote",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "tape",
          syllables: 1,
          alsoFollowedBy: [
            "s"
          ]
        },
        {
          word: "upgrade",
          syllables: 2,
          alsoFollowedBy: [
            "s"
          ]
        }
      ]
    }
  }
}, KYa = {
  vowels: GYa,
  deviations: VYa
};
var Qz = {};
Object.defineProperty(Qz, "__esModule", {
  value: !0
});
Qz.default = void 0;
Qz.default = {
  productPages: {
    parameters: {
      recommendedMinimum: 3,
      recommendedMaximum: 6,
      acceptableMaximum: 7,
      acceptableMinimum: 1
    }
  }
};
var T$ = {}, Xz = {}, Sp = {};
Object.defineProperty(Sp, "__esModule", {
  value: !0
});
Sp.default = void 0;
Sp.default = ["gebraad", "gemoed", "gebed", "gebied", "gebod", "gebodsbord", "geboorte-eiland", "geboortestad", "gebruikspaard", "gedachtewereld", "gedenkblad", "gedenknaald", "gedichtenwedstrijd", "gedoogakkoord", "gedoogbeleid", "geduld", "geestenwereld", "geesteskind", "geestestoestand", "geesteswereld", "gehandicaptenbeleid", "gehoorafstand", "gehoorsafstand", "geitenbaard", "geitenhuid", "geld", "geldhond", "geldvoorraad", "geleidehond", "gelijkekansenbeleid", "geloofsdaad", "geloofsinhoud", "geluidswand", "gelukskind", "gemeenschapsraad", "gemeentebeleid", "gemeenteraad", "gemeenteraadslid", "gemoedstoestand", "genadeverbond", "genderbeleid", "geneesmiddelenbeleid", "generaalsbewind", "geslachtsdaad", "gespreksavond", "gespreksflard", "getijdengebied", "gevangenisbeleid", "gevangeniswereld", "gevechtsafstand", "gevelwand", "gevoelstoestand", "gevoelswereld", "gewelddaad", "geweldigaard", "geweldverbod", "gezelschapshond", "gezichtsafstand", "gezichtshuid", "gezinsbeleid", "gezinsbond", "gezinshoofd", "gezinslid", "gezinspaard", "gezinstoestand", "gezondheidsbeleid", "gezondheidstoestand", "gezondheidszorgbeleid", "gecentreerd", "geserreerd", "gepolitoerd", "gebocheld", "gebrild", "gegleufd", "gekarteld", "gemeubeld", "gesausd", "geaccidenteerd", "geaccrediteerd", "geacheveerd", "geaderd", "geaggregeerd", "geagiteerd", "geallieerd", "geanimeerd", "geanticipeerd", "gearticuleerd", "geassorteerd", "gebenedijd", "gebiedend", "geblaseerd", "geblindeerd", "geborneerd", "gebronzeerd", "gebrouilleerd", "gebruind", "gecharmeerd", "gechromeerd", "geciviliseerd", "geclausuleerd", "gecoiffeerd", "geconditioneerd", "geconstipeerd", "gecontinueerd", "gecoöpteerd", "gecrispeerd", "gecultiveerd", "gedecideerd", "gedecolleteerd", "gedegouteerd", "gedemilitariseerd", "gedemodeerd", "gedesillusioneerd", "gedesinteresseerd", "gedetailleerd", "gediplomeerd", "gedisciplineerd", "gedisponeerd", "gedistingeerd", "gedomicilieerd", "gedoteerd", "gedupeerd", "geëigend", "geestdodend", "geestverruimend", "geëxalteerd", "geëxponeerd", "gefigureerd", "gefingeerd", "geflatteerd", "geforceerd", "gefumeerd", "gegeerd", "gegeneerd", "gegradueerd", "gegriepeerd", "gehaaid", "gehandschoend", "gehavend", "gehomologeerd", "gehorend", "geïllustreerd", "geïmponeerd", "geïmproviseerd", "geïncrimineerd", "geïrriteerd", "geklasseerd", "gekmakend", "gekuifd", "gekwalificeerd", "gelardeerd", "geldend", "geldverslindend", "geleed", "geleidend", "gelieerd", "geliefkoosd", "gelijkluidend", "gelinieerd", "geluiddempend", "geluidswerend", "geluidwerend", "gemarineerd", "gematteerd", "gemiddeld", "geoccupeerd", "geoutilleerd", "geparaffineerd", "geparfumeerd", "gepatenteerd", "gepermitteerd", "geplafonneerd", "geplisseerd", "gepredisponeerd", "geprefabriceerd", "gepreoccupeerd", "geproportioneerd", "geraffineerd", "gerandomiseerd", "gereformeerd", "gereglementeerd", "geresigneerd", "geresponsabiliseerd", "gerimpeld", "geringschattend", "geruchtmakend", "geruststellend", "gesatureerd", "gesauteerd", "geschakeerd", "gesepareerd", "geseponeerd", "gesofisticeerd", "gesoigneerd", "gespeend", "gespikkeld", "gestresseerd", "geurenblind", "gevergeerd", "geverseerd", "gezaghebbend", "gezagsondermijnend", "gezichtsbepalend", "gezinsvervangend", "gezwind", "geit", "gedragstherapeut", "geveltoerist", "gezant", "gerant", "gerst", "gerstenat", "geut", "gebarenkunst", "gebedsbijeenkomst", "gebekvecht", "gebiedsagent", "gebit", "geboorterecht", "gebruikersovereenkomst", "gebruiksrecht", "gebruiksvoorschrift", "gedragsvoorschrift", "geest", "geestdrift", "geesteskracht", "geestesproduct", "geestkracht", "gefluit", "gehandicaptensport", "geheimhoudingsplicht", "geheimschrift", "geheugenkunst", "gehoorapparaat", "geitenteelt", "gekloot", "geldautomaat", "geldingskracht", "geldingszucht", "geldkist", "geldmarkt", "geldmarkttekort", "geldpot", "geldsoort", "geldtekort", "geldtransport", "gelduitgifteautomaat", "geldzucht", "gelegenheidsargument", "geloofsgenoot", "geluidseffect", "geluidsoverlast", "geluidspoort", "gemaksproduct", "gemakzucht", "gemberpot", "gemeenschapsrecht", "gemeenteadvocaat", "gemeenteraadsbesluit", "gemeenterecht", "gemeentewet", "gemeentewiet", "gemoedsrust", "geneeskracht", "geneeskundestudent", "geneeskunst", "geneesmiddelenfabrikant", "geneesmiddelenmarkt", "generatieconflict", "generatiegenoot", "generatiepact", "generatiestudent", "genetkat", "genocidewet", "genot", "genotsproduct", "genotzucht", "gent", "geodeet", "geologiedocent", "gereedschapskist", "gerucht", "geruchtencircuit", "geschiedenisdocent", "geschiedenisstudent", "geschiet", "geschrift", "gespreksgenoot", "gesprekspunt", "getijdenkracht", "gevangenispoort", "gevecht", "gevechtskracht", "gevechtssport", "gevellijst", "gevelornament", "gewest", "gewetensangst", "gewetensconflict", "gewicht", "gewinzucht", "gewondentransport", "gewoonterecht", "gewricht", "gezagsapparaat", "gezinsbudget", "gezinsrapport", "gezondheidseffect", "gezondheidsklacht", "gezondheidsproduct", "gezondheidsrecht", "gezondheidswet", "gezondheidswinst", "gerokt", "gevlekt", "gebuikt", "gesaust", "gebiedsgericht", "geel-zwart", "gehandicapt", "gereformeerd-vrijgemaakt", "gestuikt", "geëtst", "bed", "bediendevakbond", "bedrijfsbeleid", "bedrijfsblad", "bedrijfspand", "bedrijfswereld", "bedrijvenbond", "beekdonderpad", "beeld", "beginselakkoord", "begintoestand", "begripsinhoud", "begrotingsakkoord", "begrotingsbeleid", "behandelaanbod", "beheerraad", "beheersgebied", "behoud", "beiaard", "bejaardenbeleid", "bekerwedstrijd", "belastinggebied", "belastinggeld", "belastingschuld", "beleggingsbeleid", "beleggingspand", "beleid", "beleidsdaad", "beleidsgebied", "belevingswereld", "belplafond", "beltegoed", "bemanningslid", "Bemiddelingsraad", "bendehoofd", "bendelid", "benedenstad", "benefietwedstrijd", "benoemingenbeleid", "benuttingsgraad", "berberpaard", "beregeningsverbod", "bergeend", "berggebied", "bergland", "bergpaard", "bergpad", "bergwand", "beroepsarbeid", "beroepsverbod", "beroepswereld", "beschermingsbeleid", "beschermingsgebied", "beslissingswedstrijd", "besparingsbeleid", "bestand", "bestandsakkoord", "besteleend", "besturenbond", "bestuursakkoord", "bestuursbeleid", "bestuurshoofd", "bestuurslid", "beukenblad", "beursmaand", "beursrecord", "beurswaakhond", "beurswereld", "beveiligingsbeleid", "bevolkingsbeleid", "bewind", "bewustzijnsinhoud", "bewustzijnstoestand", "bezuinigingsbeleid", "beenhard", "bebrild", "beangstigend", "bebaard", "bedeesd", "bederfwerend", "bedreigend", "bedrijvend", "bedroevend", "beduidend", "beduusd", "bedwelmend", "beeldbepalend", "beeldend", "beeldvormend", "beeldvullend", "begeleidend", "begerenswaard", "begrijpend", "behartenswaard", "behartigenswaard", "behoudend", "bejaard", "beklagenswaard", "beklemmend", "belanghebbend", "belangstellend", "belangwekkend", "belastingbesparend", "belastingbetalend", "beledigend", "beleerd", "beleidsadviserend", "belendend", "belerend", "bemoedigend", "benauwend", "benijdenswaard", "bepalend", "beperkend", "beregoed", "berekenend", "beroemd", "beroepsblind", "beschaamd", "beschamend", "beschouwend", "beschrijvend", "besdragend", "beslissend", "bestaand", "bestverkopend", "beteuterd", "betoverend", "betraand", "betreffend", "betreurenswaard", "bevelend", "bevelhebbend", "bevestigend", "bevoegd", "bevredigend", "bevreemdend", "bevriend", "bewonderenswaard", "bewustzijnsverruimend", "bezwarend", "beest", "berggeit", "betaalkracht", "beerput", "bergamot", "beschuit", "beademingsapparaat", "beddenfabrikant", "bedeltocht", "bedevaart", "bedevaartstocht", "bediendecontract", "bedieningsfout", "bedilzucht", "bedoeïenentent", "bedrijfsadvocaat", "bedrijfsfeest", "bedrijfsfysiotherapeut", "bedrijfsmanagement", "bedrijfsopbrengst", "bedrijfsrestaurant", "bedrijfsresultaat", "bedrijfssport", "bedrijfswinst", "bedrijvenmarkt", "bedrust", "beeldhouwkunst", "beeldmoment", "beeldrecht", "beeldsnijkunst", "beestenmarkt", "beet", "begeleidwonenproject", "beginnersfout", "beginpunt", "begrippenapparaat", "begrotingsdebat", "begrotingsrecht", "begrotingstekort", "behaagzucht", "behandelingsresultaat", "behoudzucht", "bejaardenpaspoort", "bekerplant", "bekerwinst", "beklagrecht", "beklemrecht", "belangenconflict", "belastingafdracht", "belastingbiljet", "belastingconsulent", "belastingdienst", "belastingexpert", "belastingopbrengst", "belastingplicht", "belastingrecht", "belastingspecialist", "belastingwet", "beleggersmarkt", "beleggingsexpert", "beleggingsmarkt", "beleggingsopbrengst", "beleggingsproduct", "beleggingsresultaat", "beleidsaspect", "beleidsdebat", "beleidsfout", "beleidsresultaat", "beleidsspecialist", "belevingsrestaurant", "belgicist", "belminuut", "beltegoedkaart", "bemoeizucht", "benefiet", "benefietconcert", "benoemingsbesluit", "benzinelucht", "benzinemarkt", "benzinetekort", "beoordelingsfout", "beoordelingsrapport", "berghut", "bergklimaat", "berglucht", "bergrit", "bergsport", "bergtijdrit", "bergtocht", "berichtendienst", "berkenhout", "bermmonument", "bermrecreant", "bermsloot", "bermtoerist", "beroepsdiplomaat", "beroepsernst", "beroepsfout", "beroepsgenoot", "beroepsjournalist", "beroepskracht", "beroepsrecht", "beroepssoldaat", "beroepssport", "berufsverbot", "beschermingsbesluit", "beschikkingsrecht", "beslismoment", "beslissingsrecht", "besluit", "bestaansrecht", "bestandsformaat", "bestelbiljet", "bestelkaart", "bestuursapparaat", "bestuursassistent", "bestuursbesluit", "bestuursconflict", "bestuurskracht", "bestuurskundedocent", "bestuursmandaat", "bestuursprocesrecht", "bestuursrecht", "betaalautomaat", "betaaldienst", "betaalkaart", "betaalopdracht", "betalingsbalanstekort", "betalingsopdracht", "bètastudent", "beterschapskaart", "betrouwbaarheidsrit", "beukenhout", "beursapparaat", "beursklimaat", "beurskrant", "beursmarkt", "beursstudent", "beurt", "beverrat", "bevoegdheidsconflict", "bevrijdingsconcert", "bevrijdingsfeest", "bewaarplicht", "bewegingsapparaat", "bewegingsdocent", "bewegingskunst", "bewijskracht", "bewijsrecht", "bewustwordingsproject", "bezemkast", "bezit", "bezitsrecht", "bezoekrecht", "bezuinigingsdrift", "bezuinigingsopdracht", "bezwaarschrift", "beroepsgericht", "bedompt", "bedrijfsgericht", "beginselvast", "beleidsgericht", "bewolkt", "bezweet", "verbeterblad", "verband", "verbeeldingswereld", "verbod", "verbodsbord", "verbond", "verdwaalarmband", "verdwijnwoord", "verenigingsblad", "verenigingslid", "verfhuid", "vergismoord", "vergunningenbeleid", "verhalenpad", "verhalenwedstrijd", "verkeersaanbod", "verkeersbeleid", "verkeersbord", "verkiezingsavond", "verkleinwoord", "verkoopbeleid", "verkoopverbod", "vernieuwingsbeleid", "verpleeghuisbed", "verraad", "verschijningsverbod", "verstand", "vertoningsverbod", "vertrekbeleid", "vervalmaand", "vervoerbeleid", "vervoersaanbod", "vervoersbeleid", "vervoersbond", "vervoersverbod", "vervolgingsbeleid", "verwijderingsbeleid", "verzamelbeleid", "verzekeringswereld", "verzetsdaad", "verzetsheld", "verzuimbeleid", "verdragend", "verkeersremmend", "verbazend", "verbazingwekkend", "verbijsterend", "verblindend", "verbluffend", "verbouwereerd", "verdaagd", "verdedigend", "verdovend", "vereend", "verfrissend", "vergelijkend", "verhalend", "verheffend", "verheugend", "verkikkerd", "verklarend", "verkwikkend", "verkwistend", "verlammend", "verlangend", "verliesgevend", "verlieslatend", "verlieslijdend", "verlokkend", "verlossend", "vermeend", "vermeldenswaard", "vermeldingswaard", "vermoeiend", "vermogend", "vernederend", "vernietigend", "verontrustend", "verpletterend", "verrassend", "verscheurend", "verschillend", "verslaafd", "verspringend", "verstikkend", "verstrekkend", "verstrooid", "vertederend", "vertrouwenwekkend", "vertwijfeld", "vervelend", "verwaand", "verwarrend", "verwoestend", "verzachtend", "verziend", "verzoenend", "verwant", "verantwoordingsplicht", "verbandkist", "verbeeldingskracht", "verbintenissenrecht", "verblijfsrecht", "verbrandingsproduct", "verbroederingsfeest", "verdedigingsfout", "verdragsrecht", "verdriet", "verdringingseffect", "veredelingsproduct", "verenigingsrecht", "verffabrikant", "verfpot", "verfrest", "vergiet", "vergoedingslimiet", "vergrotingsapparaat", "vergunningplicht", "verhaalsrecht", "verhuiskist", "verhuurboot", "verjaardagsfeest", "verjaardagsgast", "verjaardagstaart", "verjaarfeest", "verjaringsfeest", "verkeersagent", "verkeersinfarct", "verkeersmanagement", "verkeersmarkt", "verkeersoverlast", "verkeerswet", "verkenningstocht", "verkiezingsbijeenkomst", "verkiezingsbiljet", "verkiezingsdebat", "verkiezingsinkt", "verkiezingsresultaat", "verkiezingswinst", "verkleedkist", "verkoopapparaat", "verkoopargument", "verkoopopbrengst", "verkoopopdracht", "verkooprecht", "verkoopresultaat", "verkopersmarkt", "verlatingsangst", "verlovingsfeest", "verminderingskaart", "vermogensrecht", "vermogenstekort", "vermogenswinst", "vernielzucht", "vernietigingskracht", "vernieuwingsdebat", "vernieuwingsproject", "veroveringstocht", "veroveringszucht", "verpleegassistent", "verrassingseffect", "verrassingsfeest", "verrijkingsmarkt", "verruimingskandidaat", "verschoningsrecht", "verschot", "versproduct", "versterfrecht", "vertaalfout", "vertaalproject", "vertaalrecht", "vertebraat", "vertegenwoordigingsrecht", "vervangingsmarkt", "vervoersmanagement", "vervoersmarkt", "vervolgbijeenkomst", "vervolgingsapparaat", "vervolgopdracht", "vervolgproject", "vervreemdingseffect", "verwijt", "verzakingsrecht", "verzamelkrant", "verzekeringsagent", "verzekeringsmarkt", "verzekeringsproduct", "verzekeringsrecht", "verzekeringsresultaat", "verzetskrant", "verzoeningsbijeenkomst", "verzorgingsproduct", "slingerpad", "avondgebed", "bibbergeld", "dageraad", "drinkgeld", "kalfsgebraad", "leefgeld", "ochtendgebed", "ongelukskind", "vluggerd", "voltigeerpaard", "voltigepaard", "aandachtsgebied", "aanlijngebod", "aardbevingsgebied", "abonnementsgeld", "achtergrondgeluid", "achterstandsgebied", "actiegebied", "afzetgebied", "akkerbouwgebied", "alpengebied", "amazonegebied", "ambtsgebied", "ambtsgewaad", "antigeluid", "aspergebed", "autonomiegebied", "baggereiland", "bangerd", "bijgeluid", "bijstandsgeld", "binnenduingebied", "blindengeleidehond", "blowgebodsbord", "boezemgebied", "bongerd", "bosgebied", "bridgeavond", "bridgebond", "bridgewedstrijd", "broedgebied", "brongebied", "budgetbeleid", "burgerbewind", "centrumgebied", "collegelid", "computergebied", "concentratiegebied", "conceptregeerakkoord", "concessiegebied", "conflictgebied", "contactgeluid", "crisisgebied", "cultuurgebied", "dankgebed", "deelgebied", "deelnemingenbeleid", "deltagebied", "deskundigheidsgebied", "dierengeluid", "doelgebied", "doodsgewaad", "doorgangsgebied", "dopgeld", "douanegebied", "drempelgeld", "driekoningenavond", "duinengebied", "duingebied", "eigendomsvoorbehoud", "energiegebied", "engerd", "eurogebied", "feestgewaad", "filmgebied", "foerageergebied", "formuliergebed", "frequentiegebied", "frontgebied", "functioneringsgebied", "gangenpaard", "gitaargeluid", "gitaargeweld", "golfgebied", "golflengtegebied", "graangebied", "grachtengebied", "grensgebied", "groeigebied", "groengebied", "groepsgeluid", "groepsgeweld", "grondgebied", "grondwaterbeschermingsgebied", "haflingerpaard", "handelsgebied", "havengebied", "heidegebied", "helikoptergeld", "herkomstgebied", "herwaarderingsgebied", "hogedrukgebied", "hogeronderwijsbeleid", "hongersnood", "hoogveengebied", "ICT-gebied", "immigratiegebied", "inburgeringsbeleid", "indicatiegebied", "industriegebied", "ingeland", "inkomgeld", "interessegebied", "jachtgebied", "jagershond", "jongerenbeleid", "jongerenblad", "kantorengebied", "kassengebied", "keelgeluid", "kennisgebied", "kerngebied", "kernwinkelgebied", "kijkgeld", "kindergeld", "kleigebied", "kloostergewaad", "knipooggeweld", "kogelwond", "koorgebed", "krapgeldbeleid", "krijgsgeweld", "krimpgebied", "kruisgebed", "kunstgebied", "kustgebied", "kwelgebied", "lagedrukgebied", "landbouwgebied", "langeafstandspaard", "langebaanwedstrijd", "langetermijnbeleid", "leefgebied", "leergebied", "leerstofgebied", "legerpaard", "legervoorraad", "levensgebied", "lidgeld", "logeerbed", "luchtvaartgebied", "luistergeld", "machtsgebied", "managementbeleid", "mandaatgebied", "manegepaard", "marktgebied", "mededelingenblad", "mededelingenbord", "mediageweld", "merengebied", "middaggebed", "middengebied", "mijngebied", "milieubeschermingsgebied", "milieugebied", "misgewaad", "missiegebied", "modegebied", "moerasgebied", "morgengebed", "Morgenland", "morgenstond", "moslimgebied", "motorgeluid", "muilkorfgebod", "nachtgewaad", "nagelbed", "natuurbeschermingsgebied", "natuurgebied", "natuurgeweld", "natuurontwikkelingsgebied", "NAVO-gebied", "NAVO-grondgebied", "nederzettingenbeleid", "neerslaggebied", "negerkind", "no-gogebied", "noodgebied", "noordpoolgebied", "Noordzeegebied", "oceaangebied", "octrooigebied", "oefengebied", "oerwoudgeluid", "oliegebied", "omgevingsbeleid", "omgevingsgeluid", "onderwijsgebied", "onderzoeksgebied", "onrustgebied", "ontwikkelingsgebied", "oorlogsgebied", "oorlogsgeweld", "oorsprongsgebied", "operatiegebied", "opleidingenaanbod", "opmarsgebied", "overgangsgebied", "overlastgebied", "overstromingsgebied", "overwinteringsgebied", "paaigebied", "partnergeweld", "ploegenwedstrijd", "poldergebied", "politiegeweld", "potpoldergebied", "presentiegeld", "priestergewaad", "regeerakkoord", "regelafstand", "regenboogkind", "regenboogzebrapad", "regenwoud", "regeringsaanbod", "regeringsbeleid", "regeringsraad", "regeringsstad", "reizigersaanbod", "richtingenstrijd", "roggebrood", "rouwgewaad", "rugzakgeld", "rustgebied", "rustgeld", "sabotagedaad", "samenwerkingsgebied", "schandegeld", "Schengenakkoord", "schietgebed", "schoolgeld", "servicegeweld", "slangenhuid", "sleutelgeld", "slotgebed", "smeekgebed", "smeergeldstad", "spaargeld", "spanningsgebied", "spiegelbeeld", "spiegelwand", "sportgebied", "spraakgeluid", "stemgeluid", "stiltegebied", "stoelgeld", "stormgeweld", "straatgeluid", "straatgeweld", "strafschopgebied", "supportersgeweld", "taalgebied", "tegelpad", "tegelwand", "tegenbod", "tegengeluid", "tegengeweld", "tegenspoed", "tegenwind", "televisiegeweld", "tussengebied", "uitgaansgeweld", "uitgeefbeleid", "uitgeversverbond", "uitgeverswereld", "ultrageluid", "vaargebied", "vagebond", "vakantiegeld", "veertigurengebed", "vegetariërsbond", "vingerhoed", "vliegtuiggeluid", "vluchtelingenbeleid", "voetbalgeweld", "vogelgeluid", "vogelwereld", "volksgezondheidsbeleid", "voorzieningenaanbod", "vormgevingsbeleid", "vredesgeluid", "vreemdelingenbeleid", "vrijdaggebed", "vrijgezellenavond", "vrijwilligersbeleid", "vuurwapengeweld", "wapengeweld", "waterbergingsgebied", "watergebied", "watergeweld", "werkgelegenheidsbeleid", "werkgeversaanbod", "werkgeversbond", "werkgeversverbond", "wetgevingsbeleid", "wiegenkind", "wijngebied", "wintersportgebied", "wisselgeld", "woestijngebied", "zakgeld", "zangersbond", "zeegebied", "zeehavengebied", "ziektegeld", "zigeunerkind", "zigeunerpaard", "zondegeld", "zorgenkind", "zwangerschapsmaand", "zwijggeld", "agent", "afgezant", "dirigent", "echtgenoot", "morgendienst", "apologeet", "budgetsupermarkt", "burgerdienst", "changement", "dorpsgenoot", "huisgenoot", "krankzinnigengesticht", "muggenbeet", "nagerecht", "omgevingsportret", "politieagent", "tijgerkat", "tussengerecht", "vogelmijt", "voorgerecht", "wegenwacht", "wegenzout", "wijkagent", "wisselagent", "zeegezicht", "zorgbudget", "aankoopbudget", "aardappelgerecht", "accountmanagement", "achterhoedegevecht", "adoptieagent", "advertentiebudget", "afspiegelingskabinet", "agendahedonist", "algemenebijstandswet", "amandelgeest", "ambtenarengerecht", "apengezicht", "arbeidsgerecht", "aspergerobot", "aspergeteelt", "assetmanagement", "baggerboot", "baggermarkt", "baggeropdracht", "baggerproject", "baggerschuit", "baggervloot", "balkanvergeet-mij-niet", "barricadegevecht", "bijgerecht", "boemerangeffect", "bouwmanagement", "bovengebit", "branchegenoot", "bridgejournalist", "bridgesport", "budget", "budgetrecht", "budgettekort", "bugnugget", "burgemeestersambt", "burgemeesterspost", "burgerdocent", "burgerplicht", "burgerpot", "burgerpresident", "burgerrecht", "burgerschapsrecht", "buurtagent", "buurtgenoot", "capaciteitsmanagement", "casemanagement", "celgenoot", "chef-dirigent", "CIA-agent", "clubgenoot", "coalitiegenoot", "collectiemanagement", "collegebesluit", "collegekaart", "collegestudent", "competentiemanagement", "crisismanagement", "defensiebudget", "depannagedienst", "deskundigenrapport", "disgenoot", "dopingexpert", "draagvleugelboot", "dreigement", "driekoningenfeest", "dubbelagent", "dwerggeit", "eerstgeboorterecht", "eigendomsrecht", "elftalgenoot", "enkelgewricht", "etalageruit", "ex-agent", "ex-echtgenoot", "exploitatiebudget", "FBI-agent", "fractiegenoot", "gadget", "garagepoort", "glogetuigschrift", "groentegerecht", "groentenugget", "grondgevecht", "halfgeleiderfabrikant", "halsgerecht", "halsgewricht", "hamburgerrestaurant", "hamburgertent", "handelsagent", "handgewricht", "hanengevecht", "hengelsport", "hersengadget", "heupgewricht", "hogeschooldocent", "hogeschoolstudent", "hokjesgeest", "hondengevecht", "hoofdagent", "hoofdgerecht", "horlogekast", "hotelmanagement", "huishoudbudget", "hulpagent", "huwelijksvermogensrecht", "inburgeringsplicht", "inburgeringstraject", "informatiemanagement", "ingenieursdienst", "ingenieursstudent", "inlichtingenrapport", "interim-management", "internetevangelist", "investeringsbudget", "inzagerecht", "jaarbudget", "jongerenkrant", "jongerenpaspoort", "kaakgewricht", "kaasgerecht", "kaasnugget", "kalfsgehakt", "kamergenoot", "kant-en-klaargerecht", "kantongerecht", "kennismanagement", "kipnugget", "klasgenoot", "kniegewricht", "kogelgewricht", "kooigevecht", "kredietmanagement", "kroegentocht", "kruidnagelsigaret", "kunstbudget", "kunstgeschiedenisdocent", "kunstgeschiedenisstudent", "kunstmanagement", "kussengevecht", "kwaliteitsmanagement", "kwelgeest", "lamsgehakt", "langetermijneffect", "leeftijdgenoot", "leeftijdsgenoot", "legercommandant", "legerdienst", "legerkrant", "legerpredikant", "legertent", "lievelingsgerecht", "logeergast", "lotgenotencontact", "loungerestaurant", "low budget", "lozingenbesluit", "luchtagent", "luchtgevecht", "lunchgerecht", "macrobudget", "management", "managementfout", "melkgeit", "mens-erger-je-niet", "mergelgrot", "milieumanagement", "miljoenenbudget", "mobiliteitsbudget", "moddergevecht", "monumentenbudget", "morgenlicht", "morgenpost", "motoragent", "muggenbult", "narcotica-agent", "NAVO-bondgenoot", "negerhut", "nepagent", "nugget", "ondergebit", "onderwijsbudget", "onderwijsmanagement", "onderzoeksbudget", "onderzoeksgerecht", "on-en-minvermogenkaart", "ongevallenwet", "onteigeningswet", "orgelconcert", "orgeldocent", "orgelkast", "overheidsbudget", "overheidsmanagement", "overnamegevecht", "overnemingsgevecht", "paardengebit", "passagebiljet", "pastagerecht", "persagent", "personeelsbudget", "personeelsmanagement", "plaggenhut", "ploegentijdrit", "pluimgewicht", "politiebudget", "polsgewricht", "postzegelformaat", "prestigeproject", "prins-regent", "procesmanagement", "productiebudget", "projectmanagement", "pseudovogelpest", "publiciteitsagent", "raffinageproduct", "reclamebudget", "reegeit", "regeerambt", "regelzucht", "regenboogtricot", "regenput", "regent", "regentaat", "regenwaterput", "regeringsapparaat", "regeringsbesluit", "regeringsbudget", "regeringskrant", "regeringsrapport", "regeringssoldaat", "reisagent", "reisbudget", "restauratiebudget", "rijksbudget", "rijstgerecht", "risicomanagement", "röntgenapparaat", "ruggenmergsvocht", "rundergehakt", "scharniergewricht", "scheidsgerecht", "schijngevecht", "schimmengevecht", "schoolagent", "schoolbegeleidingsdienst", "schoolgenoot", "schoolwijkagent", "schoudergewricht", "sergeant", "slangenbeet", "slangenhout", "slingerplant", "slowfoodgerecht", "soortgenoot", "spiegelgevecht", "spiegelkast", "spiegelruit", "spiegelschrift", "spiegeltent", "spinazienugget", "sportmanagement", "spronggewricht", "stagedocent", "stageopdracht", "stagerapport", "stierengevecht", "straatgevecht", "streekgerecht", "stressmanagement", "studentenbudget", "subsidiebudget", "taalgenoot", "tafelgenoot", "tafelgenot", "teamgeest", "tegenargument", "tegeneffect", "tegenkracht", "tentoonstellingsbudget", "tijdgeest", "tijdgenoot", "tijdmanagement", "tijdsgewricht", "tijgerpunt", "timemanagement", "titanengevecht", "titelgevecht", "topdirigent", "topmanagement", "totaalbudget", "totaalgewicht", "tweegevecht", "tweevingertest", "twintigeurobiljet", "undercoveragent", "urgentierecht", "veiligheidsagent", "veiligheidsarrangement", "veiligheidsmanagement", "vijftigeurobiljet", "vingerplant", "visgerecht", "visnugget", "vleesgerecht", "vleugelboot", "vliegenkast", "vliegerfeest", "vluchtelingenrecht", "vluchtelingentransport", "VN-gezant", "vogelmarkt", "vogeltjesmarkt", "vogelvangst", "vogelvlucht", "volksgericht", "voorlichtingsbudget", "vrachtwagenfabrikant", "vrachtwagenmarkt", "vragersmarkt", "vredegerecht", "vreemdelingenangst", "vreemdelingenbesluit", "vreemdelingendebat", "vreemdelingenrecht", "vreemdelingenstemrecht", "vuistgevecht", "vuurgevecht", "watergeest", "watergevecht", "watermanagement", "wegenbouwproject", "wereldtitelgevecht", "werkgelegenheidseffect", "werkgelegenheidsproject", "werkingsbudget", "wervelgewricht", "wetenschapsbudget", "wetgevingsproject", "wintergerst", "wintergezicht", "wrevelagent", "zadelgewricht", "zagevent", "zanger-componist", "zanger-gitarist", "zangerscast", "zangvogelsport", "zeegevecht", "zegelrecht", "zegetocht", "zelfmanagement", "ziekenhuisbudget", "zwangerschapstest", "goedgevuld", "aangebrand", "welgevuld", "afgeborsteld", "donkergekleurd", "goedgevormd", "welgevormd", "allesverzengend", "bontgekleurd", "doorgewinterd", "goedgehumeurd", "goedgeluimd", "goedgezind", "haatdragend", "kegeldragend", "lichtgekleurd", "nagelbijtend", "ongekleurd", "ongemanierd", "ongeverfd", "rentedragend", "risicodragend", "roodgekleurd", "slechtgehumeurd", "slechtgezind", "vruchtdragend", "welgemanierd", "welgezind", "welopgevoed", "woldragend", "zaaddragend", "zorgdragend", "aanbodgestuurd", "aangehuwd", "aangetekend", "aangetrouwd", "aanliggend", "aanmatigend", "aanvoegend", "achtereenvolgend", "achterliggend", "afgewend", "allesdoordringend", "allesvernietigend", "alleszeggend", "almogend", "alvermogend", "angstaanjagend", "bijstandsgerechtigd", "bloeddrukverhogend", "bloeddrukverlagend", "bloemdragend", "braakliggend", "brandvertragend", "breedgerand", "brildragend", "cholesterolverlagend", "christelijk-gereformeerd", "computergestuurd", "diepliggend", "doodgemoedereerd", "doordringend", "doorslaggevend", "dreigend", "drempelverlagend", "dringend", "dwingend", "eerstvolgend", "eierleggend", "Engelssprekend", "ergerniswekkend", "felgekleurd", "godtergend", "goedgekleed", "goedgemanierd", "goudgerand", "grensverleggend", "handenwringend", "hemeltergend", "hiernavolgend", "hogergenoemd", "hoogdringend", "hoopgevend", "indringend", "ingebeeld", "ingekankerd", "ingekeerd", "ingenaaid", "ingewikkeld", "ingeworteld", "intrigerend", "knoldragend", "kogelwerend", "laaggeletterd", "leidinggevend", "levensbedreigend", "levensbeëindigend", "levensverlengend", "lichtgevend", "lichtgewond", "liggend", "losliggend", "maatgevend", "meedogend", "minvermogend", "moedgevend", "naastliggend", "navolgend", "neerbuigend", "niet-geleidend", "nietszeggend", "normgevend", "oergezond", "omliggend", "onaangediend", "onbevredigend", "ondergewaardeerd", "onderliggend", "ondeugend", "ongeaccepteerd", "ongeanimeerd", "ongearticuleerd", "ongeautoriseerd", "ongecensureerd", "ongeciviliseerd", "ongeclausuleerd", "ongecompliceerd", "ongeconcentreerd", "ongeconditioneerd", "ongecontroleerd", "ongecoördineerd", "ongecorrigeerd", "ongecultiveerd", "ongedateerd", "ongedefinieerd", "ongedifferentieerd", "ongediplomeerd", "ongedisciplineerd", "ongedoubleerd", "ongeëmancipeerd", "ongeëmotioneerd", "ongeforceerd", "ongefrankeerd", "ongefundeerd", "ongegeneerd", "ongehavend", "ongehonoreerd", "ongeïdentificeerd", "ongeïnformeerd", "ongeïnspireerd", "ongeïnteresseerd", "ongekend", "ongekwalificeerd", "ongeleerd", "ongelimiteerd", "ongelinieerd", "ongematteerd", "ongemeend", "ongemeubileerd", "ongemonteerd", "ongemotiveerd", "ongemotoriseerd", "ongenuanceerd", "ongeoefend", "ongeopend", "ongeordend", "ongeorganiseerd", "ongepaneerd", "ongepermitteerd", "ongeprepareerd", "ongepubliceerd", "ongeraffineerd", "ongerealiseerd", "ongeregistreerd", "ongereglementeerd", "ongereguleerd", "ongesigneerd", "ongespecificeerd", "ongestoffeerd", "ongestructureerd", "ongestudeerd", "ongesubsidieerd", "ongevaccineerd", "ongewapend", "onsamenhangend", "onuitgenodigd", "onuitgevoerd", "onvermogend", "onwelgezind", "opeenvolgend", "opvliegend", "opvolgend", "orthodox-gereformeerd", "overtuigend", "overwegend", "overweldigend", "plaatsvervangend", "prangend", "raadgevend", "redengevend", "rentegevend", "rolbevestigend", "roodgeverfd", "rustgevend", "samenhangend", "schermdragend", "schrikaanjagend", "slechtgekleed", "sneldrogend", "statusverhogend", "stilzwijgend", "supergezond", "tegemoetkomend", "tergend", "toegevend", "toonaangevend", "tussenliggend", "uitdagend", "uitgekiend", "uitgeregend", "uitgerekend", "uitnodigend", "vakoverstijgend", "veelzeggend", "vigerend", "vleesvervangend", "vliegend", "volgend", "voorbijgestreefd", "vraaggestuurd", "vreesaanjagend", "Wajonggerechtigd", "waterbergend", "watergekoeld", "welgekend", "welgemeend", "werkgelegenheidsbevorderend", "wetgevend", "winstgevend", "witgehandschoend", "witgepleisterd", "witgeschilderd", "witgeverfd", "zelfcorrigerend", "zelfdragend", "zelfreinigend", "zelfvernietigend", "zelfverzorgend", "zieltogend", "zingevend", "zoetgeurend", "zogenaamd", "zogenoemd", "zwaargehavend", "zwaargewapend", "zwaargewond", "zwaarwegend", "zwartgeverfd", "zwijgend", "doelgericht", "ontwikkelingsgericht", "zwartgerokt", "arbeidsmarktgericht", "functiegericht", "goedgemutst", "kindgericht", "aanbodgericht", "aangedampt", "actiegericht", "arbeidsongeschikt", "brongericht", "buurtgericht", "cliëntgericht", "competentiegericht", "consumentgericht", "divergent", "doelgroepgericht", "doodongerust", "effectgericht", "ervaringsgericht", "exportgericht", "groepsgericht", "ingemaakt", "ingeroest", "innovatiegericht", "intelligent", "klantgericht", "kortgerokt", "maatschappijgericht", "marktgericht", "mensgericht", "nagelvast", "natuurgericht", "niet-gericht", "ongekuist", "ongericht", "onuitgebracht", "onuitgepakt", "onuitgewerkt", "oplossingsgericht", "persoonsgericht", "praktijkgericht", "prestatiegericht", "probleemgericht", "procesgericht", "productgericht", "publieksgericht", "resultaatgericht", "roodgelakt", "taakgericht", "themagericht", "toekomstgericht", "toepassingsgericht", "vakgericht", "voortgezet", "vraaggericht", "wijkgericht", "witgekalkt", "witgelakt", "zelfgemaakt", "zwartgelakt", "morgennacht", "negenduizend", "negenentwintigduizend", "negenhonderd", "negenhonderdduizend", "negentienduizend", "negentienhonderd", "negentigduizend", "morgenochtend", "desgevallend", "morgenavond", "zogezegd", "nergensland", "ontbijtbord", "onthaalbeleid", "onthaalkind", "ontmoedigingsbeleid", "ontmoetingsavond", "ontwapeningsakkoord", "ontwerpakkoord", "ontwerplandbouwakkoord", "ontwerpwedstrijd", "ontwikkelingsbeleid", "ontwikkelingshulpbeleid", "ontwikkelingsland", "ontbeend", "ontbrekend", "onthullend", "onthutsend", "ontkennend", "ontluisterend", "ontoereikend", "ontslagnemend", "ontsmettend", "ontspannend", "ontstekingsremmend", "ontstellend", "ontwapenend", "ontwijkend", "ontwikkeld", "ontzagwekkend", "ontzettend", "ontbijt", "onthardingszout", "ontzet", "ontbijtbuffet", "ontbindingsrecht", "ontdekkingstocht", "onterecht", "ontkoppelingsbesluit", "ontmijningsdienst", "ontslagbesluit", "ontslagdecreet", "ontslagrecht", "ontvangst", "ontwerpbesluit", "ontwerpfout", "ontwerpgrondwet", "ontwerpopdracht", "ontwerprapport", "ontwerpwet", "ontwikkelingspot", "ontwikkelingsproject", "herdershond", "herenakkoord", "herenblad", "herfstavond", "herfstblad", "herfstdraad", "herfstmaand", "herfstochtend", "herfstwind", "herkeuringsraad", "heroïnehond", "herseninhoud", "herstelbeleid", "hervormingsbeleid", "herfst", "hermafrodiet", "hert", "heraut", "herfstlucht", "heraanplant", "herdenkingsbijeenkomst", "herdenkingsconcert", "herdenkingsfeest", "heremietkreeft", "herfstnacht", "herfsttint", "herinneringskunst", "herkomst", "heroïnespuit", "heroïnetransport", "heroïnevangst", "herroepingsrecht", "hersenkracht", "hersenvlucht", "hersenvocht", "hersteldienst", "herstelrecht", "hervormingsproject", "erwt", "ernst", "erbovenuit", "ereambt", "eregast", "erepunt", "erfenisrecht", "erfrecht", "ergotherapeut", "ernaast", "eronderuit", "eropuit", "ertussenuit", "eruit", "ervanuit", "erytrocyt", "eredivisiewedstrijd", "erelid", "erfgoedbeleid", "erkenningsbeleid", "errond", "ervaringswereld", "gebaart", "gebeurt", "gebiedt", "gebood", "gedenkt", "gedraagt", "geeuwt", "gehoorzamt", "geilt", "geldt", "geelt", "gelooft", "geneest", "geniet", "genoot", "gerust", "geurt", "geeft", "besnuffelt", "bedeelt", "bedelt", "bekeert", "beugelt", "beamt", "beantwoordt", "beargumenteert", "beatblogt", "becijfert", "becommentariërt", "beconcurreert", "bedaart", "bedelft", "bedenkt", "bederft", "bedient", "bediscussiërt", "bedoelt", "bedraagt", "bedreigt", "bedriegt", "bedrijft", "bedroeft", "bedwingt", "beëindigt", "beeldbelt", "beetneemt", "beft", "begaat", "begeleidt", "begeert", "begeeft", "begint", "begraaft", "begrijpt", "begroeit", "behaalt", "behandelt", "behangt", "beheert", "behoedt", "behoeft", "behoort", "behoudt", "beïnvloedt", "bekent", "bekeurt", "bekijkt", "beklaagt", "bekleedt", "beklemt", "beklimt", "bekomt", "bekritiseert", "bekroont", "belandt", "beledigt", "belegt", "belemmert", "beleeft", "belt", "beloont", "belooft", "belparkeert", "beluistert", "bemeesteert", "bemeubelt", "bemoedigt", "bemoeit", "benadert", "benauwt", "beneemt", "bengelt", "benieuwt", "benoemt", "beogt", "beoordeelt", "bepaalt", "bepoteelt", "bereidt", "berekent", "berooft", "beschaamt", "beschaaft", "beschermt", "beschildert", "beschouwt", "beschrijft", "beschuldigt", "beslaat", "besloot", "besnijdt", "bespaart", "bespeurt", "bespioneert", "bespreekt", "bespringt", "bestaat", "bestempelt", "bestrijdt", "bestreed", "bestudeert", "bestuurt", "beswaffeelt", "betekent", "betert", "betont", "betonneert", "betovert", "betreedt", "betreft", "betrekt", "betreurt", "betwijfelt", "beult", "bevalt", "beeft", "bevindt", "bevoordeliigt", "bevordert", "bevraagt", "bevriest", "bewapent", "beweert", "bewijst", "bewondert", "bewoont", "bewonersparkeert", "bezaait", "bezeert", "beziet", "bezat", "bezoekt", "bezorgt", "bezuinigt", "bezweert", "verlaat", "verliet", "verschaalt", "verspringt", "vertelt", "veraangenaamt", "verabsoluteert", "verachtvoudiigt", "veradeemt", "verafgoodt", "verafschuwt", "veralgemeent", "verandert", "verankert", "verantwoordt", "verarmt", "verbabbelt", "verbaliseert", "verbant", "verbaast", "verbeeldt", "verbeidt", "verbergt", "verbetert", "verbeuzelt", "verbiedt", "verbood", "verbijstert", "verbindt", "verblijft", "verblindt", "verbouwt", "verbrandt", "verbreekt", "verdappert", "verdedigt", "verdeelt", "verdenkt", "verdient", "verdort", "verdooft", "verdraait", "verdraagt", "verdrijft", "verdringt", "verdrinkt", "verdroogt", "verdubbelt", "verdwaalt", "verdwijnt", "vereenvoudigt", "vet", "verenigt", "vereert", "vergaat", "vergadeert", "vergelijkt", "vergt", "vergeet", "vergat", "vergeeft", "vergiftigt", "vergoedt", "vergrendelt", "verhaalt", "verhangt", "verheldert", "verheugt", "verhindert", "verhoogt", "verhongert", "verhoudt", "verhuist", "verhuurt", "verifiërt", "verjaagt", "verkent", "verkeert", "verkiest", "verklaart", "verkleedt", "verkleint", "verkleurt", "verknoeit", "verkoopt", "verkreukelt", "verkrijgt", "verlaagt", "verlamt", "verlangt", "verleidt", "verleent", "verlengt", "verliest", "verloocheent", "verloopt", "verlooft", "verluiert", "verlummelt", "vermagert", "vermaalt", "vermangelt", "vermeldt", "vermengt", "vermenigvuldigt", "vermijdt", "vermindert", "vermoedt", "vermoeit", "vermolmt", "vermomt", "vermoordt", "vernauwt", "verneemt", "vernevelt", "vernielt", "vernietigt", "vernieuwt", "vernikkelt", "vernoemt", "vernummert", "veronaangenaamt", "veronachtzaamt", "veronderstelt", "verontheiliigt", "verontreinigt", "verontschuldigt", "veroordeelt", "veroorlooft", "verootmoediigt", "veropenbaart", "verordonneert", "verovert", "verpandt", "verpaupert", "verpietert", "verplegt", "verplettert", "verpulvert", "verraadt", "verried", "verrechtvaardiigt", "verregeent", "verreist", "verrekeent", "verrijdt", "verrijst", "verroert", "verrolt", "verronselt", "verruigt", "verruilt", "verruuwt", "verscheurt", "verschijnt", "verschilt", "verschimmelt", "verschoont", "verschraalt", "verschrijft", "verschroeit", "verschrompelt", "verschuilt", "versiert", "versimpelt", "versjachert", "versjouwt", "verslaat", "verslechtert", "versleutelt", "verslijt", "versleet", "verslindt", "verslond", "versluiert", "versluist", "versmaadt", "versmalt", "versmoort", "versnelt", "versnijdt", "versnippert", "versobert", "versoepelt", "versombert", "verspeelt", "verspeent", "verspert", "verspiedt", "verspilt", "verspint", "versplintert", "verspreidt", "verstaat", "verstond", "verstaalt", "verstart", "verstelt", "versteent", "versterft", "versteviigt", "verstijft", "verstilt", "verstomt", "verstoort", "verstoot", "verstiet", "verstouwt", "verstramt", "verstrengt", "verstrijkt", "verstrooit", "verstuift", "verstuurt", "verstuuwt", "versuikert", "versukkelt", "vertaalt", "vertedert", "vertegenwoordigt", "vertekeent", "verteert", "vertienvoudiigt", "vertilt", "vertimmert", "vertint", "vertoeft", "vertoont", "vertoornt", "vertraagt", "vertreedt", "vertroebelt", "vertroetelt", "vertrouwt", "vertwijfelt", "vervaagt", "vervaalt", "vervalt", "vervangt", "vervelt", "verft", "verveent", "verviervoudiigt", "vervijfvoudiigt", "vervliegt", "vervloeit", "vervluchtiigt", "vervoedeert", "vervoegt", "vervoert", "vervolgt", "vervollediigt", "vervordert", "vervormt", "vervreemdt", "vervroegt", "vervuilt", "vervult", "verwaait", "verwaardiigt", "verwaarloost", "verwarmt", "verwart", "verwaseemt", "verwatert", "verwedt", "verwelkoomt", "verweert", "verwerpt", "verwerft", "verweeft", "verwijdt", "verwijdert", "verwijlt", "verwijft", "verwikkelt", "verwildert", "verwint", "verwintert", "verwisselt", "verwittiigt", "verwondt", "verwondert", "verwoont", "verwoordt", "verwringt", "verwurgt", "verzaagt", "verzandt", "verzegelt", "verzegt", "verzeilt", "verzekert", "verzelfstandiigt", "verzendt", "verzengt", "verzesvoudiigt", "verzilvert", "verzinnebeeldt", "verzint", "verzoekt", "verzoent", "verzoolt", "verzuilt", "verzuurt", "verzusteert", "verzwagert", "verzwaart", "verzwelgt", "verzwendelt", "verzweert", "verzwijgt", "ontbiedt", "ontbood", "ontbeet", "ontbindt", "ontbolstert", "ontbraamt", "ontbreekt", "ontcijfert", "ontdoet", "ontdeed", "ontdooit", "ontdubbelt", "onteert", "onterft", "ontgaat", "ontgeldt", "ontglijdt", "ontgloeit", "ontgraaft", "ontgrendelt", "ontgroeit", "ontgroent", "onthaalt", "onthalst", "onthardt", "onthaart", "ontheft", "ontheiligt", "onthoofdt", "onthoudt", "onthield", "onthult", "ontkent", "ontketeent", "ontkiemt", "ontkleurt", "ontkoomt", "ontkoppelt", "ontlaadt", "ontleent", "ontleert", "ontloopt", "ontluist", "ontmengt", "ontmijnt", "ontmoedigt", "ontmythologiseert", "ontneemt", "ontradicaliseert", "ontroert", "ontrommeelt", "ontruimt", "ontslaat", "ontspant", "ontspult", "ontstaat", "ontstond", "ontsteekt", "ontvangt", "ontvoert", "ontvolgt", "ontvoogdt", "ontvriendt", "ontvriest", "ontwerpt", "ontwijkt", "ontwikkelt", "ontzwavelt", "herdenkt", "herdacht", "ergert", "ekent", "eruitzit", "ervaart", "erft"];
var $$ = {}, Zz = {};
Object.defineProperty(Zz, "__esModule", {
  value: !0
});
Zz.default = void 0;
Zz.default = ["aaneengedraaid", "aaneengeschakeld", "aanschouwd", "aanvaard", "achtergebleven", "achtergelaten", "achterhaald", "achteromgekeken", "achteropgekomen", "achteruitgegaan", "achtervolgd", "ademgehaald", "bedolven", "bedongen", "bedorven", "bedragen", "bedreven", "bedrogen", "bedropen", "bedwongen", "beetgenomen", "begeven", "begonnen", "begraven", "begrepen", "behangen", "behouden", "bekeken", "beklommen", "bekomen", "bekropen", "beleden", "belezen", "benomen", "beraden", "beschenen", "beschoten", "beschreven", "beslagen", "beslopen", "besloten", "besneden", "besproken", "besprongen", "bestegen", "bestolen", "bestorven", "bestreden", "bestreken", "betreden", "betroffen", "betrokken", "bevallen", "bevochten", "bevolen", "bevonden", "bevroren", "bewezen", "bewogen", "bezeten", "bezien", "beziggehouden", "bezonnen", "bezweken", "bezworen", "bijeengehouden", "bijeengeroepen", "blootgelegd", "blootgesteld", "bovengehaald", "brandgesticht", "buitengesloten", "buitgemaakt", "deelgenomen", "dichtgebonden", "dichtgedaan", "diepgevroren", "doodgegaan", "doorbladerd", "doorboord", "doorbroken", "doordacht", "doordrongen", "doorgrond", "doorkruist", "doorlopen", "doorsneden", "doorstaan", "doorverteld", "doorzien", "doorzocht", "drooggelegd", "dwarsgezeten", "ervaren", "flauwgevallen", "gebakken", "gebannen", "gebarsten", "gebeden", "gebersten", "gebeten", "geblazen", "gebleken", "gebleven", "geblonken", "geboden", "gebogen", "gebonden", "geboren", "geborgen", "geborsten", "gebraden", "gebroken", "gebrouwen", "gedaan", "gedoken", "gedolven", "gedongen", "gedragen", "gedreten", "gedreven", "gedrongen", "gedronken", "gedropen", "gedwongen", "gefloten", "gegeten", "gegeven", "gegleden", "geglommen", "gegolden", "gegoten", "gegraven", "gegrepen", "gehangen", "gehesen", "geheven", "geholpen", "gehouden", "gehouwen", "gekeken", "geklommen", "geklonken", "gekloven", "geknepen", "gekomen", "gekorven", "gekozen", "gekregen", "gekresen", "gekreten", "gekrompen", "gekrooien", "gekropen", "gekunnen", "gekweten", "gelachen", "geladen", "gelaten", "geleden", "gelegen", "geleken", "gelezen", "gelogen", "geloken", "gelopen", "gemalen", "gemeden", "gemeten", "gemoeten", "gemogen", "gemolken", "genegen", "genezen", "genomen", "genoten", "geprezen", "geraden", "gereden", "geregen", "gereten", "gerezen", "geroepen", "geroken", "geschapen", "gescheiden", "geschenen", "gescheten", "gescholden", "gescholen", "geschonden", "geschonken", "geschoren", "geschoten", "geschoven", "geschreden", "geschreven", "geschrokken", "geslagen", "geslapen", "geslepen", "gesleten", "geslonken", "geslopen", "gesloten", "gesmeten", "gesmolten", "gesneden", "gesnoten", "gesnoven", "gespannen", "gespeten", "gespleten", "gesponnen", "gespoten", "gesproken", "gesprongen", "gesproten", "gestegen", "gestoken", "gestolen", "gestonken", "gestoten", "gestoven", "gestreden", "gestreken", "getreden", "getroffen", "getrokken", "gevallen", "gevangen", "gevangengenomen", "gevaren", "gevezen", "gevlochten", "gevloden", "gevlogen", "gevloten", "gevochten", "gevonden", "gevouwen", "gevreten", "gevroren", "gewassen", "geweken", "geweten", "geweven", "gewezen", "gewogen", "gewonden", "gewonnen", "geworden", "geworpen", "geworven", "gewoven", "gewreten", "gewreven", "gewrongen", "gezegen", "gezeken", "gezeten", "gezien", "gezoden", "gezogen", "gezonden", "gezongen", "gezonken", "gezonnen", "gezopen", "gezouten", "gezwegen", "gezwolgen", "gezwollen", "gezwommen", "gezwonden", "gezworen", "gezworven", "hardgelopen", "herladen", "hernomen", "herwonnen", "herzien", "huisgehouden", "kennisgemaakt", "klaargekomen", "kortgesloten", "kwaadgesproken", "kwijtgeraakt", "kwijtgescholden", "langsgekomen", "leeggelopen", "leeggemaakt", "lesgegeven", "liefgehad", "lipgelezen", "meebetaald", "misbruikt", "misleid", "mislukt", "misprezen", "nabewerkt", "nedergedaald", "omarmd", "omfloerst", "omhelsd", "omkleed", "omklemd", "ommuurd", "omringd", "omschreven", "omsingeld", "omsloten", "omvat", "omvergeworpen", "omwikkeld", "omwonden", "omzeild", "omzoomd", "omzworven", "onderbouwd", "onderbroken", "onderdrukt", "ondergaan", "ondergraven", "onderhandeld", "onderhouden", "onderkend", "ondermijnd", "ondernomen", "onderscheiden", "onderschept", "ondersteund", "onderstreept", "ondertekend", "onderverdeeld", "ondervonden", "ondervraagd", "onderwezen", "onderworpen", "onderzocht", "ontbeten", "ontboden", "ontbonden", "ontbroken", "ontdoken", "ontgonnen", "onthouden", "ontkomen", "ontladen", "ontloken", "ontlopen", "ontnomen", "ontraden", "ontslagen", "ontsloten", "ontspannen", "ontsprongen", "ontsproten", "ontstoken", "onttrokken", "ontvangen", "ontweken", "schoongemaakt", "schoongewassen", "stilgestaan", "tandengepoetst", "tegemoetgekomen", "teleurgesteld", "teloorgegaan", "terechtgekomen", "terechtgesteld", "teweeggebracht", "thuisbezorgd", "thuisgekomen", "toebehoord", "toevertrouwd", "tussengekomen", "tussengeworpen", "uitbesteed", "uitbetaald", "uitvergroot", "uitverkocht", "valsgespeeld", "verbannen", "verbleven", "verboden", "verbogen", "verbonden", "verborgen", "verbroken", "verdragen", "verdreven", "verdrongen", "verdronken", "verdroten", "verdwenen", "vergeleken", "vergeten", "vergeven", "vergleden", "vergolden", "vergoten", "vergrepen", "verhangen", "verheven", "verholpen", "verhouden", "verkozen", "verkregen", "verladen", "verlaten", "verlopen", "verloren", "vermeden", "vermogen", "vernomen", "verraden", "verrezen", "verscheiden", "verschenen", "verscholen", "verschoten", "verschoven", "verschreven", "verschrokken", "verslagen", "verslapen", "versleten", "verslonden", "versmolten", "verstoten", "verstreken", "vertrokken", "vervallen", "vervangen", "vervlogen", "verweten", "verweven", "verwezen", "verworpen", "verworven", "verwrongen", "verzonden", "verzonken", "verzonnen", "verzopen", "verzouten", "verzwonden", "volbracht", "voldaan", "voleindigd", "volhard", "volmaakt", "volstaan", "voltooid", "voltrokken", "voorbehouden", "voorkomen", "voorspeld", "voorzien", "wederhaald", "weergalmd", "weerhouden", "weerkaatst", "weerlegd", "weerstaan"];
Object.defineProperty($$, "__esModule", {
  value: !0
});
$$.default = aQa;
var YYa = K, QYa = ee, XYa = ZYa(Zz);
function ZYa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: JYa,
  matchRegularParticiples: eQa
} = QYa.languageProcessing;
function aQa(e) {
  const a = JYa(e), t = [/^(ge|be|ont|ver|her|er)\S+([dt])($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig, /^(aan|af|bij|binnen|los|mee|na|neer|om|onder|samen|terug|tegen|toe|uit|vast)(ge)\S+([dtn])($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig];
  return a.filter((n) => eQa(n, t).length !== 0 || (0, YYa.includes)(XYa.default, n));
}
Object.defineProperty(Xz, "__esModule", {
  value: !0
});
Xz.default = void 0;
var tQa = K, nQa = ee, rQa = bt, sQa = zB(Sp), iQa = zB($$);
function zB(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  directPrecedenceException: oQa,
  values: lQa
} = nQa.languageProcessing, {
  Clause: dQa
} = lQa;
class uQa extends dQa {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, iQa.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found and there is an auxiliary present, the clause is passive.
   *
   * @returns {void}
   */
  checkParticiples() {
    const a = this.getParticiples().filter((t) => !(0, tQa.includes)(sQa.default, t) && !this.hasNonParticipleEnding(t) && !oQa(this.getClauseText(), t, rQa.cannotDirectlyPrecedePassiveParticiple));
    this.setPassive(a.length > 0);
  }
  /**
   * Checks whether a found participle has a non-participle ending and is therefore not really a participle.
   *
   * @param {string} participle   The participle to check.
   *
   * @returns {boolean} Returns true if the participle has a non-participle ending, otherwise returns false.
   */
  hasNonParticipleEnding(a) {
    return /\S+(heid|teit|tijd)($|[ \n\r\t.,'()"+\-;!?:/»«‹›<>])/ig.test(a);
  }
}
Xz.default = uQa;
var Jz = {};
Object.defineProperty(Jz, "__esModule", {
  value: !0
});
Jz.default = void 0;
Jz.default = ["word", "wordt", "worden", "werd", "werden", "wordend"];
Object.defineProperty(T$, "__esModule", {
  value: !0
});
T$.default = yQa;
var cQa = ee, pQa = j$(Xz), gQa = j$(Jz), mQa = j$(xp);
function j$(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getClausesSplitOnStopWords: fQa,
  createRegexFromArray: vR
} = cQa.languageProcessing, hQa = {
  Clause: pQa.default,
  regexes: {
    auxiliaryRegex: vR(gQa.default),
    stopwordRegex: vR(mQa.default)
  }
};
function yQa(e) {
  return fQa(e, hQa);
}
var x$ = {}, S$ = {}, O$ = {}, I$ = {}, zl = {};
Object.defineProperty(zl, "__esModule", {
  value: !0
});
zl.isVowelDoublingAllowed = EQa;
zl.modifyStem = _Qa;
var zQa = ee;
const {
  exceptionListHelpers: {
    checkIfWordEndingIsOnExceptionList: bQa,
    checkIfWordIsOnListThatCanHavePrefix: bB
  }
} = zQa.languageProcessing, wQa = function(e, a, t) {
  if (bQa(e, a.endingMatch) || bB(e, a.verbs, t) || a.exactMatch.includes(e))
    return !0;
}, vQa = function(e) {
  const a = e.charAt(e.length - 4), t = e.charAt(e.length - 3);
  return a !== t;
}, kQa = function(e, a) {
  return e.search(new RegExp(a)) === -1;
};
function _Qa(e, a) {
  const t = a.find((n) => e.search(new RegExp(n[0])) !== -1);
  return typeof t < "u" && (e = e.replace(new RegExp(t[0]), t[1])), e;
}
function EQa(e, a, t) {
  const n = bB(e, a.getVowelDoubling, t), r = wQa(e, a.noVowelDoubling, t), o = vQa(e), l = kQa(e, a.noVowelDoubling.rule);
  return n || !r && o && l;
}
Object.defineProperty(I$, "__esModule", {
  value: !0
});
I$.default = SQa;
var No = zl;
const AQa = function(e) {
  let a = e.search(/[aeiouyèäüëïöáéíóú][^aeiouyèäüëïöáéíóú]/);
  return a !== -1 && (a += 2), a !== -1 && a < 3 && (a = 3), a;
}, TQa = function(e, a, t) {
  const n = Object.entries(a);
  for (const r of n) {
    const l = r[1].suffixes.find((u) => new RegExp(u).exec(e));
    if (l) {
      const u = new RegExp(l).exec(e), c = u[u.length - 1], f = e.lastIndexOf(c);
      if (t !== -1 && f >= t)
        return {
          suffixIndex: f,
          stemModification: r[1].stemModification
        };
    }
  }
}, $Qa = function(e, a, t, n, r) {
  return n === "hedenToHeid" ? (0, No.modifyStem)(e, r.regularStemmer.stemModifications.hedenToHeid) : (e = e.substring(0, t), n === "changeIedtoId" ? (0, No.modifyStem)(e, r.regularStemmer.stemModifications.iedToId) : n === "changeInktoIng" && e.endsWith("ink") ? (0, No.modifyStem)(e, r.regularStemmer.stemModifications.inkToIng) : n === "vowelDoubling" && (0, No.isVowelDoublingAllowed)(e, r.regularStemmer.stemModifications.exceptionsStemModifications, r.pastParticipleStemmer.compoundVerbsPrefixes) ? (0, No.modifyStem)(e, r.regularStemmer.stemModifications.doubleVowel) : e);
}, jQa = function(e, a, t, n) {
  const r = TQa(e, a, t);
  return typeof r < "u" && (e = $Qa(e, a, r.suffixIndex, r.stemModification, n)), e;
}, xQa = function(e, a, t, n) {
  const r = Object.entries(a);
  for (const o of r)
    e = jQa(e, o[1], t, n);
  return e;
};
function SQa(e, a) {
  e = (0, No.modifyStem)(e, a.regularStemmer.stemModifications.IAndYToUppercase);
  const t = AQa(e), n = a.regularStemmer.suffixes;
  return e = xQa(e, n, t, a), (0, No.modifyStem)(e, a.regularStemmer.stemModifications.finalChanges);
}
var eb = {};
Object.defineProperty(eb, "__esModule", {
  value: !0
});
eb.generateCorrectStemWithTAndDEnding = PQa;
var OQa = ee, wB = zl;
const {
  regexHelpers: {
    searchAndReplaceWithRegex: u0,
    doesWordMatchRegex: C$
  },
  exceptionListHelpers: {
    checkIfWordEndingIsOnExceptionList: vB,
    checkIfWordIsOnListThatCanHavePrefix: IQa
  }
} = OQa.languageProcessing, kR = function(e, a, t) {
  if (C$(t, a[0])) {
    const n = t.replace(new RegExp(a[0]), a[1]);
    if ((0, wB.isVowelDoublingAllowed)(n, e.regularStemmer.stemModifications.exceptionsStemModifications, e.pastParticipleStemmer.compoundVerbsPrefixes)) {
      const r = u0(n, e.regularStemmer.stemModifications.doubleVowel);
      return r || n;
    }
    return n;
  }
  return null;
}, CQa = function(e, a) {
  const t = a.ambiguousTAndDEndings.tOrDArePartOfStem;
  let n = u0(e, t.firstTOrDPartOfStem);
  if (n)
    return n;
  if (t.verbsDenShouldBeStemmed.includes(e))
    return e.slice(0, -3);
  if (vB(e, t.wordsStemOnlyEnEnding.endingMatch) || IQa(e, t.wordsStemOnlyEnEnding.verbs, a.pastParticipleStemmer.compoundVerbsPrefixes) || C$(e, t.denEnding)) {
    if (n = e.slice(0, -2), (0, wB.isVowelDoublingAllowed)(n, a.regularStemmer.stemModifications.exceptionsStemModifications, a.pastParticipleStemmer.compoundVerbsPrefixes)) {
      const l = u0(n, a.regularStemmer.stemModifications.doubleVowel);
      return l || n;
    }
    return n;
  }
  const r = t.deEnding;
  if (n = kR(a, r, e), n)
    return n;
  const o = t.teAndTenEndings;
  return n = kR(a, o, e), n || null;
};
function PQa(e, a) {
  if (vB(a, e.ambiguousTAndDEndings.wordsTShouldBeStemmed))
    return a.slice(0, -1);
  if (C$(a, e.ambiguousTAndDEndings.tOrDArePartOfStem.tEnding))
    return a;
  const t = CQa(a, e);
  return t || null;
}
var ab = {};
Object.defineProperty(ab, "__esModule", {
  value: !0
});
ab.default = qQa;
var P$ = K, RQa = ee;
const {
  flattenSortLength: DQa
} = RQa.languageProcessing, NQa = function(e, a, t) {
  const r = DQa(t).find((o) => e.startsWith(o));
  typeof r == "string" && (e = e.slice(r.length));
  for (let o = 0; o < a.length; o++) {
    const l = (0, P$.flatten)(a[o]);
    for (let u = 0; u < l.length; u++)
      if (l.includes(e))
        return typeof r == "string" ? r + l[0] : l[0];
  }
  return null;
}, LQa = function(e, a) {
  for (let t = 0; t < a.length; t++) {
    const n = (0, P$.flatten)(a[t]);
    for (let r = 0; r < n.length; r++)
      if (e.endsWith(n[r])) {
        const o = e.slice(0, -n[r].length);
        return o.length === 1 ? null : o.length > 1 ? o + n[0] : n[0];
      }
  }
  return null;
}, MQa = function(e, a) {
  for (let t = 0; t < a.length; t++) {
    const n = (0, P$.flatten)(a[t]);
    for (let r = 0; r < n.length; r++)
      if (n.includes(e))
        return n[0];
  }
  return null;
};
function qQa(e, a) {
  const t = e.stemExceptions.stemmingExceptionStemsWithFullForms;
  let n = NQa(a, t.verbs, e.pastParticipleStemmer.compoundVerbsPrefixes);
  return n || (n = LQa(a, t.endingMatch), n) || (n = MQa(a, t.exactMatch), n) ? n : null;
}
var tb = {};
Object.defineProperty(tb, "__esModule", {
  value: !0
});
tb.detectAndStemRegularParticiple = XQa;
var FQa = ee, BQa = UQa(Sp), WQa = zl;
function UQa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  regexHelpers: {
    doesWordMatchRegex: HQa
  }
} = FQa.languageProcessing, R$ = function(e, a) {
  return e.includes(a) ? a.slice(0, -1) : null;
}, kB = function(e, a) {
  return e.endsWith("t") ? a.ambiguousTAndDEndings.wordsTShouldBeStemmed.includes(e) ? !0 : HQa(e, a.ambiguousTAndDEndings.tOrDArePartOfStem.tEnding) ? !1 : !a.stemExceptions.wordsNotToBeStemmedExceptions.verbs.includes(e) : !a.pastParticipleStemmer.doNotStemD.includes(e);
}, GQa = function(e, a) {
  if (new RegExp("^" + e.pastParticipleStemmer.participleStemmingClasses[0].regex).test(a)) {
    const n = R$(e.pastParticipleStemmer.doNotStemGe, a);
    if (n)
      return n;
    let r = a.slice(2);
    return r.startsWith("ë") && (r = "e" + r.slice(1)), kB(r, e) ? r.slice(0, -1) : r;
  }
  return null;
}, VQa = function(e, a, t, n, r) {
  for (const o of n)
    if (new RegExp("^" + o + r).test(a)) {
      let u = a.slice(o.length - a.length);
      if (t) {
        const c = R$(e.pastParticipleStemmer.doNotStemGe, u);
        if (c)
          return o + c;
        u = u.slice(2);
      }
      return u.startsWith("ë") && (u = "e" + u.slice(1)), kB(u, e) ? o + u.slice(0, -1) : o + u;
    }
  return null;
}, KQa = function(e, a) {
  for (const t of e.pastParticipleStemmer.participleStemmingClasses) {
    const n = t.regex, r = t.separable, o = r ? e.pastParticipleStemmer.compoundVerbsPrefixes.separable : e.pastParticipleStemmer.compoundVerbsPrefixes.inseparable, l = VQa(e, a, r, o, n);
    if (l)
      return l;
  }
  return null;
}, YQa = function(e, a) {
  return e.includes(a);
}, QQa = function(e, a, t, n) {
  return e.map((o) => n.startsWith(o)).some((o) => o === !0) && n.endsWith("end") && !a.includes(n) ? (0, WQa.modifyStem)(n.slice(0, -3), t) : null;
};
function XQa(e, a) {
  if (a.endsWith("heid") || a.endsWith("teit") || a.endsWith("tijd") || BQa.default.includes(a))
    return "";
  if (YQa(e.pastParticipleStemmer.inseparableCompoundVerbsNotToBeStemmed, a))
    return a;
  let t = GQa(e, a);
  return t || (t = R$(e.pastParticipleStemmer.inseparableCompoundVerbs, a), t) || (t = QQa(e.pastParticipleStemmer.compoundVerbsPrefixes.inseparable, e.pastParticipleStemmer.pastParticiplesEndingOnEnd, e.regularStemmer.stemModifications.finalChanges, a), t) || (t = KQa(e, a), t) ? t : null;
}
Object.defineProperty(O$, "__esModule", {
  value: !0
});
O$.default = dXa;
var ZQa = ee, JQa = _B(I$), eXa = eb, aXa = _B(ab), tXa = tb, im = zl;
function _B(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  exceptionListHelpers: {
    checkIfWordEndingIsOnExceptionList: nXa,
    checkIfWordIsOnListThatCanHavePrefix: rXa
  },
  stemHelpers: {
    removeSuffixFromFullForm: sXa,
    removeSuffixesFromFullForm: iXa
  }
} = ZQa.languageProcessing, oXa = function(e, a) {
  for (const t of e.stemExceptions.removeSuffixesFromFullForms) {
    const n = iXa(t.forms, t.suffixes, a);
    if (n)
      return n;
  }
  for (const t of e.stemExceptions.removeSuffixFromFullForms) {
    const n = sXa(t.forms, t.suffix, a);
    if (n)
      return n;
  }
}, lXa = function(e, a) {
  let t = oXa(a, e);
  return t ? ((0, im.isVowelDoublingAllowed)(t, a.regularStemmer.stemModifications.exceptionsStemModifications, a.pastParticipleStemmer.compoundVerbsPrefixes) && (t = (0, im.modifyStem)(t, a.regularStemmer.stemModifications.doubleVowel)), (0, im.modifyStem)(t, a.regularStemmer.stemModifications.finalChanges)) : null;
};
function dXa(e, a) {
  let t = (0, aXa.default)(a, e);
  if (t || (t = (0, tXa.detectAndStemRegularParticiple)(a, e), t))
    return t;
  const n = a.stemExceptions.wordsNotToBeStemmedExceptions;
  if (rXa(e, n.verbs, a.pastParticipleStemmer.compoundVerbsPrefixes) || nXa(e, n.endingMatch) || n.exactMatch.includes(e))
    return e;
  const r = a.ambiguousTAndDEndings.otherTAndDEndings;
  for (const o of r)
    if (e.endsWith(o) && (t = (0, eXa.generateCorrectStemWithTAndDEnding)(a, e), t))
      return t;
  return t = lXa(e, a), t || (0, JQa.default)(e, a);
}
var D$ = {};
Object.defineProperty(D$, "__esModule", {
  value: !0
});
D$.stemTOrDFromEndOfWord = yXa;
var uXa = ee, cXa = tb, pXa = eb, gXa = mXa(ab);
function mXa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  exceptionListHelpers: {
    checkIfWordEndingIsOnExceptionList: _R,
    checkIfWordIsOnListThatCanHavePrefix: fXa
  }
} = uXa.languageProcessing, hXa = function(e, a, t) {
  const n = e.stemExceptions.wordsNotToBeStemmedExceptions, r = e.stemExceptions.removeSuffixesFromFullForms[1].forms, o = e.ambiguousTAndDEndings.tOrDArePartOfStem.doNotStemTOrD;
  if ((0, cXa.detectAndStemRegularParticiple)(e, t) || (0, pXa.generateCorrectStemWithTAndDEnding)(e, t) || fXa(t, n.verbs, e.pastParticipleStemmer.compoundVerbsPrefixes) || _R(t, n.endingMatch) || n.exactMatch.includes(t) || r.includes(a) || (0, gXa.default)(e, t) || a.endsWith("heid") || _R(a, o))
    return !0;
};
function yXa(e, a, t) {
  return hXa(e, a, t) ? null : a.slice(0, -1);
}
Object.defineProperty(S$, "__esModule", {
  value: !0
});
S$.default = TXa;
var zXa = K, bXa = ee, wXa = kXa(O$), vXa = D$;
function kXa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  flattenSortLength: _Xa,
  exceptionListHelpers: {
    checkExceptionListWithTwoStems: EXa
  }
} = bXa.languageProcessing, $k = function(e, a) {
  for (const t of Object.keys(e))
    for (const n of e[t]) {
      const r = (0, zXa.flatten)(Object.values(n));
      if (r.includes(a))
        return r[0];
    }
}, AXa = function(e, a) {
  let n = _Xa(e.pastParticipleStemmer.compoundVerbsPrefixes).find((f) => a.startsWith(f));
  const o = e.stemExceptions.stemmingExceptionsWithMultipleStems.strongAndIrregularVerbs.doNotStemPrefix.find((f) => a.endsWith(f));
  let l = "";
  o ? n = null : n && (l = a.slice(n.length, a.length), l.length > 2 ? a = l : n = null);
  const u = e.stemExceptions.stemmingExceptionsWithMultipleStems.strongAndIrregularVerbs.strongVerbStems, c = [u.irregularStrongVerbs, u.regularStrongVerbs, u.bothRegularAndIrregularStrongVerbs];
  for (let f = 0; f < c.length; f++)
    if ($k(c[f], a))
      return n ? n + $k(c[f], a) : $k(c[f], a);
};
function TXa(e, a) {
  const t = (0, wXa.default)(e, a);
  let n = EXa(a.stemExceptions.stemmingExceptionsWithMultipleStems.stemmingExceptionsWithTwoStems, t);
  if (n || (n = AXa(a, t), n))
    return n;
  const r = a.ambiguousTAndDEndings.tAndDEndings;
  for (const o of r)
    if (t.endsWith(o)) {
      const l = (0, vXa.stemTOrDFromEndOfWord)(a, t, e);
      if (l)
        return l;
    }
  return t;
}
Object.defineProperty(x$, "__esModule", {
  value: !0
});
x$.default = IXa;
var $Xa = K, jXa = ee, xXa = SXa(S$);
function SXa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: OXa
} = jXa.languageProcessing;
function IXa(e) {
  const a = (0, $Xa.get)(e.getData("morphology"), "nl", !1);
  return a ? (t) => (0, xXa.default)(t, a) : OXa;
}
var N$ = {};
Object.defineProperty(N$, "__esModule", {
  value: !0
});
N$.default = RXa;
var CXa = ee;
const {
  formatNumber: PXa
} = CXa.helpers;
function RXa(e) {
  const a = 206.84 - 0.77 * e.syllablesPer100Words - 0.93 * e.averageWordsPerSentence;
  return PXa(a);
}
Object.defineProperty(y$, "__esModule", {
  value: !0
});
var EB = y$.default = void 0, DXa = ee, NXa = pi(Kz), LXa = bt, MXa = pi(xp), qXa = pi(Ir), FXa = pi(Yz), BXa = pi(KYa), WXa = pi(Qz), UXa = pi(T$), HXa = pi(x$), GXa = pi(N$);
function pi(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: VXa
} = DXa.languageProcessing;
let KXa = class extends VXa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), Object.assign(this.config, {
      language: "nl",
      passiveConstructionType: "periphrastic",
      firstWordExceptions: NXa.default,
      functionWords: LXa.all,
      stopWords: MXa.default,
      transitionWords: qXa.default,
      twoPartTransitionWords: FXa.default,
      syllables: BXa.default,
      keyphraseLength: WXa.default
    }), Object.assign(this.helpers, {
      getClauses: UXa.default,
      getStemmer: HXa.default,
      fleschReadingScore: GXa.default
    });
  }
};
EB = y$.default = KXa;
var L$ = {}, nb = {};
Object.defineProperty(nb, "__esModule", {
  value: !0
});
nb.default = void 0;
nb.default = [
  // Numbers 1-10:
  "jeden",
  "jedna",
  "jedno",
  "dwa",
  "dwie",
  "trzy",
  "cztery",
  "pięć",
  "sześć",
  "siedem",
  "osiem",
  "dziewięć",
  "dziesięć",
  // Demonstrative pronouns:
  "ta",
  "to",
  "ten",
  "te",
  "ci",
  "taki",
  "tacy",
  "taka",
  "taką",
  "takich",
  "takie",
  "takiego",
  "takiej",
  "takiemu",
  "takim",
  "takimi",
  "tamten",
  "tamta",
  "tamto",
  "tamci",
  "tamte",
  "tamtą",
  "tamtego",
  "tamtej",
  "tamtemu",
  "tamtych",
  "tamtym",
  "tamtymi",
  "tą",
  "tę",
  "tego",
  "tej",
  "temu",
  "tych",
  "tymi",
  "tym",
  "tak"
];
var wt = {}, Cr = {};
Object.defineProperty(Cr, "__esModule", {
  value: !0
});
Cr.singleWords = Cr.multipleWords = Cr.default = Cr.allWords = void 0;
const YXa = Cr.singleWords = ["aby", "abym", "abyśmy", "abyś", "abyście", "acz", "aczkolwiek", "albowiem", "ale", "aliści", "bo", "bowiem", "bynajmniej", "choć", "chociaż", "chociażby", "czyli", "dlatego", "dodatkowo", "dopóki", "dotychczas", "faktycznie", "gdy", "gdyż", "jakkolwiek", "iż", "jednak", "jednakże", "jeśli", "kiedy", "lecz", "mianowicie", "mimo", "np", "najpierw", "następnie", "natomiast", "ni", "niemniej", "niż", "notabene", "oczywiście", "ogółem", "ostatecznie", "owszem", "podobnie", "podsumowując", "pokrótce", "pomimo", "ponadto", "ponieważ", "poprzednio", "potem", "później", "przecież", "przeto", "przynajmniej", "raczej", "również", "rzeczywiście", "skoro", "także", "też", "toteż", "tudzież", "tymczasem", "wedle", "według", "więc", "właściwie", "wobec", "wpierw", "wprawdzie", "wreszcie", "wskutek", "wstępnie", "wszakże", "wszelako", "zamiast", "zanim", "zarówno", "zaś", "zatem", "zresztą", "zwłaszcza", "żeby", "żebym", "żebyś", "żebyście", "żebyśmy"], QXa = Cr.multipleWords = ["a konkretnie", "a propos", "aby wrocić do rzeczy", "analogicznie do", "bacząc na to że", "bądź co bądź", "bez wątpienia", "bez względu", "biorąc pod uwagę", "choćby", "chodzi o to", "chyba że", "co do", "co gorsza", "co prawda", "co się tyczy", "co ważniejsze", "co więcej", "dzięki czemu", "dzięki któremu", "dzięki której", "dzięki którym", "dzięki temu", "faktem jest że", "inaczej mówiąc", "innymi słowy", "jak dotąd", "jak już mówiłam", "jak już mówiłem", "jak już wspomniano", "jak widać", "jak wiemy", "jako przykład", "jednym słowem", "jeśli chodzi o", "jeżeli chodzi o", "konkretnie to", "krótko mówiąc", "łącznie z", "mając to na uwadzę", "mam na myśli", "mamy na myśli", "mówiąc w skrócie", "na celu", "na dłuższą metę", "na dodatek", "na koniec", "na końcu", "na przykład", "na skutek", "na wstęp", "na wypadek gdyby", "na zakończenie", "nade wszystko", "należy pamiętać", "nawiasem mówiąc", "nie mówiąc już", "nie mówiąc o tym", "nie pomijając", "nie schodząc z tematu", "nie wspominając już", "nie wspominając o", "nie wspominając to", "nie wspominając że", "nie zważając na", "o ile", "o tyle", "od czasu do czasu", "od momentu", "odnośnie do", "ogólnie mówiąc", "ogólnie rzecz biorąc", "oprócz tego", "oznacza to że", "po czwarte", "po drugie", "po piąte", "po pierwsze", "po to", "po trzecie", "pod warunkiem", "podczas gdy", "podczas kiedy", "podobnym sposobem", "ponad wszystko", "poza tym", "prawdę mówiąc", "prawdę powiedziawszy", "prędzej czy później", "przechodząc do", "przede wszystkim", "przez co", "przez tą", "przez tego", "przez to", "przy tym", "przypuściwszy że", "raz na jakiś czas", "rzecz jasna", "ściśle biorąc", "ściśle mówiąc", "skutkiem tego", "tak czy inaczej", "tak czy owak", "tak naprawdę", "takich jak", "takie jak", "to znaczy", "tym samym", "w celu", "w ciągu", "w dodatku", "w efekcie", "w innych słowach", "w istocie", "w każdym razie", "w końcu", "w konsekwencji", "w kwestii", "w międzyczasie", "w nadziei że", "w obawie że", "w odróżnieniu", "w podobny sposób", "w podsumowaniu", "w przeciwieństwie do", "w przeciwnym razie", "w przypadku", "w rezultacie", "w rozumieniu że", "w rzeczy samej", "w rzeczywistości", "w skrócie", "w szczególności", "w takim razie", "w ten sposób", "w tych okolicznościach", "w tym przypadku", "w wyniku", "w wyniku tego", "w związku z tym", "wbrew pozorom", "włącznie z", "wracając do rzeczy", "wracając do tematu", "wręcz przeciwnie", "z drugiej strony", "z drugiej zaś strony", "z jednej strony", "z mocy że", "z obawy że", "z pewnością", "z powodu", "z przyczyny", "z tą intencją", "z tego powodu", "z uwagi że", "zacznijmy od", "zakładając że", "ze względu na", "ze względu że", "zważywszy na to", "zważywszy że"], XXa = Cr.allWords = YXa.concat(QXa);
Cr.default = XXa;
Object.defineProperty(wt, "__esModule", {
  value: !0
});
wt.filteredAtEnding = wt.filteredAtBeginningAndEnding = wt.filteredAnywhere = wt.default = wt.cannotDirectlyPrecedePassiveParticiple = wt.cannotBeBetweenPassiveAuxiliaryAndParticiple = wt.all = void 0;
var AB = Cr, su = ZXa(Ba);
function ZXa(e) {
  return e && e.__esModule ? e : { default: e };
}
const M$ = ["czterech", "czterem", "czterema", "czternaście", "czternastce", "czternastek", "czternastka", "czternastką", "czternastkach", "czternastkami", "czternastkę", "czternastki", "czternastko", "czternastkom", "czternastoma", "czternastu", "cztery", "czwórce", "czwórek", "czwórka", "czwórką", "czwórkach", "czwórkami", "czwórkę", "czwórki", "czwórko", "czwórkom", "czworo", "dwa", "dwadzieścia", "dwanaście", "dwie", "dwiema", "dwóch", "dwójce", "dwoje", "dwójek", "dwójka", "dwójką", "dwójkach", "dwójkami", "dwójki", "dwójko", "dwójkom", "dwóm", "dwoma", "dwudziestce", "dwudziestek", "dwudziestka", "dwudziestką", "dwudziestkach", "dwudziestkami", "dwudziestkę", "dwudziestki", "dwudziestkom", "dwudziestoma", "dwudziestu", "dwunastce", "dwunastek", "dwunastka", "dwunastką", "dwunastkach", "dwunastkami", "dwunastkę", "dwunastki", "dwunastko", "dwunastkom", "dwunastoma", "dwunastu", "dziesiątce", "dziesiątek", "dziesiątka", "dziesiątką", "dziesiątkach", "dziesiątkami", "dziesiątkę", "dziesiątki", "dziesiątko", "dziesiątkom", "dziesięć", "dziesięcioma", "dziesięciu", "dziewiątce", "dziewiątek", "dziewiątka", "dziewiątką", "dziewiątkach", "dziewiątkami", "dziewiątkę", "dziewiątki", "dziewiątko", "dziewiątkom", "dziewięć", "dziewięcioma", "dziewięciorga", "dziewięciorgiem", "dziewięciorgu", "dziewięcioro", "dziewięciu", "dziewiętnaście", "dziewiętnastce", "dziewiętnastek", "dziewiętnastka", "dziewiętnastką", "dziewiętnastkach", "dziewiętnastkami", "dziewiętnastkę", "dziewiętnastki", "dziewiętnastkom", "dziewiętnastoma", "dziewiętnastu", "jeden", "jedenaście", "jedenastce", "jedenastek", "jedenastka", "jedenastką", "jedenastkach", "jedenastkami", "jedenastkę", "jedenastki", "jedenastko", "jedenastkom", "jedenastoma", "jedenastu", "jedna", "jedną", "jednego", "jednej", "jednemu", "jedno", "jednym", "jedynce", "jedynek", "jedynka", "jedynką", "jedynkach", "jedynkami", "jedynkę", "jedynki", "jedynko", "jedynkom", "miliard", "miliarda", "miliardach", "miliardami", "miliardem", "miliardom", "miliardów", "miliardowi", "miliardy", "miliardzie", "milion", "miliona", "milionach", "milionami", "milionem", "milionie", "milionom", "milionów", "milionowi", "miliony", "ósemce", "ósemek", "ósemka", "ósemką", "ósemkach", "ósemkami", "ósemkę", "ósemki", "ósemko", "ósemkom", "osiem", "osiemnaście", "osiemnastce", "osiemnastek", "osiemnastka", "osiemnastką", "osiemnastkach", "osiemnastkam", "osiemnastkę", "osiemnastki", "osiemnastko", "osiemnastkom", "osiemnastoma", "osiemnastu", "ośmioma", "ośmiorga", "ośmiorgiem", "ośmiorgu", "ośmioro", "ośmiu", "piątce", "piątek", "piątka", "piątką", "piątkach", "piątkami", "piątkę", "piątki", "piątko", "piątkom", "pięć", "pięcioma", "pięciorga", "pięciorgiem", "pięciorgu", "pięcioro", "pięciu", "piętnaście", "piętnastce", "piętnastek", "piętnastka", "piętnastką", "piętnastkach", "piętnastkami", "piętnastkę", "piętnastki", "piętnastko", "piętnastkom", "piętnastoma", "piętnastu", "raz", "setce", "setek", "setka", "setkach", "setkami", "setkę", "setki", "setkom", "siedem", "siedemnaście", "siedemnastce", "siedemnastek", "siedemnastka", "siedemnastką", "siedemnastkach", "siedemnastkami", "siedemnastkę", "siedemnastki", "siedemnastko", "siedemnastkom", "siedemnastoma", "siedemnastu", "siedmioma", "siedmiorga", "siedmiorgiem", "siedmiorgu", "siedmioro", "siedmiu", "siódemce", "siódemek", "siódemka", "siódemką", "siódemkach", "siódemkami", "siódemkę", "siódemki", "siódemko", "siódemkom", "sto", "stoma", "stu", "sześć", "sześcioma", "sześciorga", "sześciorgiem", "sześciorgu", "sześcioro", "sześciu", "szesnaście", "szesnastce", "szesnastek", "szesnastka", "szesnastką", "szesnastkach", "szesnastkami", "szesnastkę", "szesnastki", "szesnastko", "szesnastkom", "szesnastoma", "szesnastu", "szóstce", "szóstek", "szóstka", "szóstką", "szóstkach", "szóstkami", "szóstkę", "szóstki", "szóstko", "szóstkom", "trójce", "troje", "trójek", "trójka", "trójką", "trójkach", "trójkami", "trójki", "trójko", "trójkom", "trzech", "trzem", "trzema", "trzy", "trzynaście", "trzynastce", "trzynastek", "trzynastka", "trzynastką", "trzynastkach", "trzynastkami", "trzynastkę", "trzynastki", "trzynastko", "trzynastkom", "trzynastoma", "trzynastu", "tysiąc", "tysiąca", "tysiącach", "tysiącami", "tysiące", "tysiącem", "tysiącom", "tysiącowi", "tysiącu", "tysięcy"], q$ = ["czternaści", "czternasta", "czternastą", "czternaste", "czternastego", "czternastej", "czternastemu", "czternasty", "czternastych", "czternastym", "czternastymi", "czwarci", "czwarta", "czwartą", "czwarte", "czwartego", "czwartej", "czwartemu", "czwarty", "czwartych", "czwartym", "czwartymi", "drudzy", "druga", "drugą", "drugi", "drugich", "drugie", "drugiego", "drugiej", "drugiemu", "drugim", "drugimi", "dwudzieści", "dwudziesta", "dwudziestą", "dwudzieste", "dwudziestego", "dwudziestej", "dwudziestemu", "dwudziesty", "dwudziestych", "dwudziestym", "dwudziestymi", "dwunaści", "dwunasta", "dwunastą", "dwunaste", "dwunastego", "dwunastej", "dwunastemu", "dwunasty", "dwunastych", "dwunastym", "dwunastymi", "dziesiąci", "dziesiąta", "dziesiątą", "dziesiąte", "dziesiątego", "dziesiątej", "dziesiątemu", "dziesiąty", "dziesiątych", "dziesiątym", "dziesiątymi", "dziewiąci", "dziewiąta", "dziewiątą", "dziewiąte", "dziewiątego", "dziewiątej", "dziewiątemu", "dziewiąty", "dziewiątych", "dziewiątym", "dziewiątymi", "dziewiętnaści", "dziewiętnasta", "dziewiętnastą", "dziewiętnaste", "dziewiętnastego", "dziewiętnastej", "dziewiętnastemu", "dziewiętnasty", "dziewiętnastych", "dziewiętnastym", "dziewiętnastymi", "jedenaści", "jedenasta", "jedenastą", "jedenaste", "jedenastego", "jedenastej", "jedenastemu", "jedenasty", "jedenastych", "jedenastym", "jedenastymi", "osiemnaści", "osiemnasta", "osiemnastą", "osiemnaste", "osiemnastego", "osiemnastej", "osiemnastemu", "osiemnasty", "osiemnastych", "osiemnastym", "osiemnastymi", "ósma", "ósmą", "ósme", "ósmego", "ósmej", "ósmemu", "óśmi", "ósmy", "ósmych", "ósmym", "ósmymi", "piąci", "piąta", "piątą", "piąte", "piątego", "piątej", "piątemu", "piąty", "piątych", "piątym", "piątymi", "pierwsi", "pierwsza", "pierwszą", "pierwsze", "pierwszego", "pierwszej", "pierwszemu", "pierwszy", "pierwszych", "pierwszym", "pierwszymi", "piętnaści", "piętnasta", "piętnastą", "piętnaste", "piętnastego", "piętnastej", "piętnastemu", "piętnasty", "piętnastych", "piętnastym", "piętnastymi", "siedemnaści", "siedemnasta", "siedemnastą", "siedemnaste", "siedemnastego", "siedemnastej", "siedemnastemu", "siedemnasty", "siedemnastych", "siedemnastym", "siedemnastymi", "siódma", "siódmą", "siódme", "siódmego", "siódmej", "siódmemu", "siódmi", "siódmy", "siódmych", "siódmym", "siódmymi", "szesnaści", "szesnasta", "szesnastą", "szesnaste", "szesnastego", "szesnastej", "szesnastemu", "szesnasty", "szesnastych", "szesnastymi", "szóści", "szósta", "szóstą", "szóste", "szóstego", "szóstej", "szóstemu", "szósty", "szóstych", "szóstym", "szóstymi", "trzeci", "trzecia", "trzecią", "trzecich", "trzecie", "trzeciego", "trzeciej", "trzeciemu", "trzecim", "trzecimi", "trzynaści", "trzynasta", "trzynastą", "trzynaste", "trzynastego", "trzynastej", "trzynastemu", "trzynasty", "trzynastych", "trzynastym", "trzynastymi"], TB = ["ja", "my", "on", "ona", "one", "oni", "ono", "ty", "wy"], $B = ["cię", "ciebie", "go", "ich", "ją", "je", "jego", "mnie", "nas", "nią", "nich", "nie", "niego", "was"], jB = ["jej", "niej"], xB = ["mi", "ci", "im", "jemu", "mu", "nam", "niemu", "nim", "tobie", "wam"], SB = ["mną", "nami", "nią", "nim", "nimi", "tobą", "wami"], F$ = ["myśmy", "wyście", "żeście", "żeśmy"], OB = ["doń", "nań", "zeń"], B$ = ["ich", "jego", "jej", "ma", "mą", "me", "mego", "mej", "memu", "moi", "moich", "moim", "moimi", "mój", "moja", "moją", "moje", "mojego", "mojej", "mojemu", "mych", "mym", "mymi", "nasi", "nasz", "nasza", "naszą", "nasze", "naszego", "naszej", "naszemu", "naszych", "naszym", "naszymi", "swa", "swą", "swe", "swego", "swej", "swemu", "swoi", "swoich", "swoim", "swoimi", "swój", "swoja", "swoją", "swoje", "swojego", "swojej", "swojemu", "swych", "swym", "swymi", "twa", "twą", "twe", "twego", "twej", "twemu", "twoi", "twoich", "twoim", "twoimi", "twój", "twoja", "twoją", "twoje", "twojego", "twojej", "twojemu", "twych", "twym", "twymi", "wasi", "wasz", "wasza", "waszą", "wasze", "waszego", "waszej", "waszemu", "waszych", "waszym", "waszymi"], W$ = ["się"], IB = ["siebie", "sobą"], U$ = ["czyi", "czyich", "czyim", "czyimi", "czyj", "czyja", "czyją", "czyje", "czyjego", "czyjej", "czyjemu", "kim", "kogo", "komu", "kto"], H$ = ["czy", "czyś", "czyśbyś", "dlaczego", "dokąd", "dokądże", "dokądżeś", "gdzie", "gdzież", "gdzieżeś", "ile", "ileż", "jak", "jakbyś", "jakże", "jakżebyś", "jakżeś", "kiedy", "którędy", "którędyż", "skąd", "skądże", "skądżeś"], G$ = ["co", "czego", "czemu", "czym", "jacy", "jaka", "jaką", "jaki", "jakich", "jakie", "jakiego", "jakiej", "jakiemu", "jakim", "jakimi", "która", "którą", "które", "którego", "której", "któremu", "który", "których", "którym", "którymi", "którzy"], CB = ["coś", "czegoś", "czemuś", "czyichkolwiek", "czyichś", "czyikolwiek", "czyimikolwiek", "czyimiś", "czyimkolwiek", "czyimkolwiem", "czyimś", "czyiś", "czyjakolwiek", "czyjąkolwiek", "czyjaś", "czyjąś", "czyjegokolwiek", "czyjegoś", "czyjejkolwiek", "czyjejś", "czyjekolwiek", "czyjemukolwiek", "czyjemuś", "czyjeś", "czyjkolwiek", "czymś", "dlaczegoś", "dokądkolwiek", "dokądś", "gdziekolwiek", "gdzieś", "ilekolwiek", "ileś", "jacykolwiek", "jacyś", "jakakolwiek", "jakąkolwiek", "jakaś", "jakąś", "jakichkolwiek", "jakichś", "jakiegokolwiek", "jakiegoś", "jakiejkolwiek", "jakiejś", "jakiekolwiek", "jakiemukolwiek", "jakiemuś", "jakieś", "jakikolwiek", "jakimikolwiek", "jakimkolwiek", "jakimś", "jakiś", "jakkolwiek", "jakoś", "każda", "każdą", "każde", "każdego", "każdej", "każdemu", "każdy", "każdym", "kiedykolwiek", "kiedyś", "kimkolwiek", "kimś", "kogokolwiek", "kogoś", "komukolwiek", "komuś", "ktokolwiek", "którakolwiek", "którąkolwiek", "któraś", "którąś", "którędykolwiek", "którędyś", "któregokolwiek", "któregoś", "którejkolwiek", "którejś", "którekolwiek", "któremukolwiek", "któremuś", "któreś", "którychkolwiek", "którychś", "którykolwiek", "którymikolwiek", "którymiś", "którymkolwiek", "którymś", "któryś", "którzykolwiek", "którzyś", "ktoś", "nawzajem", "nic", "niczego", "niczemu", "niczyi", "niczyich", "niczyim", "niczyimi", "niczyj", "niczyja", "niczyją", "niczyjego", "niczyjej", "niczyjemu", "niczym", "nikim", "nikogo", "nikogokolwiek", "nikomu", "nikt", "skądkolwiek", "skądś", "wszyscy", "wszyskiego", "wszystkich", "wszystkie", "wszystkiemu", "wszystkim", "wszystkimi", "wszystko", "żaden", "żadna", "żadną", "żadne", "żadnego", "żadnej", "żadnemu", "żadni", "żadnych", "żadnym", "żadnymi"], PB = ["ci", "dlatego", "ów", "owa", "ową", "owe", "owego", "owej", "owemu", "owi", "owo", "owych", "owym", "stąd", "stamtąd", "ta", "tacy", "tak", "taka", "taką", "taki", "takich", "takie", "takiego", "takiej", "takiemu", "takim", "takimi", "tam", "tamci", "tamta", "tamtą", "tamte", "tamtego", "tamtej", "tamtemu", "tamten", "tamto", "tamtych", "tamtym", "tamtymi", "tą", "te", "tę", "tędy", "tego", "tegoż", "tej", "temu", "ten", "to", "tu", "tutaj", "tych", "tyle", "tyloma", "tylu", "tym", "tymi", "wtedy"], RB = ["ciut", "część", "części", "częścią", "częściach", "częściami", "częściom", "dość", "dosyć", "dużo", "kilka", "kilkadziesiąt", "kilkanaście", "kilkaset", "kilknasty", "kilkoma", "kilku", "kilkudziesiąte", "kilkudziesiątego", "kilkudziesiątej", "kilkudziesiąty", "kilkudziesiątych", "kilkudziesiątym", "kilkudziesiątymi", "kilkudziesięcioma", "kilkudziesięciu", "kilkunasta", "kilkunastą", "kilkunaste", "kilkunastego", "kilkunastej", "kilkunastemu", "kilkunastoma", "kilkunastu", "kilkunastym", "kilkuset", "kilkustoma", "kiludziesiąta", "mało", "malutko", "mniej", "mnóstwa", "mnóstwem", "mnóstwie", "mnóstwo", "mnóstwu", "multum", "nadto", "najmniej", "najwięcej", "nieco", "niedużo", "niejednokroć", "niektóre", "niektórzy", "niektórych", "niektórym", "niektórymi", "niemało", "niewiele", "niewieloma", "niewielu", "oba", "obaj", "obie", "oboje", "obojga", "obojgiem", "obojgu", "obóm", "oboma", "obu", "obydwa", "obydwaj", "obydwie", "obydwiema", "obydwóch", "obydwoje", "obydwojgiem", "obydwojgu", "obydwóm", "obydwoma", "obydwu", "odrobiną", "odrobince", "odrobinę", "odrobinie", "odrobinką", "odrobinkę", "odrobinki", "odrobiny", "parę", "parędziesiąt", "parędziesięcioma", "parędziesięciu", "paręnaście", "paręnastoma", "paręnastu", "parokroć", "paroma", "paru", "parze", "pełno", "pół", "półczwarta", "połowa", "połową", "połowie", "połowy", "półtora", "półtorej", "sporo", "trochę", "trochu", "troszeczkę", "troszkę", "wcale", "więcej", "większość", "większości", "większością", "większościach", "większościami", "większościom", "wiele", "wielokrotnie", "wieloma", "wielu"], DB = ["czasem", "często", "nigdy", "rzadko", "zawsze"], V$ = ["chcą", "chcąc", "chcąca", "chcące", "chcący", "chce", "chcę", "chcecie", "chcemy", "chcesz", "chciał", "chciała", "chciałaby", "chciałabym", "chciałabyś", "chciałam", "chciałaś", "chciałby", "chciałbym", "chciałbyś", "chciałem", "chciałeś", "chciały", "chciałyby", "chciałybyście", "chciałybyśmy", "chciałyście", "chciałyśmy", "chcieli", "chcieliby", "chcielibyście", "chcieliście", "chcieliśmy", "chcono", "ma", "macie", "mają", "mając", "mam", "mamy", "masz", "miał", "miała", "miałaby", "miałabym", "miałabyś", "miałam", "miałaś", "miałby", "miałbym", "miałbyś", "miałem", "miałeś", "miało", "miałoby", "miały", "miałyby", "miałybyście", "miałybyśmy", "miałyście", "miałyśmy", "miano", "miej", "miejąca", "miejące", "miejący", "miejcie", "miejmy", "mieli", "mieliby", "mielibyście", "mielibyśmy", "mieliście", "mieliśmy", "mogą", "mogąc", "mogąca", "mogące", "mogący", "mogę", "mógł", "mogła", "mogłaby", "mogłabym", "mogłabyś", "mogłam", "mogłaś", "mógłby", "mógłbym", "mógłbyś", "mogłem", "mogłeś", "mogli", "mogliby", "moglibyście", "moglibyśmy", "mogliście", "mogliśmy", "mogły", "mogłyby", "mogłybyście", "mogłybyśmy", "mogłyście", "mogłyśmy", "może", "możecie", "możemy", "możesz", "można", "możnaby", "musi", "musiał", "musiała", "musiałaby", "musiałabym", "musiałabyś", "musiałam", "musiałaś", "musiałby", "musiałbym", "musiałbyś", "musiałem", "musiałeś", "musiało", "musiałoby", "musiały", "musiałyby", "musiałybyście", "musiałybyśmy", "musiałyście", "musiałyśmy", "musiano", "musicie", "musieli", "musieliby", "musielibyście", "musielibyśmy", "musieliście", "musieliśmy", "musimy", "musisz", "muszą", "musząc", "musząca", "muszące", "muszący", "muszę", "należy", "niech", "potrafi", "potrafią", "potrafiąc", "potrafiąca", "potrafiące", "potrafiący", "potraficie", "potrafię", "potrafiłaby", "potrafiłabym", "potrafiłabyś", "potrafiłam", "potrafiłaś", "potrafiłbym", "potrafiłbyś", "potrafiłem", "potrafiłeś", "potrafili", "potrafiliby", "potrafilibyście", "potrafilibyśmy", "potrafiliście", "potrafiliśmy", "potrafiło", "potrafiłoby", "potrafiłyby", "potrafiłybyście", "potrafiłybyśmy", "potrafiłyście", "potrafiłyśmy", "potrafimy", "potrafiono", "potrafisz", "powinien", "powinienem", "powinieneś", "powinna", "powinnam", "powinnaś", "powinne", "powinni", "powinniście", "powinniśmy", "powinnyście", "powinnyśmy", "pozostaje", "stają", "stając", "stająca", "stające", "stający", "staje", "staję", "stajecie", "stajemy", "stajesz", "stał", "stała", "stałaby", "stałabym", "stałabyś", "stałam", "stałaś", "stałby", "stałbym", "stałbyś", "stałem", "stałeś", "stali", "staliby", "stalibyście", "stalibyśmy", "staliście", "staliśmy", "stało", "stały", "stałyby", "stałybyście", "stałybyśmy", "stałyście", "stałyśmy", "stanie", "stano", "stawać", "stawając", "stawająca", "stawające", "stawający", "stawał", "stawała", "stawałaby", "stawałabym", "stawałabyś", "stawałabyście", "stawałam", "stawałaś", "stawałby", "stawałbym", "stawałbyś", "stawałem", "stawałeś", "stawali", "stawaliby", "stawalibyście", "stawalibyśmy", "stawaliście", "stawaliśmy", "stawały", "stawałyby", "stawałybyśmy", "stawałyście", "stawałyśmy", "stawano", "stawawszy", "stawszy", "trzeba", "warto", "wystarczy"], JXa = ["bądź", "bądźcie", "bądźmy", "będą", "będąc", "będę", "będzie", "będziecie", "będziemy", "będziesz", "by", "był", "była", "byłaby", "byłabym", "byłabyś", "byłam", "byłaś", "byłby", "byłbym", "byłbyś", "byłem", "byłeś", "byli", "byliby", "bylibyście", "bylibyśmy", "byliście", "byliśmy", "było", "byłoby", "były", "byłyby", "byłybyście", "byłybyśmy", "byłyście", "byłyśmy", "bym", "byś", "byście", "byśmy", "byto", "bywało", "jest", "jestem", "jesteś", "jesteście", "jesteśmy", "są", "zostają", "zostając", "zostająca", "zostające", "zostający", "zostaje", "zostaję", "zostajecie", "zostajemy", "zostajesz", "został", "została", "zostałaby", "zostałabym", "zostałabyś", "zostałam", "zostałaś", "zostałby", "zostałbym", "zostałbyś", "zostałem", "zostałeś", "zostali", "zostaliby", "zostalibyście", "zostalibyśmy", "zostaliście", "zostaliśmy", "zostało", "zostaloby", "zostały", "zostałyby", "zostałybyście", "zostałybyśmy", "zostałyście", "zostałyśmy", "zostań", "zostaną", "zostańcie", "zostanę", "zostanie", "zostaniecie", "zostaniemy", "zostaniesz", "zostańmy", "zostawało", "zostawano", "zostawszy"], NB = ["być", "zostać"], K$ = ["chcieć", "mieć", "móc", "musieć", "potrafić", "stać"], Y$ = ["bez", "beze", "blisko", "daleko", "dla", "do", "dole", "dookoła", "górze", "jako", "koło", "ku", "między", "mimo", "na", "nad", "nade", "naokoło", "naprzeciwko", "niedaleko", "nieopodal", "niż", "o", "obok", "od", "ode", "około", "oprócz", "po", "pod", "podczas", "pode", "pomiędzy", "ponad", "poniżej", "poprzek", "poprzez", "pośród", "powyżej", "poza", "przeciw", "przeciwko", "przed", "przede", "przez", "przeze", "przy", "spodem", "spośród", "spoza", "u", "w", "wbrew", "we", "wedle", "wewnątrz", "wpół", "wraz", "wśród", "wzdłuż", "z", "za", "ze", "zza"], LB = ["bliska", "daleka", "przodu", "tyłu"], MB = ["albo", "ani", "bądź", "i", "lub", "oraz", "tylko"], qB = ["aż", "by", "czy", "gdyby", "jak", "jeśli", "jeżeli", "że"], FB = ["ano", "ciągu", "coraz", "dzięki", "chyba", "jakby", "jednocześnie", "jeszcze", "już", "nadal", "nagle", "znowu", "prawdopodobnie", "niestety", "dziś", "dzisiaj", "oczywiście", "względem", "m.in.", "właśnie", "zaraz"], Q$ = ["bierz", "bierzcie", "bierzecie", "bierzemy", "bierzesz", "bierzmy", "biorą", "biorąc", "biorąca", "biorące", "biorący", "biorę", "brał", "brała", "brałaby", "brałabym", "brałabyś", "brałam", "brałaś", "brałby", "brałbym", "brałbyś", "brałem", "brałeś", "brali", "braliby", "bralibyście", "bralibyśmy", "braliście", "braliśmy", "brało", "brałoby", "brały", "brałyby", "brałybyście", "brałybyśmy", "brałyście", "brałyśmy", "brany", "da", "dacie", "dadzą", "daj", "dają", "dając", "dająca", "dające", "dający", "dajcie", "daje", "daję", "dajecie", "dajemy", "dajesz", "dajmy", "dał", "dała", "dałaby", "dałabym", "dałabyś", "dałam", "dałaś", "dałby", "dałbym", "dałbyś", "dałem", "dałeś", "dali", "daliby", "dalibyście", "dalibyśmy", "daliście", "daliśmy", "dało", "dałoby", "dały", "dałyby", "dałybyście", "dałybyśmy", "dałyście", "dałyśmy", "dam", "damy", "dana", "dano", "dany", "dasz", "dawaj", "dawajcie", "dawajmy", "dawał", "dawała", "dawałaby", "dawałabym", "dawałabyś", "dawałam", "dawałaś", "dawałby", "dawałbym", "dawałbyś", "dawałem", "dawałeś", "dawali", "dawaliby", "dawalibyście", "dawalibyśmy", "dawaliście", "dawaliśmy", "dawało", "dawały", "dawałyby", "dawałybyście", "dawałybyśmy", "dawałyście", "dawałyśmy", "dawana", "dawane", "dawano", "dawany", "idą", "idąc", "idąca", "idące", "idący", "idę", "idź", "idźcie", "idzie", "idziecie", "idziemy", "idziesz", "idźmy", "rób", "róbcie", "robi", "robią", "robiąc", "robiąca", "robiące", "robiący", "robicie", "robię", "robił", "robiła", "robiłaby", "robiłabym", "robiłabyś", "robiłam", "robiłaś", "robiłby", "robiłbym", "robiłbyś", "robiłem", "robiłeś", "robili", "robilibiście", "robiliby", "robilibyśmy", "robiliście", "robiliśmy", "robiło", "robiły", "robiłyby", "robiłybyście", "robiłybyśmy", "robiłyście", "robiłyśmy", "robimy", "robiono", "robiony", "robisz", "róbmy", "stanowi", "stanowią", "stanowiły", "stanowili", "stoi", "stoicie", "stoimy", "stoisz", "stój", "stoją", "stojąc", "stojąca", "stojące", "stojący", "stójcie", "stoję", "stójmy", "świadczy", "szedł", "szedłby", "szedłbym", "szedłbyś", "szedłem", "szedłeś", "szła", "szłaby", "szłabym", "szłabyś", "szłam", "szłaś", "szli", "szliby", "szlibyście", "szlibyśmy", "szliście", "szliśmy", "szło", "szłoby", "szły", "szłyby", "szłybyście", "szłybyśmy", "szłyście", "uprawia", "uprawiacie", "uprawiają", "uprawiając", "uprawiająca", "uprawiające", "uprawiający", "uprawiał", "uprawiała", "uprawiałaby", "uprawiałabym", "uprawiałabyś", "uprawiałam", "uprawiałaś", "uprawiałby", "uprawiałbym", "uprawiałbyś", "uprawiałem", "uprawiałeś", "uprawiali", "uprawialiby", "uprawialibyście", "uprawialibyśmy", "uprawialiście", "uprawialiśmy", "uprawiało", "uprawiałoby", "uprawiały", "uprawiałyby", "uprawiałybyście", "uprawiałybyśmy", "uprawiałyście", "uprawiałyśmy", "uprawiam", "uprawiamy", "uprawiana", "uprawiane", "uprawiano", "uprawiany", "uprawiasz", "weź", "weźcie", "wezmą", "wezmę", "weźmie", "weźmiecie", "weźmiemy", "weźmiesz", "weźmy", "wykonuj", "wykonują", "wykonując", "wykonująca", "wykonujące", "wykonujący", "wykonujcie", "wykonuje", "wykonuję", "wykonujecie", "wykonujemy", "wykonujesz", "wykonujmy", "wykonywał", "wykonywała", "wykonywałaby", "wykonywałabym", "wykonywałabyś", "wykonywałam", "wykonywałaś", "wykonywałby", "wykonywałbym", "wykonywałbyś", "wykonywałem", "wykonywałeś", "wykonywali", "wykonywaliby", "wykonywalibyście", "wykonywalibyśmy", "wykonywaliście", "wykonywaliśmy", "wykonywało", "wykonywałoby", "wykonywały", "wykonywałyby", "wykonywałybyście", "wykonywałybyśmy", "wykonywałyście", "wykonywałyśmy", "wykonywana", "wykonywane", "wykonywany", "wziął", "wziąłby", "wziąłbym", "wziąłbyś", "wziąłem", "wziąłeś", "wziąwszy", "wzięła", "wzięłaby", "wzięłabym", "wzięłabyś", "wzięłam", "wzięłaś", "wzięli", "wzięliby", "wzięlibyście", "wzięlibyśmy", "wzięliście", "wzięliśmy", "wzięło", "wzięłoby", "wzięły", "wzięłyby", "wzięłybyście", "wzięłybyśmy", "wzięłyście", "wzięłyśmy", "zrób", "zróbcie", "zrobi", "zrobią", "zrobiąc", "zrobiąca", "zrobiące", "zrobiący", "zrobicie", "zrobię", "zrobił", "zrobiła", "zrobiłaby", "zrobiłabym", "zrobiłabyś", "zrobiłam", "zrobiłaś", "zrobiłby", "zrobiłbym", "zrobiłbyś", "zrobiłem", "zrobiłeś", "zrobili", "zrobilibiście", "zrobiliby", "zrobilibyśmy", "zrobiliście", "zrobiliśmy", "zrobiło", "zrobiły", "zrobiłyby", "zrobiłybyście", "zrobiłybyśmy", "zrobiłyście", "zrobiłyśmy", "zrobimy", "zrobiono", "zrobiony", "zrobisz", "zróbmy", "powinno", "bywa", "wiedzieć", "znać", "wiedział", "wiedziała", "wiedziały", "wiedzieli", "znał", "znała", "znali", "znały", "powie", "wie", "zna", "zobaczy", "powiedzą", "powiedziano", "powiem", "wiedzą", "wiedzące", "wiedzący", "wiedziało", "wiedziano", "wiem", "znają", "znające", "znający", "znało", "znam", "znane", "znano", "zobaczą", "zobaczę", "zobaczone", "zobaczono", "powiecie", "powiedz", "powiedzcie", "powiedzenie", "powiedział", "powiedziała", "powiedziałaby", "powiedziałabym", "powiedziałabyś", "powiedziałam", "powiedziałaś", "powiedziałby", "powiedziałbym", "powiedziałbyś", "powiedziałem", "powiedziałeś", "powiedziało", "powiedziałoby", "powiedziały", "powiedziałyby", "powiedziałybyście", "powiedziałybyśmy", "powiedziałyście", "powiedziałyśmy", "powiedziawszy", "powiedzieć", "powiedzieli", "powiedzieliby", "powiedzielibyście", "powiedzielibyśmy", "powiedzieliście", "powiedzieliśmy", "powiedzmy", "powiemy", "powiesz", "wiecie", "wiedz", "wiedząc", "wiedząca", "wiedzcie", "wiedziałaby", "wiedziałabym", "wiedziałabyś", "wiedziałam", "wiedziałaś", "wiedziałby", "wiedziałbym", "wiedziałbyś", "wiedziałem", "wiedziałeś", "wiedziałoby", "wiedziałyby", "wiedziałybyście", "wiedziałybyśmy", "wiedziałyście", "wiedziałyśmy", "wiedzieliby", "wiedzielibyście", "wiedzielibyśmy", "wiedzieliście", "wiedzieliśmy", "wiedzmy", "wiemy", "wiesz", "znacie", "znaj", "znając", "znająca", "znajcie", "znajmy", "znałaby", "znałabym", "znałabyś", "znałam", "znałaś", "znałby", "znałbym", "znałbyś", "znałem", "znałeś", "znaliby", "znalibyście", "znalibyśmy", "znaliście", "znaliśmy", "znałoby", "znałyby", "znałybyście", "znałybyśmy", "znałyście", "znałyśmy", "znamy", "znana", "znani", "znanie", "znany", "znasz", "zobacz", "zobaczcie", "zobaczeni", "zobaczenie", "zobaczmy", "zobaczona", "zobaczony", "zobaczyć", "zobaczycie", "zobaczył", "zobaczyła", "zobaczyłaby", "zobaczyłabym", "zobaczyłabyś", "zobaczyłam", "zobaczyłaś", "zobaczyłby", "zobaczyłbym", "zobaczyłbyś", "zobaczyłem", "zobaczyłeś", "zobaczyli", "zobaczyliby", "zobaczylibyście", "zobaczylibyśmy", "zobaczyliście", "zobaczyliśmy", "zobaczyło", "zobaczyłoby", "zobaczyły", "zobaczyłyby", "zobaczyłybyście", "zobaczyłybyśmy", "zobaczyłyście", "zobaczyłyśmy", "zobaczymy", "zobaczysz", "zobaczywszy"], X$ = ["brać", "dać", "dawać", "iść", "robić", "stanowić", "uprawiać", "wykonywać", "wziąć", "zrobić"], Z$ = ["informowali", "informowały", "informują", "informuje", "informuję", "mówi", "mówią", "mówię", "mówił", "mówiła", "mówili", "mówiły", "odpowiada", "odpowiadają", "odpowiadam", "odpowiedział", "odpowiedziała", "odpowiedziałam", "odpowiedziały", "odpowiedzieli", "odwiedziałam", "poinformowałam", "poinformowali", "poinformowały", "powiedział", "powiedziała", "powiedziałam", "powiedziały", "powiedzieli", "pyta", "pytać", "pytał", "pytała", "pytałam", "pytali", "pytały", "pytam", "sądzą", "sądzę", "sądzi", "sądzić", "sądziłam", "sądzili", "sądziły", "spytał", "spytała", "spytałam", "spytali", "spytały", "stwierdziały", "stwierdzieli", "stwierdził", "stwierdziła", "stwierdziłam", "twierdzą", "twierdzę", "twierdzi", "twierdziały", "twierdzić", "twierdzieli", "twierdził", "twierdziła", "twierdziłam", "uważa", "uważają", "uważał", "uważała", "uważali", "uważały", "uważam", "wyjaśnia", "wyjaśniać", "wyjaśniają", "wyjaśniam", "wyjaśnił", "wyjaśniła", "wyjaśnili", "wyjaśniły", "zapytał", "zapytała", "zapytałam", "zapytali", "zapytały", "zaznacza", "zaznaczają", "zaznaczam", "zaznaczył", "zaznaczyła", "zaznaczyłam", "zaznaczyli", "zaznaczyły"], BB = ["bardziej", "bardzo", "całkiem", "całkowicie", "doskonale", "dość", "dosyć", "kompletnie", "najbardziej", "naprawdę", "nawet", "nieco", "niezbyt", "niezmiernie", "niezwykle", "ogromnie", "strasznie", "świetnie", "wielce", "wyjątkowo", "zbyt", "znacznie", "zupełnie"], WB = ["cała", "całą", "całe", "całego", "całej", "całemu", "cali", "cały", "całych", "całym", "całymi", "ciekawa", "ciekawą", "ciekawe", "ciekawego", "ciekawej", "ciekawemu", "ciekawi", "ciekawy", "ciekawych", "ciekawym", "ciekawymi", "dłudzy", "długa", "długą", "długi", "długich", "długie", "długiego", "długiej", "długiemu", "długim", "długimi", "dłużsi", "dłuższa", "dłuższą", "dłuższe", "dłuższego", "dłuższej", "dłuższemu", "dłuższy", "dłuższych", "dłuższym", "dłuższymi", "dobra", "dobrą", "dobre", "dobrego", "dobrej", "dobremu", "dobry", "dobrych", "dobrym", "dobrymi", "dobrzy", "fajna", "fajną", "fajne", "fajnego", "fajnej", "fajnemu", "fajni", "fajny", "fajnych", "fajnym", "fajnymi", "główna", "główną", "główne", "głównego", "głównej", "głównemu", "główni", "główny", "głównych", "głównym", "głównymi", "inna", "inną", "inne", "innego", "innej", "innemu", "inni", "inny", "innych", "innym", "innymi", "krótcy", "krótka", "krótką", "krótki", "krótkich", "krótkie", "krótkiego", "krótkiej", "krótkiemu", "krótkim", "krótkimi", "krótsi", "krótsza", "krótszą", "krótsze", "krótszego", "krótszej", "krótszemu", "krótszych", "krótszym", "krótszymi", "łatwe", "łatwego", "łatwiejsze", "łatwym", "lepsi", "lepsza", "lepszą", "lepsze", "lepszego", "lepszej", "lepszemu", "lepszy", "lepszych", "lepszym", "lepszymi", "mała", "małą", "małe", "małego", "małej", "małemu", "mali", "mały", "małych", "małym", "małymi", "mniejsi", "mniejsza", "mniejszą", "mniejsze", "mniejszego", "mniejszej", "mniejszemu", "mniejszy", "mniejszych", "mniejszym", "mniejszymi", "najdłużsi", "najdłuższa", "najdłuższą", "najdłuższe", "najdłuższego", "najdłuższej", "najdłuższemu", "najdłuższy", "najdłuższych", "najdłuższym", "najdłuższymi", "najkrótsi", "najkrótsza", "najkrótszą", "najkrótsze", "najkrótszego", "najkrótszej", "najkrótszemu", "najkrótszych", "najkrótszym", "najkrótszymi", "najłatwiejsze", "najlepsi", "najlepsza", "najlepszą", "najlepsze", "najlepszego", "najlepszej", "najlepszemu", "najlepszych", "najlepszym", "najlepszymi", "najmniejsi", "najmniejsza", "najmniejszą", "najmniejsze", "najmniejszego", "najmniejszej", "najmniejszemu", "najmniejszy", "najmniejszych", "najmniejszym", "najmniejszymi", "najniżsi", "najniższa", "najniższą", "najniższe", "najniższego", "najniższej", "najniższemu", "najniższy", "najniższych", "najniższym", "najniższymi", "najtrudniejsze", "najwięksi", "największa", "największą", "największe", "największego", "największej", "największemu", "największych", "największym", "największymi", "najwyżsi", "najwyższa", "najwyższą", "najwyższe", "najwyższego", "najwyższej", "najwyższemu", "najwyższy", "najwyższych", "najwyższym", "najwyższymi", "następna", "następną", "następne", "następnego", "następnej", "następni", "następny", "następnych", "następnym", "następnymi", "niewłaściwa", "niewłaściwą", "niewłaściwe", "niewłaściwego", "niewłaściwej", "niewłaściwemu", "niewłaściwi", "niewłaściwy", "niewłaściwych", "niewłaściwym", "niewłaściwymi", "niscy", "niska", "niską", "niski", "niskich", "niskie", "niskiego", "niskiej", "niskiemu", "niskim", "niskimi", "niżsi", "niższa", "niższą", "niższe", "niższego", "niższej", "niższemu", "niższy", "niższych", "niższym", "niższymi", "ostatni", "ostatnia", "ostatnią", "ostatnich", "ostatnie", "ostatniego", "ostatniej", "ostatniemu", "ostatnim", "ostatnimi", "poprzedni", "poprzednia", "poprzednią", "poprzednich", "poprzednie", "poprzedniego", "poprzedniej", "poprzedniemu", "poprzednim", "poprzednimi", "sam", "sama", "samą", "same", "samego", "samej", "samemu", "sami", "samo", "samych", "samym", "samymi", "trudne", "trudnego", "trudniejsze", "trudnym", "więksi", "większa", "większą", "większe", "większego", "większej", "większemu", "większych", "większym", "większymi", "wielcy", "wielka", "wielką", "wielki", "wielkich", "wielkie", "wielkiego", "wielkiej", "wielkiemu", "wielkim", "wielkimi", "właściwa", "właściwą", "właściwe", "właściwego", "właściwej", "właściwemu", "właściwi", "właściwy", "właściwych", "właściwym", "właściwymi", "wysocy", "wysoka", "wysoką", "wysoki", "wysokich", "wysokie", "wysokiego", "wysokiej", "wysokiemu", "wysokim", "wysokimi", "wyżsi", "wyższa", "wyższą", "wyższe", "wyższego", "wyższej", "wyższemu", "wyższy", "wyższych", "wyższym", "wyższymi", "kolejne", "różne", "złe", "kolejnych", "różnych", "złych", "kolejnego", "kolejnej", "kolejny", "kolejnym", "różnego", "różnej", "różny", "różnym", "złego", "złej", "zły", "złym", "kolejna", "kolejną", "kolejnemu", "kolejni", "kolejnymi", "różna", "różną", "różnemu", "różni", "różnymi", "zła", "złą", "złemu", "źli", "złymi"], UB = ["blisko", "bliżej", "ciągle", "ciężko", "czasami", "czasem", "częściej", "często", "dalej", "daleko", "dawniej", "dawno", "dobrze", "dopiero", "fajnie", "fajniej", "gorzej", "inaczej", "ładnie", "łatwiej", "łatwo", "lepiej", "najbliżej", "najczęściej", "najdalej", "najdawniej", "najfajniej", "najgorzej", "najłatwiej", "najlepiej", "najniżej", "najpóźniej", "najprościej", "najszybciej", "najtrudniej", "najwcześniej", "najwyżej", "naprawdę", "niedaleko", "niedawno", "nisko", "niżej", "ostatnio", "pewno", "póżniej", "późno", "prawie", "prościej", "prosto", "prostu", "szybciej", "szybko", "trochę", "trudniej", "trudno", "wcześnie", "wcześniej", "wolno", "wszędzie", "wysoko", "wyżej", "zazwyczaj", "źle", "jedynie", "obecnie", "teraz", "szczególnie", "zwykle"], HB = ["dni", "dnia", "dniach", "dniami", "dnie", "dzień", "dzisiaj", "godzin", "godzina", "godzinach", "godzinami", "godzinę", "godziny", "jutro", "lata", "latach", "latami", "miesiąc", "miesiąca", "miesiącach", "miesiącami", "miesiące", "miesiącem", "miesiącu", "miesięcy", "minut", "minuta", "minutach", "minutę", "minuty", "pojutrze", "przedwczoraj", "rok", "rokiem", "roku", "sekund", "sekunda", "sekundach", "sekundę", "sekundy", "tydzień", "tygodni", "tygodnia", "tygodniach", "tygodniami", "tygodnie", "tygodniu", "wczoraj"], GB = ["chwila", "chwilą", "chwilach", "chwilami", "chwile", "chwilę", "chwili", "chwilom", "część", "części", "częścią", "częściach", "częściami", "częściom", "momencie", "moment", "ogóle", "osób", "osoba", "osobą", "osobach", "osobami", "osobę", "osobie", "osobom", "osoby", "powód", "powodach", "powodami", "powodem", "powodom", "powodów", "powodowi", "powodu", "powody", "powodzie", "przypadkiem", "przypadku", "raz", "razach", "razami", "razem", "razie", "razom", "razów", "razowi", "razu", "razy", "rodzaj", "rodzajach", "rodzajami", "rodzajem", "rodzajom", "rodzajów", "rodzajowi", "rodzaju", "rzecz", "rzeczą", "rzeczach", "rzeczami", "rzeczom", "rzeczy", "sposób", "sposobem", "sprawa", "sprawą", "sprawach", "sprawami", "sprawę", "sprawie", "sprawom", "sprawy", "temacie", "temat", "tematach", "tematami", "tematem", "tematom", "tematów", "tematowi", "tematu", "tematy"], VB = ["dr", "dyr", "mgr", "p", "pan", "pani", "panie", "panowie", "prof", "hab"], KB = ["a", "ach", "aha", "aj", "akurat", "ał", "aua", "auć", "ba", "brawo", "e", "ech", "ehe", "ehm", "ej", "ejże", "ekhm", "ekstra", "jej", "jejku", "łał", "och", "oh", "oho", "oj", "ojej", "ojejku", "phi", "precz", "super", "uwaga", "wow"], YB = ["°C", "°F", "ar", "ary", "arów", "arach", "c", "cl", "cm", "cm²", "cm³", "dag", "deka", "dl", "f", "ft", "g", "gram", "gramów", "gramy", "ha", "hektar", "hektary", "hektarów", "hektarach", "in", "kg", "kilo", "km", "km²", "cm³", "l", "litr", "litrów", "litry", "łyżeczka", "łyżeczkę", "łyżeczki", "łyżka", "łyżkę", "łyżki", "m", "m²", "m³", "mg", "ml", "mm", "mm²", "mm³", "szczypta", "szczyptę", "szczypty", "szklanka", "szklankę", "szklanki", "tuzin"], QB = ["nie", "no", "oto", "tak", "sobie", "ok", "okej", "itp", "itd", "tzw"], eZa = wt.filteredAtEnding = (0, su.default)([].concat(q$, WB, UB, X$, K$, NB)), aZa = wt.filteredAtBeginningAndEnding = (0, su.default)([].concat(Y$, MB, PB, RB, BB, B$, W$, IB)), tZa = wt.filteredAnywhere = (0, su.default)([].concat(AB.singleWords, FB, M$, TB, $B, jB, xB, SB, F$, OB, U$, H$, G$, CB, DB, LB, qB, Q$, Z$, HB, GB, VB, KB, YB, QB, V$)), nZa = wt.cannotDirectlyPrecedePassiveParticiple = (0, su.default)([].concat(Y$, F$, B$, M$, q$, Q$, X$, Z$, G$, U$, H$)), rZa = wt.cannotBeBetweenPassiveAuxiliaryAndParticiple = (0, su.default)([].concat(V$, K$, W$)), sZa = wt.all = (0, su.default)([].concat(AB.singleWords, FB, M$, TB, $B, jB, xB, SB, F$, OB, U$, H$, G$, CB, DB, V$, LB, qB, Q$, Z$, HB, GB, VB, KB, YB, QB, JXa, Y$, MB, PB, RB, BB, B$, W$, IB, q$, WB, UB, X$, K$, NB));
wt.default = {
  filteredAtEnding: eZa,
  filteredAtBeginningAndEnding: aZa,
  filteredAnywhere: tZa,
  cannotDirectlyPrecedePassiveParticiple: nZa,
  cannotBeBetweenPassiveAuxiliaryAndParticiple: rZa,
  all: sZa
};
var Op = {};
Object.defineProperty(Op, "__esModule", {
  value: !0
});
Op.default = void 0;
Op.default = ["a", "aby", "albo", "albowiem", "ale", "bo", "bowiem", "czy", "gdy", "gdyby", "gdyż", "iż", "jeśli", "jeżeli", "lub", "ponieważ", "zanim", "żeby", "który", "która", "które", "którzy", "którego", "której", "których", "któremu", "którym", "którą", "którymi", "że"];
var rb = {};
Object.defineProperty(rb, "__esModule", {
  value: !0
});
rb.default = void 0;
rb.default = [["albo", "albo"], ["ani", "ani"], ["czy", "czy"], ["im", "tym"], ["tak", "jak"]];
var sb = {};
Object.defineProperty(sb, "__esModule", {
  value: !0
});
sb.default = void 0;
sb.default = {
  percentages: {
    slightlyTooMany: 15,
    farTooMany: 20
  },
  cornerstonePercentages: {
    slightlyTooMany: 15,
    farTooMany: 20
  }
};
var J$ = {}, ib = {}, ej = {}, ob = {};
Object.defineProperty(ob, "__esModule", {
  value: !0
});
ob.default = void 0;
ob.default = ["abdykowany", "absorbowany", "adaptowany", "administrowany", "adoptowany", "adorowany", "adresowany", "afiszowany", "agitowany", "akcentowany", "akceptowany", "aklimatyzowany", "akompaniowany", "aktualizowany", "aktywowany", "akumulowany", "alaromowany", "alienowany", "amerykanizowany", "amortyzowany", "amputowany", "analizowany", "angażowany", "anihilowany", "animowany", "anonsowany", "antropomorfizowany", "antydatowany", "anulowany", "apelowany", "aportowany", "aranżowany", "archiwizowany", "aresztowany", "argumentowany", "artykułowany", "ascendowany", "asekurowany", "asymilowany", "asystowany", "atakowany", "autoryzowany", "awanturowany", "babrany", "baczony", "badany", "bagatelizowany", "bajerowany", "bałamucony", "balangowany", "balansowany", "banalizowany", "bandażowany", "bankrutowany", "baraszkowany", "barwiony", "bawiony", "bazgrany", "bazowany", "bębniony", "bełkotany", "besztany", "biadolony", "biczowany", "bity", "błagany", "błaznowany", "blefowany", "błogosławiony", "blokowany", "bluzgany", "błyskany", "błyszczący", "boczony", "bogacony", "bojkotowany", "boksowany", "bombardowany", "bopowany", "borowany", "brandzlowany", "brany", "brasowany", "bratany", "bredzony", "brnięty", "brodzony", "broniony", "brudzony", "brylowany", "budowany", "budzony", "bujany", "bulony", "bulwersowany", "bumelowany", "burzony", "butelkowany", "bywany", "cackany", "całowany", "capnięty", "cechowany", "celebrowany", "celowany", "ceniony", "cenzurowany", "chciany", "chlany", "chlapany", "chlapnięty", "chlastany", "chłodzony", "chlostany", "chlubiony", "chodowany", "chomikowany", "chorowany", "chowany", "chroniony", "chrupany", "chrzczony", "chuty", "chwalony", "chwycony", "chwytany", "chybotany", "chylony", "ciachnięty", "ciągany", "ciągnięty", "ciemiężony", "cierpiany", "cieszony", "cięty", "ciskany", "ciśnięty", "ciułany", "cmokany", "cmoknięty", "cofany", "cofnięty", "ćpany", "cucony", "cudzołożony", "cumowany", "ćwiartowany", "ćwiczony", "cykany", "cytowany", "czajony", "czarowany", "czczony", "czepiany", "czepiony", "czerpany", "czesany", "częstowany", "czochrany", "czołgany", "czuty", "czytany", "czyty", "darowany", "darty", "darzony", "datowany", "dawany", "dbany", "deaktywowany", "debatowany", "dedukowany", "dedykowany", "defibrylowany", "defilowany", "definiowany", "defraudowany", "degradowany", "degustowany", "deklamowany", "deklarowany", "dekodowany", "dekompresowany", "dekorowany", "dekretowany", "delegowany", "delektowany", "deliberowany", "demaskowany", "dementowany", "demolowany", "demonizowany", "demonstrowany", "demoralizowany", "denerwowany", "denuncjowany", "depeszowany", "depilowany", "deportowany", "deprawowany", "deptany", "deratyzowany", "destabilizowany", "destylowany", "desygnowany", "determinowany", "detonowany", "dewastowany", "dewaulowany", "dezaktywowany", "dezorientowany", "dezynfekowany", "diagnozowany", "dilowany", "dłubany", "dłużony", "dmuchany", "dmuchnięty", "dobiegany", "dobierany", "dobijany", "dobity", "dobrany", "dobudzony", "dobyty", "doceniany", "doceniony", "dochodzony", "dochowany", "dochowywany", "dociągnięty", "dociekany", "docięty", "docinany", "dociskany", "dociśnięty", "doczekany", "doczepiony", "doczołgany", "doczyszczony", "doczytany", "dodany", "dodawany", "dodrukowany", "dodrukowywany", "dofinansowany", "dofinansowywany", "dogadany", "dogadywany", "dogadzany", "doganiany", "doglądany", "doglądnięty", "dognany", "dogodzony", "dogoniony", "dograny", "dogryzany", "dogryziony", "dogrzany", "dogrzebany", "doinformowany", "dojeżdżany", "dojony", "dojrzany", "dojrzewany", "dokańczany", "dokarmiany", "dokarmiony", "dokazany", "dokazywany", "dokładany", "doklejony", "dokonany", "dokończony", "dokonywany", "dokopany", "dokopywany", "dokowany", "dokręcany", "dokręcony", "dokształcany", "dokształcony", "dokuczany", "dokumentowany", "dokupiony", "dołączany", "dołączony", "doładowany", "dolany", "dolewany", "doliczony", "dołowany", "dołożony", "domagany", "domalowany", "domknięty", "domniewywany", "domówiony", "domyślany", "domyślony", "domyty", "doniesiony", "donoszony", "dopadany", "dopadnięty", "dopakowany", "dopalony", "dopasowany", "dopasowywany", "dopatrywany", "dopatrzony", "dopchany", "dopchnięty", "dopełniany", "dopełniony", "dopieszczony", "dopięty", "dopijany", "dopilnowany", "dopingowany", "dopisany", "dopisywany", "dopity", "dopłacany", "dopłacony", "dopłynięty", "dopolerowany", "dopompowany", "dopowiedziany", "dopracowany", "dopracowywany", "doprany", "doprawiony", "doprecyzowany", "doproszony", "doprowadzany", "doprowadzony", "dopucowany", "dopuszczany", "dopuszczony", "dopytywany", "dorabiany", "doradzany", "doradzony", "doręczany", "doręczony", "dorobiony", "dorównany", "dorównywany", "dorwany", "dorysowany", "dorzucany", "dorzucony", "doścignięty", "dosiadany", "dosięgnięty", "doskoczony", "doskonalony", "dosładzany", "dosłany", "dosłyszany", "dosolony", "dośrodkowany", "dossany", "dostany", "dostąpiony", "dostarczany", "dostarczony", "dostawany", "dostawiany", "dostawiony", "dostosowany", "dostosowywany", "dostrajany", "dostrojony", "dostrzegany", "dosunięty", "dosuwany", "doświadczany", "Doświetlony", "dosypany", "dosypywany", "doszkolony", "doszlifowany", "doszorowany", "doszukany", "doszukiwany", "doszyty", "dotankowany", "dotankowywany", "dotargany", "dotaszczony", "dotknięty", "dotleniony", "dotłumaczony", "dotowany", "dotrwany", "dotrzymany", "dotrzymywany", "dotykany", "douczany", "douczony", "dowalony", "dowieziony", "dowodzony", "dowożony", "doznany", "doznawany", "dozorowany", "dozowany", "dożyty", "dożywiony", "dramatyzowany", "drapany", "drapnięty", "draśnięty", "drażniony", "drążony", "dręczony", "drenowany", "drgany", "drgnięty", "drukowany", "dryblowany", "dryfowany", "drzemany", "dubbingowany", "dublowany", "duplikowany", "duszony", "dworowany", "dygotany", "dyktowany", "dymany", "dymiony", "dyrygowany", "dyscyplinowany", "dyskredytowany", "dyskryminowany", "dyskutowany", "dyskwalifikowany", "dysponowany", "dystansowany", "dystrybuowany", "dywagowany", "dźgany", "dźgnięty", "dziabnięty", "dziedziczony", "dziękowany", "dzielony", "dziergany", "dzierżony", "dziobany", "dziurawiony", "dziurkowany", "dźwigany", "dźwignięty", "edukowany", "edytowany", "egzaminowany", "egzekutowany", "egzekwowany", "ekscytowany", "ekshumowany", "ekskomunikowany", "eksmitowany", "ekspandowany", "eksperymentowany", "eksploatowany", "eksplorowany", "eksponowany", "eksportowany", "eksterminowany", "ekstradowany", "ekstrapolowany", "eliminowany", "emancypowany", "emanoway", "emigrowany", "emitowany", "energetyzowany", "eskortowany", "etykietowany", "ewakuowany", "ewaluowany", "fabrykowany", "falowany", "fałszowany", "farbowany", "faszerowany", "faulowany", "faworyzowany", "fechtowany", "fermentowany", "ferowany", "figurowany", "filetowany", "filmowany", "filtrowany", "finalizowany", "finansowany", "firmowany", "fleszowany", "folgowany", "formułowany", "forsowany", "fotografowany", "fundowany", "gadany", "ganiany", "garbiony", "gardzony", "garnirowany", "gaszony", "gawędzony", "gaworzony", "gazowany", "gdakany", "gderany", "generalizowany", "generowany", "gięty", "gilgotany", "gładzony", "głaskany", "głodowany", "głodzony", "gloryfikowany", "głosowany", "głoszony", "głowiony", "gmatwany", "gmerany", "gnany", "gnębiony", "gnieciony", "gnity", "gnojony", "godzony", "gojony", "golnięty", "golony", "goniony", "googlowany", "gospodarowany", "goszczony", "gotowany", "grabiony", "grany", "grasowany", "gratulowany", "grillowany", "grilowany", "gromadzony", "gromiony", "grożony", "gruchany", "gruchnięty", "grupowany", "grywany", "gryziony", "grzany", "grzechotany", "gubiony", "gustowany", "gwałcony", "gwarantowany", "gwizdany", "gwizdnięty", "hackowany", "haftowany", "hajtnięty", "hamowany", "hańbiony", "handlowany", "harcowany", "harmonizowany", "harowany", "hartowany", "hibernowany", "hipnotyzowany", "hodowany", "holowany", "hołubiony", "honorowany", "hospitalizowany", "huknięty", "hulany", "huśtany", "idealizowany", "identyfikowany", "ignorowany", "igrany", "ilustrowany", "imitowany", "implantowany", "implodowany", "imponowany", "importowany", "improwizowany", "indokrynowany", "indukowany", "infekowany", "infiltrowany", "informowany", "ingerowany", "inhalowany", "inscenizowany", "inspirowany", "instalowany", "instruowany", "insynuowany", "integrowany", "interpretowany", "interweniowany", "intonowany", "intubowany", "inwestowany", "inwigilowany", "irytowany", "iskrzony", "izolowany", "jadany", "jawiony", "jazgotany", "jednoczony", "jedzony", "kablowany", "kadzony", "kalany", "kaleczony", "kalkulowany", "kamerowany", "kamienowany", "kamuflowany", "kanalizowany", "kantowanty", "kąpany", "kapitulowany", "kapowany", "karany", "karbonizowany", "karcony", "karczowany", "karmiony", "kartkowany", "kąsany", "kasowany", "kastrowany", "katalogowany", "katapultowany", "katowany", "katrupiony", "kierowany", "kimany", "kiszony", "kiwany", "kiwnięty", "kłaniany", "klapany", "klapnięty", "klarowany", "klasyfikowany", "klębiony", "klejony", "klepany", "klepnięty", "klikany", "kliknięty", "klonowany", "kłopotany", "kłuty", "knocony", "knuty", "kochany", "koczowany", "kodowany", "kojarzony", "kojfnięty", "kojony", "kolekcjonowany", "kolektywizowany", "kolidowany", "kolonizowany", "kolorowany", "koloryzowany", "kołowany", "kołysany", "kombinowany", "komenderowany", "komentowany", "komercjalizowany", "kompensowany", "komplementowany", "komplikowany", "komponowany", "kompromitowany", "komunikowany", "konany", "koncentrowany", "kończony", "konfabulowany", "konfiskowany", "konfrontowany", "konserwowany", "konspirowany", "konstruowany", "konsultowany", "konsumowany", "kontaktowany", "kontestowany", "kontrastowany", "kontrolowany", "kontrowany", "kontynuowany", "kontynuuowany", "konwertowany", "konwojowany", "koordynowany", "kopany", "kopcony", "kopiowany", "kopnięty", "kopulowany", "korelowany", "korkowany", "koronowany", "korygowany", "korzony", "korzystany", "koszony", "kotwiczony", "kozaczony", "kozłowany", "kpity", "kradziony", "krajany", "krążony", "kręcony", "kremowany", "kreowany", "krochmalony", "krojony", "kropiony", "kruszony", "krystalizowany", "kryty", "krytykowany", "krzepnięty", "krzyczany", "krzyknięty", "krzywdzony", "krzywiony", "krzyżowany", "kserowany", "księgowany", "kształcony", "kształtowany", "kulony", "kultywowany", "kumulowany", "kupczony", "kupiony", "kupowany", "kupywany", "kurczony", "kurowany", "kursowany", "kurzony", "kuszony", "kuty", "kwalifikowany", "kwestionowany", "łączony", "ładowany", "łagodzony", "łajdaczony", "lakierowany", "łamany", "lamentowany", "lansowany", "lany", "łapany", "łaskotany", "łaszony", "latany", "łatany", "lawirowany", "leczony", "legalizowany", "legitymowany", "lekceważony", "lepiony", "lewitowany", "liberowany", "licencjonowany", "licytowany", "liczony", "likwidowany", "linczowany", "liniowany", "literowany", "litowany", "lizany", "liznięty", "lobbowany", "lokalizowany", "losowany", "łowiony", "łożony", "lubiany", "łudzony", "lunatykowany", "łupany", "łupiony", "łuskany", "lustrowany", "łuszczony", "luzowany", "łykany", "łyknięty", "łyżeczkowany", "macany", "machany", "machnięty", "mącony", "maczany", "maganyzowany", "maglowany", "majaczony", "majsterkowany", "majtany", "maksymalizowany", "malowany", "maltretowany", "mamiony", "mamrotany", "manewrowany", "manifestowany", "manipulowany", "markowany", "marnotrawiony", "marnowany", "marszczony", "marynowany", "marznięty", "masakrowany", "maskowany", "masowany", "masturbowany", "mataczony", "materializowany", "mawiany", "mazany", "maznięty", "męczony", "meldowany", "merdany", "metabolizowany", "miażdżony", "mielony", "mierzony", "mierzwiony", "mieszany", "miętolony", "migany", "migdalony", "migotany", "mijany", "miksowany", "milowany", "minięty", "minimalizowany", "miotany", "mistyfikowany", "mitygowany", "mizdrzony", "mlany", "mniemany", "mnożony", "mobilizowany", "mocowany", "moczony", "modelowany", "modernizowany", "modlony", "modulowany", "modyfikowany", "molestowany", "monitorowany", "monopolizowany", "montowany", "mordowany", "motywowany", "mówiony", "mrożony", "mrugany", "mrużony", "muskany", "mutowany", "mydlony", "mylony", "myszkowany", "myty", "nabazgrany", "nabiegany", "nabierany", "nabity", "nabrany", "nabrojony", "nabrudzony", "nabyty", "nabywany", "nacelowany", "nachapany", "nachodzony", "nachwalony", "nachylony", "naciągany", "naciągnięty", "nacierany", "nacięty", "nacinany", "naciskany", "naciśnięty", "nacjonalizowany", "naczepiony", "nadany", "nadawany", "nadchodzony", "nadciągany", "nadciągnięty", "nadcięty", "nadesłany", "nadgoniony", "nadgryzany", "nadgryziony", "nadinterpretowany", "nadłożony", "nadmieniany", "nadmieniony", "nadmuchany", "nadrabiany", "nadrobiony", "nadskakiwany", "nadsłuchiwany", "nadstawiany", "nadstawiony", "nadszarpnięty", "naduszony", "nadużyty", "nadużywany", "nadwerężany", "nadwyrężany", "nadwyrężony", "nadziany", "nadzorowany", "naelektryzowany", "nafaszerowany", "nagabywany", "nagadany", "nagięty", "naginany", "nagłaszany", "nagłośniony", "nagoniony", "nagradzany", "nagrany", "nagrodzony", "nagromadzony", "nagrywany", "nagryzmolony", "nagrzany", "nagrzebany", "nagrzewany", "nagwizdany", "naigrywany", "najechany", "najęty", "najmowany", "nakarmiany", "nakarmiony", "nakazany", "nakazywany", "nakierowany", "nakierowywany", "nakładany", "nakłamany", "nakłaniany", "naklejany", "naklejony", "naklepany", "nakłoniony", "nakłuty", "nakłuwany", "nakopany", "nakręcany", "nakręcony", "nakreślany", "nakreślony", "nakruszony", "nakryty", "nakrywany", "nakrzyczany", "nakupiony", "naładowany", "nalany", "nałapany", "nalepiony", "nalewany", "naliczony", "nałowiony", "nałożony", "namaczany", "namagnetyzowany", "namalowany", "namaszczany", "namaszczony", "namawiany", "namęczony", "namierzany", "namieszany", "namoczony", "namówiony", "namydlany", "namyślony", "naniesiony", "naoliwiany", "naoliwiony", "naopowiadany", "naostrzony", "napadany", "napadnięty", "napakowany", "napalony", "naparzany", "napastowany", "napawany", "napchany", "napędzany", "napełniany", "napełniony", "napierany", "napiętnowany", "napięty", "napinany", "napisany", "napluty", "napływany", "napoczęty", "napojony", "napompowany", "napotkany", "napotykany", "napraszany", "naprawiany", "naprawiony", "naprężany", "naprężony", "napromieniowany", "naprostowany", "naprowadzany", "naprowadzony", "napsuty", "napuszczany", "napuszczony", "napychany", "napytany", "narąbany", "naradzany", "naradzony", "narastany", "narażany", "narażony", "nareperowany", "narkotyzowany", "narodzony", "naruszany", "naruszony", "narwany", "narysowany", "narzucany", "narzucony", "nasączany", "nasączony", "nasadzony", "nasiąkany", "nasilany", "nasilony", "naskakiwany", "naskoczony", "naskrobany", "naśladowany", "nasłany", "nasłuchany", "nasłuchiwany", "nasmarowany", "nastąpiony", "nastawiany", "nastawiony", "nastraszany", "nastrojony", "nastukany", "nasunięty", "nasuwany", "naświetlany", "nasycony", "nasyłany", "nasypany", "naszczany", "naszkicowany", "naszpikowany", "naszprycowany", "naszykowany", "naszyty", "naszywany", "natarty", "natchnięty", "natknięty", "natleniony", "natłuszczony", "natrafiony", "natrząsany", "natrząsnięty", "nauczany", "nauczony", "nawadniany", "nawalony", "nawiązany", "nawiązywany", "nawiedzany", "nawiedzony", "nawiercony", "nawiewany", "nawieziony", "nawigowany", "nawijany", "nawilżany", "nawilżony", "nawinięty", "nawlekany", "nawodniony", "nawoływany", "nawoskowany", "nawożony", "nawpychany", "nawracany", "nawrócony", "nawrzucany", "nawtykany", "nawymyślany", "nazbierany", "nazmyślany", "naznaczany", "naznaczony", "nazrywany", "nazwany", "nazywany", "nęcony", "negocjowany", "negowany", "nękany", "neutralizowany", "niańczony", "niecierpliwiony", "niedoceniany", "niedowidziany", "nienawidzony", "niesiony", "nikolony", "niszczony", "nitkowany", "niuchany", "niweczony", "niwelowany", "nokautowany", "nominowany", "notowany", "nucony", "numerowany", "nurtowany", "obaczony", "obadany", "obalany", "obalony", "obandażowany", "obarczany", "obarczony", "obawiany", "obchodzony", "obciągnięty", "obciążony", "obcięty", "obcinany", "obcyndalany", "obczajany", "obczajony", "obdarowany", "obdarty", "obdarzany", "obdarzony", "obdzielony", "obdzierany", "obdzwaniany", "obdzwoniony", "obejmowany", "oberwany", "obessany", "obezwładniany", "obezwładniony", "obfotografowany", "obfotografowywany", "obgadany", "obgadywany", "obgryzany", "obgryziony", "obiecany", "obiecywany", "obierany", "obijany", "obity", "objadany", "objaśniany", "objawiany", "objawiony", "objechany", "objęty", "objeżdżany", "obkręcany", "oblany", "obłapiany", "obłapywany", "obłaskawiany", "obłaskawiony", "obleciany", "obleganu", "oblewany", "obliczany", "obliczony", "oblizany", "obłowiony", "obłożony", "obluzowany", "obluzowywany", "obmacany", "obmacywany", "obmawiany", "obmyślany", "obmyślony", "obmyty", "obmywany", "obnażany", "obniżany", "obniżony", "obnoszony", "obowiązywany", "obozowany", "obrabiany", "obrabowany", "obracany", "obradowany", "obramowany", "obraniany", "obrany", "obrastany", "obrażany", "obrażony", "obrobiony", "obrócony", "obrodzony", "obroniony", "obrysowany", "obrywany", "obryzgany", "obrzezany", "obrzucany", "obrzucony", "obrzygany", "obsadzany", "obsadzony", "obściskiwany", "obserwowany", "obsiany", "obsikany", "obsikiwany", "obskakiwany", "obskoczony", "obskubany", "obskubywany", "obśliniany", "obśliniony", "obsługiwany", "obsłużony", "obsmarowany", "obstawiany", "obstawiony", "obstrzeliwany", "obsunięty", "obsuwany", "obsypany", "obsypywany", "obszukany", "obszukiwany", "obtaczany", "obtarty", "obtoczony", "obudzony", "obwąchany", "obwąchiwany", "obwiązany", "obwiązywany", "obwieszany", "obwieszczany", "obwieszczony", "obwieszony", "obwijany", "obwiniany", "obwinięty", "obwołany", "obyty", "obżerany", "ocalany", "ocalony", "ocechowany", "oceniany", "oceniony", "ocenzurowany", "ochładzany", "ochlapany", "ochlapywany", "ochłodzony", "ochłonięty", "ochraniany", "ochroniony", "ochrzaniany", "ochrzczony", "ociągany", "ocielony", "ocieplany", "ocieplony", "ocierany", "ocknięty", "ocucony", "ocuty", "oczarowywany", "oczekiwany", "oczerniany", "oczerniony", "oczyszczany", "oczyszczony", "odarty", "odbębniony", "odbetonowany", "odbezpieczany", "odbezpieczony", "odbijany", "odbity", "odblokowany", "odbudowany", "odbudowywany", "odbutowany", "odbyty", "odcedzany", "odchorowany", "odchowany", "odchudzany", "odchudzony", "odchylany", "odchylony", "odciągany", "odciągnięty", "odciążony", "odcierpiony", "odcięty", "odcinany", "odcisnięty", "odcumowany", "odcyfrowany", "odcyfrowywany", "odczarowany", "odczekany", "odczepiany", "odczepiony", "odczuty", "odczuwany", "odczyniony", "odczytany", "odczytywany", "oddalany", "oddany", "oddawany", "oddelegowany", "oddychany", "oddzielany", "oddzielony", "odebrany", "odegnany", "odegrany", "odejmowany", "odepchnięty", "oderwany", "odeskortowany", "odesłany", "odespany", "odessany", "odetkany", "odetnięty", "odezwany", "odfiltrowany", "odgadnięty", "odgadywany", "odganiany", "odgarniany", "odgarnięty", "odgięty", "odgniatany", "odgoniony", "odgradzany", "odgrażany", "odgrodzony", "odgruzowany", "odgrywany", "odgryzany", "odgryziony", "odgrzany", "odgrzebany", "odgrzebywany", "odgrzewany", "odgwizdany", "odhaczony", "odholowany", "odinstalowany", "odizolowany", "odjedzony", "odjęty", "odjonizowany", "odkażany", "odkażony", "odkładany", "odklejony", "odkochany", "odkodowany", "odkodowywany", "odkopany", "odkopywany", "odkorkowany", "odkręcany", "odkręcony", "odkrojony", "odkryty", "odkrywany", "odkupiony", "odkupywany", "odkurzany", "odkurzony", "odkuty", "odłączany", "odłączony", "odłamywany", "odlany", "odlatywany", "odlepiany", "odlewany", "odliczany", "odliczony", "odłożony", "odłupany", "odmachany", "odmachiwany", "odmalowany", "odmarszczony", "odmawiany", "odmeldowany", "odmieniany", "odmieniony", "odmierzany", "odmierzony", "odmieszany", "odmontowany", "odmówiony", "odmrażany", "odmrożony", "odnajdowany", "odnaleziony", "odnawiany", "odniesiony", "odnoszony", "odnotowany", "odnotowywany", "odnowiony", "odpakowany", "odpakowywany", "odpalany", "odpalony", "odpałzowany", "odparowany", "odparty", "odpędzany", "odpicowany", "odpieczętowany", "odpierany", "odpięty", "odpiłowany", "odpiłowywany", "odpinany", "odpisany", "odpisywany", "odpłacany", "odplamiony", "odplątany", "odpłynięty", "odpowietrzony", "odpracowany", "odpracowywany", "odprasowany", "odprawiany", "odprawiony", "odprężany", "odprostowany", "odprowadzany", "odprowadzony", "odpruty", "odpryskany", "odpukany", "odpukiwany", "odpuszczany", "odpuszczony", "odpychany", "odrąbany", "odrabiany", "odrąbywany", "odradzany", "odradzony", "odrapany", "odrastany", "odratowany", "odreagowany", "odremontowany", "odrestaurowany", "odrestaurowywany", "odrobaczany", "odrobiony", "odroczony", "odrodzony", "odrośnięty", "odróżniany", "odróżniony", "odrysowany", "odrywany", "odrzucany", "odrzucony", "odsączany", "odsączony", "odsadzony", "odseparowany", "odsiadywany", "odsiany", "odsiewany", "odsłaniany", "odsłonięty", "odsłuchany", "odsłuchiwany", "odsłużony", "odśnieżany", "odśnieżony", "odsolony", "odśpiewany", "odsprzedany", "odsprzedawany", "odstąpiony", "odstawiany", "odstawiony", "odstępowany", "odstraszany", "odstręczony", "odstresowany", "odstrzeliwany", "odstrzelony", "odsunięty", "odsuwany", "odświeżany", "odświeżony", "odsyłany", "odsypywany", "odsysany", "odszczekany", "odszczekiwany", "odsztafirowany", "odszukany", "odszyfrowany", "odszyfrowywany", "odszykowany", "odtrąbiony", "odtrącony", "odtruty", "odtwarzany", "odtworzony", "oduczony", "odurzony", "odwalany", "odwalony", "odwiązany", "odwiązywany", "odwiedzany", "odwiedzony", "odwieszony", "odwieziony", "odwijany", "odwinięty", "odwlekany", "odwodniony", "odwodzony", "odwołany", "odwoływany", "odwożony", "odwracany", "odwrócony", "odwzajemniony", "odwzorowany", "odżegnany", "odziany", "odziedziczony", "odznaczany", "odznaczony", "odzwieciedlony", "odzwierciedlany", "odzwoniony", "odzwyczajony", "odzyskany", "odzyskiwany", "odżyty", "odzywiany", "odżywiony", "oferowany", "ofiarowany", "ofiarowywany", "ogarniany", "ogarnięty", "oglądany", "ogłaszany", "ogłoszony", "ogłupiany", "ogłupiony", "ogłuszony", "ogołocony", "ogolony", "ograbiany", "ograbiony", "ograniczany", "ograniczony", "ograny", "ogrodzony", "ogryziony", "ogrzany", "ogrzewany", "okablowany", "okaleczony", "okantowany", "okąpany", "okazany", "okazywany", "okiełznany", "okładany", "okłamany", "okłamywany", "oklaskiwany", "oklejony", "oklepany", "okopany", "okopywany", "okpiony", "okradany", "okradziony", "okraszony", "okrążany", "okrążony", "okręcany", "okręcony", "określany", "określony", "okrojony", "okryty", "okrywany", "okrzyknięty", "okulawiony", "okupiony", "okupowany", "olany", "olewany", "olśnięty", "omamiony", "omawiany", "omdlewany", "omijany", "ominięty", "omotany", "omówiony", "onanizowany", "onieśmielany", "onieśmielony", "opadnięty", "opakowany", "opalany", "opalony", "opancerzony", "opanowany", "opanowywany", "oparty", "oparzony", "opasany", "opatentowany", "opatrywany", "opatrzony", "opatulony", "opchnięty", "opędzany", "opędzony", "operowany", "opętany", "opętywany", "opieczętowany", "opiekowany", "opierany", "opijany", "opisany", "opisywany", "opity", "opłacany", "opłacony", "opłakany", "opłakiwany", "opłukany", "opluty", "opluwany", "opływany", "opodatkowany", "opodatkowywany", "oponowany", "oporządzany", "oporządzony", "opowiadany", "opowiedziany", "opóźniany", "opóźniony", "opracowany", "opracowywany", "oprawiany", "oprawiony", "oprowadzany", "oprowadzony", "opróżniany", "opróżniony", "opryskany", "opryskiwany", "opublikowany", "opukany", "opuszczany", "opuszczony", "opychany", "opylony", "orany", "orbowany", "organizowany", "orientowany", "oroszony", "orzekany", "orżnięty", "osaczany", "osaczony", "osadzany", "osądzany", "osadzony", "osądzony", "oscylowany", "osiadany", "osiągany", "osiągnięty", "osiedlany", "osiedlony", "osiedzony", "osierocony", "osiodłany", "oskalpowany", "oskarżony", "oskrobany", "oskrzydlany", "oskrzydlony", "oskubany", "oskubywany", "osłabiany", "osłabiony", "oślepiany", "oślepiony", "oślepnięty", "ośliniany", "osłodzony", "osłoniony", "osłuchany", "osmalony", "ośmielony", "ośmieszany", "ośmieszony", "ostrzegany", "ostrzelany", "ostrzelity", "ostrzony", "ostudzony", "osunięty", "osuszany", "osuszony", "osuwany", "oswajany", "oświadczany", "oświadczony", "oświecany", "oświeciony", "oświetlany", "oświetlony", "oswobadzany", "oswobodzony", "oswojony", "oszacowany", "oszałamiany", "oszczany", "oszczędzany", "oszczędzony", "oszklony", "oszlifowany", "oszołomiony", "oszpecony", "oszukany", "oszukiwany", "oszwabiony", "otaczany", "otarty", "otoczony", "otruty", "otruwany", "otrząsany", "otrząśnięty", "otrzepany", "otrzeźwiony", "otrzymany", "otrzymywany", "otulony", "otumaniony", "otwierany", "otworzony", "otwarty", "owany", "owdowiony", "owiany", "owijany", "owinięty", "ozdabiany", "ozdobiony", "ozdrowiony", "ożeniony", "oznaczany", "oznaczony", "oznajmiany", "oznajmiony", "oznakowany", "ożyty", "ożywany", "ożywiany", "ożywiony", "pachnący", "pacnąty", "pakowany", "paktowany", "pałany", "pałaszowany", "palnięty", "palony", "pamiętany", "panoszony", "paprany", "parafrazowany", "paraliżowany", "parkowany", "parowany", "partaczony", "parzony", "pastowany", "paszony", "patrolowany", "patroszony", "patrzony", "pauzowany", "pchany", "pchnięty", "pdholowany", "pedałowany", "pękany", "pęknięty", "pełniony", "penetrowany", "perforowany", "perfumowany", "perswadowany", "piastowany", "pichcony", "pielęgnowany", "pielony", "pieniony", "pieszczony", "piętnowany", "pięty", "pijany", "pikietowany", "piknikowany", "pikowany", "pilnowany", "pilotowany", "piłowany", "pisany", "pisywany", "pity", "płacony", "plądrowany", "plamiony", "planowany", "płaszczony", "plątany", "płatany", "pławiony", "plewiony", "płonący", "płoszony", "plotkowany", "plugawiony", "płukany", "pluskany", "pluty", "pobaraszkowany", "pobierany", "pobity", "pobłażany", "pobłogosławiony", "pobrany", "pobrudzony", "pobudzany", "pobudzony", "pobujany", "pocałowany", "pocerowany", "pochłaniany", "pochlapany", "pochlebiany", "pochłonięty", "pochowany", "pochwalany", "pochwalony", "pochwycony", "pochylany", "pochylony", "pociachany", "pociągany", "pociągnięty", "pocierany", "pocieszany", "pocieszony", "pocięty", "pocony", "pocukrowany", "poćwiartowany", "poczesany", "poczęstowany", "poczęty", "poczochrany", "poczuty", "poczytany", "poczytywany", "podany", "podarowany", "podarty", "podawany", "podążony", "podbierany", "podbijany", "podbity", "podbudowany", "podbudowywany", "podburzany", "podburzony", "podchwycony", "podciągany", "podciągnięty", "podcierany", "podcięty", "podcinany", "podczepiony", "poddany", "poddawany", "podebrany", "podejmowany", "podejrzany", "podejrzewany", "podelektowany", "podeptany", "poderwany", "podesłany", "podglądany", "podgolony", "podgoniony", "podgryzany", "podgrzany", "podgrzewany", "podjadany", "podjedzony", "podjęty", "podkablowany", "podkarmiony", "podkładany", "podklejony", "podkolorowany", "podkołowany", "podkopany", "podkopywany", "podkradany", "podkradnięty", "podkręcany", "podkręcony", "podkreślany", "podkreślony", "podkształcony", "podkulony", "podkupiony", "podkurzony", "podkuty", "podłączany", "podłączony", "podładowany", "podłamany", "podlany", "podłapany", "podleczony", "podlegany", "podlewany", "podliczany", "podliczony", "podlizany", "podlizywany", "podłożony", "podmalowany", "podmieniany", "podmieniony", "podmuchany", "podmyty", "podnajęty", "podniecany", "podniecony", "podniesiony", "podnoszony", "podołany", "podopingowany", "podostrzony", "podotykany", "podpadnięty", "podpalany", "podpalony", "podparty", "podpatrywany", "podpatrzony", "podpieczętowany", "podpiekany", "podpierany", "podpięty", "podpiłowany", "podpinany", "podpisany", "podpisywany", "podpłacony", "podpłynięty", "podpompowany", "podporządkowany", "podporządkowywany", "podpowiadany", "podpowiedziany", "podprowadzany", "podpuszczany", "podpuszczony", "podpychany", "podpytany", "podrabiany", "podrapany", "podrasowany", "podratowany", "podrażniony", "podręczony", "podregulowany", "podreperowany", "podretuszowany", "podrobiony", "podroczony", "podróżowany", "podrygiwany", "podrywany", "podrzucany", "podrzucony", "podrzynany", "podsadzony", "podskubywany", "podsłuchany", "podsłuchiwany", "podsmażany", "podsmażony", "podśpiewywany", "podstawiany", "podstawiony", "podstemplowany", "podstrojony", "podsumowany", "podsumowywany", "podsunięty", "podsuwany", "podświetlany", "podsycany", "podsycony", "podsyłany", "podsypany", "podszczypywany", "podszkolony", "podszlifowany", "podszykowany", "podszyty", "podszywany", "podtapiany", "podtarty", "podtopiony", "podtrzymany", "podtrzymywany", "podtuczony", "poduczany", "podupadany", "poduszony", "podwajany", "podwalany", "podważany", "podwędzony", "podwiązany", "podwieszany", "podwieziony", "podwijany", "podwinięty", "podwojony", "podwożony", "podwyżany", "podwyższany", "podwyższony", "podyktowany", "podyskutowany", "podziabany", "podziałany", "podziałkowany", "podziękowany", "podzielony", "podziurawiony", "podziwiany", "podźwignięty", "poeksperymentowany", "pofarbowany", "pofatygowany", "pofilmowany", "poganiany", "pogardzany", "pogardzony", "pogarszany", "pogaszony", "pogładzony", "pogłaskany", "pogłębiany", "pogłębiony", "pogłośniony", "pogmatwany", "pognębiony", "pognieciony", "pogodzony", "pogoniony", "pogorszony", "pogotowany", "pograbiony", "pogrążany", "pogrążony", "pogrożony", "pogrubiany", "pogrubiony", "pogruchany", "pogruchotany", "pogrupowany", "pogrywany", "pogryzany", "pogryziony", "pogrzany", "pogrzebany", "pogubiony", "pogwałcany", "pohamowany", "pohandlowany", "poharatowany", "pohuśtany", "poinformowany", "poinstruowany", "pojednany", "pojęty", "pojmięty", "pojmowany", "pojony", "pokajany", "pokaleczony", "pokarany", "pokarmiony", "pokąsany", "pokatalogowany", "pokazany", "pokazywany", "pokiereszowany", "pokierowany", "pokiwany", "pokładany", "poklepany", "poklepywany", "pokłoniony", "pokłuty", "pokochany", "pokolorowany", "pokoloryzowany", "pokołysany", "pokombinowany", "pokomplikowany", "pokonany", "pokończony", "pokonywany", "pokopany", "pokrajany", "pokrążony", "pokręcony", "pokrojony", "pokruszony", "pokryty", "pokrywany", "pokrzepiany", "pokrzepiony", "pokrzyżowany", "pokuszony", "pokutowany", "połączony", "polakierowany", "połamany", "polany", "połapany", "połaskotany", "połatany", "polecany", "połechtany", "polecony", "poleczony", "polegany", "polemizowany", "polepszany", "polepszony", "polerowany", "polewany", "policzkowany", "policzony", "polimeryzowany", "polizany", "połknięty", "polowany", "połowiony", "położony", "polubiony", "poluźniony", "poluzowany", "połykany", "pomacany", "pomachany", "pomagany", "pomalowany", "pomarynowany", "pomasowany", "pomazany", "pomęczony", "pomiatany", "pomieszany", "pomieszczony", "pomijany", "pominięty", "pomiziany", "pomknięty", "pomnażany", "pomniejszany", "pomniejszony", "pomnożony", "pomoczony", "pompowany", "pomydlony", "pomylony", "pomyszkowany", "pomywany", "ponabijany", "ponaciskany", "ponadziewany", "ponaglany", "ponaglony", "ponagrywany", "ponaklejany", "ponakłuwany", "ponakrywany", "ponaprawiany", "ponawiany", "poniańczony", "poniechany", "ponieiwerany", "poniesiony", "poniszczony", "poniżany", "poniżony", "ponoszony", "ponowiony", "ponudzony", "poobcinany", "poobcowany", "poobczajany", "poobijany", "poobmacywany", "poobracany", "poobserwowany", "poodbijany", "poodcinany", "poodgryzany", "poodkurzany", "poodprawiany", "poodsuwany", "poodwalany", "pooglądany", "poograniczany", "poopalany", "poopiekany", "poopwiadany", "pootwierany", "popadany", "popakowany", "popalony", "poparty", "poparzony", "popchany", "popchnięty", "popędzany", "popędzony", "popękany", "popełniany", "popełniony", "poperfumowany", "popierany", "popieszczony", "popijany", "popilnowany", "popisany", "popity", "popłacony", "popłakiwany", "poplamiony", "poplątany", "popluskany", "popodcinany", "popodziwiany", "popoprawiany", "poprany", "poprasowany", "poprawiany", "poprawiony", "poproszony", "poprowadzony", "popryskany", "poprzebierany", "poprzeciągany", "poprzecinany", "poprzedzany", "poprzeglądany", "poprzeklinany", "poprzekopywany", "poprzemieszczany", "poprzenoszony", "poprzesadzany", "poprześladowany", "poprzestawiany", "poprzesuwany", "poprzewieszany", "poprzewracany", "poprzycinany", "poprzymierzany", "poprzytulany", "poprzywiązywany", "popsuty", "popudrowany", "popukany", "popularyzowany", "popuszczany", "popuszczony", "popychany", "popykany", "popytany", "porabiany", "porachowany", "poraniony", "poratowany", "porażony", "poręczony", "porównany", "porozbierany", "porozbijany", "porozciągany", "porozcinany", "porozdawany", "porozdzielany", "porozmieszczany", "poróżniony", "porozpędzany", "porozpieszczany", "porozprowadzany", "porozpruwany", "porozrzucany", "porozstawiany", "porozsyłany", "porozumiewany", "porozwalany", "porozwiązywany", "porozwieszany", "porozwożony", "portretowany", "poruszany", "poruszony", "porwany", "porysowany", "porywany", "porządkowany", "porządzony", "porzucany", "porzucony", "posądzany", "posadzony", "posądzony", "pościągany", "pościelony", "pościerany", "pościgany", "pościnany", "pościskany", "posegregowany", "posiadany", "posiany", "posiekany", "posilany", "posiłkowany", "posilony", "posiłowany", "posiniaczony", "posiorbany", "poskąpiony", "poskładany", "posklejany", "poskramiany", "poskręcany", "poskrobany", "poskromiony", "poskubany", "posłany", "posłodzony", "poślubiany", "poślubiony", "posługiwany", "posmakowany", "posmarowany", "posolony", "posortowany", "pospekulowany", "pospieszany", "pośpieszany", "pośpiewany", "pospinany", "pospłacany", "posprawdzany", "posprzątany", "posprzedawany", "pośredniczony", "possany", "postanowiony", "postany", "postarany", "postawiony", "postemplowany", "posterowany", "postradany", "postraszony", "postrugany", "postrzegany", "postrzelany", "postrzelony", "postukany", "postymulowany", "posunięty", "posuwany", "poświącany", "poświadczony", "poświecony", "poświęcony", "poświętowany", "poświntuszony", "posyłany", "posypany", "posypywany", "poszarpany", "poszastany", "poszatkowany", "poszczuty", "poszczycony", "poszczypany", "poszerzany", "poszerzony", "poszorowany", "poszpiegowany", "poszturchany", "poszukany", "poszukiwany", "poszwędany", "poszybowany", "potakiwany", "potarmoszony", "potarty", "potasowany", "potęgowany", "potępiany", "potępiony", "potknięty", "potoczony", "potopiony", "potorturowany", "potrącany", "potrącony", "potraktowany", "potrojony", "potruty", "potrząsany", "potrzaskany", "potrząsnięty", "potrząśnięty", "potrzymany", "Poturbowany", "poturlany", "potwierdzony", "potykany", "poucinany", "pouczany", "pouczony", "poudawany", "poukładany", "pouprawiany", "poupychany", "pourywany", "poustawiany", "poużywany", "powąchany", "powachlowany", "powalany", "powalony", "poważany", "powbijany", "powciągany", "powciskany", "powdychany", "powęszony", "powetowany", "powiadamiany", "powiadomiony", "powiązany", "powiedziany", "powiedzony", "powiększany", "powielany", "powielony", "powierzany", "powierzony", "powieszony", "powiewany", "powinszowany", "powitany", "powity", "powkładany", "powlekany", "powłóczony", "powodowany", "powołany", "powoływany", "powożony", "powpychany", "powrócony", "powrzucany", "powsadzany", "powściągnięty", "powspominany", "powstrzymany", "powtarzany", "powtórzony", "powybierany", "powybijany", "powycierany", "powycinany", "powyciskany", "powydawany", "powyganiany", "powyginany", "powyjaśniany", "powyjmowany", "powyłączany", "powymiatany", "powymieniany", "powynoszony", "powypełniany", "powypisywany", "powyrywany", "powyrzucany", "powystrzelany", "powysyłany", "powywalany", "powywieszany", "powywracany", "powzięty", "pozabawiany", "pozabijany", "pozacierany", "pożądany", "pożądlony", "pozadzierany", "pozakładany", "pozaklinany", "pozałatwiany", "pozamiatany", "pozamieniany", "pozamrażany", "pozamykany", "pozapalany", "pozapinany", "pozapisywany", "pozapraszany", "pożarty", "pozasłaniany", "pozastrzelany", "pozatykany", "pozbawiany", "pozbawiony", "pozbierany", "pozbyty", "pozbywany", "pozdejmowany", "pozdrawiany", "pozdrowiony", "pożegnany", "pożerany", "pozmiatany", "pozmieniany", "pozmywany", "poznaczony", "poznany", "poznawany", "poznęcany", "pozorowany", "pozostawiany", "pozostawiony", "pozowany", "pozrywany", "pozszywany", "pożuty", "pozwalniany", "pozwany", "pozwiązywany", "pozwiedzany", "pozwolony", "pożyczany", "pożyczony", "pozyskany", "pożyty", "pozywany", "pożywiany", "pożywiony", "praktykowany", "prany", "prasowany", "prawiony", "prażony", "precyzowany", "preferowany", "prenumerowany", "prezentowany", "próbowany", "procesowany", "produkowany", "profanowany", "profilowany", "prognozowany", "programowany", "projektowany", "proklamowany", "prolongowany", "promieniowany", "promowany", "propagowany", "proponowany", "prosperowany", "prostowany", "proszkowany", "proszony", "protestowany", "protokołowany", "prowadzony", "prowokowany", "pruty", "pryskany", "pryśnięty", "przeanalizowany", "przearanżowany", "przebaczany", "przebaczony", "przebadany", "przebiegnięty", "przebierany", "przebijany", "przebity", "przebolony", "przebrany", "przebudowany", "przebudowywany", "przebudzany", "przebudzony", "przebukowany", "przebyty", "przebywany", "przeceniany", "przeceniony", "przechlapany", "przechodzony", "przechowany", "przechowywany", "przechrzcony", "przechwycony", "przechwytywany", "przechylany", "przechylony", "przechytrzany", "przechytrzony", "przeciągany", "przeciągnięty", "przeciążany", "przeciążony", "przeciekany", "przecierany", "przecierpiany", "przecięty", "przecinany", "przeciskany", "przeciśnięty", "przeciwstawiany", "przećwiczony", "przeczekany", "przeczesany", "przeczesywany", "przeczołgany", "przeczuty", "przeczuwany", "przeczyszczony", "przeczytany", "przedarty", "przedawkowany", "przedawkowywany", "przedekorowany", "przedłożony", "przedłużany", "przedłużony", "przedmuchany", "przedobrzony", "przedostany", "przedostawany", "przedsiewzięty", "przedstawiany", "przedstawiony", "przedymany", "przedyskutowany", "przedzierany", "przedziurawiony", "przedziurkowany", "przeegzaminowany", "przefaksowany", "przefarbowany", "przefasonowany", "przefasowany", "przefaxowany", "przefiltrowany", "przeformowany", "przeforsowany", "przegadany", "przeganany", "przeganiany", "przegapiany", "przegapiony", "przegięty", "przeginany", "przeglądany", "przeglądnięty", "przegłodzony", "przegłosowany", "przegoniony", "przegotowany", "przegotowywany", "przegrabiony", "przegradzany", "przegrany", "przegrupowany", "przegrupowywany", "przegrywany", "przegryzany", "przegryziony", "przegrzany", "przegrzebany", "przegrzewany", "przehandlowany", "przeholowany", "przeinstalowany", "przeistoczony", "przejadany", "przejaskrawiany", "przejaśniony", "przejawiany", "przejawiony", "przejechany", "przejęty", "przejeżdżany", "przejmowany", "przejrzany", "przekabacany", "przekabacony", "przekablowany", "przekalibrowany", "przekalkulowany", "przekarmiany", "przekąszony", "przekazywany", "przekierowany", "przekierowywany", "przekimany", "przekładany", "przeklejony", "przeklęty", "przeklinany", "przeklnięty", "przekłuty", "przekonany", "przekonfigurowany", "przekonstruowany", "przekonwertowany", "przekonywany", "przekopany", "przekopywany", "przekoziołkowany", "przekraczany", "przekręcany", "przekręcony", "przekreślany", "przekreślony", "przekroczony", "przekrojony", "przekrzyczony", "przekrzywiony", "przekształcany", "przekształcony", "przekupiony", "przekupywany", "przekuty", "przekwalifikowany", "przełączany", "przełączony", "przeładowany", "przeładowywany", "przełamany", "przełamywany", "przelany", "przelatywany", "przeleciany", "przelewany", "przeleżany", "przelicytowany", "przeliczany", "przeliczony", "przeliterowany", "przełknięty", "przełożony", "przełykany", "przełyknięty", "przemalowany", "przemalowywany", "przemaszerowany", "przemawiany", "przemeblowany", "przemęczony", "przemielony", "przemieniany", "przemierzony", "przemieszczany", "przemieszczony", "przemijany", "przemilczany", "przemilczony", "przeminięty", "przemknięty", "przemodelowany", "przemusztrowany", "przemycany", "przemycony", "przemyślany", "przemyślony", "przemyty", "przemywany", "przenegocjowany", "przeniesiony", "przenikany", "przeniknięty", "przenoszony", "przeobrażany", "przeobrażony", "przeoczany", "przeoczony", "przeorany", "przeorganizowany", "przeorientowany", "przepadany", "przepakowany", "przepalony", "przeparkowany", "przepchany", "przepchnięty", "przepędzany", "przepędzony", "przepełniany", "przepełniony", "przepijany", "przepiłowany", "przepisany", "przepisywany", "przepity", "przepłacany", "przepłacony", "przepłakany", "przeplanowany", "przepłoszony", "przepłukany", "przepłukiwany", "przepłynięty", "przepływany", "przepompowany", "przepompowywany", "przepowiadany", "przepowiedziany", "przepracowany", "przepracowywany", "przeprany", "przeprawiany", "przeprawiony", "przeprogramowany", "przeprojektowany", "przeprowadzany", "przeprowadzony", "przepuszczany", "przepuszczony", "przepychany", "przepytany", "przepytywany", "przerąbany", "przerabiany", "przeradzany", "przerastany", "przerażony", "przeredagowany", "przerejestrowany", "przerobiony", "przerodzony", "przerośnięty", "przerwany", "przerysowany", "przerywany", "przerzedzany", "przerzucany", "przerzucony", "przesączony", "przesadzany", "przesądzany", "przesadzony", "przesądzony", "prześcigany", "prześcignięty", "przesiadany", "przesiadywany", "przesiany", "przesiedlany", "przesiedlony", "przesiedziany", "przesiewany", "przesilony", "przeskakiwany", "przeskalowany", "przeskanowany", "przeskoczony", "przeskrobany", "prześladowany", "przesłaniany", "przesłany", "prześledzony", "prześlizgnięty", "przesłodzony", "przesłonięty", "przesłuchany", "przesłuchiwany", "przesmarowany", "przesolony", "przesortowany", "przespany", "prześpiewany", "przessany", "przestawiany", "przestawiony", "przestemplowany", "przestraszony", "przestrojony", "przestrzegany", "przestrzelony", "przestudiowany", "przesunięty", "przesuwany", "prześwietlany", "prześwietlony", "przesyłany", "przesypany", "przesypiany", "przesypywany", "przeszarżowany", "przeszczepiany", "przeszczepiony", "przeszkadzany", "przeszkolony", "przeszmuglowany", "przeszukany", "przeszukiwany", "przeszyty", "przeszywany", "przetaczany", "przetańczony", "przetapetowany", "przetarty", "przetestowany", "przetkany", "przetoczony", "przetopiony", "przetrącony", "przetransformowany", "przetransmitowany", "przetransponowany", "przetransportowany", "przetrawiony", "przetrwany", "przetrząsany", "przetrząśnięty", "przetrzepany", "przetrzymany", "przetrzymywany", "przetwarzany", "przetworzony", "przewalany", "przewalczony", "przewaletowany", "przewalony", "przeważany", "przeważony", "przewertowany", "przewiązany", "przewiązywany", "przewidywany", "przewidziany", "przewiercany", "przewiercony", "przewieszany", "przewieszony", "przewietrzony", "przewieziony", "przewijany", "przewinięty", "przewitany", "przewodniczony", "przewodzony", "przewożony", "przewracany", "przewrócony", "przewyższany", "przeymierzany", "przeżarty", "przeżeglowany", "przeżegnany", "przeziębiony", "przezimowany", "przeznaczany", "przeznaczony", "przeżuty", "przezwyciężany", "przezwyciężony", "przeżyty", "przezywany", "przeżywany", "przodowany", "przpochlebiony", "przwdziewany", "przybastowany", "przybierany", "przybijany", "przybity", "przybliżany", "przybliżony", "przybrany", "przycelowany", "przycepiony", "przychylony", "przyciągany", "przyciągnięty", "przyciemniony", "przycięty", "przycinany", "przyciskany", "przyciśnięty", "przyciszony", "przyćmiewany", "przyćmiony", "przycumowany", "przyczepiany", "przyczesany", "przyczołgany", "przyczyniony", "przydepnięty", "przydeptany", "przyduszony", "przydzielany", "przydzielony", "przygarnięty", "przygaszony", "przygazowany", "przygładzany", "przygnębiany", "przygniatany", "przygnieciony", "przygotowany", "przygruchany", "przygrywany", "przygryzany", "przygryziony", "przygrzany", "przygwożdżony", "przyhamowany", "przyholowany", "przyjany", "przyjęty", "przyjmowany", "przyjrzany", "przykładany", "przyklejony", "przyklepany", "przykopany", "przykręcany", "przykręcony", "przykrócony", "przykryty", "przykrywany", "przykurzony", "przykuty", "przykuwany", "przyłączany", "przyłączony", "przylany", "przyłapany", "przylegany", "przylepiany", "przylepiony", "przyłożony", "przymierzony", "przymilany", "przymknięty", "przymocowany", "przymuszany", "przynależony", "przyniesiony", "przynoszony", "przynudzany", "przyostrzony", "przyozdabiany", "przyozdobiony", "przypadnięty", "przypakowany", "przypakowywany", "przypalany", "przypalony", "przyparty", "przypasowany", "przypatrywany", "przypatrzony", "przypieczętowany", "przypiekany", "przypierany", "przypięty", "przypilnowany", "przypiłowany", "przypinany", "przypisany", "przypisywany", "przypłacony", "przyplątany", "przypłynięty", "przypodobany", "przypominany", "przypomniany", "przyporządkowany", "przyprawiany", "przyprawiony", "przyprowadzony", "przypucowany", "przypudrowany", "przypuszczany", "przypuszczony", "przyrównany", "przyrządzany", "przyrządzony", "przysiadany", "przysiągnięty", "przyskrzydlony", "przyskrzyniany", "przyskrzyniony", "przysłaniany", "przysłany", "przysłodzony", "przysłoniony", "przysłuchiwany", "przysługiwany", "przysłużony", "przysmażany", "przysmażony", "przyspieszany", "przyspieszony", "przysporzony", "przysposobiony", "przyśrubowywany", "przyssany", "przystąpiony", "przystawiany", "przystawiony", "przystemplowany", "przystopowany", "przystosowany", "przystrojony", "przysunięty", "przysuwany", "przyswajany", "przyświecany", "przyświęcony", "przyswojony", "przysyłany", "przysypany", "przyszpilony", "przyszykowany", "przyszyty", "przyszywany", "przytaczany", "przytargany", "przytarty", "przytaszczany", "przytępiany", "przytępiony", "przytkany", "przytłaczany", "przytłoczony", "przytłumiony", "przytoczony", "przytrafiony", "przytroczony", "przytruwany", "przytrzasnięty", "przytrzymany", "przytrzymywany", "przytulany", "przytulony", "przytwierdzany", "przytwierdzony", "przytykany", "przyuczony", "przyuważony", "przywabiony", "przywalany", "przywalony", "przywarowany", "przywarty", "przywdziany", "przywiązany", "przywiązywany", "przywidziany", "przywieziony", "przywitany", "przywłaszczany", "przywłaszczony", "przywołany", "przywoływany", "przywożony", "przywracany", "przywrócony", "przyznaczony", "przyznany", "przyznawany", "przyzwalany", "przyzwany", "przyzwyczajany", "przyzwyczajony", "przyzywany", "psiamany", "pstrykany", "pstryknięty", "psuty", "publikowany", "puchnięty", "pucowany", "pudłowany", "pudrowany", "puknięty", "punktowany", "pustoszony", "puszczany", "puszczony", "puszkowany", "puszony", "pykany", "pytany", "rabowany", "rachowany", "racjonalizowany", "racjonowany", "raczony", "radowany", "raniony", "raportowany", "ratowany", "ratyfikowany", "reaktywowany", "realizowany", "reanimowany", "recytowany", "ręczony", "redagowany", "redukowany", "reformowany", "refowany", "regenerowany", "regionalizowany", "regulowany", "reinkarnowany", "rejestrowany", "reklamowany", "rekomendowany", "rekompensowany", "rekonstruowany", "rekreowany", "rekrutowany", "rekwirowany", "relacjonowany", "relaksowany", "remodulowany", "remontowany", "renegocjowany", "reorganizowany", "reperowany", "replikowany", "represejonowany", "reprezentowany", "reprodukowany", "resetowany", "resocjalizowany", "respektowany", "resuscytowany", "retuszowany", "rewanżowany", "rewidowany", "rezerwowany", "rezonowany", "rezygnowany", "reżyserowany", "robiony", "rodzony", "rojony", "rolowany", "romansowany", "roniony", "rozbawiany", "rozbawiony", "rozbierany", "rozbijany", "rozbity", "rozbłyśnięty", "rozbrajany", "rozbrojony", "rozbudowany", "rozbudowywany", "rozbudzany", "rozbudzony", "rozbujany", "rozcapierzony", "rozchmurzony", "rozchodzony", "rozchylany", "rozchylony", "rozciągany", "rozciągnięty", "rozcieńczany", "rozcieńczony", "rozcierany", "rozcięty", "rozcinany", "rozczarowany", "rozczarowywany", "rozczesany", "rozczłonkowany", "rozczulany", "rozczytany", "rozdany", "rozdawany", "rozdeptany", "rozdmuchany", "rozdmuchiwany", "rozdrabniany", "rozdrapany", "rozdrapywany", "rozdrażniany", "rozdrażniony", "rozduszony", "rozdwojony", "rozdysponowany", "rozdzielany", "rozdzielony", "rozdzierany", "rozdziewiczony", "rozebrany", "rozedrany", "rozegrany", "rozegrywany", "rozepchany", "rozerwany", "rozesłany", "rozgarnięty", "rozgaszczany", "rozgięty", "rozglaszany", "rozgłoszony", "rozgniatany", "rozgnieciony", "rozgniewany", "rozgoniony", "rozgraniczony", "rozgrany", "rozgromiony", "rozgrywany", "rozgryzany", "rozgryziony", "rozgrzany", "rozgrzebywany", "rozgrzeszony", "rozgrzewany", "rozhuśtany", "rozjaśniany", "rozjaśniony", "rozjechany", "rozjedzony", "rozjuszany", "rozjuszony", "rozkazany", "rozkazywany", "rozkładany", "rozklejany", "rozklejony", "rozkołysany", "rozkopany", "rozkopywany", "rozkoszowany", "rozkręcany", "rozkręcony", "rozkrojony", "rozkruszony", "rozkuty", "rozkuwany", "rozkwaszony", "rozkwaterowany", "rozkwitany", "rozkwitnięty", "rozłączony", "rozładowany", "rozładowywany", "rozłamany", "rozlany", "rozlewany", "rozliczany", "rozliczony", "rozlokowany", "rozłożony", "rozłupany", "rozluźniany", "rozmanażany", "rozmasowany", "rozmawiany", "rozmazany", "rozmazywany", "rozmiękczony", "rozmieniany", "rozmieniony", "rozmieszczany", "rozmieszczony", "rozminięty", "rozmnożony", "rozmontowany", "rozmówiony", "rozmrażany", "rozmrożony", "rozmyślany", "rozmyty", "różnicowany", "rozniecany", "roznieciony", "rozniesiony", "różniony", "roznoszony", "rozochocony", "rozpaczany", "rozpakowany", "rozpakowywany", "rozpalany", "rozpalony", "rozpamiętywany", "rozpaskudzany", "rozpatrywany", "rozpatrzony", "rozpędzany", "rozpędzony", "rozpętany", "rozpieszczany", "rozpieszczony", "rozpięty", "rozpiłowany", "rozpinany", "rozpisany", "rozpisywany", "rozplanowany", "rozpłaszczany", "rozpłaszczony", "rozplątany", "rozplątywany", "rozpłynięty", "rozpoczęty", "rozpoczynany", "rozpogodzony", "rozporządzany", "rozporządzony", "rozpościerany", "rozpostrzony", "rozpowiadany", "rozpowiedziany", "rozpowszechniany", "rozpowszechniony", "rozpoznany", "rozpoznawany", "rozpracowany", "rozpraszany", "rozprawiany", "rozprawiczony", "rozprawiony", "rozprostowany", "rozproszony", "rozprowadzany", "rozprowadzony", "rozpruty", "rozpruwany", "rozprzestrzeniany", "rozprzestrzeniony", "rozpuszczany", "rozpuszczony", "rozpychany", "rozpylany", "rozpylony", "rozpytany", "rozpytywany", "rozrastany", "rozreklamowany", "rozrobiony", "rozrośnięty", "rozróżniany", "rozróżniony", "rozruszany", "rozrysowany", "rozrywany", "rozrzucany", "rozsadzany", "rozsadzony", "rozsądzony", "rozścielony", "rozsiany", "rozsiekany", "rozsiewany", "rozsiodłany", "rozsławiany", "rozsławiony", "rozsmarowany", "rozsmarowywany", "rozśmieszany", "rozstany", "rozstąpiony", "rozstawany", "rozstawiany", "rozstawiony", "rozstrojony", "rozstrząsany", "rozstrzeliwany", "rozstrzelony", "rozstrzygany", "rozstrzygnięty", "rozsunięty", "rozsupłany", "rozświetlany", "rozświetlony", "rozsyłany", "rozsypany", "rozsypywany", "rozszarpany", "rozszarpywany", "rozszczepiany", "rozszczepiony", "rozszerzany", "rozszerzony", "rozszyfrowany", "roztaczany", "roztapiany", "roztarty", "roztoczony", "roztopiony", "roztrwoniony", "roztrząsany", "roztrzaskany", "rozumiany", "rozumowany", "rozwalany", "rozwalony", "rozwarty", "rozważany", "rozważony", "rozweselany", "rozweselony", "rozwiany", "rozwiązany", "rozwiązywany", "rozwidniany", "rozwiedziony", "rozwierany", "rozwiercony", "rozwieszany", "rozwieszony", "rozwiewany", "rozwieziony", "rozwikłany", "rozwinięty", "rozwlekany", "rozwodzony", "rozwścieczany", "rozwścieczony", "rozzłoszczony", "rugany", "ruinowany", "rujnowany", "runięty", "ruszany", "ruszony", "rwany", "ryczany", "ryglowany", "rymowany", "rysowany", "ryty", "ryzykowany", "rządzony", "rzeźbiony", "rżnięty", "rzucany", "rzucony", "rzygany", "sabotażowany", "sączony", "sadzany", "sadzony", "sądzony", "salutowany", "salwowany", "sankcjonowany", "satysfakcjonowany", "scalony", "scementowany", "scentrowany", "scharakteryzowany", "schładzany", "schlany", "schlapany", "schlebiony", "schłodzony", "schowany", "schroniony", "schrupany", "schrzaniony", "schwytany", "schylany", "ściągnięty", "ścielony", "ściemniany", "ściemniony", "ścierany", "ścierpiony", "ścięty", "ścigany", "ścinany", "ściskany", "ściśnięty", "ściszany", "ściszony", "sędziowany", "segregowany", "selekcjonowany", "separowany", "sępiony", "serwowany", "sfabrykowany", "sfajczony", "sfałszowany", "sfaulowany", "sfilmowany", "sfinalizowany", "sfinansowany", "sfingowany", "sformalizowany", "sformatowany", "sformowany", "sformułowany", "sforsowany", "sfotografowany", "shimmerowany", "siany", "siekany", "siorbany", "skadrowany", "skakany", "skalany", "skaleczony", "skalibrowany", "skalkulowany", "skalpowany", "skanalizowany", "skandowany", "skanowany", "skapitulowany", "skarcony", "skarżony", "skasowany", "skatalogowany", "skazany", "skażony", "skazywany", "skierowany", "składany", "składowany", "skłaniany", "sklasyfikowany", "skleciony", "sklejany", "sklejony", "sklepany", "skłócony", "skłoniony", "sklonowany", "sknocony", "skojarzony", "skolonizowany", "skołowany", "skombinowany", "skomentowany", "skompensowany", "skompletowany", "skomplikowany", "skomponowany", "skompresowany", "skompromitowany", "skomunikowany", "skonany", "skoncentrowany", "skończony", "skondensowany", "skonfigurowany", "skonfiskowany", "skonfrontowany", "skonkretyzowany", "skonsolidowany", "skonstruowany", "skonsultowany", "skonsumowany", "skontaktowany", "skontrolowany", "skoordynowany", "skopany", "skopiowany", "skorektowany", "skorumpowany", "skorygowany", "skorzystany", "skoszony", "skracany", "skradziony", "skręcany", "skręcony", "skremowany", "skreślany", "skreślony", "skrobany", "skrobnięty", "skrócony", "skrojony", "skropiony", "skruszony", "skrystalizowany", "skryty", "skrytykowany", "skrywany", "skrzecowany", "skrzepnięty", "skrzyczany", "skrzyty", "skrzywdzony", "skrzyżowany", "skserowany", "skubany", "skubnięty", "skulony", "skumulowany", "skupiany", "skupiony", "skupowany", "skurczony", "skuszony", "skuty", "skuwany", "skwitowany", "słany", "sławiony", "śledzony", "śliniony", "ślizgany", "słodzony", "słuchany", "słyszany", "smagany", "smarowany", "smażony", "śmiecony", "smuty", "smyrany", "snuty", "sondowany", "sortowany", "spafycikowany", "spakowany", "spalany", "spałaszowany", "spalony", "spałowany", "spamiętany", "spaprany", "sparafrazowany", "sparaliżowany", "sparowany", "spartaczony", "spartolony", "sparzony", "spasowany", "spatałaszony", "spauzowany", "spawany", "spawiony", "specjalizowany", "spędzany", "spędzony", "spekulowany", "spełniany", "spełniony", "spenetrowany", "spętany", "spierany", "spięty", "śpiewany", "spiłowany", "spinany", "spisany", "spiskowany", "spisywany", "spity", "spłacany", "spłacony", "splądrowany", "splajtowany", "splamiony", "spłaszczony", "splatany", "splątany", "spłatany", "spławiany", "spławiony", "spłodzony", "spłonięty", "spłoszony", "spłukany", "spłukiwany", "spluwany", "spływany", "spoczęty", "spoczywany", "spodziewany", "spojony", "spolaryzowany", "spoliczkowany", "sponiewierany", "sponsorowany", "spopielany", "spopielony", "spopularyzowany", "sportretowany", "sporządzany", "sporządzony", "spostrzegany", "spotęgowany", "spotkany", "spotykany", "spoufalany", "spowalniany", "spowiadany", "spowodowany", "spowolniony", "spoźniony", "spóźniony", "spożytkowany", "spożyty", "spożywany", "sprany", "sprasowany", "spraszany", "sprawdzony", "sprawiony", "sprawowany", "sprecyzowany", "spreparowany", "sprężany", "sprężony", "spróbowany", "sprofanowany", "sprofilowany", "sprostowany", "sproszkowany", "sproszony", "sprowadzany", "sprowadzony", "sprowokowany", "spryskany", "spryskiwany", "sprywatyzowany", "sprzątany", "sprzątnięty", "sprzeczany", "sprzedany", "sprzedawany", "sprzeniewierzony", "spudłowany", "spustoszony", "spuszczany", "spuszczony", "spychany", "ssany", "stabilizowany", "stacjonowany", "staczany", "staranowany", "starczany", "stargowany", "startowany", "stawiany", "stawiony", "stemplowany", "stenografowany", "stepowany", "sterowany", "sterroryzowany", "sterylizowany", "stłamszony", "stłumiony", "stnięty", "stoczony", "stołowany", "stonowany", "stopiony", "stopniowany", "storpedowany", "stosowany", "strącany", "stracony", "strącony", "strajkowany", "straszony", "stratowany", "strawiony", "streamowany", "stresowany", "streszczany", "streszczony", "strofowany", "strojony", "stroszony", "strugany", "struty", "strymowany", "strząsany", "strzaskany", "strząśnięty", "strzelony", "strzepany", "strzępiony", "strzepnięty", "strzepywany", "studiowany", "studzony", "stukany", "stuknięty", "stulony", "stwardniony", "stwarzany", "stwierdzany", "stwierdzony", "stworzony", "stykany", "stylizowany", "stymulowany", "sugerowany", "sumowany", "sunięty", "swatany", "swawolony", "świadczony", "świecony", "święcony", "świerzbiony", "świętowany", "świntuszony", "sycony", "sygnalizowany", "symulowany", "synchronizowany", "sypany", "sypnięty", "szachrowany", "szacowany", "szafowany", "szamotany", "szanowany", "szargany", "szarpany", "szarpnięty", "szarżowany", "szasowany", "szastany", "szatkowany", "szczędzony", "szczepiony", "szczerzony", "szczuty", "szczycony", "szczypany", "szczytowany", "szefowany", "szemrany", "szepnięty", "szeptany", "szerzony", "szkalowany", "szkicowany", "szklony", "szkodzony", "szkolony", "szlachtowany", "szlifowany", "szmuglowany", "szokowany", "szorowany", "szpachlowany", "szpanowany", "szperany", "szprycowany", "sztachnięty", "szturchany", "szturchnięty", "szturmowany", "szufladkowany", "szuflowany", "szukany", "szulerowany", "szwankowany", "szydełkowany", "szydzony", "szyfrowany", "szykanowany", "szykowany", "szyty", "taktowany", "tamowany", "tankowany", "tapetowany", "taplany", "taranowany", "targany", "targnięty", "targowany", "tarmoszony", "tarty", "tarzany", "tasowany", "taszczony", "tatuowany", "tchnięty", "telefonowany", "telegrfowany", "teleportowany", "temperowany", "teoretyzowany", "tępiony", "terroryzowany", "testowany", "tkany", "tknięty", "tłamszony", "tłoczony", "tłumaczony", "tłumiony", "toczony", "tolerowany", "tonowany", "topiony", "torowany", "torturowany", "towarzyszony", "trąbiony", "trącany", "tracony", "trącony", "trafiany", "trafiony", "tragizowany", "traktowany", "transferowany", "transformowany", "transmitowany", "transportowany", "tratowany", "trawiony", "trenowany", "tresowany", "triumfowany", "tropiony", "troszczony", "truty", "trwoniony", "trymowany", "tryskany", "tryśnięty", "tryumfowany", "trywializowany", "trzaskany", "trzasnięty", "trzepany", "trzepnięty", "trzepotany", "trzęsiony", "trzymany", "tuczony", "tułany", "tulony", "turlany", "tuszowany", "twistowany", "tworzony", "tykany", "tyranizowany", "tyrany", "tytułowany", "uaktualniany", "uaktualniony", "uaktywniany", "uaktywniony", "uargumentowany", "uatrakcyjniony", "ubabrany", "ubarwiany", "ubarwiony", "ubawiony", "ubezpieczany", "ubezpieczony", "ubezwłasnowolniony", "ubiczowany", "ubiegany", "ubierany", "ubijany", "ubity", "ubłagany", "ubliżany", "ubliżony", "ubolewany", "ubóstwiany", "ubrany", "ubroczony", "ubrudzony", "ucałowany", "ucharakteryzowany", "uchowany", "uchroniony", "uchwalany", "uchwalony", "uchwycony", "uchylany", "uchylony", "uciągnięty", "ucieleśniany", "ucierany", "ucierpiany", "ucięty", "ucinany", "uciskany", "uciśnięty", "uciszany", "uciszony", "uciułany", "ucywilizowany", "uczczony", "uczepiony", "uczesany", "uczęszczany", "uczony", "ucztowany", "uczuty", "uczyniony", "udany", "udaremniony", "udawany", "udekorowany", "udeptywany", "uderzany", "uderzony", "udobruchany", "udokumentowany", "udomawiany", "udomowiony", "udoskonalany", "udoskonalony", "udostępniany", "udostępniony", "udowadniany", "udowodniony", "Udramatyzowany", "udręczony", "udrożniony", "udupiony", "uduszony", "udzielany", "udzielony", "udźwignięty", "ueiwarygodniony", "ufany", "ufarbowany", "uformowany", "ufortyfikowany", "ufundowany", "ugadany", "uganiany", "ugaszany", "ugaszony", "ugięty", "uginany", "ugłaskany", "ugniatany", "ugodzony", "ugoszczony", "ugotowany", "ugrany", "ugruntowany", "ugryziony", "ugrzęznięty", "uhistoryzowany", "uhonorowany", "uiścity", "ujadany", "ujarzmiany", "ujarzmiony", "ujawniany", "ujawniony", "ujęty", "ujeżdżany", "ujeżdżony", "ujmowany", "ujrzany", "ukamieniowany", "ukarany", "ukartowany", "ukąszony", "ukatrupiony", "ukazany", "ukazywany", "ukierowany", "ukierunkowany", "układany", "uklepany", "ukłoniony", "ukłuty", "uknuty", "ukojony", "ukołysany", "ukończony", "ukonkretniony", "ukoronowany", "ukradziony", "ukręcany", "ukręcony", "ukrojony", "ukryty", "ukrywany", "ukrzyżowany", "ukształtowany", "ukuty", "ułagodzony", "ułaskawiany", "ułaskawiony", "ulatniany", "ułatwiany", "ułatwiony", "uleczany", "uleczony", "ulegany", "ulepiony", "ulepszany", "ulepszony", "ulokowany", "ulotniony", "ułożony", "umacniany", "umalowany", "umartwiany", "umawiany", "umazany", "umeblowany", "umiejscowiony", "umieszczany", "umieszczony", "umilany", "umilony", "umknięty", "umniejszany", "umniejszony", "umocniony", "umocowany", "umoczony", "umodelowany", "umorzony", "umotywowany", "umówiony", "umożliwiany", "umożliwiony", "umroczniony", "umyty", "unaoczniony", "unicestwiany", "unicestwiony", "uniemożliwainy", "uniemożliwiony", "unierochomiony", "uniesiony", "unieszczęśliwiany", "unieszczęśliwiony", "unieszkodliwiany", "unieszkodliwiony", "unieważniany", "unieważniony", "uniewinniony", "uniezależniony", "unikany", "uniknięty", "unormowany", "unoszony", "unowoczesniany", "unowocześniany", "uodporniony", "uogólniany", "upakowany", "upalany", "upalony", "upamiętniany", "upamiętniony", "upaństwowiony", "upaprany", "uparty", "upaskudzony", "upchany", "upchnięty", "upewniany", "upewniony", "upgradowany", "upichcony", "upiększany", "upiększony", "upierany", "upierdolony", "upięty", "upijany", "upilnowany", "upinany", "upity", "uplastyczniony", "upłynięty", "upodabniany", "upodobniony", "upojony", "upokorzany", "upokorzony", "upolowany", "upominany", "uporządkowany", "upowszechniony", "upozorowany", "upozowany", "uprany", "uprasowany", "upraszczany", "uprawdopodobniony", "uprawiany", "uproszczony", "uproszony", "uprowadzany", "uprowadzony", "uprzątany", "uprzątnięty", "uprzedony", "uprzedzany", "uprzyjemniany", "uprzyjemniony", "uprzykrzany", "uprzytomniony", "upubliczniany", "upubliczniony", "upudrowany", "upuszczany", "upuszczony", "upychany", "urabiany", "uraczany", "uradowany", "Urągany", "uratowany", "urażany", "urażony", "uregulowany", "urobiony", "uroniony", "urośnięty", "urozmaicany", "urozmaicony", "uruchamiany", "uruchomiony", "urwany", "urywany", "urządzany", "urządzony", "urzeczywistniany", "urzeczywistniony", "urżnięty", "usadowiony", "usadzony", "usamowolniony", "usankcjonowany", "usatyfakcjonowany", "uschnięty", "uściskany", "uścislony", "uściśnięty", "usidlony", "usiedzony", "uskładany", "uskoczony", "uskuteczniany", "uskuteczniony", "usłuchany", "usługiwany", "usłużony", "usłyszany", "usmażony", "uśmiany", "uśmiercany", "uśmiercony", "uśmierzony", "uspany", "uśpiony", "uspokajany", "uspokojony", "uspołeczniany", "usprawiedliwiany", "usprawiedliwiony", "usprawniony", "usprzątany", "ustabilizowany", "ustalany", "ustalony", "ustanawiany", "ustanowiony", "ustąpiony", "ustatkowany", "ustawiany", "ustawiony", "ustępowany", "ustosunkowany", "ustrojony", "ustrzegany", "ustrzelony", "usunięty", "ususzony", "usuwany", "uświadamiany", "uświadczony", "uświadomiony", "uświęcony", "uświniony", "usychany", "usypany", "usypiany", "usystematyzowany", "usytuowany", "uszanowany", "uszczelniany", "uszczęśliwiany", "uszczęśliwiony", "uszczuplony", "uszczypnięty", "uszkadzany", "uszkodzony", "uszlachetniany", "uszlachetniony", "usztywniony", "uszykowany", "uszyty", "utajniony", "utargowany", "utarty", "utemperowany", "utkany", "utknięty", "utkwiony", "utoczony", "utopiony", "utorowany", "utożsamiany", "utożsamiony", "utracony", "utrącony", "utrudniany", "utrudniony", "utrwalany", "utrwalony", "utrzymywany", "utuczony", "utulony", "utwierdzany", "utwierdzony", "utworzony", "utylizowany", "uwalniany", "uwalony", "uwarunkowany", "uważany", "uwiązany", "uwiązywany", "uwidoczniony", "uwieczniany", "uwieczniony", "uwielbiany", "uwielbiony", "uwieńczony", "uwierany", "uwierzony", "uwieszony", "uwieziony", "uwięziony", "uwijany", "uwikłany", "uwinięty", "uwity", "uwłaczany", "uwłaszczony", "uwodzony", "uwolniony", "uwsteczniany", "uwsteczniony", "uwydatniany", "uwypiklony", "uwzględniany", "uwzględniony", "użądlony", "uzależniany", "uzależniony", "uzasadniany", "uzasadniony", "uzbierany", "uzbrajany", "uzbrojony", "uzdrawiany", "uzdrowiony", "użerany", "uzewnętrzniany", "uzewnętrzniony", "uzgadniany", "uzgodniony", "uziemiony", "uzmysłowiony", "uznany", "uznawany", "uzupełniany", "uzupełniony", "uzurpowany", "użyczany", "użyczony", "uzyskany", "uzyskiwany", "użyty", "używany", "wabiony", "wąchany", "wachlowany", "wahany", "walczony", "wałkowany", "walnięty", "walony", "ważony", "wbijany", "wbity", "wcelowany", "wchłonięty", "wciągany", "wciągnięty", "wcielany", "wcielony", "wcierany", "wcięty", "wcinany", "wciskany", "wciśnięty", "wczepiony", "wczołgany", "wczuty", "wczytany", "wczytywany", "wdany", "wdarty", "wdawany", "wdepnięty", "wdeptany", "wdetonowany", "wdmuchiwany", "wdrapany", "wdrapywany", "wdrażany", "wdrążony", "wdrożony", "wduszony", "wdychany", "wdzierany", "wędkowany", "wentylowany", "wepchany", "wepchnięty", "werbowany", "weryfikowany", "wessany", "wetkany", "wetknięty", "wezwany", "wgłębiany", "wgniatany", "wgnieciony", "wgrany", "wgryzany", "wgryziony", "wiązany", "wibrowany", "widywany", "widziany", "wiedzony", "wielbiony", "wiercony", "wierzgany", "wierzony", "wieszany", "wietrzony", "więżony", "wikłany", "windowany", "winszowany", "wiosłowany", "wirowany", "witany", "wity", "wizualizowany", "wjeżdżany", "wkalkulowany", "wkładany", "wklejany", "wklejony", "wklepany", "wkłuty", "wkomponowany", "wkopany", "wkopywany", "wkraczany", "wkradany", "wkradziony", "wkręcany", "wkręcony", "wkupiony", "wkurwiany", "wkuty", "wkuwany", "włączany", "włączony", "władany", "władowany", "włamany", "włamywany", "wlany", "wlepiany", "wlepiony", "wlewany", "wliczany", "wliczony", "włożony", "wmanewrowany", "wmanipulowany", "wmawiany", "wmieszany", "wmówiony", "wmurowany", "wmuszony", "wnerwiany", "wnerwiony", "wniesiony", "wnikany", "wniknięty", "wnioskowany", "wnoszony", "wodowany", "wojowany", "wołany", "woskowany", "wożony", "wpajany", "wpakowany", "wparowany", "wpasowany", "wpatrywany", "wpędzany", "wpędzony", "wperswadowany", "wpieniony", "wpięty", "wpisany", "wpisywany", "wpłacany", "wpłacony", "wplatany", "wplątany", "wplątywany", "wpojony", "wpompowany", "wpraszany", "wprawiany", "wproszony", "wprowadzany", "wprowadzony", "wpuszczony", "wpychany", "wrabiany", "wręczany", "wrobiony", "wróżony", "wryty", "wrzucany", "wrzucony", "wrzynany", "wsadzany", "wsadzony", "wskazany", "wskazywany", "wskórany", "wskrzeszany", "wskrzeszony", "wślizgiwany", "wślizgnięty", "wsłuchany", "wsparty", "wspierany", "wspięty", "współczuty", "współodczuwany", "współtworzony", "współżyty", "wspomagany", "wspominany", "wspomniany", "wstąpiony", "wstawiany", "wstawiony", "wstrząsany", "wstrząśnięty", "wstrzelony", "wstrzykiwany", "wstrzyknięty", "wstrzymany", "wstrzymywany", "wstukany", "wsunięty", "wsuwany", "wsypany", "wszamany", "wszczepiany", "wszczepiony", "wszczęty", "wszczynany", "wszyty", "wtajemniczany", "wtajemniczony", "wtapiany", "wtargnięty", "wtarty", "wtaszczony", "wtłoczony", "wtopiony", "wtrącony", "wtryniany", "wtulany", "wtulony", "wtykany", "wwalony", "wwiercany", "wwiercony", "wwieziony", "wwożony", "wyartykułowany", "wyautowany", "wybaczany", "wybaczony", "wybadany", "wybatożony", "wybawiony", "wybebeszony", "wybełkotany", "wybiczowany", "wybielany", "wybielony", "wybierany", "wybijany", "wybity", "wybłagany", "wyblaknięty", "wybrandzlowany", "wybrany", "wybroniony", "wybrzydzany", "wybuchany", "wybuchnięty", "wybudowany", "wybudzany", "wybudzony", "wyburzany", "wyburzony", "wycackany", "wycałowany", "wyceniany", "wyceniony", "wychlany", "wychłostany", "wychodowany", "wychowany", "wychowywany", "wychrobotany", "wychwalany", "wychwycony", "wychylany", "wychylony", "wyciągany", "wyciągnięty", "wyciekany", "wycieniowany", "wycierany", "wycięty", "wycinany", "wyciskany", "wyciśnięty", "wyciszany", "wyciszony", "wycofany", "wyćwiczony", "wycyckany", "wycyganiony", "wyczarowany", "wyczarterowany", "wyczekany", "wyczekiwany", "wyczerpany", "wyczesany", "wyczołgany", "wyczołgiwany", "wyczuty", "wyczuwany", "wyczyniany", "wyczyszczony", "wyczytany", "wyczytywany", "wydalany", "wydalony", "wydany", "wydębiony", "wydedukowany", "wydelegowany", "wydepilowany", "wydeptywany", "wydłubany", "wydłubywany", "wydłużany", "wydłużony", "wydmuchany", "wydmuchiwany", "wydobyty", "wydobywany", "wydojony", "wydoroślany", "wydostany", "wydrany", "wydrapany", "wydrapywany", "wydrążony", "wydrukowany", "wydukany", "wyduszony", "wydychany", "wydziedziczony", "wydzielany", "wydzielony", "wydzierany", "wydzierżawiony", "wydziobany", "wydziwiany", "wydzwaniany", "wyedukowany", "wyedytowany", "wyeeliminowany", "wyegzekwowany", "wyeksmitowany", "wyekspediowany", "wyeksploatowany", "wyeksponowany", "wyeksportowany", "wyeliminowany", "wyemigrowany", "wyemitowany", "wyewoluowany", "wyfrunięty", "wygadany", "wygadywany", "wyganiany", "wygarbowany", "wygarniany", "wygarnięty", "wygasany", "wygaśnięty", "wygaszany", "wygaszony", "wygenerowany", "wygięty", "wyginany", "wygładzany", "wygładzony", "wygłaszany", "wygłodzony", "wygłosowany", "wygłoszony", "wygłówkowany", "wygnany", "wygolony", "wygoniony", "wygooglowany", "wygospodarowany", "wygotowany", "wygrany", "wygrawerowany", "wygrażany", "wygrywany", "wygryziony", "wygrzany", "wygrzebany", "wygrzebywany", "wygrzewany", "wygubiony", "wyhaczony", "wyhaftowany", "wyhamowany", "wyhodowany", "wyizolowany", "wyjadany", "wyjaśniany", "wyjaśniony", "wyjawiany", "wyjawiony", "wyjedzony", "wyjęty", "wyjmowany", "wykadrowany", "wykalibrowany", "wykalkulowany", "wykańczany", "wykantowany", "wykąpany", "wykaraskany", "wykarczowany", "wykarmiany", "wykasowany", "wykastrowany", "wykazany", "wykazywany", "wykierowany", "wykitowany", "wykiwany", "wykładany", "wyklarowany", "wyklepany", "wyklinany", "wykłócany", "wykluczany", "wykluczony", "wykluty", "wykłuty", "wykminiony", "wykolejony", "wykołowany", "wykombinowany", "wykonany", "wykończony", "wykonywany", "wykopany", "wykopnięty", "wykopywany", "wykorkowany", "wykorzeniany", "wykorzeniony", "wykorzystany", "wykorzystywany", "wykoszony", "wykpity", "wykradany", "wykradnięty", "wykręcany", "wykręcony", "wykreowany", "wykreślany", "wykreślony", "wykrochmalony", "wykrojony", "wykrwawiany", "wykrwawiony", "wykryty", "wykrywany", "wykrzesany", "wykrztuszony", "wykrzyczony", "wykrzykiwany", "wykrzyknięty", "wykrzywiany", "wykształcony", "wyksztuszony", "wykupiony", "wykupywany", "wykuty", "wykuwany", "wyłączany", "wyłączony", "wylądowany", "wyładowany", "wyładowywany", "wyłajany", "wyłamany", "wyłamywany", "wyłaniany", "wylansowany", "wylany", "wyłapany", "wyłapywany", "wyławiany", "wyleasingowany", "wyleczony", "wylęgany", "wylegimytowany", "wylewany", "wyłgany", "wylicytowany", "wyliczany", "wyliczony", "wylizany", "wylizywany", "wylogowany", "wyłoniony", "wylosowany", "wyłowiony", "wyłożony", "wyłudzany", "wyłudzony", "wyłupany", "wyłuskany", "wyłuskiwany", "wyłuszczony", "wyluzowany", "wymacany", "wymachiwany", "wymagany", "wymahiwany", "wymalowany", "wymamrotany", "wymanewrowany", "wymarzony", "wymasowany", "wymawiany", "wymazany", "wymazywany", "wymeldowany", "wymeldowywany", "wymiatany", "wymieciony", "wymieniany", "wymieniony", "wymierzany", "wymieszany", "wymigany", "wymigiwany", "wymijany", "wyminięty", "wymknięty", "wymoczony", "wymodelowany", "wymontowany", "wymordowany", "wymsknięty", "wymuszany", "wymyślany", "wymyślony", "wymyty", "wynagradzany", "wynagrodzony", "wynajdowany", "wynajdywany", "wynajęty", "wynajmowany", "wynaleziony", "wynarodowiony", "wynegocjowany", "wyniesiony", "wyniknięty", "wyniszczany", "wyniszczony", "wyniuchany", "wynoszony", "wynurzany", "wyobrażany", "wyobrażony", "wyodrębniony", "wyolbrzymiany", "wyolbrzymiony", "wyorbowany", "wyosiowany", "wyostrzany", "wyostrzony", "wypaczany", "wypakowany", "wypakowywany", "wypalany", "wypalony", "wypałowany", "wyparowany", "wyparty", "wypasany", "wypastowany", "wypatroszony", "wypatrywany", "wypatrzony", "wypchany", "wypchnięty", "wypędzany", "wypędzlowany", "wypełniany", "wypełniony", "wypersfadowany", "wyperswadowany", "wypierany", "wypięty", "wypijany", "wypinany", "wypisany", "wypisywany", "wypity", "wypłacany", "wypłacony", "wypłakany", "wypłakiwany", "wypłaszczony", "wyplatany", "wyplątany", "wypleniony", "wyplewiony", "wypłoszony", "wypłukany", "wypłukiwany", "wypluty", "wypluwany", "wypocony", "wypoczęty", "wypolerowany", "wypominany", "wypomniany", "wypompowany", "wypompowywany", "wyposażony", "wypowiadany", "wypowiedziany", "wypoziomowany", "wypożyczany", "wypracowany", "wypracowywany", "wyprany", "wyprasowany", "wypraszany", "wyprawiany", "wyprawiony", "wypróbowany", "wyprodukowany", "wyprojektowany", "wypromieniowany", "wypromowany", "wyprostowany", "wyprostowywany", "wyproszony", "wyprowadzany", "wyprowadzony", "wypróżniany", "wypróżniony", "wypruty", "wypruwany", "wyprzedany", "wyprzedawany", "wyprzedzany", "wyprzedzony", "wyprzęgany", "wypstrykany", "wypucowany", "wypuszczany", "wypuszczony", "wypychany", "wypytany", "wypytywany", "wyrąbany", "wyrabiany", "wyrąbywany", "wyratowany", "wyrażany", "wyrażony", "wyrecytowany", "wyręczany", "wyręczony", "wyregulowany", "wyrejestrowany", "wyremontowany", "wyreżyserowany", "wyrobiony", "wyrolowany", "wyrośnięty", "wyrównany", "wyrównywany", "wyróżniany", "wyróżniony", "wyrugowany", "wyruszany", "wyrwany", "wyrypany", "wyrysowany", "wyryty", "wyrywany", "wyrządzony", "wyrzeźbiony", "wyrżnięty", "wyrzucany", "wyrzucony", "wyrzygany", "wyrzynany", "wyrzywany", "wysączony", "wysadzany", "wysadzony", "wyschnięty", "wyściskany", "wyselekcjonowany", "wysępiony", "wysiadywany", "wysiedzony", "wysilany", "wysilony", "wyskakiwany", "wyskalowany", "wyskoczony", "wyskrobany", "wyskubywany", "wysłany", "wyśledzony", "wyślizgiwany", "wyślizgnięty", "wysłowiony", "wysłuchany", "wysłuchiwany", "wysmagany", "wysmarkany", "wysmarowany", "wysmażany", "wysmażony", "wyśmiany", "wyśmiewany", "wysmołowany", "wysmyrany", "wyśniony", "wysnuty", "wysnuwany", "wysondowany", "wyspecjalizowany", "wyśpiewany", "wyśpiewywany", "wyspowiadany", "wysprzątany", "wysprzedany", "wyssany", "wystartowany", "wystawiony", "wysterelizowany", "wysterylizowany", "wystosowany", "wystosowywany", "wystraszony", "wystrojony", "wystrugany", "wystrychnięty", "wystrzegany", "wystrzelany", "wystrzeliwany", "wystrzelony", "wystudzony", "wystukany", "wystukiwany", "wystygnięty", "wysunięty", "wysuszany", "wysuwany", "wyswatany", "wyświadczany", "wyświadczony", "wyświetlany", "wyświetlony", "wyswobodzony", "wysyłany", "wysypany", "wysypywany", "wysysany", "wyszabrowany", "wyszalany", "wyszarpany", "wyszarpnięty", "wyszasowany", "wyszczotkowany", "wyszczuplony", "wyszeptany", "wyszkolony", "wyszlifowany", "wyszorowany", "wyszperany", "wyszukany", "wyszukiwany", "wyszumiony", "wyszykowany", "wyszyty", "wytapetowany", "wytargany", "wytargowany", "wytarty", "wytarzany", "wytaszczony", "wytatuowany", "wytchnięty", "wytępiony", "wytknięty", "wytłoczony", "wytłumaczony", "wytłumiony", "wytoczony", "wytrąbiony", "wytrącany", "wytrącony", "wytransmitowany", "wytransportowany", "wytrenowany", "wytresowany", "wytriangulowany", "wytropiony", "wytruty", "wytrząsany", "wytrzasnięty", "wytrząśnięty", "wytrzebiony", "wytrzepany", "wytrzeszczany", "wytrzeźwiany", "wytrzymany", "wytrzymywany", "wytwarzany", "wytworzony", "wytyczony", "wytykany", "wytypowany", "wyuczony", "wywabiany", "wywabiony", "wywąchany", "wywalany", "wywalczony", "wywalony", "wywarty", "wywarzany", "wyważany", "wyważony", "wywęszany", "wywężykowany", "wywiany", "wywiązany", "wywiązywany", "wywierany", "wywiercony", "wywieszany", "wywieszony", "wywietrzony", "wywieziony", "wywijany", "wywindowany", "wywinięty", "wywłaszczony", "wywlekany", "wywnętrzniony", "wywnioskowany", "wywodzony", "wywolany", "wywoływany", "wywoskowany", "wywożony", "wywracany", "wywrócony", "wywróżony", "wywyższany", "wyżalony", "wyzbyty", "wyzdrowiony", "wyżebrany", "wyżerany", "wyzerowany", "wyzionięty", "wyznaczany", "wyznaczony", "wyznany", "wyznawany", "wyzwalany", "wyzwany", "wyzwolony", "wyzygzakowany", "wyżynany", "wyzyskany", "wyzyskiwany", "wyżyty", "wyzywany", "wyżywany", "wyżywiony", "wzbijany", "wzbity", "wzbogacany", "wzbogacony", "wzbraniany", "wzbudzany", "wzbudzony", "wzburzany", "wzburzony", "wżeniony", "wzięty", "wzmacniony", "wzmagany", "wzmocniony", "wznawiany", "wzniecany", "wznieciony", "wzniesięty", "wznoszony", "wznowiony", "wzorowany", "wzrośnięty", "wzruszony", "wzwyżany", "wzywany", "zaabordowany", "zaadaptowany", "zaadoptowany", "zaadresowany", "zaakcentowany", "zaakceptowany", "zaaklimatyzowany", "zaalarmowany", "zaanektowany", "zaangażowany", "zaanonsowany", "zaapelowany", "zaaplikowany", "zaaportowany", "zaaprobowany", "zaaranżowany", "zaaresztowany", "zaatakowany", "zabaczony", "zabalowany", "zabandażowany", "zabarwiony", "zabarykadowany", "zabawiany", "zabawiony", "zabepieczany", "zabetonowany", "zabezpieczony", "zabierany", "zabity", "zabłądzony", "zablefowany", "zabłocony", "zablokowany", "zabraniany", "zabrany", "zabrnięty", "zabroniony", "zabrudzony", "zabudowany", "zabukowany", "zabulony", "zaburzony", "zabutelkowany", "zacementowany", "zacerowany", "zachciany", "zachęcany", "zachęcony", "zachlapany", "zachodzony", "zachomikowany", "zachorowany", "zachowany", "zachowywany", "zachwalany", "zachwalony", "zachwiany", "zachwycony", "zaciągany", "zaciągnięty", "zaciążony", "zaciekawiony", "zaciemniany", "zaciemniony", "zacierany", "zacieśniony", "zacięty", "zacinany", "zaciskany", "zaciśnięty", "zaćmiony", "zacumowany", "zacytowany", "zaczadzony", "zaczarowany", "Zaczepiany", "zaczepiony", "zaczerpany", "zaczesany", "zaczęty", "zaczołgany", "zaczynany", "zadarty", "zadawalany", "zadawany", "zadbany", "zadebiutowany", "zadedykowany", "zadeklamowany", "zadeklarowany", "zademonstrowany", "zadenucjowany", "zadepeszowany", "zadeptany", "zadeptywany", "zadęty", "zadławiony", "żądlony", "zadłużany", "zadłużony", "zadokowany", "zadomowiony", "zadowalany", "zadrapany", "zadraśnięty", "zadręczany", "zadręczony", "zadrutowany", "zadurzany", "zadurzony", "zaduszony", "zadymiony", "zadźgany", "zadziobany", "zadziwiany", "zadziwiony", "zafakturowany", "zafałszowany", "zafarbowany", "zafiksowany", "zafundowany", "zagadany", "zagadnięty", "zagadywany", "zagajony", "zaganiany", "zagapiony", "zagarażowany", "zagarniany", "zagarnięty", "zagaszony", "zagazowany", "zagęszczony", "zagięty", "zaginany", "zaginięty", "zagłębiany", "zagłębiony", "zagłodzony", "zagłuszany", "zagłuszony", "zagmatwany", "zagnany", "zagnieżdżony", "zagojony", "zagoniony", "zagospodarowany", "zagotowany", "zagrabiony", "zagradzany", "zagrażany", "zagrodzony", "zagrywany", "zagryzany", "zagryziony", "zagrzany", "zagrzebany", "zagrzewany", "zagubiony", "zagwarantowany", "zahaczony", "zahamowany", "zahandlowany", "zaharowany", "zahartowany", "zahipnotyzowany", "zaholowany", "zaimitowany", "zaimplantowany", "zaimplementowany", "zaimprowizowany", "zainaugurowany", "zainfekowany", "zainicjowany", "zainkasowany", "zainscenizowany", "zainspirowany", "zainstalowany", "zainteresowany", "zaintrygowany", "zaintubowany", "zainwestowany", "zaizolowany", "zajadany", "zajany", "zajarany", "zajechany", "zajęty", "zajmowany", "zakablowany", "zakamuflowany", "zakasany", "zakasowany", "zakąszany", "zakatalogowany", "zakatowany", "zakatrupiony", "zakazany", "zakażany", "zakazywany", "zakiszony", "zakładany", "zaklasyfikowany", "zaklejany", "zaklejony", "zaklepany", "zaklepywany", "zaklinany", "zaklinowany", "zakłócany", "zakłócony", "zaklopotany", "zakłuty", "zakneblowany", "zakodowany", "zakolczykowany", "zakolorowany", "zakołysany", "zakomunikowany", "zakończony", "zakonserwowany", "zakopany", "zakopywany", "zakorzeniany", "zakorzeniony", "zakoszony", "zakosztowany", "zakotwiczany", "zakotwiczony", "zakpiony", "zakradany", "zakręcany", "zakręcony", "zakreślany", "zakreślony", "zakrwawiony", "zakryty", "zakrywany", "zakrzyczany", "zakrzyknięty", "zakrzywiany", "zakrzywiony", "zaksięgowany", "zaktualizowany", "zaktywizowany", "zaktywowany", "zakumany", "zakupiony", "zakurzony", "zakuty", "zakuwany", "zakwaterowany", "zakwestionować", "zakwitnięty", "załączony", "załadowany", "załagodzony", "zalamany", "zalaminowany", "załamywany", "zalany", "załapany", "załatany", "załatwiany", "załatwiony", "zalatywany", "zalecany", "zalecony", "zaleczony", "zalegalizowany", "zalegany", "zalepiany", "zalepiony", "zalewany", "zaliczany", "zaliczony", "załkany", "zalogowany", "żałowany", "założony", "zaludniony", "zamacany", "zamachnięty", "zamącony", "zamalowany", "zamanewrowany", "zamanifestowany", "zamarkowany", "zamartwiany", "zamarynowany", "zamarzany", "zamarznięty", "zamaskowany", "zamawiany", "zamazany", "zamazywany", "zamęczany", "zamęczony", "zameldowany", "zamelinowany", "zamerykanizowany", "zamiatany", "zamieniany", "zamieniony", "zamieszany", "zamieszczany", "zamieszczony", "zamieszkany", "zamieszkiwany", "zaminowany", "zamknięty", "zamocowany", "zamoczony", "zamontowany", "zamordowany", "zamortyzowany", "zamotany", "zamówiony", "zamrażany", "zamroczony", "zamrożony", "zamulany", "zamurowany", "zamydlony", "zamykany", "zanalizowany", "zanegowany", "zaniechany", "zanieczyszczany", "zanieczyszczony", "zaniedbany", "zaniedbywany", "zaniepokojony", "zaniesiony", "zanihilowany", "zanikany", "zaniknięty", "zaniżany", "zaniżony", "zanoszony", "zanotowany", "zanucony", "zanudzany", "zanudzony", "zanurzany", "zanurzony", "zanużony", "zaobaczony", "zaobserwowany", "zaoferowany", "zaofiarowany", "zaogniany", "zaogniony", "zaokrąglany", "zaokrąglony", "zaokrętowany", "zaopatrywany", "zaopatrzony", "zaopiekowany", "zaorany", "zaostrzany", "zaostrzony", "zaoszczędzony", "zapadany", "zapakowany", "zapalany", "zapalony", "zapamiętany", "zapamiętywany", "zapanowany", "zaparkowany", "zaparowywany", "zaparzany", "zaparzony", "zapaskudzony", "zapauzowany", "zapchany", "zapędzany", "zapełniany", "zapełniony", "zaperfumowany", "zapeszany", "zapewniany", "zapewniony", "zapieczętowany", "zapierany", "zapięty", "zapijany", "zapinany", "zapisany", "zapisuwany", "zapity", "zapłacony", "zapładniany", "zaplamiony", "zaplanowany", "zaplątany", "zapłodniony", "zaplombowany", "zapobiegany", "zapodany", "zapodawany", "zapodziany", "zapokojony", "zapolowany", "zapominany", "zapomniany", "zapowiadany", "zapowiedziany", "zapoznany", "zapoznawany", "zapożyczony", "zapracowywany", "zaprany", "zaprasowywany", "zapraszany", "zaprawiony", "zaprenumerowany", "zaprezentowany", "Zaprogramowany", "zaprojektowany", "zaproponowany", "zaproszony", "zaprotokołowany", "zaprowadzany", "zaprowadzony", "zaprzątany", "zaprzeczany", "zaprzeczony", "zaprzedany", "zaprzedawany", "zaprzęgany", "zaprzepaszczany", "zaprzestany", "zaprzestawany", "zaprzyjaźniony", "zapudłowany", "zapunktowany", "zapuszczany", "zapuszczony", "zapuszkowany", "zapychany", "zapylany", "zapylony", "zapytany", "zarabiany", "zaranżowany", "zarażany", "zarażony", "zarecytowany", "zaręczany", "zaręczony", "zarejestrowany", "zareklamowany", "zarekomendowany", "zarekomondowany", "zarekwirowany", "zarezerwowany", "zarobiony", "żartowany", "zarwany", "zaryglowany", "zarymowany", "zarysowany", "zarywany", "zaryzykowany", "zarządzany", "zarżnięty", "zarzucany", "zarzynany", "zasadzony", "zaścielony", "zasegurowany", "zaserwowany", "zasiadany", "zasiany", "zasiedlony", "zasięgany", "zasięgnięty", "zasiewany", "zasilany", "zasilony", "zaskakiwany", "zaskarbiony", "zaskoczony", "zaskrobany", "zasłaniany", "zaślepiany", "zaślepiony", "zasłodzony", "zasłoniony", "zasłużony", "zasmakowany", "zaśmiecany", "zaśmiecony", "zasmradzany", "zasmrodzony", "zasmucany", "zasmucony", "zasolony", "zaspakajany", "zaśpiewany", "zaspokajany", "zaspokojony", "zasponsorowany", "zaśrubowywany", "zassany", "zastany", "zastąpiony", "zastawiany", "zastawiony", "zastępowany", "zastopowany", "zastosowany", "zastraszany", "zastraszony", "zastrzelony", "zasugerowany", "zasunięty", "zasuwany", "zaświadczony", "zaświecony", "zaświoniony", "zasyfiony", "zasygnalizowany", "zasymilowany", "zasymulowany", "zasypany", "zasypywany", "zasysany", "zaszachowany", "zaszantażowany", "zaszargany", "zaszczepiany", "zaszczepiony", "zaszczuty", "zaszczycany", "zaszczycony", "zaszeptany", "zaszeregowany", "zaszlachtowany", "zasznurowany", "zaszpachlowany", "zasztyletowany", "zaszufladkowany", "zaszyfrowany", "zaszyty", "zaszywany", "zataczany", "zatajany", "zatajony", "zatamowany", "zatankowany", "zatapiany", "zatargany", "zatarty", "zatelegrafowany", "zatemperowany", "zatęskniony", "zatkany", "zatknięty", "zatoczony", "zatonięty", "zatopiony", "zatracany", "zatracony", "zatriumfowany", "zatrudniany", "zatrudniony", "zatruty", "zatruwany", "zatrzaskiwany", "zatrzaśnięty", "zatrząśnięty", "zatrzymany", "zatrzymywany", "zatuszowany", "zatwierdzany", "zatwierdzony", "zatykany", "zatynkowany", "zatytułowany", "zauploadowany", "zauroczony", "zautomatyzowany", "zauważany", "zauważony", "zawadzany", "zawalany", "zawalczony", "zawalony", "zawarty", "zaważony", "zawdzięczany", "zawetowany", "zawężony", "zawiadamiany", "zawiadomiony", "zawiązany", "zawiązywany", "zawiedzony", "zawierany", "zawierzony", "zawieszany", "zawieszony", "zawieziony", "zawijany", "zawinięty", "zawiniony", "zawiśnięty", "zawitany", "zawładnięty", "zawłaszczony", "zawodzony", "zawojowany", "zawołany", "zawoskowany", "zawożony", "zawracany", "zawrócony", "zawstydzany", "zażądany", "zażartowany", "zazdroszczony", "zażegnany", "zażenowany", "zaznaczany", "zaznajomiony", "zaznany", "zaznawany", "zażyczony", "zażyty", "zażywany", "zbaczany", "zbadany", "zbagatelizowany", "zbajerowany", "zbałamucony", "zbalansowany", "zbalsamowany", "zbankrutowany", "zbawiany", "zbawiony", "zbesztany", "zbezczeszczony", "zbierany", "zbijany", "zbity", "zbliżony", "zbluzgany", "zbojkotowany", "zbrojony", "zbrukany", "zbszczecony", "zbudowany", "zbudzony", "zbuntowany", "zburzony", "zbyty", "zbywany", "zchwytany", "zcięty", "zciszony", "zdany", "zdarty", "zdeaktywowany", "zdecydowany", "zdefiniowany", "zdeflorowany", "zdegradowany", "zdejmowany", "zdeklarowany", "zdekodowany", "zdekompresowany", "zdekoncentrowany", "zdekonstruowany", "zdelegalizowany", "zdemaskowany", "zdementowany", "zdemolowany", "zdemontowany", "zdemoralizowany", "zdenerwowany", "zdeponowany", "zdeprymowany", "zdeptany", "zderzany", "zderzony", "zdestabilizowany", "Zdetonowany", "zdetronizowany", "zdewastowany", "zdewaulowany", "zdezerterowany", "zdezintegrowany", "zdezorientowany", "zdezynfektowany", "zdiagnozowany", "zdjęty", "zdławiony", "zdmuchiwany", "zdmuchnięty", "zdobyty", "zdobywany", "zdołowany", "zdominowany", "zdopingowany", "zdrabniany", "zdradzany", "zdradzony", "zdrapany", "zdrapywany", "zdrutowany", "zdruzgotany", "zduplikowany", "zduszony", "zdwojony", "zdyscyplinowany", "zdyskredytowany", "zdyskwalifikowany", "zdystansowany", "zdzielony", "zdzierany", "zdzierżony", "zdziesiątkowany", "Zdzwoniony", "zebrany", "zechciany", "zedytowany", "żegnany", "żeniony", "zepchnięty", "zepsuty", "żerowany", "zerwany", "zerżnięty", "zeskakiwany", "zeskanowany", "zeskrobywany", "zesłany", "ześlizgiwany", "ześlizgnięty", "zesmolony", "zespawiany", "zespolony", "zessany", "zestawiany", "zestawiony", "zestresowany", "zestrzeliwany", "zestrzelony", "zeswatany", "zeszklony", "zeszlifowany", "zetknięty", "zezłoszczony", "zeznany", "zeznawany", "zezwalany", "zezwolony", "zfinansowany", "zgadany", "zgadywany", "zgajany", "zganiony", "zgarnięty", "zgaśnięty", "zgaszony", "zgięty", "zginany", "zgładzony", "zgłaszany", "zgłębiany", "zgłębiony", "zgłośniony", "zgłoszony", "zgłuszony", "zgniatany", "zgnieciony", "zgnity", "zgnojony", "zgodzony", "zgolony", "zgoniony", "zgotowany", "zgrabiony", "zgrillowany", "zgromadzany", "zgromadzony", "zgrupowany", "zgrzeszony", "zgrzytany", "zgubiony", "zgwałcony", "zhackowany", "zhakowany", "zhańbiony", "zhandlowany", "zharmonizowany", "zidentyfikowany", "ziewany", "zignorowany", "zilustrowany", "zinfiltrowany", "zintegrowany", "zintensyfikowany", "zinterpretowany", "zinwentaryzowany", "zirytowany", "zjadany", "zjawiany", "zjednany", "zjednoczony", "zjedzony", "zjeżdżony", "zkontaktowany", "zkserowany", "złączony", "złagodzony", "złajany", "złamany", "zlany", "złapany", "zlecany", "zlecony", "zlekceważony", "zlepiany", "zlepiony", "zlewany", "zlicytowany", "zliczany", "zliczony", "zlikwidowany", "zlinczowany", "zlitowany", "zlizany", "zlizywany", "złoity", "zlokalizowany", "złomowany", "żłopany", "złowiony", "złożony", "złupiony", "złuszczany", "zluzowany", "zmacany", "zmącony", "zmagany", "zmagazynowany", "zmajstrowany", "zmaksylizowany", "zmanipulowany", "zmarnowany", "zmartwychwstany", "zmarznięty", "zmasakrowany", "zmaterializowany", "zmawiany", "zmazany", "zmazywany", "zmbobardowany", "zmiatany", "zmiażdżony", "zmiękczony", "zmielony", "zmieniany", "zmieniony", "zmierzany", "zmierzony", "zmierzwiony", "zmieszany", "zmieszczony", "zmiksowany", "zminiaturyzowany", "zminimalizowany", "zmniejszany", "zmniejszony", "zmobilizowany", "zmoczony", "zmodernizowany", "zmodyfikowany", "zmoknięty", "zmonopolizowany", "zmontowany", "zmostkowany", "zmotywowany", "zmówiony", "zmrożony", "zmrużony", "zmumifikowany", "zmuszany", "zmuszony", "zmutowany", "zmyślany", "zmyty", "zmywany", "znacjonalizowany", "znajdowany", "znajdywany", "znakowany", "znaleziony", "znany", "znęcany", "zneutralizowany", "zniechęcony", "znieczulony", "zniekształcany", "zniekształcony", "znienawidzony", "znieprawiony", "zniesiony", "zniesławiany", "zniesławiony", "zniewalany", "znieważany", "znieważony", "zniewolony", "zniszczony", "zniweczony", "zniwelowany", "zniżany", "zniżony", "znokautowany", "znormalniony", "znoszony", "znudzony", "zobaczony", "zobowiązany", "zobrazowany", "zogniskowany", "żonglowany", "zoomowany", "zoperowany", "zoptymalizowany", "zorbity", "zorganizowany", "zorientowany", "zostawiany", "zostawiony", "zpłacony", "zprowokowany", "zrabowany", "zrachowany", "zracjonalizowany", "zraniony", "zraportowany", "zrażany", "zrażony", "zrealizowany", "zrecenzowany", "zredagowany", "zredukowany", "zreferowany", "zreformowany", "zrefowany", "zrefundowany", "zregenerowany", "zrehabilitowany", "zreinkarnowany", "zreintegrowany", "zrekonfigurowany", "zrekonstruowany", "zrekrutowany", "zrekrystalizowany", "zrelacjonowany", "zrelaksowany", "zremiksowany", "zremisowany", "zreorganizowany", "zreperowany", "zreplikowany", "zresetowany", "zresocjalizowany", "zrestartowany", "zrestrukturyzowany", "zrewanżowany", "zrewidowany", "zrewolucjonizowany", "zrezygnowany", "zrobiony", "zrolowany", "zroszony", "zrównany", "zrównoważony", "zrównywany", "zróżnicowany", "zrozumiany", "zrugany", "zruinowany", "zrujnowany", "zrymowany", "zrywany", "zrzędzony", "zrzeszony", "zrzucany", "zrzucony", "zsumowany", "zsunięty", "zsuwany", "zsynchronizowany", "zsyntetyzowany", "zsypywany", "zszargany", "zszokowany", "zszyty", "zszywany", "ztarty", "żuty", "zutylizowany", "zużyty", "zużywany", "zwabiany", "zwabiony", "zwalany", "zwalczony", "zwalniany", "zwalony", "zwany", "zwaporyzowany", "zwątpiony", "zważany", "zważony", "zwędzony", "zwerbalizowany", "zwerbowany", "zweryfikowany", "zwęszony", "zwężony", "zwiastowany", "związany", "związywany", "zwichnięty", "zwiedzany", "zwiedzony", "zwiększony", "zwieńczony", "zwierzany", "zwieszany", "zwieszony", "zwietrzony", "zwijany", "zwilżony", "zwinięty", "zwizualizowany", "zwlekany", "zwodowany", "zwodzony", "zwołany", "zwolniony", "zwoływany", "zwożony", "zwracany", "zwrócony", "zwyciężany", "zwymiotowany", "życzony", "żygany", "zygzakowany", "zyskany", "zyskiwany", "żyty", "zżarty", "zżerany", "zżynany", "zżyty", "abdykowana", "absorbowana", "adaptowana", "administrowana", "adoptowana", "adorowana", "adresowana", "afiszowana", "agitowana", "akcentowana", "akceptowana", "aklimatyzowana", "akompaniowana", "aktualizowana", "aktywowana", "akumulowana", "alaromowana", "alienowana", "amerykanizowana", "amortyzowana", "amputowana", "analizowana", "angażowana", "anihilowana", "animowana", "anonsowana", "antropomorfizowana", "antydatowana", "anulowana", "apelowana", "aportowana", "aranżowana", "archiwizowana", "aresztowana", "argumentowana", "artykułowana", "ascendowana", "asekurowana", "asymilowana", "asystowana", "atakowana", "autoryzowana", "awanturowana", "babrana", "baczona", "badana", "bagatelizowana", "bajerowana", "bałamucona", "balangowana", "balansowana", "banalizowana", "bandażowana", "bankrutowana", "baraszkowana", "barwiona", "bawiona", "bazgrana", "bazowana", "bębniona", "bełkotana", "besztana", "biadolona", "biczowana", "bita", "błagana", "błaznowana", "blefowana", "błogosławiona", "blokowana", "bluzgana", "błyskana", "błyszcząca", "boczona", "bogacona", "bojkotowana", "boksowana", "bombardowana", "bopowana", "borowana", "brandzlowana", "brana", "brasowana", "bratana", "bredzona", "brnięta", "brodzona", "broniona", "brudzona", "brylowana", "budowana", "budzona", "bujana", "bulona", "bulwersowana", "bumelowana", "burzona", "butelkowana", "bywana", "cackana", "całowana", "capnięta", "cechowana", "celebrowana", "celowana", "ceniona", "cenzurowana", "chciana", "chlana", "chlapana", "chlapnięta", "chlastana", "chłodzona", "chlostana", "chlubiona", "chodowana", "chomikowana", "chorowana", "chowana", "chroniona", "chrupana", "chrzczona", "chuta", "chwalona", "chwycona", "chwytana", "chybotana", "chylona", "ciachnięta", "ciągana", "ciągnięta", "ciemiężona", "cierpiana", "cieszona", "cięta", "ciskana", "ciśnięta", "ciułana", "cmokana", "cmoknięta", "cofana", "cofnięta", "ćpana", "cucona", "cudzołożona", "cumowana", "ćwiartowana", "ćwiczona", "cykana", "cytowana", "czajona", "czarowana", "czczona", "czepiana", "czepiona", "czerpana", "czesana", "częstowana", "czochrana", "czołgana", "czuta", "czytana", "czyta", "darowana", "darta", "darzona", "datowana", "dawana", "dbana", "deaktywowana", "debatowana", "dedukowana", "dedykowana", "defibrylowana", "defilowana", "definiowana", "defraudowana", "degradowana", "degustowana", "deklamowana", "deklarowana", "dekodowana", "dekompresowana", "dekorowana", "dekretowana", "delegowana", "delektowana", "deliberowana", "demaskowana", "dementowana", "demolowana", "demonizowana", "demonstrowana", "demoralizowana", "denerwowana", "denuncjowana", "depeszowana", "depilowana", "deportowana", "deprawowana", "deptana", "deratyzowana", "destabilizowana", "destylowana", "desygnowana", "determinowana", "detonowana", "dewastowana", "dewaulowana", "dezaktywowana", "dezorientowana", "dezynfekowana", "diagnozowana", "dilowana", "dłubana", "dłużona", "dmuchana", "dmuchnięta", "dobiegana", "dobierana", "dobijana", "dobita", "dobrana", "dobudzona", "dobyta", "doceniana", "doceniona", "dochodzona", "dochowana", "dochowywana", "dociągnięta", "dociekana", "docięta", "docinana", "dociskana", "dociśnięta", "doczekana", "doczepiona", "doczołgana", "doczyszczona", "doczytana", "dodana", "dodawana", "dodrukowana", "dodrukowywana", "dofinansowana", "dofinansowywana", "dogadana", "dogadywana", "dogadzana", "doganiana", "doglądana", "doglądnięta", "dognana", "dogodzona", "dogoniona", "dograna", "dogryzana", "dogryziona", "dogrzana", "dogrzebana", "doinformowana", "dojeżdżana", "dojona", "dojrzana", "dojrzewana", "dokańczana", "dokarmiana", "dokarmiona", "dokazana", "dokazywana", "dokładana", "doklejona", "dokonana", "dokończona", "dokonywana", "dokopana", "dokopywana", "dokowana", "dokręcana", "dokręcona", "dokształcana", "dokształcona", "dokuczana", "dokumentowana", "dokupiona", "dołączana", "dołączona", "doładowana", "dolana", "dolewana", "doliczona", "dołowana", "dołożona", "domagana", "domalowana", "domknięta", "domniewywana", "domówiona", "domyślana", "domyślona", "domyta", "doniesiona", "donoszona", "dopadana", "dopadnięta", "dopakowana", "dopalona", "dopasowana", "dopasowywana", "dopatrywana", "dopatrzona", "dopchana", "dopchnięta", "dopełniana", "dopełniona", "dopieszczona", "dopięta", "dopijana", "dopilnowana", "dopingowana", "dopisana", "dopisywana", "dopita", "dopłacana", "dopłacona", "dopłynięta", "dopolerowana", "dopompowana", "dopowiedziana", "dopracowana", "dopracowywana", "doprana", "doprawiona", "doprecyzowana", "doproszona", "doprowadzana", "doprowadzona", "dopucowana", "dopuszczana", "dopuszczona", "dopytywana", "dorabiana", "doradzana", "doradzona", "doręczana", "doręczona", "dorobiona", "dorównana", "dorównywana", "dorwana", "dorysowana", "dorzucana", "dorzucona", "doścignięta", "dosiadana", "dosięgnięta", "doskoczona", "doskonalona", "dosładzana", "dosłana", "dosłyszana", "dosolona", "dośrodkowana", "dossana", "dostana", "dostąpiona", "dostarczana", "dostarczona", "dostawana", "dostawiana", "dostawiona", "dostosowana", "dostosowywana", "dostrajana", "dostrojona", "dostrzegana", "dosunięta", "dosuwana", "doświadczana", "doświetlona", "dosypana", "dosypywana", "doszkolona", "doszlifowana", "doszorowana", "doszukana", "doszukiwana", "doszyta", "dotankowana", "dotankowywana", "dotargana", "dotaszczona", "dotknięta", "dotleniona", "dotłumaczona", "dotowana", "dotrwana", "dotrzymana", "dotrzymywana", "dotykana", "douczana", "douczona", "dowalona", "dowieziona", "dowodzona", "dowożona", "doznana", "doznawana", "dozorowana", "dozowana", "dożyta", "dożywiona", "dramatyzowana", "drapana", "drapnięta", "draśnięta", "drażniona", "drążona", "dręczona", "drenowana", "drgana", "drgnięta", "drukowana", "dryblowana", "dryfowana", "drzemana", "dubbingowana", "dublowana", "duplikowana", "duszona", "dworowana", "dygotana", "dyktowana", "dymana", "dymiona", "dyrygowana", "dyscyplinowana", "dyskredytowana", "dyskryminowana", "dyskutowana", "dyskwalifikowana", "dysponowana", "dystansowana", "dystrybuowana", "dywagowana", "dźgana", "dźgnięta", "dziabnięta", "dziedziczona", "dziękowana", "dzielona", "dziergana", "dzierżona", "dziobana", "dziurawiona", "dziurkowana", "dźwigana", "dźwignięta", "edukowana", "edytowana", "egzaminowana", "egzekutowana", "egzekwowana", "ekscytowana", "ekshumowana", "ekskomunikowana", "eksmitowana", "ekspandowana", "eksperymentowana", "eksploatowana", "eksplorowana", "eksponowana", "eksportowana", "eksterminowana", "ekstradowana", "ekstrapolowana", "eliminowana", "emancypowana", "emanowaa", "emigrowana", "emitowana", "energetyzowana", "eskortowana", "etykietowana", "ewakuowana", "ewaluowana", "fabrykowana", "falowana", "fałszowana", "farbowana", "faszerowana", "faulowana", "faworyzowana", "fechtowana", "fermentowana", "ferowana", "figurowana", "filetowana", "filmowana", "filtrowana", "finalizowana", "finansowana", "firmowana", "fleszowana", "folgowana", "formułowana", "forsowana", "fotografowana", "fundowana", "gadana", "ganiana", "garbiona", "gardzona", "garnirowana", "gaszona", "gawędzona", "gaworzona", "gazowana", "gdakana", "gderana", "generalizowana", "generowana", "gięta", "gilgotana", "gładzona", "głaskana", "głodowana", "głodzona", "gloryfikowana", "głosowana", "głoszona", "głowiona", "gmatwana", "gmerana", "gnana", "gnębiona", "gnieciona", "gnita", "gnojona", "godzona", "gojona", "golnięta", "golona", "goniona", "googlowana", "gospodarowana", "goszczona", "gotowana", "grabiona", "grana", "grasowana", "gratulowana", "grillowana", "grilowana", "gromadzona", "gromiona", "grożona", "gruchana", "gruchnięta", "grupowana", "grywana", "gryziona", "grzana", "grzechotana", "gubiona", "gustowana", "gwałcona", "gwarantowana", "gwizdana", "gwizdnięta", "hackowana", "haftowana", "hajtnięta", "hamowana", "hańbiona", "handlowana", "harcowana", "harmonizowana", "harowana", "hartowana", "hibernowana", "hipnotyzowana", "hodowana", "holowana", "hołubiona", "honorowana", "hospitalizowana", "huknięta", "hulana", "huśtana", "idealizowana", "identyfikowana", "ignorowana", "igrana", "ilustrowana", "imitowana", "implantowana", "implodowana", "imponowana", "importowana", "improwizowana", "indokrynowana", "indukowana", "infekowana", "infiltrowana", "informowana", "ingerowana", "inhalowana", "inscenizowana", "inspirowana", "instalowana", "instruowana", "insynuowana", "integrowana", "interpretowana", "interweniowana", "intonowana", "intubowana", "inwestowana", "inwigilowana", "irytowana", "iskrzona", "izolowana", "jadana", "jawiona", "jazgotana", "jednoczona", "jedzona", "kablowana", "kadzona", "kalana", "kaleczona", "kalkulowana", "kamerowana", "kamienowana", "kamuflowana", "kanalizowana", "kantowanta", "kąpana", "kapitulowana", "kapowana", "karana", "karbonizowana", "karcona", "karczowana", "karmiona", "kartkowana", "kąsana", "kasowana", "kastrowana", "katalogowana", "katapultowana", "katowana", "katrupiona", "kierowana", "kimana", "kiszona", "kiwana", "kiwnięta", "kłaniana", "klapana", "klapnięta", "klarowana", "klasyfikowana", "klębiona", "klejona", "klepana", "klepnięta", "klikana", "kliknięta", "klonowana", "kłopotana", "kłuta", "knocona", "knuta", "kochana", "koczowana", "kodowana", "kojarzona", "kojfnięta", "kojona", "kolekcjonowana", "kolektywizowana", "kolidowana", "kolonizowana", "kolorowana", "koloryzowana", "kołowana", "kołysana", "kombinowana", "komenderowana", "komentowana", "komercjalizowana", "kompensowana", "komplementowana", "komplikowana", "komponowana", "kompromitowana", "komunikowana", "konana", "koncentrowana", "kończona", "konfabulowana", "konfiskowana", "konfrontowana", "konserwowana", "konspirowana", "konstruowana", "konsultowana", "konsumowana", "kontaktowana", "kontestowana", "kontrastowana", "kontrolowana", "kontrowana", "kontynuowana", "konwertowana", "konwojowana", "koordynowana", "kopana", "kopcona", "kopiowana", "kopnięta", "kopulowana", "korelowana", "korkowana", "koronowana", "korygowana", "korzona", "korzystana", "koszona", "kotwiczona", "kozaczona", "kozłowana", "kpita", "kradziona", "krajana", "krążona", "kręcona", "kremowana", "kreowana", "krochmalona", "krojona", "kropiona", "kruszona", "krystalizowana", "kryta", "krytykowana", "krzepnięta", "krzyczana", "krzyknięta", "krzywdzona", "krzywiona", "krzyżowana", "kserowana", "księgowana", "kształcona", "kształtowana", "kulona", "kultywowana", "kumulowana", "kupczona", "kupiona", "kupowana", "kupywana", "kurczona", "kurowana", "kursowana", "kurzona", "kuszona", "kuta", "kwalifikowana", "kwestionowana", "łączona", "ładowana", "łagodzona", "łajdaczona", "lakierowana", "łamana", "lamentowana", "lansowana", "lana", "łapana", "łaskotana", "łaszona", "latana", "łatana", "lawirowana", "leczona", "legalizowana", "legitymowana", "lekceważona", "lepiona", "lewitowana", "liberowana", "licencjonowana", "licytowana", "liczona", "likwidowana", "linczowana", "liniowana", "literowana", "litowana", "lizana", "liznięta", "lobbowana", "lokalizowana", "losowana", "łowiona", "łożona", "lubiana", "łudzona", "lunatykowana", "łupana", "łupiona", "łuskana", "lustrowana", "łuszczona", "luzowana", "łykana", "łyknięta", "łyżeczkowana", "macana", "machana", "machnięta", "mącona", "maczana", "maganyzowana", "maglowana", "majaczona", "majsterkowana", "majtana", "maksymalizowana", "malowana", "maltretowana", "mamiona", "mamrotana", "manewrowana", "manifestowana", "manipulowana", "markowana", "marnotrawiona", "marnowana", "marszczona", "marynowana", "marznięta", "masakrowana", "maskowana", "masowana", "masturbowana", "mataczona", "materializowana", "mawiana", "mazana", "maznięta", "męczona", "meldowana", "merdana", "metabolizowana", "miażdżona", "mielona", "mierzona", "mierzwiona", "mieszana", "miętolona", "migana", "migdalona", "migotana", "mijana", "miksowana", "milowana", "minięta", "minimalizowana", "miotana", "mistyfikowana", "mitygowana", "mizdrzona", "mlana", "mniemana", "mnożona", "mobilizowana", "mocowana", "moczona", "modelowana", "modernizowana", "modlona", "modulowana", "modyfikowana", "molestowana", "monitorowana", "monopolizowana", "montowana", "mordowana", "motywowana", "mówiona", "mrożona", "mrugana", "mrużona", "muskana", "mutowana", "mydlona", "mylona", "myszkowana", "myta", "nabazgrana", "nabiegana", "nabierana", "nabita", "nabrana", "nabrojona", "nabrudzona", "nabyta", "nabywana", "nacelowana", "nachapana", "nachodzona", "nachwalona", "nachylona", "naciągana", "naciągnięta", "nacierana", "nacięta", "nacinana", "naciskana", "naciśnięta", "nacjonalizowana", "naczepiona", "nadana", "nadawana", "nadchodzona", "nadciągana", "nadciągnięta", "nadcięta", "nadesłana", "nadgoniona", "nadgryzana", "nadgryziona", "nadinterpretowana", "nadłożona", "nadmieniana", "nadmieniona", "nadmuchana", "nadrabiana", "nadrobiona", "nadskakiwana", "nadsłuchiwana", "nadstawiana", "nadstawiona", "nadszarpnięta", "naduszona", "nadużyta", "nadużywana", "nadwerężana", "nadwyrężana", "nadwyrężona", "nadziana", "nadzorowana", "naelektryzowana", "nafaszerowana", "nagabywana", "nagadana", "nagięta", "naginana", "nagłaszana", "nagłośniona", "nagoniona", "nagradzana", "nagrana", "nagrodzona", "nagromadzona", "nagrywana", "nagryzmolona", "nagrzana", "nagrzebana", "nagrzewana", "nagwizdana", "naigrywana", "najechana", "najęta", "najmowana", "nakarmiana", "nakarmiona", "nakazana", "nakazywana", "nakierowana", "nakierowywana", "nakładana", "nakłamana", "nakłaniana", "naklejana", "naklejona", "naklepana", "nakłoniona", "nakłuta", "nakłuwana", "nakopana", "nakręcana", "nakręcona", "nakreślana", "nakreślona", "nakruszona", "nakryta", "nakrywana", "nakrzyczana", "nakupiona", "naładowana", "nalana", "nałapana", "nalepiona", "nalewana", "naliczona", "nałowiona", "nałożona", "namaczana", "namagnetyzowana", "namalowana", "namaszczana", "namaszczona", "namawiana", "namęczona", "namierzana", "namieszana", "namoczona", "namówiona", "namydlana", "namyślona", "naniesiona", "naoliwiana", "naoliwiona", "naopowiadana", "naostrzona", "napadana", "napadnięta", "napakowana", "napalona", "naparzana", "napastowana", "napawana", "napchana", "napędzana", "napełniana", "napełniona", "napierana", "napiętnowana", "napięta", "napinana", "napisana", "napluta", "napływana", "napoczęta", "napojona", "napompowana", "napotkana", "napotykana", "napraszana", "naprawiana", "naprawiona", "naprężana", "naprężona", "napromieniowana", "naprostowana", "naprowadzana", "naprowadzona", "napsuta", "napuszczana", "napuszczona", "napychana", "napytana", "narąbana", "naradzana", "naradzona", "narastana", "narażana", "narażona", "nareperowana", "narkotyzowana", "narodzona", "naruszana", "naruszona", "narwana", "narysowana", "narzucana", "narzucona", "nasączana", "nasączona", "nasadzona", "nasiąkana", "nasilana", "nasilona", "naskakiwana", "naskoczona", "naskrobana", "naśladowana", "nasłana", "nasłuchana", "nasłuchiwana", "nasmarowana", "nastąpiona", "nastawiana", "nastawiona", "nastraszana", "nastrojona", "nastukana", "nasunięta", "nasuwana", "naświetlana", "nasycona", "nasyłana", "nasypana", "naszczana", "naszkicowana", "naszpikowana", "naszprycowana", "naszykowana", "naszyta", "naszywana", "natarta", "natchnięta", "natknięta", "natleniona", "natłuszczona", "natrafiona", "natrząsana", "natrząsnięta", "nauczana", "nauczona", "nawadniana", "nawalona", "nawiązana", "nawiązywana", "nawiedzana", "nawiedzona", "nawiercona", "nawiewana", "nawieziona", "nawigowana", "nawijana", "nawilżana", "nawilżona", "nawinięta", "nawlekana", "nawodniona", "nawoływana", "nawoskowana", "nawożona", "nawpychana", "nawracana", "nawrócona", "nawrzucana", "nawtykana", "nawymyślana", "nazbierana", "nazmyślana", "naznaczana", "naznaczona", "nazrywana", "nazwana", "nazywana", "nęcona", "negocjowana", "negowana", "nękana", "neutralizowana", "niańczona", "niecierpliwiona", "niedoceniana", "niedowidziana", "nienawidzona", "niesiona", "nikolona", "niszczona", "nitkowana", "niuchana", "niweczona", "niwelowana", "nokautowana", "nominowana", "notowana", "nucona", "numerowana", "nurtowana", "obaczona", "obadana", "obalana", "obalona", "obandażowana", "obarczana", "obarczona", "obawiana", "obchodzona", "obciągnięta", "obciążona", "obcięta", "obcinana", "obcyndalana", "obczajana", "obczajona", "obdarowana", "obdarta", "obdarzana", "obdarzona", "obdzielona", "obdzierana", "obdzwaniana", "obdzwoniona", "obejmowana", "oberwana", "obessana", "obezwładniana", "obezwładniona", "obfotografowana", "obfotografowywana", "obgadana", "obgadywana", "obgryzana", "obgryziona", "obiecana", "obiecywana", "obierana", "obijana", "obita", "objadana", "objaśniana", "objawiana", "objawiona", "objechana", "objęta", "objeżdżana", "obkręcana", "oblana", "obłapiana", "obłapywana", "obłaskawiana", "obłaskawiona", "obleciana", "oblegana", "oblewana", "obliczana", "obliczona", "oblizana", "obłowiona", "obłożona", "obluzowana", "obluzowywana", "obmacana", "obmacywana", "obmawiana", "obmyślana", "obmyślona", "obmyta", "obmywana", "obnażana", "obniżana", "obniżona", "obnoszona", "obowiązywana", "obozowana", "obrabiana", "obrabowana", "obracana", "obradowana", "obramowana", "obraniana", "obrana", "obrastana", "obrażana", "obrażona", "obrobiona", "obrócona", "obrodzona", "obroniona", "obrysowana", "obrywana", "obryzgana", "obrzezana", "obrzucana", "obrzucona", "obrzygana", "obsadzana", "obsadzona", "obściskiwana", "obserwowana", "obsiana", "obsikana", "obsikiwana", "obskakiwana", "obskoczona", "obskubana", "obskubywana", "obśliniana", "obśliniona", "obsługiwana", "obsłużona", "obsmarowana", "obstawiana", "obstawiona", "obstrzeliwana", "obsunięta", "obsuwana", "obsypana", "obsypywana", "obszukana", "obszukiwana", "obtaczana", "obtarta", "obtoczona", "obudzona", "obwąchana", "obwąchiwana", "obwiązana", "obwiązywana", "obwieszana", "obwieszczana", "obwieszczona", "obwieszona", "obwijana", "obwiniana", "obwinięta", "obwołana", "obyta", "obżerana", "ocalana", "ocalona", "ocechowana", "oceniana", "oceniona", "ocenzurowana", "ochładzana", "ochlapana", "ochlapywana", "ochłodzona", "ochłonięta", "ochraniana", "ochroniona", "ochrzaniana", "ochrzczona", "ociągana", "ocielona", "ocieplana", "ocieplona", "ocierana", "ocknięta", "ocucona", "ocuta", "oczarowywana", "oczekiwana", "oczerniana", "oczerniona", "oczyszczana", "oczyszczona", "odarta", "odbębniona", "odbetonowana", "odbezpieczana", "odbezpieczona", "odbijana", "odbita", "odblokowana", "odbudowana", "odbudowywana", "odbutowana", "odbyta", "odcedzana", "odchorowana", "odchowana", "odchudzana", "odchudzona", "odchylana", "odchylona", "odciągana", "odciągnięta", "odciążona", "odcierpiona", "odcięta", "odcinana", "odcisnięta", "odcumowana", "odcyfrowana", "odcyfrowywana", "odczarowana", "odczekana", "odczepiana", "odczepiona", "odczuta", "odczuwana", "odczyniona", "odczytana", "odczytywana", "oddalana", "oddana", "oddawana", "oddelegowana", "oddychana", "oddzielana", "oddzielona", "odebrana", "odegnana", "odegrana", "odejmowana", "odepchnięta", "oderwana", "odeskortowana", "odesłana", "odespana", "odessana", "odetkana", "odetnięta", "odezwana", "odfiltrowana", "odgadnięta", "odgadywana", "odganiana", "odgarniana", "odgarnięta", "odgięta", "odgniatana", "odgoniona", "odgradzana", "odgrażana", "odgrodzona", "odgruzowana", "odgrywana", "odgryzana", "odgryziona", "odgrzana", "odgrzebana", "odgrzebywana", "odgrzewana", "odgwizdana", "odhaczona", "odholowana", "odinstalowana", "odizolowana", "odjedzona", "odjęta", "odjonizowana", "odkażana", "odkażona", "odkładana", "odklejona", "odkochana", "odkodowana", "odkodowywana", "odkopana", "odkopywana", "odkorkowana", "odkręcana", "odkręcona", "odkrojona", "odkryta", "odkrywana", "odkupiona", "odkupywana", "odkurzana", "odkurzona", "odkuta", "odłączana", "odłączona", "odłamywana", "odlana", "odlatywana", "odlepiana", "odlewana", "odliczana", "odliczona", "odłożona", "odłupana", "odmachana", "odmachiwana", "odmalowana", "odmarszczona", "odmawiana", "odmeldowana", "odmieniana", "odmieniona", "odmierzana", "odmierzona", "odmieszana", "odmontowana", "odmówiona", "odmrażana", "odmrożona", "odnajdowana", "odnaleziona", "odnawiana", "odniesiona", "odnoszona", "odnotowana", "odnotowywana", "odnowiona", "odpakowana", "odpakowywana", "odpalana", "odpalona", "odpałzowana", "odparowana", "odparta", "odpędzana", "odpicowana", "odpieczętowana", "odpierana", "odpięta", "odpiłowana", "odpiłowywana", "odpinana", "odpisana", "odpisywana", "odpłacana", "odplamiona", "odplątana", "odpłynięta", "odpowietrzona", "odpracowana", "odpracowywana", "odprasowana", "odprawiana", "odprawiona", "odprężana", "odprostowana", "odprowadzana", "odprowadzona", "odpruta", "odpryskana", "odpukana", "odpukiwana", "odpuszczana", "odpuszczona", "odpychana", "odrąbana", "odrabiana", "odrąbywana", "odradzana", "odradzona", "odrapana", "odrastana", "odratowana", "odreagowana", "odremontowana", "odrestaurowana", "odrestaurowywana", "odrobaczana", "odrobiona", "odroczona", "odrodzona", "odrośnięta", "odróżniana", "odróżniona", "odrysowana", "odrywana", "odrzucana", "odrzucona", "odsączana", "odsączona", "odsadzona", "odseparowana", "odsiadywana", "odsiana", "odsiewana", "odsłaniana", "odsłonięta", "odsłuchana", "odsłuchiwana", "odsłużona", "odśnieżana", "odśnieżona", "odsolona", "odśpiewana", "odsprzedana", "odsprzedawana", "odstąpiona", "odstawiana", "odstawiona", "odstępowana", "odstraszana", "odstręczona", "odstresowana", "odstrzeliwana", "odstrzelona", "odsunięta", "odsuwana", "odświeżana", "odświeżona", "odsyłana", "odsypywana", "odsysana", "odszczekana", "odszczekiwana", "odsztafirowana", "odszukana", "odszyfrowana", "odszyfrowywana", "odszykowana", "odtrąbiona", "odtrącona", "odtruta", "odtwarzana", "odtworzona", "oduczona", "odurzona", "odwalana", "odwalona", "odwiązana", "odwiązywana", "odwiedzana", "odwiedzona", "odwieszona", "odwieziona", "odwijana", "odwinięta", "odwlekana", "odwodniona", "odwodzona", "odwołana", "odwoływana", "odwożona", "odwracana", "odwrócona", "odwzajemniona", "odwzorowana", "odżegnana", "odziana", "odziedziczona", "odznaczana", "odznaczona", "odzwieciedlona", "odzwierciedlana", "odzwoniona", "odzwyczajona", "odzyskana", "odzyskiwana", "odżyta", "odzywiana", "odżywiona", "oferowana", "ofiarowana", "ofiarowywana", "ogarniana", "ogarnięta", "oglądana", "ogłaszana", "ogłoszona", "ogłupiana", "ogłupiona", "ogłuszona", "ogołocona", "ogolona", "ograbiana", "ograbiona", "ograniczana", "ograniczona", "ograna", "ogrodzona", "ogryziona", "ogrzana", "ogrzewana", "okablowana", "okaleczona", "okantowana", "okąpana", "okazana", "okazywana", "okiełznana", "okładana", "okłamana", "okłamywana", "oklaskiwana", "oklejona", "oklepana", "okopana", "okopywana", "okpiona", "okradana", "okradziona", "okraszona", "okrążana", "okrążona", "okręcana", "okręcona", "określana", "określona", "okrojona", "okryta", "okrywana", "okrzyknięta", "okulawiona", "okupiona", "okupowana", "olana", "olewana", "olśnięta", "omamiona", "omawiana", "omdlewana", "omijana", "ominięta", "omotana", "omówiona", "onanizowana", "onieśmielana", "onieśmielona", "opadnięta", "opakowana", "opalana", "opalona", "opancerzona", "opanowana", "opanowywana", "oparta", "oparzona", "opasana", "opatentowana", "opatrywana", "opatrzona", "opatulona", "opchnięta", "opędzana", "opędzona", "operowana", "opętana", "opętywana", "opieczętowana", "opiekowana", "opierana", "opijana", "opisana", "opisywana", "opita", "opłacana", "opłacona", "opłakana", "opłakiwana", "opłukana", "opluta", "opluwana", "opływana", "opodatkowana", "opodatkowywana", "oponowana", "oporządzana", "oporządzona", "opowiadana", "opowiedziana", "opóźniana", "opóźniona", "opracowana", "opracowywana", "oprawiana", "oprawiona", "oprowadzana", "oprowadzona", "opróżniana", "opróżniona", "opryskana", "opryskiwana", "opublikowana", "opukana", "opuszczana", "opuszczona", "opychana", "opylona", "orana", "orbowana", "organizowana", "orientowana", "oroszona", "orzekana", "orżnięta", "osaczana", "osaczona", "osadzana", "osądzana", "osadzona", "osądzona", "oscylowana", "osiadana", "osiągana", "osiągnięta", "osiedlana", "osiedlona", "osiedzona", "osierocona", "osiodłana", "oskalpowana", "oskarżona", "oskrobana", "oskrzydlana", "oskrzydlona", "oskubana", "oskubywana", "osłabiana", "osłabiona", "oślepiana", "oślepiona", "oślepnięta", "ośliniana", "osłodzona", "osłoniona", "osłuchana", "osmalona", "ośmielona", "ośmieszana", "ośmieszona", "ostrzegana", "ostrzelana", "ostrzelita", "ostrzona", "ostudzona", "osunięta", "osuszana", "osuszona", "osuwana", "oswajana", "oświadczana", "oświadczona", "oświecana", "oświeciona", "oświetlana", "oświetlona", "oswobadzana", "oswobodzona", "oswojona", "oszacowana", "oszałamiana", "oszczana", "oszczędzana", "oszczędzona", "oszklona", "oszlifowana", "oszołomiona", "oszpecona", "oszukana", "oszukiwana", "oszwabiona", "otaczana", "otarta", "otoczona", "otruta", "otruwana", "otrząsana", "otrząśnięta", "otrzepana", "otrzeźwiona", "otrzymana", "otrzymywana", "otulona", "otumaniona", "otwierana", "otworzona", "otwarta", "owana", "owdowiona", "owiana", "owijana", "owinięta", "ozdabiana", "ozdobiona", "ozdrowiona", "ożeniona", "oznaczana", "oznaczona", "oznajmiana", "oznajmiona", "oznakowana", "ożyta", "ożywana", "ożywiana", "ożywiona", "pachnąca", "pacnąta", "pakowana", "paktowana", "pałana", "pałaszowana", "palnięta", "palona", "pamiętana", "panoszona", "paprana", "parafrazowana", "paraliżowana", "parkowana", "parowana", "partaczona", "parta", "parzona", "pastowana", "paszona", "patrolowana", "patroszona", "patrzona", "pauzowana", "pchana", "pchnięta", "pdholowana", "pedałowana", "pękana", "pęknięta", "pełniona", "penetrowana", "perforowana", "perfumowana", "perswadowana", "piastowana", "pichcona", "pielęgnowana", "pielona", "pieniona", "pieszczona", "piętnowana", "pięta", "pijana", "pikietowana", "piknikowana", "pikowana", "pilnowana", "pilotowana", "piłowana", "pisana", "pisywana", "pita", "płacona", "plądrowana", "plamiona", "planowana", "płaszczona", "plątana", "płatana", "pławiona", "plewiona", "płonąca", "płoszona", "plotkowana", "plugawiona", "płukana", "pluskana", "pluta", "pobaraszkowana", "pobierana", "pobita", "pobłażana", "pobłogosławiona", "pobrana", "pobrudzona", "pobudzana", "pobudzona", "pobujana", "pocałowana", "pocerowana", "pochłaniana", "pochlapana", "pochlebiana", "pochłonięta", "pochowana", "pochwalana", "pochwalona", "pochwycona", "pochylana", "pochylona", "pociachana", "pociągana", "pociągnięta", "pocierana", "pocieszana", "pocieszona", "pocięta", "pocona", "pocukrowana", "poćwiartowana", "poczesana", "poczęstowana", "poczęta", "poczochrana", "poczuta", "poczytana", "poczytywana", "podana", "podarowana", "podarta", "podawana", "podążona", "podbierana", "podbijana", "podbita", "podbudowana", "podbudowywana", "podburzana", "podburzona", "podchwycona", "podciągana", "podciągnięta", "podcierana", "podcięta", "podcinana", "podczepiona", "poddana", "poddawana", "podebrana", "podejmowana", "podejrzana", "podejrzewana", "podelektowana", "podeptana", "poderwana", "podesłana", "podglądana", "podgolona", "podgoniona", "podgryzana", "podgrzana", "podgrzewana", "podjadana", "podjedzona", "podjęta", "podkablowana", "podkarmiona", "podkładana", "podklejona", "podkolorowana", "podkołowana", "podkopana", "podkopywana", "podkradana", "podkradnięta", "podkręcana", "podkręcona", "podkreślana", "podkreślona", "podkształcona", "podkulona", "podkupiona", "podkurzona", "podkuta", "podłączana", "podłączona", "podładowana", "podłamana", "podlana", "podłapana", "podleczona", "podlegana", "podlewana", "podliczana", "podliczona", "podlizana", "podlizywana", "podłożona", "podmalowana", "podmieniana", "podmieniona", "podmuchana", "podmyta", "podnajęta", "podniecana", "podniecona", "podniesiona", "podnoszona", "podołana", "podopingowana", "podostrzona", "podotykana", "podpadnięta", "podpalana", "podpalona", "podparta", "podpatrywana", "podpatrzona", "podpieczętowana", "podpiekana", "podpierana", "podpięta", "podpiłowana", "podpinana", "podpisana", "podpisywana", "podpłacona", "podpłynięta", "podpompowana", "podporządkowana", "podporządkowywana", "podpowiadana", "podpowiedziana", "podprowadzana", "podpuszczana", "podpuszczona", "podpychana", "podpytana", "podrabiana", "podrapana", "podrasowana", "podratowana", "podrażniona", "podręczona", "podregulowana", "podreperowana", "podretuszowana", "podrobiona", "podroczona", "podróżowana", "podrygiwana", "podrywana", "podrzucana", "podrzucona", "podrzynana", "podsadzona", "podskubywana", "podsłuchana", "podsłuchiwana", "podsmażana", "podsmażona", "podśpiewywana", "podstawiana", "podstawiona", "podstemplowana", "podstrojona", "podsumowana", "podsumowywana", "podsunięta", "podsuwana", "podświetlana", "podsycana", "podsycona", "podsyłana", "podsypana", "podszczypywana", "podszkolona", "podszlifowana", "podszykowana", "podszyta", "podszywana", "podtapiana", "podtarta", "podtopiona", "podtrzymana", "podtrzymywana", "podtuczona", "poduczana", "podupadana", "poduszona", "podwajana", "podwalana", "podważana", "podwędzona", "podwiązana", "podwieszana", "podwieziona", "podwijana", "podwinięta", "podwojona", "podwożona", "podwyżana", "podwyższana", "podwyższona", "podyktowana", "podyskutowana", "podziabana", "podziałana", "podziałkowana", "podziękowana", "podzielona", "podziurawiona", "podziwiana", "podźwignięta", "poeksperymentowana", "pofarbowana", "pofatygowana", "pofilmowana", "poganiana", "pogardzana", "pogardzona", "pogarszana", "pogaszona", "pogładzona", "pogłaskana", "pogłębiana", "pogłębiona", "pogłośniona", "pogmatwana", "pognębiona", "pognieciona", "pogodzona", "pogoniona", "pogorszona", "pogotowana", "pograbiona", "pogrążana", "pogrążona", "pogrożona", "pogrubiana", "pogrubiona", "pogruchana", "pogruchotana", "pogrupowana", "pogrywana", "pogryzana", "pogryziona", "pogrzana", "pogrzebana", "pogubiona", "pogwałcana", "pohamowana", "pohandlowana", "poharatowana", "pohuśtana", "poinformowana", "poinstruowana", "pojednana", "pojęta", "pojmięta", "pojmowana", "pojona", "pokajana", "pokaleczona", "pokarana", "pokarmiona", "pokąsana", "pokatalogowana", "pokazana", "pokazywana", "pokiereszowana", "pokierowana", "pokiwana", "pokładana", "poklepana", "poklepywana", "pokłoniona", "pokłuta", "pokochana", "pokolorowana", "pokoloryzowana", "pokołysana", "pokombinowana", "pokomplikowana", "pokonana", "pokończona", "pokonywana", "pokopana", "pokrajana", "pokrążona", "pokręcona", "pokrojona", "pokruszona", "pokryta", "pokrywana", "pokrzepiana", "pokrzepiona", "pokrzyżowana", "pokuszona", "pokutowana", "połączona", "polakierowana", "połamana", "polana", "połapana", "połaskotana", "połatana", "polecana", "połechtana", "polecona", "poleczona", "polegana", "polemizowana", "polepszana", "polepszona", "polerowana", "polewana", "policzkowana", "policzona", "polimeryzowana", "polizana", "połknięta", "polowana", "połowiona", "położona", "polubiona", "poluźniona", "poluzowana", "połykana", "pomacana", "pomachana", "pomagana", "pomalowana", "pomarynowana", "pomasowana", "pomazana", "pomęczona", "pomiatana", "pomieszana", "pomieszczona", "pomijana", "pominięta", "pomiziana", "pomknięta", "pomnażana", "pomniejszana", "pomniejszona", "pomnożona", "pomoczona", "pompowana", "pomydlona", "pomylona", "pomyszkowana", "pomywana", "ponabijana", "ponaciskana", "ponadziewana", "ponaglana", "ponaglona", "ponagrywana", "ponaklejana", "ponakłuwana", "ponakrywana", "ponaprawiana", "ponawiana", "poniańczona", "poniechana", "ponieiwerana", "poniesiona", "poniszczona", "poniżana", "poniżona", "ponoszona", "ponowiona", "ponudzona", "poobcinana", "poobcowana", "poobczajana", "poobijana", "poobmacywana", "poobracana", "poobserwowana", "poodbijana", "poodcinana", "poodgryzana", "poodkurzana", "poodprawiana", "poodsuwana", "poodwalana", "pooglądana", "poograniczana", "poopalana", "poopiekana", "poopwiadana", "pootwierana", "popadana", "popakowana", "popalona", "poparta", "poparzona", "popchana", "popchnięta", "popędzana", "popędzona", "popękana", "popełniana", "popełniona", "poperfumowana", "popierana", "popieszczona", "popijana", "popilnowana", "popisana", "popita", "popłacona", "popłakiwana", "poplamiona", "poplątana", "popluskana", "popodcinana", "popodziwiana", "popoprawiana", "poprana", "poprasowana", "poprawiana", "poprawiona", "poproszona", "poprowadzona", "popryskana", "poprzebierana", "poprzeciągana", "poprzecinana", "poprzedzana", "poprzeglądana", "poprzeklinana", "poprzekopywana", "poprzemieszczana", "poprzenoszona", "poprzesadzana", "poprześladowana", "poprzestawiana", "poprzesuwana", "poprzewieszana", "poprzewracana", "poprzycinana", "poprzymierzana", "poprzytulana", "poprzywiązywana", "popsuta", "popudrowana", "popukana", "popularyzowana", "popuszczana", "popuszczona", "popychana", "popykana", "popytana", "porabiana", "porachowana", "poraniona", "poratowana", "porażona", "poręczona", "porównana", "porozbierana", "porozbijana", "porozciągana", "porozcinana", "porozdawana", "porozdzielana", "porozmieszczana", "poróżniona", "porozpędzana", "porozpieszczana", "porozprowadzana", "porozpruwana", "porozrzucana", "porozstawiana", "porozsyłana", "porozumiewana", "porozwalana", "porozwiązywana", "porozwieszana", "porozwożona", "portretowana", "poruszana", "poruszona", "porwana", "porysowana", "porywana", "porządkowana", "porządzona", "porzucana", "porzucona", "posądzana", "posadzona", "posądzona", "pościągana", "pościelona", "pościerana", "pościgana", "pościnana", "pościskana", "posegregowana", "posiadana", "posiana", "posiekana", "posilana", "posiłkowana", "posilona", "posiłowana", "posiniaczona", "posiorbana", "poskąpiona", "poskładana", "posklejana", "poskramiana", "poskręcana", "poskrobana", "poskromiona", "poskubana", "posłana", "posłodzona", "poślubiana", "poślubiona", "posługiwana", "posmakowana", "posmarowana", "posolona", "posortowana", "pospekulowana", "pospieszana", "pośpieszana", "pośpiewana", "pospinana", "pospłacana", "posprawdzana", "posprzątana", "posprzedawana", "pośredniczona", "possana", "postanowiona", "postana", "postarana", "postawiona", "postemplowana", "posterowana", "postradana", "postraszona", "postrugana", "postrzegana", "postrzelana", "postrzelona", "postukana", "postymulowana", "posunięta", "posuwana", "poświącana", "poświadczona", "poświecona", "poświęcona", "poświętowana", "poświntuszona", "posyłana", "posypana", "posypywana", "poszarpana", "poszastana", "poszatkowana", "poszczuta", "poszczycona", "poszczypana", "poszerzana", "poszerzona", "poszorowana", "poszpiegowana", "poszturchana", "poszukana", "poszukiwana", "poszwędana", "poszybowana", "potakiwana", "potarmoszona", "potarta", "potasowana", "potęgowana", "potępiana", "potępiona", "potknięta", "potoczona", "potopiona", "potorturowana", "potrącana", "potrącona", "potraktowana", "potrojona", "potruta", "potrząsana", "potrzaskana", "potrząsnięta", "potrząśnięta", "potrzymana", "Poturbowana", "poturlana", "potwierdzona", "potykana", "poucinana", "pouczana", "pouczona", "poudawana", "poukładana", "pouprawiana", "poupychana", "pourywana", "poustawiana", "poużywana", "powąchana", "powachlowana", "powalana", "powalona", "poważana", "powbijana", "powciągana", "powciskana", "powdychana", "powęszona", "powetowana", "powiadamiana", "powiadomiona", "powiązana", "powiedziana", "powiedzona", "powiększana", "powielana", "powielona", "powierzana", "powierzona", "powieszona", "powiewana", "powinszowana", "powitana", "powita", "powkładana", "powlekana", "powłóczona", "powodowana", "powołana", "powoływana", "powożona", "powpychana", "powrócona", "powrzucana", "powsadzana", "powściągnięta", "powspominana", "powstrzymana", "powtarzana", "powtórzona", "powybierana", "powybijana", "powycierana", "powycinana", "powyciskana", "powydawana", "powyganiana", "powyginana", "powyjaśniana", "powyjmowana", "powyłączana", "powymiatana", "powymieniana", "powynoszona", "powypełniana", "powypisywana", "powyrywana", "powyrzucana", "powystrzelana", "powysyłana", "powywalana", "powywieszana", "powywracana", "powzięta", "pozabawiana", "pozabijana", "pozacierana", "pożądana", "pożądlona", "pozadzierana", "pozakładana", "pozaklinana", "pozałatwiana", "pozamiatana", "pozamieniana", "pozamrażana", "pozamykana", "pozapalana", "pozapinana", "pozapisywana", "pozapraszana", "pożarta", "pozasłaniana", "pozastrzelana", "pozatykana", "pozbawiana", "pozbawiona", "pozbierana", "pozbyta", "pozbywana", "pozdejmowana", "pozdrawiana", "pozdrowiona", "pożegnana", "pożerana", "pozmiatana", "pozmieniana", "pozmywana", "poznaczona", "poznana", "poznawana", "poznęcana", "pozorowana", "pozostawiana", "pozostawiona", "pozowana", "pozrywana", "pozszywana", "pożuta", "pozwalniana", "pozwana", "pozwiązywana", "pozwiedzana", "pozwolona", "pożyczana", "pożyczona", "pozyskana", "pożyta", "pozywana", "pożywiana", "pożywiona", "praktykowana", "prana", "prasowana", "prawiona", "prażona", "precyzowana", "preferowana", "prenumerowana", "prezentowana", "próbowana", "procesowana", "produkowana", "profanowana", "profilowana", "prognozowana", "programowana", "projektowana", "proklamowana", "prolongowana", "promieniowana", "promowana", "propagowana", "proponowana", "prosperowana", "prostowana", "proszkowana", "proszona", "protestowana", "protokołowana", "prowadzona", "prowokowana", "pruta", "pryskana", "pryśnięta", "przeanalizowana", "przearanżowana", "przebaczana", "przebaczona", "przebadana", "przebiegnięta", "przebierana", "przebijana", "przebita", "przebolona", "przebrana", "przebudowana", "przebudowywana", "przebudzana", "przebudzona", "przebukowana", "przebyta", "przebywana", "przeceniana", "przeceniona", "przechlapana", "przechodzona", "przechowana", "przechowywana", "przechrzcona", "przechwycona", "przechwytywana", "przechylana", "przechylona", "przechytrzana", "przechytrzona", "przeciągana", "przeciągnięta", "przeciążana", "przeciążona", "przeciekana", "przecierana", "przecierpiana", "przecięta", "przecinana", "przeciskana", "przeciśnięta", "przeciwstawiana", "przećwiczona", "przeczekana", "przeczesana", "przeczesywana", "przeczołgana", "przeczuta", "przeczuwana", "przeczyszczona", "przeczytana", "przedarta", "przedawkowana", "przedawkowywana", "przedekorowana", "przedłożona", "przedłużana", "przedłużona", "przedmuchana", "przedobrzona", "przedostana", "przedostawana", "przedsiewzięta", "przedstawiana", "przedstawiona", "przedymana", "przedyskutowana", "przedzierana", "przedziurawiona", "przedziurkowana", "przeegzaminowana", "przefaksowana", "przefarbowana", "przefasonowana", "przefasowana", "przefaxowana", "przefiltrowana", "przeformowana", "przeforsowana", "przegadana", "przeganana", "przeganiana", "przegapiana", "przegapiona", "przegięta", "przeginana", "przeglądana", "przeglądnięta", "przegłodzona", "przegłosowana", "przegoniona", "przegotowana", "przegotowywana", "przegrabiona", "przegradzana", "przegrana", "przegrupowana", "przegrupowywana", "przegrywana", "przegryzana", "przegryziona", "przegrzana", "przegrzebana", "przegrzewana", "przehandlowana", "przeholowana", "przeinstalowana", "przeistoczona", "przejadana", "przejaskrawiana", "przejaśniona", "przejawiana", "przejawiona", "przejechana", "przejęta", "przejeżdżana", "przejmowana", "przejrzana", "przekabacana", "przekabacona", "przekablowana", "przekalibrowana", "przekalkulowana", "przekarmiana", "przekąszona", "przekazywana", "przekierowana", "przekierowywana", "przekimana", "przekładana", "przeklejona", "przeklęta", "przeklinana", "przeklnięta", "przekłuta", "przekonana", "przekonfigurowana", "przekonstruowana", "przekonwertowana", "przekonywana", "przekopana", "przekopywana", "przekoziołkowana", "przekraczana", "przekręcana", "przekręcona", "przekreślana", "przekreślona", "przekroczona", "przekrojona", "przekrzyczona", "przekrzywiona", "przekształcana", "przekształcona", "przekupiona", "przekupywana", "przekuta", "przekwalifikowana", "przełączana", "przełączona", "przeładowana", "przeładowywana", "przełamana", "przełamywana", "przelana", "przelatywana", "przeleciana", "przelewana", "przeleżana", "przelicytowana", "przeliczana", "przeliczona", "przeliterowana", "przełknięta", "przełożona", "przełykana", "przełyknięta", "przemalowana", "przemalowywana", "przemaszerowana", "przemawiana", "przemeblowana", "przemęczona", "przemielona", "przemieniana", "przemierzona", "przemieszczana", "przemieszczona", "przemijana", "przemilczana", "przemilczona", "przeminięta", "przemknięta", "przemodelowana", "przemusztrowana", "przemycana", "przemycona", "przemyślana", "przemyślona", "przemyta", "przemywana", "przenegocjowana", "przeniesiona", "przenikana", "przeniknięta", "przenoszona", "przeobrażana", "przeobrażona", "przeoczana", "przeoczona", "przeorana", "przeorganizowana", "przeorientowana", "przepadana", "przepakowana", "przepalona", "przeparkowana", "przepchana", "przepchnięta", "przepędzana", "przepędzona", "przepełniana", "przepełniona", "przepijana", "przepiłowana", "przepisana", "przepisywana", "przepita", "przepłacana", "przepłacona", "przepłakana", "przeplanowana", "przepłoszona", "przepłukana", "przepłukiwana", "przepłynięta", "przepływana", "przepompowana", "przepompowywana", "przepowiadana", "przepowiedziana", "przepracowana", "przepracowywana", "przeprana", "przeprawiana", "przeprawiona", "przeprogramowana", "przeprojektowana", "przeprowadzana", "przeprowadzona", "przepuszczana", "przepuszczona", "przepychana", "przepytana", "przepytywana", "przerąbana", "przerabiana", "przeradzana", "przerastana", "przerażona", "przeredagowana", "przerejestrowana", "przerobiona", "przerodzona", "przerośnięta", "przerwana", "przerysowana", "przerywana", "przerzedzana", "przerzucana", "przerzucona", "przesączona", "przesadzana", "przesądzana", "przesadzona", "przesądzona", "prześcigana", "prześcignięta", "przesiadana", "przesiadywana", "przesiana", "przesiedlana", "przesiedlona", "przesiedziana", "przesiewana", "przesilona", "przeskakiwana", "przeskalowana", "przeskanowana", "przeskoczona", "przeskrobana", "prześladowana", "przesłaniana", "przesłana", "prześledziona", "prześlizgnięta", "przesłodzona", "przesłonięta", "przesłuchana", "przesłuchiwana", "przesmarowana", "przesolona", "przesortowana", "przespana", "prześpiewana", "przessana", "przestawiana", "przestawiona", "przestemplowana", "przestraszona", "przestrojona", "przestrzegana", "przestrzelona", "przestudiowana", "przesunięta", "przesuwana", "prześwietlana", "prześwietlona", "przesyłana", "przesypana", "przesypiana", "przesypywana", "przeszarżowana", "przeszczepiana", "przeszczepiona", "przeszkadzana", "przeszkolona", "przeszmuglowana", "przeszukana", "przeszukiwana", "przeszyta", "przeszywana", "przetaczana", "przetańczona", "przetapetowana", "przetarta", "przetestowana", "przetkana", "przetoczona", "przetopiona", "przetrącona", "przetransformowana", "przetransmitowana", "przetransponowana", "przetransportowana", "przetrawiona", "przetrwana", "przetrząsana", "przetrząśnięta", "przetrzepana", "przetrzymana", "przetrzymywana", "przetwarzana", "przetworzona", "przewalana", "przewalczona", "przewaletowana", "przewalona", "przeważana", "przeważona", "przewertowana", "przewiązana", "przewiązywana", "przewidywana", "przewidziana", "przewiercana", "przewiercona", "przewieszana", "przewieszona", "przewietrzona", "przewieziona", "przewijana", "przewinięta", "przewitana", "przewodniczona", "przewodzona", "przewożona", "przewracana", "przewrócona", "przewyższana", "przeymierzana", "przeżarta", "przeżeglowana", "przeżegnana", "przeziębiona", "przezimowana", "przeznaczana", "przeznaczona", "przeżuta", "przezwyciężana", "przezwyciężona", "przeżyta", "przezywana", "przeżywana", "przodowana", "przpochlebiona", "przwdziewana", "przybastowana", "przybierana", "przybijana", "przybita", "przybliżana", "przybliżona", "przybrana", "przycelowana", "przycepiona", "przychylona", "przyciągana", "przyciągnięta", "przyciemniona", "przycięta", "przycinana", "przyciskana", "przyciśnięta", "przyciszona", "przyćmiewana", "przyćmiona", "przycumowana", "przyczepiana", "przyczesana", "przyczołgana", "przyczyniona", "przydepnięta", "przydeptana", "przyduszona", "przydzielana", "przydzielona", "przygarnięta", "przygaszona", "przygazowana", "przygładzana", "przygnębiana", "przygniatana", "przygnieciona", "przygotowana", "przygruchana", "przygrywana", "przygryzana", "przygryziona", "przygrzana", "przygwożdżona", "przyhamowana", "przyholowana", "przyjana", "przyjęta", "przyjmowana", "przyjrzana", "przykładana", "przyklejona", "przyklepana", "przykopana", "przykręcana", "przykręcona", "przykrócona", "przykryta", "przykrywana", "przykurzona", "przykuta", "przykuwana", "przyłączana", "przyłączona", "przylana", "przyłapana", "przylegana", "przylepiana", "przylepiona", "przyłożona", "przymierzona", "przymilana", "przymknięta", "przymocowana", "przymuszana", "przynależona", "przyniesiona", "przynoszona", "przynudzana", "przyostrzona", "przyozdabiana", "przyozdobiona", "przypadnięta", "przypakowana", "przypakowywana", "przypalana", "przypalona", "przyparta", "przypasowana", "przypatrywana", "przypatrzona", "przypieczętowana", "przypiekana", "przypierana", "przypięta", "przypilnowana", "przypiłowana", "przypinana", "przypisana", "przypisywana", "przypłacona", "przyplątana", "przypłynięta", "przypodobana", "przypominana", "przypomniana", "przyporządkowana", "przyprawiana", "przyprawiona", "przyprowadzona", "przypucowana", "przypudrowana", "przypuszczana", "przypuszczona", "przyrównana", "przyrządzana", "przyrządzona", "przysiadana", "przysiągnięta", "przyskrzydlona", "przyskrzyniana", "przyskrzyniona", "przysłaniana", "przysłana", "przysłodzona", "przysłoniona", "przysłuchiwana", "przysługiwana", "przysłużona", "przysmażana", "przysmażona", "przyspieszana", "przyspieszona", "przysporzona", "przysposobiona", "przyśrubowywana", "przyssana", "przystąpiona", "przystawiana", "przystawiona", "przystemplowana", "przystopowana", "przystosowana", "przystrojona", "przysunięta", "przysuwana", "przyswajana", "przyświecana", "przyświęcona", "przyswojona", "przysyłana", "przysypana", "przyszpilona", "przyszykowana", "przyszyta", "przyszywana", "przytaczana", "przytargana", "przytarta", "przytaszczana", "przytępiana", "przytępiona", "przytkana", "przytłaczana", "przytłoczona", "przytłumiona", "przytoczona", "przytrafiona", "przytroczona", "przytruwana", "przytrzasnięta", "przytrzymana", "przytrzymywana", "przytulana", "przytulona", "przytwierdzana", "przytwierdzona", "przytykana", "przyuczona", "przyuważona", "przywabiona", "przywalana", "przywalona", "przywarowana", "przywarta", "przywdziana", "przywiązana", "przywiązywana", "przywidziana", "przywieziona", "przywitana", "przywłaszczana", "przywłaszczona", "przywołana", "przywoływana", "przywożona", "przywracana", "przywrócona", "przyznaczona", "przyznana", "przyznawana", "przyzwalana", "przyzwana", "przyzwyczajana", "przyzwyczajona", "przyzywana", "psiamana", "pstrykana", "pstryknięta", "psuta", "publikowana", "puchnięta", "pucowana", "pudłowana", "pudrowana", "puknięta", "punktowana", "pustoszona", "puszczana", "puszczona", "puszkowana", "puszona", "pykana", "pytana", "rabowana", "rachowana", "racjonalizowana", "racjonowana", "raczona", "radowana", "raniona", "raportowana", "ratowana", "ratyfikowana", "reaktywowana", "realizowana", "reanimowana", "recytowana", "ręczona", "redagowana", "redukowana", "reformowana", "refowana", "regenerowana", "regionalizowana", "regulowana", "reinkarnowana", "rejestrowana", "reklamowana", "rekomendowana", "rekompensowana", "rekonstruowana", "rekreowana", "rekrutowana", "rekwirowana", "relacjonowana", "relaksowana", "remodulowana", "remontowana", "renegocjowana", "reorganizowana", "reperowana", "replikowana", "represejonowana", "reprezentowana", "reprodukowana", "resetowana", "resocjalizowana", "respektowana", "resuscytowana", "retuszowana", "rewanżowana", "rewidowana", "rezerwowana", "rezonowana", "rezygnowana", "reżyserowana", "robiona", "rodzona", "rojona", "rolowana", "romansowana", "roniona", "rozbawiana", "rozbawiona", "rozbierana", "rozbijana", "rozbita", "rozbłyśnięta", "rozbrajana", "rozbrojona", "rozbudowana", "rozbudowywana", "rozbudzana", "rozbudzona", "rozbujana", "rozcapierzona", "rozchmurzona", "rozchodzona", "rozchylana", "rozchylona", "rozciągana", "rozciągnięta", "rozcieńczana", "rozcieńczona", "rozcierana", "rozcięta", "rozcinana", "rozczarowana", "rozczarowywana", "rozczesana", "rozczłonkowana", "rozczulana", "rozczytana", "rozdana", "rozdawana", "rozdeptana", "rozdmuchana", "rozdmuchiwana", "rozdrabniana", "rozdrapana", "rozdrapywana", "rozdrażniana", "rozdrażniona", "rozduszona", "rozdwojona", "rozdysponowana", "rozdzielana", "rozdzielona", "rozdzierana", "rozdziewiczona", "rozebrana", "rozedrana", "rozegrana", "rozegrywana", "rozepchana", "rozerwana", "rozesłana", "rozgarnięta", "rozgaszczana", "rozgięta", "rozglaszana", "rozgłoszona", "rozgniatana", "rozgnieciona", "rozgniewana", "rozgoniona", "rozgraniczona", "rozgrana", "rozgromiona", "rozgrywana", "rozgryzana", "rozgryziona", "rozgrzana", "rozgrzebywana", "rozgrzeszona", "rozgrzewana", "rozhuśtana", "rozjaśniana", "rozjaśniona", "rozjechana", "rozjedzona", "rozjuszana", "rozjuszona", "rozkazana", "rozkazywana", "rozkładana", "rozklejana", "rozklejona", "rozkołysana", "rozkopana", "rozkopywana", "rozkoszowana", "rozkręcana", "rozkręcona", "rozkrojona", "rozkruszona", "rozkuta", "rozkuwana", "rozkwaszona", "rozkwaterowana", "rozkwitana", "rozkwitnięta", "rozłączona", "rozładowana", "rozładowywana", "rozłamana", "rozlana", "rozlewana", "rozliczana", "rozliczona", "rozlokowana", "rozłożona", "rozłupana", "rozluźniana", "rozmanażana", "rozmasowana", "rozmawiana", "rozmazana", "rozmazywana", "rozmiękczona", "rozmieniana", "rozmieniona", "rozmieszczana", "rozmieszczona", "rozminięta", "rozmnożona", "rozmontowana", "rozmówiona", "rozmrażana", "rozmrożona", "rozmyślana", "rozmyta", "różnicowana", "rozniecana", "roznieciona", "rozniesiona", "różniona", "roznoszona", "rozochocona", "rozpaczana", "rozpakowana", "rozpakowywana", "rozpalana", "rozpalona", "rozpamiętywana", "rozpaskudzana", "rozpatrywana", "rozpatrzona", "rozpędzana", "rozpędzona", "rozpętana", "rozpieszczana", "rozpieszczona", "rozpięta", "rozpiłowana", "rozpinana", "rozpisana", "rozpisywana", "rozplanowana", "rozpłaszczana", "rozpłaszczona", "rozplątana", "rozplątywana", "rozpłynięta", "rozpoczęta", "rozpoczynana", "rozpogodzona", "rozporządzana", "rozporządzona", "rozpościerana", "rozpostrzona", "rozpowiadana", "rozpowiedziana", "rozpowszechniana", "rozpowszechniona", "rozpoznana", "rozpoznawana", "rozpracowana", "rozpraszana", "rozprawiana", "rozprawiczona", "rozprawiona", "rozprostowana", "rozproszona", "rozprowadzana", "rozprowadzona", "rozpruta", "rozpruwana", "rozprzestrzeniana", "rozprzestrzeniona", "rozpuszczana", "rozpuszczona", "rozpychana", "rozpylana", "rozpylona", "rozpytana", "rozpytywana", "rozrastana", "rozreklamowana", "rozrobiona", "rozrośnięta", "rozróżniana", "rozróżniona", "rozruszana", "rozrysowana", "rozrywana", "rozrzucana", "rozsadzana", "rozsadzona", "rozsądzona", "rozścielona", "rozsiana", "rozsiekana", "rozsiewana", "rozsiodłana", "rozsławiana", "rozsławiona", "rozsmarowana", "rozsmarowywana", "rozśmieszana", "rozstana", "rozstąpiona", "rozstawana", "rozstawiana", "rozstawiona", "rozstrojona", "rozstrząsana", "rozstrzeliwana", "rozstrzelona", "rozstrzygana", "rozstrzygnięta", "rozsunięta", "rozsupłana", "rozświetlana", "rozświetlona", "rozsyłana", "rozsypana", "rozsypywana", "rozszarpana", "rozszarpywana", "rozszczepiana", "rozszczepiona", "rozszerzana", "rozszerzona", "rozszyfrowana", "roztaczana", "roztapiana", "roztarta", "roztoczona", "roztopiona", "roztrwoniona", "roztrząsana", "roztrzaskana", "rozumiana", "rozumowana", "rozwalana", "rozwalona", "rozwarta", "rozważana", "rozważona", "rozweselana", "rozweselona", "rozwiana", "rozwiązana", "rozwiązywana", "rozwidniana", "rozwiedziona", "rozwierana", "rozwiercona", "rozwieszana", "rozwieszona", "rozwiewana", "rozwieziona", "rozwikłana", "rozwinięta", "rozwlekana", "rozwodzona", "rozwścieczana", "rozwścieczona", "rozzłoszczona", "rugana", "ruinowana", "rujnowana", "runięta", "ruszana", "ruszona", "rwana", "ryczana", "ryglowana", "rymowana", "rysowana", "ryta", "ryzykowana", "rządzona", "rzeźbiona", "rżnięta", "rzucana", "rzucona", "rzygana", "sabotażowana", "sączona", "sadzana", "sadzona", "sądzona", "salutowana", "salwowana", "sankcjonowana", "satysfakcjonowana", "scalona", "scementowana", "scentrowana", "scharakteryzowana", "schładzana", "schlana", "schlapana", "schlebiona", "schłodzona", "schowana", "schroniona", "schrupana", "schrzaniona", "schwytana", "schylana", "ściągnięta", "ścielona", "ściemniana", "ściemniona", "ścierana", "ścierpiona", "ścięta", "ścigana", "ścinana", "ściskana", "ściśnięta", "ściszana", "ściszona", "sędziowana", "segregowana", "selekcjonowana", "separowana", "sępiona", "serwowana", "sfabrykowana", "sfajczona", "sfałszowana", "sfaulowana", "sfilmowana", "sfinalizowana", "sfinansowana", "sfingowana", "sformalizowana", "sformatowana", "sformowana", "sformułowana", "sforsowana", "sfotografowana", "shimmerowana", "siana", "siekana", "siorbana", "skadrowana", "skakana", "skalana", "skaleczona", "skalibrowana", "skalkulowana", "skalpowana", "skanalizowana", "skandowana", "skanowana", "skapitulowana", "skarcona", "skarżona", "skasowana", "skatalogowana", "skazana", "skażona", "skazywana", "skierowana", "składana", "składowana", "skłaniana", "sklasyfikowana", "skleciona", "sklejana", "sklejona", "sklepana", "skłócona", "skłoniona", "sklonowana", "sknocona", "skojarzona", "skolonizowana", "skołowana", "skombinowana", "skomentowana", "skompensowana", "skompletowana", "skomplikowana", "skomponowana", "skompresowana", "skompromitowana", "skomunikowana", "skonana", "skoncentrowana", "skończona", "skondensowana", "skonfigurowana", "skonfiskowana", "skonfrontowana", "skonkretyzowana", "skonsolidowana", "skonstruowana", "skonsultowana", "skonsumowana", "skontaktowana", "skontrolowana", "skoordynowana", "skopana", "skopiowana", "skorektowana", "skorumpowana", "skorygowana", "skorzystana", "skoszona", "skracana", "skradziona", "skręcana", "skręcona", "skremowana", "skreślana", "skreślona", "skrobana", "skrobnięta", "skrócona", "skrojona", "skropiona", "skruszona", "skrystalizowana", "skryta", "skrytykowana", "skrywana", "skrzecowana", "skrzepnięta", "skrzyczana", "skrzyta", "skrzywdzona", "skrzyżowana", "skserowana", "skubana", "skubnięta", "skulona", "skumulowana", "skupiana", "skupiona", "skupowana", "skurczona", "skuszona", "skuta", "skuwana", "skwitowana", "słana", "sławiona", "śledzona", "śliniona", "ślizgana", "słodzona", "słuchana", "słyszana", "smagana", "smarowana", "smażona", "śmiecona", "smuta", "smyrana", "snuta", "sondowana", "sortowana", "spafycikowana", "spakowana", "spalana", "spałaszowana", "spalona", "spałowana", "spamiętana", "spaprana", "sparafrazowana", "sparaliżowana", "sparowana", "spartaczona", "spartolona", "sparzona", "spasowana", "spatałaszona", "spauzowana", "spawana", "spawiona", "specjalizowana", "spędzana", "spędzona", "spekulowana", "spełniana", "spełniona", "spenetrowana", "spętana", "spierana", "spięta", "śpiewana", "spiłowana", "spinana", "spisana", "spiskowana", "spisywana", "spita", "spłacana", "spłacona", "splądrowana", "splajtowana", "splamiona", "spłaszczona", "splatana", "splątana", "spłatana", "spławiana", "spławiona", "spłodzona", "spłonięta", "spłoszona", "spłukana", "spłukiwana", "spluwana", "spływana", "spoczęta", "spoczywana", "spodziewana", "spojona", "spolaryzowana", "spoliczkowana", "sponiewierana", "sponsorowana", "spopielana", "spopielona", "spopularyzowana", "sportretowana", "sporządzana", "sporządzona", "spostrzegana", "spotęgowana", "spotkana", "spotykana", "spoufalana", "spowalniana", "spowiadana", "spowodowana", "spowolniona", "spoźniona", "spóźniona", "spożytkowana", "spożyta", "spożywana", "sprana", "sprasowana", "spraszana", "sprawdzona", "sprawiona", "sprawowana", "sprecyzowana", "spreparowana", "sprężana", "sprężona", "spróbowana", "sprofanowana", "sprofilowana", "sprostowana", "sproszkowana", "sproszona", "sprowadzana", "sprowadzona", "sprowokowana", "spryskana", "spryskiwana", "sprywatyzowana", "sprzątana", "sprzątnięta", "sprzeczana", "sprzedana", "sprzedawana", "sprzeniewierzona", "spudłowana", "spustoszona", "spuszczana", "spuszczona", "spychana", "ssana", "stabilizowana", "stacjonowana", "staczana", "staranowana", "starczana", "stargowana", "startowana", "stawiana", "stawiona", "stemplowana", "stenografowana", "stepowana", "sterowana", "sterroryzowana", "sterylizowana", "stłamszona", "stłumiona", "stnięta", "stoczona", "stołowana", "stonowana", "stopiona", "stopniowana", "storpedowana", "stosowana", "strącana", "stracona", "strącona", "strajkowana", "straszona", "stratowana", "strawiona", "streamowana", "stresowana", "streszczana", "streszczona", "strofowana", "strojona", "stroszona", "strugana", "struta", "strymowana", "strząsana", "strzaskana", "strząśnięta", "strzelona", "strzepana", "strzępiona", "strzepnięta", "strzepywana", "studiowana", "studzona", "stukana", "stuknięta", "stulona", "stwardniona", "stwarzana", "stwierdzana", "stwierdzona", "stworzona", "stykana", "stylizowana", "stymulowana", "sugerowana", "sumowana", "sunięta", "swatana", "swawolona", "świadczona", "świecona", "święcona", "świerzbiona", "świętowana", "świntuszona", "sycona", "sygnalizowana", "symulowana", "synchronizowana", "sypana", "sypnięta", "szachrowana", "szacowana", "szafowana", "szamotana", "szanowana", "szargana", "szarpana", "szarpnięta", "szarżowana", "szasowana", "szastana", "szatkowana", "szczędzona", "szczepiona", "szczerzona", "szczuta", "szczycona", "szczypana", "szczytowana", "szefowana", "szemrana", "szepnięta", "szeptana", "szerzona", "szkalowana", "szkicowana", "szklona", "szkodzona", "szkolona", "szlachtowana", "szlifowana", "szmuglowana", "szokowana", "szorowana", "szpachlowana", "szpanowana", "szperana", "szprycowana", "sztachnięta", "szturchana", "szturchnięta", "szturmowana", "szufladkowana", "szuflowana", "szukana", "szulerowana", "szwankowana", "szydełkowana", "szydzona", "szyfrowana", "szykanowana", "szykowana", "szyta", "taktowana", "tamowana", "tankowana", "tapetowana", "taplana", "taranowana", "targana", "targnięta", "targowana", "tarmoszona", "tarta", "tarzana", "tasowana", "taszczona", "tatuowana", "tchnięta", "telefonowana", "telegrfowana", "teleportowana", "temperowana", "teoretyzowana", "tępiona", "terroryzowana", "testowana", "tkana", "tknięta", "tłamszona", "tłoczona", "tłumaczona", "tłumiona", "toczona", "tolerowana", "tonowana", "topiona", "torowana", "torturowana", "towarzyszona", "trąbiona", "trącana", "tracona", "trącona", "trafiana", "trafiona", "tragizowana", "traktowana", "transferowana", "transformowana", "transmitowana", "transportowana", "tratowana", "trawiona", "trenowana", "tresowana", "triumfowana", "tropiona", "troszczona", "truta", "trwoniona", "trymowana", "tryskana", "tryśnięta", "tryumfowana", "trywializowana", "trzaskana", "trzasnięta", "trzepana", "trzepnięta", "trzepotana", "trzęsiona", "trzymana", "tuczona", "tułana", "tulona", "turlana", "tuszowana", "twistowana", "tworzona", "tykana", "tyranizowana", "tyrana", "tytułowana", "uaktualniana", "uaktualniona", "uaktywniana", "uaktywniona", "uargumentowana", "uatrakcyjniona", "ubabrana", "ubarwiana", "ubarwiona", "ubawiona", "ubezpieczana", "ubezpieczona", "ubezwłasnowolniona", "ubiczowana", "ubiegana", "ubierana", "ubijana", "ubita", "ubłagana", "ubliżana", "ubliżona", "ubolewana", "ubóstwiana", "ubrana", "ubroczona", "ubrudzona", "ucałowana", "ucharakteryzowana", "uchowana", "uchroniona", "uchwalana", "uchwalona", "uchwycona", "uchylana", "uchylona", "uciągnięta", "ucieleśniana", "ucierana", "ucierpiana", "ucięta", "ucinana", "uciskana", "uciśnięta", "uciszana", "uciszona", "uciułana", "ucywilizowana", "uczczona", "uczepiona", "uczesana", "uczęszczana", "uczona", "ucztowana", "uczuta", "uczyniona", "udana", "udaremniona", "udawana", "udekorowana", "udeptywana", "uderzana", "uderzona", "udobruchana", "udokumentowana", "udomawiana", "udomowiona", "udoskonalana", "udoskonalona", "udostępniana", "udostępniona", "udowadniana", "udowodniona", "Udramatyzowana", "udręczona", "udrożniona", "udupiona", "uduszona", "udzielana", "udzielona", "udźwignięta", "ueiwarygodniona", "ufana", "ufarbowana", "uformowana", "ufortyfikowana", "ufundowana", "ugadana", "uganiana", "ugaszana", "ugaszona", "ugięta", "uginana", "ugłaskana", "ugniatana", "ugodzona", "ugoszczona", "ugotowana", "ugrana", "ugruntowana", "ugryziona", "ugrzęznięta", "uhistoryzowana", "uhonorowana", "uiścita", "ujadana", "ujarzmiana", "ujarzmiona", "ujawniana", "ujawniona", "ujęta", "ujeżdżana", "ujeżdżona", "ujmowana", "ujrzana", "ukamieniowana", "ukarana", "ukartowana", "ukąszona", "ukatrupiona", "ukazana", "ukazywana", "ukierowana", "ukierunkowana", "układana", "uklepana", "ukłoniona", "ukłuta", "uknuta", "ukojona", "ukołysana", "ukończona", "ukonkretniona", "ukoronowana", "ukradziona", "ukręcana", "ukręcona", "ukrojona", "ukryta", "ukrywana", "ukrzyżowana", "ukształtowana", "ukuta", "ułagodzona", "ułaskawiana", "ułaskawiona", "ulatniana", "ułatwiana", "ułatwiona", "uleczana", "uleczona", "ulegana", "ulepiona", "ulepszana", "ulepszona", "ulokowana", "ulotniona", "ułożona", "umacniana", "umalowana", "umartwiana", "umawiana", "umazana", "umeblowana", "umiejscowiona", "umieszczana", "umieszczona", "umilana", "umilona", "umknięta", "umniejszana", "umniejszona", "umocniona", "umocowana", "umoczona", "umodelowana", "umorzona", "umotywowana", "umówiona", "umożliwiana", "umożliwiona", "umroczniona", "umyta", "unaoczniona", "unicestwiana", "unicestwiona", "uniemożliwaina", "uniemożliwiona", "unierochomiona", "uniesiona", "unieszczęśliwiana", "unieszczęśliwiona", "unieszkodliwiana", "unieszkodliwiona", "unieważniana", "unieważniona", "uniewinniona", "uniezależniona", "unikana", "uniknięta", "unormowana", "unoszona", "unowoczesniana", "unowocześniana", "uodporniona", "uogólniana", "upakowana", "upalana", "upalona", "upamiętniana", "upamiętniona", "upaństwowiona", "upaprana", "uparta", "upaskudzona", "upchana", "upchnięta", "upewniana", "upewniona", "upgradowana", "upichcona", "upiększana", "upiększona", "upierana", "upierdolona", "upięta", "upijana", "upilnowana", "upinana", "upita", "uplastyczniona", "upłynięta", "upodabniana", "upodobniona", "upojona", "upokorzana", "upokorzona", "upolowana", "upominana", "uporządkowana", "upowszechniona", "upozorowana", "upozowana", "uprana", "uprasowana", "upraszczana", "uprawdopodobniona", "uprawiana", "uproszczona", "uproszona", "uprowadzana", "uprowadzona", "uprzątana", "uprzątnięta", "uprzedona", "uprzedzana", "uprzyjemniana", "uprzyjemniona", "uprzykrzana", "uprzytomniona", "upubliczniana", "upubliczniona", "upudrowana", "upuszczana", "upuszczona", "upychana", "urabiana", "uraczana", "uradowana", "Urągana", "uratowana", "urażana", "urażona", "uregulowana", "urobiona", "uroniona", "urośnięta", "urozmaicana", "urozmaicona", "uruchamiana", "uruchomiona", "urwana", "urywana", "urządzana", "urządzona", "urzeczywistniana", "urzeczywistniona", "urżnięta", "usadowiona", "usadzona", "usamowolniona", "usankcjonowana", "usatyfakcjonowana", "uschnięta", "uściskana", "uścislona", "uściśnięta", "usidlona", "usiedzona", "uskładana", "uskoczona", "uskuteczniana", "uskuteczniona", "usłuchana", "usługiwana", "usłużona", "usłyszana", "usmażona", "uśmiana", "uśmiercana", "uśmiercona", "uśmierzona", "uspana", "uśpiona", "uspokajana", "uspokojona", "uspołeczniana", "usprawiedliwiana", "usprawiedliwiona", "usprawniona", "usprzątana", "ustabilizowana", "ustalana", "ustalona", "ustanawiana", "ustanowiona", "ustąpiona", "ustatkowana", "ustawiana", "ustawiona", "ustępowana", "ustosunkowana", "ustrojona", "ustrzegana", "ustrzelona", "usunięta", "ususzona", "usuwana", "uświadamiana", "uświadczona", "uświadomiona", "uświęcona", "uświniona", "usychana", "usypana", "usypiana", "usystematyzowana", "usytuowana", "uszanowana", "uszczelniana", "uszczęśliwiana", "uszczęśliwiona", "uszczuplona", "uszczypnięta", "uszkadzana", "uszkodzona", "uszlachetniana", "uszlachetniona", "usztywniona", "uszykowana", "uszyta", "utajniona", "utargowana", "utarta", "utemperowana", "utkana", "utknięta", "utkwiona", "utoczona", "utopiona", "utorowana", "utożsamiana", "utożsamiona", "utracona", "utrącona", "utrudniana", "utrudniona", "utrwalana", "utrwalona", "utrzymywana", "utuczona", "utulona", "utwierdzana", "utwierdzona", "utworzona", "utylizowana", "uwalniana", "uwalona", "uwarunkowana", "uważana", "uwiązana", "uwiązywana", "uwidoczniona", "uwieczniana", "uwieczniona", "uwielbiana", "uwielbiona", "uwieńczona", "uwierana", "uwierzona", "uwieszona", "uwieziona", "uwięziona", "uwijana", "uwikłana", "uwinięta", "uwita", "uwłaczana", "uwłaszczona", "uwodzona", "uwolniona", "uwsteczniana", "uwsteczniona", "uwydatniana", "uwypiklona", "uwzględniana", "uwzględniona", "użądlona", "uzależniana", "uzależniona", "uzasadniana", "uzasadniona", "uzbierana", "uzbrajana", "uzbrojona", "uzdrawiana", "uzdrowiona", "użerana", "uzewnętrzniana", "uzewnętrzniona", "uzgadniana", "uzgodniona", "uziemiona", "uzmysłowiona", "uznana", "uznawana", "uzupełniana", "uzupełniona", "uzurpowana", "użyczana", "użyczona", "uzyskana", "uzyskiwana", "użyta", "używana", "wabiona", "wąchana", "wachlowana", "wahana", "walczona", "wałkowana", "walnięta", "walona", "ważona", "wbijana", "wbita", "wcelowana", "wchłonięta", "wciągana", "wciągnięta", "wcielana", "wcielona", "wcierana", "wcięta", "wcinana", "wciskana", "wciśnięta", "wczepiona", "wczołgana", "wczuta", "wczytana", "wczytywana", "wdana", "wdarta", "wdawana", "wdepnięta", "wdeptana", "wdetonowana", "wdmuchiwana", "wdrapana", "wdrapywana", "wdrażana", "wdrążona", "wdrożona", "wduszona", "wdychana", "wdzierana", "wędkowana", "wentylowana", "wepchana", "wepchnięta", "werbowana", "weryfikowana", "wessana", "wetkana", "wetknięta", "wezwana", "wgłębiana", "wgniatana", "wgnieciona", "wgrana", "wgryzana", "wgryziona", "wiązana", "wibrowana", "widywana", "widziana", "wiedzona", "wielbiona", "wiercona", "wierzgana", "wierzona", "wieszana", "wietrzona", "więżona", "wikłana", "windowana", "winszowana", "wiosłowana", "wirowana", "witana", "wita", "wizualizowana", "wjeżdżana", "wkalkulowana", "wkładana", "wklejana", "wklejona", "wklepana", "wkłuta", "wkomponowana", "wkopana", "wkopywana", "wkraczana", "wkradana", "wkradziona", "wkręcana", "wkręcona", "wkupiona", "wkurwiana", "wkuta", "wkuwana", "włączana", "włączona", "władana", "władowana", "włamana", "włamywana", "wlana", "wlepiana", "wlepiona", "wlewana", "wliczana", "wliczona", "włożona", "wmanewrowana", "wmanipulowana", "wmawiana", "wmieszana", "wmówiona", "wmurowana", "wmuszona", "wnerwiana", "wnerwiona", "wniesiona", "wnikana", "wniknięta", "wnioskowana", "wnoszona", "wodowana", "wojowana", "wołana", "woskowana", "wożona", "wpajana", "wpakowana", "wparowana", "wpasowana", "wpatrywana", "wpędzana", "wpędzona", "wperswadowana", "wpieniona", "wpięta", "wpisana", "wpisywana", "wpłacana", "wpłacona", "wplatana", "wplątana", "wplątywana", "wpojona", "wpompowana", "wpraszana", "wprawiana", "wproszona", "wprowadzana", "wprowadzona", "wpuszczona", "wpychana", "wrabiana", "wręczana", "wrobiona", "wróżona", "wryta", "wrzucana", "wrzucona", "wrzynana", "wsadzana", "wsadzona", "wskazana", "wskazywana", "wskórana", "wskrzeszana", "wskrzeszona", "wślizgiwana", "wślizgnięta", "wsłuchana", "wsparta", "wspierana", "wspięta", "współczuta", "współodczuwana", "współtworzona", "współżyta", "wspomagana", "wspominana", "wspomniana", "wstąpiona", "wstawiana", "wstawiona", "wstrząsana", "wstrząśnięta", "wstrzelona", "wstrzykiwana", "wstrzyknięta", "wstrzymana", "wstrzymywana", "wstukana", "wsunięta", "wsuwana", "wsypana", "wszamana", "wszczepiana", "wszczepiona", "wszczęta", "wszczynana", "wszyta", "wtajemniczana", "wtajemniczona", "wtapiana", "wtargnięta", "wtarta", "wtaszczona", "wtłoczona", "wtopiona", "wtrącona", "wtryniana", "wtulana", "wtulona", "wtykana", "wwalona", "wwiercana", "wwiercona", "wwieziona", "wwożona", "wyartykułowana", "wyautowana", "wybaczana", "wybaczona", "wybadana", "wybatożona", "wybawiona", "wybebeszona", "wybełkotana", "wybiczowana", "wybielana", "wybielona", "wybierana", "wybijana", "wybita", "wybłagana", "wyblaknięta", "wybrandzlowana", "wybrana", "wybroniona", "wybrzydzana", "wybuchana", "wybuchnięta", "wybudowana", "wybudzana", "wybudzona", "wyburzana", "wyburzona", "wycackana", "wycałowana", "wyceniana", "wyceniona", "wychlana", "wychłostana", "wychodowana", "wychowana", "wychowywana", "wychrobotana", "wychwalana", "wychwycona", "wychylana", "wychylona", "wyciągana", "wyciągnięta", "wyciekana", "wycieniowana", "wycierana", "wycięta", "wycinana", "wyciskana", "wyciśnięta", "wyciszana", "wyciszona", "wycofana", "wyćwiczona", "wycyckana", "wycyganiona", "wyczarowana", "wyczarterowana", "wyczekana", "wyczekiwana", "wyczerpana", "wyczesana", "wyczołgana", "wyczołgiwana", "wyczuta", "wyczuwana", "wyczyniana", "wyczyszczona", "wyczytana", "wyczytywana", "wydalana", "wydalona", "wydana", "wydębiona", "wydedukowana", "wydelegowana", "wydepilowana", "wydeptywana", "wydłubana", "wydłubywana", "wydłużana", "wydłużona", "wydmuchana", "wydmuchiwana", "wydobyta", "wydobywana", "wydojona", "wydoroślana", "wydostana", "wydrana", "wydrapana", "wydrapywana", "wydrążona", "wydrukowana", "wydukana", "wyduszona", "wydychana", "wydziedziczona", "wydzielana", "wydzielona", "wydzierana", "wydzierżawiona", "wydziobana", "wydziwiana", "wydzwaniana", "wyedukowana", "wyedytowana", "wyeeliminowana", "wyegzekwowana", "wyeksmitowana", "wyekspediowana", "wyeksploatowana", "wyeksponowana", "wyeksportowana", "wyeliminowana", "wyemigrowana", "wyemitowana", "wyewoluowana", "wyfrunięta", "wygadana", "wygadywana", "wyganiana", "wygarbowana", "wygarniana", "wygarnięta", "wygasana", "wygaśnięta", "wygaszana", "wygaszona", "wygenerowana", "wygięta", "wyginana", "wygładzana", "wygładzona", "wygłaszana", "wygłodzona", "wygłosowana", "wygłoszona", "wygłówkowana", "wygnana", "wygolona", "wygoniona", "wygooglowana", "wygospodarowana", "wygotowana", "wygrana", "wygrawerowana", "wygrażana", "wygrywana", "wygryziona", "wygrzana", "wygrzebana", "wygrzebywana", "wygrzewana", "wygubiona", "wyhaczona", "wyhaftowana", "wyhamowana", "wyhodowana", "wyizolowana", "wyjadana", "wyjaśniana", "wyjaśniona", "wyjawiana", "wyjawiona", "wyjedzona", "wyjęta", "wyjmowana", "wykadrowana", "wykalibrowana", "wykalkulowana", "wykańczana", "wykantowana", "wykąpana", "wykaraskana", "wykarczowana", "wykarmiana", "wykasowana", "wykastrowana", "wykazana", "wykazywana", "wykierowana", "wykitowana", "wykiwana", "wykładana", "wyklarowana", "wyklepana", "wyklinana", "wykłócana", "wykluczana", "wykluczona", "wykluta", "wykłuta", "wykminiona", "wykolejona", "wykołowana", "wykombinowana", "wykonana", "wykończona", "wykonywana", "wykopana", "wykopnięta", "wykopywana", "wykorkowana", "wykorzeniana", "wykorzeniona", "wykorzystana", "wykorzystywana", "wykoszona", "wykpita", "wykradana", "wykradnięta", "wykręcana", "wykręcona", "wykreowana", "wykreślana", "wykreślona", "wykrochmalona", "wykrojona", "wykrwawiana", "wykrwawiona", "wykryta", "wykrywana", "wykrzesana", "wykrztuszona", "wykrzyczona", "wykrzykiwana", "wykrzyknięta", "wykrzywiana", "wykształcona", "wyksztuszona", "wykupiona", "wykupywana", "wykuta", "wykuwana", "wyłączana", "wyłączona", "wylądowana", "wyładowana", "wyładowywana", "wyłajana", "wyłamana", "wyłamywana", "wyłaniana", "wylansowana", "wylana", "wyłapana", "wyłapywana", "wyławiana", "wyleasingowana", "wyleczona", "wylęgana", "wylegimytowana", "wylewana", "wyłgana", "wylicytowana", "wyliczana", "wyliczona", "wylizana", "wylizywana", "wylogowana", "wyłoniona", "wylosowana", "wyłowiona", "wyłożona", "wyłudzana", "wyłudzona", "wyłupana", "wyłuskana", "wyłuskiwana", "wyłuszczona", "wyluzowana", "wymacana", "wymachiwana", "wymagana", "wymahiwana", "wymalowana", "wymamrotana", "wymanewrowana", "wymarzona", "wymasowana", "wymawiana", "wymazana", "wymazywana", "wymeldowana", "wymeldowywana", "wymiatana", "wymieciona", "wymieniana", "wymieniona", "wymierzana", "wymieszana", "wymigana", "wymigiwana", "wymijana", "wyminięta", "wymknięta", "wymoczona", "wymodelowana", "wymontowana", "wymordowana", "wymsknięta", "wymuszana", "wymyślana", "wymyślona", "wymyta", "wynagradzana", "wynagrodzona", "wynajdowana", "wynajdywana", "wynajęta", "wynajmowana", "wynaleziona", "wynarodowiona", "wynegocjowana", "wyniesiona", "wyniknięta", "wyniszczana", "wyniszczona", "wyniuchana", "wynoszona", "wynurzana", "wyobrażana", "wyobrażona", "wyodrębniona", "wyolbrzymiana", "wyolbrzymiona", "wyorbowana", "wyosiowana", "wyostrzana", "wyostrzona", "wypaczana", "wypakowana", "wypakowywana", "wypalana", "wypalona", "wypałowana", "wyparowana", "wyparta", "wypasana", "wypastowana", "wypatroszona", "wypatrywana", "wypatrzona", "wypchana", "wypchnięta", "wypędzana", "wypędzlowana", "wypełniana", "wypełniona", "wypersfadowana", "wyperswadowana", "wypierana", "wypięta", "wypijana", "wypinana", "wypisana", "wypisywana", "wypita", "wypłacana", "wypłacona", "wypłakana", "wypłakiwana", "wypłaszczona", "wyplatana", "wyplątana", "wypleniona", "wyplewiona", "wypłoszona", "wypłukana", "wypłukiwana", "wypluta", "wypluwana", "wypocona", "wypoczęta", "wypolerowana", "wypominana", "wypomniana", "wypompowana", "wypompowywana", "wyposażona", "wypowiadana", "wypowiedziana", "wypoziomowana", "wypożyczana", "wypracowana", "wypracowywana", "wyprana", "wyprasowana", "wypraszana", "wyprawiana", "wyprawiona", "wypróbowana", "wyprodukowana", "wyprojektowana", "wypromieniowana", "wypromowana", "wyprostowana", "wyprostowywana", "wyproszona", "wyprowadzana", "wyprowadzona", "wypróżniana", "wypróżniona", "wypruta", "wypruwana", "wyprzedana", "wyprzedawana", "wyprzedzana", "wyprzedzona", "wyprzęgana", "wypstrykana", "wypucowana", "wypuszczana", "wypuszczona", "wypychana", "wypytana", "wypytywana", "wyrąbana", "wyrabiana", "wyrąbywana", "wyratowana", "wyrażana", "wyrażona", "wyrecytowana", "wyręczana", "wyręczona", "wyregulowana", "wyrejestrowana", "wyremontowana", "wyreżyserowana", "wyrobiona", "wyrolowana", "wyrośnięta", "wyrównana", "wyrównywana", "wyróżniana", "wyróżniona", "wyrugowana", "wyruszana", "wyrwana", "wyrypana", "wyrysowana", "wyryta", "wyrywana", "wyrządzona", "wyrzeźbiona", "wyrżnięta", "wyrzucana", "wyrzucona", "wyrzygana", "wyrzynana", "wyrzywana", "wysączona", "wysadzana", "wysadzona", "wyschnięta", "wyściskana", "wyselekcjonowana", "wysępiona", "wysiadywana", "wysiedzona", "wysilana", "wysilona", "wyskakiwana", "wyskalowana", "wyskoczona", "wyskrobana", "wyskubywana", "wysłana", "wyśledzona", "wyślizgiwana", "wyślizgnięta", "wysłowiona", "wysłuchana", "wysłuchiwana", "wysmagana", "wysmarkana", "wysmarowana", "wysmażana", "wysmażona", "wyśmiana", "wyśmiewana", "wysmołowana", "wysmyrana", "wyśniona", "wysnuta", "wysnuwana", "wysondowana", "wyspecjalizowana", "wyśpiewana", "wyśpiewywana", "wyspowiadana", "wysprzątana", "wysprzedana", "wyssana", "wystartowana", "wystawiona", "wysterelizowana", "wysterylizowana", "wystosowana", "wystosowywana", "wystraszona", "wystrojona", "wystrugana", "wystrychnięta", "wystrzegana", "wystrzelana", "wystrzeliwana", "wystrzelona", "wystudzona", "wystukana", "wystukiwana", "wystygnięta", "wysunięta", "wysuszana", "wysuwana", "wyswatana", "wyświadczana", "wyświadczona", "wyświetlana", "wyświetlona", "wyswobodzona", "wysyłana", "wysypana", "wysypywana", "wysysana", "wyszabrowana", "wyszalana", "wyszarpana", "wyszarpnięta", "wyszasowana", "wyszczotkowana", "wyszczuplona", "wyszeptana", "wyszkolona", "wyszlifowana", "wyszorowana", "wyszperana", "wyszukana", "wyszukiwana", "wyszumiona", "wyszykowana", "wyszyta", "wytapetowana", "wytargana", "wytargowana", "wytarta", "wytarzana", "wytaszczona", "wytatuowana", "wytchnięta", "wytępiona", "wytknięta", "wytłoczona", "wytłumaczona", "wytłumiona", "wytoczona", "wytrąbiona", "wytrącana", "wytrącona", "wytransmitowana", "wytransportowana", "wytrenowana", "wytresowana", "wytriangulowana", "wytropiona", "wytruta", "wytrząsana", "wytrzasnięta", "wytrząśnięta", "wytrzebiona", "wytrzepana", "wytrzeszczana", "wytrzeźwiana", "wytrzymana", "wytrzymywana", "wytwarzana", "wytworzona", "wytyczona", "wytykana", "wytypowana", "wyuczona", "wywabiana", "wywabiona", "wywąchana", "wywalana", "wywalczona", "wywalona", "wywarta", "wywarzana", "wyważana", "wyważona", "wywęszana", "wywężykowana", "wywiana", "wywiązana", "wywiązywana", "wywierana", "wywiercona", "wywieszana", "wywieszona", "wywietrzona", "wywieziona", "wywijana", "wywindowana", "wywinięta", "wywłaszczona", "wywlekana", "wywnętrzniona", "wywnioskowana", "wywodzona", "wywolana", "wywoływana", "wywoskowana", "wywożona", "wywracana", "wywrócona", "wywróżona", "wywyższana", "wyżalona", "wyzbyta", "wyzdrowiona", "wyżebrana", "wyżerana", "wyzerowana", "wyzionięta", "wyznaczana", "wyznaczona", "wyznana", "wyznawana", "wyzwalana", "wyzwana", "wyzwolona", "wyzygzakowana", "wyżynana", "wyzyskana", "wyzyskiwana", "wyżyta", "wyzywana", "wyżywana", "wyżywiona", "wzbijana", "wzbita", "wzbogacana", "wzbogacona", "wzbraniana", "wzbudzana", "wzbudzona", "wzburzana", "wzburzona", "wżeniona", "wzięta", "wzmacniona", "wzmagana", "wzmocniona", "wznawiana", "wzniecana", "wznieciona", "wzniesięta", "wznoszona", "wznowiona", "wzorowana", "wzrośnięta", "wzruszona", "wzwyżana", "wzywana", "zaabordowana", "zaadaptowana", "zaadoptowana", "zaadresowana", "zaakcentowana", "zaakceptowana", "zaaklimatyzowana", "zaalarmowana", "zaanektowana", "zaangażowana", "zaanonsowana", "zaapelowana", "zaaplikowana", "zaaportowana", "zaaprobowana", "zaaranżowana", "zaaresztowana", "zaatakowana", "zabaczona", "zabalowana", "zabandażowana", "zabarwiona", "zabarykadowana", "zabawiana", "zabawiona", "zabepieczana", "zabetonowana", "zabezpieczona", "zabierana", "zabita", "zabłądzona", "zablefowana", "zabłocona", "zablokowana", "zabraniana", "zabrana", "zabrnięta", "zabroniona", "zabrudzona", "zabudowana", "zabukowana", "zabulona", "zaburzona", "zabutelkowana", "zacementowana", "zacerowana", "zachciana", "zachęcana", "zachęcona", "zachlapana", "zachodzona", "zachomikowana", "zachorowana", "zachowana", "zachowywana", "zachwalana", "zachwalona", "zachwiana", "zachwycona", "zaciągana", "zaciągnięta", "zaciążona", "zaciekawiona", "zaciemniana", "zaciemniona", "zacierana", "zacieśniona", "zacięta", "zacinana", "zaciskana", "zaciśnięta", "zaćmiona", "zacumowana", "zacytowana", "zaczadzona", "zaczarowana", "Zaczepiana", "zaczepiona", "zaczerpana", "zaczesana", "zaczęta", "zaczołgana", "zaczynana", "zadarta", "zadawalana", "zadawana", "zadbana", "zadebiutowana", "zadedykowana", "zadeklamowana", "zadeklarowana", "zademonstrowana", "zadenucjowana", "zadepeszowana", "zadeptana", "zadeptywana", "zadęta", "zadławiona", "żądlona", "zadłużana", "zadłużona", "zadokowana", "zadomowiona", "zadowalana", "zadrapana", "zadraśnięta", "zadręczana", "zadręczona", "zadrutowana", "zadurzana", "zadurzona", "zaduszona", "zadymiona", "zadźgana", "zadziobana", "zadziwiana", "zadziwiona", "zafakturowana", "zafałszowana", "zafarbowana", "zafiksowana", "zafundowana", "zagadana", "zagadnięta", "zagadywana", "zagajona", "zaganiana", "zagapiona", "zagarażowana", "zagarniana", "zagarnięta", "zagaszona", "zagazowana", "zagęszczona", "zagięta", "zaginana", "zaginięta", "zagłębiana", "zagłębiona", "zagłodzona", "zagłuszana", "zagłuszona", "zagmatwana", "zagnana", "zagnieżdżona", "zagojona", "zagoniona", "zagospodarowana", "zagotowana", "zagrabiona", "zagradzana", "zagrażana", "zagrodzona", "zagrywana", "zagryzana", "zagryziona", "zagrzana", "zagrzebana", "zagrzewana", "zagubiona", "zagwarantowana", "zahaczona", "zahamowana", "zahandlowana", "zaharowana", "zahartowana", "zahipnotyzowana", "zaholowana", "zaimitowana", "zaimplantowana", "zaimplementowana", "zaimprowizowana", "zainaugurowana", "zainfekowana", "zainicjowana", "zainkasowana", "zainscenizowana", "zainspirowana", "zainstalowana", "zainteresowana", "zaintrygowana", "zaintubowana", "zainwestowana", "zaizolowana", "zajadana", "zajana", "zajarana", "zajechana", "zajęta", "zajmowana", "zakablowana", "zakamuflowana", "zakasana", "zakasowana", "zakąszana", "zakatalogowana", "zakatowana", "zakatrupiona", "zakazana", "zakażana", "zakazywana", "zakiszona", "zakładana", "zaklasyfikowana", "zaklejana", "zaklejona", "zaklepana", "zaklepywana", "zaklinana", "zaklinowana", "zakłócana", "zakłócona", "zaklopotana", "zakłuta", "zakneblowana", "zakodowana", "zakolczykowana", "zakolorowana", "zakołysana", "zakomunikowana", "zakończona", "zakonserwowana", "zakopana", "zakopywana", "zakorzeniana", "zakorzeniona", "zakoszona", "zakosztowana", "zakotwiczana", "zakotwiczona", "zakpiona", "zakradana", "zakręcana", "zakręcona", "zakreślana", "zakreślona", "zakrwawiona", "zakryta", "zakrywana", "zakrzyczana", "zakrzyknięta", "zakrzywiana", "zakrzywiona", "zaksięgowana", "zaktualizowana", "zaktywizowana", "zaktywowana", "zakumana", "zakupiona", "zakurzona", "zakuta", "zakuwana", "zakwaterowana", "zakwestionowaa", "zakwitnięta", "załączona", "załadowana", "załagodzona", "zalamana", "zalaminowana", "załamywana", "zalana", "załapana", "załatana", "załatwiana", "załatwiona", "zalatywana", "zalecana", "zalecona", "zaleczona", "zalegalizowana", "zalegana", "zalepiana", "zalepiona", "zalewana", "zaliczana", "zaliczona", "załkana", "zalogowana", "żałowana", "założona", "zaludniona", "zamacana", "zamachnięta", "zamącona", "zamalowana", "zamanewrowana", "zamanifestowana", "zamarkowana", "zamartwiana", "zamarynowana", "zamarzana", "zamarznięta", "zamaskowana", "zamawiana", "zamazana", "zamazywana", "zamęczana", "zamęczona", "zameldowana", "zamelinowana", "zamerykanizowana", "zamiatana", "zamieniana", "zamieniona", "zamieszana", "zamieszczana", "zamieszczona", "zamieszkana", "zamieszkiwana", "zaminowana", "zamknięta", "zamocowana", "zamoczona", "zamontowana", "zamordowana", "zamortyzowana", "zamotana", "zamówiona", "zamrażana", "zamroczona", "zamrożona", "zamulana", "zamurowana", "zamydlona", "zamykana", "zanalizowana", "zanegowana", "zaniechana", "zanieczyszczana", "zanieczyszczona", "zaniedbana", "zaniedbywana", "zaniepokojona", "zaniesiona", "zanihilowana", "zanikana", "zaniknięta", "zaniżana", "zaniżona", "zanoszona", "zanotowana", "zanucona", "zanudzana", "zanudzona", "zanurzana", "zanurzona", "zanużona", "zaobaczona", "zaobserwowana", "zaoferowana", "zaofiarowana", "zaogniana", "zaogniona", "zaokrąglana", "zaokrąglona", "zaokrętowana", "zaopatrywana", "zaopatrzona", "zaopiekowana", "zaorana", "zaostrzana", "zaostrzona", "zaoszczędzona", "zapadana", "zapakowana", "zapalana", "zapalona", "zapamiętana", "zapamiętywana", "zapanowana", "zaparkowana", "zaparowywana", "zaparzana", "zaparzona", "zapaskudzona", "zapauzowana", "zapchana", "zapędzana", "zapełniana", "zapełniona", "zaperfumowana", "zapeszana", "zapewniana", "zapewniona", "zapieczętowana", "zapierana", "zapięta", "zapijana", "zapinana", "zapisana", "zapisuwana", "zapita", "zapłacona", "zapładniana", "zaplamiona", "zaplanowana", "zaplątana", "zapłodniona", "zaplombowana", "zapobiegana", "zapodana", "zapodawana", "zapodziana", "zapokojona", "zapolowana", "zapominana", "zapomniana", "zapowiadana", "zapowiedziana", "zapoznana", "zapoznawana", "zapożyczona", "zapracowywana", "zaprana", "zaprasowywana", "zapraszana", "zaprawiona", "zaprenumerowana", "zaprezentowana", "Zaprogramowana", "zaprojektowana", "zaproponowana", "zaproszona", "zaprotokołowana", "zaprowadzana", "zaprowadzona", "zaprzątana", "zaprzeczana", "zaprzeczona", "zaprzedana", "zaprzedawana", "zaprzęgana", "zaprzepaszczana", "zaprzestana", "zaprzestawana", "zaprzyjaźniona", "zapudłowana", "zapunktowana", "zapuszczana", "zapuszczona", "zapuszkowana", "zapychana", "zapylana", "zapylona", "zapytana", "zarabiana", "zaranżowana", "zarażana", "zarażona", "zarecytowana", "zaręczana", "zaręczona", "zarejestrowana", "zareklamowana", "zarekomendowana", "zarekomondowana", "zarekwirowana", "zarezerwowana", "zarobiona", "żartowana", "zarwana", "zaryglowana", "zarymowana", "zarysowana", "zarywana", "zaryzykowana", "zarządzana", "zarżnięta", "zarzucana", "zarzynana", "zasadzona", "zaścielona", "zasegurowana", "zaserwowana", "zasiadana", "zasiana", "zasiedlona", "zasięgana", "zasięgnięta", "zasiewana", "zasilana", "zasilona", "zaskakiwana", "zaskarbiona", "zaskoczona", "zaskrobana", "zasłaniana", "zaślepiana", "zaślepiona", "zasłodzona", "zasłoniona", "zasłużona", "zasmakowana", "zaśmiecana", "zaśmiecona", "zasmradzana", "zasmrodzona", "zasmucana", "zasmucona", "zasolona", "zaspakajana", "zaśpiewana", "zaspokajana", "zaspokojona", "zasponsorowana", "zaśrubowywana", "zassana", "zastana", "zastąpiona", "zastawiana", "zastawiona", "zastępowana", "zastopowana", "zastosowana", "zastraszana", "zastraszona", "zastrzelona", "zasugerowana", "zasunięta", "zasuwana", "zaświadczona", "zaświecona", "zaświoniona", "zasyfiona", "zasygnalizowana", "zasymilowana", "zasymulowana", "zasypana", "zasypywana", "zasysana", "zaszachowana", "zaszantażowana", "zaszargana", "zaszczepiana", "zaszczepiona", "zaszczuta", "zaszczycana", "zaszczycona", "zaszeptana", "zaszeregowana", "zaszlachtowana", "zasznurowana", "zaszpachlowana", "zasztyletowana", "zaszufladkowana", "zaszyfrowana", "zaszyta", "zaszywana", "zataczana", "zatajana", "zatajona", "zatamowana", "zatankowana", "zatapiana", "zatargana", "zatarta", "zatelegrafowana", "zatemperowana", "zatęskniona", "zatkana", "zatknięta", "zatoczona", "zatonięta", "zatopiona", "zatracana", "zatracona", "zatriumfowana", "zatrudniana", "zatrudniona", "zatruta", "zatruwana", "zatrzaskiwana", "zatrzaśnięta", "zatrząśnięta", "zatrzymana", "zatrzymywana", "zatuszowana", "zatwierdzana", "zatwierdzona", "zatykana", "zatynkowana", "zatytułowana", "zauploadowana", "zauroczona", "zautomatyzowana", "zauważana", "zauważona", "zawadzana", "zawalana", "zawalczona", "zawalona", "zawarta", "zaważona", "zawdzięczana", "zawetowana", "zawężona", "zawiadamiana", "zawiadomiona", "zawiązana", "zawiązywana", "zawiedzona", "zawierana", "zawierzona", "zawieszana", "zawieszona", "zawieziona", "zawijana", "zawinięta", "zawiniona", "zawiśnięta", "zawitana", "zawładnięta", "zawłaszczona", "zawodzona", "zawojowana", "zawołana", "zawoskowana", "zawożona", "zawracana", "zawrócona", "zawstydzana", "zażądana", "zażartowana", "zazdroszczona", "zażegnana", "zażenowana", "zaznaczana", "zaznajomiona", "zaznana", "zaznawana", "zażyczona", "zażyta", "zażywana", "zbaczana", "zbadana", "zbagatelizowana", "zbajerowana", "zbałamucona", "zbalansowana", "zbalsamowana", "zbankrutowana", "zbawiana", "zbawiona", "zbesztana", "zbezczeszczona", "zbierana", "zbijana", "zbita", "zbliżona", "zbluzgana", "zbojkotowana", "zbrojona", "zbrukana", "zbszczecona", "zbudowana", "zbudzona", "zbuntowana", "zburzona", "zbyta", "zbywana", "zchwytana", "zcięta", "zciszona", "zdana", "zdarta", "zdeaktywowana", "zdecydowana", "zdefiniowana", "zdeflorowana", "zdegradowana", "zdejmowana", "zdeklarowana", "zdekodowana", "zdekompresowana", "zdekoncentrowana", "zdekonstruowana", "zdelegalizowana", "zdemaskowana", "zdementowana", "zdemolowana", "zdemontowana", "zdemoralizowana", "zdenerwowana", "zdeponowana", "zdeprymowana", "zdeptana", "zderzana", "zderzona", "zdestabilizowana", "Zdetonowana", "zdetronizowana", "zdewastowana", "zdewaulowana", "zdezerterowana", "zdezintegrowana", "zdezorientowana", "zdezynfektowana", "zdiagnozowana", "zdjęta", "zdławiona", "zdmuchiwana", "zdmuchnięta", "zdobyta", "zdobywana", "zdołowana", "zdominowana", "zdopingowana", "zdrabniana", "zdradzana", "zdradzona", "zdrapana", "zdrapywana", "zdrutowana", "zdruzgotana", "zduplikowana", "zduszona", "zdwojona", "zdyscyplinowana", "zdyskredytowana", "zdyskwalifikowana", "zdystansowana", "zdzielona", "zdzierana", "zdzierżona", "zdziesiątkowana", "Zdzwoniona", "zebrana", "zechciana", "zedytowana", "żegnana", "żeniona", "zepchnięta", "zepsuta", "żerowana", "zerwana", "zerżnięta", "zeskakiwana", "zeskanowana", "zeskrobywana", "zesłana", "ześlizgiwana", "ześlizgnięta", "zesmolona", "zespawiana", "zespolona", "zessana", "zestawiana", "zestawiona", "zestresowana", "zestrzeliwana", "zestrzelona", "zeswatana", "zeszklona", "zeszlifowana", "zetknięta", "zezłoszczona", "zeznana", "zeznawana", "zezwalana", "zezwolona", "zfinansowana", "zgadana", "zgadywana", "zgajana", "zganiona", "zgarnięta", "zgaśnięta", "zgaszona", "zgięta", "zginana", "zgładzona", "zgłaszana", "zgłębiana", "zgłębiona", "zgłośniona", "zgłoszona", "zgłuszona", "zgniatana", "zgnieciona", "zgnita", "zgnojona", "zgodzona", "zgolona", "zgoniona", "zgotowana", "zgrabiona", "zgrillowana", "zgromadzana", "zgromadzona", "zgrupowana", "zgrzeszona", "zgrzytana", "zgubiona", "zgwałcona", "zhackowana", "zhakowana", "zhańbiona", "zhandlowana", "zharmonizowana", "zidentyfikowana", "ziewana", "zignorowana", "zilustrowana", "zinfiltrowana", "zintegrowana", "zintensyfikowana", "zinterpretowana", "zinwentaryzowana", "zirytowana", "zjadana", "zjawiana", "zjednana", "zjednoczona", "zjedzona", "zjeżdżona", "zkontaktowana", "zkserowana", "złączona", "złagodzona", "złajana", "złamana", "zlana", "złapana", "zlecana", "zlecona", "zlekceważona", "zlepiana", "zlepiona", "zlewana", "zlicytowana", "zliczana", "zliczona", "zlikwidowana", "zlinczowana", "zlitowana", "zlizana", "zlizywana", "złoita", "zlokalizowana", "złomowana", "żłopana", "złowiona", "złożona", "złupiona", "złuszczana", "zluzowana", "zmacana", "zmącona", "zmagana", "zmagazynowana", "zmajstrowana", "zmaksylizowana", "zmanipulowana", "zmarnowana", "zmartwychwstana", "zmarznięta", "zmasakrowana", "zmaterializowana", "zmawiana", "zmazana", "zmazywana", "zmbobardowana", "zmiatana", "zmiażdżona", "zmiękczona", "zmielona", "zmieniana", "zmieniona", "zmierzana", "zmierzona", "zmierzwiona", "zmieszana", "zmieszczona", "zmiksowana", "zminiaturyzowana", "zminimalizowana", "zmniejszana", "zmniejszona", "zmobilizowana", "zmoczona", "zmodernizowana", "zmodyfikowana", "zmoknięta", "zmonopolizowana", "zmontowana", "zmostkowana", "zmotywowana", "zmówiona", "zmrożona", "zmrużona", "zmumifikowana", "zmuszana", "zmuszona", "zmutowana", "zmyślana", "zmyta", "zmywana", "znacjonalizowana", "znajdowana", "znajdywana", "znakowana", "znaleziona", "znana", "znęcana", "zneutralizowana", "zniechęcona", "znieczulona", "zniekształcana", "zniekształcona", "znienawidzona", "znieprawiona", "zniesiona", "zniesławiana", "zniesławiona", "zniewalana", "znieważana", "znieważona", "zniewolona", "zniszczona", "zniweczona", "zniwelowana", "zniżana", "zniżona", "znokautowana", "znormalniona", "znoszona", "znudzona", "zobaczona", "zobowiązana", "zobrazowana", "zogniskowana", "żonglowana", "zoomowana", "zoperowana", "zoptymalizowana", "zorbita", "zorganizowana", "zorientowana", "zostawiana", "zostawiona", "zpłacona", "zprowokowana", "zrabowana", "zrachowana", "zracjonalizowana", "zraniona", "zraportowana", "zrażana", "zrażona", "zrealizowana", "zrecenzowana", "zredagowana", "zredukowana", "zreferowana", "zreformowana", "zrefowana", "zrefundowana", "zregenerowana", "zrehabilitowana", "zreinkarnowana", "zreintegrowana", "zrekonfigurowana", "zrekonstruowana", "zrekrutowana", "zrekrystalizowana", "zrelacjonowana", "zrelaksowana", "zremiksowana", "zremisowana", "zreorganizowana", "zreperowana", "zreplikowana", "zresetowana", "zresocjalizowana", "zrestartowana", "zrestrukturyzowana", "zrewanżowana", "zrewidowana", "zrewolucjonizowana", "zrezygnowana", "zrobiona", "zrolowana", "zroszona", "zrównana", "zrównoważona", "zrównywana", "zróżnicowana", "zrozumiana", "zrugana", "zruinowana", "zrujnowana", "zrymowana", "zrywana", "zrzędzona", "zrzeszona", "zrzucana", "zrzucona", "zsumowana", "zsunięta", "zsuwana", "zsynchronizowana", "zsyntetyzowana", "zsypywana", "zszargana", "zszokowana", "zszyta", "zszywana", "ztarta", "żuta", "zutylizowana", "zużyta", "zużywana", "zwabiana", "zwabiona", "zwalana", "zwalczona", "zwalniana", "zwalona", "zwana", "zwaporyzowana", "zwątpiona", "zważana", "zważona", "zwędzona", "zwerbalizowana", "zwerbowana", "zweryfikowana", "zwęszona", "zwężona", "zwiastowana", "związana", "związywana", "zwichnięta", "zwiedzana", "zwiedzona", "zwiększona", "zwieńczona", "zwierzana", "zwieszana", "zwieszona", "zwietrzona", "zwijana", "zwilżona", "zwinięta", "zwizualizowana", "zwlekana", "zwodowana", "zwodzona", "zwołana", "zwolniona", "zwoływana", "zwożona", "zwracana", "zwrócona", "zwyciężana", "zwymiotowana", "życzona", "żygana", "zygzakowana", "zyskana", "zyskiwana", "żyta", "zżarta", "zżerana", "zżynana", "zżyta", "abdykowane", "absorbowane", "adaptowane", "administrowane", "adoptowane", "adorowane", "adresowane", "afiszowane", "agitowane", "akcentowane", "akceptowane", "aklimatyzowane", "akompaniowane", "aktualizowane", "aktywowane", "akumulowane", "alaromowane", "alienowane", "amerykanizowane", "amortyzowane", "amputowane", "analizowane", "angażowane", "anihilowane", "animowane", "anonsowane", "antropomorfizowane", "antydatowane", "anulowane", "apelowane", "aportowane", "aranżowane", "archiwizowane", "aresztowane", "argumentowane", "artykułowane", "ascendowane", "asekurowane", "asymilowane", "asystowane", "atakowane", "autoryzowane", "awanturowane", "babrane", "baczone", "badane", "bagatelizowane", "bajerowane", "bałamucone", "balangowane", "balansowane", "banalizowane", "bandażowane", "bankrutowane", "baraszkowane", "barwione", "bawione", "bazgrane", "bazowane", "bębnione", "bełkotane", "besztane", "biadolone", "biczowane", "bite", "błagane", "błaznowane", "blefowane", "błogosławione", "blokowane", "bluzgane", "błyskane", "błyszczące", "boczone", "bogacone", "bojkotowane", "boksowane", "bombardowane", "bopowane", "borowane", "brandzlowane", "brane", "brasowane", "bratane", "bredzone", "brnięte", "brodzone", "bronione", "brudzone", "brylowane", "budowane", "budzone", "bujane", "bulone", "bulwersowane", "bumelowane", "burzone", "butelkowane", "bywane", "cackane", "całowane", "capnięte", "cechowane", "celebrowane", "celowane", "cenione", "cenzurowane", "chciane", "chlane", "chlapane", "chlapnięte", "chlastane", "chłodzone", "chlostane", "chlubione", "chodowane", "chomikowane", "chorowane", "chowane", "chronione", "chrupane", "chrzczone", "chute", "chwalone", "chwycone", "chwytane", "chybotane", "chylone", "ciachnięte", "ciągane", "ciągnięte", "ciemiężone", "cierpiane", "cieszone", "cięte", "ciskane", "ciśnięte", "ciułane", "cmokane", "cmoknięte", "cofane", "cofnięte", "ćpane", "cucone", "cudzołożone", "cumowane", "ćwiartowane", "ćwiczone", "cykane", "cytowane", "czajone", "czarowane", "czczone", "czepiane", "czepione", "czerpane", "czesane", "częstowane", "czochrane", "czołgane", "czute", "czytane", "czyte", "darowane", "darte", "darzone", "datowane", "dawane", "dbane", "deaktywowane", "debatowane", "dedukowane", "dedykowane", "defibrylowane", "defilowane", "definiowane", "defraudowane", "degradowane", "degustowane", "deklamowane", "deklarowane", "dekodowane", "dekompresowane", "dekorowane", "dekretowane", "delegowane", "delektowane", "deliberowane", "demaskowane", "dementowane", "demolowane", "demonizowane", "demonstrowane", "demoralizowane", "denerwowane", "denuncjowane", "depeszowane", "depilowane", "deportowane", "deprawowane", "deptane", "deratyzowane", "destabilizowane", "destylowane", "desygnowane", "determinowane", "detonowane", "dewastowane", "dewaulowane", "dezaktywowane", "dezorientowane", "dezynfekowane", "diagnozowane", "dilowane", "dłubane", "dłużone", "dmuchane", "dmuchnięte", "dobiegane", "dobierane", "dobijane", "dobite", "dobrane", "dobudzone", "dobyte", "doceniane", "docenione", "dochodzone", "dochowane", "dochowywane", "dociągnięte", "dociekane", "docięte", "docinane", "dociskane", "dociśnięte", "doczekane", "doczepione", "doczołgane", "doczyszczone", "doczytane", "dodane", "dodawane", "dodrukowane", "dodrukowywane", "dofinansowane", "dofinansowywane", "dogadane", "dogadywane", "dogadzane", "doganiane", "doglądane", "doglądnięte", "dognane", "dogodzone", "dogonione", "dograne", "dogryzane", "dogryzione", "dogrzane", "dogrzebane", "doinformowane", "dojeżdżane", "dojone", "dojrzane", "dojrzewane", "dokańczane", "dokarmiane", "dokarmione", "dokazane", "dokazywane", "dokładane", "doklejone", "dokonane", "dokończone", "dokonywane", "dokopane", "dokopywane", "dokowane", "dokręcane", "dokręcone", "dokształcane", "dokształcone", "dokuczane", "dokumentowane", "dokupione", "dołączane", "dołączone", "doładowane", "dolane", "dolewane", "doliczone", "dołowane", "dołożone", "domagane", "domalowane", "domknięte", "domniewywane", "domówione", "domyślane", "domyślone", "domyte", "doniesione", "donoszone", "dopadane", "dopadnięte", "dopakowane", "dopalone", "dopasowane", "dopasowywane", "dopatrywane", "dopatrzone", "dopchane", "dopchnięte", "dopełniane", "dopełnione", "dopieszczone", "dopięte", "dopijane", "dopilnowane", "dopingowane", "dopisane", "dopisywane", "dopite", "dopłacane", "dopłacone", "dopłynięte", "dopolerowane", "dopompowane", "dopowiedziane", "dopracowane", "dopracowywane", "doprane", "doprawione", "doprecyzowane", "doproszone", "doprowadzane", "doprowadzone", "dopucowane", "dopuszczane", "dopuszczone", "dopytywane", "dorabiane", "doradzane", "doradzone", "doręczane", "doręczone", "dorobione", "dorównane", "dorównywane", "dorwane", "dorysowane", "dorzucane", "dorzucone", "doścignięte", "dosiadane", "dosięgnięte", "doskoczone", "doskonalone", "dosładzane", "dosłane", "dosłyszane", "dosolone", "dośrodkowane", "dossane", "dostane", "dostąpione", "dostarczane", "dostarczone", "dostawane", "dostawiane", "dostawione", "dostosowane", "dostosowywane", "dostrajane", "dostrojone", "dostrzegane", "dosunięte", "dosuwane", "doświadczane", "Doświetlone", "dosypane", "dosypywane", "doszkolone", "doszlifowane", "doszorowane", "doszukane", "doszukiwane", "doszyte", "dotankowane", "dotankowywane", "dotargane", "dotaszczone", "dotknięte", "dotlenione", "dotłumaczone", "dotowane", "dotrwane", "dotrzymane", "dotrzymywane", "dotykane", "douczane", "douczone", "dowalone", "dowiezione", "dowodzone", "dowożone", "doznane", "doznawane", "dozorowane", "dozowane", "dożyte", "dożywione", "dramatyzowane", "drapane", "drapnięte", "draśnięte", "drażnione", "drążone", "dręczone", "drenowane", "drgane", "drgnięte", "drukowane", "dryblowane", "dryfowane", "drzemane", "dubbingowane", "dublowane", "duplikowane", "duszone", "dworowane", "dygotane", "dyktowane", "dymane", "dymione", "dyrygowane", "dyscyplinowane", "dyskredytowane", "dyskryminowane", "dyskutowane", "dyskwalifikowane", "dysponowane", "dystansowane", "dystrybuowane", "dywagowane", "dźgane", "dźgnięte", "dziabnięte", "dziedziczone", "dziękowane", "dzielone", "dziergane", "dzierżone", "dziobane", "dziurawione", "dziurkowane", "dźwigane", "dźwignięte", "edukowane", "edytowane", "egzaminowane", "egzekutowane", "egzekwowane", "ekscytowane", "ekshumowane", "ekskomunikowane", "eksmitowane", "ekspandowane", "eksperymentowane", "eksploatowane", "eksplorowane", "eksponowane", "eksportowane", "eksterminowane", "ekstradowane", "ekstrapolowane", "eliminowane", "emancypowane", "emanowae", "emigrowane", "emitowane", "energetyzowane", "eskortowane", "etykietowane", "ewakuowane", "ewaluowane", "fabrykowane", "falowane", "fałszowane", "farbowane", "faszerowane", "faulowane", "faworyzowane", "fechtowane", "fermentowane", "ferowane", "figurowane", "filetowane", "filmowane", "filtrowane", "finalizowane", "finansowane", "firmowane", "fleszowane", "folgowane", "formułowane", "forsowane", "fotografowane", "fundowane", "gadane", "ganiane", "garbione", "gardzone", "garnirowane", "gaszone", "gawędzone", "gaworzone", "gazowane", "gdakane", "gderane", "generalizowane", "generowane", "gięte", "gilgotane", "gładzone", "głaskane", "głodowane", "głodzone", "gloryfikowane", "głosowane", "głoszone", "głowione", "gmatwane", "gmerane", "gnane", "gnębione", "gniecione", "gnite", "gnojone", "godzone", "gojone", "golnięte", "golone", "gonione", "googlowane", "gospodarowane", "goszczone", "gotowane", "grabione", "grane", "grasowane", "gratulowane", "grillowane", "grilowane", "gromadzone", "gromione", "grożone", "gruchane", "gruchnięte", "grupowane", "grywane", "gryzione", "grzane", "grzechotane", "gubione", "gustowane", "gwałcone", "gwarantowane", "gwizdane", "gwizdnięte", "hackowane", "haftowane", "hajtnięte", "hamowane", "hańbione", "handlowane", "harcowane", "harmonizowane", "harowane", "hartowane", "hibernowane", "hipnotyzowane", "hodowane", "holowane", "hołubione", "honorowane", "hospitalizowane", "huknięte", "hulane", "huśtane", "idealizowane", "identyfikowane", "ignorowane", "igrane", "ilustrowane", "imitowane", "implantowane", "implodowane", "imponowane", "importowane", "improwizowane", "indokrynowane", "indukowane", "infekowane", "infiltrowane", "informowane", "ingerowane", "inhalowane", "inscenizowane", "inspirowane", "instalowane", "instruowane", "insynuowane", "integrowane", "interpretowane", "interweniowane", "intonowane", "intubowane", "inwestowane", "inwigilowane", "irytowane", "iskrzone", "izolowane", "jadane", "jawione", "jazgotane", "jednoczone", "jedzone", "kablowane", "kadzone", "kalane", "kaleczone", "kalkulowane", "kamerowane", "kamienowane", "kamuflowane", "kanalizowane", "kantowante", "kąpane", "kapitulowane", "kapowane", "karane", "karbonizowane", "karcone", "karczowane", "karmione", "kartkowane", "kąsane", "kasowane", "kastrowane", "katalogowane", "katapultowane", "katowane", "katrupione", "kierowane", "kimane", "kiszone", "kiwane", "kiwnięte", "kłaniane", "klapane", "klapnięte", "klarowane", "klasyfikowane", "klębione", "klejone", "klepane", "klepnięte", "klikane", "kliknięte", "klonowane", "kłopotane", "kłute", "knocone", "knute", "kochane", "koczowane", "kodowane", "kojarzone", "kojfnięte", "kojone", "kolekcjonowane", "kolektywizowane", "kolidowane", "kolonizowane", "kolorowane", "koloryzowane", "kołowane", "kołysane", "kombinowane", "komenderowane", "komentowane", "komercjalizowane", "kompensowane", "komplementowane", "komplikowane", "komponowane", "kompromitowane", "komunikowane", "konane", "koncentrowane", "kończone", "konfabulowane", "konfiskowane", "konfrontowane", "konserwowane", "konspirowane", "konstruowane", "konsultowane", "konsumowane", "kontaktowane", "kontestowane", "kontrastowane", "kontrolowane", "kontrowane", "kontynuowane", "kontynuuowane", "konwertowane", "konwojowane", "koordynowane", "kopane", "kopcone", "kopiowane", "kopnięte", "kopulowane", "korelowane", "korkowane", "koronowane", "korygowane", "korzone", "korzystane", "koszone", "kotwiczone", "kozaczone", "kozłowane", "kpite", "kradzione", "krajane", "krążone", "kręcone", "kremowane", "kreowane", "krochmalone", "krojone", "kropione", "kruszone", "krystalizowane", "kryte", "krytykowane", "krzepnięte", "krzyczane", "krzyknięte", "krzywdzone", "krzywione", "krzyżowane", "kserowane", "księgowane", "kształcone", "kształtowane", "kulone", "kultywowane", "kumulowane", "kupczone", "kupione", "kupowane", "kupywane", "kurczone", "kurowane", "kursowane", "kurzone", "kuszone", "kute", "kwalifikowane", "kwestionowane", "łączone", "ładowane", "łagodzone", "łajdaczone", "lakierowane", "łamane", "lamentowane", "lansowane", "lane", "łapane", "łaskotane", "łaszone", "latane", "łatane", "lawirowane", "leczone", "legalizowane", "legitymowane", "lekceważone", "lepione", "lewitowane", "liberowane", "licencjonowane", "licytowane", "liczone", "likwidowane", "linczowane", "liniowane", "literowane", "litowane", "lizane", "liznięte", "lobbowane", "lokalizowane", "losowane", "łowione", "łożone", "lubiane", "łudzone", "lunatykowane", "łupane", "łupione", "łuskane", "lustrowane", "łuszczone", "luzowane", "łykane", "łyknięte", "łyżeczkowane", "macane", "machane", "machnięte", "mącone", "maczane", "maganyzowane", "maglowane", "majaczone", "majsterkowane", "majtane", "maksymalizowane", "malowane", "maltretowane", "mamione", "mamrotane", "manewrowane", "manifestowane", "manipulowane", "markowane", "marnotrawione", "marnowane", "marszczone", "marynowane", "marznięte", "masakrowane", "maskowane", "masowane", "masturbowane", "mataczone", "materializowane", "mawiane", "mazane", "maznięte", "męczone", "meldowane", "merdane", "metabolizowane", "miażdżone", "mielone", "mierzone", "mierzwione", "mieszane", "miętolone", "migane", "migdalone", "migotane", "mijane", "miksowane", "milowane", "minięte", "minimalizowane", "miotane", "mistyfikowane", "mitygowane", "mizdrzone", "mlane", "mniemane", "mnożone", "mobilizowane", "mocowane", "moczone", "modelowane", "modernizowane", "modlone", "modulowane", "modyfikowane", "molestowane", "monitorowane", "monopolizowane", "montowane", "mordowane", "motywowane", "mówione", "mrożone", "mrugane", "mrużone", "muskane", "mutowane", "mydlone", "mylone", "myszkowane", "myte", "nabazgrane", "nabiegane", "nabierane", "nabite", "nabrane", "nabrojone", "nabrudzone", "nabyte", "nabywane", "nacelowane", "nachapane", "nachodzone", "nachwalone", "nachylone", "naciągane", "naciągnięte", "nacierane", "nacięte", "nacinane", "naciskane", "naciśnięte", "nacjonalizowane", "naczepione", "nadane", "nadawane", "nadchodzone", "nadciągane", "nadciągnięte", "nadcięte", "nadesłane", "nadgonione", "nadgryzane", "nadgryzione", "nadinterpretowane", "nadłożone", "nadmieniane", "nadmienione", "nadmuchane", "nadrabiane", "nadrobione", "nadskakiwane", "nadsłuchiwane", "nadstawiane", "nadstawione", "nadszarpnięte", "naduszone", "nadużyte", "nadużywane", "nadwerężane", "nadwyrężane", "nadwyrężone", "nadziane", "nadzorowane", "naelektryzowane", "nafaszerowane", "nagabywane", "nagadane", "nagięte", "naginane", "nagłaszane", "nagłośnione", "nagonione", "nagradzane", "nagrane", "nagrodzone", "nagromadzone", "nagrywane", "nagryzmolone", "nagrzane", "nagrzebane", "nagrzewane", "nagwizdane", "naigrywane", "najechane", "najęte", "najmowane", "nakarmiane", "nakarmione", "nakazane", "nakazywane", "nakierowane", "nakierowywane", "nakładane", "nakłamane", "nakłaniane", "naklejane", "naklejone", "naklepane", "nakłonione", "nakłute", "nakłuwane", "nakopane", "nakręcane", "nakręcone", "nakreślane", "nakreślone", "nakruszone", "nakryte", "nakrywane", "nakrzyczane", "nakupione", "naładowane", "nalane", "nałapane", "nalepione", "nalewane", "naliczone", "nałowione", "nałożone", "namaczane", "namagnetyzowane", "namalowane", "namaszczane", "namaszczone", "namawiane", "namęczone", "namierzane", "namieszane", "namoczone", "namówione", "namydlane", "namyślone", "naniesione", "naoliwiane", "naoliwione", "naopowiadane", "naostrzone", "napadane", "napadnięte", "napakowane", "napalone", "naparzane", "napastowane", "napawane", "napchane", "napędzane", "napełniane", "napełnione", "napierane", "napiętnowane", "napięte", "napinane", "napisane", "naplute", "napływane", "napoczęte", "napojone", "napompowane", "napotkane", "napotykane", "napraszane", "naprawiane", "naprawione", "naprężane", "naprężone", "napromieniowane", "naprostowane", "naprowadzane", "naprowadzone", "napsute", "napuszczane", "napuszczone", "napychane", "napytane", "narąbane", "naradzane", "naradzone", "narastane", "narażane", "narażone", "nareperowane", "narkotyzowane", "narodzone", "naruszane", "naruszone", "narwane", "narysowane", "narzucane", "narzucone", "nasączane", "nasączone", "nasadzone", "nasiąkane", "nasilane", "nasilone", "naskakiwane", "naskoczone", "naskrobane", "naśladowane", "nasłane", "nasłuchane", "nasłuchiwane", "nasmarowane", "nastąpione", "nastawiane", "nastawione", "nastraszane", "nastrojone", "nastukane", "nasunięte", "nasuwane", "naświetlane", "nasycone", "nasyłane", "nasypane", "naszczane", "naszkicowane", "naszpikowane", "naszprycowane", "naszykowane", "naszyte", "naszywane", "natarte", "natchnięte", "natknięte", "natlenione", "natłuszczone", "natrafione", "natrząsane", "natrząsnięte", "nauczane", "nauczone", "nawadniane", "nawalone", "nawiązane", "nawiązywane", "nawiedzane", "nawiedzone", "nawiercone", "nawiewane", "nawiezione", "nawigowane", "nawijane", "nawilżane", "nawilżone", "nawinięte", "nawlekane", "nawodnione", "nawoływane", "nawoskowane", "nawożone", "nawpychane", "nawracane", "nawrócone", "nawrzucane", "nawtykane", "nawymyślane", "nazbierane", "nazmyślane", "naznaczane", "naznaczone", "nazrywane", "nazwane", "nazywane", "nęcone", "negocjowane", "negowane", "nękane", "neutralizowane", "niańczone", "niecierpliwione", "niedoceniane", "niedowidziane", "nienawidzone", "niesione", "nikolone", "niszczone", "nitkowane", "niuchane", "niweczone", "niwelowane", "nokautowane", "nominowane", "notowane", "nucone", "numerowane", "nurtowane", "obaczone", "obadane", "obalane", "obalone", "obandażowane", "obarczane", "obarczone", "obawiane", "obchodzone", "obciągnięte", "obciążone", "obcięte", "obcinane", "obcyndalane", "obczajane", "obczajone", "obdarowane", "obdarte", "obdarzane", "obdarzone", "obdzielone", "obdzierane", "obdzwaniane", "obdzwonione", "obejmowane", "oberwane", "obessane", "obezwładniane", "obezwładnione", "obfotografowane", "obfotografowywane", "obgadane", "obgadywane", "obgryzane", "obgryzione", "obiecane", "obiecywane", "obierane", "obijane", "obite", "objadane", "objaśniane", "objawiane", "objawione", "objechane", "objęte", "objeżdżane", "obkręcane", "oblane", "obłapiane", "obłapywane", "obłaskawiane", "obłaskawione", "obleciane", "oblegane", "oblewane", "obliczane", "obliczone", "oblizane", "obłowione", "obłożone", "obluzowane", "obluzowywane", "obmacane", "obmacywane", "obmawiane", "obmyślane", "obmyślone", "obmyte", "obmywane", "obnażane", "obniżane", "obniżone", "obnoszone", "obowiązywane", "obozowane", "obrabiane", "obrabowane", "obracane", "obradowane", "obramowane", "obraniane", "obrane", "obrastane", "obrażane", "obrażone", "obrobione", "obrócone", "obrodzone", "obronione", "obrysowane", "obrywane", "obryzgane", "obrzezane", "obrzucane", "obrzucone", "obrzygane", "obsadzane", "obsadzone", "obściskiwane", "obserwowane", "obsiane", "obsikane", "obsikiwane", "obskakiwane", "obskoczone", "obskubane", "obskubywane", "obśliniane", "obślinione", "obsługiwane", "obsłużone", "obsmarowane", "obstawiane", "obstawione", "obstrzeliwane", "obsunięte", "obsuwane", "obsypane", "obsypywane", "obszukane", "obszukiwane", "obtaczane", "obtarte", "obtoczone", "obudzone", "obwąchane", "obwąchiwane", "obwiązane", "obwiązywane", "obwieszane", "obwieszczane", "obwieszczone", "obwieszone", "obwijane", "obwiniane", "obwinięte", "obwołane", "obyte", "obżerane", "ocalane", "ocalone", "ocechowane", "oceniane", "ocenione", "ocenzurowane", "ochładzane", "ochlapane", "ochlapywane", "ochłodzone", "ochłonięte", "ochraniane", "ochronione", "ochrzaniane", "ochrzczone", "ociągane", "ocielone", "ocieplane", "ocieplone", "ocierane", "ocknięte", "ocucone", "ocute", "oczarowywane", "oczekiwane", "oczerniane", "oczernione", "oczyszczane", "oczyszczone", "odarte", "odbębnione", "odbetonowane", "odbezpieczane", "odbezpieczone", "odbijane", "odbite", "odblokowane", "odbudowane", "odbudowywane", "odbutowane", "odbyte", "odcedzane", "odchorowane", "odchowane", "odchudzane", "odchudzone", "odchylane", "odchylone", "odciągane", "odciągnięte", "odciążone", "odcierpione", "odcięte", "odcinane", "odcisnięte", "odcumowane", "odcyfrowane", "odcyfrowywane", "odczarowane", "odczekane", "odczepiane", "odczepione", "odczute", "odczuwane", "odczynione", "odczytane", "odczytywane", "oddalane", "oddane", "oddawane", "oddelegowane", "oddychane", "oddzielane", "oddzielone", "odebrane", "odegnane", "odegrane", "odejmowane", "odepchnięte", "oderwane", "odeskortowane", "odesłane", "odespane", "odessane", "odetkane", "odetnięte", "odezwane", "odfiltrowane", "odgadnięte", "odgadywane", "odganiane", "odgarniane", "odgarnięte", "odgięte", "odgniatane", "odgonione", "odgradzane", "odgrażane", "odgrodzone", "odgruzowane", "odgrywane", "odgryzane", "odgryzione", "odgrzane", "odgrzebane", "odgrzebywane", "odgrzewane", "odgwizdane", "odhaczone", "odholowane", "odinstalowane", "odizolowane", "odjedzone", "odjęte", "odjonizowane", "odkażane", "odkażone", "odkładane", "odklejone", "odkochane", "odkodowane", "odkodowywane", "odkopane", "odkopywane", "odkorkowane", "odkręcane", "odkręcone", "odkrojone", "odkryte", "odkrywane", "odkupione", "odkupywane", "odkurzane", "odkurzone", "odkute", "odłączane", "odłączone", "odłamywane", "odlane", "odlatywane", "odlepiane", "odlewane", "odliczane", "odliczone", "odłożone", "odłupane", "odmachane", "odmachiwane", "odmalowane", "odmarszczone", "odmawiane", "odmeldowane", "odmieniane", "odmienione", "odmierzane", "odmierzone", "odmieszane", "odmontowane", "odmówione", "odmrażane", "odmrożone", "odnajdowane", "odnalezione", "odnawiane", "odniesione", "odnoszone", "odnotowane", "odnotowywane", "odnowione", "odpakowane", "odpakowywane", "odpalane", "odpalone", "odpałzowane", "odparowane", "odparte", "odpędzane", "odpicowane", "odpieczętowane", "odpierane", "odpięte", "odpiłowane", "odpiłowywane", "odpinane", "odpisane", "odpisywane", "odpłacane", "odplamione", "odplątane", "odpłynięte", "odpowietrzone", "odpracowane", "odpracowywane", "odprasowane", "odprawiane", "odprawione", "odprężane", "odprostowane", "odprowadzane", "odprowadzone", "odprute", "odpryskane", "odpukane", "odpukiwane", "odpuszczane", "odpuszczone", "odpychane", "odrąbane", "odrabiane", "odrąbywane", "odradzane", "odradzone", "odrapane", "odrastane", "odratowane", "odreagowane", "odremontowane", "odrestaurowane", "odrestaurowywane", "odrobaczane", "odrobione", "odroczone", "odrodzone", "odrośnięte", "odróżniane", "odróżnione", "odrysowane", "odrywane", "odrzucane", "odrzucone", "odsączane", "odsączone", "odsadzone", "odseparowane", "odsiadywane", "odsiane", "odsiewane", "odsłaniane", "odsłonięte", "odsłuchane", "odsłuchiwane", "odsłużone", "odśnieżane", "odśnieżone", "odsolone", "odśpiewane", "odsprzedane", "odsprzedawane", "odstąpione", "odstawiane", "odstawione", "odstępowane", "odstraszane", "odstręczone", "odstresowane", "odstrzeliwane", "odstrzelone", "odsunięte", "odsuwane", "odświeżane", "odświeżone", "odsyłane", "odsypywane", "odsysane", "odszczekane", "odszczekiwane", "odsztafirowane", "odszukane", "odszyfrowane", "odszyfrowywane", "odszykowane", "odtrąbione", "odtrącone", "odtrute", "odtwarzane", "odtworzone", "oduczone", "odurzone", "odwalane", "odwalone", "odwiązane", "odwiązywane", "odwiedzane", "odwiedzone", "odwieszone", "odwiezione", "odwijane", "odwinięte", "odwlekane", "odwodnione", "odwodzone", "odwołane", "odwoływane", "odwożone", "odwracane", "odwrócone", "odwzajemnione", "odwzorowane", "odżegnane", "odziane", "odziedziczone", "odznaczane", "odznaczone", "odzwieciedlone", "odzwierciedlane", "odzwonione", "odzwyczajone", "odzyskane", "odzyskiwane", "odżyte", "odzywiane", "odżywione", "oferowane", "ofiarowane", "ofiarowywane", "ogarniane", "ogarnięte", "oglądane", "ogłaszane", "ogłoszone", "ogłupiane", "ogłupione", "ogłuszone", "ogołocone", "ogolone", "ograbiane", "ograbione", "ograniczane", "ograniczone", "ograne", "ogrodzone", "ogryzione", "ogrzane", "ogrzewane", "okablowane", "okaleczone", "okantowane", "okąpane", "okazane", "okazywane", "okiełznane", "okładane", "okłamane", "okłamywane", "oklaskiwane", "oklejone", "oklepane", "okopane", "okopywane", "okpione", "okradane", "okradzione", "okraszone", "okrążane", "okrążone", "okręcane", "okręcone", "określane", "określone", "okrojone", "okryte", "okrywane", "okrzyknięte", "okulawione", "okupione", "okupowane", "olane", "olewane", "olśnięte", "omamione", "omawiane", "omdlewane", "omijane", "ominięte", "omotane", "omówione", "onanizowane", "onieśmielane", "onieśmielone", "opadnięte", "opakowane", "opalane", "opalone", "opancerzone", "opanowane", "opanowywane", "oparte", "oparzone", "opasane", "opatentowane", "opatrywane", "opatrzone", "opatulone", "opchnięte", "opędzane", "opędzone", "operowane", "opętane", "opętywane", "opieczętowane", "opiekowane", "opierane", "opijane", "opisane", "opisywane", "opite", "opłacane", "opłacone", "opłakane", "opłakiwane", "opłukane", "oplute", "opluwane", "opływane", "opodatkowane", "opodatkowywane", "oponowane", "oporządzane", "oporządzone", "opowiadane", "opowiedziane", "opóźniane", "opóźnione", "opracowane", "opracowywane", "oprawiane", "oprawione", "oprowadzane", "oprowadzone", "opróżniane", "opróżnione", "opryskane", "opryskiwane", "opublikowane", "opukane", "opuszczane", "opuszczone", "opychane", "opylone", "orane", "orbowane", "organizowane", "orientowane", "oroszone", "orzekane", "orżnięte", "osaczane", "osaczone", "osadzane", "osądzane", "osadzone", "osądzone", "oscylowane", "osiadane", "osiągane", "osiągnięte", "osiedlane", "osiedlone", "osiedzone", "osierocone", "osiodłane", "oskalpowane", "oskarżone", "oskrobane", "oskrzydlane", "oskrzydlone", "oskubane", "oskubywane", "osłabiane", "osłabione", "oślepiane", "oślepione", "oślepnięte", "ośliniane", "osłodzone", "osłonione", "osłuchane", "osmalone", "ośmielone", "ośmieszane", "ośmieszone", "ostrzegane", "ostrzelane", "ostrzelite", "ostrzone", "ostudzone", "osunięte", "osuszane", "osuszone", "osuwane", "oswajane", "oświadczane", "oświadczone", "oświecane", "oświecione", "oświetlane", "oświetlone", "oswobadzane", "oswobodzone", "oswojone", "oszacowane", "oszałamiane", "oszczane", "oszczędzane", "oszczędzone", "oszklone", "oszlifowane", "oszołomione", "oszpecone", "oszukane", "oszukiwane", "oszwabione", "otaczane", "otarte", "otoczone", "otrute", "otruwane", "otrząsane", "otrząśnięte", "otrzepane", "otrzeźwione", "otrzymane", "otrzymywane", "otulone", "otumanione", "otwierane", "otworzone", "otwarte", "owane", "owdowione", "owiane", "owijane", "owinięte", "ozdabiane", "ozdobione", "ozdrowione", "ożenione", "oznaczane", "oznaczone", "oznajmiane", "oznajmione", "oznakowane", "ożyte", "ożywane", "ożywiane", "ożywione", "pachnące", "pacnąte", "pakowane", "paktowane", "pałane", "pałaszowane", "palnięte", "palone", "pamiętane", "panoszone", "paprane", "parafrazowane", "paraliżowane", "parkowane", "parowane", "partaczone", "parte", "parzone", "pastowane", "paszone", "patrolowane", "patroszone", "patrzone", "pauzowane", "pchane", "pchnięte", "pdholowane", "pedałowane", "pękane", "pęknięte", "pełnione", "penetrowane", "perforowane", "perfumowane", "perswadowane", "piastowane", "pichcone", "pielęgnowane", "pielone", "pienione", "pieszczone", "piętnowane", "pięte", "pijane", "pikietowane", "piknikowane", "pikowane", "pilnowane", "pilotowane", "piłowane", "pisane", "pisywane", "pite", "płacone", "plądrowane", "plamione", "planowane", "płaszczone", "plątane", "płatane", "pławione", "plewione", "płonące", "płoszone", "plotkowane", "plugawione", "płukane", "pluskane", "plute", "pobaraszkowane", "pobierane", "pobite", "pobłażane", "pobłogosławione", "pobrane", "pobrudzone", "pobudzane", "pobudzone", "pobujane", "pocałowane", "pocerowane", "pochłaniane", "pochlapane", "pochlebiane", "pochłonięte", "pochowane", "pochwalane", "pochwalone", "pochwycone", "pochylane", "pochylone", "pociachane", "pociągane", "pociągnięte", "pocierane", "pocieszane", "pocieszone", "pocięte", "pocone", "pocukrowane", "poćwiartowane", "poczesane", "poczęstowane", "poczęte", "poczochrane", "poczute", "poczytane", "poczytywane", "podane", "podarowane", "podarte", "podawane", "podążone", "podbierane", "podbijane", "podbite", "podbudowane", "podbudowywane", "podburzane", "podburzone", "podchwycone", "podciągane", "podciągnięte", "podcierane", "podcięte", "podcinane", "podczepione", "poddane", "poddawane", "podebrane", "podejmowane", "podejrzane", "podejrzewane", "podelektowane", "podeptane", "poderwane", "podesłane", "podglądane", "podgolone", "podgonione", "podgryzane", "podgrzane", "podgrzewane", "podjadane", "podjedzone", "podjęte", "podkablowane", "podkarmione", "podkładane", "podklejone", "podkolorowane", "podkołowane", "podkopane", "podkopywane", "podkradane", "podkradnięte", "podkręcane", "podkręcone", "podkreślane", "podkreślone", "podkształcone", "podkulone", "podkupione", "podkurzone", "podkute", "podłączane", "podłączone", "podładowane", "podłamane", "podlane", "podłapane", "podleczone", "podlegane", "podlewane", "podliczane", "podliczone", "podlizane", "podlizywane", "podłożone", "podmalowane", "podmieniane", "podmienione", "podmuchane", "podmyte", "podnajęte", "podniecane", "podniecone", "podniesione", "podnoszone", "podołane", "podopingowane", "podostrzone", "podotykane", "podpadnięte", "podpalane", "podpalone", "podparte", "podpatrywane", "podpatrzone", "podpieczętowane", "podpiekane", "podpierane", "podpięte", "podpiłowane", "podpinane", "podpisane", "podpisywane", "podpłacone", "podpłynięte", "podpompowane", "podporządkowane", "podporządkowywane", "podpowiadane", "podpowiedziane", "podprowadzane", "podpuszczane", "podpuszczone", "podpychane", "podpytane", "podrabiane", "podrapane", "podrasowane", "podratowane", "podrażnione", "podręczone", "podregulowane", "podreperowane", "podretuszowane", "podrobione", "podroczone", "podróżowane", "podrygiwane", "podrywane", "podrzucane", "podrzucone", "podrzynane", "podsadzone", "podskubywane", "podsłuchane", "podsłuchiwane", "podsmażane", "podsmażone", "podśpiewywane", "podstawiane", "podstawione", "podstemplowane", "podstrojone", "podsumowane", "podsumowywane", "podsunięte", "podsuwane", "podświetlane", "podsycane", "podsycone", "podsyłane", "podsypane", "podszczypywane", "podszkolone", "podszlifowane", "podszykowane", "podszyte", "podszywane", "podtapiane", "podtarte", "podtopione", "podtrzymane", "podtrzymywane", "podtuczone", "poduczane", "podupadane", "poduszone", "podwajane", "podwalane", "podważane", "podwędzone", "podwiązane", "podwieszane", "podwiezione", "podwijane", "podwinięte", "podwojone", "podwożone", "podwyżane", "podwyższane", "podwyższone", "podyktowane", "podyskutowane", "podziabane", "podziałane", "podziałkowane", "podziękowane", "podzielone", "podziurawione", "podziwiane", "podźwignięte", "poeksperymentowane", "pofarbowane", "pofatygowane", "pofilmowane", "poganiane", "pogardzane", "pogardzone", "pogarszane", "pogaszone", "pogładzone", "pogłaskane", "pogłębiane", "pogłębione", "pogłośnione", "pogmatwane", "pognębione", "pogniecione", "pogodzone", "pogonione", "pogorszone", "pogotowane", "pograbione", "pogrążane", "pogrążone", "pogrożone", "pogrubiane", "pogrubione", "pogruchane", "pogruchotane", "pogrupowane", "pogrywane", "pogryzane", "pogryzione", "pogrzane", "pogrzebane", "pogubione", "pogwałcane", "pohamowane", "pohandlowane", "poharatowane", "pohuśtane", "poinformowane", "poinstruowane", "pojednane", "pojęte", "pojmięte", "pojmowane", "pojone", "pokajane", "pokaleczone", "pokarane", "pokarmione", "pokąsane", "pokatalogowane", "pokazane", "pokazywane", "pokiereszowane", "pokierowane", "pokiwane", "pokładane", "poklepane", "poklepywane", "pokłonione", "pokłute", "pokochane", "pokolorowane", "pokoloryzowane", "pokołysane", "pokombinowane", "pokomplikowane", "pokonane", "pokończone", "pokonywane", "pokopane", "pokrajane", "pokrążone", "pokręcone", "pokrojone", "pokruszone", "pokryte", "pokrywane", "pokrzepiane", "pokrzepione", "pokrzyżowane", "pokuszone", "pokutowane", "połączone", "polakierowane", "połamane", "polane", "połapane", "połaskotane", "połatane", "polecane", "połechtane", "polecone", "poleczone", "polegane", "polemizowane", "polepszane", "polepszone", "polerowane", "polewane", "policzkowane", "policzone", "polimeryzowane", "polizane", "połknięte", "polowane", "połowione", "położone", "polubione", "poluźnione", "poluzowane", "połykane", "pomacane", "pomachane", "pomagane", "pomalowane", "pomarynowane", "pomasowane", "pomazane", "pomęczone", "pomiatane", "pomieszane", "pomieszczone", "pomijane", "pominięte", "pomiziane", "pomknięte", "pomnażane", "pomniejszane", "pomniejszone", "pomnożone", "pomoczone", "pompowane", "pomydlone", "pomylone", "pomyszkowane", "pomywane", "ponabijane", "ponaciskane", "ponadziewane", "ponaglane", "ponaglone", "ponagrywane", "ponaklejane", "ponakłuwane", "ponakrywane", "ponaprawiane", "ponawiane", "poniańczone", "poniechane", "ponieiwerane", "poniesione", "poniszczone", "poniżane", "poniżone", "ponoszone", "ponowione", "ponudzone", "poobcinane", "poobcowane", "poobczajane", "poobijane", "poobmacywane", "poobracane", "poobserwowane", "poodbijane", "poodcinane", "poodgryzane", "poodkurzane", "poodprawiane", "poodsuwane", "poodwalane", "pooglądane", "poograniczane", "poopalane", "poopiekane", "poopwiadane", "pootwierane", "popadane", "popakowane", "popalone", "poparte", "poparzone", "popchane", "popchnięte", "popędzane", "popędzone", "popękane", "popełniane", "popełnione", "poperfumowane", "popierane", "popieszczone", "popijane", "popilnowane", "popisane", "popite", "popłacone", "popłakiwane", "poplamione", "poplątane", "popluskane", "popodcinane", "popodziwiane", "popoprawiane", "poprane", "poprasowane", "poprawiane", "poprawione", "poproszone", "poprowadzone", "popryskane", "poprzebierane", "poprzeciągane", "poprzecinane", "poprzedzane", "poprzeglądane", "poprzeklinane", "poprzekopywane", "poprzemieszczane", "poprzenoszone", "poprzesadzane", "poprześladowane", "poprzestawiane", "poprzesuwane", "poprzewieszane", "poprzewracane", "poprzycinane", "poprzymierzane", "poprzytulane", "poprzywiązywane", "popsute", "popudrowane", "popukane", "popularyzowane", "popuszczane", "popuszczone", "popychane", "popykane", "popytane", "porabiane", "porachowane", "poranione", "poratowane", "porażone", "poręczone", "porównane", "porozbierane", "porozbijane", "porozciągane", "porozcinane", "porozdawane", "porozdzielane", "porozmieszczane", "poróżnione", "porozpędzane", "porozpieszczane", "porozprowadzane", "porozpruwane", "porozrzucane", "porozstawiane", "porozsyłane", "porozumiewane", "porozwalane", "porozwiązywane", "porozwieszane", "porozwożone", "portretowane", "poruszane", "poruszone", "porwane", "porysowane", "porywane", "porządkowane", "porządzone", "porzucane", "porzucone", "posądzane", "posadzone", "posądzone", "pościągane", "pościelone", "pościerane", "pościgane", "pościnane", "pościskane", "posegregowane", "posiadane", "posiane", "posiekane", "posilane", "posiłkowane", "posilone", "posiłowane", "posiniaczone", "posiorbane", "poskąpione", "poskładane", "posklejane", "poskramiane", "poskręcane", "poskrobane", "poskromione", "poskubane", "posłane", "posłodzone", "poślubiane", "poślubione", "posługiwane", "posmakowane", "posmarowane", "posolone", "posortowane", "pospekulowane", "pospieszane", "pośpieszane", "pośpiewane", "pospinane", "pospłacane", "posprawdzane", "posprzątane", "posprzedawane", "pośredniczone", "possane", "postanowione", "postane", "postarane", "postawione", "postemplowane", "posterowane", "postradane", "postraszone", "postrugane", "postrzegane", "postrzelane", "postrzelone", "postukane", "postymulowane", "posunięte", "posuwane", "poświącane", "poświadczone", "poświecone", "poświęcone", "poświętowane", "poświntuszone", "posyłane", "posypane", "posypywane", "poszarpane", "poszastane", "poszatkowane", "poszczute", "poszczycone", "poszczypane", "poszerzane", "poszerzone", "poszorowane", "poszpiegowane", "poszturchane", "poszukane", "poszukiwane", "poszwędane", "poszybowane", "potakiwane", "potarmoszone", "potarte", "potasowane", "potęgowane", "potępiane", "potępione", "potknięte", "potoczone", "potopione", "potorturowane", "potrącane", "potrącone", "potraktowane", "potrojone", "potrute", "potrząsane", "potrzaskane", "potrząsnięte", "potrząśnięte", "potrzymane", "Poturbowane", "poturlane", "potwierdzone", "potykane", "poucinane", "pouczane", "pouczone", "poudawane", "poukładane", "pouprawiane", "poupychane", "pourywane", "poustawiane", "poużywane", "powąchane", "powachlowane", "powalane", "powalone", "poważane", "powbijane", "powciągane", "powciskane", "powdychane", "powęszone", "powetowane", "powiadamiane", "powiadomione", "powiązane", "powiedziane", "powiedzone", "powiększane", "powielane", "powielone", "powierzane", "powierzone", "powieszone", "powiewane", "powinszowane", "powitane", "powite", "powkładane", "powlekane", "powłóczone", "powodowane", "powołane", "powoływane", "powożone", "powpychane", "powrócone", "powrzucane", "powsadzane", "powściągnięte", "powspominane", "powstrzymane", "powtarzane", "powtórzone", "powybierane", "powybijane", "powycierane", "powycinane", "powyciskane", "powydawane", "powyganiane", "powyginane", "powyjaśniane", "powyjmowane", "powyłączane", "powymiatane", "powymieniane", "powynoszone", "powypełniane", "powypisywane", "powyrywane", "powyrzucane", "powystrzelane", "powysyłane", "powywalane", "powywieszane", "powywracane", "powzięte", "pozabawiane", "pozabijane", "pozacierane", "pożądane", "pożądlone", "pozadzierane", "pozakładane", "pozaklinane", "pozałatwiane", "pozamiatane", "pozamieniane", "pozamrażane", "pozamykane", "pozapalane", "pozapinane", "pozapisywane", "pozapraszane", "pożarte", "pozasłaniane", "pozastrzelane", "pozatykane", "pozbawiane", "pozbawione", "pozbierane", "pozbyte", "pozbywane", "pozdejmowane", "pozdrawiane", "pozdrowione", "pożegnane", "pożerane", "pozmiatane", "pozmieniane", "pozmywane", "poznaczone", "poznane", "poznawane", "poznęcane", "pozorowane", "pozostawiane", "pozostawione", "pozowane", "pozrywane", "pozszywane", "pożute", "pozwalniane", "pozwane", "pozwiązywane", "pozwiedzane", "pozwolone", "pożyczane", "pożyczone", "pozyskane", "pożyte", "pozywane", "pożywiane", "pożywione", "praktykowane", "prane", "prasowane", "prawione", "prażone", "precyzowane", "preferowane", "prenumerowane", "prezentowane", "próbowane", "procesowane", "produkowane", "profanowane", "profilowane", "prognozowane", "programowane", "projektowane", "proklamowane", "prolongowane", "promieniowane", "promowane", "propagowane", "proponowane", "prosperowane", "prostowane", "proszkowane", "proszone", "protestowane", "protokołowane", "prowadzone", "prowokowane", "prute", "pryskane", "pryśnięte", "przeanalizowane", "przearanżowane", "przebaczane", "przebaczone", "przebadane", "przebiegnięte", "przebierane", "przebijane", "przebite", "przebolone", "przebrane", "przebudowane", "przebudowywane", "przebudzane", "przebudzone", "przebukowane", "przebyte", "przebywane", "przeceniane", "przecenione", "przechlapane", "przechodzone", "przechowane", "przechowywane", "przechrzcone", "przechwycone", "przechwytywane", "przechylane", "przechylone", "przechytrzane", "przechytrzone", "przeciągane", "przeciągnięte", "przeciążane", "przeciążone", "przeciekane", "przecierane", "przecierpiane", "przecięte", "przecinane", "przeciskane", "przeciśnięte", "przeciwstawiane", "przećwiczone", "przeczekane", "przeczesane", "przeczesywane", "przeczołgane", "przeczute", "przeczuwane", "przeczyszczone", "przeczytane", "przedarte", "przedawkowane", "przedawkowywane", "przedekorowane", "przedłożone", "przedłużane", "przedłużone", "przedmuchane", "przedobrzone", "przedostane", "przedostawane", "przedsiewzięte", "przedstawiane", "przedstawione", "przedymane", "przedyskutowane", "przedzierane", "przedziurawione", "przedziurkowane", "przeegzaminowane", "przefaksowane", "przefarbowane", "przefasonowane", "przefasowane", "przefaxowane", "przefiltrowane", "przeformowane", "przeforsowane", "przegadane", "przeganane", "przeganiane", "przegapiane", "przegapione", "przegięte", "przeginane", "przeglądane", "przeglądnięte", "przegłodzone", "przegłosowane", "przegonione", "przegotowane", "przegotowywane", "przegrabione", "przegradzane", "przegrane", "przegrupowane", "przegrupowywane", "przegrywane", "przegryzane", "przegryzione", "przegrzane", "przegrzebane", "przegrzewane", "przehandlowane", "przeholowane", "przeinstalowane", "przeistoczone", "przejadane", "przejaskrawiane", "przejaśnione", "przejawiane", "przejawione", "przejechane", "przejęte", "przejeżdżane", "przejmowane", "przejrzane", "przekabacane", "przekabacone", "przekablowane", "przekalibrowane", "przekalkulowane", "przekarmiane", "przekąszone", "przekazywane", "przekierowane", "przekierowywane", "przekimane", "przekładane", "przeklejone", "przeklęte", "przeklinane", "przeklnięte", "przekłute", "przekonane", "przekonfigurowane", "przekonstruowane", "przekonwertowane", "przekonywane", "przekopane", "przekopywane", "przekoziołkowane", "przekraczane", "przekręcane", "przekręcone", "przekreślane", "przekreślone", "przekroczone", "przekrojone", "przekrzyczone", "przekrzywione", "przekształcane", "przekształcone", "przekupione", "przekupywane", "przekute", "przekwalifikowane", "przełączane", "przełączone", "przeładowane", "przeładowywane", "przełamane", "przełamywane", "przelane", "przelatywane", "przeleciane", "przelewane", "przeleżane", "przelicytowane", "przeliczane", "przeliczone", "przeliterowane", "przełknięte", "przełożone", "przełykane", "przełyknięte", "przemalowane", "przemalowywane", "przemaszerowane", "przemawiane", "przemeblowane", "przemęczone", "przemielone", "przemieniane", "przemierzone", "przemieszczane", "przemieszczone", "przemijane", "przemilczane", "przemilczone", "przeminięte", "przemknięte", "przemodelowane", "przemusztrowane", "przemycane", "przemycone", "przemyślane", "przemyślone", "przemyte", "przemywane", "przenegocjowane", "przeniesione", "przenikane", "przeniknięte", "przenoszone", "przeobrażane", "przeobrażone", "przeoczane", "przeoczone", "przeorane", "przeorganizowane", "przeorientowane", "przepadane", "przepakowane", "przepalone", "przeparkowane", "przepchane", "przepchnięte", "przepędzane", "przepędzone", "przepełniane", "przepełnione", "przepijane", "przepiłowane", "przepisane", "przepisywane", "przepite", "przepłacane", "przepłacone", "przepłakane", "przeplanowane", "przepłoszone", "przepłukane", "przepłukiwane", "przepłynięte", "przepływane", "przepompowane", "przepompowywane", "przepowiadane", "przepowiedziane", "przepracowane", "przepracowywane", "przeprane", "przeprawiane", "przeprawione", "przeprogramowane", "przeprojektowane", "przeprowadzane", "przeprowadzone", "przepuszczane", "przepuszczone", "przepychane", "przepytane", "przepytywane", "przerąbane", "przerabiane", "przeradzane", "przerastane", "przerażone", "przeredagowane", "przerejestrowane", "przerobione", "przerodzone", "przerośnięte", "przerwane", "przerysowane", "przerywane", "przerzedzane", "przerzucane", "przerzucone", "przesączone", "przesadzane", "przesądzane", "przesadzone", "przesądzone", "prześcigane", "prześcignięte", "przesiadane", "przesiadywane", "przesiane", "przesiedlane", "przesiedlone", "przesiedziane", "przesiewane", "przesilone", "przeskakiwane", "przeskalowane", "przeskanowane", "przeskoczone", "przeskrobane", "prześladowane", "przesłaniane", "przesłane", "prześledzone", "prześlizgnięte", "przesłodzone", "przesłonięte", "przesłuchane", "przesłuchiwane", "przesmarowane", "przesolone", "przesortowane", "przespane", "prześpiewane", "przessane", "przestawiane", "przestawione", "przestemplowane", "przestraszone", "przestrojone", "przestrzegane", "przestrzelone", "przestudiowane", "przesunięte", "przesuwane", "prześwietlane", "prześwietlone", "przesyłane", "przesypane", "przesypiane", "przesypywane", "przeszarżowane", "przeszczepiane", "przeszczepione", "przeszkadzane", "przeszkolone", "przeszmuglowane", "przeszukane", "przeszukiwane", "przeszyte", "przeszywane", "przetaczane", "przetańczone", "przetapetowane", "przetarte", "przetestowane", "przetkane", "przetoczone", "przetopione", "przetrącone", "przetransformowane", "przetransmitowane", "przetransponowane", "przetransportowane", "przetrawione", "przetrwane", "przetrząsane", "przetrząśnięte", "przetrzepane", "przetrzymane", "przetrzymywane", "przetwarzane", "przetworzone", "przewalane", "przewalczone", "przewaletowane", "przewalone", "przeważane", "przeważone", "przewertowane", "przewiązane", "przewiązywane", "przewidywane", "przewidziane", "przewiercane", "przewiercone", "przewieszane", "przewieszone", "przewietrzone", "przewiezione", "przewijane", "przewinięte", "przewitane", "przewodniczone", "przewodzone", "przewożone", "przewracane", "przewrócone", "przewyższane", "przeymierzane", "przeżarte", "przeżeglowane", "przeżegnane", "przeziębione", "przezimowane", "przeznaczane", "przeznaczone", "przeżute", "przezwyciężane", "przezwyciężone", "przeżyte", "przezywane", "przeżywane", "przodowane", "przpochlebione", "przwdziewane", "przybastowane", "przybierane", "przybijane", "przybite", "przybliżane", "przybliżone", "przybrane", "przycelowane", "przycepione", "przychylone", "przyciągane", "przyciągnięte", "przyciemnione", "przycięte", "przycinane", "przyciskane", "przyciśnięte", "przyciszone", "przyćmiewane", "przyćmione", "przycumowane", "przyczepiane", "przyczesane", "przyczołgane", "przyczynione", "przydepnięte", "przydeptane", "przyduszone", "przydzielane", "przydzielone", "przygarnięte", "przygaszone", "przygazowane", "przygładzane", "przygnębiane", "przygniatane", "przygniecione", "przygotowane", "przygruchane", "przygrywane", "przygryzane", "przygryzione", "przygrzane", "przygwożdżone", "przyhamowane", "przyholowane", "przyjane", "przyjęte", "przyjmowane", "przyjrzane", "przykładane", "przyklejone", "przyklepane", "przykopane", "przykręcane", "przykręcone", "przykrócone", "przykryte", "przykrywane", "przykurzone", "przykute", "przykuwane", "przyłączane", "przyłączone", "przylane", "przyłapane", "przylegane", "przylepiane", "przylepione", "przyłożone", "przymierzone", "przymilane", "przymknięte", "przymocowane", "przymuszane", "przynależone", "przyniesione", "przynoszone", "przynudzane", "przyostrzone", "przyozdabiane", "przyozdobione", "przypadnięte", "przypakowane", "przypakowywane", "przypalane", "przypalone", "przyparte", "przypasowane", "przypatrywane", "przypatrzone", "przypieczętowane", "przypiekane", "przypierane", "przypięte", "przypilnowane", "przypiłowane", "przypinane", "przypisane", "przypisywane", "przypłacone", "przyplątane", "przypłynięte", "przypodobane", "przypominane", "przypomniane", "przyporządkowane", "przyprawiane", "przyprawione", "przyprowadzone", "przypucowane", "przypudrowane", "przypuszczane", "przypuszczone", "przyrównane", "przyrządzane", "przyrządzone", "przysiadane", "przysiągnięte", "przyskrzydlone", "przyskrzyniane", "przyskrzynione", "przysłaniane", "przysłane", "przysłodzone", "przysłonione", "przysłuchiwane", "przysługiwane", "przysłużone", "przysmażane", "przysmażone", "przyspieszane", "przyspieszone", "przysporzone", "przysposobione", "przyśrubowywane", "przyssane", "przystąpione", "przystawiane", "przystawione", "przystemplowane", "przystopowane", "przystosowane", "przystrojone", "przysunięte", "przysuwane", "przyswajane", "przyświecane", "przyświęcone", "przyswojone", "przysyłane", "przysypane", "przyszpilone", "przyszykowane", "przyszyte", "przyszywane", "przytaczane", "przytargane", "przytarte", "przytaszczane", "przytępiane", "przytępione", "przytkane", "przytłaczane", "przytłoczone", "przytłumione", "przytoczone", "przytrafione", "przytroczone", "przytruwane", "przytrzasnięte", "przytrzymane", "przytrzymywane", "przytulane", "przytulone", "przytwierdzane", "przytwierdzone", "przytykane", "przyuczone", "przyuważone", "przywabione", "przywalane", "przywalone", "przywarowane", "przywarte", "przywdziane", "przywiązane", "przywiązywane", "przywidziane", "przywiezione", "przywitane", "przywłaszczane", "przywłaszczone", "przywołane", "przywoływane", "przywożone", "przywracane", "przywrócone", "przyznaczone", "przyznane", "przyznawane", "przyzwalane", "przyzwane", "przyzwyczajane", "przyzwyczajone", "przyzywane", "psiamane", "pstrykane", "pstryknięte", "psute", "publikowane", "puchnięte", "pucowane", "pudłowane", "pudrowane", "puknięte", "punktowane", "pustoszone", "puszczane", "puszczone", "puszkowane", "puszone", "pykane", "pytane", "rabowane", "rachowane", "racjonalizowane", "racjonowane", "raczone", "radowane", "ranione", "raportowane", "ratowane", "ratyfikowane", "reaktywowane", "realizowane", "reanimowane", "recytowane", "ręczone", "redagowane", "redukowane", "reformowane", "refowane", "regenerowane", "regionalizowane", "regulowane", "reinkarnowane", "rejestrowane", "reklamowane", "rekomendowane", "rekompensowane", "rekonstruowane", "rekreowane", "rekrutowane", "rekwirowane", "relacjonowane", "relaksowane", "remodulowane", "remontowane", "renegocjowane", "reorganizowane", "reperowane", "replikowane", "represejonowane", "reprezentowane", "reprodukowane", "resetowane", "resocjalizowane", "respektowane", "resuscytowane", "retuszowane", "rewanżowane", "rewidowane", "rezerwowane", "rezonowane", "rezygnowane", "reżyserowane", "robione", "rodzone", "rojone", "rolowane", "romansowane", "ronione", "rozbawiane", "rozbawione", "rozbierane", "rozbijane", "rozbite", "rozbłyśnięte", "rozbrajane", "rozbrojone", "rozbudowane", "rozbudowywane", "rozbudzane", "rozbudzone", "rozbujane", "rozcapierzone", "rozchmurzone", "rozchodzone", "rozchylane", "rozchylone", "rozciągane", "rozciągnięte", "rozcieńczane", "rozcieńczone", "rozcierane", "rozcięte", "rozcinane", "rozczarowane", "rozczarowywane", "rozczesane", "rozczłonkowane", "rozczulane", "rozczytane", "rozdane", "rozdawane", "rozdeptane", "rozdmuchane", "rozdmuchiwane", "rozdrabniane", "rozdrapane", "rozdrapywane", "rozdrażniane", "rozdrażnione", "rozduszone", "rozdwojone", "rozdysponowane", "rozdzielane", "rozdzielone", "rozdzierane", "rozdziewiczone", "rozebrane", "rozedrane", "rozegrane", "rozegrywane", "rozepchane", "rozerwane", "rozesłane", "rozgarnięte", "rozgaszczane", "rozgięte", "rozglaszane", "rozgłoszone", "rozgniatane", "rozgniecione", "rozgniewane", "rozgonione", "rozgraniczone", "rozgrane", "rozgromione", "rozgrywane", "rozgryzane", "rozgryzione", "rozgrzane", "rozgrzebywane", "rozgrzeszone", "rozgrzewane", "rozhuśtane", "rozjaśniane", "rozjaśnione", "rozjechane", "rozjedzone", "rozjuszane", "rozjuszone", "rozkazane", "rozkazywane", "rozkładane", "rozklejane", "rozklejone", "rozkołysane", "rozkopane", "rozkopywane", "rozkoszowane", "rozkręcane", "rozkręcone", "rozkrojone", "rozkruszone", "rozkute", "rozkuwane", "rozkwaszone", "rozkwaterowane", "rozkwitane", "rozkwitnięte", "rozłączone", "rozładowane", "rozładowywane", "rozłamane", "rozlane", "rozlewane", "rozliczane", "rozliczone", "rozlokowane", "rozłożone", "rozłupane", "rozluźniane", "rozmanażane", "rozmasowane", "rozmawiane", "rozmazane", "rozmazywane", "rozmiękczone", "rozmieniane", "rozmienione", "rozmieszczane", "rozmieszczone", "rozminięte", "rozmnożone", "rozmontowane", "rozmówione", "rozmrażane", "rozmrożone", "rozmyślane", "rozmyte", "różnicowane", "rozniecane", "rozniecione", "rozniesione", "różnione", "roznoszone", "rozochocone", "rozpaczane", "rozpakowane", "rozpakowywane", "rozpalane", "rozpalone", "rozpamiętywane", "rozpaskudzane", "rozpatrywane", "rozpatrzone", "rozpędzane", "rozpędzone", "rozpętane", "rozpieszczane", "rozpieszczone", "rozpięte", "rozpiłowane", "rozpinane", "rozpisane", "rozpisywane", "rozplanowane", "rozpłaszczane", "rozpłaszczone", "rozplątane", "rozplątywane", "rozpłynięte", "rozpoczęte", "rozpoczynane", "rozpogodzone", "rozporządzane", "rozporządzone", "rozpościerane", "rozpostrzone", "rozpowiadane", "rozpowiedziane", "rozpowszechniane", "rozpowszechnione", "rozpoznane", "rozpoznawane", "rozpracowane", "rozpraszane", "rozprawiane", "rozprawiczone", "rozprawione", "rozprostowane", "rozproszone", "rozprowadzane", "rozprowadzone", "rozprute", "rozpruwane", "rozprzestrzeniane", "rozprzestrzenione", "rozpuszczane", "rozpuszczone", "rozpychane", "rozpylane", "rozpylone", "rozpytane", "rozpytywane", "rozrastane", "rozreklamowane", "rozrobione", "rozrośnięte", "rozróżniane", "rozróżnione", "rozruszane", "rozrysowane", "rozrywane", "rozrzucane", "rozsadzane", "rozsadzone", "rozsądzone", "rozścielone", "rozsiane", "rozsiekane", "rozsiewane", "rozsiodłane", "rozsławiane", "rozsławione", "rozsmarowane", "rozsmarowywane", "rozśmieszane", "rozstane", "rozstąpione", "rozstawane", "rozstawiane", "rozstawione", "rozstrojone", "rozstrząsane", "rozstrzeliwane", "rozstrzelone", "rozstrzygane", "rozstrzygnięte", "rozsunięte", "rozsupłane", "rozświetlane", "rozświetlone", "rozsyłane", "rozsypane", "rozsypywane", "rozszarpane", "rozszarpywane", "rozszczepiane", "rozszczepione", "rozszerzane", "rozszerzone", "rozszyfrowane", "roztaczane", "roztapiane", "roztarte", "roztoczone", "roztopione", "roztrwonione", "roztrząsane", "roztrzaskane", "rozumiane", "rozumowane", "rozwalane", "rozwalone", "rozwarte", "rozważane", "rozważone", "rozweselane", "rozweselone", "rozwiane", "rozwiązane", "rozwiązywane", "rozwidniane", "rozwiedzione", "rozwierane", "rozwiercone", "rozwieszane", "rozwieszone", "rozwiewane", "rozwiezione", "rozwikłane", "rozwinięte", "rozwlekane", "rozwodzone", "rozwścieczane", "rozwścieczone", "rozzłoszczone", "rugane", "ruinowane", "rujnowane", "runięte", "ruszane", "ruszone", "rwane", "ryczane", "ryglowane", "rymowane", "rysowane", "ryte", "ryzykowane", "rządzone", "rzeźbione", "rżnięte", "rzucane", "rzucone", "rzygane", "sabotażowane", "sączone", "sadzane", "sadzone", "sądzone", "salutowane", "salwowane", "sankcjonowane", "satysfakcjonowane", "scalone", "scementowane", "scentrowane", "scharakteryzowane", "schładzane", "schlane", "schlapane", "schlebione", "schłodzone", "schowane", "schronione", "schrupane", "schrzanione", "schwytane", "schylane", "ściągnięte", "ścielone", "ściemniane", "ściemnione", "ścierane", "ścierpione", "ścięte", "ścigane", "ścinane", "ściskane", "ściśnięte", "ściszane", "ściszone", "sędziowane", "segregowane", "selekcjonowane", "separowane", "sępione", "serwowane", "sfabrykowane", "sfajczone", "sfałszowane", "sfaulowane", "sfilmowane", "sfinalizowane", "sfinansowane", "sfingowane", "sformalizowane", "sformatowane", "sformowane", "sformułowane", "sforsowane", "sfotografowane", "shimmerowane", "siane", "siekane", "siorbane", "skadrowane", "skakane", "skalane", "skaleczone", "skalibrowane", "skalkulowane", "skalpowane", "skanalizowane", "skandowane", "skanowane", "skapitulowane", "skarcone", "skarżone", "skasowane", "skatalogowane", "skazane", "skażone", "skazywane", "skierowane", "składane", "składowane", "skłaniane", "sklasyfikowane", "sklecione", "sklejane", "sklejone", "sklepane", "skłócone", "skłonione", "sklonowane", "sknocone", "skojarzone", "skolonizowane", "skołowane", "skombinowane", "skomentowane", "skompensowane", "skompletowane", "skomplikowane", "skomponowane", "skompresowane", "skompromitowane", "skomunikowane", "skonane", "skoncentrowane", "skończone", "skondensowane", "skonfigurowane", "skonfiskowane", "skonfrontowane", "skonkretyzowane", "skonsolidowane", "skonstruowane", "skonsultowane", "skonsumowane", "skontaktowane", "skontrolowane", "skoordynowane", "skopane", "skopiowane", "skorektowane", "skorumpowane", "skorygowane", "skorzystane", "skoszone", "skracane", "skradzione", "skręcane", "skręcone", "skremowane", "skreślane", "skreślone", "skrobane", "skrobnięte", "skrócone", "skrojone", "skropione", "skruszone", "skrystalizowane", "skryte", "skrytykowane", "skrywane", "skrzecowane", "skrzepnięte", "skrzyczane", "skrzyte", "skrzywdzone", "skrzyżowane", "skserowane", "skubane", "skubnięte", "skulone", "skumulowane", "skupiane", "skupione", "skupowane", "skurczone", "skuszone", "skute", "skuwane", "skwitowane", "słane", "sławione", "śledzone", "ślinione", "ślizgane", "słodzone", "słuchane", "słyszane", "smagane", "smarowane", "smażone", "śmiecone", "smute", "smyrane", "snute", "sondowane", "sortowane", "spafycikowane", "spakowane", "spalane", "spałaszowane", "spalone", "spałowane", "spamiętane", "spaprane", "sparafrazowane", "sparaliżowane", "sparowane", "spartaczone", "spartolone", "sparzone", "spasowane", "spatałaszone", "spauzowane", "spawane", "spawione", "specjalizowane", "spędzane", "spędzone", "spekulowane", "spełniane", "spełnione", "spenetrowane", "spętane", "spierane", "spięte", "śpiewane", "spiłowane", "spinane", "spisane", "spiskowane", "spisywane", "spite", "spłacane", "spłacone", "splądrowane", "splajtowane", "splamione", "spłaszczone", "splatane", "splątane", "spłatane", "spławiane", "spławione", "spłodzone", "spłonięte", "spłoszone", "spłukane", "spłukiwane", "spluwane", "spływane", "spoczęte", "spoczywane", "spodziewane", "spojone", "spolaryzowane", "spoliczkowane", "sponiewierane", "sponsorowane", "spopielane", "spopielone", "spopularyzowane", "sportretowane", "sporządzane", "sporządzone", "spostrzegane", "spotęgowane", "spotkane", "spotykane", "spoufalane", "spowalniane", "spowiadane", "spowodowane", "spowolnione", "spoźnione", "spóźnione", "spożytkowane", "spożyte", "spożywane", "sprane", "sprasowane", "spraszane", "sprawdzone", "sprawione", "sprawowane", "sprecyzowane", "spreparowane", "sprężane", "sprężone", "spróbowane", "sprofanowane", "sprofilowane", "sprostowane", "sproszkowane", "sproszone", "sprowadzane", "sprowadzone", "sprowokowane", "spryskane", "spryskiwane", "sprywatyzowane", "sprzątane", "sprzątnięte", "sprzeczane", "sprzedane", "sprzedawane", "sprzeniewierzone", "spudłowane", "spustoszone", "spuszczane", "spuszczone", "spychane", "ssane", "stabilizowane", "stacjonowane", "staczane", "staranowane", "starczane", "stargowane", "startowane", "stawiane", "stawione", "stemplowane", "stenografowane", "stepowane", "sterowane", "sterroryzowane", "sterylizowane", "stłamszone", "stłumione", "stnięte", "stoczone", "stołowane", "stonowane", "stopione", "stopniowane", "storpedowane", "stosowane", "strącane", "stracone", "strącone", "strajkowane", "straszone", "stratowane", "strawione", "streamowane", "stresowane", "streszczane", "streszczone", "strofowane", "strojone", "stroszone", "strugane", "strute", "strymowane", "strząsane", "strzaskane", "strząśnięte", "strzelone", "strzepane", "strzępione", "strzepnięte", "strzepywane", "studiowane", "studzone", "stukane", "stuknięte", "stulone", "stwardnione", "stwarzane", "stwierdzane", "stwierdzone", "stworzone", "stykane", "stylizowane", "stymulowane", "sugerowane", "sumowane", "sunięte", "swatane", "swawolone", "świadczone", "świecone", "święcone", "świerzbione", "świętowane", "świntuszone", "sycone", "sygnalizowane", "symulowane", "synchronizowane", "sypane", "sypnięte", "szachrowane", "szacowane", "szafowane", "szamotane", "szanowane", "szargane", "szarpane", "szarpnięte", "szarżowane", "szasowane", "szastane", "szatkowane", "szczędzone", "szczepione", "szczerzone", "szczute", "szczycone", "szczypane", "szczytowane", "szefowane", "szemrane", "szepnięte", "szeptane", "szerzone", "szkalowane", "szkicowane", "szklone", "szkodzone", "szkolone", "szlachtowane", "szlifowane", "szmuglowane", "szokowane", "szorowane", "szpachlowane", "szpanowane", "szperane", "szprycowane", "sztachnięte", "szturchane", "szturchnięte", "szturmowane", "szufladkowane", "szuflowane", "szukane", "szulerowane", "szwankowane", "szydełkowane", "szydzone", "szyfrowane", "szykanowane", "szykowane", "szyte", "taktowane", "tamowane", "tankowane", "tapetowane", "taplane", "taranowane", "targane", "targnięte", "targowane", "tarmoszone", "tarte", "tarzane", "tasowane", "taszczone", "tatuowane", "tchnięte", "telefonowane", "telegrfowane", "teleportowane", "temperowane", "teoretyzowane", "tępione", "terroryzowane", "testowane", "tkane", "tknięte", "tłamszone", "tłoczone", "tłumaczone", "tłumione", "toczone", "tolerowane", "tonowane", "topione", "torowane", "torturowane", "towarzyszone", "trąbione", "trącane", "tracone", "trącone", "trafiane", "trafione", "tragizowane", "traktowane", "transferowane", "transformowane", "transmitowane", "transportowane", "tratowane", "trawione", "trenowane", "tresowane", "triumfowane", "tropione", "troszczone", "trute", "trwonione", "trymowane", "tryskane", "tryśnięte", "tryumfowane", "trywializowane", "trzaskane", "trzasnięte", "trzepane", "trzepnięte", "trzepotane", "trzęsione", "trzymane", "tuczone", "tułane", "tulone", "turlane", "tuszowane", "twistowane", "tworzone", "tykane", "tyranizowane", "tyrane", "tytułowane", "uaktualniane", "uaktualnione", "uaktywniane", "uaktywnione", "uargumentowane", "uatrakcyjnione", "ubabrane", "ubarwiane", "ubarwione", "ubawione", "ubezpieczane", "ubezpieczone", "ubezwłasnowolnione", "ubiczowane", "ubiegane", "ubierane", "ubijane", "ubite", "ubłagane", "ubliżane", "ubliżone", "ubolewane", "ubóstwiane", "ubrane", "ubroczone", "ubrudzone", "ucałowane", "ucharakteryzowane", "uchowane", "uchronione", "uchwalane", "uchwalone", "uchwycone", "uchylane", "uchylone", "uciągnięte", "ucieleśniane", "ucierane", "ucierpiane", "ucięte", "ucinane", "uciskane", "uciśnięte", "uciszane", "uciszone", "uciułane", "ucywilizowane", "uczczone", "uczepione", "uczesane", "uczęszczane", "uczone", "ucztowane", "uczute", "uczynione", "udane", "udaremnione", "udawane", "udekorowane", "udeptywane", "uderzane", "uderzone", "udobruchane", "udokumentowane", "udomawiane", "udomowione", "udoskonalane", "udoskonalone", "udostępniane", "udostępnione", "udowadniane", "udowodnione", "Udramatyzowane", "udręczone", "udrożnione", "udupione", "uduszone", "udzielane", "udzielone", "udźwignięte", "ueiwarygodnione", "ufane", "ufarbowane", "uformowane", "ufortyfikowane", "ufundowane", "ugadane", "uganiane", "ugaszane", "ugaszone", "ugięte", "uginane", "ugłaskane", "ugniatane", "ugodzone", "ugoszczone", "ugotowane", "ugrane", "ugruntowane", "ugryzione", "ugrzęznięte", "uhistoryzowane", "uhonorowane", "uiścite", "ujadane", "ujarzmiane", "ujarzmione", "ujawniane", "ujawnione", "ujęte", "ujeżdżane", "ujeżdżone", "ujmowane", "ujrzane", "ukamieniowane", "ukarane", "ukartowane", "ukąszone", "ukatrupione", "ukazane", "ukazywane", "ukierowane", "ukierunkowane", "układane", "uklepane", "ukłonione", "ukłute", "uknute", "ukojone", "ukołysane", "ukończone", "ukonkretnione", "ukoronowane", "ukradzione", "ukręcane", "ukręcone", "ukrojone", "ukryte", "ukrywane", "ukrzyżowane", "ukształtowane", "ukute", "ułagodzone", "ułaskawiane", "ułaskawione", "ulatniane", "ułatwiane", "ułatwione", "uleczane", "uleczone", "ulegane", "ulepione", "ulepszane", "ulepszone", "ulokowane", "ulotnione", "ułożone", "umacniane", "umalowane", "umartwiane", "umawiane", "umazane", "umeblowane", "umiejscowione", "umieszczane", "umieszczone", "umilane", "umilone", "umknięte", "umniejszane", "umniejszone", "umocnione", "umocowane", "umoczone", "umodelowane", "umorzone", "umotywowane", "umówione", "umożliwiane", "umożliwione", "umrocznione", "umyte", "unaocznione", "unicestwiane", "unicestwione", "uniemożliwaine", "uniemożliwione", "unierochomione", "uniesione", "unieszczęśliwiane", "unieszczęśliwione", "unieszkodliwiane", "unieszkodliwione", "unieważniane", "unieważnione", "uniewinnione", "uniezależnione", "unikane", "uniknięte", "unormowane", "unoszone", "unowoczesniane", "unowocześniane", "uodpornione", "uogólniane", "upakowane", "upalane", "upalone", "upamiętniane", "upamiętnione", "upaństwowione", "upaprane", "uparte", "upaskudzone", "upchane", "upchnięte", "upewniane", "upewnione", "upgradowane", "upichcone", "upiększane", "upiększone", "upierane", "upierdolone", "upięte", "upijane", "upilnowane", "upinane", "upite", "uplastycznione", "upłynięte", "upodabniane", "upodobnione", "upojone", "upokorzane", "upokorzone", "upolowane", "upominane", "uporządkowane", "upowszechnione", "upozorowane", "upozowane", "uprane", "uprasowane", "upraszczane", "uprawdopodobnione", "uprawiane", "uproszczone", "uproszone", "uprowadzane", "uprowadzone", "uprzątane", "uprzątnięte", "uprzedone", "uprzedzane", "uprzyjemniane", "uprzyjemnione", "uprzykrzane", "uprzytomnione", "upubliczniane", "upublicznione", "upudrowane", "upuszczane", "upuszczone", "upychane", "urabiane", "uraczane", "uradowane", "Urągane", "uratowane", "urażane", "urażone", "uregulowane", "urobione", "uronione", "urośnięte", "urozmaicane", "urozmaicone", "uruchamiane", "uruchomione", "urwane", "urywane", "urządzane", "urządzone", "urzeczywistniane", "urzeczywistnione", "urżnięte", "usadowione", "usadzone", "usamowolnione", "usankcjonowane", "usatyfakcjonowane", "uschnięte", "uściskane", "uścislone", "uściśnięte", "usidlone", "usiedzone", "uskładane", "uskoczone", "uskuteczniane", "uskutecznione", "usłuchane", "usługiwane", "usłużone", "usłyszane", "usmażone", "uśmiane", "uśmiercane", "uśmiercone", "uśmierzone", "uspane", "uśpione", "uspokajane", "uspokojone", "uspołeczniane", "usprawiedliwiane", "usprawiedliwione", "usprawnione", "usprzątane", "ustabilizowane", "ustalane", "ustalone", "ustanawiane", "ustanowione", "ustąpione", "ustatkowane", "ustawiane", "ustawione", "ustępowane", "ustosunkowane", "ustrojone", "ustrzegane", "ustrzelone", "usunięte", "ususzone", "usuwane", "uświadamiane", "uświadczone", "uświadomione", "uświęcone", "uświnione", "usychane", "usypane", "usypiane", "usystematyzowane", "usytuowane", "uszanowane", "uszczelniane", "uszczęśliwiane", "uszczęśliwione", "uszczuplone", "uszczypnięte", "uszkadzane", "uszkodzone", "uszlachetniane", "uszlachetnione", "usztywnione", "uszykowane", "uszyte", "utajnione", "utargowane", "utarte", "utemperowane", "utkane", "utknięte", "utkwione", "utoczone", "utopione", "utorowane", "utożsamiane", "utożsamione", "utracone", "utrącone", "utrudniane", "utrudnione", "utrwalane", "utrwalone", "utrzymywane", "utuczone", "utulone", "utwierdzane", "utwierdzone", "utworzone", "utylizowane", "uwalniane", "uwalone", "uwarunkowane", "uważane", "uwiązane", "uwiązywane", "uwidocznione", "uwieczniane", "uwiecznione", "uwielbiane", "uwielbione", "uwieńczone", "uwierane", "uwierzone", "uwieszone", "uwiezione", "uwięzione", "uwijane", "uwikłane", "uwinięte", "uwite", "uwłaczane", "uwłaszczone", "uwodzone", "uwolnione", "uwsteczniane", "uwstecznione", "uwydatniane", "uwypiklone", "uwzględniane", "uwzględnione", "użądlone", "uzależniane", "uzależnione", "uzasadniane", "uzasadnione", "uzbierane", "uzbrajane", "uzbrojone", "uzdrawiane", "uzdrowione", "użerane", "uzewnętrzniane", "uzewnętrznione", "uzgadniane", "uzgodnione", "uziemione", "uzmysłowione", "uznane", "uznawane", "uzupełniane", "uzupełnione", "uzurpowane", "użyczane", "użyczone", "uzyskane", "uzyskiwane", "użyte", "używane", "wabione", "wąchane", "wachlowane", "wahane", "walczone", "wałkowane", "walnięte", "walone", "ważone", "wbijane", "wbite", "wcelowane", "wchłonięte", "wciągane", "wciągnięte", "wcielane", "wcielone", "wcierane", "wcięte", "wcinane", "wciskane", "wciśnięte", "wczepione", "wczołgane", "wczute", "wczytane", "wczytywane", "wdane", "wdarte", "wdawane", "wdepnięte", "wdeptane", "wdetonowane", "wdmuchiwane", "wdrapane", "wdrapywane", "wdrażane", "wdrążone", "wdrożone", "wduszone", "wdychane", "wdzierane", "wędkowane", "wentylowane", "wepchane", "wepchnięte", "werbowane", "weryfikowane", "wessane", "wetkane", "wetknięte", "wezwane", "wgłębiane", "wgniatane", "wgniecione", "wgrane", "wgryzane", "wgryzione", "wiązane", "wibrowane", "widywane", "widziane", "wiedzone", "wielbione", "wiercone", "wierzgane", "wierzone", "wieszane", "wietrzone", "więżone", "wikłane", "windowane", "winszowane", "wiosłowane", "wirowane", "witane", "wite", "wizualizowane", "wjeżdżane", "wkalkulowane", "wkładane", "wklejane", "wklejone", "wklepane", "wkłute", "wkomponowane", "wkopane", "wkopywane", "wkraczane", "wkradane", "wkradzione", "wkręcane", "wkręcone", "wkupione", "wkurwiane", "wkute", "wkuwane", "włączane", "włączone", "władane", "władowane", "włamane", "włamywane", "wlane", "wlepiane", "wlepione", "wlewane", "wliczane", "wliczone", "włożone", "wmanewrowane", "wmanipulowane", "wmawiane", "wmieszane", "wmówione", "wmurowane", "wmuszone", "wnerwiane", "wnerwione", "wniesione", "wnikane", "wniknięte", "wnioskowane", "wnoszone", "wodowane", "wojowane", "wołane", "woskowane", "wożone", "wpajane", "wpakowane", "wparowane", "wpasowane", "wpatrywane", "wpędzane", "wpędzone", "wperswadowane", "wpienione", "wpięte", "wpisane", "wpisywane", "wpłacane", "wpłacone", "wplatane", "wplątane", "wplątywane", "wpojone", "wpompowane", "wpraszane", "wprawiane", "wproszone", "wprowadzane", "wprowadzone", "wpuszczone", "wpychane", "wrabiane", "wręczane", "wrobione", "wróżone", "wryte", "wrzucane", "wrzucone", "wrzynane", "wsadzane", "wsadzone", "wskazane", "wskazywane", "wskórane", "wskrzeszane", "wskrzeszone", "wślizgiwane", "wślizgnięte", "wsłuchane", "wsparte", "wspierane", "wspięte", "współczute", "współodczuwane", "współtworzone", "współżyte", "wspomagane", "wspominane", "wspomniane", "wstąpione", "wstawiane", "wstawione", "wstrząsane", "wstrząśnięte", "wstrzelone", "wstrzykiwane", "wstrzyknięte", "wstrzymane", "wstrzymywane", "wstukane", "wsunięte", "wsuwane", "wsypane", "wszamane", "wszczepiane", "wszczepione", "wszczęte", "wszczynane", "wszyte", "wtajemniczane", "wtajemniczone", "wtapiane", "wtargnięte", "wtarte", "wtaszczone", "wtłoczone", "wtopione", "wtrącone", "wtryniane", "wtulane", "wtulone", "wtykane", "wwalone", "wwiercane", "wwiercone", "wwiezione", "wwożone", "wyartykułowane", "wyautowane", "wybaczane", "wybaczone", "wybadane", "wybatożone", "wybawione", "wybebeszone", "wybełkotane", "wybiczowane", "wybielane", "wybielone", "wybierane", "wybijane", "wybite", "wybłagane", "wyblaknięte", "wybrandzlowane", "wybrane", "wybronione", "wybrzydzane", "wybuchane", "wybuchnięte", "wybudowane", "wybudzane", "wybudzone", "wyburzane", "wyburzone", "wycackane", "wycałowane", "wyceniane", "wycenione", "wychlane", "wychłostane", "wychodowane", "wychowane", "wychowywane", "wychrobotane", "wychwalane", "wychwycone", "wychylane", "wychylone", "wyciągane", "wyciągnięte", "wyciekane", "wycieniowane", "wycierane", "wycięte", "wycinane", "wyciskane", "wyciśnięte", "wyciszane", "wyciszone", "wycofane", "wyćwiczone", "wycyckane", "wycyganione", "wyczarowane", "wyczarterowane", "wyczekane", "wyczekiwane", "wyczerpane", "wyczesane", "wyczołgane", "wyczołgiwane", "wyczute", "wyczuwane", "wyczyniane", "wyczyszczone", "wyczytane", "wyczytywane", "wydalane", "wydalone", "wydane", "wydębione", "wydedukowane", "wydelegowane", "wydepilowane", "wydeptywane", "wydłubane", "wydłubywane", "wydłużane", "wydłużone", "wydmuchane", "wydmuchiwane", "wydobyte", "wydobywane", "wydojone", "wydoroślane", "wydostane", "wydrane", "wydrapane", "wydrapywane", "wydrążone", "wydrukowane", "wydukane", "wyduszone", "wydychane", "wydziedziczone", "wydzielane", "wydzielone", "wydzierane", "wydzierżawione", "wydziobane", "wydziwiane", "wydzwaniane", "wyedukowane", "wyedytowane", "wyeeliminowane", "wyegzekwowane", "wyeksmitowane", "wyekspediowane", "wyeksploatowane", "wyeksponowane", "wyeksportowane", "wyeliminowane", "wyemigrowane", "wyemitowane", "wyewoluowane", "wyfrunięte", "wygadane", "wygadywane", "wyganiane", "wygarbowane", "wygarniane", "wygarnięte", "wygasane", "wygaśnięte", "wygaszane", "wygaszone", "wygenerowane", "wygięte", "wyginane", "wygładzane", "wygładzone", "wygłaszane", "wygłodzone", "wygłosowane", "wygłoszone", "wygłówkowane", "wygnane", "wygolone", "wygonione", "wygooglowane", "wygospodarowane", "wygotowane", "wygrane", "wygrawerowane", "wygrażane", "wygrywane", "wygryzione", "wygrzane", "wygrzebane", "wygrzebywane", "wygrzewane", "wygubione", "wyhaczone", "wyhaftowane", "wyhamowane", "wyhodowane", "wyizolowane", "wyjadane", "wyjaśniane", "wyjaśnione", "wyjawiane", "wyjawione", "wyjedzone", "wyjęte", "wyjmowane", "wykadrowane", "wykalibrowane", "wykalkulowane", "wykańczane", "wykantowane", "wykąpane", "wykaraskane", "wykarczowane", "wykarmiane", "wykasowane", "wykastrowane", "wykazane", "wykazywane", "wykierowane", "wykitowane", "wykiwane", "wykładane", "wyklarowane", "wyklepane", "wyklinane", "wykłócane", "wykluczane", "wykluczone", "wyklute", "wykłute", "wykminione", "wykolejone", "wykołowane", "wykombinowane", "wykonane", "wykończone", "wykonywane", "wykopane", "wykopnięte", "wykopywane", "wykorkowane", "wykorzeniane", "wykorzenione", "wykorzystane", "wykorzystywane", "wykoszone", "wykpite", "wykradane", "wykradnięte", "wykręcane", "wykręcone", "wykreowane", "wykreślane", "wykreślone", "wykrochmalone", "wykrojone", "wykrwawiane", "wykrwawione", "wykryte", "wykrywane", "wykrzesane", "wykrztuszone", "wykrzyczone", "wykrzykiwane", "wykrzyknięte", "wykrzywiane", "wykształcone", "wyksztuszone", "wykupione", "wykupywane", "wykute", "wykuwane", "wyłączane", "wyłączone", "wylądowane", "wyładowane", "wyładowywane", "wyłajane", "wyłamane", "wyłamywane", "wyłaniane", "wylansowane", "wylane", "wyłapane", "wyłapywane", "wyławiane", "wyleasingowane", "wyleczone", "wylęgane", "wylegimytowane", "wylewane", "wyłgane", "wylicytowane", "wyliczane", "wyliczone", "wylizane", "wylizywane", "wylogowane", "wyłonione", "wylosowane", "wyłowione", "wyłożone", "wyłudzane", "wyłudzone", "wyłupane", "wyłuskane", "wyłuskiwane", "wyłuszczone", "wyluzowane", "wymacane", "wymachiwane", "wymagane", "wymahiwane", "wymalowane", "wymamrotane", "wymanewrowane", "wymarzone", "wymasowane", "wymawiane", "wymazane", "wymazywane", "wymeldowane", "wymeldowywane", "wymiatane", "wymiecione", "wymieniane", "wymienione", "wymierzane", "wymieszane", "wymigane", "wymigiwane", "wymijane", "wyminięte", "wymknięte", "wymoczone", "wymodelowane", "wymontowane", "wymordowane", "wymsknięte", "wymuszane", "wymyślane", "wymyślone", "wymyte", "wynagradzane", "wynagrodzone", "wynajdowane", "wynajdywane", "wynajęte", "wynajmowane", "wynalezione", "wynarodowione", "wynegocjowane", "wyniesione", "wyniknięte", "wyniszczane", "wyniszczone", "wyniuchane", "wynoszone", "wynurzane", "wyobrażane", "wyobrażone", "wyodrębnione", "wyolbrzymiane", "wyolbrzymione", "wyorbowane", "wyosiowane", "wyostrzane", "wyostrzone", "wypaczane", "wypakowane", "wypakowywane", "wypalane", "wypalone", "wypałowane", "wyparowane", "wyparte", "wypasane", "wypastowane", "wypatroszone", "wypatrywane", "wypatrzone", "wypchane", "wypchnięte", "wypędzane", "wypędzlowane", "wypełniane", "wypełnione", "wypersfadowane", "wyperswadowane", "wypierane", "wypięte", "wypijane", "wypinane", "wypisane", "wypisywane", "wypite", "wypłacane", "wypłacone", "wypłakane", "wypłakiwane", "wypłaszczone", "wyplatane", "wyplątane", "wyplenione", "wyplewione", "wypłoszone", "wypłukane", "wypłukiwane", "wyplute", "wypluwane", "wypocone", "wypoczęte", "wypolerowane", "wypominane", "wypomniane", "wypompowane", "wypompowywane", "wyposażone", "wypowiadane", "wypowiedziane", "wypoziomowane", "wypożyczane", "wypracowane", "wypracowywane", "wyprane", "wyprasowane", "wypraszane", "wyprawiane", "wyprawione", "wypróbowane", "wyprodukowane", "wyprojektowane", "wypromieniowane", "wypromowane", "wyprostowane", "wyprostowywane", "wyproszone", "wyprowadzane", "wyprowadzone", "wypróżniane", "wypróżnione", "wyprute", "wypruwane", "wyprzedane", "wyprzedawane", "wyprzedzane", "wyprzedzone", "wyprzęgane", "wypstrykane", "wypucowane", "wypuszczane", "wypuszczone", "wypychane", "wypytane", "wypytywane", "wyrąbane", "wyrabiane", "wyrąbywane", "wyratowane", "wyrażane", "wyrażone", "wyrecytowane", "wyręczane", "wyręczone", "wyregulowane", "wyrejestrowane", "wyremontowane", "wyreżyserowane", "wyrobione", "wyrolowane", "wyrośnięte", "wyrównane", "wyrównywane", "wyróżniane", "wyróżnione", "wyrugowane", "wyruszane", "wyrwane", "wyrypane", "wyrysowane", "wyryte", "wyrywane", "wyrządzone", "wyrzeźbione", "wyrżnięte", "wyrzucane", "wyrzucone", "wyrzygane", "wyrzynane", "wyrzywane", "wysączone", "wysadzane", "wysadzone", "wyschnięte", "wyściskane", "wyselekcjonowane", "wysępione", "wysiadywane", "wysiedzone", "wysilane", "wysilone", "wyskakiwane", "wyskalowane", "wyskoczone", "wyskrobane", "wyskubywane", "wysłane", "wyśledzone", "wyślizgiwane", "wyślizgnięte", "wysłowione", "wysłuchane", "wysłuchiwane", "wysmagane", "wysmarkane", "wysmarowane", "wysmażane", "wysmażone", "wyśmiane", "wyśmiewane", "wysmołowane", "wysmyrane", "wyśnione", "wysnute", "wysnuwane", "wysondowane", "wyspecjalizowane", "wyśpiewane", "wyśpiewywane", "wyspowiadane", "wysprzątane", "wysprzedane", "wyssane", "wystartowane", "wystawione", "wysterelizowane", "wysterylizowane", "wystosowane", "wystosowywane", "wystraszone", "wystrojone", "wystrugane", "wystrychnięte", "wystrzegane", "wystrzelane", "wystrzeliwane", "wystrzelone", "wystudzone", "wystukane", "wystukiwane", "wystygnięte", "wysunięte", "wysuszane", "wysuwane", "wyswatane", "wyświadczane", "wyświadczone", "wyświetlane", "wyświetlone", "wyswobodzone", "wysyłane", "wysypane", "wysypywane", "wysysane", "wyszabrowane", "wyszalane", "wyszarpane", "wyszarpnięte", "wyszasowane", "wyszczotkowane", "wyszczuplone", "wyszeptane", "wyszkolone", "wyszlifowane", "wyszorowane", "wyszperane", "wyszukane", "wyszukiwane", "wyszumione", "wyszykowane", "wyszyte", "wytapetowane", "wytargane", "wytargowane", "wytarte", "wytarzane", "wytaszczone", "wytatuowane", "wytchnięte", "wytępione", "wytknięte", "wytłoczone", "wytłumaczone", "wytłumione", "wytoczone", "wytrąbione", "wytrącane", "wytrącone", "wytransmitowane", "wytransportowane", "wytrenowane", "wytresowane", "wytriangulowane", "wytropione", "wytrute", "wytrząsane", "wytrzasnięte", "wytrząśnięte", "wytrzebione", "wytrzepane", "wytrzeszczane", "wytrzeźwiane", "wytrzymane", "wytrzymywane", "wytwarzane", "wytworzone", "wytyczone", "wytykane", "wytypowane", "wyuczone", "wywabiane", "wywabione", "wywąchane", "wywalane", "wywalczone", "wywalone", "wywarte", "wywarzane", "wyważane", "wyważone", "wywęszane", "wywężykowane", "wywiane", "wywiązane", "wywiązywane", "wywierane", "wywiercone", "wywieszane", "wywieszone", "wywietrzone", "wywiezione", "wywijane", "wywindowane", "wywinięte", "wywłaszczone", "wywlekane", "wywnętrznione", "wywnioskowane", "wywodzone", "wywolane", "wywoływane", "wywoskowane", "wywożone", "wywracane", "wywrócone", "wywróżone", "wywyższane", "wyżalone", "wyzbyte", "wyzdrowione", "wyżebrane", "wyżerane", "wyzerowane", "wyzionięte", "wyznaczane", "wyznaczone", "wyznane", "wyznawane", "wyzwalane", "wyzwane", "wyzwolone", "wyzygzakowane", "wyżynane", "wyzyskane", "wyzyskiwane", "wyżyte", "wyzywane", "wyżywane", "wyżywione", "wzbijane", "wzbite", "wzbogacane", "wzbogacone", "wzbraniane", "wzbudzane", "wzbudzone", "wzburzane", "wzburzone", "wżenione", "wzięte", "wzmacnione", "wzmagane", "wzmocnione", "wznawiane", "wzniecane", "wzniecione", "wzniesięte", "wznoszone", "wznowione", "wzorowane", "wzrośnięte", "wzruszone", "wzwyżane", "wzywane", "zaabordowane", "zaadaptowane", "zaadoptowane", "zaadresowane", "zaakcentowane", "zaakceptowane", "zaaklimatyzowane", "zaalarmowane", "zaanektowane", "zaangażowane", "zaanonsowane", "zaapelowane", "zaaplikowane", "zaaportowane", "zaaprobowane", "zaaranżowane", "zaaresztowane", "zaatakowane", "zabaczone", "zabalowane", "zabandażowane", "zabarwione", "zabarykadowane", "zabawiane", "zabawione", "zabepieczane", "zabetonowane", "zabezpieczone", "zabierane", "zabite", "zabłądzone", "zablefowane", "zabłocone", "zablokowane", "zabraniane", "zabrane", "zabrnięte", "zabronione", "zabrudzone", "zabudowane", "zabukowane", "zabulone", "zaburzone", "zabutelkowane", "zacementowane", "zacerowane", "zachciane", "zachęcane", "zachęcone", "zachlapane", "zachodzone", "zachomikowane", "zachorowane", "zachowane", "zachowywane", "zachwalane", "zachwalone", "zachwiane", "zachwycone", "zaciągane", "zaciągnięte", "zaciążone", "zaciekawione", "zaciemniane", "zaciemnione", "zacierane", "zacieśnione", "zacięte", "zacinane", "zaciskane", "zaciśnięte", "zaćmione", "zacumowane", "zacytowane", "zaczadzone", "zaczarowane", "Zaczepiane", "zaczepione", "zaczerpane", "zaczesane", "zaczęte", "zaczołgane", "zaczynane", "zadarte", "zadawalane", "zadawane", "zadbane", "zadebiutowane", "zadedykowane", "zadeklamowane", "zadeklarowane", "zademonstrowane", "zadenucjowane", "zadepeszowane", "zadeptane", "zadeptywane", "zadęte", "zadławione", "żądlone", "zadłużane", "zadłużone", "zadokowane", "zadomowione", "zadowalane", "zadrapane", "zadraśnięte", "zadręczane", "zadręczone", "zadrutowane", "zadurzane", "zadurzone", "zaduszone", "zadymione", "zadźgane", "zadziobane", "zadziwiane", "zadziwione", "zafakturowane", "zafałszowane", "zafarbowane", "zafiksowane", "zafundowane", "zagadane", "zagadnięte", "zagadywane", "zagajone", "zaganiane", "zagapione", "zagarażowane", "zagarniane", "zagarnięte", "zagaszone", "zagazowane", "zagęszczone", "zagięte", "zaginane", "zaginięte", "zagłębiane", "zagłębione", "zagłodzone", "zagłuszane", "zagłuszone", "zagmatwane", "zagnane", "zagnieżdżone", "zagojone", "zagonione", "zagospodarowane", "zagotowane", "zagrabione", "zagradzane", "zagrażane", "zagrodzone", "zagrywane", "zagryzane", "zagryzione", "zagrzane", "zagrzebane", "zagrzewane", "zagubione", "zagwarantowane", "zahaczone", "zahamowane", "zahandlowane", "zaharowane", "zahartowane", "zahipnotyzowane", "zaholowane", "zaimitowane", "zaimplantowane", "zaimplementowane", "zaimprowizowane", "zainaugurowane", "zainfekowane", "zainicjowane", "zainkasowane", "zainscenizowane", "zainspirowane", "zainstalowane", "zainteresowane", "zaintrygowane", "zaintubowane", "zainwestowane", "zaizolowane", "zajadane", "zajane", "zajarane", "zajechane", "zajęte", "zajmowane", "zakablowane", "zakamuflowane", "zakasane", "zakasowane", "zakąszane", "zakatalogowane", "zakatowane", "zakatrupione", "zakazane", "zakażane", "zakazywane", "zakiszone", "zakładane", "zaklasyfikowane", "zaklejane", "zaklejone", "zaklepane", "zaklepywane", "zaklinane", "zaklinowane", "zakłócane", "zakłócone", "zaklopotane", "zakłute", "zakneblowane", "zakodowane", "zakolczykowane", "zakolorowane", "zakołysane", "zakomunikowane", "zakończone", "zakonserwowane", "zakopane", "zakopywane", "zakorzeniane", "zakorzenione", "zakoszone", "zakosztowane", "zakotwiczane", "zakotwiczone", "zakpione", "zakradane", "zakręcane", "zakręcone", "zakreślane", "zakreślone", "zakrwawione", "zakryte", "zakrywane", "zakrzyczane", "zakrzyknięte", "zakrzywiane", "zakrzywione", "zaksięgowane", "zaktualizowane", "zaktywizowane", "zaktywowane", "zakumane", "zakupione", "zakurzone", "zakute", "zakuwane", "zakwaterowane", "zakwestionowae", "zakwitnięte", "załączone", "załadowane", "załagodzone", "zalamane", "zalaminowane", "załamywane", "zalane", "załapane", "załatane", "załatwiane", "załatwione", "zalatywane", "zalecane", "zalecone", "zaleczone", "zalegalizowane", "zalegane", "zalepiane", "zalepione", "zalewane", "zaliczane", "zaliczone", "załkane", "zalogowane", "żałowane", "założone", "zaludnione", "zamacane", "zamachnięte", "zamącone", "zamalowane", "zamanewrowane", "zamanifestowane", "zamarkowane", "zamartwiane", "zamarynowane", "zamarzane", "zamarznięte", "zamaskowane", "zamawiane", "zamazane", "zamazywane", "zamęczane", "zamęczone", "zameldowane", "zamelinowane", "zamerykanizowane", "zamiatane", "zamieniane", "zamienione", "zamieszane", "zamieszczane", "zamieszczone", "zamieszkane", "zamieszkiwane", "zaminowane", "zamknięte", "zamocowane", "zamoczone", "zamontowane", "zamordowane", "zamortyzowane", "zamotane", "zamówione", "zamrażane", "zamroczone", "zamrożone", "zamulane", "zamurowane", "zamydlone", "zamykane", "zanalizowane", "zanegowane", "zaniechane", "zanieczyszczane", "zanieczyszczone", "zaniedbane", "zaniedbywane", "zaniepokojone", "zaniesione", "zanihilowane", "zanikane", "zaniknięte", "zaniżane", "zaniżone", "zanoszone", "zanotowane", "zanucone", "zanudzane", "zanudzone", "zanurzane", "zanurzone", "zanużone", "zaobaczone", "zaobserwowane", "zaoferowane", "zaofiarowane", "zaogniane", "zaognione", "zaokrąglane", "zaokrąglone", "zaokrętowane", "zaopatrywane", "zaopatrzone", "zaopiekowane", "zaorane", "zaostrzane", "zaostrzone", "zaoszczędzone", "zapadane", "zapakowane", "zapalane", "zapalone", "zapamiętane", "zapamiętywane", "zapanowane", "zaparkowane", "zaparowywane", "zaparzane", "zaparzone", "zapaskudzone", "zapauzowane", "zapchane", "zapędzane", "zapełniane", "zapełnione", "zaperfumowane", "zapeszane", "zapewniane", "zapewnione", "zapieczętowane", "zapierane", "zapięte", "zapijane", "zapinane", "zapisane", "zapisuwane", "zapite", "zapłacone", "zapładniane", "zaplamione", "zaplanowane", "zaplątane", "zapłodnione", "zaplombowane", "zapobiegane", "zapodane", "zapodawane", "zapodziane", "zapokojone", "zapolowane", "zapominane", "zapomniane", "zapowiadane", "zapowiedziane", "zapoznane", "zapoznawane", "zapożyczone", "zapracowywane", "zaprane", "zaprasowywane", "zapraszane", "zaprawione", "zaprenumerowane", "zaprezentowane", "Zaprogramowane", "zaprojektowane", "zaproponowane", "zaproszone", "zaprotokołowane", "zaprowadzane", "zaprowadzone", "zaprzątane", "zaprzeczane", "zaprzeczone", "zaprzedane", "zaprzedawane", "zaprzęgane", "zaprzepaszczane", "zaprzestane", "zaprzestawane", "zaprzyjaźnione", "zapudłowane", "zapunktowane", "zapuszczane", "zapuszczone", "zapuszkowane", "zapychane", "zapylane", "zapylone", "zapytane", "zarabiane", "zaranżowane", "zarażane", "zarażone", "zarecytowane", "zaręczane", "zaręczone", "zarejestrowane", "zareklamowane", "zarekomendowane", "zarekomondowane", "zarekwirowane", "zarezerwowane", "zarobione", "żartowane", "zarwane", "zaryglowane", "zarymowane", "zarysowane", "zarywane", "zaryzykowane", "zarządzane", "zarżnięte", "zarzucane", "zarzynane", "zasadzone", "zaścielone", "zasegurowane", "zaserwowane", "zasiadane", "zasiane", "zasiedlone", "zasięgane", "zasięgnięte", "zasiewane", "zasilane", "zasilone", "zaskakiwane", "zaskarbione", "zaskoczone", "zaskrobane", "zasłaniane", "zaślepiane", "zaślepione", "zasłodzone", "zasłonione", "zasłużone", "zasmakowane", "zaśmiecane", "zaśmiecone", "zasmradzane", "zasmrodzone", "zasmucane", "zasmucone", "zasolone", "zaspakajane", "zaśpiewane", "zaspokajane", "zaspokojone", "zasponsorowane", "zaśrubowywane", "zassane", "zastane", "zastąpione", "zastawiane", "zastawione", "zastępowane", "zastopowane", "zastosowane", "zastraszane", "zastraszone", "zastrzelone", "zasugerowane", "zasunięte", "zasuwane", "zaświadczone", "zaświecone", "zaświonione", "zasyfione", "zasygnalizowane", "zasymilowane", "zasymulowane", "zasypane", "zasypywane", "zasysane", "zaszachowane", "zaszantażowane", "zaszargane", "zaszczepiane", "zaszczepione", "zaszczute", "zaszczycane", "zaszczycone", "zaszeptane", "zaszeregowane", "zaszlachtowane", "zasznurowane", "zaszpachlowane", "zasztyletowane", "zaszufladkowane", "zaszyfrowane", "zaszyte", "zaszywane", "zataczane", "zatajane", "zatajone", "zatamowane", "zatankowane", "zatapiane", "zatargane", "zatarte", "zatelegrafowane", "zatemperowane", "zatęsknione", "zatkane", "zatknięte", "zatoczone", "zatonięte", "zatopione", "zatracane", "zatracone", "zatriumfowane", "zatrudniane", "zatrudnione", "zatrute", "zatruwane", "zatrzaskiwane", "zatrzaśnięte", "zatrząśnięte", "zatrzymane", "zatrzymywane", "zatuszowane", "zatwierdzane", "zatwierdzone", "zatykane", "zatynkowane", "zatytułowane", "zauploadowane", "zauroczone", "zautomatyzowane", "zauważane", "zauważone", "zawadzane", "zawalane", "zawalczone", "zawalone", "zawarte", "zaważone", "zawdzięczane", "zawetowane", "zawężone", "zawiadamiane", "zawiadomione", "zawiązane", "zawiązywane", "zawiedzone", "zawierane", "zawierzone", "zawieszane", "zawieszone", "zawiezione", "zawijane", "zawinięte", "zawinione", "zawiśnięte", "zawitane", "zawładnięte", "zawłaszczone", "zawodzone", "zawojowane", "zawołane", "zawoskowane", "zawożone", "zawracane", "zawrócone", "zawstydzane", "zażądane", "zażartowane", "zazdroszczone", "zażegnane", "zażenowane", "zaznaczane", "zaznajomione", "zaznane", "zaznawane", "zażyczone", "zażyte", "zażywane", "zbaczane", "zbadane", "zbagatelizowane", "zbajerowane", "zbałamucone", "zbalansowane", "zbalsamowane", "zbankrutowane", "zbawiane", "zbawione", "zbesztane", "zbezczeszczone", "zbierane", "zbijane", "zbite", "zbliżone", "zbluzgane", "zbojkotowane", "zbrojone", "zbrukane", "zbszczecone", "zbudowane", "zbudzone", "zbuntowane", "zburzone", "zbyte", "zbywane", "zchwytane", "zcięte", "zciszone", "zdane", "zdarte", "zdeaktywowane", "zdecydowane", "zdefiniowane", "zdeflorowane", "zdegradowane", "zdejmowane", "zdeklarowane", "zdekodowane", "zdekompresowane", "zdekoncentrowane", "zdekonstruowane", "zdelegalizowane", "zdemaskowane", "zdementowane", "zdemolowane", "zdemontowane", "zdemoralizowane", "zdenerwowane", "zdeponowane", "zdeprymowane", "zdeptane", "zderzane", "zderzone", "zdestabilizowane", "Zdetonowane", "zdetronizowane", "zdewastowane", "zdewaulowane", "zdezerterowane", "zdezintegrowane", "zdezorientowane", "zdezynfektowane", "zdiagnozowane", "zdjęte", "zdławione", "zdmuchiwane", "zdmuchnięte", "zdobyte", "zdobywane", "zdołowane", "zdominowane", "zdopingowane", "zdrabniane", "zdradzane", "zdradzone", "zdrapane", "zdrapywane", "zdrutowane", "zdruzgotane", "zduplikowane", "zduszone", "zdwojone", "zdyscyplinowane", "zdyskredytowane", "zdyskwalifikowane", "zdystansowane", "zdzielone", "zdzierane", "zdzierżone", "zdziesiątkowane", "Zdzwonione", "zebrane", "zechciane", "zedytowane", "żegnane", "żenione", "zepchnięte", "zepsute", "żerowane", "zerwane", "zerżnięte", "zeskakiwane", "zeskanowane", "zeskrobywane", "zesłane", "ześlizgiwane", "ześlizgnięte", "zesmolone", "zespawiane", "zespolone", "zessane", "zestawiane", "zestawione", "zestresowane", "zestrzeliwane", "zestrzelone", "zeswatane", "zeszklone", "zeszlifowane", "zetknięte", "zezłoszczone", "zeznane", "zeznawane", "zezwalane", "zezwolone", "zfinansowane", "zgadane", "zgadywane", "zgajane", "zganione", "zgarnięte", "zgaśnięte", "zgaszone", "zgięte", "zginane", "zgładzone", "zgłaszane", "zgłębiane", "zgłębione", "zgłośnione", "zgłoszone", "zgłuszone", "zgniatane", "zgniecione", "zgnite", "zgnojone", "zgodzone", "zgolone", "zgonione", "zgotowane", "zgrabione", "zgrillowane", "zgromadzane", "zgromadzone", "zgrupowane", "zgrzeszone", "zgrzytane", "zgubione", "zgwałcone", "zhackowane", "zhakowane", "zhańbione", "zhandlowane", "zharmonizowane", "zidentyfikowane", "ziewane", "zignorowane", "zilustrowane", "zinfiltrowane", "zintegrowane", "zintensyfikowane", "zinterpretowane", "zinwentaryzowane", "zirytowane", "zjadane", "zjawiane", "zjednane", "zjednoczone", "zjedzone", "zjeżdżone", "zkontaktowane", "zkserowane", "złączone", "złagodzone", "złajane", "złamane", "zlane", "złapane", "zlecane", "zlecone", "zlekceważone", "zlepiane", "zlepione", "zlewane", "zlicytowane", "zliczane", "zliczone", "zlikwidowane", "zlinczowane", "zlitowane", "zlizane", "zlizywane", "złoite", "zlokalizowane", "złomowane", "żłopane", "złowione", "złożone", "złupione", "złuszczane", "zluzowane", "zmacane", "zmącone", "zmagane", "zmagazynowane", "zmajstrowane", "zmaksylizowane", "zmanipulowane", "zmarnowane", "zmartwychwstane", "zmarznięte", "zmasakrowane", "zmaterializowane", "zmawiane", "zmazane", "zmazywane", "zmbobardowane", "zmiatane", "zmiażdżone", "zmiękczone", "zmielone", "zmieniane", "zmienione", "zmierzane", "zmierzone", "zmierzwione", "zmieszane", "zmieszczone", "zmiksowane", "zminiaturyzowane", "zminimalizowane", "zmniejszane", "zmniejszone", "zmobilizowane", "zmoczone", "zmodernizowane", "zmodyfikowane", "zmoknięte", "zmonopolizowane", "zmontowane", "zmostkowane", "zmotywowane", "zmówione", "zmrożone", "zmrużone", "zmumifikowane", "zmuszane", "zmuszone", "zmutowane", "zmyślane", "zmyte", "zmywane", "znacjonalizowane", "znajdowane", "znajdywane", "znakowane", "znalezione", "znane", "znęcane", "zneutralizowane", "zniechęcone", "znieczulone", "zniekształcane", "zniekształcone", "znienawidzone", "znieprawione", "zniesione", "zniesławiane", "zniesławione", "zniewalane", "znieważane", "znieważone", "zniewolone", "zniszczone", "zniweczone", "zniwelowane", "zniżane", "zniżone", "znokautowane", "znormalnione", "znoszone", "znudzone", "zobaczone", "zobowiązane", "zobrazowane", "zogniskowane", "żonglowane", "zoomowane", "zoperowane", "zoptymalizowane", "zorbite", "zorganizowane", "zorientowane", "zostawiane", "zostawione", "zpłacone", "zprowokowane", "zrabowane", "zrachowane", "zracjonalizowane", "zranione", "zraportowane", "zrażane", "zrażone", "zrealizowane", "zrecenzowane", "zredagowane", "zredukowane", "zreferowane", "zreformowane", "zrefowane", "zrefundowane", "zregenerowane", "zrehabilitowane", "zreinkarnowane", "zreintegrowane", "zrekonfigurowane", "zrekonstruowane", "zrekrutowane", "zrekrystalizowane", "zrelacjonowane", "zrelaksowane", "zremiksowane", "zremisowane", "zreorganizowane", "zreperowane", "zreplikowane", "zresetowane", "zresocjalizowane", "zrestartowane", "zrestrukturyzowane", "zrewanżowane", "zrewidowane", "zrewolucjonizowane", "zrezygnowane", "zrobione", "zrolowane", "zroszone", "zrównane", "zrównoważone", "zrównywane", "zróżnicowane", "zrozumiane", "zrugane", "zruinowane", "zrujnowane", "zrymowane", "zrywane", "zrzędzone", "zrzeszone", "zrzucane", "zrzucone", "zsumowane", "zsunięte", "zsuwane", "zsynchronizowane", "zsyntetyzowane", "zsypywane", "zszargane", "zszokowane", "zszyte", "zszywane", "ztarte", "żute", "zutylizowane", "zużyte", "zużywane", "zwabiane", "zwabione", "zwalane", "zwalczone", "zwalniane", "zwalone", "zwane", "zwaporyzowane", "zwątpione", "zważane", "zważone", "zwędzone", "zwerbalizowane", "zwerbowane", "zweryfikowane", "zwęszone", "zwężone", "zwiastowane", "związane", "związywane", "zwichnięte", "zwiedzane", "zwiedzone", "zwiększone", "zwieńczone", "zwierzane", "zwieszane", "zwieszone", "zwietrzone", "zwijane", "zwilżone", "zwinięte", "zwizualizowane", "zwlekane", "zwodowane", "zwodzone", "zwołane", "zwolnione", "zwoływane", "zwożone", "zwracane", "zwrócone", "zwyciężane", "zwymiotowane", "życzone", "żygane", "zygzakowane", "zyskane", "zyskiwane", "żyte", "zżarte", "zżerane", "zżynane", "zżyte", "bici", "brnięci", "capnięci", "chlapnięci", "chuci", "ciachnięci", "ciągnięci", "cięci", "ciśnięci", "cmoknięci", "cofnięci", "czuci", "czyci", "darci", "dmuchnięci", "dobici", "dobyci", "dociągnięci", "docięci", "dociśnięci", "doglądnięci", "domknięci", "domyci", "dopadnięci", "dopchnięci", "dopięci", "dopici", "dopłynięci", "doścignięci", "dosięgnięci", "dosunięci", "doszyci", "dotknięci", "dożyci", "drapnięci", "draśnięci", "drgnięci", "dźgnięci", "dziabnięci", "dźwignięci", "gięci", "gnici", "golnięci", "gruchnięci", "gwizdnięci", "hajtnięci", "huknięci", "kantowanci", "kiwnięci", "klapnięci", "klepnięci", "kliknięci", "kłuci", "knuci", "kojfnięci", "kopnięci", "kpici", "kryci", "krzepnięci", "krzyknięci", "kuci", "liznięci", "łyknięci", "machnięci", "marznięci", "maznięci", "minięci", "myci", "nabici", "nabyci", "naciągnięci", "nacięci", "naciśnięci", "nadciągnięci", "nadcięci", "nadszarpnięci", "nadużyci", "nagięci", "najęci", "nakłuci", "nakryci", "napadnięci", "napięci", "napluci", "napoczęci", "napsuci", "nasunięci", "naszyci", "natarci", "natchnięci", "natknięci", "natrząsnięci", "nawinięci", "obciągnięci", "obcięci", "obdarci", "obici", "objęci", "obmyci", "obsunięci", "obtarci", "obwinięci", "obyci", "ochłonięci", "ocknięci", "ocuci", "odarci", "odbici", "odbyci", "odciągnięci", "odcięci", "odcisnięci", "odczuci", "odepchnięci", "odetnięci", "odgadnięci", "odgarnięci", "odgięci", "odjęci", "odkryci", "odkuci", "odparci", "odpięci", "odpłynięci", "odpruci", "odrośnięci", "odsłonięci", "odsunięci", "odtruci", "odwinięci", "odżyci", "ogarnięci", "okryci", "okrzyknięci", "olśnięci", "ominięci", "opadnięci", "oparci", "opchnięci", "opici", "opluci", "orżnięci", "osiągnięci", "oślepnięci", "ostrzelici", "osunięci", "otarci", "otruci", "otrząśnięci", "owinięci", "ożyci", "pacnąci", "palnięci", "parci", "pchnięci", "pęknięci", "pięci", "pici", "pluci", "pobici", "pochłonięci", "pociągnięci", "pocięci", "poczęci", "poczuci", "podarci", "podbici", "podciągnięci", "podcięci", "podjęci", "podkradnięci", "podkuci", "podmyci", "podnajęci", "podpadnięci", "podparci", "podpięci", "podpłynięci", "podsunięci", "podszyci", "podtarci", "podwinięci", "podźwignięci", "pojęci", "pojmięci", "pokłuci", "pokryci", "połknięci", "pominięci", "pomknięci", "poparci", "popchnięci", "popici", "popsuci", "posunięci", "poszczuci", "potarci", "potknięci", "potruci", "potrząsnięci", "potrząśnięci", "powici", "powściągnięci", "powzięci", "pożarci", "pozbyci", "pożuci", "pożyci", "pruci", "pryśnięci", "przebiegnięci", "przebici", "przebyci", "przeciągnięci", "przecięci", "przeciśnięci", "przeczuci", "przedarci", "przedsiewzięci", "przegięci", "przeglądnięci", "przejęci", "przeklęci", "przeklnięci", "przekłuci", "przekuci", "przełknięci", "przełyknięci", "przeminięci", "przemknięci", "przemyci", "przeniknięci", "przepchnięci", "przepici", "przepłynięci", "przerośnięci", "prześcignięci", "prześlizgnięci", "przesłonięci", "przesunięci", "przeszyci", "przetarci", "przetrząśnięci", "przewinięci", "przeżarci", "przeżuci", "przeżyci", "przybici", "przyciągnięci", "przycięci", "przyciśnięci", "przydepnięci", "przygarnięci", "przyjęci", "przykryci", "przykuci", "przymknięci", "przypadnięci", "przyparci", "przypięci", "przypłynięci", "przysiągnięci", "przysunięci", "przyszyci", "przytarci", "przytrzasnięci", "przywarci", "pstryknięci", "psuci", "puchnięci", "puknięci", "rozbici", "rozbłyśnięci", "rozciągnięci", "rozcięci", "rozgarnięci", "rozgięci", "rozkuci", "rozkwitnięci", "rozminięci", "rozmyci", "rozpięci", "rozpłynięci", "rozpoczęci", "rozpruci", "rozrośnięci", "rozstrzygnięci", "rozsunięci", "roztarci", "rozwarci", "rozwinięci", "runięci", "ryci", "rżnięci", "ściągnięci", "ścięci", "ściśnięci", "skrobnięci", "skryci", "skrzepnięci", "skrzyci", "skubnięci", "skuci", "smuci", "snuci", "spięci", "spici", "spłonięci", "spoczęci", "spożyci", "sprzątnięci", "stnięci", "struci", "strząśnięci", "strzepnięci", "stuknięci", "sunięci", "sypnięci", "szarpnięci", "szczuci", "szepnięci", "sztachnięci", "szturchnięci", "szyci", "targnięci", "tarci", "tchnięci", "tknięci", "truci", "tryśnięci", "trzasnięci", "trzepnięci", "ubici", "uciągnięci", "ucięci", "uciśnięci", "uczuci", "udźwignięci", "ugięci", "ugrzęznięci", "uiścici", "ujęci", "ukłuci", "uknuci", "ukryci", "ukuci", "umknięci", "umyci", "uniknięci", "uparci", "upchnięci", "upięci", "upici", "upłynięci", "uprzątnięci", "urośnięci", "urżnięci", "uschnięci", "uściśnięci", "usunięci", "uszczypnięci", "uszyci", "utarci", "utknięci", "uwinięci", "uwici", "użyci", "walnięci", "wbici", "wchłonięci", "wciągnięci", "wcięci", "wciśnięci", "wczuci", "wdarci", "wdepnięci", "wepchnięci", "wetknięci", "wici", "wkłuci", "wkuci", "wniknięci", "wpięci", "wryci", "wślizgnięci", "wsparci", "wspięci", "współczuci", "współżyci", "wstrząśnięci", "wstrzyknięci", "wsunięci", "wszczęci", "wszyci", "wtargnięci", "wtarci", "wybici", "wyblaknięci", "wybuchnięci", "wyciągnięci", "wycięci", "wyciśnięci", "wyczuci", "wydobyci", "wyfrunięci", "wygarnięci", "wygaśnięci", "wygięci", "wyjęci", "wykluci", "wykłuci", "wykopnięci", "wykpici", "wykradnięci", "wykryci", "wykrzyknięci", "wykuci", "wyminięci", "wymknięci", "wymsknięci", "wymyci", "wynajęci", "wyniknięci", "wyparci", "wypchnięci", "wypięci", "wypici", "wypluci", "wypoczęci", "wypruci", "wyrośnięci", "wyryci", "wyrżnięci", "wyschnięci", "wyślizgnięci", "wysnuci", "wystrychnięci", "wystygnięci", "wysunięci", "wyszarpnięci", "wyszyci", "wytarci", "wytchnięci", "wytknięci", "wytruci", "wytrzasnięci", "wytrząśnięci", "wywarci", "wywinięci", "wyzbyci", "wyzionięci", "wyżyci", "wzbici", "wzięci", "wzniesięci", "wzrośnięci", "zabici", "zabrnięci", "zaciągnięci", "zacięci", "zaciśnięci", "zaczęci", "zadarci", "zadęci", "zadraśnięci", "zagadnięci", "zagarnięci", "zagięci", "zaginięci", "zajęci", "zakłuci", "zakryci", "zakrzyknięci", "zakuci", "zakwitnięci", "zamachnięci", "zamarznięci", "zamknięci", "zaniknięci", "zapięci", "zapici", "zarżnięci", "zasięgnięci", "zasunięci", "zaszczuci", "zaszyci", "zatarci", "zatknięci", "zatonięci", "zatruci", "zatrzaśnięci", "zatrząśnięci", "zawarci", "zawinięci", "zawiśnięci", "zawładnięci", "zażyci", "zbici", "zbyci", "zcięci", "zdarci", "zdjęci", "zdmuchnięci", "zdobyci", "zepchnięci", "zepsuci", "zerżnięci", "ześlizgnięci", "zetknięci", "zgarnięci", "zgaśnięci", "zgięci", "zgnici", "złoici", "zmarznięci", "zmoknięci", "zmyci", "zorbici", "zsunięci", "zszyci", "ztarci", "żuci", "zużyci", "zwichnięci", "zwinięci", "życi", "zżarci", "zżyci", "abdykowani", "absorbowani", "adaptowani", "administrowani", "adoptowani", "adorowani", "adresowani", "afiszowani", "agitowani", "akcentowani", "akceptowani", "aklimatyzowani", "akompaniowani", "aktualizowani", "aktywowani", "akumulowani", "alaromowani", "alienowani", "amerykanizowani", "amortyzowani", "amputowani", "analizowani", "angażowani", "anihilowani", "animowani", "anonsowani", "antropomorfizowani", "antydatowani", "anulowani", "apelowani", "aportowani", "aranżowani", "archiwizowani", "aresztowani", "argumentowani", "artykułowani", "ascendowani", "asekurowani", "asymilowani", "asystowani", "atakowani", "autoryzowani", "awanturowani", "babrani", "baczeni", "badani", "bagatelizowani", "bajerowani", "bałamuceni", "balangowani", "balansowani", "banalizowani", "bandażowani", "bankrutowani", "baraszkowani", "barwieni", "bawieni", "bazgrani", "bazowani", "bębnieni", "bełkotani", "besztani", "biczowani", "błagani", "błaznowani", "blefowani", "błogosławieni", "blokowani", "bluzgani", "błyskani", "boczeni", "bogaceni", "bojkotowani", "boksowani", "bombardowani", "bopowani", "borowani", "brandzlowani", "brani", "brasowani", "bratani", "brodzeni", "bronieni", "brudzeni", "brylowani", "budowani", "budzeni", "bujani", "buleni", "bulwersowani", "bumelowani", "burzeni", "butelkowani", "bywani", "cackani", "całowani", "cechowani", "celebrowani", "celowani", "cenieni", "cenzurowani", "chciani", "chlani", "chlapani", "chlastani", "chłodzeni", "chlostani", "chlubieni", "chodowani", "chomikowani", "chorowani", "chowani", "chronieni", "chrupani", "chrzczeni", "chwaleni", "chwyceni", "chwytani", "chybotani", "chyleni", "ciągani", "ciemiężeni", "cierpiani", "cieszeni", "ciskani", "ciułani", "cmokani", "cofani", "ćpani", "cuceni", "cudzołożeni", "cumowani", "ćwiartowani", "ćwiczeni", "cykani", "cytowani", "czajeni", "czarowani", "czczeni", "czepiani", "czepieni", "czerpani", "czesani", "częstowani", "czochrani", "czołgani", "czytani", "darowani", "darzeni", "datowani", "dawani", "dbani", "deaktywowani", "debatowani", "dedukowani", "dedykowani", "defibrylowani", "defilowani", "definiowani", "defraudowani", "degradowani", "degustowani", "deklamowani", "deklarowani", "dekodowani", "dekompresowani", "dekorowani", "dekretowani", "delegowani", "delektowani", "deliberowani", "demaskowani", "dementowani", "demolowani", "demonizowani", "demonstrowani", "demoralizowani", "denerwowani", "denuncjowani", "depeszowani", "depilowani", "deportowani", "deprawowani", "deptani", "deratyzowani", "destabilizowani", "destylowani", "desygnowani", "determinowani", "detonowani", "dewastowani", "dewaulowani", "dezaktywowani", "dezorientowani", "dezynfekowani", "diagnozowani", "dilowani", "dłubani", "dłużeni", "dmuchani", "dobiegani", "dobierani", "dobijani", "dobrani", "dobudzeni", "doceniani", "docenieni", "dochodzeni", "dochowani", "dochowywani", "dociekani", "docinani", "dociskani", "doczekani", "doczepieni", "doczołgani", "doczyszczeni", "doczytani", "dodani", "dodawani", "dodrukowani", "dodrukowywani", "dofinansowani", "dofinansowywani", "dogadani", "dogadywani", "dogadzani", "doganiani", "doglądani", "dognani", "dogodzeni", "dogonieni", "dograni", "dogryzani", "dogryzioni", "dogrzani", "dogrzebani", "doinformowani", "dojeżdżani", "dojeni", "dojrzani", "dojrzewani", "dokańczani", "dokarmiani", "dokarmieni", "dokazani", "dokazywani", "dokładani", "doklejeni", "dokonani", "dokończeni", "dokonywani", "dokopani", "dokopywani", "dokowani", "dokręcani", "dokręceni", "dokształcani", "dokształceni", "dokuczani", "dokumentowani", "dokupieni", "dołączani", "dołączeni", "doładowani", "dolani", "dolewani", "doliczeni", "dołowani", "dołożeni", "domagani", "domalowani", "domniewywani", "domówieni", "domyślani", "domyśleni", "doniesieni", "donoszeni", "dopadani", "dopakowani", "dopaleni", "dopasowani", "dopasowywani", "dopatrywani", "dopatrzeni", "dopchani", "dopełniani", "dopełnieni", "dopieszczeni", "dopijani", "dopilnowani", "dopingowani", "dopisani", "dopisywani", "dopłacani", "dopłaceni", "dopolerowani", "dopompowani", "dopowiedziani", "dopracowani", "dopracowywani", "doprani", "doprawieni", "doprecyzowani", "doproszeni", "doprowadzani", "doprowadzeni", "dopucowani", "dopuszczani", "dopuszczeni", "dopytywani", "dorabiani", "doradzani", "doradzeni", "doręczani", "doręczeni", "dorobieni", "dorównani", "dorównywani", "dorwani", "dorysowani", "dorzucani", "dorzuceni", "dosiadani", "doskoczeni", "doskonaleni", "dosładzani", "dosłani", "dosłyszani", "dosoleni", "dośrodkowani", "dossani", "dostani", "dostąpieni", "dostarczani", "dostarczeni", "dostawani", "dostawiani", "dostawieni", "dostosowani", "dostosowywani", "dostrajani", "dostrojeni", "dostrzegani", "dosuwani", "doświadczani", "doświetleni", "dosypani", "dosypywani", "doszkoleni", "doszlifowani", "doszorowani", "doszukani", "doszukiwani", "dotankowani", "dotankowywani", "dotargani", "dotaszczeni", "dotlenieni", "dotłumaczeni", "dotowani", "dotrwani", "dotrzymani", "dotrzymywani", "dotykani", "douczani", "douczeni", "dowaleni", "dowiezieni", "dowodzeni", "dowożeni", "doznani", "doznawani", "dozorowani", "dozowani", "dożywieni", "dramatyzowani", "drapani", "drażnieni", "drążeni", "dręczeni", "drenowani", "drgani", "drukowani", "dryblowani", "dryfowani", "drzemani", "dubbingowani", "dublowani", "duplikowani", "duszeni", "dworowani", "dygotani", "dyktowani", "dymani", "dymieni", "dyrygowani", "dyscyplinowani", "dyskredytowani", "dyskryminowani", "dyskutowani", "dyskwalifikowani", "dysponowani", "dystansowani", "dystrybuowani", "dywagowani", "dźgani", "dziedziczeni", "dziękowani", "dzieleni", "dziergani", "dzierżeni", "dziobani", "dziurawieni", "dziurkowani", "dźwigani", "edukowani", "edytowani", "egzaminowani", "egzekutowani", "egzekwowani", "ekscytowani", "ekshumowani", "ekskomunikowani", "eksmitowani", "ekspandowani", "eksperymentowani", "eksploatowani", "eksplorowani", "eksponowani", "eksportowani", "eksterminowani", "ekstradowani", "ekstrapolowani", "eliminowani", "emancypowani", "emigrowani", "emitowani", "energetyzowani", "eskortowani", "etykietowani", "ewakuowani", "ewaluowani", "fabrykowani", "falowani", "fałszowani", "farbowani", "faszerowani", "faulowani", "faworyzowani", "fechtowani", "fermentowani", "ferowani", "figurowani", "filetowani", "filmowani", "filtrowani", "finalizowani", "finansowani", "firmowani", "fleszowani", "folgowani", "formułowani", "forsowani", "fotografowani", "fundowani", "gadani", "ganiani", "garbieni", "gardzeni", "garnirowani", "gaszeni", "gawędzeni", "gaworzeni", "gazowani", "gdakani", "gderani", "generalizowani", "generowani", "gilgotani", "gładzeni", "głaskani", "głodowani", "głodzeni", "gloryfikowani", "głosowani", "głoszeni", "głowieni", "gmatwani", "gmerani", "gnani", "gnębieni", "gnieceni", "gnojeni", "godzeni", "goleni", "gonieni", "googlowani", "gospodarowani", "goszczeni", "gotowani", "grabieni", "grani", "grasowani", "gratulowani", "grillowani", "grilowani", "gromadzeni", "gromieni", "grożeni", "gruchani", "grupowani", "grywani", "gryzieni", "grzani", "grzechotani", "gubieni", "gustowani", "gwałceni", "gwarantowani", "gwizdani", "hackowani", "haftowani", "hamowani", "hańbieni", "handlowani", "harcowani", "harmonizowani", "harowani", "hartowani", "hibernowani", "hipnotyzowani", "hodowani", "holowani", "hołubieni", "honorowani", "hospitalizowani", "hulani", "huśtani", "idealizowani", "identyfikowani", "ignorowani", "igrani", "ilustrowani", "imitowani", "implantowani", "implodowani", "imponowani", "importowani", "improwizowani", "indokrynowani", "indukowani", "infekowani", "infiltrowani", "informowani", "ingerowani", "inhalowani", "inscenizowani", "inspirowani", "instalowani", "instruowani", "insynuowani", "integrowani", "interpretowani", "interweniowani", "intonowani", "intubowani", "inwestowani", "inwigilowani", "irytowani", "iskrzeni", "izolowani", "jadani", "jawieni", "jazgotani", "jednoczeni", "jedzeni", "kablowani", "kadzeni", "kalani", "kaleczeni", "kalkulowani", "kamerowani", "kamienowani", "kamuflowani", "kanalizowani", "kąpani", "kapitulowani", "kapowani", "karani", "karbonizowani", "karceni", "karczowani", "karmieni", "kartkowani", "kąsani", "kasowani", "kastrowani", "katalogowani", "katapultowani", "katowani", "katrupieni", "kierowani", "kimani", "kiszeni", "kiwani", "kłaniani", "klapani", "klarowani", "klasyfikowani", "klębieni", "klejeni", "klepani", "klikani", "klonowani", "kłopotani", "knoceni", "kochani", "koczowani", "kodowani", "kojarzeni", "kojeni", "kolekcjonowani", "kolektywizowani", "kolidowani", "kolonizowani", "kolorowani", "koloryzowani", "kołowani", "kołysani", "kombinowani", "komenderowani", "komentowani", "komercjalizowani", "kompensowani", "komplementowani", "komplikowani", "komponowani", "kompromitowani", "komunikowani", "konani", "koncentrowani", "kończeni", "konfabulowani", "konfiskowani", "konfrontowani", "konserwowani", "konspirowani", "konstruowani", "konsultowani", "konsumowani", "kontaktowani", "kontestowani", "kontrastowani", "kontrolowani", "kontrowani", "kontynuowani", "kontynuuowani", "konwertowani", "konwojowani", "koordynowani", "kopani", "kopceni", "kopiowani", "kopulowani", "korelowani", "korkowani", "koronowani", "korygowani", "korzystani", "koszeni", "kotwiczeni", "kozaczeni", "kozłowani", "kradzieni", "krajani", "krążeni", "kręceni", "kremowani", "kreowani", "krochmaleni", "krojeni", "kropieni", "kruszeni", "krystalizowani", "krytykowani", "krzyczani", "krzywdzeni", "krzywieni", "krzyżowani", "kserowani", "księgowani", "kształceni", "kształtowani", "kuleni", "kultywowani", "kumulowani", "kupczeni", "kupieni", "kupowani", "kupywani", "kurczeni", "kurowani", "kursowani", "kurzeni", "kuszeni", "kwalifikowani", "kwestionowani", "łączeni", "ładowani", "łagodzeni", "łajdaczeni", "lakierowani", "łamani", "lamentowani", "lansowani", "lani", "łapani", "łaskotani", "łaszeni", "latani", "łatani", "lawirowani", "leczeni", "legalizowani", "legitymowani", "lekceważeni", "lepieni", "lewitowani", "liberowani", "licencjonowani", "licytowani", "liczeni", "likwidowani", "linczowani", "liniowani", "literowani", "litowani", "lizani", "lobbowani", "lokalizowani", "losowani", "łowieni", "łożeni", "lubiani", "łudzeni", "lunatykowani", "łupani", "łupieni", "łuskani", "lustrowani", "łuszczeni", "luzowani", "łykani", "łyżeczkowani", "macani", "machani", "mąceni", "maczani", "maganyzowani", "maglowani", "majaczeni", "majsterkowani", "majtani", "maksymalizowani", "malowani", "maltretowani", "mamieni", "mamrotani", "manewrowani", "manifestowani", "manipulowani", "markowani", "marnotrawieni", "marnowani", "marszczeni", "marynowani", "masakrowani", "maskowani", "masowani", "masturbowani", "mataczeni", "materializowani", "mawiani", "mazani", "męczeni", "meldowani", "merdani", "metabolizowani", "miażdżeni", "mieleni", "mierzeni", "mierzwieni", "mieszani", "miętoleni", "migani", "migdaleni", "migotani", "mijani", "miksowani", "milowani", "minimalizowani", "miotani", "mistyfikowani", "mitygowani", "mizdrzeni", "mlani", "mniemani", "mnożeni", "mobilizowani", "mocowani", "moczeni", "modelowani", "modernizowani", "modleni", "modulowani", "modyfikowani", "molestowani", "monitorowani", "monopolizowani", "montowani", "mordowani", "motywowani", "mrożeni", "mrugani", "mrużeni", "muskani", "mutowani", "mydleni", "myleni", "myszkowani", "nabazgrani", "nabiegani", "nabierani", "nabrani", "nabrojeni", "nabrudzeni", "nabywani", "nacelowani", "nachapani", "nachodzeni", "nachwaleni", "nachyleni", "naciągani", "nacierani", "nacinani", "naciskani", "nacjonalizowani", "naczepieni", "nadani", "nadawani", "nadchodzeni", "nadciągani", "nadesłani", "nadgonieni", "nadgryzani", "nadgryzieni", "nadinterpretowani", "nadłożeni", "nadmieniani", "nadmienieni", "nadmuchani", "nadrabiani", "nadrobieni", "nadskakiwani", "nadsłuchiwani", "nadstawiani", "nadstawieni", "naduszeni", "nadużywani", "nadwerężani", "nadwyrężani", "nadwyrężeni", "nadziani", "nadzorowani", "naelektryzowani", "nafaszerowani", "nagabywani", "nagadani", "naginani", "nagłaszani", "nagłośnieni", "nagonieni", "nagradzani", "nagrani", "nagrodzeni", "nagromadzeni", "nagrywani", "nagryzmoleni", "nagrzani", "nagrzebani", "nagrzewani", "nagwizdani", "naigrywani", "najechani", "najmowani", "nakarmiani", "nakarmieni", "nakazani", "nakazywani", "nakierowani", "nakierowywani", "nakładani", "nakłamani", "nakłaniani", "naklejani", "naklejeni", "naklepani", "nakłonieni", "nakłuwani", "nakopani", "nakręcani", "nakręceni", "nakreślani", "nakreśleni", "nakruszeni", "nakrywani", "nakrzyczani", "nakupieni", "naładowani", "nalani", "nałapani", "nalepieni", "nalewani", "naliczeni", "nałowieni", "nałożeni", "namaczani", "namagnetyzowani", "namalowani", "namaszczani", "namaszczeni", "namawiani", "namęczeni", "namierzani", "namieszani", "namoczeni", "namówieni", "namydlani", "namyśleni", "naniesieni", "naoliwiani", "naoliwieni", "naopowiadani", "naostrzeni", "napadani", "napakowani", "napaleni", "naparzani", "napastowani", "napawani", "napchani", "napędzani", "napełniani", "napełnieni", "napierani", "napiętnowani", "napinani", "napisani", "napływani", "napojeni", "napompowani", "napotkani", "napotykani", "napraszani", "naprawiani", "naprawieni", "naprężani", "naprężeni", "napromieniowani", "naprostowani", "naprowadzani", "naprowadzeni", "napuszczani", "napuszczeni", "napychani", "napytani", "narąbani", "naradzani", "naradzeni", "narastani", "narażani", "narażeni", "nareperowani", "narkotyzowani", "narodzeni", "naruszani", "naruszeni", "narwani", "narysowani", "narzucani", "narzuceni", "nasączani", "nasączeni", "nasadzeni", "nasiąkani", "nasilani", "nasileni", "naskakiwani", "naskoczeni", "naskrobani", "naśladowani", "nasłani", "nasłuchani", "nasłuchiwani", "nasmarowani", "nastąpieni", "nastawiani", "nastawieni", "nastraszani", "nastrojeni", "nastukani", "nasuwani", "naświetlani", "nasyceni", "nasyłani", "nasypani", "naszczani", "naszkicowani", "naszpikowani", "naszprycowani", "naszykowani", "naszywani", "natlenieni", "natłuszczeni", "natrafieni", "natrząsani", "nauczani", "nauczeni", "nawadniani", "nawaleni", "nawiązani", "nawiązywani", "nawiedzani", "nawiedzeni", "nawierceni", "nawiewani", "nawiezieni", "nawigowani", "nawijani", "nawilżani", "nawilżeni", "nawlekani", "nawodnieni", "nawoływani", "nawoskowani", "nawożeni", "nawpychani", "nawracani", "nawróceni", "nawrzucani", "nawtykani", "nawymyślani", "nazbierani", "nazmyślani", "naznaczani", "naznaczeni", "nazrywani", "nazwani", "nazywani", "nęceni", "negocjowani", "negowani", "nękani", "neutralizowani", "niańczeni", "niecierpliwieni", "niedoceniani", "niedowidziani", "nienawidzeni", "niesieni", "nikoleni", "niszczeni", "nitkowani", "niuchani", "niweczeni", "niwelowani", "nokautowani", "nominowani", "notowani", "nuceni", "numerowani", "nurtowani", "obaczeni", "obadani", "obalani", "obaleni", "obandażowani", "obarczani", "obarczeni", "obawiani", "obchodzeni", "obciążeni", "obcinani", "obcyndalani", "obczajani", "obczajeni", "obdarowani", "obdarzani", "obdarzeni", "obdzieleni", "obdzierani", "obdzwaniani", "obdzwonieni", "obejmowani", "oberwani", "obessani", "obezwładniani", "obezwładnieni", "obfotografowani", "obfotografowywani", "obgadani", "obgadywani", "obgryzani", "obgryzieni", "obiecani", "obiecywani", "obierani", "obijani", "objadani", "objaśniani", "objawiani", "objawieni", "objechani", "objeżdżani", "obkręcani", "oblani", "obłapiani", "obłapywani", "obłaskawiani", "obłaskawieni", "obleciani", "oblewani", "obliczani", "obliczeni", "oblizani", "obłowieni", "obłożeni", "obluzowani", "obluzowywani", "obmacani", "obmacywani", "obmawiani", "obmyślani", "obmyśleni", "obmywani", "obnażani", "obniżani", "obniżeni", "obnoszeni", "obowiązywani", "obozowani", "obrabiani", "obrabowani", "obracani", "obradowani", "obramowani", "obraniani", "obrani", "obrastani", "obrażani", "obrażeni", "obrobieni", "obróceni", "obrodzeni", "obronieni", "obrysowani", "obrywani", "obryzgani", "obrzezani", "obrzucani", "obrzuceni", "obrzygani", "obsadzani", "obsadzeni", "obściskiwani", "obserwowani", "obsiani", "obsikani", "obsikiwani", "obskakiwani", "obskoczeni", "obskubani", "obskubywani", "obśliniani", "obślinieni", "obsługiwani", "obsłużeni", "obsmarowani", "obstawiani", "obstawieni", "obstrzeliwani", "obsuwani", "obsypani", "obsypywani", "obszukani", "obszukiwani", "obtaczani", "obtoczeni", "obudzeni", "obwąchani", "obwąchiwani", "obwiązani", "obwiązywani", "obwieszani", "obwieszczani", "obwieszczeni", "obwieszeni", "obwijani", "obwiniani", "obwołani", "obżerani", "ocalani", "ocaleni", "ocechowani", "oceniani", "ocenieni", "ocenzurowani", "ochładzani", "ochlapani", "ochlapywani", "ochłodzeni", "ochraniani", "ochronieni", "ochrzaniani", "ochrzczeni", "ociągani", "ocieleni", "ocieplani", "ociepleni", "ocierani", "ocuceni", "oczarowywani", "oczekiwani", "oczerniani", "oczernieni", "oczyszczani", "oczyszczeni", "odbębnieni", "odbetonowani", "odbezpieczani", "odbezpieczeni", "odbijani", "odblokowani", "odbudowani", "odbudowywani", "odbutowani", "odcedzani", "odchorowani", "odchowani", "odchudzani", "odchudzeni", "odchylani", "odchyleni", "odciągani", "odciążeni", "odcierpieni", "odcinani", "odcumowani", "odcyfrowani", "odcyfrowywani", "odczarowani", "odczekani", "odczepiani", "odczepieni", "odczuwani", "odczynieni", "odczytani", "odczytywani", "oddalani", "oddani", "oddawani", "oddelegowani", "oddychani", "oddzielani", "oddzieleni", "odebrani", "odegnani", "odegrani", "odejmowani", "oderwani", "odeskortowani", "odesłani", "odespani", "odessani", "odetkani", "odezwani", "odfiltrowani", "odgadywani", "odganiani", "odgarniani", "odgniatani", "odgonieni", "odgradzani", "odgrażani", "odgrodzeni", "odgruzowani", "odgrywani", "odgryzani", "odgryzieni", "odgrzani", "odgrzebani", "odgrzebywani", "odgrzewani", "odgwizdani", "odhaczeni", "odholowani", "odinstalowani", "odizolowani", "odjedzeni", "odjonizowani", "odkażani", "odkażeni", "odkładani", "odklejeni", "odkochani", "odkodowani", "odkodowywani", "odkopani", "odkopywani", "odkorkowani", "odkręcani", "odkręceni", "odkrojeni", "odkrywani", "odkupieni", "odkupywani", "odkurzani", "odkurzeni", "odłączani", "odłączeni", "odłamywani", "odlani", "odlatywani", "odlepiani", "odlewani", "odliczani", "odliczeni", "odłożeni", "odłupani", "odmachani", "odmachiwani", "odmalowani", "odmarszczeni", "odmawiani", "odmeldowani", "odmieniani", "odmienieni", "odmierzani", "odmierzeni", "odmieszani", "odmontowani", "odmówieni", "odmrażani", "odmrożeni", "odnajdowani", "odnalezieni", "odnawiani", "odniesieni", "odnoszeni", "odnotowani", "odnotowywani", "odnowieni", "odpakowani", "odpakowywani", "odpalani", "odpaleni", "odpałzowani", "odparowani", "odpędzani", "odpicowani", "odpieczętowani", "odpierani", "odpiłowani", "odpiłowywani", "odpinani", "odpisani", "odpisywani", "odpłacani", "odplamieni", "odplątani", "odpowietrzeni", "odpracowani", "odpracowywani", "odprasowani", "odprawiani", "odprawieni", "odprężani", "odprostowani", "odprowadzani", "odprowadzeni", "odpryskani", "odpukani", "odpukiwani", "odpuszczani", "odpuszczeni", "odpychani", "odrąbani", "odrabiani", "odrąbywani", "odradzani", "odradzeni", "odrapani", "odrastani", "odratowani", "odreagowani", "odremontowani", "odrestaurowani", "odrestaurowywani", "odrobaczani", "odrobieni", "odroczeni", "odrodzeni", "odróżniani", "odróżnieni", "odrysowani", "odrywani", "odrzucani", "odrzuceni", "odsączani", "odsączeni", "odsadzeni", "odseparowani", "odsiadywani", "odsiani", "odsiewani", "odsłaniani", "odsłuchani", "odsłuchiwani", "odsłużeni", "odśnieżani", "odśnieżeni", "odsoleni", "odśpiewani", "odsprzedani", "odsprzedawani", "odstąpieni", "odstawiani", "odstawieni", "odstępowani", "odstraszani", "odstręczeni", "odstresowani", "odstrzeliwani", "odstrzeleni", "odsuwani", "odświeżani", "odświeżeni", "odsyłani", "odsypywani", "odsysani", "odszczekani", "odszczekiwani", "odsztafirowani", "odszukani", "odszyfrowani", "odszyfrowywani", "odszykowani", "odtrąbieni", "odtrąceni", "odtwarzani", "odtworzeni", "oduczeni", "odurzeni", "odwalani", "odwaleni", "odwiązani", "odwiązywani", "odwiedzani", "odwiedzeni", "odwieszeni", "odwiezieni", "odwijani", "odwlekani", "odwodnieni", "odwodzeni", "odwołani", "odwoływani", "odwożeni", "odwracani", "odwróceni", "odwzajemnieni", "odwzorowani", "odżegnani", "odziani", "odziedziczeni", "odznaczani", "odznaczeni", "odzwieciedleni", "odzwierciedlani", "odzwonieni", "odzwyczajeni", "odzyskani", "odzyskiwani", "odzywiani", "odżywieni", "oferowani", "ofiarowani", "ofiarowywani", "ogarniani", "oglądani", "ogłaszani", "ogłoszeni", "ogłupiani", "ogłupieni", "ogłuszeni", "ogołoceni", "ogoleni", "ograbiani", "ograbieni", "ograniczani", "ograniczni", "ograni", "ogrodzeni", "ogryzieni", "ogrzani", "ogrzewani", "okablowani", "okaleczeni", "okantowani", "okąpani", "okazani", "okazywani", "okiełznani", "okładani", "okłamani", "okłamywani", "oklaskiwani", "oklejeni", "oklepani", "okopani", "okopywani", "okpieni", "okradani", "okradzieni", "okraszeni", "okrążani", "okrążeni", "okręcani", "okręceni", "określani", "określeni", "okrojeni", "okrywani", "okulawieni", "okupieni", "okupowani", "olani", "olewani", "omamieni", "omawiani", "omdlewani", "omijani", "omotani", "omówieni", "onanizowani", "onieśmielani", "onieśmieleni", "opakowani", "opalani", "opaleni", "opancerzeni", "opanowani", "opanowywani", "oparzeni", "opasani", "opatentowani", "opatrywani", "opatrzeni", "opatuleni", "opędzani", "opędzeni", "operowani", "opętani", "opętywani", "opieczętowani", "opiekowani", "opierani", "opijani", "opisani", "opisywani", "opłacani", "opłaceni", "opłakani", "opłakiwani", "opłukani", "opluwani", "opływani", "opodatkowani", "opodatkowywani", "oponowani", "oporządzani", "oporządzeni", "opowiadani", "opowiedziani", "opóźniani", "opóźnieni", "opracowani", "opracowywani", "oprawiani", "oprawieni", "oprowadzani", "oprowadzeni", "opróżniani", "opróżnieni", "opryskani", "opryskiwani", "opublikowani", "opukani", "opuszczani", "opuszczeni", "opychani", "opyleni", "orani", "orbowani", "organizowani", "orientowani", "oroszeni", "orzekani", "osaczani", "osaczeni", "osadzani", "osądzani", "osadzeni", "osądzeni", "oscylowani", "osiadani", "osiągani", "osiedlani", "osiedleni", "osiedzeni", "osieroceni", "osiodłani", "oskalpowani", "oskarżeni", "oskrobani", "oskrzydlani", "oskrzydleni", "oskubani", "oskubywani", "osłabiani", "osłabieni", "oślepiani", "oślepieni", "ośliniani", "osłodzeni", "osłonieni", "osłuchani", "osmaleni", "ośmieleni", "ośmieszani", "ośmieszeni", "ostrzegani", "ostrzelani", "ostrzeni", "ostudzeni", "osuszani", "osuszeni", "osuwani", "oswajani", "oświadczani", "oświadczeni", "oświecani", "oświecieni", "oświetlani", "oświetleni", "oswobadzani", "oswobodzeni", "oswojeni", "oszacowani", "oszałamiani", "oszczani", "oszczędzani", "oszczędzeni", "oszkleni", "oszlifowani", "oszołomieni", "oszpeceni", "oszukani", "oszukiwani", "oszwabieni", "otaczani", "otoczeni", "otruwani", "otrząsani", "otrzepani", "otrzeźwieni", "otrzymani", "otrzymywani", "otuleni", "otumanieni", "otwierani", "otwarci", "owani", "owdowieni", "owiani", "owijani", "ozdabiani", "ozdobieni", "ozdrowieni", "ożenieni", "oznaczani", "oznaczeni", "oznajmiani", "oznajmieni", "oznakowani", "ożywani", "ożywiani", "ożywieni", "pakowani", "paktowani", "pałani", "pałaszowani", "paleni", "pamiętani", "panoszeni", "paprani", "parafrazowani", "paraliżowani", "parkowani", "parowani", "partaczeni", "parzeni", "pastowani", "paszeni", "patrolowani", "patroszeni", "pauzowani", "pchani", "pdholowani", "pedałowani", "pękani", "pełnieni", "penetrowani", "perforowani", "perfumowani", "perswadowani", "piastowani", "pichceni", "pielęgnowani", "pieleni", "pienieni", "pieszczeni", "piętnowani", "pijani", "pikietowani", "piknikowani", "pikowani", "pilnowani", "pilotowani", "piłowani", "pisani", "pisywani", "płaceni", "plądrowani", "planowani", "płaszczeni", "plątani", "płatani", "pławieni", "plewieni", "płoszeni", "plotkowani", "plugawieni", "płukani", "pluskani", "pobaraszkowani", "pobierani", "pobłażani", "pobłogosławieni", "pobrani", "pobrudzeni", "pobudzani", "pobudzeni", "pobujani", "pocałowani", "pocerowani", "pochłaniani", "pochlapani", "pochlebiani", "pochowani", "pochwalani", "pochwaleni", "pochwyceni", "pochylani", "pochyleni", "pociachani", "pociągani", "pocierani", "pocieszani", "pocieszeni", "poceni", "pocukrowani", "poćwiartowani", "poczesani", "poczęstowani", "poczochrani", "poczytani", "poczytywani", "podani", "podarowani", "podawani", "podążeni", "podbierani", "podbijani", "podbudowani", "podbudowywani", "podburzani", "podburzeni", "podchwyceni", "podciągani", "podcierani", "podcinani", "podczepieni", "poddani", "poddawani", "podebrani", "podejmowani", "podejrzani", "podejrzewani", "podelektowani", "podeptani", "poderwani", "podesłani", "podglądani", "podgoleni", "podgonieni", "podgryzani", "podgrzani", "podgrzewani", "podjadani", "podjedzeni", "podkablowani", "podkarmieni", "podkładani", "podklejeni", "podkolorowani", "podkołowani", "podkopani", "podkopywani", "podkradani", "podkręcani", "podkręceni", "podkreślani", "podkreśleni", "podkształceni", "podkuleni", "podkupieni", "podkurzeni", "podłączani", "podłączeni", "podładowani", "podłamani", "podlani", "podłapani", "podleczeni", "podlegani", "podlewani", "podliczani", "podliczeni", "podlizani", "podlizywani", "podłożeni", "podmalowani", "podmieniani", "podmienieni", "podmuchani", "podniecani", "podnieceni", "podniesieni", "podnoszeni", "podołani", "podopingowani", "podostrzeni", "podotykani", "podpalani", "podpaleni", "podpatrywani", "podpatrzeni", "podpieczętowani", "podpiekani", "podpierani", "podpiłowani", "podpinani", "podpisani", "podpisywani", "podpłaceni", "podpompowani", "podporządkowani", "podporządkowywani", "podpowiadani", "podpowiedziani", "podprowadzani", "podpuszczani", "podpuszczeni", "podpychani", "podpytani", "podrabiani", "podrapani", "podrasowani", "podratowani", "podrażnieni", "podręczeni", "podregulowani", "podreperowani", "podretuszowani", "podrobieni", "podroczeni", "podróżowani", "podrygiwani", "podrywani", "podrzucani", "podrzuceni", "podrzynani", "podsadzeni", "podskubywani", "podsłuchani", "podsłuchiwani", "podsmażani", "podsmażeni", "podśpiewywani", "podstawiani", "podstawieni", "podstemplowani", "podstrojeni", "podsumowani", "podsumowywani", "podsuwani", "podświetlani", "podsycani", "podsyceni", "podsyłani", "podsypani", "podszczypywani", "podszkoleni", "podszlifowani", "podszykowani", "podszywani", "podtapiani", "podtopieni", "podtrzymani", "podtrzymywani", "podtuczeni", "poduczani", "podupadani", "poduszeni", "podwajani", "podwalani", "podważani", "podwędzeni", "podwiązani", "podwieszani", "podwiezieni", "podwijani", "podwojeni", "podwożeni", "podwyżani", "podwyższani", "podwyższeni", "podyktowani", "podyskutowani", "podziabani", "podziałani", "podziałkowani", "podziękowani", "podzieleni", "podziurawieni", "podziwiani", "poeksperymentowani", "pofarbowani", "pofatygowani", "pofilmowani", "poganiani", "pogardzani", "pogardzeni", "pogarszani", "pogaszeni", "pogładzeni", "pogłaskani", "pogłębiani", "pogłębieni", "pogłośnieni", "pogmatwani", "pognębieni", "pogniecieni", "pogodzeni", "pogonieni", "pogorszeni", "pogotowani", "pograbieni", "pogrążani", "pogrążeni", "pogrożeni", "pogrubiani", "pogrubieni", "pogruchani", "pogruchotani", "pogrupowani", "pogrywani", "pogryzani", "pogryzieni", "pogrzani", "pogrzebani", "pogubieni", "pogwałcani", "pohamowani", "pohandlowani", "poharatowani", "pohuśtani", "poinformowani", "poinstruowani", "pojednani", "pojmowani", "pojeni", "pokajani", "pokaleczeni", "pokarani", "pokarmieni", "pokąsani", "pokatalogowani", "pokazani", "pokazywani", "pokiereszowani", "pokierowani", "pokiwani", "pokładani", "poklepani", "poklepywani", "pokłonieni", "pokochani", "pokolorowani", "pokoloryzowani", "pokołysani", "pokombinowani", "pokomplikowani", "pokonani", "pokończeni", "pokonywani", "pokopani", "pokrajani", "pokrążeni", "pokręceni", "pokrojeni", "pokruszeni", "pokrywani", "pokrzepiani", "pokrzepieni", "pokrzyżowani", "pokuszeni", "pokutowani", "połączeni", "polakierowani", "połamani", "polani", "połapani", "połaskotani", "połatani", "polecani", "połechtani", "poleceni", "poleczeni", "polegani", "polemizowani", "polepszani", "polepszeni", "polerowani", "polewani", "policzkowani", "policzeni", "polimeryzowani", "polizani", "polowani", "połowieni", "położeni", "polubieni", "poluźnieni", "poluzowani", "połykani", "pomacani", "pomachani", "pomagani", "pomalowani", "pomarynowani", "pomasowani", "pomazani", "pomęczeni", "pomiatani", "pomieszani", "pomieszczeni", "pomijani", "pomiziani", "pomnażani", "pomniejszani", "pomniejszeni", "pomnożeni", "pomoczeni", "pompowani", "pomydleni", "pomyleni", "pomyszkowani", "pomywani", "ponabijani", "ponaciskani", "ponadziewani", "ponaglani", "ponagleni", "ponagrywani", "ponaklejani", "ponakłuwani", "ponakrywani", "ponaprawiani", "ponawiani", "poniańczeni", "poniechani", "ponieiwerani", "poniesieni", "poniszczeni", "poniżani", "poniżeni", "ponoszeni", "ponowieni", "ponudzeni", "poobcinani", "poobcowani", "poobczajani", "poobijani", "poobmacywani", "poobracani", "poobserwowani", "poodbijani", "poodcinani", "poodgryzani", "poodkurzani", "poodprawiani", "poodsuwani", "poodwalani", "pooglądani", "poograniczani", "poopalani", "poopiekani", "poopwiadani", "pootwierani", "popadani", "popakowani", "popaleni", "poparzeni", "popchani", "popędzani", "popędzeni", "popękani", "popełniani", "popełnieni", "poperfumowani", "popierani", "popieszczeni", "popijani", "popilnowani", "popisani", "popłaceni", "popłakiwani", "poplamieni", "poplątani", "popluskani", "popodcinani", "popodziwiani", "popoprawiani", "poprani", "poprasowani", "poprawiani", "poprawieni", "poproszeni", "poprowadzeni", "popryskani", "poprzebierani", "poprzeciągani", "poprzecinani", "poprzedzani", "poprzeglądani", "poprzeklinani", "poprzekopywani", "poprzemieszczani", "poprzenoszeni", "poprzesadzani", "poprześladowani", "poprzestawiani", "poprzesuwani", "poprzewieszani", "poprzewracani", "poprzycinani", "poprzymierzani", "poprzytulani", "poprzywiązywani", "popudrowani", "popukani", "popularyzowani", "popuszczani", "popuszczeni", "popychani", "popykani", "popytani", "porabiani", "porachowani", "poranieni", "poratowani", "porażeni", "poręczeni", "porównani", "porozbierani", "porozbijani", "porozciągani", "porozcinani", "porozdawani", "porozdzielani", "porozmieszczani", "poróżnieni", "porozpędzani", "porozpieszczani", "porozprowadzani", "porozpruwani", "porozrzucani", "porozstawiani", "porozsyłani", "porozumiewani", "porozwalani", "porozwiązywani", "porozwieszani", "porozwożeni", "portretowani", "poruszani", "poruszeni", "porwani", "porysowani", "porywani", "porządkowani", "porządzeni", "porzucani", "porzuceni", "posądzani", "posadzeni", "posądzeni", "pościągani", "pościeleni", "pościerani", "pościgani", "pościnani", "pościskani", "posegregowani", "posiadani", "posiani", "posiekani", "posilani", "posiłkowani", "posileni", "posiłowani", "posiniaczeni", "posiorbani", "poskąpieni", "poskładani", "posklejani", "poskramiani", "poskręcani", "poskrobani", "poskromieni", "poskubani", "posłani", "posłodzeni", "poślubiani", "poślubieni", "posługiwani", "posmakowani", "posmarowani", "posoleni", "posortowani", "pospekulowani", "pospieszani", "pośpieszani", "pośpiewani", "pospinani", "pospłacani", "posprawdzani", "posprzątani", "posprzedawani", "pośredniczeni", "possani", "postanowieni", "postani", "postarani", "postawieni", "postemplowani", "posterowani", "postradani", "postraszeni", "postrugani", "postrzegani", "postrzelani", "postrzeleni", "postukani", "postymulowani", "posuwani", "poświącani", "poświadczeni", "poświeceni", "poświęceni", "poświętowani", "poświntuszeni", "posyłani", "posypani", "posypywani", "poszarpani", "poszastani", "poszatkowani", "poszczyceni", "poszczypani", "poszerzani", "poszerzeni", "poszorowani", "poszpiegowani", "poszturchani", "poszukani", "poszukiwani", "poszwędani", "poszybowani", "potakiwani", "potarmoszeni", "potasowani", "potęgowani", "potępiani", "potępieni", "potoczeni", "potopieni", "potorturowani", "potrącani", "potrąceni", "potraktowani", "potrojeni", "potrząsani", "potrzaskani", "potrzymani", "Poturbowani", "poturlani", "potwierdzeni", "potykani", "poucinani", "pouczani", "pouczeni", "poudawani", "poukładani", "pouprawiani", "poupychani", "pourywani", "poustawiani", "poużywani", "powąchani", "powachlowani", "powalani", "powaleni", "poważani", "powbijani", "powciągani", "powciskani", "powdychani", "powęszeni", "powetowani", "powiadamiani", "powiadomieni", "powiązani", "powiedziani", "powiedzeni", "powiększani", "powielani", "powieleni", "powierzani", "powierzeni", "powieszeni", "powiewani", "powinszowani", "powitani", "powkładani", "powlekani", "powłóczeni", "powodowani", "powołani", "powoływani", "powożeni", "powpychani", "powróceni", "powrzucani", "powsadzani", "powspominani", "powstrzymani", "powtarzani", "powtórzeni", "powybierani", "powybijani", "powycierani", "powycinani", "powyciskani", "powydawani", "powyganiani", "powyginani", "powyjaśniani", "powyjmowani", "powyłączani", "powymiatani", "powymieniani", "powynoszeni", "powypełniani", "powypisywani", "powyrywani", "powyrzucani", "powystrzelani", "powysyłani", "powywalani", "powywieszani", "powywracani", "pozabawiani", "pozabijani", "pozacierani", "pożądani", "pożądleni", "pozadzierani", "pozakładani", "pozaklinani", "pozałatwiani", "pozamiatani", "pozamieniani", "pozamrażani", "pozamykani", "pozapalani", "pozapinani", "pozapisywani", "pozapraszani", "pozasłaniani", "pozastrzelani", "pozatykani", "pozbawiani", "pozbawieni", "pozbierani", "pozbywani", "pozdejmowani", "pozdrawiani", "pozdrowieni", "pożegnani", "pożerani", "pozmiatani", "pozmieniani", "pozmywani", "poznaczeni", "poznani", "poznawani", "poznęcani", "pozorowani", "pozostawiani", "pozostawieni", "pozowani", "pozrywani", "pozszywani", "pozwalniani", "pozwani", "pozwiązywani", "pozwiedzani", "pozwoleni", "pożyczani", "pożyczeni", "pozyskani", "pozywani", "pożywiani", "pożywieni", "praktykowani", "prani", "prasowani", "prawieni", "prażeni", "precyzowani", "preferowani", "prenumerowani", "prezentowani", "próbowani", "procesowani", "produkowani", "profanowani", "profilowani", "prognozowani", "programowani", "projektowani", "proklamowani", "prolongowani", "promieniowani", "promowani", "propagowani", "proponowani", "prosperowani", "prostowani", "proszkowani", "proszeni", "protestowani", "protokołowani", "prowadzeni", "prowokowani", "pryskani", "przeanalizowani", "przearanżowani", "przebaczani", "przebaczeni", "przebadani", "przebierani", "przebijani", "przeboleni", "przebrani", "przebudowani", "przebudowywani", "przebudzani", "przebudzeni", "przebukowani", "przebywani", "przeceniani", "przecenieni", "przechlapani", "przechodzeni", "przechowani", "przechowywani", "przechrzceni", "przechwyceni", "przechwytywani", "przechylani", "przechyleni", "przechytrzani", "przechytrzeni", "przeciągani", "przeciążani", "przeciążeni", "przeciekani", "przecierani", "przecierpiani", "przecinani", "przeciskani", "przeciwstawiani", "przećwiczeni", "przeczekani", "przeczesani", "przeczesywani", "przeczołgani", "przeczuwani", "przeczyszczeni", "przeczytani", "przedawkowani", "przedawkowywani", "przedekorowani", "przedłożeni", "przedłużani", "przedłużeni", "przedmuchani", "przedobrzeni", "przedostani", "przedostawani", "przedstawiani", "przedstawieni", "przedymani", "przedyskutowani", "przedzierani", "przedziurawieni", "przedziurkowani", "przeegzaminowani", "przefaksowani", "przefarbowani", "przefasonowani", "przefasowani", "przefaxowani", "przefiltrowani", "przeformowani", "przeforsowani", "przegadani", "przeganani", "przeganiani", "przegapiani", "przegapieni", "przeginani", "przeglądani", "przegłodzeni", "przegłosowani", "przegonieni", "przegotowani", "przegotowywani", "przegrabieni", "przegradzani", "przegrani", "przegrupowani", "przegrupowywani", "przegrywani", "przegryzani", "przegryzieni", "przegrzani", "przegrzebani", "przegrzewani", "przehandlowani", "przeholowani", "przeinstalowani", "przeistoczeni", "przejadani", "przejaskrawiani", "przejaśnieni", "przejawiani", "przejawieni", "przejechani", "przejeżdżani", "przejmowani", "przejrzani", "przekabacani", "przekabaceni", "przekablowani", "przekalibrowani", "przekalkulowani", "przekarmiani", "przekąszeni", "przekazywani", "przekierowani", "przekierowywani", "przekimani", "przekładani", "przeklejeni", "przeklinani", "przekonani", "przekonfigurowani", "przekonstruowani", "przekonwertowani", "przekonywani", "przekopani", "przekopywani", "przekoziołkowani", "przekraczani", "przekręcani", "przekręceni", "przekreślani", "przekreśleni", "przekroczeni", "przekrojeni", "przekrzyczeni", "przekrzywieni", "przekształcani", "przekształceni", "przekupieni", "przekupywani", "przekwalifikowani", "przełączani", "przełączeni", "przeładowani", "przeładowywani", "przełamani", "przełamywani", "przelani", "przelatywani", "przeleciani", "przelewani", "przeleżani", "przelicytowani", "przeliczani", "przeliczeni", "przeliterowani", "przełożeni", "przełykani", "przemalowani", "przemalowywani", "przemaszerowani", "przemawiani", "przemeblowani", "przemęczeni", "przemieleni", "przemieniani", "przemierzeni", "przemieszczani", "przemieszczeni", "przemijani", "przemilczani", "przemilczeni", "przemodelowani", "przemusztrowani", "przemycani", "przemyceni", "przemyślani", "przemyśleni", "przemywani", "przenegocjowani", "przeniesieni", "przenikani", "przenoszeni", "przeobrażani", "przeobrażeni", "przeoczani", "przeoczeni", "przeorani", "przeorganizowani", "przeorientowani", "przepadani", "przepakowani", "przepaleni", "przeparkowani", "przepchani", "przepędzani", "przepędzeni", "przepełniani", "przepełnieni", "przepijani", "przepiłowani", "przepisani", "przepisywani", "przepłacani", "przepłaceni", "przepłakani", "przeplanowani", "przepłoszeni", "przepłukani", "przepłukiwani", "przepływani", "przepompowani", "przepompowywani", "przepowiadani", "przepowiedziani", "przepracowani", "przepracowywani", "przeprani", "przeprawiani", "przeprawieni", "przeprogramowani", "przeprojektowani", "przeprowadzani", "przeprowadzeni", "przepuszczani", "przepuszczeni", "przepychani", "przepytani", "przepytywani", "przerąbani", "przerabiani", "przeradzani", "przerastani", "przerażeni", "przeredagowani", "przerejestrowani", "przerobieni", "przerodzeni", "przerwani", "przerysowani", "przerywani", "przerzedzani", "przerzucani", "przerzuceni", "przesączeni", "przesadzani", "przesądzani", "przesadzeni", "przesądzeni", "prześcigani", "przesiadani", "przesiadywani", "przesiani", "przesiedlani", "przesiedleni", "przesiedziani", "przesiewani", "przesileni", "przeskakiwani", "przeskalowani", "przeskanowani", "przeskoczeni", "przeskrobani", "prześladowani", "przesłaniani", "przesłani", "prześledzeni", "przesłodzeni", "przesłuchani", "przesłuchiwani", "przesmarowani", "przesoleni", "przesortowani", "przespani", "prześpiewani", "przessani", "przestawiani", "przestawieni", "przestemplowani", "przestraszeni", "przestrojeni", "przestrzegani", "przestrzeleni", "przestudiowani", "przesuwani", "prześwietlani", "prześwietleni", "przesyłani", "przesypani", "przesypiani", "przesypywani", "przeszarżowani", "przeszczepiani", "przeszczepieni", "przeszkadzani", "przeszkoleni", "przeszmuglowani", "przeszukani", "przeszukiwani", "przeszywani", "przetaczani", "przetapetowani", "przetestowani", "przetkani", "przetoczeni", "przetopieni", "przetrąceni", "przetransformowani", "przetransmitowani", "przetransponowani", "przetransportowani", "przetrawieni", "przetrwani", "przetrząsani", "przetrzepani", "przetrzymani", "przetrzymywani", "przetwarzani", "przetworzeni", "przewalani", "przewalczeni", "przewaletowani", "przewaleni", "przeważani", "przeważeni", "przewertowani", "przewiązani", "przewiązywani", "przewidywani", "przewidziani", "przewiercani", "przewierceni", "przewieszani", "przewieszeni", "przewietrzeni", "przewiezieni", "przewijani", "przewitani", "przewodniczeni", "przewodzeni", "przewożeni", "przewracani", "przewróceni", "przewyższani", "przeymierzani", "przeżeglowani", "przeżegnani", "przeziębieni", "przezimowani", "przeznaczani", "przeznaczeni", "przezwyciężani", "przezwyciężeni", "przezywani", "przeżywani", "przodowani", "przpochlebieni", "przwdziewani", "przybastowani", "przybierani", "przybijani", "przybliżani", "przybliżeni", "przybrani", "przycelowani", "przycepieni", "przychyleni", "przyciągani", "przyciemnieni", "przycinani", "przyciskani", "przyciszeni", "przyćmiewani", "przyćmieni", "przycumowani", "przyczepiani", "przyczesani", "przyczołgani", "przyczynieni", "przydeptani", "przyduszeni", "przydzielani", "przydzieleni", "przygaszeni", "przygazowani", "przygładzani", "przygnębiani", "przygniatani", "przygniecieni", "przygotowani", "przygruchani", "przygrywani", "przygryzani", "przygryzieni", "przygrzani", "przygwożdżeni", "przyhamowani", "przyholowani", "przyjani", "przyjmowani", "przyjrzani", "przykładani", "przyklejeni", "przyklepani", "przykopani", "przykręcani", "przykręceni", "przykróceni", "przykrywani", "przykurzeni", "przykuwani", "przyłączani", "przyłączeni", "przylani", "przyłapani", "przylegani", "przylepiani", "przylepieni", "przyłożeni", "przymierzeni", "przymilani", "przymocowani", "przymuszani", "przynależeni", "przyniesieni", "przynoszeni", "przynudzani", "przyostrzeni", "przyozdabiani", "przyozdobieni", "przypakowani", "przypakowywani", "przypalani", "przypaleni", "przypasowani", "przypatrywani", "przypatrzeni", "przypieczętowani", "przypiekani", "przypierani", "przypilnowani", "przypiłowani", "przypinani", "przypisani", "przypisywani", "przypłaceni", "przyplątani", "przypodobani", "przypominani", "przypomniani", "przyporządkowani", "przyprawiani", "przyprawieni", "przyprowadzeni", "przypucowani", "przypudrowani", "przypuszczani", "przypuszczeni", "przyrównani", "przyrządzani", "przyrządzeni", "przysiadani", "przyskrzydleni", "przyskrzyniani", "przyskrzynieni", "przysłaniani", "przysłani", "przysłodzeni", "przysłonieni", "przysłuchiwani", "przysługiwani", "przysłużeni", "przysmażani", "przysmażeni", "przyspieszani", "przyspieszeni", "przysporzeni", "przysposobieni", "przyśrubowywani", "przyssani", "przystąpieni", "przystawiani", "przystawieni", "przystemplowani", "przystopowani", "przystosowani", "przystrojeni", "przysuwani", "przyswajani", "przyświecani", "przyświęceni", "przyswojeni", "przysyłani", "przysypani", "przyszpileni", "przyszykowani", "przyszywani", "przytaczani", "przytargani", "przytaszczani", "przytępiani", "przytępieni", "przytkani", "przytłaczani", "przytłoczeni", "przytłumieni", "przytoczeni", "przytrafieni", "przytroczeni", "przytruwani", "przytrzymani", "przytrzymywani", "przytulani", "przytuleni", "przytwierdzani", "przytwierdzeni", "przytykani", "przyuczeni", "przyuważeni", "przywabieni", "przywalani", "przywaleni", "przywarowani", "przywdziani", "przywiązani", "przywiązywani", "przywidziani", "przywiezieni", "przywitani", "przywłaszczani", "przywłaszczeni", "przywołani", "przywoływani", "przywożeni", "przywracani", "przywróceni", "przyznaczeni", "przyznani", "przyznawani", "przyzwalani", "przyzwani", "przyzwyczajani", "przyzwyczajeni", "przyzywani", "psiamani", "pstrykani", "publikowani", "pucowani", "pudłowani", "pudrowani", "punktowani", "pustoszeni", "puszczani", "puszczeni", "puszkowani", "puszeni", "pykani", "pytani", "rabowani", "rachowani", "racjonalizowani", "racjonowani", "raczeni", "radowani", "ranieni", "raportowani", "ratowani", "ratyfikowani", "reaktywowani", "realizowani", "reanimowani", "recytowani", "ręczeni", "redagowani", "redukowani", "reformowani", "refowani", "regenerowani", "regionalizowani", "regulowani", "reinkarnowani", "rejestrowani", "reklamowani", "rekomendowani", "rekompensowani", "rekonstruowani", "rekreowani", "rekrutowani", "rekwirowani", "relacjonowani", "relaksowani", "remodulowani", "remontowani", "renegocjowani", "reorganizowani", "reperowani", "replikowani", "represejonowani", "reprezentowani", "reprodukowani", "resetowani", "resocjalizowani", "respektowani", "resuscytowani", "retuszowani", "rewanżowani", "rewidowani", "rezerwowani", "rezonowani", "rezygnowani", "reżyserowani", "robieni", "rodzeni", "rojeni", "rolowani", "romansowani", "ronieni", "rozbawiani", "rozbawieni", "rozbierani", "rozbijani", "rozbrajani", "rozbrojeni", "rozbudowani", "rozbudowywani", "rozbudzani", "rozbudzeni", "rozbujani", "rozcapierzeni", "rozchmurzeni", "rozchodzeni", "rozchylani", "rozchyleni", "rozciągani", "rozcieńczani", "rozcieńczeni", "rozcierani", "rozcinani", "rozczarowani", "rozczarowywani", "rozczesani", "rozczłonkowani", "rozczulani", "rozczytani", "rozdani", "rozdawani", "rozdeptani", "rozdmuchani", "rozdmuchiwani", "rozdrabniani", "rozdrapani", "rozdrapywani", "rozdrażniani", "rozdrażnieni", "rozduszeni", "rozdwojeni", "rozdysponowani", "rozdzielani", "rozdzieleni", "rozdzierani", "rozdziewiczeni", "rozebrani", "rozedrani", "rozegrani", "rozegrywani", "rozepchani", "rozerwani", "rozesłani", "rozgaszczani", "rozglaszani", "rozgłoszeni", "rozgniatani", "rozgniecieni", "rozgniewani", "rozgonieni", "rozgraniczeni", "rozgrani", "rozgromieni", "rozgrywani", "rozgryzani", "rozgryzieni", "rozgrzani", "rozgrzebywani", "rozgrzeszeni", "rozgrzewani", "rozhuśtani", "rozjaśniani", "rozjaśnieni", "rozjechani", "rozjedzeni", "rozjuszani", "rozjuszeni", "rozkazani", "rozkazywani", "rozkładani", "rozklejani", "rozklejeni", "rozkołysani", "rozkopani", "rozkopywani", "rozkoszowani", "rozkręcani", "rozkręceni", "rozkrojeni", "rozkruszeni", "rozkuwani", "rozkwaszeni", "rozkwaterowani", "rozkwitani", "rozłączeni", "rozładowani", "rozładowywani", "rozłamani", "rozlani", "rozlewani", "rozliczani", "rozliczeni", "rozlokowani", "rozłożeni", "rozłupani", "rozluźniani", "rozmanażani", "rozmasowani", "rozmawiani", "rozmazani", "rozmazywani", "rozmiękczeni", "rozmieniani", "rozmienieni", "rozmieszczani", "rozmieszczeni", "rozmnożeni", "rozmontowani", "rozmówieni", "rozmrażani", "rozmrożeni", "rozmyślani", "różnicowani", "rozniecani", "rozniecieni", "rozniesieni", "różnieni", "roznoszeni", "rozochoceni", "rozpaczani", "rozpakowani", "rozpakowywani", "rozpalani", "rozpaleni", "rozpamiętywani", "rozpaskudzani", "rozpatrywani", "rozpatrzeni", "rozpędzani", "rozpędzeni", "rozpętani", "rozpieszczani", "rozpieszczeni", "rozpiłowani", "rozpinani", "rozpisani", "rozpisywani", "rozplanowani", "rozpłaszczani", "rozpłaszczeni", "rozplątani", "rozplątywani", "rozpoczynani", "rozpogodzeni", "rozporządzani", "rozporządzeni", "rozpościerani", "rozpostrzeni", "rozpowiadani", "rozpowiedziani", "rozpowszechniani", "rozpowszechnieni", "rozpoznani", "rozpoznawani", "rozpracowani", "rozpraszani", "rozprawiani", "rozprawiczeni", "rozprawieni", "rozprostowani", "rozproszeni", "rozprowadzani", "rozprowadzeni", "rozpruwani", "rozprzestrzeniani", "rozprzestrzenieni", "rozpuszczani", "rozpuszczeni", "rozpychani", "rozpylani", "rozpyleni", "rozpytani", "rozpytywani", "rozrastani", "rozreklamowani", "rozrobieni", "rozróżniani", "rozróżnieni", "rozruszani", "rozrysowani", "rozrywani", "rozrzucani", "rozsadzani", "rozsadzeni", "rozsądzeni", "rozścieleni", "rozsiani", "rozsiekani", "rozsiewani", "rozsiodłani", "rozsławiani", "rozsławieni", "rozsmarowani", "rozsmarowywani", "rozśmieszani", "rozstani", "rozstąpieni", "rozstawani", "rozstawiani", "rozstawieni", "rozstrojeni", "rozstrząsani", "rozstrzeliwani", "rozstrzeleni", "rozstrzygani", "rozsupłani", "rozświetlani", "rozświetleni", "rozsyłani", "rozsypani", "rozsypywani", "rozszarpani", "rozszarpywani", "rozszczepiani", "rozszczepieni", "rozszerzani", "rozszerzeni", "rozszyfrowani", "roztaczani", "roztapiani", "roztoczeni", "roztopieni", "roztrwonieni", "roztrząsani", "roztrzaskani", "rozumiani", "rozumowani", "rozwalani", "rozwaleni", "rozważani", "rozważeni", "rozweselani", "rozweseleni", "rozwiani", "rozwiązani", "rozwiązywani", "rozwidniani", "rozwiedzieni", "rozwierani", "rozwierceni", "rozwieszani", "rozwieszeni", "rozwiewani", "rozwiezieni", "rozwikłani", "rozwlekani", "rozwodzeni", "rozwścieczani", "rozwścieczeni", "rozzłoszczeni", "rugani", "ruinowani", "rujnowani", "ruszani", "ruszeni", "rwani", "ryczani", "ryglowani", "rymowani", "rysowani", "ryzykowani", "rządzeni", "rzeźbieni", "rzucani", "rzuceni", "rzygani", "sabotażowani", "sączeni", "sadzani", "sadzeni", "sądzeni", "salutowani", "salwowani", "sankcjonowani", "satysfakcjonowani", "scaleni", "scementowani", "scentrowani", "scharakteryzowani", "schładzani", "schlani", "schlapani", "schlebieni", "schłodzeni", "schowani", "schronieni", "schrupani", "schrzanieni", "schwytani", "schylani", "ścieleni", "ściemniani", "ściemnieni", "ścierani", "ścierpieni", "ścigani", "ścinani", "ściskani", "ściszani", "ściszeni", "sędziowani", "segregowani", "selekcjonowani", "separowani", "sępieni", "serwowani", "sfabrykowani", "sfajczeni", "sfałszowani", "sfaulowani", "sfilmowani", "sfinalizowani", "sfinansowani", "sfingowani", "sformalizowani", "sformatowani", "sformowani", "sformułowani", "sforsowani", "sfotografowani", "shimmerowani", "siani", "siekani", "siorbani", "skadrowani", "skakani", "skalani", "skaleczeni", "skalibrowani", "skalkulowani", "skalpowani", "skanalizowani", "skandowani", "skanowani", "skapitulowani", "skarceni", "skarżeni", "skasowani", "skatalogowani", "skazani", "skażeni", "skazywani", "skierowani", "składani", "składowani", "skłaniani", "sklasyfikowani", "sklecieni", "sklejani", "sklejeni", "sklepani", "skłóceni", "skłonieni", "sklonowani", "sknoceni", "skojarzeni", "skolonizowani", "skołowani", "skombinowani", "skomentowani", "skompensowani", "skompletowani", "skomplikowani", "skomponowani", "skompresowani", "skompromitowani", "skomunikowani", "skonani", "skoncentrowani", "skończeni", "skondensowani", "skonfigurowani", "skonfiskowani", "skonfrontowani", "skonkretyzowani", "skonsolidowani", "skonstruowani", "skonsultowani", "skonsumowani", "skontaktowani", "skontrolowani", "skoordynowani", "skopani", "skopiowani", "skorektowani", "skorumpowani", "skorygowani", "skorzystani", "skoszeni", "skracani", "skradzieni", "skręcani", "skręceni", "skremowani", "skreślani", "skreśleni", "skrobani", "skróceni", "skrojeni", "skropieni", "skruszeni", "skrystalizowani", "skrytykowani", "skrywani", "skrzecowani", "skrzyczani", "skrzywdzeni", "skrzyżowani", "skserowani", "skubani", "skuleni", "skumulowani", "skupiani", "skupieni", "skupowani", "skurczeni", "skuszeni", "skuwani", "skwitowani", "słani", "sławieni", "śledzeni", "ślinieni", "ślizgani", "słodzeni", "słuchani", "słyszani", "smagani", "smarowani", "smażeni", "śmieceni", "smyrani", "sondowani", "sortowani", "spafycikowani", "spakowani", "spalani", "spałaszowani", "spaleni", "spałowani", "spamiętani", "spaprani", "sparafrazowani", "sparaliżowani", "sparowani", "spartaczeni", "spartoleni", "sparzeni", "spasowani", "spatałaszeni", "spauzowani", "spawani", "spawieni", "specjalizowani", "spędzani", "spędzeni", "spekulowani", "spełniani", "spełnieni", "spenetrowani", "spętani", "spierani", "śpiewani", "spiłowani", "spinani", "spisani", "spiskowani", "spisywani", "spłacani", "spłaceni", "splądrowani", "splajtowani", "splamieni", "spłaszczeni", "splatani", "splątani", "spłatani", "spławiani", "spławieni", "spłodzeni", "spłoszeni", "spłukani", "spłukiwani", "spluwani", "spływani", "spoczywani", "spodziewani", "spojeni", "spolaryzowani", "spoliczkowani", "sponiewierani", "sponsorowani", "spopielani", "spopieleni", "spopularyzowani", "sportretowani", "sporządzani", "sporządzeni", "spostrzegani", "spotęgowani", "spotkani", "spotykani", "spoufalani", "spowalniani", "spowiadani", "spowodowani", "spowolnieni", "spoźnieni", "spóźnieni", "spożytkowani", "spożywani", "sprani", "sprasowani", "spraszani", "sprawdzeni", "sprawieni", "sprawowani", "sprecyzowani", "spreparowani", "sprężani", "sprężeni", "spróbowani", "sprofanowani", "sprofilowani", "sprostowani", "sproszkowani", "sproszeni", "sprowadzani", "sprowadzeni", "sprowokowani", "spryskani", "spryskiwani", "sprywatyzowani", "sprzątani", "sprzeczani", "sprzedani", "sprzedawani", "sprzeniewierzeni", "spudłowani", "spustoszeni", "spuszczani", "spuszczeni", "spychani", "ssani", "stabilizowani", "stacjonowani", "staczani", "staranowani", "starczani", "stargowani", "startowani", "stawiani", "stawieni", "stemplowani", "stenografowani", "stepowani", "sterowani", "sterroryzowani", "sterylizowani", "stłamszeni", "stłumieni", "stoczeni", "stołowani", "stonowani", "stopieni", "stopniowani", "storpedowani", "stosowani", "strącani", "straceni", "strąceni", "strajkowani", "straszeni", "stratowani", "strawieni", "streamowani", "stresowani", "streszczani", "streszczeni", "strofowani", "strojeni", "stroszeni", "strugani", "strymowani", "strząsani", "strzaskani", "strzeleni", "strzepani", "strzępieni", "strzepywani", "studiowani", "studzeni", "stukani", "stuleni", "stwardnieni", "stwarzani", "stwierdzani", "stwierdzeni", "stworzeni", "stykani", "stylizowani", "stymulowani", "sugerowani", "sumowani", "swatani", "swawoleni", "świadczeni", "świeceni", "święceni", "świerzbieni", "świętowani", "świntuszeni", "syceni", "sygnalizowani", "symulowani", "synchronizowani", "sypani", "szachrowani", "szacowani", "szafowani", "szamotani", "szanowani", "szargani", "szarpani", "szarżowani", "szasowani", "szastani", "szatkowani", "szczędzeni", "szczepieni", "szczerzeni", "szczyceni", "szczypani", "szczytowani", "szefowani", "szemrani", "szeptani", "szerzeni", "szkalowani", "szkicowani", "szkleni", "szkodzeni", "szkoleni", "szlachtowani", "szlifowani", "szmuglowani", "szokowani", "szorowani", "szpachlowani", "szpanowani", "szperani", "szprycowani", "szturchani", "szturmowani", "szufladkowani", "szuflowani", "szukani", "szulerowani", "szwankowani", "szydełkowani", "szydzeni", "szyfrowani", "szykanowani", "szykowani", "taktowani", "tamowani", "tankowani", "tapetowani", "taplani", "taranowani", "targani", "targowani", "tarmoszeni", "tarzani", "tasowani", "taszczeni", "tatuowani", "telefonowani", "telegrfowani", "teleportowani", "temperowani", "teoretyzowani", "tępieni", "terroryzowani", "testowani", "tkani", "tłamszeni", "tłoczeni", "tłumaczeni", "tłumieni", "toczeni", "tolerowani", "tonowani", "topieni", "torowani", "torturowani", "towarzyszeni", "trąbieni", "trącani", "traceni", "trąceni", "trafiani", "trafieni", "tragizowani", "traktowani", "transferowani", "transformowani", "transmitowani", "transportowani", "tratowani", "trawieni", "trenowani", "tresowani", "triumfowani", "tropieni", "troszczeni", "trwonieni", "trymowani", "tryskani", "tryumfowani", "trywializowani", "trzaskani", "trzepani", "trzepotani", "trzęsieni", "trzymani", "tuczeni", "tułani", "tuleni", "turlani", "tuszowani", "twistowani", "tworzeni", "tykani", "tyranizowani", "tyrani", "tytułowani", "uaktualniani", "uaktualnieni", "uaktywniani", "uaktywnieni", "uargumentowani", "uatrakcyjnieni", "ubabrani", "ubarwiani", "ubarwieni", "ubawieni", "ubezpieczani", "ubezpieczeni", "ubezwłasnowolnieni", "ubiczowani", "ubiegani", "ubierani", "ubijani", "ubłagani", "ubliżani", "ubliżeni", "ubolewani", "ubóstwiani", "ubrani", "ubroczeni", "ubrudzeni", "ucałowani", "ucharakteryzowani", "uchowani", "uchronieni", "uchwalani", "uchwaleni", "uchwyceni", "uchylani", "uchyleni", "ucieleśniani", "ucierani", "ucierpiani", "ucinani", "uciskani", "uciszani", "uciszeni", "uciułani", "ucywilizowani", "uczczeni", "uczepieni", "uczesani", "uczęszczani", "uczeni", "ucztowani", "uczynieni", "udani", "udaremnieni", "udawani", "udekorowani", "udeptywani", "uderzani", "uderzeni", "udobruchani", "udokumentowani", "udomawiani", "udomowieni", "udoskonalani", "udoskonaleni", "udostępniani", "udostępnieni", "udowadniani", "udowodnieni", "Udramatyzowani", "udręczeni", "udrożnieni", "udupieni", "uduszeni", "udzielani", "udzieleni", "ueiwarygodnieni", "ufani", "ufarbowani", "uformowani", "ufortyfikowani", "ufundowani", "ugadani", "uganiani", "ugaszani", "ugaszeni", "uginani", "ugłaskani", "ugniatani", "ugodzeni", "ugoszczeni", "ugotowani", "ugrani", "ugruntowani", "ugryzieni", "uhistoryzowani", "uhonorowani", "ujadani", "ujarzmiani", "ujarzmieni", "ujawniani", "ujawnieni", "ujeżdżani", "ujeżdżeni", "ujmowani", "ujrzani", "ukamieniowani", "ukarani", "ukartowani", "ukąszeni", "ukatrupieni", "ukazani", "ukazywani", "ukierowani", "ukierunkowani", "układani", "uklepani", "ukłonieni", "ukojeni", "ukołysani", "ukończeni", "ukonkretnieni", "ukoronowani", "ukradzieni", "ukręcani", "ukręceni", "ukrojeni", "ukrywani", "ukrzyżowani", "ukształtowani", "ułagodzeni", "ułaskawiani", "ułaskawieni", "ulatniani", "ułatwiani", "ułatwieni", "uleczani", "uleczeni", "ulegani", "ulepieni", "ulepszani", "ulepszeni", "ulokowani", "ulotnieni", "ułożeni", "umacniani", "umalowani", "umartwiani", "umawiani", "umazani", "umeblowani", "umiejscowieni", "umieszczani", "umieszczeni", "umilani", "umileni", "umniejszani", "umniejszeni", "umocnieni", "umocowani", "umoczeni", "umodelowani", "umorzeni", "umotywowani", "umówieni", "umożliwiani", "umożliwieni", "umrocznieni", "unaocznieni", "unicestwiani", "unicestwieni", "uniemożliwaini", "uniemożliwieni", "unierochomieni", "uniesieni", "unieszczęśliwiani", "unieszczęśliwieni", "unieszkodliwiani", "unieszkodliwieni", "unieważniani", "unieważnieni", "uniewinnieni", "uniezależnieni", "unikani", "unormowani", "unoszeni", "unowoczesniani", "unowocześniani", "uodpornieni", "uogólniani", "upakowani", "upalani", "upaleni", "upamiętniani", "upamiętnieni", "upaństwowieni", "upaprani", "upaskudzeni", "upchani", "upewniani", "upewnieni", "upgradowani", "upiększani", "upiększeni", "upierani", "upierdoleni", "upijani", "upilnowani", "upinani", "uplastycznieni", "upodabniani", "upodobnieni", "upojeni", "upokorzani", "upokorzeni", "upolowani", "upominani", "uporządkowani", "upowszechnieni", "upozorowani", "upozowani", "uprani", "uprasowani", "upraszczani", "uprawdopodobnieni", "uprawiani", "uproszczeni", "uproszeni", "uprowadzani", "uprowadzeni", "uprzątani", "uprzedeni", "uprzedzani", "uprzyjemniani", "uprzyjemnieni", "uprzykrzani", "uprzytomnieni", "upubliczniani", "upublicznieni", "upudrowani", "upuszczani", "upuszczeni", "upychani", "urabiani", "uraczani", "uradowani", "Urągani", "uratowani", "urażani", "urażeni", "uregulowani", "urobieni", "uronieni", "urozmaicani", "urozmaiceni", "uruchamiani", "uruchomieni", "urwani", "urywani", "urządzani", "urządzeni", "urzeczywistniani", "urzeczywistnieni", "usadowieni", "usadzeni", "usamowolnieni", "usankcjonowani", "usatyfakcjonowani", "uściskani", "uścisleni", "usidleni", "usiedzeni", "uskładani", "uskoczeni", "uskuteczniani", "uskutecznieni", "usłuchani", "usługiwani", "usłużeni", "usłyszani", "usmażeni", "uśmiani", "uśmiercani", "uśmierceni", "uśmierzeni", "uspani", "uśpieni", "uspokajani", "uspokojeni", "uspołeczniani", "usprawiedliwiani", "usprawiedliwieni", "usprawnieni", "usprzątani", "ustabilizowani", "ustalani", "ustaleni", "ustanawiani", "ustanowieni", "ustąpieni", "ustatkowani", "ustawiani", "ustawieni", "ustępowani", "ustosunkowani", "ustrojeni", "ustrzegani", "ustrzeleni", "ususzeni", "usuwani", "uświadamiani", "uświadczeni", "uświadomieni", "uświęceni", "uświnieni", "usychani", "usypani", "usypiani", "usystematyzowani", "usytuowani", "uszanowani", "uszczelniani", "uszczęśliwiani", "uszczęśliwieni", "uszczupleni", "uszkadzani", "uszkodzeni", "uszlachetniani", "uszlachetnieni", "usztywnieni", "uszykowani", "utajnieni", "utargowani", "utemperowani", "utkani", "utkwieni", "utoczeni", "utopieni", "utorowani", "utożsamiani", "utożsamieni", "utraceni", "utrąceni", "utrudniani", "utrudnieni", "utrwalani", "utrwaleni", "utrzymywani", "utuczeni", "utuleni", "utwierdzani", "utwierdzeni", "utworzeni", "utylizowani", "uwalniani", "uwaleni", "uwarunkowani", "uważani", "uwiązani", "uwiązywani", "uwidocznieni", "uwieczniani", "uwiecznieni", "uwielbiani", "uwielbieni", "uwieńczeni", "uwierani", "uwierzeni", "uwieszeni", "uwiezieni", "uwięzieni", "uwijani", "uwikłani", "uwłaczani", "uwłaszczeni", "uwodzeni", "uwolnieni", "uwsteczniani", "uwstecznieni", "uwydatniani", "uwypikleni", "uwzględniani", "uwzględnieni", "użądleni", "uzależniani", "uzależnieni", "uzasadniani", "uzasadnieni", "uzbierani", "uzbrajani", "uzbrojeni", "uzdrawiani", "uzdrowieni", "użerani", "uzewnętrzniani", "uzewnętrznieni", "uzgadniani", "uzgodnieni", "uziemieni", "uzmysłowieni", "uznani", "uznawani", "uzupełniani", "uzupełnieni", "uzurpowani", "użyczani", "użyczeni", "uzyskani", "uzyskiwani", "używani", "wabieni", "wąchani", "wachlowani", "wahani", "walczeni", "wałkowani", "waleni", "ważeni", "wbijani", "wcelowani", "wciągani", "wcielani", "wcieleni", "wcierani", "wcinani", "wciskani", "wczepieni", "wczołgani", "wczytani", "wczytywani", "wdani", "wdawani", "wdeptani", "wdetonowani", "wdmuchiwani", "wdrapani", "wdrapywani", "wdrażani", "wdrążeni", "wdrożeni", "wduszeni", "wdychani", "wdzierani", "wędkowani", "wentylowani", "wepchani", "werbowani", "weryfikowani", "wessani", "wetkani", "wezwani", "wgłębiani", "wgniatani", "wgniecieni", "wgrani", "wgryzani", "wgryzieni", "wiązani", "wibrowani", "widywani", "widziani", "wiedzeni", "wielbieni", "wierceni", "wierzgani", "wierzeni", "wieszani", "wietrzeni", "więżeni", "wikłani", "windowani", "winszowani", "wiosłowani", "wirowani", "witani", "wizualizowani", "wjeżdżani", "wkalkulowani", "wkładani", "wklejani", "wklejeni", "wklepani", "wkomponowani", "wkopani", "wkopywani", "wkraczani", "wkradani", "wkradzieni", "wkręcani", "wkręceni", "wkupieni", "wkurwiani", "wkuwani", "włączani", "włączeni", "władani", "władowani", "włamani", "włamywani", "wlani", "wlepiani", "wlepieni", "wlewani", "wliczani", "wliczeni", "włożeni", "wmanewrowani", "wmanipulowani", "wmawiani", "wmieszani", "wmówieni", "wmurowani", "wmuszeni", "wnerwiani", "wnerwieni", "wniesieni", "wnikani", "wnioskowani", "wnoszeni", "wodowani", "wojowani", "wołani", "woskowani", "wożeni", "wpajani", "wpakowani", "wparowani", "wpasowani", "wpatrywani", "wpędzani", "wpędzeni", "wperswadowani", "wpienieni", "wpisani", "wpisywani", "wpłacani", "wpłaceni", "wplatani", "wplątani", "wplątywani", "wpojeni", "wpompowani", "wpraszani", "wprawiani", "wproszeni", "wprowadzani", "wprowadzeni", "wpuszczeni", "wpychani", "wrabiani", "wręczani", "wrobieni", "wróżeni", "wrzucani", "wrzuceni", "wrzynani", "wsadzani", "wsadzeni", "wskazani", "wskazywani", "wskórani", "wskrzeszani", "wskrzeszeni", "wślizgiwani", "wsłuchani", "wspierani", "współodczuwani", "współtworzeni", "wspomagani", "wspominani", "wspomniani", "wstąpieni", "wstawiani", "wstawieni", "wstrząsani", "wstrzeleni", "wstrzykiwani", "wstrzymani", "wstrzymywani", "wstukani", "wsuwani", "wsypani", "wszamani", "wszczepiani", "wszczepieni", "wszczynani", "wtajemniczani", "wtajemniczeni", "wtapiani", "wtaszczeni", "wtłoczeni", "wtopieni", "wtrąceni", "wtryniani", "wtulani", "wtuleni", "wtykani", "wwaleni", "wwiercani", "wwierceni", "wwiezieni", "wwożeni", "wyartykułowani", "wyautowani", "wybaczani", "wybaczeni", "wybadani", "wybatożeni", "wybawieni", "wybebeszeni", "wybełkotani", "wybiczowani", "wybielani", "wybieleni", "wybierani", "wybijani", "wybłagani", "wybrandzlowani", "wybrani", "wybronieni", "wybrzydzani", "wybuchani", "wybudowani", "wybudzani", "wybudzeni", "wyburzani", "wyburzeni", "wycackani", "wycałowani", "wyceniani", "wycenieni", "wychlani", "wychłostani", "wychodowani", "wychowani", "wychowywani", "wychrobotani", "wychwalani", "wychwyceni", "wychylani", "wychyleni", "wyciągani", "wyciekani", "wycieniowani", "wycierani", "wycinani", "wyciskani", "wyciszani", "wyciszeni", "wycofani", "wyćwiczeni", "wycyckani", "wycyganieni", "wyczarowani", "wyczarterowani", "wyczekani", "wyczekiwani", "wyczerpani", "wyczesani", "wyczołgani", "wyczołgiwani", "wyczuwani", "wyczyniani", "wyczyszczeni", "wyczytani", "wyczytywani", "wydalani", "wydaleni", "wydani", "wydębieni", "wydedukowani", "wydelegowani", "wydepilowani", "wydeptywani", "wydłubani", "wydłubywani", "wydłużani", "wydłużeni", "wydmuchani", "wydmuchiwani", "wydobywani", "wydojeni", "wydoroślani", "wydostani", "wydrani", "wydrapani", "wydrapywani", "wydrążeni", "wydrukowani", "wydukani", "wyduszeni", "wydychani", "wydziedziczeni", "wydzielani", "wydzieleni", "wydzierani", "wydzierżawieni", "wydziobani", "wydziwiani", "wydzwaniani", "wyedukowani", "wyedytowani", "wyeeliminowani", "wyegzekwowani", "wyeksmitowani", "wyekspediowani", "wyeksploatowani", "wyeksponowani", "wyeksportowani", "wyeliminowani", "wyemigrowani", "wyemitowani", "wyewoluowani", "wygadani", "wygadywani", "wyganiani", "wygarbowani", "wygarniani", "wygasani", "wygaszani", "wygaszeni", "wygenerowani", "wyginani", "wygładzani", "wygładzeni", "wygłaszani", "wygłodzeni", "wygłosowani", "wygłoszeni", "wygłówkowani", "wygnani", "wygoleni", "wygonieni", "wygooglowani", "wygospodarowani", "wygotowani", "wygrani", "wygrawerowani", "wygrażani", "wygrywani", "wygryzieni", "wygrzani", "wygrzebani", "wygrzebywani", "wygrzewani", "wygubieni", "wyhaczeni", "wyhaftowani", "wyhamowani", "wyhodowani", "wyizolowani", "wyjadani", "wyjaśniani", "wyjaśnieni", "wyjawiani", "wyjawieni", "wyjedzeni", "wyjmowani", "wykadrowani", "wykalibrowani", "wykalkulowani", "wykańczani", "wykantowani", "wykąpani", "wykaraskani", "wykarczowani", "wykarmiani", "wykasowani", "wykastrowani", "wykazani", "wykazywani", "wykierowani", "wykitowani", "wykiwani", "wykładani", "wyklarowani", "wyklepani", "wyklinani", "wykłócani", "wykluczani", "wykluczeni", "wykminieni", "wykolejeni", "wykołowani", "wykombinowani", "wykonani", "wykończeni", "wykonywani", "wykopani", "wykopywani", "wykorkowani", "wykorzeniani", "wykorzenieni", "wykorzystani", "wykorzystywani", "wykoszeni", "wykradani", "wykręcani", "wykręceni", "wykreowani", "wykreślani", "wykreśleni", "wykrochmaleni", "wykrojeni", "wykrwawiani", "wykrwawieni", "wykrywani", "wykrzesani", "wykrztuszeni", "wykrzyczeni", "wykrzykiwani", "wykrzywiani", "wykształceni", "wyksztuszeni", "wykupieni", "wykupywani", "wykuwani", "wyłączani", "wyłączeni", "wylądowani", "wyładowani", "wyładowywani", "wyłajani", "wyłamani", "wyłamywani", "wyłaniani", "wylansowani", "wylani", "wyłapani", "wyłapywani", "wyławiani", "wyleasingowani", "wyleczeni", "wylęgani", "wylegimytowani", "wylewani", "wyłgani", "wylicytowani", "wyliczani", "wyliczeni", "wylizani", "wylizywani", "wylogowani", "wyłonieni", "wylosowani", "wyłowieni", "wyłożeni", "wyłudzani", "wyłudzeni", "wyłupani", "wyłuskani", "wyłuskiwani", "wyłuszczeni", "wyluzowani", "wymacani", "wymachiwani", "wymagani", "wymahiwani", "wymalowani", "wymamrotani", "wymanewrowani", "wymarzeni", "wymasowani", "wymawiani", "wymazani", "wymazywani", "wymeldowani", "wymeldowywani", "wymiatani", "wymiecieni", "wymieniani", "wymienieni", "wymierzani", "wymieszani", "wymigani", "wymigiwani", "wymijani", "wymoczeni", "wymodelowani", "wymontowani", "wymordowani", "wymuszani", "wymyślani", "wymyśleni", "wynagradzani", "wynagrodzeni", "wynajdowani", "wynajdywani", "wynajmowani", "wynalezieni", "wynarodowieni", "wynegocjowani", "wyniesieni", "wyniszczani", "wyniszczeni", "wyniuchani", "wynoszeni", "wynurzani", "wyobrażani", "wyobrażeni", "wyodrębnieni", "wyolbrzymiani", "wyolbrzymieni", "wyorbowani", "wyosiowani", "wyostrzani", "wyostrzeni", "wypaczani", "wypakowani", "wypakowywani", "wypalani", "wypaleni", "wypałowani", "wyparowani", "wypasani", "wypastowani", "wypatroszeni", "wypatrywani", "wypatrzeni", "wypchani", "wypędzani", "wypędzlowani", "wypełniani", "wypełnieni", "wypersfadowani", "wyperswadowani", "wypierani", "wypijani", "wypinani", "wypisani", "wypisywani", "wypłacani", "wypłaceni", "wypłakani", "wypłakiwani", "wypłaszczeni", "wyplatani", "wyplątani", "wyplenieni", "wyplewieni", "wypłoszeni", "wypłukani", "wypłukiwani", "wypluwani", "wypoceni", "wypolerowani", "wypominani", "wypomniani", "wypompowani", "wypompowywani", "wyposażeni", "wypowiadani", "wypowiedziani", "wypoziomowani", "wypożyczani", "wypracowani", "wypracowywani", "wyprani", "wyprasowani", "wypraszani", "wyprawiani", "wyprawieni", "wypróbowani", "wyprodukowani", "wyprojektowani", "wypromieniowani", "wypromowani", "wyprostowani", "wyprostowywani", "wyproszeni", "wyprowadzani", "wyprowadzeni", "wypróżniani", "wypróżnieni", "wypruwani", "wyprzedani", "wyprzedawani", "wyprzedzani", "wyprzedzeni", "wyprzęgani", "wypstrykani", "wypucowani", "wypuszczani", "wypuszczeni", "wypychani", "wypytani", "wypytywani", "wyrąbani", "wyrabiani", "wyrąbywani", "wyratowani", "wyrażani", "wyrażeni", "wyrecytowani", "wyręczani", "wyręczeni", "wyregulowani", "wyrejestrowani", "wyremontowani", "wyreżyserowani", "wyrobieni", "wyrolowani", "wyrównani", "wyrównywani", "wyróżniani", "wyróżnieni", "wyrugowani", "wyruszani", "wyrwani", "wyrypani", "wyrysowani", "wyrywani", "wyrządzeni", "wyrzeźbieni", "wyrzucani", "wyrzuceni", "wyrzygani", "wyrzynani", "wyrzywani", "wysączeni", "wysadzani", "wysadzeni", "wyściskani", "wyselekcjonowani", "wysępieni", "wysiadywani", "wysiedzeni", "wysilani", "wysileni", "wyskakiwani", "wyskalowani", "wyskoczeni", "wyskrobani", "wyskubywani", "wysłani", "wyśledzeni", "wyślizgiwani", "wysłowieni", "wysłuchani", "wysłuchiwani", "wysmagani", "wysmarkani", "wysmarowani", "wysmażani", "wysmażeni", "wyśmiani", "wyśmiewani", "wysmołowani", "wysmyrani", "wyśnieni", "wysnuwani", "wysondowani", "wyspecjalizowani", "wyśpiewani", "wyśpiewywani", "wyspowiadani", "wysprzątani", "wysprzedani", "wyssani", "wystartowani", "wystawieni", "wysterelizowani", "wysterylizowani", "wystosowani", "wystosowywani", "wystraszeni", "wystrojeni", "wystrugani", "wystrzegani", "wystrzelani", "wystrzeliwani", "wystrzeleni", "wystudzeni", "wystukani", "wystukiwani", "wysuszani", "wysuwani", "wyswatani", "wyświadczani", "wyświadczeni", "wyświetlani", "wyświetleni", "wyswobodzeni", "wysyłani", "wysypani", "wysypywani", "wysysani", "wyszabrowani", "wyszalani", "wyszarpani", "wyszasowani", "wyszczotkowani", "wyszczupleni", "wyszeptani", "wyszkoleni", "wyszlifowani", "wyszorowani", "wyszperani", "wyszukani", "wyszukiwani", "wyszumieni", "wyszykowani", "wytapetowani", "wytargani", "wytargowani", "wytarzani", "wytaszczeni", "wytatuowani", "wytępieni", "wytłoczeni", "wytłumaczeni", "wytłumieni", "wytoczeni", "wytrąbieni", "wytrącani", "wytrąceni", "wytransmitowani", "wytransportowani", "wytrenowani", "wytresowani", "wytriangulowani", "wytropieni", "wytrząsani", "wytrzebieni", "wytrzepani", "wytrzeszczani", "wytrzeźwiani", "wytrzymani", "wytrzymywani", "wytwarzani", "wytworzeni", "wytyczeni", "wytykani", "wytypowani", "wyuczeni", "wywabiani", "wywabieni", "wywąchani", "wywalani", "wywalczeni", "wywaleni", "wywarzani", "wyważani", "wyważeni", "wywęszani", "wywężykowani", "wywiani", "wywiązani", "wywiązywani", "wywierani", "wywierceni", "wywieszani", "wywieszeni", "wywietrzeni", "wywiezieni", "wywijani", "wywindowani", "wywłaszczeni", "wywlekani", "wywnętrznieni", "wywnioskowani", "wywodzeni", "wywolani", "wywoływani", "wywoskowani", "wywożeni", "wywracani", "wywróceni", "wywróżeni", "wywyższani", "wyżaleni", "wyzdrowieni", "wyżebrani", "wyżerani", "wyzerowani", "wyznaczani", "wyznaczeni", "wyznani", "wyznawani", "wyzwalani", "wyzwani", "wyzwoleni", "wyzygzakowani", "wyżynani", "wyzyskani", "wyzyskiwani", "wyzywani", "wyżywani", "wyżywieni", "wzbijani", "wzbogacani", "wzbogaceni", "wzbraniani", "wzbudzani", "wzbudzeni", "wzburzani", "wzburzeni", "wżenieni", "wzmacnieni", "wzmagani", "wzmocnieni", "wznawiani", "wzniecani", "wzniecieni", "wznoszeni", "wznowieni", "wzorowani", "wzruszeni", "wzwyżani", "wzywani", "zaabordowani", "zaadaptowani", "zaadoptowani", "zaadresowani", "zaakcentowani", "zaakceptowani", "zaaklimatyzowani", "zaalarmowani", "zaanektowani", "zaangażowani", "zaanonsowani", "zaapelowani", "zaaplikowani", "zaaportowani", "zaaprobowani", "zaaranżowani", "zaaresztowani", "zaatakowani", "zabaczeni", "zabalowani", "zabandażowani", "zabarwieni", "zabarykadowani", "zabawiani", "zabawieni", "zabepieczani", "zabetonowani", "zabezpieczeni", "zabierani", "zabłądzeni", "zablefowani", "zabłoceni", "zablokowani", "zabraniani", "zabrani", "zabronieni", "zabrudzeni", "zabudowani", "zabukowani", "zabuleni", "zaburzeni", "zabutelkowani", "zacementowani", "zacerowani", "zachciani", "zachęcani", "zachęceni", "zachlapani", "zachodzeni", "zachomikowani", "zachorowani", "zachowani", "zachowywani", "zachwalani", "zachwaleni", "zachwiani", "zachwyceni", "zaciągani", "zaciążeni", "zaciekawieni", "zaciemniani", "zaciemnieni", "zacierani", "zacieśnieni", "zacinani", "zaciskani", "zaćmieni", "zacumowani", "zacytowani", "zaczadzeni", "zaczarowani", "zaczepiani", "zaczepieni", "zaczerpani", "zaczesani", "zaczołgani", "zaczynani", "zadawalani", "zadawani", "zadbani", "zadebiutowani", "zadedykowani", "zadeklamowani", "zadeklarowani", "zademonstrowani", "zadenucjowani", "zadepeszowani", "zadeptani", "zadeptywani", "zadławieni", "żądleni", "zadłużani", "zadłużeni", "zadokowani", "zadomowieni", "zadowalani", "zadrapani", "zadręczani", "zadręczeni", "zadrutowani", "zadurzani", "zadurzeni", "zaduszeni", "zadymieni", "zadźgani", "zadziobani", "zadziwiani", "zadziwieni", "zafakturowani", "zafałszowani", "zafarbowani", "zafiksowani", "zafundowani", "zagadani", "zagadywani", "zagajeni", "zaganiani", "zagapieni", "zagarażowani", "zagarniani", "zagaszeni", "zagazowani", "zagęszczeni", "zaginani", "zagłębiani", "zagłębieni", "zagłodzeni", "zagłuszani", "zagłuszeni", "zagmatwani", "zagnani", "zagnieżdżeni", "zagojeni", "zagonieni", "zagospodarowani", "zagotowani", "zagrabieni", "zagradzani", "zagrażani", "zagrodzeni", "zagrywani", "zagryzani", "zagryzieni", "zagrzani", "zagrzebani", "zagrzewani", "zagubieni", "zagwarantowani", "zahaczeni", "zahamowani", "zahandlowani", "zaharowani", "zahartowani", "zahipnotyzowani", "zaholowani", "zaimitowani", "zaimplantowani", "zaimplementowani", "zaimprowizowani", "zainaugurowani", "zainfekowani", "zainicjowani", "zainkasowani", "zainscenizowani", "zainspirowani", "zainstalowani", "zainteresowani", "zaintrygowani", "zaintubowani", "zainwestowani", "zaizolowani", "zajadani", "zajani", "zajarani", "zajechani", "zajmowani", "zakablowani", "zakamuflowani", "zakasani", "zakasowani", "zakąszani", "zakatalogowani", "zakatowani", "zakatrupieni", "zakazani", "zakażani", "zakazywani", "zakiszeni", "zakładani", "zaklasyfikowani", "zaklejani", "zaklejeni", "zaklepani", "zaklepywani", "zaklinani", "zaklinowani", "zakłócani", "zakłóceni", "zaklopotani", "zakneblowani", "zakodowani", "zakolczykowani", "zakolorowani", "zakołysani", "zakomunikowani", "zakończeni", "zakonserwowani", "zakopani", "zakopywani", "zakorzeniani", "zakorzenieni", "zakoszeni", "zakosztowani", "zakotwiczani", "zakotwiczeni", "zakpieni", "zakradani", "zakręcani", "zakręceni", "zakreślani", "zakreśleni", "zakrwawieni", "zakrywani", "zakrzyczani", "zakrzywiani", "zakrzywieni", "zaksięgowani", "zaktualizowani", "zaktywizowani", "zaktywowani", "zakumani", "zakupieni", "zakurzeni", "zakuwani", "zakwaterowani", "załączeni", "załadowani", "załagodzeni", "zalamani", "zalaminowani", "załamywani", "zalani", "załapani", "załatani", "załatwiani", "załatwieni", "zalatywani", "zalecani", "zaleceni", "zaleczeni", "zalegalizowani", "zalegani", "zalepiani", "zalepieni", "zalewani", "zaliczani", "zaliczeni", "załkani", "zalogowani", "żałowani", "założeni", "zaludnieni", "zamacani", "zamąceni", "zamalowani", "zamanewrowani", "zamanifestowani", "zamarkowani", "zamartwiani", "zamarynowani", "zamarzani", "zamaskowani", "zamawiani", "zamazani", "zamazywani", "zamęczani", "zamęczeni", "zameldowani", "zamelinowani", "zamerykanizowani", "zamiatani", "zamieniani", "zamienieni", "zamieszani", "zamieszczani", "zamieszczeni", "zamieszkani", "zamieszkiwani", "zaminowani", "zamocowani", "zamoczeni", "zamontowani", "zamordowani", "zamortyzowani", "zamotani", "zamówieni", "zamrażani", "zamroczeni", "zamrożeni", "zamulani", "zamurowani", "zamydleni", "zamykani", "zanalizowani", "zanegowani", "zaniechani", "zanieczyszczani", "zanieczyszczeni", "zaniedbani", "zaniedbywani", "zaniepokojeni", "zaniesieni", "zanihilowani", "zanikani", "zaniżani", "zaniżeni", "zanoszeni", "zanotowani", "zanuceni", "zanudzani", "zanudzeni", "zanurzani", "zanurzeni", "zanużeni", "zaobaczeni", "zaobserwowani", "zaoferowani", "zaofiarowani", "zaogniani", "zaognieni", "zaokrąglani", "zaokrągleni", "zaokrętowani", "zaopatrywani", "zaopatrzeni", "zaopiekowani", "zaorani", "zaostrzani", "zaostrzeni", "zaoszczędzeni", "zapadani", "zapakowani", "zapalani", "zapaleni", "zapamiętani", "zapamiętywani", "zapanowani", "zaparkowani", "zaparowywani", "zaparzani", "zaparzeni", "zapaskudzeni", "zapauzowani", "zapchani", "zapędzani", "zapełniani", "zapełnieni", "zaperfumowani", "zapeszani", "zapewniani", "zapewnieni", "zapieczętowani", "zapierani", "zapijani", "zapinani", "zapisani", "zapisuwani", "zapłaceni", "zapładniani", "zaplamieni", "zaplanowani", "zaplątani", "zapłodnieni", "zaplombowani", "zapobiegani", "zapodani", "zapodawani", "zapodziani", "zapokojeni", "zapolowani", "zapominani", "zapomniani", "zapowiadani", "zapowiedziani", "zapoznani", "zapoznawani", "zapożyczeni", "zapracowywani", "zaprani", "zaprasowywani", "zapraszani", "zaprawieni", "zaprenumerowani", "zaprezentowani", "Zaprogramowani", "zaprojektowani", "zaproponowani", "zaproszeni", "zaprotokołowani", "zaprowadzani", "zaprowadzeni", "zaprzątani", "zaprzeczani", "zaprzeczeni", "zaprzedani", "zaprzedawani", "zaprzęgani", "zaprzepaszczani", "zaprzestani", "zaprzestawani", "zaprzyjaźnieni", "zapudłowani", "zapunktowani", "zapuszczani", "zapuszczeni", "zapuszkowani", "zapychani", "zapylani", "zapyleni", "zapytani", "zarabiani", "zaranżowani", "zarażani", "zarażeni", "zarecytowani", "zaręczani", "zaręczeni", "zarejestrowani", "zareklamowani", "zarekomendowani", "zarekomondowani", "zarekwirowani", "zarezerwowani", "zarobieni", "żartowani", "zarwani", "zaryglowani", "zarymowani", "zarysowani", "zarywani", "zaryzykowani", "zarządzani", "zarzucani", "zarzynani", "zasadzeni", "zaścieleni", "zasegurowani", "zaserwowani", "zasiadani", "zasiani", "zasiedleni", "zasięgani", "zasiewani", "zasilani", "zasileni", "zaskakiwani", "zaskarbieni", "zaskoczeni", "zaskrobani", "zasłaniani", "zaślepiani", "zaślepieni", "zasłodzeni", "zasłonieni", "zasłużeni", "zasmakowani", "zaśmiecani", "zaśmieceni", "zasmradzani", "zasmrodzeni", "zasmucani", "zasmuceni", "zasoleni", "zaspakajani", "zaśpiewani", "zaspokajani", "zaspokojeni", "zasponsorowani", "zaśrubowywani", "zassani", "zastani", "zastąpieni", "zastawiani", "zastawieni", "zastępowani", "zastopowani", "zastosowani", "zastraszani", "zastraszeni", "zastrzeleni", "zasugerowani", "zasuwani", "zaświadczeni", "zaświeceni", "zaświonieni", "zasyfieni", "zasygnalizowani", "zasymilowani", "zasymulowani", "zasypani", "zasypywani", "zasysani", "zaszachowani", "zaszantażowani", "zaszargani", "zaszczepiani", "zaszczepieni", "zaszczycani", "zaszczyceni", "zaszeptani", "zaszeregowani", "zaszlachtowani", "zasznurowani", "zaszpachlowani", "zasztyletowani", "zaszufladkowani", "zaszyfrowani", "zaszywani", "zataczani", "zatajani", "zatajeni", "zatamowani", "zatankowani", "zatapiani", "zatargani", "zatelegrafowani", "zatemperowani", "zatęsknieni", "zatkani", "zatoczeni", "zatopieni", "zatracani", "zatraceni", "zatriumfowani", "zatrudniani", "zatrudnieni", "zatruwani", "zatrzaskiwani", "zatrzymani", "zatrzymywani", "zatuszowani", "zatwierdzani", "zatwierdzeni", "zatykani", "zatynkowani", "zatytułowani", "zauploadowani", "zauroczeni", "zautomatyzowani", "zauważani", "zauważeni", "zawadzani", "zawalani", "zawalczeni", "zawaleni", "zaważeni", "zawdzięczani", "zawetowani", "zawężeni", "zawiadamiani", "zawiadomieni", "zawiązani", "zawiązywani", "zawiedzeni", "zawierani", "zawierzeni", "zawieszani", "zawieszeni", "zawiezieni", "zawijani", "zawinieni", "zawitani", "zawłaszczeni", "zawodzeni", "zawojowani", "zawołani", "zawoskowani", "zawożeni", "zawracani", "zawróceni", "zawstydzani", "zażądani", "zażartowani", "zazdroszczeni", "zażegnani", "zażenowani", "zaznaczani", "zaznajomieni", "zaznani", "zaznawani", "zażyczeni", "zażywani", "zbaczani", "zbadani", "zbagatelizowani", "zbajerowani", "zbałamuceni", "zbalansowani", "zbalsamowani", "zbankrutowani", "zbawiani", "zbawieni", "zbesztani", "zbezczeszczeni", "zbierani", "zbijani", "zbliżeni", "zbluzgani", "zbojkotowani", "zbrojeni", "zbrukani", "zbszczeceni", "zbudowani", "zbudzeni", "zbuntowani", "zburzeni", "zbywani", "zchwytani", "zciszeni", "zdani", "zdeaktywowani", "zdecydowani", "zdefiniowani", "zdeflorowani", "zdegradowani", "zdejmowani", "zdeklarowani", "zdekodowani", "zdekompresowani", "zdekoncentrowani", "zdekonstruowani", "zdelegalizowani", "zdemaskowani", "zdementowani", "zdemolowani", "zdemontowani", "zdemoralizowani", "zdenerwowani", "zdeponowani", "zdeprymowani", "zdeptani", "zderzani", "zderzeni", "zdestabilizowani", "Zdetonowani", "zdetronizowani", "zdewastowani", "zdewaulowani", "zdezerterowani", "zdezintegrowani", "zdezorientowani", "zdezynfektowani", "zdiagnozowani", "zdławieni", "zdmuchiwani", "zdobywani", "zdołowani", "zdominowani", "zdopingowani", "zdrabniani", "zdradzani", "zdradzeni", "zdrapani", "zdrapywani", "zdrutowani", "zdruzgotani", "zduplikowani", "zduszeni", "zdwojeni", "zdyscyplinowani", "zdyskredytowani", "zdyskwalifikowani", "zdystansowani", "zdzieleni", "zdzierani", "zdzierżeni", "zdziesiątkowani", "zdzwonieni", "zebrani", "zechciani", "zedytowani", "żegnani", "żenieni", "żerowani", "zerwani", "zeskakiwani", "zeskanowani", "zeskrobywani", "zesłani", "ześlizgiwani", "zesmoleni", "zespawiani", "zespoleni", "zessani", "zestawiani", "zestawieni", "zestresowani", "zestrzeliwani", "zestrzeleni", "zeswatani", "zeszkleni", "zeszlifowani", "zezłoszczeni", "zeznani", "zeznawani", "zezwalani", "zezwoleni", "zfinansowani", "zgadani", "zgadywani", "zgajani", "zganieni", "zgaszeni", "zginani", "zgładzeni", "zgłaszani", "zgłębiani", "zgłębieni", "zgłośnieni", "zgłoszeni", "zgłuszeni", "zgniatani", "zgniecieni", "zgnojeni", "zgodzeni", "zgoleni", "zgonieni", "zgotowani", "zgrabieni", "zgrillowani", "zgromadzani", "zgromadzeni", "zgrupowani", "zgrzeszeni", "zgrzytani", "zgubieni", "zgwałceni", "zhackowani", "zhakowani", "zhańbieni", "zhandlowani", "zharmonizowani", "zidentyfikowani", "ziewani", "zignorowani", "zilustrowani", "zinfiltrowani", "zintegrowani", "zintensyfikowani", "zinterpretowani", "zinwentaryzowani", "zirytowani", "zjadani", "zjawiani", "zjednani", "zjednoczeni", "zjedzeni", "zjeżdżeni", "zkontaktowani", "zkserowani", "złączeni", "złagodzeni", "złajani", "złamani", "zlani", "złapani", "zlecani", "zleceni", "zlekceważeni", "zlepiani", "zlepieni", "zlewani", "zlicytowani", "zliczani", "zliczeni", "zlikwidowani", "zlinczowani", "zlitowani", "zlizani", "zlizywani", "zlokalizowani", "złomowani", "żłopani", "złowieni", "złożeni", "złupieni", "złuszczani", "zluzowani", "zmacani", "zmąceni", "zmagani", "zmagazynowani", "zmajstrowani", "zmaksylizowani", "zmanipulowani", "zmarnowani", "zmartwychwstani", "zmasakrowani", "zmaterializowani", "zmawiani", "zmazani", "zmazywani", "zmbobardowani", "zmiatani", "zmiażdżeni", "zmiękczeni", "zmieleni", "zmieniani", "zmienieni", "zmierzani", "zmierzeni", "zmierzwieni", "zmieszani", "zmieszczeni", "zmiksowani", "zminiaturyzowani", "zminimalizowani", "zmniejszani", "zmniejszeni", "zmobilizowani", "zmoczeni", "zmodernizowani", "zmodyfikowani", "zmonopolizowani", "zmontowani", "zmostkowani", "zmotywowani", "zmówieni", "zmrożeni", "zmrużeni", "zmumifikowani", "zmuszani", "zmuszeni", "zmutowani", "zmyślani", "zmywani", "znacjonalizowani", "znajdowani", "znajdywani", "znakowani", "znalezieni", "znani", "znęcani", "zneutralizowani", "zniechęceni", "znieczuleni", "zniekształcani", "zniekształceni", "znienawidzeni", "znieprawieni", "zniesieni", "zniesławiani", "zniesławieni", "zniewalani", "znieważani", "znieważeni", "zniewoleni", "zniszczeni", "zniweczeni", "zniwelowani", "zniżani", "zniżeni", "znokautowani", "znormalnieni", "znoszeni", "znudzeni", "zobaczeni", "zobowiązani", "zobrazowani", "zogniskowani", "żonglowani", "zoomowani", "zoperowani", "zoptymalizowani", "zorganizowani", "zorientowani", "zostawiani", "zostawieni", "zpłaceni", "zprowokowani", "zrabowani", "zrachowani", "zracjonalizowani", "zranieni", "zraportowani", "zrażani", "zrażeni", "zrealizowani", "zrecenzowani", "zredagowani", "zredukowani", "zreferowani", "zreformowani", "zrefowani", "zrefundowani", "zregenerowani", "zrehabilitowani", "zreinkarnowani", "zreintegrowani", "zrekonfigurowani", "zrekonstruowani", "zrekrutowani", "zrekrystalizowani", "zrelacjonowani", "zrelaksowani", "zremiksowani", "zremisowani", "zreorganizowani", "zreperowani", "zreplikowani", "zresetowani", "zresocjalizowani", "zrestartowani", "zrestrukturyzowani", "zrewanżowani", "zrewidowani", "zrewolucjenizowani", "zrezygnowani", "zrobieni", "zrolowani", "zroszeni", "zrównani", "zrównoważeni", "zrównywani", "zróżnicowani", "zrozumiani", "zrugani", "zruinowani", "zrujnowani", "zrymowani", "zrywani", "zrzędzeni", "zrzeszeni", "zrzucani", "zrzuceni", "zsumowani", "zsuwani", "zsynchronizowani", "zsyntetyzowani", "zsypywani", "zszargani", "zszokowani", "zszywani", "zutylizowani", "zużywani", "zwabiani", "zwabieni", "zwalani", "zwalczeni", "zwalniani", "zwaleni", "zwani", "zwaporyzowani", "zwątpieni", "zważani", "zważeni", "zwędzeni", "zwerbalizowani", "zwerbowani", "zweryfikowani", "zwęszeni", "zwężeni", "zwiastowani", "związani", "związywani", "zwiedzani", "zwiedzeni", "zwiększeni", "zwieńczeni", "zwierzani", "zwieszani", "zwieszeni", "zwietrzeni", "zwijani", "zwilżeni", "zwizualizowani", "zwlekani", "zwodowani", "zwodzeni", "zwołani", "zwolnieni", "zwoływani", "zwożeni", "zwracani", "zwróceni", "zwyciężani", "zwymiotowani", "życzeni", "żygani", "zygzakowani", "zyskani", "zyskiwani", "zżerani", "zżynani", "konsakrowany", "konsakrowana", "konsakrowane", "konsakrowani"];
Object.defineProperty(ej, "__esModule", {
  value: !0
});
ej.default = cZa;
var iZa = K, oZa = ee, lZa = dZa(ob);
function dZa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: uZa
} = oZa.languageProcessing;
function cZa(e) {
  return uZa(e).filter((t) => (0, iZa.includes)(lZa.default, t));
}
Object.defineProperty(ib, "__esModule", {
  value: !0
});
ib.default = void 0;
var pZa = mZa(ej), gZa = ee, ER = wt;
function mZa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  nonDirectPrecedenceException: fZa,
  directPrecedenceException: hZa,
  values: yZa
} = gZa.languageProcessing, {
  Clause: zZa
} = yZa;
class bZa extends zZa {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, pZa.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns {boolean} Returns true if no exception is found.
   */
  checkParticiples() {
    const a = this.getClauseText(), t = this.getAuxiliaries(), n = this.getParticiples().filter((r) => !hZa(a, r, ER.cannotDirectlyPrecedePassiveParticiple) && !fZa(a, r, t, ER.cannotBeBetweenPassiveAuxiliaryAndParticiple));
    this.setPassive(n.length > 0);
  }
}
ib.default = bZa;
var lb = {};
Object.defineProperty(lb, "__esModule", {
  value: !0
});
lb.default = void 0;
lb.default = ["być", "jestem", "jesteś", "jest", "jesteśmy", "jesteście", "są", "byłam", "byłem", "byłeś", "byłaś", "był", "była", "było", "byłoby", "byliśmy", "byłyśmy", "byliście", "byłyście", "byli", "były", "będę", "będziesz", "będzie", "będziemy", "będziecie", "będą", "byłabym", "byłbym", "byłbyś", "byłabyś", "byłaby", "byłby", "bylibyśmy", "byłybyśmy", "bylibyście", "byłybyście", "byłby", "byłaby", "byliby", "byłyby", "zostać", "zostaje", "zostajesz", "zostaję", "zostajecie", "zostajemy", "zostają", "zostanę", "zostaniesz", "zostanie", "zostaniemy", "zostaniecie", "zostaną", "zostałem", "zostałam", "zostałaś", "zostałeś", "został", "została", "zostało", "zostaliśmy", "zostałyśmy", "zostaliście", "zostałyście", "zostali", "zostały", "zostałbym", "zostałabym", "zostałbyś", "zostałabyś", "zostałby", "zostałaby", "zostałybyśmy", "zostalibyśmy", "zostalibyście", "zostałybyście", "zostaliby", "zostałyby"];
Object.defineProperty(J$, "__esModule", {
  value: !0
});
J$.default = TZa;
var wZa = ee, vZa = aj(ib), kZa = aj(lb), _Za = aj(Op);
function aj(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getClausesSplitOnStopWords: EZa,
  createRegexFromArray: AR
} = wZa.languageProcessing, AZa = {
  Clause: vZa.default,
  regexes: {
    auxiliaryRegex: AR(kZa.default),
    stopwordRegex: AR(_Za.default)
  }
};
function TZa(e) {
  return EZa(e, AZa);
}
var tj = {}, nj = {};
Object.defineProperty(nj, "__esModule", {
  value: !0
});
nj.default = SZa;
const $Za = function(e, a) {
  const t = a.find((n) => e.endsWith(n));
  return t || "";
}, jZa = function(e, a, t, n) {
  if (e.length > a && $Za(e, t) !== "")
    return e.slice(0, -n);
}, Vu = function(e, a) {
  const t = Object.entries(a);
  for (const n of t) {
    const r = n[1].wordShouldBeLongerThan, o = n[1].wordEndings, l = n[1].suffixLength, u = jZa(e, r, o, l);
    if (u)
      return u;
  }
}, xZa = function(e, a) {
  const t = Vu(e, a.adjectiveAndAdverbSuffixes);
  if (t)
    return e.startsWith(a.superlativePrefix) ? t.slice(3) : t;
};
function SZa(e, a) {
  const t = a.externalStemmer;
  let r = a.dictionary.stems[e];
  return r && (e = r), e.toLowerCase(), e.length < 4 ? e : (r = Vu(e, t.diminutiveSuffixes), r || (r = Vu(e, t.nounSuffixes)), r || (r = Vu(e, t.verbSuffixes)), r || (r = xZa(e, t)), r && (e = r), r = Vu(e, t.generalSuffixes), r || e);
}
Object.defineProperty(tj, "__esModule", {
  value: !0
});
tj.default = DZa;
var OZa = K, IZa = ee, CZa = PZa(nj);
function PZa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: RZa
} = IZa.languageProcessing;
function DZa(e) {
  const a = (0, OZa.get)(e.getData("morphology"), "pl", !1);
  return a ? (t) => (0, CZa.default)(t, a) : RZa;
}
Object.defineProperty(L$, "__esModule", {
  value: !0
});
var XB = L$.default = void 0, NZa = ee, LZa = bl(nb), MZa = wt, qZa = bl(Op), FZa = bl(Cr), BZa = bl(rb), WZa = bl(sb), UZa = bl(J$), HZa = bl(tj);
function bl(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: GZa
} = NZa.languageProcessing;
let VZa = class extends GZa {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "pl",
      passiveConstructionType: "periphrastic",
      firstWordExceptions: LZa.default,
      functionWords: MZa.all,
      stopWords: qZa.default,
      transitionWords: FZa.default,
      twoPartTransitionWords: BZa.default,
      sentenceLength: WZa.default
    }), Object.assign(this.helpers, {
      getClauses: UZa.default,
      getStemmer: HZa.default
    });
  }
};
XB = L$.default = VZa;
var rj = {}, db = {};
Object.defineProperty(db, "__esModule", {
  value: !0
});
db.default = void 0;
db.default = [
  // Definite articles:
  "o",
  "a",
  "os",
  "as",
  // Indefinite articles:
  "um",
  "uma",
  "uns",
  "umas",
  // Numbers 1-10:
  "um",
  "dois",
  "três",
  "quatro",
  "cinco",
  "seis",
  "sete",
  "oito",
  "nove",
  "dez",
  // Demonstrative pronouns:
  "este",
  "estes",
  "esta",
  "estas",
  "esse",
  "esses",
  "essa",
  "essas",
  "aquele",
  "aqueles",
  "aquela",
  "aquelas",
  "isto",
  "isso",
  "aquilo"
];
var vt = {}, Pr = {};
Object.defineProperty(Pr, "__esModule", {
  value: !0
});
Pr.singleWords = Pr.multipleWords = Pr.default = Pr.allWords = void 0;
const KZa = Pr.singleWords = ["ademais", "afinal", "aliás", "analogamente", "anteriormente", "assim", "atualmente", "certamente", "conforme", "conquanto", "contudo", "decerto", "embora", "enfim", "enquanto", "então", "entretanto", "eventualmente", "igualmente", "inegavelmente", "inesperadamente", "mas", "ocasionalmente", "outrossim", "pois", "porquanto", "porque", "portanto", "posteriormente", "precipuamente", "primeiramente", "primordialmente", "principalmente", "salvo", "semelhantemente", "similarmente", "sobretudo", "surpreendentemente", "todavia", "logo", "inclusive"], YZa = Pr.multipleWords = ["a fim de", "a fim de que", "a menos que", "a princípio", "a saber", "acima de tudo", "ainda assim", "ainda mais", "ainda que", "além disso", "antes de mais nada", "antes de tudo", "antes que", "ao mesmo tempo", "ao passo que", "ao propósito", "apesar de", "apesar disso", "às vezes", "assim como", "assim que", "assim sendo", "assim também", "bem como", "com a finalidade de", "com efeito", "com o fim de", "com o intuito de", "com o propósito de", "com toda a certeza", "como resultado", "como se", "da mesma forma", "de acordo com", "de conformidade com", "de fato", "de maneira idêntica", "de tal forma que", "de tal sorte que", "depois que", "desde que", "dessa forma", "dessa maneira", "desse modo", "do mesmo modo", "é provável", "em conclusão", "em contrapartida", "em contraste com", "em outras palavras", "em primeiro lugar", "em princípio", "em resumo", "em seguida", "em segundo lugar", "em síntese", "em suma", "em terceiro lugar", "em virtude de", "finalmente", "isto é", "já que", "juntamente com", "logo após", "logo depois", "logo que", "mesmo que", "não apenas", "nesse hiato", "nesse ínterim", "nesse meio tempo", "nesse sentido", "no entanto", "no momento em que", "ou por outra", "ou seja", "para que", "pelo contrário", "por analogia", "por causa de", "por certo", "por conseguinte", "por consequência", "por conseqüência", "porém", "por exemplo", "por fim", "por isso", "por mais que", "por menos que", "por outro lado", "por vezes", "posto que", "se acaso", "se bem que", "seja como for", "sem dúvida", "sempre que", "só para exemplificar", "só para ilustrar", "só que", "sob o mesmo ponto de vista", "talvez provavelmente", "tanto quanto", "todas as vezes que", "todas as vezes em que", "uma vez que", "visto que", "de repente", "nada obstante", "não obstante", "de qualquer forma", "diga-se de passagem", "de qualquer jeito", "de vez em quando", "aos poucos", "claro que", "no geral", "em geral", "geralmente", "subitamente", "a despeito de", "em razão de", "em razão disso", "razão pela qual", "por essa razão", "por motivo de", "devido a", "em todo o caso", "de qualquer maneira", "de todo modo", "de todo a modo", "de qualquer modo", "de forma que", "de modo que", "de tempos em tempos", "daí em diante", " daí por diante", "de hoje em diante", "a partir de agora", "de agora em diante"], QZa = Pr.allWords = KZa.concat(YZa);
Pr.default = QZa;
Object.defineProperty(vt, "__esModule", {
  value: !0
});
vt.filteredAtEnding = vt.filteredAtBeginningAndEnding = vt.filteredAtBeginning = vt.filteredAnywhere = vt.default = vt.cannotDirectlyPrecedePassiveParticiple = vt.all = void 0;
var XZa = Pr, iu = ZZa(Ba);
function ZZa(e) {
  return e && e.__esModule ? e : { default: e };
}
const sj = ["o", "a", "os", "as", "um", "uns", "uma", "umas"], ij = ["uma", "duas", "dois", "três", "cuatro", "cinco", "seis", "sete", "oito", "nove", "dez", "onze", "doze", "treze", "quatorze", "catorze", "quinze", "dezesseis", "dezessete", "dezasseis", "dezassete", "dezoito", "dezenove", "dezanove", "vinte", "cem", "cento", "mil", "milhão", "milhões", "bilhão", "bilhões"], oj = ["primeiro", "primeiros", "primeira", "primeiras", "segundo", "segunda", "segundos", "segundas", "terceiro", "terceira", "terceiros", "terceiras", "quarto", "quartos", "quarta", "quartas", "quinto", "quintos", "quinta", "quintas", "sexto", "sextos", "sexta", "sextas", "sétimo", "sétimos", "sétima", "sétimas", "oitavo", "oitavos", "oitava", "oitavas", "nono", "nonos", "nona", "nonas", "décimo", "décimos", "décima", "décimas", "vigésimo", "vigésimos", "vigésima", "vigésimas"], ZB = ["eu", "tu", "ele", "ela", "nós", "vós", "você", "vocês", "eles", "elas"], lj = ["me", "te", "lhe", "nos", "vos", "lhes"], JB = ["dele", "dela", "deles", "delas", "nele", "nela", "neles", "nelas", "mim", "ti", "si"], e8 = ["conmigo", "contigo", "consigo", "convosco", "conosco", "connosco"], a8 = ["se"], t8 = ["aquilo", "àquele", "àquela", "àqueles", "àquelas", "àquilo", "este", "estes", "esta", "estas", "àqueles", "aqueles", "aquele", "aquela", "aquelas", "aquilo", "esse", "esses", "essa", "essas", "isto", "isso"], dj = ["minhas", "tuas", "suas", "minha", "tua", "sua", "minhas", "tuas", "suas", "vossa", "vossas", "meu", "meus", "teu", "teus", "seu", "seus", "nosso", "nossos", "nossa", "nossas"], n8 = ["apenas", "vário", "vários", "vária", "várias", "mais", "muito", "muitos", "muita", "muitas", "puoco", "puocos", "puoca", "puocas", "bastante", "todo", "todos", "toda", "todas"], uj = ["alguma", "algumas", "nenhuns", "nenhumas", "todo", "toda", "todas", "outro", "outra", "outros", "outras", "qualquer", "quaisquer", "outrem", "tudo", "nada", "algo", "tanto", "tanta", "tantos", "tantas", "quanto", "quanta", "quantos", "quantas", "ninguém", "cada"], r8 = ["quais", "qual", "quem", "cujo", "cuja", "cujos", "cujas"], cj = ["como", "porque", "quanto", "quanta", "onde", "quando", "quão", "quantos", "quantas", "donde", "aonde", "que"], s8 = ["cá", "além", "aqui", "ali", "lá", "acolá", "aí"], i8 = ["tenho", "tens", "tem", "temos", "tendes", "têm", "tive", "tiveste", "teve", "tivemos", "tivestes", "tiveram", "tínhamos", "tínheis", "tinham", "tivera", "tiveras", "tivéramos", "tivéreis", "tiveram", "terei", "terás", "terá", "teremos", "tereis", "terão", "teria", "terias", "teríamos", "teríeis", "teriam", "tenha", "tenhas", "tenhamos", "tenhais", "tenham", "tivesse", "tivesses", "tivéssemos", "tivésseis", "tivessem", "tiver", "tiveres", "tivermos", "tiverdes", "tiverem", "tende", "teres", "termos", "terdes", "terem", "tido", "hei", "hás", "há", "havemos", "hemos", "haveis", "heis", "hão", "houve", "houveste", "houvemos", "houvestes", "houveram", "havia", "havias", "havíamos", "havíeis", "haviam", "houvera", "houveras", "houvéramos", "houvéreis", "houveram", "haverei", "haverás", "haverá", "haveremos", "havereis", "haverão", "haveria", "haverias", "haveríamos", "haveríeis", "haveriam", "haja", "hajas", "hajamos", "hajais", "hajam", "houvesse", "houvesses", "houvéssemos", "houvésseis", "houvessem", "houver", "houveres", "houvermos", "houverdes", "houverem", "havei", "hajais", "haveres", "havermos", "haverdes", "haverem", "havido", "poder", "posso", "podes", "pode", "podemos", "podeis", "podem", "pude", "pudeste", "pôde", "pudemos", "pudestes", "puderam", "podia", "podias", "podia", "podíamos", "podíeis", "podiam", "pudera", "puderas", "pudéramos", "pudéreis", "puderam", "poderei", "poderás", "poderá", "poderemos", "podereis", "poderão", "poderia", "poderias", "poderíamos", "poderíeis", "poderiam", "possa", "possas", "possamos", "possais", "possam", "pudesse", "pudesses", "pudéssemos", "pudésseis", "pudessem", "puder", "puderes", "pudermos", "puderdes", "puderem"], o8 = ["ter", "haver"], l8 = ["sou", "és", "é", "somos", "sois", "são", "fui", "foste", "foi", "fomos", "fostes", "foram", "era", "eras", "éramos", "éreis", "eram", "fôramos", "fôreis", "fora", "foras", "foram", "serei", "serás", "será", "seremos", "sereis", "serão", "seria", "serias", "seríamos", "seríeis", "seriam", "seja", "sejas", "seja", "sejamos", "sejais", "sejam", "fosse", "fosses", "fôssemos", "fôsseis", "fossem", "for", "fores", "formos", "fordes", "forem", "sê", "sede", "sermos", "serdes", "serem", "seres", "sido", "estou", "está", "estamos", "estás", "estás", "estais", "estão", "estive", "estiveste", "esteve", "estivemos", "estivestes", "estiveram", "estava", "estavas", "estávamos", "estáveis", "estavam", "estivera", "estiveras", "estivéramos", "estivéreis", "estiveram", "estarei", "estarás", "estará", "estaremos", "estareis", "estarão", "estaria", "estarias", "estaríamos", "estaríeis", "estariam", "esteja", "estejas", "estejamos", "estejais", "estejam", "estivesse", "estivesses", "estivéssemos", "estivésseis", "estivessem", "estiver", "estiveres", "estivermos", "estiverdes", "estiverem", "estai", "estejas", "estejais", "estares", "estarmos", "estardes", "estarem", "estado"], d8 = ["estar", "ser"], pj = ["a", "ante", "antes", "após", "até", "através", "com", "contra", "depois", "desde", "sem", "entre", "para", "pra", "perante", "sob", "sobre", "trás", "de", "por", "em", "ao", "à", "aos", "às", "do", "da", "dos", "das", "dum", "duma", "duns", "dumas", "no", "na", "nos", "nas", "num", "numa", "nuns", "numas", "pelo", "pela", "pelos", "pelas", "deste", "desse", "daquele", "desta", "dessa", "daquela", "destes", "desses", "daqueles", "destas", "dessas", "daquelas", "neste", "nesse", "naquele", "nesta", "nessa", "naquela", "nestes", "nesses", "naqueles", "nestas", "nessas", "naquelas", "disto", "disso", "daquilo", "nisto", "nisso", "naquilo", "durante"], u8 = ["também", "e", "ou", "nem"], c8 = ["agora", "conforme", "conquanto", "contanto", "embora", "enquanto", "então", "entretanto", "malgrado", "mas", "pois", "porém", "porquanto", "porque", "senão", "contudo"], gj = ["diz", "dizem", "disse", "disseram", "dizia", "diziam", "reivindica", "reivindicam", "reivindicou", "reivindicaram", "reivindicava", "reivindicavam", "requer", "requerem", "requereu", "requereram", "requeria", "requeriam", "afirma", "afirmam", "afirmou", "afirmaram", "afirmava", "afirmavam", "reivindica", "reivindicam", "reivindicou", "reivindicaram", "reivindicava", "reivindicavam", "perguntam", "perguntou", "perguntaram", "perguntava", "perguntavam", "explica", "explicam", "explicou", "explicaram", "explicava", "explicavam", "relata", "relatam", "relatou", "relataram"], p8 = ["provavelmente", "imediatamente", "ocasionalmente", "indubitavelmente", "para", "possivelmente", "logo", "simultaneamente", "exceto", "inquestionavelmente"], g8 = ["extremamente", "bem", "completamente", "totalmente", "grandemente", "seriamente", "absolutamente", "bastante", "sobremodo", "sobremaneira", "tão"], mj = ["dou", "dás", "dá", "damos", "dais", "dão", "dei", "deu", "demos", "deram", "dava", "davas", "dávamos", "dáveis", "davam", "dera", "deras", "déramos", "déreis", "deram", "darei", "darás", "dará", "daremos", "dareis", "darão", "daria", "darias", "daríamos", "daríeis", "dariam", "dê", "dês", "dêmos", "deis", "deem", "déssemos", "désseis", "dessem", "der", "deres", "dermos", "derdes", "derem", "dai", "deis", "dares", "darmos", "dardes", "darem", "fazendo", "faço", "fazes", "faz", "fazemos", "fazeis", "fazem", "fiz", "fizeste", "fez", "fizemos", "fizestes", "fizeram", "fazia", "fazias", "fazíamos", "fazíeis", "faziam", "fizera", "fizeras", "fizéramos", "fizéreis", "farei", "farás", "fará", "faremos", "fareis", "faria", "farias", "faríamos", "faríeis", "fariam", "faça", "faças", "façamos", "façais", "façam", "fizesse", "fizesses", "fizéssemos", "fizésseis", "fizessem", "fizer", "fizeres", "fizermos", "fizerdes", "fizerem", "fazei", "fazeres", "fazermos", "fazerdes", "fazerem"], fj = ["dar", "fazer"], m8 = ["devagar", "rapidamente", "grande", "grandes", "depressa", "claramente", "effectivamente", "realmente", "exclusivamente", "simplesemente", "somente", "unicamente", "lentamente", "raramente", "certamente", "talvez", "actualmente", "dificilmente", "principalmente", "gerlamente", "enorme", "enormes", "pequeno", "pequena", "pequenos", "pequenas", "minúsculo", "minúsculos", "minúscula", "minúsculas", "velho", "velhos", "velha", "velhas", "lindo", "linda", "lindos", "lindas", "alto", "alta", "altos", "altas", "baixo", "baixa", "baixos", "baixas", "longo", "longa", "longos", "longas", "curto", "curta", "curtos", "curtas", "fácil", "fáceis", "difícil", "difíceis", "simples", "mesmo", "mesma", "mesmos", "mesmas", "mêsmo", "mêsmos", "mêsma", "mêsmas", "cedo", "tarde", "importante", "importantes", "capaz", "capazes", "certo", "certa", "certos", "certas", "usual", "usuals", "ultimamente", "possível", "possíveis", "comum", "comuns", "freqüentemente", "constantemente", "continuamente", "diretamente", "levemente", "algures", "semelhante", "semelhantes", "similar", "similares", "sempre", "ainda", "já", "atrás", "depois"], f8 = ["pior", "melhor", "melhores", "bom", "boa", "bons", "boas", "bonito", "bonita", "bonitos", "bonitas", "grande", "grandes", "pequeno", "pequena", "pequenos", "pequenas", "velho", "velhos", "velha", "velhas", "mau", "má", "maus", "más"], h8 = ["ai", "ah", "ih", "alô", "oi", "olá", "ui", "uf", "psiu", "mau", "olha", "viva", "uau", "wow", "oh", "shi"], y8 = ["kg", "mg", "gr", "g", "km", "m", "l", "ml", "cl"], z8 = ["segundos", "minuto", "minutos", "hora", "horas", "dia", "dias", "semana", "semanas", "mes", "meses", "ano", "anos", "hoje", "amanhã", "ontem"], b8 = ["caso", "casos", "coisa", "coisas", "detalhe", "detalhes", "forma", "formas", "jeito", "jeitos", "maneira", "maneiras", "modo", "modos", "suijeto", "sujeitos", "tópico", "tópicos", "vez", "vezes"], w8 = ["sim", "não", "ok", "amém", "etc", "euro", "euros", "adeus", "jeitos"], v8 = ["sr", "sra", "sras", "dr", "dra", "prof"], JZa = vt.filteredAtBeginning = (0, iu.default)(m8), eJa = vt.filteredAtEnding = (0, iu.default)([].concat(oj, o8, d8, fj, f8)), aJa = vt.filteredAtBeginningAndEnding = (0, iu.default)([].concat(sj, pj, u8, t8, g8, n8, dj)), tJa = vt.filteredAnywhere = (0, iu.default)([].concat(XZa.singleWords, ij, ZB, lj, JB, e8, a8, uj, r8, cj, s8, i8, l8, c8, gj, p8, mj, h8, y8, z8, b8, w8, v8)), nJa = vt.cannotDirectlyPrecedePassiveParticiple = (0, iu.default)([].concat(sj, pj, lj, dj, uj, cj, ij, oj, mj, fj, gj)), rJa = vt.all = (0, iu.default)([].concat(sj, ij, oj, ZB, lj, JB, e8, a8, t8, dj, n8, uj, r8, cj, s8, i8, o8, l8, d8, pj, u8, c8, gj, p8, g8, mj, fj, m8, f8, h8, y8, z8, b8, w8, v8));
vt.default = {
  filteredAtBeginning: JZa,
  filteredAtEnding: eJa,
  filteredAtBeginningAndEnding: aJa,
  filteredAnywhere: tJa,
  cannotDirectlyPrecedePassiveParticiple: nJa,
  all: rJa
};
var Ip = {};
Object.defineProperty(Ip, "__esModule", {
  value: !0
});
Ip.default = void 0;
Ip.default = ["que ", "como", "e", "nem", "se", "caso", "conforme", "consoante", "porque", "pois", "segundo ", "enquanto", "embora", "conquanto", "quanto menos", "quanto mais", "quando", "mal ", "apenas", "ora", "seja", "quer", "já", "logo", "portanto", "por isso", "pois", "рог conseguinte", "ou seja ", "isto é", "quer dizer", "a saber", "ou melhor", "mas", "também", "sim", "porém", "contudo", "senão", "todavia", "mas ainda", "no entanto", "entretanto"];
var ub = {};
Object.defineProperty(ub, "__esModule", {
  value: !0
});
ub.default = void 0;
ub.default = [["não apenas", "como também"], ["não só", "bem como"], ["não só", "como também"], ["não só", "mas também"], ["ora", "ora"], ["ou", "ou"], ["quer", "quer"]];
const sJa = "aeiouáéíóúàâêôãõü", iJa = {
  vowels: [
    {
      fragments: [
        "(gu|qu)[aeoáéíóúêã]"
      ],
      countModifier: -1
    },
    {
      fragments: [
        "[^(g|q|a)][aeiou][aeo]$"
      ],
      countModifier: -1
    },
    {
      fragments: [
        "[aeiouáéíóúàâêôü][aeo]",
        "[aeiou][íúáéóãê]"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "aí[ae]"
      ],
      countModifier: 1
    }
  ],
  words: {
    full: [
      {
        word: "delegacia",
        syllables: 5
      },
      {
        word: "democracia",
        syllables: 5
      },
      {
        word: "parceria",
        syllables: 4
      },
      {
        word: "secretaria",
        syllables: 5
      }
    ],
    fragments: []
  }
}, oJa = {
  vowels: sJa,
  deviations: iJa
};
var cb = {};
Object.defineProperty(cb, "__esModule", {
  value: !0
});
cb.default = void 0;
cb.default = {
  recommendedLength: 25
};
var hj = {}, pb = {}, yj = {}, gb = {};
Object.defineProperty(gb, "__esModule", {
  value: !0
});
gb.default = void 0;
gb.default = ["ab-rogad", "abrogad", "abacharelad", "abacinad", "abafad", "abainhad", "abaixad", "abalad", "abalienad", "abalroad", "abanad", "abandad", "abandonad", "abarbad", "abarcad", "abarregad", "abarrotad", "abastardad", "abastecid", "abatid", "abdicad", "abduzid", "abençoad", "aberrad", "abert", "abespinhad", "abestad", "abirritad", "abismad", "abjurad", "ablaquead", "ablegad", "abluíd", "abnegad", "abobadad", "abobad", "abocanhad", "abolid", "abominad", "abordad", "abortad", "abotoad", "abraçad", "abrandad", "abrangid", "abrasad", "abrasileirad", "abreviad", "abrigad", "abroquelad", "abscedid", "abscindid", "absolutizad", "absolvid", "absort", "absorvid", "abstid", "abstraíd", "abundad", "abusad", "acabad", "acabrunhad", "açacalad", "academizad", "acalentad", "acalmad", "acamad", "acampad", "acaramelad", "acarditad", "acariciad", "acarretad", "acartad", "acastelad", "acatad", "acautelad", "accentuad", "acclarad", "accolhid", "accordad", "accreditad", "accusad", "acedid", "aceitad", "acelerad", "acenad", "acendid", "acentuad", "acerad", "acerbad", "acercad", "acertad", "acervad", "acessad", "acetificad", "achad", "achanad", "achaparrad", "achatad", "achegad", "acicatad", "acidificad", "acidulad", "acinzentad", "acionad", "acirrad", "aclamad", "aclarad", "aclimad", "aclimatad", "acobardad", "acobertad", "açodad", "acoimad", "açoitad", "acolchoad", "acolhid", "acometid", "acomodad", "acompanhad", "acompridad", "aconchegad", "acondicionad", "aconselhad", "acontecid", "acoplad", "acordad", "acorrentad", "acortinad", "acostad", "acostumad", "açoutad", "acovardad", "acreditad", "acrescentad", "acrescid", "acromatizad", "activad", "actuad", "actualizad", "açucarad", "acudid", "açulad", "acuminad", "acumulad", "acusad", "adaptad", "adelgaçad", "adentrad", "adequad", "aderid", "adestrad", "adherid", "adiad", "adiantad", "adicionad", "adid", "aditad", "adivinhad", "adjetivad", "adjudicad", "administrad", "admirad", "admitid", "admoestad", "adoçad", "adocicad", "adoecid", "adoptad", "adorad", "adormecid", "adornad", "adotad", "adquirid", "adsorvid", "adulad", "adulterad", "aduzid", "advertid", "advind", "advocad", "aerad", "afadigad", "afagad", "afamad", "afastad", "afazendad", "afectad", "afeiçoad", "afeit", "aferventad", "afetad", "afiad", "afiançad", "afigurad", "afilad", "afiliad", "afinad", "afirmad", "afivelad", "afixad", "afligid", "aflorad", "afluíd", "afobad", "afogad", "afrancesad", "afrontad", "afrouxad", "afugentad", "afundad", "afundid", "agachad", "agaload", "agarrad", "agasalhad", "agastad", "agendad", "agid", "agilizad", "agitad", "aglomerad", "aglutinad", "agoirad", "agoirentad", "agoniad", "agonizad", "agourad", "agourentad", "agraciad", "agradad", "agradecid", "agrafad", "agravad", "agredid", "agregad", "agrilhoad", "agrupad", "aguad", "aguardad", "aguçad", "aguentad", "agüentad", "aguilhoad", "aguisad", "airad", "ajeitad", "ajoelhad", "ajudad", "ajuizad", "ajuntad", "ajustad", "alad", "alagad", "alambicad", "alapad", "alardead", "alargad", "alarmad", "alastrad", "albergad", "alçad", "alcaguetad", "alcalinizad", "alcançad", "alcatroad", "alcoolizad", "alcovitad", "alcunhad", "aleatorizad", "alegad", "alegorizad", "alegrad", "aleitad", "alentad", "alertad", "alevantad", "alfabetizad", "alforriad", "algemad", "alhead", "aliad", "alicatead", "alicerçad", "aliciad", "alienad", "aligeirad", "alijad", "alimentad", "alinhad", "alisad", "alistad", "aliviad", "almejad", "almoçad", "almoedad", "alocad", "aloirad", "alojad", "alongad", "alourad", "altead", "alterad", "altercad", "alternad", "alucinad", "aludid", "alugad", "alumiad", "alunad", "alunissad", "aluviad", "alvejad", "alvoroçad", "alvorotad", "amaciad", "amad", "amadurecid", "amainad", "amaldiçoad", "amalgamad", "amamentad", "amancebad", "amanhad", "amanhecid", "amansad", "amanteigad", "amarrad", "amassad", "amaynad", "ameaçad", "amead", "amealhad", "amedorentad", "amedrontad", "ameigad", "amenizad", "americanizad", "amestrad", "amigad", "amimad", "amnistiad", "amofinad", "amolad", "amolecid", "amolentad", "amolgad", "amontoad", "amordaçad", "amorenad", "amortalhad", "amortecid", "amortizad", "amostrad", "amotinad", "ampliad", "amputad", "amuad", "amurad", "amuralhad", "anabolizad", "anafad", "analisad", "anarquizad", "anatematizad", "ancilosad", "ancinhad", "ancorad", "andad", "anestesiad", "anexad", "angariad", "anglicizad", "angulad", "angustiad", "animad", "animalizad", "aninhad", "aniquilad", "aniversariad", "anodizad", "anoitecid", "anonimizad", "anormalizad", "anotad", "anquilosad", "ansiad", "antagonizad", "antecipad", "antedatad", "antepost", "antojad", "antolhad", "antropizad", "antropomorfizad", "anualizad", "anuíd", "anulad", "anunciad", "apagad", "apainelad", "apaixonad", "apalpad", "apanhad", "apaniguad", "aparad", "aparafusad", "aparatad", "aparecid", "aparelhad", "aparentad", "apartad", "apassamanad", "apatetad", "apavorad", "apaziguad", "apead", "apedrejad", "apegad", "apelad", "apelidad", "apenad", "apensad", "apercebid", "aperfeiçoad", "aperread", "apertad", "apetecid", "apiedad", "apimentad", "apitad", "aplacad", "aplainad", "aplanad", "aplaudid", "aplicad", "apocopad", "apoderad", "apodizad", "apodrecid", "apoiad", "apologizad", "apontad", "apoquentad", "aportad", "aportuguesad", "aposentad", "apossad", "apostad", "apostatad", "apostemad", "apost", "apostrofad", "apoteosad", "apoteotizad", "apoucad", "approvad", "aprazid", "apreciad", "apreendid", "apregoad", "aprendid", "apresentad", "apressad", "aprestad", "aprisionad", "aprofundad", "aprontad", "apropriad", "aprovad", "aproveitad", "aprovisionad", "aproximad", "aprumad", "apunhalad", "apurad", "aquaplanad", "aquartelad", "aquecid", "aquentad", "aquiescid", "aquietad", "arabizad", "arad", "arbitrad", "arborescid", "arborizad", "arcabuzad", "arcad", "ardid", "aread", "arejad", "argentad", "arguid", "argumentad", "arianizad", "armad", "armazenad", "aromatizad", "arpejad", "arpoad", "arquead", "arquejad", "arquitetad", "arquivad", "arraigad", "arrancad", "arranhad", "arranjad", "arrasad", "arrastad", "arrazoad", "arread", "arrebanhad", "arrebatad", "arrebentad", "arrebitad", "arrecadad", "arrecead", "arredad", "arredondad", "arrefecid", "arregalad", "arreganhad", "arreigad", "arrematad", "arremedad", "arremessad", "arrendad", "arrepanhad", "arrestad", "arribad", "arrimad", "arriscad", "arrogad", "arrojad", "arrombad", "arrotad", "arroubad", "arroxead", "arruad", "arruinad", "arrulhad", "arrumad", "arseniad", "arterializad", "articulad", "artificializad", "artilhad", "asad", "ascendid", "asfaltad", "asfixiad", "asilad", "aspirad", "assacad", "assaltad", "assassinad", "assead", "assediad", "assegurad", "assemelhad", "assenhoread", "assentad", "assentid", "assertad", "assestad", "assignalad", "assimilad", "assinad", "assinalad", "assistid", "assoberbad", "assobiad", "associad", "assolad", "assomad", "assombrad", "assoprad", "assoread", "assossegad", "assoviad", "assumid", "assustad", "atacad", "atad", "atalhad", "atanazad", "atapetad", "atarracad", "atarraxad", "ataviad", "atazanad", "atead", "atemorizad", "atempad", "atenazad", "atendid", "atentad", "atenuad", "aterrad", "aterrissad", "aterrorizad", "atestad", "atiçad", "atid", "atilad", "atinad", "atingid", "atirad", "ativad", "atochad", "atolad", "atomizad", "atordoad", "atormentad", "atracad", "atraiçoad", "atraíd", "atrapalhad", "atrasad", "atravancad", "atravessad", "atrelad", "atribuíd", "atribulad", "atritad", "atroad", "atrofiad", "atropelad", "attentad", "atturad", "atuad", "atualizad", "aturad", "auferid", "augad", "augmentad", "augurad", "aumentad", "aureolad", "auscultad", "ausentad", "autenticad", "automatizad", "autoproclamad", "autorizad", "autuad", "auxiliad", "avaliad", "avançad", "avariad", "avassalad", "aventad", "aventurad", "averbad", "avergonhad", "averiguad", "avermelhad", "aviad", "avinagrad", "avind", "avisad", "avistad", "avivad", "aviventad", "avoad", "azedad", "azotad", "azulad", "azulejad", "babad", "babujad", "bacharelad", "bafejad", "bailad", "bainhad", "baixad", "bajulad", "balad", "balançad", "balancead", "balbuciad", "balcanizad", "baldad", "baldead", "balead", "balid", "balouçad", "bambolead", "banalizad", "bancad", "banhad", "banquetead", "baptizad", "baralhad", "baratead", "barbead", "barganhad", "barrad", "barrid", "basead", "bastad", "bastecid", "batalhad", "batid", "batizad", "batucad", "bazad", "beatificad", "bebemorad", "bebericad", "bebid", "beijad", "beirad", "beliscad", "beneficiad", "benzid", "berrad", "besuntad", "bicad", "bichad", "bifurcad", "bioacumulad", "biotransformad", "bisad", "bisbilhotad", "biscatead", "bivacad", "blandiciad", "blasfemad", "blasonad", "blefad", "blindad", "blogad", "bloquead", "bocejad", "boiad", "boicotad", "bojad", "bolad", "bombad", "bombardead", "bombead", "borboletead", "borbulhad", "bordad", "borrad", "borrifad", "botad", "botanizad", "boxead", "bradad", "bramid", "brandid", "branquead", "brecad", "brigad", "brilhad", "brincad", "brindad", "britad", "brocad", "brochad", "bronzead", "brotad", "bufad", "bugad", "bulhad", "burilad", "burlad", "burocratizad", "buscad", "buzinad", "cabecead", "cabid", "cabriolad", "caçad", "cacarejad", "cacetead", "cachad", "cachead", "cacimbad", "caçoad", "cadastrad", "caducad", "cafetinad", "cagad", "caíd", "calad", "calafetad", "calcad", "calçad", "calcificad", "calcinad", "calculad", "calejad", "calhad", "calibrad", "caluniad", "cambad", "cambalead", "cambiad", "caminhad", "camuflad", "canalizad", "cancelad", "canonizad", "cansad", "cantad", "cantarolad", "capacitad", "capad", "capinad", "capitalizad", "capitanead", "capitulad", "capotad", "captad", "capturad", "caracterizad", "caraterizad", "carbonizad", "cardad", "carecid", "cariciad", "carimbad", "carread", "carregad", "cascatead", "casquinad", "cassad", "castigad", "castrad", "catad", "catalisad", "catalizad", "catalogad", "categorizad", "catequizad", "cativad", "caucionad", "causad", "cautelad", "cauterizad", "cavad", "cavalgad", "cavoucad", "cead", "cecead", "cedid", "cegad", "ceifad", "celebrad", "censurad", "centelhad", "centrad", "centralizad", "centrifugad", "cercad", "cerrad", "certificad", "cerzid", "cessad", "cevad", "chacinad", "chacoalhad", "chafurdad", "chamad", "chamuscad", "chanfrad", "chantagead", "chapad", "chapead", "chatead", "checad", "chefiad", "chegad", "cheirad", "chiad", "chibatad", "chibatead", "chicanad", "chicotead", "chifrad", "chilread", "chimarread", "chimarronead", "chocad", "chocalhad", "chorad", "choramingad", "chouvid", "chovid", "chufad", "chumbad", "chupad", "chutad", "chuviscad", "cicatrizad", "cifrad", "cimentad", "cindid", "cingid", "cintad", "cintilad", "circulad", "circuncidad", "circundad", "circunscrit", "circunstanciad", "cisad", "cisalhad", "cismad", "citad", "civilizad", "clamad", "claread", "clarificad", "classificad", "clicad", "clonad", "clorad", "coadjuvad", "coad", "coagid", "coagulad", "coalescid", "coalhad", "coassinad", "coaxad", "cobert", "cobiçad", "cobrad", "coçad", "cocegad", "cochichad", "cochilad", "codificad", "coevoluíd", "coexistid", "cofiad", "cogitad", "coincidid", "coisad", "coisificad", "coitad", "colaborad", "colad", "colead", "colecionad", "coletad", "colhid", "colidid", "coligad", "coligid", "collocad", "colmad", "colmatad", "colocad", "colonizad", "colorid", "comandad", "combalid", "combatid", "combinad", "comboiad", "começad", "comedid", "comemorad", "comendad", "comentad", "comercializad", "cometid", "comichad", "comid", "cominad", "commeçad", "comovid", "compactad", "compadecid", "comparad", "comparecid", "compartilhad", "compenetrad", "compensad", "competid", "compilad", "complementad", "completad", "complexad", "complicad", "comportad", "compostad", "compost", "comprad", "compreendid", "comprehendid", "comprimid", "comprometid", "comprovad", "compulsad", "computad", "comungad", "comunicad", "comutad", "concatenad", "concebid", "concedid", "concentrad", "concernid", "concertad", "concluíd", "concordad", "concorrid", "concretizad", "condecorad", "condemnad", "condenad", "condensad", "condicionad", "condimentad", "conduzid", "conectad", "confeccionad", "conferid", "confessad", "confiad", "configurad", "confinad", "confirmad", "confiscad", "conflitad", "conformad", "confortad", "confraternizad", "confrontad", "confundid", "congelad", "congestionad", "congraçad", "congregad", "conjecturad", "conjeturad", "conjugad", "conjurad", "connectad", "conotad", "conquistad", "consagrad", "conseguid", "consentid", "consertad", "conservad", "considerad", "consignad", "consistid", "consolad", "consolidad", "conspirad", "conspurcad", "constad", "constatad", "consternad", "constituíd", "constrangid", "construíd", "consubstanciad", "consultad", "consumad", "consumid", "contactad", "contad", "contagiad", "contaminad", "contatad", "contemplad", "contendid", "contentad", "contestad", "contid", "continuad", "contornad", "contra-atacad", "contraatacad", "contrabalançad", "contrabalancead", "contrabandead", "contrafeit", "contraíd", "contrariad", "contrastad", "contratad", "contribuíd", "contristad", "controlad", "conturbad", "convalescid", "convalidad", "convencid", "convencionad", "conversad", "convertid", "convidad", "convid", "convind", "convivid", "convocad", "convulsad", "convulsionad", "cooperad", "coordenad", "copiad", "copulad", "corad", "cornead", "coroad", "correlacionad", "correspondid", "corricad", "corrid", "corrigid", "corroborad", "corrompid", "cortad", "cortejad", "cosid", "costead", "costumad", "costurad", "cotad", "cotejad", "couraçad", "cozid", "cozinhad", "craquead", "cravad", "cravejad", "credenciad", "creditad", "cremad", "crepitad", "crescid", "crestad", "criad", "cricrilad", "crid", "criminalizad", "criptografad", "crispad", "cristalizad", "cristianizad", "criticad", "crochetad", "cromad", "cronologizad", "cronometrad", "crucificad", "cruzad", "cubad", "cubicad", "cuidad", "culminad", "culpad", "cultivad", "cultuad", "cumprid", "cumprimentad", "cumulad", "curad", "cursad", "curtid", "curto-circuitad", "curtocircuitad", "curvad", "curvetead", "cuspid", "custad", "custead", "custodiad", "customizad", "cutucad", "dadivad", "dad", "damasquinad", "damnad", "dançad", "danificad", "dardejad", "datad", "datilografad", "deambulad", "debatid", "debicad", "debilitad", "debitad", "debochad", "debruçad", "debulhad", "debutad", "debuxad", "decaíd", "decalcad", "decantad", "decapitad", "dececionad", "decepad", "decepcionad", "decidid", "decifrad", "declamad", "declarad", "declinad", "decolad", "decompost", "decorad", "decorrid", "decotad", "decrescid", "decretad", "decuplicad", "dedicad", "dedilhad", "dedurad", "deduzid", "defecad", "defendid", "defenestrad", "deferid", "definhad", "definid", "deflorad", "deformad", "defraudad", "defumad", "deglaçad", "deglacead", "deglutid", "degolad", "degradad", "degustad", "deificad", "deitad", "deixad", "delatad", "delegad", "deliberad", "deliciad", "delid", "delimitad", "delinead", "delinquid", "delongad", "demandad", "demarcad", "demitid", "demittid", "democratizad", "demolid", "demonstrad", "demorad", "denigrid", "denominad", "denotad", "dentad", "dentead", "denunciad", "deparad", "depauperad", "depenad", "dependid", "depilad", "deportad", "depositad", "depost", "deprecad", "depreciad", "depredad", "deprimid", "depurad", "deputad", "derivad", "derrabad", "derramad", "derrapad", "derretid", "derribad", "derrocad", "derrogad", "derrotad", "derrubad", "derruíd", "desabad", "desabafad", "desabalroad", "desabilitad", "desabituad", "desabotoad", "desabraçad", "desabrochad", "desacelerad", "desacompanhad", "desaconselhad", "desacreditad", "desactivad", "desafiad", "desafivelad", "desafogad", "desagradad", "desagradecid", "desagravad", "desagregad", "desaguisad", "desajustad", "desalentad", "desalojad", "desalvorad", "desamarrad", "desamparad", "desancorad", "desandad", "desanimad", "desaparecid", "desapegad", "desapontad", "desaprovad", "desarmad", "desarraigad", "desarranjad", "desarrazoad", "desarrumad", "desarticulad", "desarvorad", "desasad", "desatad", "desatarraxad", "desativad", "desbastad", "desbloquead", "desbotad", "descabelad", "descaíd", "descalçad", "descamad", "descambad", "descansad", "descarbonizad", "descarnad", "descaroçad", "descarregad", "descarrilad", "descartad", "descascad", "descendid", "descercad", "descid", "descobert", "descolad", "descolonizad", "descolorid", "descomplicad", "descompost", "desconcertad", "desconfiad", "desconfortad", "descongelad", "desconsagrad", "desconseguid", "desconsiderad", "desconsolad", "descontad", "descontentad", "desconversad", "desconvidad", "descoroçoad", "descortinad", "descrit", "descubert", "descuidad", "desculpad", "desdemocratizad", "desdenhad", "desdobrad", "desejad", "desemaranhad", "desembalad", "desembarcad", "desembargad", "desembestad", "desempenhad", "desencadead", "desencaminhad", "desencantad", "desencontrad", "desencorajad", "desencriptad", "desenganad", "desenhad", "desenrolad", "desenterrad", "desentranhad", "desenvolvid", "desequilibrad", "deserdad", "desertad", "desesperad", "desesperançad", "desestabilizad", "deseuropeizad", "desfalcad", "desfalecid", "desfarçad", "desfechad", "desfeit", "desferid", "desfiad", "desfigurad", "desfivelad", "desflorestad", "desfocad", "desfragmentad", "desfraldad", "desfrutad", "desgastad", "desgostad", "desidratad", "designad", "desiludid", "desimpedid", "desinfetad", "desinflad", "desinstalad", "desintegrad", "desintoxicad", "desistid", "desjejuad", "deslastrad", "deslavad", "desleixad", "desligad", "deslizad", "deslocad", "deslocalizad", "deslogad", "deslumbrad", "deslustrad", "desmagnetizad", "desmaiad", "desmamad", "desmanchad", "desmantelad", "desmarcad", "desmatad", "desmembrad", "desmentid", "desmerecid", "desmistificad", "desmitificad", "desmobilizad", "desmontad", "desmoralizad", "desmoronad", "desmotivad", "desnivelad", "desnortead", "desobrigad", "desobstruíd", "desocupad", "desolad", "desonerad", "desonrad", "desordenad", "desorganizad", "desorientad", "desossad", "desovad", "desoxidad", "desoxigenad", "despachad", "despadronizad", "despedaçad", "despedid", "despejad", "despelad", "despencad", "despendid", "desperdiçad", "despersuadid", "despertad", "despid", "despojad", "despolarizad", "despontad", "desposad", "despregad", "desprendid", "desprezad", "desproporcionad", "desprotegid", "desprovid", "desqualificad", "desregulad", "desrespeitad", "dessalinizad", "desseguid", "dessulfurad", "dessulfurizad", "destacad", "destelhad", "desterrad", "destilad", "destillad", "destinad", "destituíd", "destoad", "destrancad", "destratad", "destrinçad", "destrinchad", "destroçad", "destruíd", "destrunfad", "desumanizad", "desunid", "desvairad", "desvalorizad", "desvelad", "desvendad", "desviad", "desvinculad", "desvirginad", "desvirtuad", "detalhad", "detectad", "deteriorad", "determinad", "detestad", "detetad", "detid", "detonad", "devanead", "devassad", "devastad", "devid", "devolvid", "devorad", "devotad", "deyxad", "diagnosticad", "dialogad", "difamad", "diferenciad", "diferid", "differid", "dificultad", "difratad", "difundid", "digerid", "digitad", "digitalizad", "dignad", "dilacerad", "dilapidad", "dilatad", "diluíd", "diminuíd", "dinamitad", "dinamizad", "diplomad", "direccionad", "direcionad", "dirigid", "dirimid", "discad", "discernid", "disciplinad", "discordad", "discorrid", "discretead", "discriminad", "discutid", "disfarçad", "disparad", "dispensad", "dispersad", "disponibilizad", "dispost", "disputad", "dissecad", "disseminad", "dissentid", "dissimulad", "dissipad", "dissolvid", "dissuadid", "distad", "distanciad", "distinguid", "distorcid", "distraíd", "distratad", "distribuíd", "ditad", "dit", "divagad", "diversificad", "divertid", "dividid", "divisad", "divulgad", "dizimad", "doad", "dobrad", "doíd", "domad", "domesticad", "domiciliad", "dominad", "dopad", "dormid", "dormitad", "dosad", "dotad", "doutrinad", "dragad", "dramatizad", "drenad", "driblad", "drogad", "dublad", "duchad", "duelad", "duplicad", "durad", "duvidad", "eclipsad", "ecoad", "economizad", "edificad", "editad", "educad", "efectivad", "efectuad", "efetivad", "efetuad", "eivad", "ejaculad", "ejetad", "elaborad", "electrificad", "electrocutad", "elegid", "eleit", "elencad", "eletrificad", "eletrocutad", "eletrolisad", "elevad", "eliminad", "elogiad", "elucidad", "elucubrad", "eludid", "emaciad", "emagrecid", "emanad", "emancipad", "emaranhad", "emasculad", "embaíd", "embainhad", "embalad", "embalsamad", "embaraçad", "embaralhad", "embarcad", "embasad", "embebedad", "embebid", "embeiçad", "embelezad", "embirrad", "embolad", "embonecad", "emboscad", "embotad", "embotelhad", "embrenhad", "embriagad", "embromad", "embrulhad", "embuçad", "emburrad", "emburrecid", "embutid", "emendad", "ementad", "emergid", "emigrad", "emitid", "emmagrecid", "emmoldurad", "emocionad", "emoldurad", "empachad", "empacotad", "empalad", "empalhad", "empalidecid", "empanad", "empapelad", "emparedad", "empatad", "empeçonhad", "empedernid", "empenhad", "emperrad", "empestead", "empilhad", "empinad", "empiorad", "empoad", "empobrecid", "empoderad", "empoleirad", "empreendid", "empregad", "empregu", "emprehendid", "empreitad", "emprenhad", "emprestad", "empunhad", "empurrad", "emudecid", "emulad", "emurchecid", "enaltecid", "enamorad", "encabulad", "encaçapad", "encadead", "encadernad", "encaixad", "encaixilhad", "encaixotad", "encalhad", "encaminhad", "encampad", "encanad", "encantad", "encapad", "encapsulad", "encapuzad", "encaracolad", "encarad", "encarecid", "encarnad", "encarniçad", "encaroçad", "encarquilhad", "encarregad", "encarregu", "encarrilhad", "encasquetad", "encayxad", "encefalizad", "encenad", "encerad", "encerrad", "encestad", "encetad", "encharcad", "enchid", "enclausurad", "encobert", "encoleirad", "encolerizad", "encolhid", "encomendad", "encompridad", "encontrad", "encorajad", "encordoad", "encorpad", "encortinad", "encostad", "encravad", "encrespad", "encriptad", "encurtad", "endereçad", "endireitad", "endividad", "endoidecid", "endossad", "endoutrinad", "endurecid", "enegrecid", "energizad", "enervad", "enevoad", "enfardad", "enfardelad", "enfarruscad", "enfatizad", "enfatuad", "enfeitad", "enfeitiçad", "enferrujad", "enfiad", "enfileirad", "enforcad", "enfraquecid", "enfrentad", "enfronhad", "enfumaçad", "enfurecid", "engabelad", "engaiolad", "engajad", "engambelad", "enganad", "enganchad", "engarrafad", "engasgad", "engastad", "engatad", "engatinhad", "engendrad", "engessad", "englobad", "engodad", "engolid", "engomad", "engordad", "engordurad", "engrandecid", "engravidad", "engraxad", "engrenad", "engrossad", "enguiçad", "enlaçad", "enlatad", "enlouquecid", "enmendad", "enquadrad", "enraivecid", "enraizad", "enramalhetad", "enredad", "enriçad", "enriquecid", "enrocad", "enrolad", "enrubescid", "enrugad", "ensaboad", "ensacad", "ensaiad", "ensanguentad", "ensangüentad", "ensejad", "ensinad", "ensolarad", "ensombrad", "ensopad", "ensurdecid", "entabuad", "entabulad", "entalhad", "entardecid", "entediad", "entelhad", "entendid", "enternecid", "enterrad", "entintad", "entitulad", "entoad", "entornad", "entorpecid", "entortad", "entrad", "entrançad", "entranhad", "entravad", "entreabert", "entrecortad", "entregad", "entregu", "entrelaçad", "entrelinhad", "entremead", "entreolhad", "entretid", "entrevad", "entrevistad", "entrevist", "entrincheirad", "entristecid", "entronad", "entronizad", "entulhad", "entupid", "entusiasmad", "enumerad", "enunciad", "envelhecid", "envenenad", "envergad", "envergonhad", "envernizad", "enviad", "enviesad", "enviuvad", "envolvid", "enxadad", "enxamead", "enxergad", "enxertad", "enxotad", "enxugad", "enxut", "epitomizad", "equilibrad", "equipad", "equiparad", "equivocad", "erguid", "erigid", "erodid", "erotizad", "erradicad", "eructad", "esbarrad", "esbatid", "esboçad", "esbodegad", "esbofetead", "esbombardead", "esbracejad", "esbrasead", "esbulhad", "esburacad", "escachoad", "escalad", "escaldad", "escalfad", "escalonad", "escalpad", "escalpelad", "escamad", "escançad", "escancarad", "escancead", "escandid", "escanead", "escapad", "escapulid", "escarafunchad", "escaramuçad", "escarnecid", "escarnid", "escarrad", "escassead", "escavad", "esclarecid", "escoad", "escolarizad", "escolhid", "escoltad", "escondid", "escorad", "escorregad", "escorrid", "escovad", "escravizad", "escrit", "escriturad", "escrutinizad", "escuitad", "esculachad", "esculpid", "escurecid", "escusad", "escutad", "esfalfad", "esfaquead", "esfarelad", "esfarrapad", "esfolad", "esfomead", "esforçad", "esfregad", "esfriad", "esfuziad", "esganad", "esgarçad", "esgotad", "esgravatad", "esgrimid", "esguichad", "esmaecid", "esmagad", "esmaltad", "esmerad", "esmigalhad", "esmiuçad", "esmorecid", "esmurrad", "espaçad", "espacead", "espairecid", "espalhad", "espalmad", "espancad", "espantad", "esparramad", "especializad", "especificad", "especulad", "espedid", "espelhad", "esperad", "esperançad", "espernead", "espezinhad", "espiad", "espichad", "espigad", "espinafrad", "espionad", "espiritualizad", "espirrad", "espocad", "espojad", "esporrad", "esposad", "espoucad", "espreitad", "espremid", "espumad", "esquadrinhad", "esquecid", "esquentad", "esquiad", "esquilad", "esquinad", "esquivad", "estabelecid", "estabilizad", "estacad", "estacionad", "estad", "estafad", "estagiad", "estagnad", "estalad", "estampad", "estandardizad", "estanhad", "estarrecid", "estatizad", "estatuíd", "estendid", "estenografad", "estenographad", "estereotipad", "esterilizad", "esticad", "estigmatizad", "estilhaçad", "estilizad", "estimad", "estimulad", "estiolad", "estipulad", "estirad", "estivad", "estocad", "estoirad", "estolad", "estontead", "estorvad", "estourad", "estraçalhad", "estragad", "estralad", "estrangulad", "estranhad", "estratificad", "estread", "estreiad", "estreitad", "estrelad", "estremecid", "estressad", "estridulad", "estripad", "estrondead", "estropead", "estropiad", "estrugid", "estrupidad", "estruturad", "estudad", "estufad", "estupeficad", "estupidificad", "estuprad", "esvaziad", "esverdead", "etiquetad", "europeizad", "evacuad", "evadid", "evangelizad", "evaporad", "eventrad", "evidenciad", "evitad", "evocad", "evolad", "evoluíd", "evolvid", "exacerbad", "exagerad", "exalad", "exaltad", "examinad", "exasperad", "exaurid", "excedid", "excelid", "excellid", "excepcionad", "exceptuad", "excetuad", "excitad", "exclamad", "excluíd", "excomungad", "excretad", "excutid", "executad", "exercid", "exercitad", "exhalad", "exhortad", "exibid", "exigid", "exilad", "eximid", "existid", "exonerad", "exorcizad", "exortad", "expandid", "expatriad", "expectorad", "expedid", "experienciad", "experimentad", "expirad", "explanad", "explicad", "explorad", "exportad", "expost", "expressad", "exprimid", "expropriad", "expugnad", "expulsad", "expurgad", "exsecutad", "extasiad", "extendid", "extenuad", "exteriorizad", "exterminad", "externalizad", "extinguid", "extint", "extirpad", "extorquid", "extractad", "extraditad", "extraíd", "extratad", "extraviad", "exultad", "exumad", "fabricad", "facetad", "facilitad", "facturad", "facultad", "fadigad", "fagocitad", "fagulhad", "falad", "falecid", "falhad", "fallad", "falsead", "falsificad", "faltad", "familiarizad", "fantasiad", "fardad", "farejad", "farfalhad", "fartad", "fascinad", "fatiad", "fatigad", "fatorad", "faturad", "faxinad", "fechad", "fech", "fecundad", "fedid", "feit", "felicitad", "fenad", "fendid", "fenecid", "ferid", "fermentad", "ferrad", "fertilizad", "fervid", "fervilhad", "festad", "festejad", "fiad", "ficad", "figurad", "filad", "filiad", "filmad", "filosofad", "filtrad", "finad", "finalizad", "financiad", "fincad", "findad", "find", "fingid", "finlandizad", "firmad", "fiscalizad", "fisgad", "fissionad", "fissurad", "fitad", "fixad", "flabelad", "flagelad", "flanquead", "flexionad", "flipad", "floodad", "floread", "florescid", "fluíd", "fluorad", "fluoretad", "flutuad", "focalizad", "fodid", "fofocad", "folgad", "folhead", "fomentad", "foragid", "forcad", "forçad", "forjad", "formad", "formatad", "formigad", "formulad", "fornecid", "fornicad", "forrad", "fortalecid", "fortificad", "fosfatad", "fosforescid", "fosforilad", "fossad", "fotocopiad", "fotografad", "fraccionad", "fracionad", "fragmentad", "franjad", "franquead", "franzid", "fraquead", "fraquejad", "frasead", "fraternizad", "fraturad", "fraudad", "fread", "freiad", "frequentad", "freqüentad", "fresquead", "friccionad", "frisad", "fritad", "frit", "fruíd", "frustrad", "fuçad", "fugid", "fumad", "fumegad", "fumigad", "funccionad", "funcionad", "fundad", "fundamentad", "fundid", "fungad", "furad", "furtad", "fusionad", "fustigad", "futricad", "fuzilad", "gabad", "gadanhad", "gaguejad", "galgad", "galopad", "galopead", "galvanizad", "gamad", "ganhad", "ganh", "ganid", "ganzad", "garantid", "gargalhad", "gargarejad", "gaseificad", "gastad", "gast", "gatunad", "gelad", "gemid", "generalizad", "genotipad", "gerad", "gerenciad", "gerid", "germinad", "gestad", "gesticulad", "gestualizad", "ginasticad", "girad", "globalizad", "gloriad", "glorificad", "glosad", "golead", "golpead", "gomitad", "googlad", "gorad", "gorjead", "gostad", "gotejad", "governad", "gozad", "gracejad", "gracitad", "gradad", "graduad", "grafitad", "gramad", "grampead", "granizad", "grasnad", "grasnid", "grassitad", "gratificad", "gratinad", "gravad", "gravitad", "grelhad", "gripad", "gritad", "grudad", "grunhid", "guardad", "guarnecid", "guerread", "guglad", "guiad", "guinchad", "guindad", "guisad", "habilitad", "habitad", "habituad", "hackead", "halogenad", "harmonizad", "hastead", "havid", "helenizad", "herdad", "hesitad", "hibernad", "hibridizad", "hidratad", "hidrogenad", "hipertrofiad", "hipnotizad", "hipotecad", "homenagead", "homogeneizad", "homologad", "honrad", "horrorizad", "hortad", "hospedad", "hospitalizad", "humedecid", "humidecid", "humilhad", "içad", "idead", "idealizad", "identificad", "ideologizad", "idolatrad", "ignorad", "igualad", "ilegalizad", "ilhad", "ilibad", "ilidid", "iludid", "iluminad", "ilustrad", "imaginad", "imanad", "imantad", "imbuíd", "imigrad", "imiscuíd", "imitad", "imobilizad", "imolad", "impactad", "impedid", "impelid", "imperad", "impetrad", "implantad", "implementad", "implicad", "implorad", "importad", "importunad", "impossibilitad", "impost", "imprecad", "impregnad", "impressionad", "impress", "imprimid", "improvisad", "impulsionad", "imputad", "imunizad", "inactivad", "inalad", "inaugurad", "incapacitad", "incendiad", "incensad", "incentivad", "inchad", "incidid", "incinerad", "incisad", "incitad", "inclinad", "incluíd", "inclus", "incomodad", "incorporad", "incorrid", "incriminad", "incrustad", "incubad", "inculcad", "inculpad", "incumbid", "indagad", "indeferid", "indefinid", "indemnizad", "indenizad", "independid", "indexad", "indicad", "indiciad", "indispost", "indultad", "industrializad", "induzid", "inebriad", "inerid", "infectad", "inferid", "infestad", "infiltrad", "infirmad", "inflad", "inflamad", "influenciad", "influíd", "informad", "infringid", "ingerid", "inhibid", "inibid", "iniciad", "inicializad", "injetad", "injungid", "injuriad", "injustiçad", "inocentad", "inovad", "inquietad", "inquirid", "inscrit", "inserid", "insinuad", "insistid", "inspecionad", "inspirad", "instalad", "instanciad", "instigad", "instituíd", "instruíd", "insultad", "integrad", "inteirad", "intencionad", "intensificad", "interagid", "intercalad", "intercambiad", "intercedid", "interceptad", "interditad", "interessad", "interferid", "interligad", "intermediad", "internacionalizad", "internad", "interpelad", "interpolad", "interpost", "interpretad", "interrogad", "interrompid", "intersectad", "intervind", "intimad", "intimidad", "intitulad", "intoxicad", "intricad", "intrigad", "intrincad", "introduzid", "intrometid", "inundad", "inutilizad", "invadid", "invalidad", "invectivad", "invejad", "inventad", "invernad", "invertid", "investid", "investigad", "invocad", "iodad", "irad", "irradiad", "irrigad", "irritad", "irrogad", "irrompid", "iscad", "isolad", "iterad", "jactad", "janelad", "jantad", "japonizad", "jardinad", "jazid", "jejuad", "joeirad", "jogad", "jorrad", "jubilad", "judiad", "julgad", "jungid", "juntad", "jurad", "juramentad", "justapost", "justificad", "labutad", "laçad", "lacrad", "lacrimejad", "ladead", "ladrilhad", "lagartead", "lajead", "lambid", "lamentad", "laminad", "lamuriad", "lançad", "lancead", "lanchad", "lapidad", "largad", "lascad", "lastad", "lastimad", "latejad", "latid", "latinad", "latinizad", "lavad", "lavrad", "lẽbrad", "legad", "legalizad", "legendad", "legislad", "legitimad", "leiload", "lembrad", "lesad", "levad", "levantad", "levitad", "liberad", "libertad", "licitad", "lidad", "liderad", "lid", "ligad", "limad", "limitad", "limpad", "limp", "linchad", "lingotad", "liquefeit", "liquidad", "lisonjad", "lisonjead", "listad", "listrad", "litigad", "livrad", "lixiviad", "lobrigad", "locad", "localizad", "locupletad", "lograd", "lotad", "lotead", "louvad", "lubrificad", "lucrad", "luctad", "ludibriad", "ludificad", "lufad", "luitad", "lustrad", "lutad", "luzid", "macadamizad", "maçad", "macaquead", "macerad", "machucad", "maculad", "mãdad", "madrugad", "madurad", "magnetizad", "magnificad", "magoad", "maiusculad", "maiusculizad", "malograd", "maltad", "maltratad", "mamad", "manad", "mancad", "manchad", "mandad", "manejad", "manifestad", "manipulad", "manjad", "mantid", "manufaturad", "manusead", "maquiad", "maquinad", "marcad", "marchad", "marejad", "marinad", "marquetead", "marretad", "martelad", "martirizad", "mascad", "mascarad", "mascatead", "massacrad", "massagead", "mastigad", "masturbad", "matad", "matriculad", "maturad", "maximizad", "maxixad", "mead", "mealhad", "mecanizad", "medid", "meditad", "medrad", "melad", "melhorad", "memorizad", "mencionad", "mendigad", "menead", "menosprezad", "menstruad", "mentid", "mercad", "merecid", "mergulhad", "mesclad", "mesmerizad", "metabolizad", "metid", "metilad", "metralhad", "mexericad", "mexid", "miad", "micad", "migrad", "mijad", "milhad", "militad", "mimad", "mimetizad", "mimid", "minad", "minerad", "mineralizad", "minimizad", "ministrad", "minuciad", "minudenciad", "mirad", "mirrad", "missad", "mistificad", "misturad", "mitigad", "mixad", "mixturad", "mobilizad", "modelad", "moderad", "modificad", "modulad", "mofad", "moíd", "moldad", "molestad", "molhad", "monitorad", "monitorizad", "monologad", "monopolizad", "montad", "morad", "mordid", "mordiscad", "morgad", "morrid", "mortificad", "mort", "moscad", "moshad", "mosquead", "mossegad", "mostrad", "motejad", "motivad", "mourejad", "movid", "movimentad", "mudad", "mugid", "multad", "multiplicad", "mumificad", "munid", "murad", "murchad", "murmurad", "mutilad", "nacionalizad", "nadad", "nad", "narrad", "nasalad", "nascid", "naufragad", "navegad", "necessitad", "negad", "negligenciad", "negociad", "neutralizad", "nevad", "nhanhad", "niponizad", "niquelad", "nitrificad", "nivelad", "nobilitad", "nocautead", "nomead", "normalizad", "notad", "noticiad", "notificad", "nublad", "numerad", "numerizad", "nutrid", "obcecad", "obedecid", "objetad", "objetivad", "obnubilad", "obrad", "obrigad", "obscurecid", "observad", "obstinad", "obstruíd", "obtemperad", "obtid", "obturad", "obviad", "ocasionad", "occorrid", "ocorrid", "ocultad", "ocupad", "odiad", "odorizad", "ofegad", "ofendid", "oferecid", "oficializad", "ofuscad", "oitavad", "olead", "olhad", "olvidad", "omitid", "ondead", "ondulad", "onerad", "operad", "opinad", "opiniad", "opost", "opprimid", "oprimid", "optad", "optimizad", "orad", "orbitad", "orçad", "ordenad", "ordenhad", "organizad", "orgulhad", "orientad", "orientalizad", "originad", "orlad", "ornad", "ornamentad", "orquestrad", "oscilad", "ostentad", "ostracizad", "otimizad", "ouriçad", "ousad", "outorgad", "ouvid", "ouvist", "ovulad", "oxidad", "oxigenad", "ozonizad", "pacificad", "pactad", "pactuad", "padecid", "padronizad", "pagad", "paginad", "pag", "pairad", "pajead", "palead", "palestrad", "palpad", "palpitad", "palrad", "panad", "papad", "papaguead", "paparicad", "papead", "parabenizad", "parad", "parafrasead", "parafusad", "paralisad", "paralizad", "parasitad", "parcelad", "parecid", "parid", "parlad", "parodiad", "participad", "partid", "partilhad", "pasmad", "passad", "passarinhad", "passead", "pastad", "pasteurizad", "pastorad", "pastoread", "patentead", "patinad", "patrocinad", "patrulhad", "pausad", "pautad", "pavimentad", "pechinchad", "pedalad", "pedid", "pegad", "peg", "pêg", "peidad", "pejad", "pelad", "pelead", "pelejad", "penad", "penalizad", "pendid", "pendurad", "peneirad", "penetrad", "penhorad", "pensad", "pensionad", "pentead", "perambulad", "percalçad", "percebid", "percorrid", "percutid", "perdid", "perdoad", "perdurad", "perecid", "peregrinad", "perfeit", "perfilad", "perfilhad", "perfolhead", "perfumad", "perfurad", "perguntad", "perigad", "perlavad", "permanecid", "permead", "permitid", "permutad", "pernoitad", "pernoutad", "perpassad", "perpetrad", "perpetuad", "perseguid", "perseverad", "persignad", "persistid", "personalizad", "personificad", "perspectivad", "perspetivad", "persuadid", "pertencid", "perturbad", "pervertid", "pescad", "pesquisad", "pestanejad", "petiscad", "petrificad", "photographad", "piad", "picad", "pichad", "picotad", "pifad", "pigarread", "pigmentad", "pilad", "pilhad", "pinad", "pincelad", "pingad", "pintad", "pintalgad", "piorad", "pipetad", "pirad", "piratead", "pisad", "piscad", "pisotead", "pixelizad", "plagiad", "plainad", "planad", "planead", "planejad", "plangid", "plantad", "plasmad", "plastificad", "platinad", "plissad", "podad", "podid", "polid", "polimerizad", "polinizad", "politizad", "poluíd", "polvilhad", "ponderad", "ponhad", "pontuad", "popularizad", "porfiad", "pormenorizad", "portad", "posicionad", "pospost", "possibilitad", "possuíd", "postad", "post", "postulad", "potencializad", "poupad", "pousad", "povoad", "practicad", "praguejad", "prantead", "praticad", "pré-datad", "prédatad", "precedid", "preceituad", "precipitad", "precisad", "preconizad", "predad", "predestinad", "predicad", "predominad", "preenchid", "prefabricad", "prefaciad", "preferid", "pregad", "prejudicad", "prelibad", "premeditad", "premiad", "prendad", "prendid", "prensad", "preoccupad", "preocupad", "preparad", "prescrevid", "prescrit", "presenciad", "presentead", "preservad", "presidid", "pres", "pressagiad", "pressentid", "pressionad", "pressupost", "pressurizad", "prestad", "presumid", "pretendid", "preterid", "prevalecid", "prevaricad", "prevenid", "previst", "prezad", "principiad", "principia", "printad", "priorizad", "privad", "privatizad", "privilegiad", "problematizad", "procedid", "processad", "proclamad", "procrastinad", "procriad", "procurad", "produzid", "profanad", "proferid", "profetizad", "prognosticad", "programad", "progredid", "prohibid", "proibid", "projetad", "proliferad", "prolongad", "prometid", "promovid", "promulgad", "pronunciad", "propagad", "proporcionad", "propost", "propulsad", "prorrogad", "proscrit", "proselitad", "proselitizad", "prosperad", "prosseguid", "prostrad", "protagonizad", "protegid", "protestad", "provad", "providenciad", "provid", "provind", "provisionad", "provocad", "pruíd", "prurid", "publicad", "publicitad", "pugnad", "puíd", "pulad", "pulicad", "pulinhad", "pulsad", "pululad", "pulverizad", "punguead", "punid", "purgad", "purificad", "putrefeit", "puxad", "quadrad", "quadriculad", "quadruplicad", "qualificad", "quarentenad", "quebrad", "quebrantad", "quedad", "queimad", "queixad", "quelatad", "querelad", "querid", "questionad", "quicad", "quilhad", "quintuplicad", "quitad", "rachad", "raciocinad", "racionalizad", "ralad", "ralhad", "ramificad", "randomizad", "rangad", "rangid", "ranquead", "rapad", "raptad", "rarefeit", "rascad", "rascunhad", "rasgad", "raspad", "rastejad", "rastelad", "rastread", "rastrejad", "ratead", "ratificad", "reabilitad", "reafirmad", "reagid", "reagrupad", "realçad", "realizad", "realojad", "reanalisad", "reanimad", "reaproveitad", "reaquecid", "rearranjad", "rearrumad", "reassistid", "reavivad", "rebaixad", "rebatid", "rebatizad", "rebelad", "rebentad", "rebobinad", "rebocad", "rebolad", "rebrilhad", "rebuçad", "rebuscad", "recaíd", "recalcad", "recalcitrad", "recalculad", "recapitulad", "recarregad", "recead", "recebid", "receitad", "rechaçad", "reciclad", "recitad", "reclamad", "reclinad", "recobert", "recolhid", "recomeçad", "recomendad", "recompensad", "reconciliad", "reconfirmad", "reconfortad", "reconhecid", "reconquistad", "reconsiderad", "reconstituíd", "recontad", "reconvocad", "recopiad", "recordad", "recorrid", "recortad", "recostad", "recozid", "recread", "recriad", "recristalizad", "recrudescid", "recrutad", "rectificad", "recuad", "recuperad", "recurvad", "recusad", "redatad", "redefinid", "redescobert", "redescrit", "redigid", "redigitad", "redimid", "redirecionad", "redobrad", "reduzid", "reelegid", "reembolsad", "reencarnad", "reenchid", "reencontrad", "reenviad", "reescrit", "reestruturad", "refeit", "referenciad", "referid", "refinad", "refletid", "reflorestad", "refogad", "reforçad", "reformad", "reformulad", "refratad", "refread", "refrescad", "refrigerad", "refugiad", "refutad", "regad", "regatead", "regenerad", "regid", "registad", "registrad", "regozijad", "regressad", "regulad", "regulamentad", "regularizad", "regurgitad", "reinad", "reiniciad", "reinstalad", "reinventad", "reiterad", "reivindicad", "rejeitad", "rejeytad", "rejogad", "rejuvenescid", "relacionad", "relatad", "relembrad", "relid", "relinchad", "relutad", "reluzid", "relvad", "remad", "remanescid", "rematad", "remedad", "remediad", "remendad", "remetid", "remexid", "remid", "remodelad", "remontad", "removid", "remunerad", "renascid", "rendad", "renderizad", "rendid", "renegad", "renhid", "renomead", "renovad", "renunciad", "reocorrid", "reordenad", "reorganizad", "reoxidad", "reparad", "repartid", "repassad", "repelid", "repensad", "repetid", "repisad", "replantad", "replicad", "reportad", "repost", "repousad", "repreendid", "representad", "reprimendad", "reprimid", "reprisad", "reprocessad", "reprochad", "reproduzid", "reprovad", "repugnad", "reputad", "requentad", "requerid", "requestad", "requisitad", "rescindid", "resenhad", "reservad", "resfolegad", "resfriad", "resgatad", "resguardad", "residid", "resignad", "resistid", "resmungad", "resolvid", "respeitad", "respigad", "respirad", "resplandecid", "resplandescid", "resplendecid", "respondid", "responsabilizad", "ressaltad", "ressalvad", "ressarcid", "ressecad", "ressentid", "ressoad", "ressonad", "ressurgid", "ressuscitad", "restabelecid", "restad", "restaurad", "restituíd", "restringid", "resultad", "resumid", "resvalad", "retalhad", "retaliad", "retardad", "retes", "reticulad", "retid", "retificad", "retinid", "retirad", "retocad", "retomad", "retornad", "retorquid", "retraíd", "retratad", "retribuíd", "retrocedid", "retrucad", "reunid", "reutilizad", "revelad", "reverberad", "reverenciad", "revertid", "revestid", "revigorad", "revisad", "revistad", "revist", "revitalizad", "revogad", "revoltad", "revolvid", "rezad", "ribombad", "riçad", "ricochetead", "ridicularizad", "rilhad", "rimad", "ripad", "riscad", "ritmad", "rivalizad", "rocad", "roçad", "rociad", "rodad", "rodead", "rogad", "roíd", "rolad", "romanizad", "rompid", "roncad", "ronronad", "rosnad", "rotacionad", "rotad", "rotead", "rot", "rotulad", "roubad", "ruborizad", "rubricad", "rufad", "rugid", "rumad", "rumiad", "ruminad", "russificad", "sabid", "saboread", "sabotad", "sacad", "sacanead", "saciad", "sacolejad", "sacralizad", "sacrificad", "sacudid", "sagrad", "saíd", "salgad", "salientad", "salivad", "salmourad", "salpicad", "saltad", "saltead", "saltitad", "saluçad", "salvad", "salvaguardad", "salv", "sanad", "sancionad", "sangrad", "santificad", "sapatead", "sapead", "sapecad", "saquead", "sarad", "saturad", "saudad", "scintilad", "secad", "secretad", "secundad", "sedad", "sedimentad", "seduzid", "segad", "segmentad", "segredad", "seguid", "segurad", "selad", "seleccionad", "selecionad", "selectad", "seletad", "semead", "semelhad", "semicerrad", "sensualizad", "sentad", "sentenciad", "sentid", "separad", "sepultad", "sequenciad", "sequestrad", "seqüestrad", "serenad", "seriad", "serpentead", "serrad", "serrilhad", "servid", "sibilad", "sid", "significad", "silenciad", "silvad", "simbolizad", "simplificad", "simulad", "sinalizad", "sincopad", "sincretizad", "sincronizad", "singrad", "sinterizad", "sintetizad", "sintonizad", "sistematizad", "sitiad", "situad", "soad", "sobejad", "sobraçad", "sobrad", "sobre-estimad", "sobreestimad", "sobrecarregad", "sobrepassad", "sobrepost", "sobrepujad", "sobrerrepresentad", "sobresaíd", "sobressaíd", "sobressaltad", "sobrestimad", "sobrevind", "sobrevivid", "socad", "sociabilizad", "socializad", "soçobrad", "socorrid", "sodomizad", "sofismad", "sofisticad", "sofrid", "solad", "solapad", "soldad", "soletrad", "solicitad", "solidificad", "soliloquiad", "soltad", "solt", "solubilizad", "soluçad", "solucionad", "somad", "sombread", "sonambulad", "sondad", "sonhad", "soprad", "sorrid", "sortead", "sortid", "sorvid", "soterrad", "sovad", "stalkead", "standardizad", "stressad", "suad", "suavizad", "subentendid", "subestimad", "subid", "subjugad", "sublimad", "sublinhad", "submergid", "subordinad", "subornad", "subscrit", "subsidiad", "subsistid", "substanciad", "substantivad", "substituíd", "subtraíd", "subvencionad", "subvertid", "sucedid", "sucumbid", "sufixad", "sufocad", "sugad", "sugerid", "suicidad", "sujad", "sujeitad", "sulcad", "sumariad", "sumid", "sumulad", "superad", "superestimad", "supervisad", "supervisionad", "suplantad", "suplementad", "suplicad", "suportad", "supost", "supplantad", "supprimid", "suprid", "suprimid", "supurad", "surdid", "surfad", "surgid", "surpreendid", "surrad", "surripiad", "surrupiad", "surtad", "suscitad", "suspeitad", "suspendid", "suspirad", "sussurrad", "sustad", "sustentad", "sustid", "systematizad", "tabulad", "tacad", "tachad", "tactead", "talhad", "tamborilad", "tampad", "tamponad", "tangad", "tangid", "tapad", "tardad", "tarraxad", "tascad", "tatuad", "taxad", "taxiad", "tchovid", "tecid", "teclad", "teimad", "telad", "telefonad", "telegrafad", "teleportad", "teletransportad", "televisad", "temid", "temperad", "tencionad", "tendid", "tensionad", "tentad", "teorizad", "terceirizad", "tergiversad", "terminad", "terrad", "testad", "testemunhad", "tid", "tilintad", "timbrad", "tingid", "tinid", "tintad", "tipad", "tipificad", "tirad", "tiranizad", "tiritad", "tirotead", "titilad", "titulad", "tocad", "tocaiad", "tolerad", "tomad", "tombad", "topad", "torcid", "tormentad", "tornad", "tornead", "torpedead", "torrad", "torturad", "tosad", "tosquiad", "tostad", "totalizad", "touread", "trabalhad", "traçad", "tracejad", "tractad", "traduzid", "traficad", "trahid", "traíd", "trajad", "tramad", "trancad", "trançad", "tranquilizad", "transad", "transbordad", "transcorrid", "transcrit", "transfectad", "transferid", "transfigurad", "transformad", "transid", "transitad", "transladad", "transliterad", "transmitid", "transmudad", "transmutad", "transpassad", "transpirad", "transplantad", "transportad", "transpost", "transtornad", "transubstanciad", "transvasad", "trapacead", "trasladad", "traspassad", "tratad", "trautead", "travad", "travestid", "trazid", "trefilad", "treinad", "tremeluzid", "tremid", "tremulad", "trenad", "trepad", "tresandad", "trespassad", "triangulad", "tributad", "tricotad", "trinad", "trincad", "trinchad", "tripad", "tripulad", "triscad", "triturad", "triunfad", "trocad", "troçad", "trombetead", "tropeçad", "trotad", "trovad", "trovejad", "trovoad", "trucidad", "truncad", "trunfad", "tumefeit", "tumultuad", "tunad", "turbad", "turvad", "tutead", "tutelad", "tutorad", "ufanad", "uivad", "ultimad", "ultrajad", "ultrapassad", "ululad", "unctad", "ungid", "unhad", "unificad", "uniformizad", "untad", "urbanizad", "urdid", "urgid", "urinad", "usad", "usufruíd", "usurpad", "utilizad", "vacad", "vacilad", "vadiad", "vagabundead", "vagad", "vaguead", "vaiad", "validad", "valid", "valorad", "valorizad", "valsad", "vampirizad", "vandalizad", "vaporizad", "varad", "varead", "variad", "varrid", "vasculhad", "vastad", "vaticinad", "vazad", "vaziad", "vedad", "vegetad", "velad", "velejad", "vencid", "vendad", "vendid", "venerad", "ventad", "ventilad", "veranead", "verbalizad", "veread", "vergad", "vergastad", "verificad", "vermelhad", "vermelhead", "vermelhejad", "versad", "versejad", "versificad", "vertid", "vesguead", "vestid", "vetad", "vexad", "viajad", "vibrad", "vicejad", "vidrad", "vigiad", "vigorad", "vilificad", "vilipendiad", "vincad", "vinculad", "vindimad", "vind", "vingad", "vinificad", "violad", "violentad", "virad", "visad", "visitad", "vislumbrad", "vist", "visualizad", "vitimad", "vitoriad", "vitrificad", "vivad", "vivenciad", "vivid", "voad", "vocalizad", "vociferad", "volatilizad", "voltad", "voltead", "volvid", "vomitad", "vosead", "votad", "vulcanizad", "vulgarizad", "vulnerad", "wikificad", "xeretad", "xerocad", "xingad", "zanzad", "zapead", "zarpad", "zelad", "zerad", "zicad", "ziguezaguead", "zipad", "zoad", "zoiad", "zombad", "zonad", "zumbid", "zumbificad", "zunid"];
Object.defineProperty(yj, "__esModule", {
  value: !0
});
yj.default = gJa;
var lJa = ee, dJa = uJa(gb);
function uJa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: cJa
} = lJa.languageProcessing;
function pJa(e) {
  return ["a", "o", "as", "os"].some((t) => {
    if (e.length > 3 && e.endsWith(t)) {
      const n = e.slice(0, -t.length);
      return dJa.default.includes(n);
    }
  });
}
function gJa(e) {
  return cJa(e).filter((t) => pJa(t));
}
Object.defineProperty(pb, "__esModule", {
  value: !0
});
pb.default = void 0;
var mJa = ee, fJa = vt, hJa = yJa(yj);
function yJa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  directPrecedenceException: zJa,
  values: bJa
} = mJa.languageProcessing, {
  Clause: wJa
} = bJa;
class vJa extends wJa {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, hJa.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns {void}
   */
  checkParticiples() {
    const a = this.getClauseText(), t = this.getParticiples().filter((n) => !zJa(a, n, fJa.cannotDirectlyPrecedePassiveParticiple));
    this.setPassive(t.length > 0);
  }
}
pb.default = vJa;
var mb = {};
Object.defineProperty(mb, "__esModule", {
  value: !0
});
mb.default = void 0;
mb.default = ["sou", "és", "é", "somos", "sois", "são", "era", "eras", "era", "éramos", "éreis", "eram", "serei", "serás", "será", "seremos", "sereis", "serão", "sido", "foste", "foi", "fomos", "fostes", "fora", "foras", "fôramos", "fôreis", "foram", "seja", "sejas", "seja", "sejamos", "sejais", "sejam", "fui", "fosse", "fosses", "fosse", "fôssemos", "fôsseis", "fossem", "for", "fores", "for", "formos", "fordes", "forem", "seria", "serias", "seria", "seríamos", "seríeis", "seriam", "ser", "seres", "ser", "sermos", "serdes", "serem"];
Object.defineProperty(hj, "__esModule", {
  value: !0
});
hj.default = jJa;
var kJa = ee, _Ja = zj(pb), TR = zj(mb), EJa = zj(Ip);
function zj(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  createRegexFromArray: $R,
  getClauses: AJa
} = kJa.languageProcessing, TJa = ["o", "a", "os", "as", "um", "ums", "uma", "umas"], $Ja = {
  Clause: _Ja.default,
  stopwords: EJa.default,
  auxiliaries: TR.default,
  regexes: {
    auxiliaryRegex: $R(TR.default),
    stopCharacterRegex: /([:,])(?=[ \n\r\t'"+\-»«‹›<>])/ig,
    followingAuxiliaryExceptionRegex: $R(TJa)
  }
};
function jJa(e) {
  return AJa(e, $Ja);
}
var bj = {}, wj = {};
Object.defineProperty(wj, "__esModule", {
  value: !0
});
wj.default = RJa;
var xJa = ee;
const {
  findMatchingEndingInArray: cs
} = xJa.languageProcessing, Qs = function(e, a) {
  return a.includes(e);
}, SJa = function(e, a, t) {
  const n = e.length;
  for (let r = t; r < n; r++)
    if (Qs(e[r], a))
      return r;
  return n;
}, OJa = function(e, a, t) {
  const n = e.length;
  for (let r = t; r < n; r++)
    if (!Qs(e[r], a))
      return r;
  return n;
}, jR = function(e, a, t) {
  for (let n = 0; n < a.length; n++)
    e = e.replace(a[n], t[n]);
  return e;
}, IJa = function(e, a, t, n, r) {
  const o = {
    r1: t,
    r2: n,
    rv: r
  };
  for (const u of a.standardGroups) {
    const c = cs(o[u.region], u.suffixes);
    if (c)
      return e.slice(0, -c.length) + u.replacement;
  }
  const l = cs(o[a.specialClass.region], a.specialClass.suffixes);
  return cs(e, a.specialClass.wordEndingsToCheck) && l && (e = e.slice(0, -l.length) + a.specialClass.replacement), e;
}, CJa = function(e, a, t) {
  const n = cs(t, a);
  return n !== "" && (e = e.slice(0, -n.length)), e;
}, PJa = function(e, a, t) {
  const n = cs(t, a.groupUe.suffixes), r = cs(t, a.groupIe.suffixes), o = cs(t, a.groupESuffixes);
  return n && cs(e, a.groupUe.wordEndingsToCheck) ? e = e.slice(0, -n.length) : r && cs(e, a.groupIe.wordEndingsToCheck) ? e = e.slice(0, -r.length) : o ? e = e.slice(0, -o.length) : e.endsWith(a.cCedilla[0]) && (e = e.slice(0, -1) + a.cCedilla[1]), e;
};
function RJa(e, a) {
  e.toLowerCase();
  const t = a.externalStemmer.vowels, n = a.externalStemmer.nasalVowels.originals, r = a.externalStemmer.nasalVowels.replacements;
  e = jR(e, n, r);
  const o = e.length;
  if (o < 2)
    return e;
  let l = o, u = o, c = o;
  for (let I = 0; I < o - 1 && l === o; I++)
    Qs(e[I], t) && !Qs(e[I + 1], t) && (l = I + 2);
  for (let I = l; I < o - 1 && u === o; I++)
    Qs(e[I], t) && !Qs(e[I + 1], t) && (u = I + 2);
  o > 3 && (Qs(e[1], t) ? Qs(e[0], t) && Qs(e[1], t) ? c = OJa(e, t, 2) + 1 : c = 3 : c = SJa(e, t, 2) + 1);
  const f = e.slice(l), y = e.slice(u);
  let z = e.slice(c);
  const v = IJa(e, a.externalStemmer.standardSuffixes, f, y, z);
  let O = "";
  if (e === v && (O = CJa(e, a.externalStemmer.verbSuffixes, z)), e !== v ? (e = v, z = e.slice(c)) : e !== O && (e = O, z = e.slice(c)), v !== e || O !== e)
    e.endsWith(a.externalStemmer.ciToC[0]) && z.endsWith(a.externalStemmer.ciToC[1]) && (e = e.slice(0, -1), z = e.slice(c));
  else {
    const I = cs(z, a.externalStemmer.generalSuffixes);
    I !== "" && (e = e.slice(0, -I.length), z = e.slice(c));
  }
  return e = PJa(e, a.externalStemmer.residualSuffixes, z), e = jR(e, r, n), e;
}
Object.defineProperty(bj, "__esModule", {
  value: !0
});
bj.default = FJa;
var DJa = K, NJa = ee, LJa = MJa(wj);
function MJa(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: qJa
} = NJa.languageProcessing;
function FJa(e) {
  const a = (0, DJa.get)(e.getData("morphology"), "pt", !1);
  return a ? (t) => (0, LJa.default)(t, a) : qJa;
}
var vj = {};
Object.defineProperty(vj, "__esModule", {
  value: !0
});
vj.default = UJa;
var BJa = ee;
const {
  formatNumber: WJa
} = BJa.helpers;
function UJa(e) {
  const a = 248.835 - 1.015 * e.averageWordsPerSentence - 84.6 * e.numberOfSyllables / e.numberOfWords;
  return WJa(a);
}
Object.defineProperty(rj, "__esModule", {
  value: !0
});
var k8 = rj.default = void 0, HJa = ee, GJa = gi(db), VJa = vt, KJa = gi(Ip), YJa = gi(Pr), QJa = gi(ub), XJa = gi(oJa), ZJa = gi(cb), JJa = gi(hj), eet = gi(bj), aet = gi(vj);
function gi(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: tet
} = HJa.languageProcessing;
let net = class extends tet {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), Object.assign(this.config, {
      language: "pt",
      passiveConstructionType: "periphrastic",
      firstWordExceptions: GJa.default,
      functionWords: VJa.all,
      stopWords: KJa.default,
      transitionWords: YJa.default,
      twoPartTransitionWords: QJa.default,
      syllables: XJa.default,
      sentenceLength: ZJa.default
    }), Object.assign(this.helpers, {
      getClauses: JJa.default,
      getStemmer: eet.default,
      fleschReadingScore: aet.default
    });
  }
};
k8 = rj.default = net;
var kj = {}, fb = {};
Object.defineProperty(fb, "__esModule", {
  value: !0
});
fb.default = void 0;
fb.default = [
  // Numbers 1-10:
  "один",
  "одна",
  "одно",
  "два",
  "две",
  "три",
  "четыре",
  "пять",
  "шесть",
  "семь",
  "восемь",
  "девять",
  "десять",
  // Demonstrative pronouns: тот, этот, такой, таков, столько
  "этот",
  "этого",
  "этому",
  "этим",
  "этом",
  "эта",
  "этой",
  "эту",
  "это",
  "этого",
  "этому",
  "эти",
  "этих",
  "этим",
  "этими",
  "тот",
  "того",
  "тому",
  "тем",
  "том",
  "та",
  "той",
  "ту",
  "те",
  "тех",
  "тем",
  "теми",
  "тех",
  "такой",
  "такого",
  "такому",
  "таким",
  "такая",
  "такую",
  "такое",
  "такие",
  "таких",
  "таким",
  "такими",
  "стольких",
  "стольким",
  "столько",
  "столькими",
  "вот"
];
var Jn = {}, Rr = {};
Object.defineProperty(Rr, "__esModule", {
  value: !0
});
Rr.singleWords = Rr.multipleWords = Rr.default = Rr.allWords = void 0;
const ret = Rr.singleWords = ["безусловно", "бесспорно", "вероятно", "вестимо", "вдобавок", "видимо", "вишь", "во-вторых", "во-первых", "вообще-то", "впрочем", "дабы", "едва", "ежели", "если", "затем ", "зачем", "ибо", "итак", "так", "кабы", "кажется", "кажись", "коли", "кстати", "лишь", "лучше", "наверно", "наверное", "например", "небось", "нежели", "несомненно", "но", "однако", "особенно", "оттого", "отчего", "поди", "пожалуй", "позволь", "позвольте", "покамест", "покуда", "поскольку", "потому", "притом", "причем", "только", "хотя", "чтоб", "чтобы", "чуть", "якобы"], set = Rr.multipleWords = ["а вдобавок", "а вот", "а именно", "а не то", "а не", "а потом", "а также", "без всякого сомнения", "без того чтобы не", "без того, чтобы не", "благодаря тому", "более того", "будто бы", "будь то", "буквально", "в итоге", "в конце концов", "в общей сложности", "в общем-то", "в общем", "в отношении того что", "в отношении того, что", "в принципе", "в противовес тому что", "в противовес тому, что", "в противоположность тому", "в результате", "в самом деле", "в свою очередь", "в связи с тем что", "в связи с тем", "в силу того что", "в силу того", "в силу чего", "в случа", "в сравнении с тем", "в сущности говоря", "в сущности", "в таком случае", "в то время как", "в то время, как", "в том случае", "в частности", "в-третьих", "ввиду того", "вернее говоря", "вероятнее всего", "видите ли", "видишь ли", "вместе с тем", "вместо того", "вне всякого сомнения", "вне сомнения", "во всяком случае", "воля ваша", "воля твоя", "вообще говоря", "вопреки тому", "вплоть до того", "вроде того как", "вроде того что", "вроде того", "вроде того", "вследствие того что", "вследствие чего", "грубо говоря", "да еще", "да и то", "дай бог память", "даром что", "для того чтобы", "для того, чтобы", "до тех пор пока", "до тех пор, пока", "до того как", "до того, как", "едва лишь", "едва только", "ежели бы", "если угодно", "жалко, что", "жаль, что", "за счет того что", "за счет того, что", "знамо дело", "и вот еще", "из-за того что", "из-за того, что", "иначе говоря", "исходя из того", "к вашему сведению", "к несчастью", "к огорчению", "к примеру сказать", "к примеру", "к прискорбию", "к радости", "к слову сказать", "к сожалению", "к стыду своему", "к стыду", "к счастью", "к твоему сведению", "к тому же", "к удивлению", "к ужасу", "к чести", "как будто", "как бы там ни было", "как бы то ни было", "как бы", "как вам известно", "как вдруг", "как видите", "как видишь", "как видно", "как водится", "как выяснилось", "как выясняется", "как говорилось", "как говорится", "как если бы", "как знать", "как известно", "как на заказ", "как назло", "как нарочно", "как ни говори", "как ни говорите", "как ни странно", "как оказалось", "как оказывается", "как полагается", "как положено", "как правило", "как принято говорить", "как принято", "как сказано", "как скоро", "как следствие", "как словно", "как только", "как хотите", "как это ни странно", "ко всему прочему", "коль скоро", "коль уж", "коротко говоря", "короче говоря", "кроме всего прочего", "кстати говоря", "кстати сказать", "лишь бы", "лишь только", "мало сказать", "мало того", "между нами говоря", "между прочим", "между тем как", "может статься", "можно подумать", "мягко выражаясь", "мягко говоря", "на беду", "на ваш взгляд", "на мой взгляд", "на несчастье", "на основании того что", "на основании того, что", "на первый взгляд", "на самом деле", "на случай", "на твой взгляд", "на худой конец", "надо полагать", "наряду с тем что", "наряду с тем", "насчет того что", "насчет того, что", "не в пример тому как", "не в пример тому, как", "не то чтобы", "невзирая на то", "независимо от того", "несмотря на то", "ничего не скажешь", "но вообще-то", "кроме того", "однако же", "откровенно сказать", "относительно того что", "относительно того, что", "перед тем", "по вашему мнению", "по видимости", "по всей вероятности", "по всей видимости", "по данным", "по замыслу", "по идее", "по крайней мере", "по мере того как", "по мере того, как", "по мнению", "по моему мнению", "по обыкновению", "по обычаю", "по определению", "по поводу того", "по правде говоря", "по правде сказать", "по правде", "по преданию", "по причине того", "по прогнозам", "по сведениям", "по своему обыкновению", "по слухам", "по совести говоря", "по совести сказать", "по совести", "по сообщению", "по сообщениям", "по справедливости говоря", "по справедливости", "по сравнению", "по статистике", "по сути говоря", "по сути дела", "по сути", "по существу говоря", "по существу", "по счастью", "по твоему мнению", "по чести говоря", "по чести признаться", "по чести сказать", "по-вашему", "по-видимому", "по-ихнему", "по-моему", "по-нашему", "по-твоему", "под видом того что", "под видом того, что", "под предлогом", "подобно тому", "подумать только", "помимо всего прочего", "помимо всего", "помимо того", "помимо того", "помимо этого", "понятное дело", "попросту говоря", "попросту сказать", "после того", "потому как", "потому что", "правду говоря", "правду сказать", "правильнее говоря", "прежде всего", "прежде нежели", "прежде чем", "при всем том", "при условии что", "при условии, что", "против обыкновения", "проще говоря", "проще сказать", "прямо-таки как", "пускай бы", "равно как", "ради того чтобы", "разве что", "разумеется", "с вашего позволения", "с вашего разрешения", "с другой стороны", "с моей точки зрения", "с одной стороны", "с позволения сказать", "с твоего позволения", "с твоего разрешения", "с тем чтобы", "с тех пор как", "с той целью чтобы", "с точки зрения", "само собой разумеется", "сверх того что", "сверх того", "сказать по правде", "сказать по совести", "сказать по чести", "скорее всего", "смотря по тому", "со своей стороны", "собственно говоря", "совсем как", "стало быть", "стоит отметить", "строго говоря", "судя по всему", "судя по тому", "так или иначе", "так как", "так что", "так чтобы", "тем более что", "тем не менее", "тем паче что", "то бишь", "то есть", "тогда как", "только бы", "только лишь", "только чуть", "точнее говоря", "точнее сказать", "точно так же", "что и говорить", "что ни говори", "что ни говорите", "чуть лишь", "чуть только", "шутка ли сказать", "шутка ли", "шутка сказать", "это значит, что"], iet = Rr.allWords = ret.concat(set);
Rr.default = iet;
Object.defineProperty(Jn, "__esModule", {
  value: !0
});
Jn.filteredAtEnding = Jn.filteredAtBeginningAndEnding = Jn.filteredAnywhere = Jn.default = Jn.all = void 0;
var _8 = Rr, hb = oet(Ba);
function oet(e) {
  return e && e.__esModule ? e : { default: e };
}
const E8 = ["быть", "был", "была", "было", "были", "будет", "будут"], A8 = ["мочь", "мог", "могла", "могли", "могу", "можешь", "может", "можем", "можете", "могут", "смочь", "смогу", "сможешь", "сможет", "сможем", "сможете", "смогут", "решиться", "решился", "решилась", "решились", "решусь", "решишься", "решится", "решимся", "решитесь", "решатся", "делать", "делал", "делала", "делало", "делали", "делали", "делаю", "делаешь", "делает", "делаем", "делаете", "делают", "сделать", "сделал", "сделала", "сделало", "сделали", "сделали", "сделаю", "сделаешь", "сделает", "сделаем", "сделаете", "сделают", "иметь", "имел", "имела", "имело", "имели", "имею", "имеешь", "имеет", "имеем", "имеете", "имеют", "следует", "следовало", "необходимо", "необходим", "необходима", "необходимы", "нужно", "нужен", "нужна", "обязан", "обязана", "обязано", "обязаны", "должен", "должна", "должно", "должны", "требуется", "требуются", "имеется", "имеются", "есть", "можно"], T8 = ["появиться", "появился", "появилась", "появилось", "появились", "появлюсь", "появишься", "появится", "появимся", "появитесь", "появимся", "появляться", "появлялся", "появлялась", "появлялось", "появлялись", "появляюсь", "появляешься", "появляется", "появляемся", "появляются", "появляетесь", "стал", "стала", "стало", "стану", "станешь", "станет", "станем", "станете", "станут", "становиться", "становился", "становилось", "становилась", "становились", "становлюсь", "становишься", "становится", "становимся", "становитесь", "становятся", "прийти", "пришел", "пришёл", "пришла", "пришло", "пришли", "приду", "придешь", "придёшь", "придет", "придёт", "придем", "придём", "придете", "придёте", "придут", "приходить", "приходил", "приходила", "приходило", "приходили", "прихожу", "приходишь", "приходит", "приходим", "приходите", "происходить", "происходил", "происходила", "происходило", "происходили", "происходит", "происходят", "держать", "держал", "держала", "держало", "держали", "держу", "держишь", "держит", "держим", "держите", "держут", "содержать", "содержал", "содержала", "содержало", "содержали", "содержу", "содержишь", "содержит", "содержим", "содержите", "содержут", "остаться", "остался", "осталась", "осталось", "остались", "останусь", "останешься", "останется", "останутся", "останетесь", "останемся", "оставаться", "оставался", "оставалась", "оставалось", "оставались", "остаюсь", "остаешься", "остаёшься", "остается", "остаётся", "остаемся", "остаёмся", "остаетесь", "остаётесь", "остаются", "изменяться", "изменялся", "изменялась", "изменялось", "изменялись", "изменюсь", "изменишься", "изменится", "изменимся", "изменитесь", "изменятся", "успеть", "успел", "успела", "успело", "успели", "успею", "успеешь", "успеет", "успеем", "успеете", "успеют", "заниматься", "занимался", "занималась", "занимаюсь", "занимаешься", "занимается", "занимаемся", "занимаетесь", "занимаемся", "заняться", "занялся", "занялась", "занялись", "займусь", "займешься", "займется", "займемся", "займетесь", "займутся", "займёшься", "займётся", "займёмся", "займётесь"], $8 = ["сказать", "сказал", "сказала", "сказали", "говорить", "говорил", "говорила", "говорили", "говорит", "говорю", "говорим", "говоришь", "говорят", "говорите", "объявить", "объявил", "объявила", "объявили", "заявить", "заявил", "заявила", "заявили", "спросить", "спросил", "спросила", "спросили", "указать", "указал", "указала", "указали", "объяснить", "объяснил", "объяснила", "объяснили", "подумать", "подумал", "подумала", "подумали", "думать", "думал", "думала", "думали", "думаю", "думает", "думаешь", "думаем", "думаете", "думают", "рассказывать", "рассказывал", "рассказывала", "рассказывали", "рассказывают", "рассказывает", "рассказать", "рассказал", "рассказала", "рассказали", "обсудить", "обсудил", "обсудила", "обсудили", "предложить", "предложил", "предложила", "предложили", "понимать", "понимал", "понимала", "понимали", "понимаю", "понимаешь", "понимает", "понимаем", "понимаете", "понимают", "добавить", "добавил", "добавила", "добавили", "добавлю", "добавишь", "добавит", "добавим", "добавите", "добавят"], j8 = ["казаться", "кажется", "казалось", "казалась", "казался", "казались", "кажутся", "давайте", "давай", "хотеть", "хочу", "хочешь", "хочет", "хотим", "хотите", "хотят", "хотел", "хотела", "хотело", "хотели", "показать", "показал", "показала", "показало", "показали", "покажу", "покажешь", "покажет", "покажем", "покажете", "покажут", "показывать", "показывал", "показывала", "показывало", "показывали", "показываю", "показываешь", "показывает", "показываем", "показываете", "показывают", "идти", "шел", "шёл", "шла", "шло", "шли", "иду", "идешь", "идёшь", "идет", "идёт", "идем", "идём", "идете", "идёте", "идут", "брать", "брал", "брала", "брало", "брали", "беру", "берешь", "берёшь", "берёт", "берем", "берём", "берёте", "берут", "взять", "взял", "взяла", "взяло", "взяли", "возьму", "возьмешь", "возьмет", "возьмем", "возьмете", "возьмут", "класть", "кладу", "кладешь", "кладет", "кладёшь", "кладёт", "кладем", "кладете", "кладём", "кладёте", "кладут", "положить", "положил", "положила", "положило", "положили", "положу", "положишь", "положит", "положим", "положите", "положат", "использовать", "использовал", "использовала", "использовало", "использовали", "использую", "используешь", "используем", "используете", "используют", "пробовать", "пробовал", "пробовала", "пробовало", "пробовали", "пробую", "пробуешь", "пробует", "пробуем", "пробуете", "пробуют", "попробовать", "попробовал", "попробовала", "попробовало", "попробовали", "попробую", "попробуешь", "попробует", "попробуем", "попробуете", "попробуют", "иметь", "имел", "имела", "имело", "имели", "имею", "имеешь", "имеет", "имеем", "имеете", "имеют", "означать", "означал", "означала", "означало", "означали", "означает", "означают", "добавлять", "добавлял", "добавляла", "добавляло", "добавляли", "добавляю", "добавляешь", "добавляет", "добавляем", "добавляете", "добавляют", "состоять", "состоял", "состояла", "состояло", "состояли", "состою", "состоишь", "состоит", "состоим", "состоите", "состоят", "убеждаться", "убедился", "убедилась", "убедилось", "убедишься", "убедится", "убедимся", "убедитесь", "убедятся", "убеждать", "убедил", "убедила", "убедили", "убедишь", "убедит", "убедим", "убедите", "убедят", "являться", "являлся", "являлась", "являлось", "являлись", "являюсь", "являешься", "является", "являемся", "являетесь", "являются"], x8 = ["один", "одна", "одно", "одни", "два", "две", "двое", "двух", "двоих", "двум", "двоим", "двумя", "двоими", "три", "трое", "трех", "трёх", "троих", "трем", "трём", "троим", "тремя", "четыре", "пять", "шесть", "семь", "восемь", "девять", "десять", "одиннадцать", "двенадцать", "тринадцать", "четырнадцать", "пятнадцать", "шестнадцать", "семнадцать", "восемнадцать", "девятнадцать", "двадцать", "тридцать", "сорок", "пятьдесят", "шестьдесят", "семьдесят", "восемьдесят", "девяносто", "сто", "сотни", "двести", "триста", "четыреста", "пятьсот", "шестьсот", "семьсот", "восемьсот", "девятьсот", "тысяча", "тысячи", "тысяче", "тысячей", "тысячам", "тысячами", "тысячах", "тыс", "миллион", "миллиона", "миллиону", "миллионом", "миллионе", "миллионы", "миллионов", "миллионам", "миллионами", "миллионах", "миллиард", "миллиарда", "миллиарду", "миллиардом", "миллиарде", "миллиарды", "миллиардов", "миллиардам", "миллиардами", "миллиардах"], S8 = ["первый", "первого", "первому", "первом", "первым", "первая", "первой", "первое", "первые", "первых", "первыми", "второй", "второго", "второму", "втором", "вторым", "вторая", "второй", "второе", "вторые", "вторых", "вторыми", "третий", "третьего", "третьему", "третьим", "третьем", "третья", "третьей", "третье", "третьи", "третьих", "третьими", "четвертый", "четвертого", "четвертому", "четвертым", "четвертом", "четвертая", "четвертой", "четвертое", "четвертые", "четвертых", "четвертыми", "пятый", "пятого", "пятому", "пятом", "пятым", "пятая", "пятое", "пятые", "пятых", "пятыми", "шестой", "шестого", "шестому", "шестым", "шестая", "шестое", "шестые", "шестых", "шестыми", "седьмой", "седьмого", "седьмому", "седьмым", "седьмая", "седьмое", "седьмые", "седьмых", "седьмыми", "восьмой", "восьмого", "восьмому", "восьмым", "восьмая", "восьмое", "восьмые", "восьмых", "восьмыми", "девятый", "девятого", "девятому", "девятым", "девятая", "девятое", "девятые", "девятых", "девятыми", "десятый", "десятого", "десятому", "десятым", "десятая", "десятое", "десятые", "десятых", "десятыми", "одиннадцатый", "одиннадцатого", "одиннадцатому", "одиннадцатым", "одиннадцатая", "одиннадцатое", "одиннадцатые", "одиннадцатых", "одиннадцатыми", "двенадцатый", "двенадцатого", "двенадцатому", "двенадцатым", "двенадцатая", "двенадцатое", "двенадцатые", "двенадцатых", "двенадцатыми", "тринадцатый", "тринадцатого", "тринадцатому", "тринадцатым", "тринадцатая", "тринадцатое", "тринадцатые", "тринадцатых", "тринадцатыми", "четырнадцатый", "четырнадцатого", "четырнадцатому", "четырнадцатым", "четырнадцатая", "четырнадцатое", "четырнадцатые", "четырнадцатых", "четырнадцатыми", "пятнадцатый", "пятнадцатого", "пятнадцатому", "пятнадцатым", "пятнадцатая", "пятнадцатое", "пятнадцатые", "пятнадцатых", "пятнадцатыми", "шестнадцатый", "шестнадцатого", "шестнадцатому", "шестнадцатым", "шестнадцатая", "шестнадцатое", "шестнадцатые", "шестнадцатых", "шестнадцатыми", "семнадцатый", "семнадцатого", "семнадцатому", "семнадцатым", "семнадцатая", "семнадцатое", "семнадцатые", "семнадцатых", "семнадцатыми", "восемнадцатый", "восемнадцатого", "восемнадцатому", "восемнадцатым", "восемнадцатая", "восемнадцатое", "восемнадцатые", "восемнадцатых", "восемнадцатыми", "девятнадцатый", "девятнадцатого", "девятнадцатому", "девятнадцатым", "девятнадцатая", "девятнадцатое", "девятнадцатые", "девятнадцатых", "девятнадцатыми", "двадцатый", "двадцатого", "двадцатому", "двадцатым", "двадцатая", "двадцатое", "двадцатые", "двадцатых", "двадцатыми", "тридцатый", "тридцатого", "тридцатому", "тридцатым", "тридцатая", "тридцатое", "тридцатые", "тридцатых", "тридцатыми", "сороковой", "сорокового", "сороковому", "сороковым", "сороковая", "сороковое", "сороковые", "сороковых", "сороковыми", "пятидесятый", "пятидесятого", "пятидесятому", "пятидесятым", "пятидесятая", "пятидесятое", "пятидесятые", "пятидесятых", "пятидесятыми", "шестидесятый", "шестидесятого", "шестидесятому", "шестидесятым", "шестидесятая", "шестидесятое", "шестидесятые", "шестидесятых", "шестидесятыми", "семидесятый", "семидесятого", "семидесятому", "семидесятым", "семидесятая", "семидесятое", "семидесятые", "семидесятых", "семидесятыми", "восьмидесятый", "восьмидесятого", "восьмидесятому", "восьмидесятым", "восьмидесятая", "восьмидесятое", "восьмидесятые", "восьмидесятых", "восьмидесятыми", "девяностый", "девяностого", "девяностому", "девяностым", "девяностая", "девяностое", "девяностые", "девяностых", "девяностыми", "сотый", "сотого", "сотому", "сотым", "сотая", "сотое", "сотые", "сотых", "сотыми", "двухсотый", "двухсотого", "двухсотому", "двухсотым", "двухсотая", "двухсотое", "двухсотые", "двухсотых", "двухсотыми", "трехсотый", "трехсотого", "трехсотому", "трехсотым", "трехсотая", "трехсотое", "трехсотые", "трехсотых", "трехсотыми", "трёхсотый", "трёхсотого", "трёхсотому", "трёхсотым", "трёхсотая", "трёхсотое", "трёхсотые", "трёхсотых", "трёхсотыми", "четырехсотый", "четырехсотого", "четырехсотому", "четырехсотым", "четырехсотая", "четырехсотое", "четырехсотые", "четырехсотых", "четырехсотыми", "четырёхсотый", "четырёхсотого", "четырёхсотому", "четырёхсотым", "четырёхсотая", "четырёхсотое", "четырёхсотые", "четырёхсотых", "четырёхсотыми", "пятисотый", "пятисотого", "пятисотому", "пятисотым", "пятисотая", "пятисотое", "пятисотые", "пятисотых", "пятисотыми", "шестисотый", "шестисотого", "шестисотому", "шестисотым", "шестисотая", "шестисотое", "шестисотые", "шестисотых", "шестисотыми", "семисотый", "семисотого", "семисотому", "семисотым", "семисотая", "семисотое", "семисотые", "семисотых", "семисотыми", "восьмисотый", "восьмисотого", "восьмисотому", "восьмисотым", "восьмисотая", "восьмисотое", "восьмисотые", "восьмисотых", "восьмисотыми", "девятисотый", "девятисотого", "девятисотому", "девятисотым", "девятисотая", "девятисотое", "девятисотые", "девятисотых", "девятисотыми", "тысячный", "тысячного", "тысячному", "тысячным", "тысячная", "тысячное", "тысячные", "тысячных", "тысячными", "миллионный", "миллионного", "миллионному", "миллионным", "миллионная", "миллионное", "миллионные", "миллионных", "миллионными", "миллиардный", "миллиардного", "миллиардному", "миллиардным", "миллиардная", "миллиардное", "миллиардные", "миллиардных", "миллиардными"], O8 = ["я", "меня", "мне", "мной", "мною", "ты", "тебя", "тебе", "тобой", "он", "его", "него", "ему", "нему", "нем", "нём", "им", "ним", "она", "ее", "нее", "неё", "её", "ей", "ею", "ней", "нею", "оно", "мы", "нам", "нас", "нами", "вы", "вас", "вам", "вами", "они", "них", "ими", "ними", "их"], I8 = ["тот", "тому", "том", "тем", "того", "та", "той", "ту", "то", "те", "тех", "теми", "этот", "этому", "этом", "этим", "этого", "эта", "этой", "эту", "это", "эти", "этих", "этими", "такой", "такого", "такому", "таким", "таком", "такая", "такую", "такое", "такие", "таких", "такими", "этакий", "этакого", "этакому", "этаким", "этаком", "этакая", "этакую", "этакое", "этакие", "этаких", "этакими"], C8 = [
  "мой",
  "моего",
  "моему",
  "моём",
  "моим",
  "моя",
  "моей",
  "мое",
  "моё",
  "мои",
  "моих",
  "моим",
  "твой",
  "твоего",
  "твоему",
  "твоём",
  "твоем",
  "твоим",
  "твоя",
  "твоей",
  "твою",
  "твое",
  "твоё",
  "твои",
  "твоих",
  "твоим",
  "свой",
  "своего",
  "своему",
  "своём",
  "своем",
  "своим",
  "своя",
  "своей",
  "свою",
  "свое",
  "своё",
  "свои",
  "своих",
  "своим",
  // Words "его", "ее", "их" already included in personalPronouns
  "наш",
  "нашего",
  "нашему",
  "нашем",
  "наша",
  "нашей",
  "наше",
  "наши",
  "нашим",
  "наших",
  "ваш",
  "вашего",
  "вашему",
  "вашем",
  "ваша",
  "вашей",
  "ваше",
  "ваши",
  "вашим",
  "ваших"
], P8 = [
  "некоторый",
  "некоторого",
  "некоторому",
  "некоторым",
  "некотором",
  "некоторая",
  "некоторую",
  "некоторое",
  "некоторые",
  "некоторых",
  "некоторыми",
  "многие",
  "многого",
  "многому",
  "многим",
  "многом",
  "многая",
  "многую",
  "многое",
  "многие",
  "многих",
  "многими",
  "много",
  "множество",
  "каждый",
  "каждого",
  "каждому",
  "каждым",
  "каждом",
  "каждая",
  "каждую",
  "каждое",
  "каждые",
  "каждых",
  "каждыми",
  "достаточно",
  "мало",
  "более",
  "больше",
  "большинство",
  "большинства",
  "большинству",
  "большинстве",
  "несколько",
  "нескольких",
  "менее",
  "меньше",
  "наиболее",
  "наименее",
  // For expressions like "что угодно", "кто угодно", "зачем угодно"
  "угодно",
  "же"
], R8 = ["себя", "себе"], D8 = ["ничто", "ничего", "ничему", "ничем", "ни о чем", "ни о чём", "никто", "никого", "никому", "никем", "ни о ком", "весь", "всего", "всему", "всем", "всём", "все", "всё", "всех", "всеми", "всякий", "всякого", "всякому", "всяким", "всяком", "всякая", "всякой", "всякую", "всякое", "всякие", "всяких", "всякими", "кто-то", "кого-то", "кому-то", "кем-то", "ком-то", "что-то", "чего-то", "чему-то", "чем-то", "чём-то", "кто-либо", "кого-либо", "кому-либо", "кем-либо", "ком-либо", "что-либо", "чего-либо", "чему-либо", "чем-либо", "чём-либо", "кое-кто", "кое-кого", "кое-кому", "кое-кем", "кое-ком", "кое-что", "кое-чего", "кое-чему", "кое-чем", "кое-чём", "любой", "любого", "любому", "любым", "любом", "любая", "любую", "любое", "любые", "любых", "любыми", "какой", "какого", "какому", "каким", "каком", "какая", "какую", "какое", "какие", "каких", "какими", "какой-то", "какого-то", "какому-то", "каким-то", "каком-то", "какая-то", "какую-то", "какое-то", "какие-то", "каких-то", "какими-то"], det = ["чей-то", "чьего-то", "чьему-то", "чьим-то", "чьем-то", "чьём-то", "чья-то", "чьей-то", "чье-то", "чьё-то", "чьи-то", "чьих-то", "чьими-то", "ничей", "чьего", "чьему", "чьим", "чьем", "чьём", "чья", "чьей", "чье", "чьё", "чьи", "чьих", "чьими", "ничейный", "ничейного", "ничейному", "ничейным", "ничейном", "ничейная", "ничейной", "ничейную", "ничейное", "ничейные", "ничейных", "ничейными"], N8 = ["который", "которого", "которому", "которым", "котором", "которая", "которую", "которое", "которые", "которых", "которыми", "чей", "чьего", "чьему", "чьим", "чьем", "чьём", "чья", "чьей", "чье", "чьё", "чьи", "чьих", "чьими"], L8 = ["кто", "кого", "кому", "кем", "что", "чего", "чему", "чем", "чём"], M8 = ["где", "куда", "откуда", "как", "почему", "зачем", "сколько", "ли", "когда"], q8 = ["везде", "нигде", "там", "здесь", "повсюду"], F8 = ["никогда", "всегда", "однажды", "единожды", "дважды", "трижды", "четырежды", "уже"], B8 = ["чрезвычайно", "очень", "крайне", "абсолютно", "полностью", "совершенно", "часто", "чаще", "довольно", "несколько", "значительно", "немного", "немножко", "частично", "просто"], W8 = ["базовый", "базового", "базовому", "базовым", "базовом", "базовая", "базовой", "базовое", "базовые", "базовых", "базовым", "базовыми", "быстрый", "быстрого", "быстрому", "быстрым", "быстром", "быстрая", "быстрой", "быстрое", "быстрые", "быстрых", "быстрым", "быстрыми", "быстрейший", "быстрейшего", "быстрейшему", "быстрейшим", "быстрейшем", "быстрейшая", "быстрейшей", "быстрейшее", "быстрейшие", "быстрейших", "быстрейшим", "быстрейшими", "большой", "большого", "большому", "большим", "большом", "большая", "большое", "большие", "больших", "большим", "большими", "быстрее", "быстро", "важный", "важного", "важному", "важным", "важном", "важная", "важной", "важное", "важные", "важных", "важным", "важными", "важнее", "важно", "возможный", "возможного", "возможному", "возможным", "возможном", "возможная", "возможной", "возможное", "возможные", "возможных", "возможным", "возможными", "высокий", "высокого", "высокому", "высоким", "высоком", "высокая", "высокой", "высокое", "высокие", "высоких", "высоким", "высокими", "выше", "высоко", "главный", "главного", "главному", "главным", "главном", "главная", "главной", "главное", "главные", "главных", "главным", "главными", "далекий", "далекого", "далекому", "далеким", "далеком", "далекая", "далекой", "далекое", "далекие", "далеких", "далеким", "далекими", "далёкий", "далёкого", "далёкому", "далёким", "далёком", "далёкая", "далёкой", "далёкое", "далёкие", "далёких", "далёким", "далёкими", "длиннее", "длинный", "длинного", "длинному", "длинным", "длинном", "длинная", "длинной", "длинное", "длинные", "длинных", "длинным", "длинными", "доступный", "доступного", "доступному", "доступным", "доступном", "доступная", "доступной", "доступное", "доступные", "доступных", "доступным", "доступными", "жуткий", "жуткого", "жуткому", "жутким", "жутком", "жуткая", "жуткой", "жуткое", "жуткие", "жутких", "жутким", "жуткими", "законченный", "законченного", "законченному", "законченным", "законченном", "законченная", "законченной", "законченное", "законченные", "законченных", "законченным", "законченными", "занят", "занята", "заняты", "занятой", "занятого", "занятому", "занятым", "занятом", "занятая", "занятое", "занятые", "занятых", "занятым", "занятыми", "короткий", "короткого", "короткому", "коротким", "коротком", "короткая", "короткой", "короткое", "короткие", "коротких", "коротким", "короткими", "короче", "кошмарный", "кошмарного", "кошмарному", "кошмарным", "кошмарном", "кошмарная", "кошмарной", "кошмарное", "кошмарные", "кошмарных", "кошмарным", "кошмарными", "красивый", "красивого", "красивому", "красивым", "красивом", "красивая", "красивой", "красивое", "красивые", "красивых", "красивым", "красивыми", "лёгкий", "лёгкого", "лёгкому", "лёгким", "лёгком", "лёгкая", "лёгкой", "лёгкое", "лёгкие", "лёгких", "лёгким", "лёгкими", "легкий", "легкого", "легкому", "легким", "легком", "легкая", "легкой", "легкое", "легкие", "легких", "легким", "легкими", "легко", "легче", "лучше", "лучший", "лучшего", "лучшему", "лучшим", "лучшем", "лучшая", "лучшей", "лучшее", "лучшие", "лучших", "лучшим", "лучшими", "маленький", "маленького", "маленькому", "маленьким", "маленьком", "маленькая", "маленькой", "маленькое", "маленькие", "маленьких", "маленьким", "маленькими", "малюсенький", "малюсенького", "малюсенькому", "малюсеньким", "малюсеньком", "малюсенькая", "малюсенькой", "малюсенькое", "малюсенькие", "малюсеньких", "малюсеньким", "малюсенькими", "меньший", "меньшего", "меньшему", "меньшим", "меньшем", "меньшая", "меньшей", "меньшее", "меньшие", "меньших", "меньшим", "меньшими", "многочисленный", "многочисленного", "многочисленному", "многочисленным", "многочисленном", "многочисленная", "многочисленной", "многочисленное", "многочисленные", "многочисленных", "многочисленным", "многочисленными", "молодой", "молодого", "молодому", "молодым", "молодом", "молодая", "молодое", "называемый", "называемого", "называемому", "называемым", "называемом", "называемая", "называемой", "называемое", "называемые", "называемых", "называемым", "называемыми", "больший", "большего", "большему", "большим", "большем", "большая", "большей", "большее", "большие", "больших", "большим", "большими", "наибольший", "наибольшего", "наибольшему", "наибольшим", "наибольшем", "наибольшая", "наибольшей", "наибольшее", "наибольшие", "наибольших", "наибольшим", "наибольшими", "меньший", "меньшего", "меньшему", "меньшим", "меньшем", "меньшая", "меньшей", "меньшее", "меньшие", "меньших", "меньшим", "меньшими", "наименьший", "наименьшего", "наименьшему", "наименьшим", "наименьшем", "наименьшая", "наименьшей", "наименьшее", "наименьшие", "наименьших", "наименьшим", "наименьшими", "наихудший", "наихудшего", "наихудшему", "наихудшим", "наихудшем", "наихудшая", "наихудшей", "наихудшее", "наихудшие", "наихудших", "наихудшим", "наихудшими", "напрямую", "настоящий", "настоящего", "настоящему", "настоящим", "настоящем", "настоящая", "настоящей", "настоящее", "настоящие", "настоящих", "настоящим", "настоящими", "недавний", "недавнего", "недавнему", "недавним", "недавнем", "недавняя", "недавней", "недавнее", "недавние", "недавних", "недавним", "недавними", "необходимый", "необходимого", "необходимому", "необходимым", "необходимом", "необходимая", "необходимой", "необходимое", "необходимые", "необходимых", "необходимым", "необходимыми", "ниже", "низкий", "низкого", "низкому", "низким", "низком", "низкая", "низкой", "низкое", "низкие", "низких", "низким", "низкими", "новейший", "новейшего", "новейшему", "новейшим", "новейшем", "новейшая", "новейшей", "новейшее", "новейшие", "новейших", "новейшим", "новейшими", "новый", "нового", "новому", "новым", "новом", "новая", "новое", "новые", "новых", "новым", "новыми", "нормальный", "нормального", "нормальному", "нормальным", "нормальном", "нормальная", "нормальное", "нормальные", "нормальных", "нормальным", "нормальными", "обыкновенный", "обыкновенного", "обыкновенному", "обыкновенным", "обыкновенном", "обыкновенная", "обыкновенное", "обыкновенные", "обыкновенных", "обыкновенным", "обыкновенными", "обычный", "обычного", "обычному", "обычным", "обычном", "обычная", "обычное", "обычные", "обычных", "обычным", "обычными", "основной", "основного", "основному", "основным", "основном", "основная", "основное", "основные", "основных", "основным", "основными", "особенный", "особенного", "особенному", "особенным", "особенном", "особенная", "особенное", "особенные", "особенных", "особенным", "особенными", "отличный", "отличного", "отличному", "отличным", "отличном", "отличная", "отличное", "отличные", "отличных", "отличным", "отличными", "очевидный", "очевидного", "очевидному", "очевидным", "очевидном", "очевидная", "очевидное", "очевидные", "очевидных", "очевидным", "очевидными", "плохой", "плохого", "плохому", "плохим", "плохом", "плохая", "плохое", "плохие", "плохих", "плохим", "плохими", "последний", "последнего", "последнему", "последним", "последнем", "последняя", "последней", "последнее", "последние", "последних", "последним", "последними", "постоянно", "постоянный", "постоянного", "постоянному", "постоянным", "постоянном", "постоянная", "постоянное", "постоянные", "постоянных", "постоянным", "постоянными", "похожий", "похожего", "похожему", "похожим", "похожем", "похожая", "похожей", "похожее", "похожие", "похожих", "похожим", "похожими", "почти", "предыдущий", "предыдущего", "предыдущему", "предыдущим", "предыдущем", "предыдущая", "предыдущей", "предыдущее", "предыдущие", "предыдущих", "предыдущим", "предыдущими", "простейший", "простейшая", "простейшей", "простой", "простого", "простому", "простым", "простом", "простая", "простое", "простые", "простых", "простым", "простыми", "проще", "ранний", "раннего", "раннему", "ранним", "раннем", "ранняя", "ранней", "раннее", "ранние", "ранних", "ранним", "ранними", "разный", "разного", "разному", "разным", "разном", "разная", "разной", "разное", "разные", "разных", "разным", "разными", "самый", "самого", "самому", "самым", "самом", "самая", "самой", "самое", "самые", "самых", "самым", "самыми", "собственный", "собственного", "собственному", "собственным", "собственном", "собственная", "собственное", "собственные", "собственных", "собственным", "собственными", "специальный", "специального", "специальному", "специальным", "специальном", "специальная", "специальное", "специальные", "специальных", "специальным", "специальными", "специфичный", "специфичного", "специфичному", "специфичным", "специфичном", "специфичная", "специфичное", "специфичные", "специфичных", "специфичным", "специфичными", "средний", "среднего", "среднему", "средним", "среднем", "средняя", "средней", "среднее", "средние", "средних", "средним", "средними", "старейший", "старейшего", "старейшему", "старейшим", "старейшем", "старейшая", "старейшей", "старейшее", "старейшие", "старейших", "старейшим", "старейшими", "старый", "старого", "старому", "старым", "старом", "старая", "старой", "старое", "старые", "старых", "старым", "старыми", "текущий", "текущего", "текущему", "текущим", "текущем", "текущая", "текущей", "текущее", "текущие", "текущих", "текущим", "текущими", "тяжелее", "тяжёлый", "тяжёлого", "тяжёлому", "тяжёлым", "тяжёлом", "тяжёлая", "тяжёлое", "тяжёлые", "тяжёлых", "тяжёлым", "тяжёлыми", "тяжелый", "тяжелого", "тяжелому", "тяжелым", "тяжелом", "тяжелая", "тяжелое", "тяжелые", "тяжелых", "тяжелым", "тяжелыми", "хороший", "хорошего", "хорошему", "хорошим", "хорошем", "хорошая", "хорошей", "хорошее", "хорошие", "хороших", "хорошим", "хорошими", "хорошо", "худший", "худшего", "худшему", "худшим", "худшем", "худшая", "худшей", "худшее", "худшие", "худших", "худшим", "худшими", "хуже", "целый", "целого", "целому", "целым", "целом", "целая", "целой", "целое", "целые", "целых", "целым", "целыми", "именно", "обязательно", "действительно"], U8 = ["а-ля", "без", "безо", "без ведома", "благодаря", "близ", "в", "во", "в адрес", "в аспекте", "в виде", "в глазах", "в глубь", "в деле", "в дополнение к", "в духе", "в завершение", "в зависимости от", "в заключение", "в знак", "в интересах", "в качестве", "в лице", "в меру", "в направлении", "в направлении к", "в направлении ко", "в нарушение", "в области", "в обмен на", "в обстановке", "в обход", "в ответ на", "в отдалении от", "в отличие от", "в отношении", "в память", "в плане", "в пользу", "в порядке", "в предвидении", "в предвкушении", "в преддверии", "в присутствии", "в продолжение", "в противность", "в противовес", "в противоположность", "в процессе", "в разрезе", "в районе", "в рамках", "в рассуждении", "в расчете на", "в результате", "в роли", "в ряду", "в свете", "в связи с", "в связи со", "в силу", "в случае", "в смысле", "в согласии с", "в сообществе с", "в соответствии с", "в соответствии со", "в сопоставлении с", "в сопровождении", "в составе", "в сравнении с", "в сравнении со", "в стороне от", "в сторону", "в сфере", "в счет", "в течение", "в угоду", "в унисон с", "в условиях", "в ущерб", "в форме", "в ходе", "в целях", "в честь", "в числе", "в число", "вблизи", "вблизи от", "вверху", "ввиду", "вглубь", "вдалеке от", "вдали", "вдали от", "вдобавок к", "вдобавок ко", "вдогон", "вдогонку", "вдоль", "вдоль по", "взамен", "включая", "вкось", "вкруг", "вместе с", "вместе со", "вместо", "вне", "вне зависимости от", "внизу", "внутри", "внутрь", "вовнутрь", "во время", "во главе", "во главе с", "во главе со", "во избежание", "во изменение", "во имя", "во исполнение", "во славу", "возле", "вокруг", "волею", "вопреки", "вперед", "впереди", "вплоть до", "впредь до", "вразрез", "времен", "вроде", "вслед", "вослед", "вслед за", "вследствие", "выше", "для", "до", "за", "за исключением", "за счет", "заботами", "из", "изо", "из числа", "из-за", "из-под", "из-подо", "изнутри", "именем", "имени", "исключая", "исходя из", "к", "ко", "к числу", "касаемо", "касательно", "кончая", "кроме", "кругом", "между", "меж", "промеж", "промежду", "на", "мимо", "минуя", "на", "на базе", "на благо", "на глазах у", "на грани", "на имя", "на манер", "на основании", "на основе", "на почве", "на правах", "на предмет", "на протяжении", "на пути", "на пути к", "на пути ко", "на путях", "на путях к", "на путях ко", "на радость", "на случай", "на смену", "на стороне", "на сторону", "на уровне", "на фоне", "наверху", "навстречу", "над", "надо", "назади", "накануне", "наперекор", "наперерез", "наперехват", "наподобие", "напротив", "наравне с", "наравне со", "наряду с", "наряду со", "насупротив", "насчет", "начиная", "начиная от", "начиная с", "начиная со", "не без", "не в пример", "не говоря о", "не говоря об", "не говоря обо", "не до", "не считая", "невдалеке от", "невзирая на", "недалеко", "недалеко от", "независимо", "независимо от", "неподалеку от", "несмотря на", "ниже", "о", "об", "обо", "около", "окрест", "от", "ото", "от имени", "от лица", "относительно", "памяти", "перед", "передо", "пред", "предо", "перед", "передо", "пред", "предо", "перед лицом", "плюс к", "плюс ко", "по", "по адресу", "по аналогии с", "по аналогии со", "по вине", "по истечении", "по линии", "по мере", "по направлению", "по направлению к", "по направлению ко", "по отношению к", "по отношению ко", "по поводу", "по праву", "по примеру", "по причине", "по прошествии", "по пути", "по случаю", "по сравнению с", "по сравнению со", "по стопам", "по части", "по-за", "по-над", "по-под", "поблизости", "поблизости от", "поверх", "погодя", "под", "подо", "под видом", "под знаком", "под предлогом", "под председательством", "под эгидой", "подле", "подобно", "позади", "позднее", "поздней", "позже", "помимо", "поодаль от", "поперед", "поперек", "порядка", "посереди", "посередине", "посередке", "посередь", "после", "посреди", "посредине", "посредством", "превыше", "прежде", "при", "при всей", "при всем", "при всех", "при помощи", "при посредстве", "при условии", "применительно к", "применительно ко", "про", "против", "противно", "путем", "ради", "раньше", "рядом с", "рядом со", "с", "со", "с ведома", "с помощью", "с учетом", "с целью", "сбоку", "сбоку от", "сверх", "сверху", "свыше", "сзади", "силами", "сквозь", "следом за", "смотря по", "снаружи", "снизу", "со стороны", "совместно с", "совместно со", "совокупно с", "согласно", "согласно с", "согласно со", "сообразно", "сообразно с", "сообразно со", "сообща с", "сообща со", "соответственно", "соответственно с", "соответственно со", "соразмерно", "соразмерно с", "соразмерно со", "спереди", "спустя", "сравнительно с", "сравнительно со", "среди", "средь", "сродни", "судя по", "супротив", "считая", "типа", "у", "ценой", "ценою", "через", "что до"], H8 = ["и", "или", "и/или", "еще", "ещё", "а"], G8 = ["если", "даже"], V8 = ["ох", "вау", "тю-тю", "ох-ох-ох", "эх", "фуф", "ага", "угу", "упс", "ой", "бее", "ну", "вот"], K8 = ["ст", "ч", "л", "кг", "полкило", "г", "гр", "мл", "дл", "пол-литра", "мг", "см", "м", "км"], Y8 = ["секунд", "секунда", "минут", "минута", "час", "часа", "часов", "день", "дня", "дней", "неделя", "недели", "недель", "месяц", "месяца", "месяцев", "год", "года", "году", "годы", "лет", "гг", "сегодня", "завтра", "послезавтра", "вчера", "позавчера", "тыс до н э", "н э", "до н э", "тыс до н"], Q8 = ["вещь", "вещи", "вещью", "вещей", "вещам", "вещами", "вещах", "метод", "метода", "методом", "методу", "методе", "методы", "методам", "методами", "методах", "способ", "способа", "способом", "способу", "способе", "способы", "способам", "способами", "способах", "свойство", "свойства", "свойстве", "свойств", "свойствам", "свойствах", "свойствами", "случай", "случая", "случаем", "случаю", "случае", "случаи", "случаям", "случаями", "случаях", "дело", "дела", "делом", "делу", "деле", "делам", "делами", "делах", "сходство", "сходства", "сходстве", "сходств", "сходствам", "сходствах", "сходствами", "часть", "части", "частью", "частей", "частям", "частями", "частях", "штука", "штуки", "штуке", "штуку", "штук", "штукам", "штуками", "штуках", "раз", "раза", "разом", "разу", "разе", "разы", "разам", "разами", "разах", "вид", "вида", "видом", "виду", "виде", "виды", "видам", "видами", "видах", "процент", "процента", "процентом", "проценту", "проценте", "проценты", "процентам", "процентами", "процентах", "аспект", "аспекта", "аспектом", "аспекту", "аспекте", "аспекты", "аспектам", "аспектами", "аспектах", "пункт", "пункта", "пунктом", "пункту", "пункте", "пункты", "пунктам", "пунктами", "пунктах", "идея", "идеи", "идее", "идеей", "идеям", "идеями", "идеях", "тема", "темы", "теме", "тему", "темой", "темам", "темами", "темах", "человек", "человека", "человеком", "человеку", "человеке", "деталь", "детали", "деталью", "деталей", "деталям", "деталями", "деталях", "подробность", "подробности", "подробностью", "подробностей", "подробностям", "подробностями", "подробностях", "фактор", "фактора", "фактором", "фактору", "факторе", "факторы", "факторам", "факторами", "факторах", "разница", "разницы", "разнице", "разницу", "разницей", "различие", "различия", "различию", "различий", "различиям", "различиями", "различиях", "отличие", "отличия", "отличию", "отличий", "отличиям", "отличиями", "отличиях", "ситуация", "ситуации", "ситуацией", "ситуаций", "ситуациям", "ситуациями", "ситуациях", "сфера", "сферы", "сфере", "сферу", "сферой", "сферам", "сферами", "сферах"], X8 = ["нет", "да", "конечно", "отлично", "верх", "низ", "ок", "окей", "аминь", "и т д", "и т. д.", "и так далее", "и тому подобное", "прости", "простите", "пожалуйста", "тут", "так", "не", "вдруг", "теперь", "точно", "бы", "сам", "сама", "само", "сами", "иногда", "сейчас", "тоже", "также", "пока", "ведь", "потом", "поэтому", "явно", "ни", "не", "будто", "напрочь", "причем", "причём", "зато", "вперед", "вперёд", "назад", "сразу", "пусть", "пускай"], uet = ["г-н", "г-жа", "тов", "гр-н", "гр-а", "гр", "проф"], cet = ["мл"], pet = Jn.filteredAtEnding = (0, hb.default)([].concat(S8, W8)), get = Jn.filteredAtBeginningAndEnding = (0, hb.default)([].concat(U8, H8, I8, B8, P8, C8)), met = Jn.filteredAnywhere = (0, hb.default)([].concat(_8.singleWords, F8, O8, R8, V8, x8, E8, A8, T8, $8, j8, D8, G8, N8, L8, M8, q8, X8, K8, Y8, Q8)), fet = Jn.all = (0, hb.default)([].concat(x8, S8, I8, C8, R8, O8, P8, D8, det, N8, L8, M8, q8, F8, E8, A8, T8, U8, H8, G8, $8, _8.singleWords, B8, j8, V8, W8, K8, Q8, X8, uet, cet, Y8));
Jn.default = {
  filteredAtEnding: pet,
  filteredAtBeginningAndEnding: get,
  filteredAnywhere: met,
  all: fet
};
var yb = {};
Object.defineProperty(yb, "__esModule", {
  value: !0
});
yb.default = void 0;
yb.default = [["будь то", "или"], ["возможно", "а может быть"], ["возможно", "возможно"], ["достаточно", "чтобы"], ["едва", "как"], ["ежели", "то"], ["если говорить о", "то"], ["если и не", "то"], ["если не", "то"], ["если", "то"], ["мало того что", "еще и"], ["мало того, что", "еще и"], ["не сказать чтобы", "но"], ["не сказать, чтобы", "но"], ["не столько", "сколько"], ["не то чтобы", "но"], ["не только не", "но и"], ["стоило", "как"], ["так как", "то"], ["только", "как"], ["хоть бы", "а то"], ["хоть", "хоть"], ["хотя", "но"], ["чем", "лучше бы"], ["чем", "тем"], ["что касается", "то"]];
const het = "аоиеёэыуюя", yet = {
  vowels: [
    {
      fragments: [
        "[аоиеёэыуюя][аоиеёэыуюя]"
      ],
      countModifier: 1
    },
    {
      fragments: [
        "[аоиеёэыуюя][аоиеёэыуюя][аоиеёэыуюя]"
      ],
      countModifier: 1
    }
  ],
  words: {
    full: [],
    fragments: []
  }
}, zet = {
  vowels: het,
  deviations: yet
};
var zb = {};
Object.defineProperty(zb, "__esModule", {
  value: !0
});
zb.default = void 0;
zb.default = {
  borders: {
    veryEasy: 80,
    easy: 70,
    fairlyEasy: 60,
    okay: 50,
    fairlyDifficult: 40,
    difficult: 20,
    veryDifficult: 0
  },
  scores: {
    veryEasy: 9,
    easy: 9,
    fairlyEasy: 9,
    okay: 9,
    fairlyDifficult: 6,
    difficult: 3,
    veryDifficult: 3
  }
};
var bb = {};
Object.defineProperty(bb, "__esModule", {
  value: !0
});
bb.default = void 0;
bb.default = {
  recommendedLength: 15
};
var _j = {}, Ej = {};
Object.defineProperty(Ej, "__esModule", {
  value: !0
});
Ej.default = Eet;
const Bu = function(e, a) {
  return a.externalStemmer.vowels.includes(e);
}, bet = function(e, a) {
  let t = 0, n = 0;
  const r = e.length;
  for (let o = 1; o < r; o++) {
    const l = e.substring(o - 1, o), u = e.substring(o, o + 1);
    switch (n) {
      case 0:
        Bu(u, a) && (t = o + 1, n = 1);
        break;
      case 1:
        Bu(l, a) && Bu(u, a) && (n = 2);
        break;
      case 2:
        if (Bu(l, a) && Bu(u, a))
          return t;
        break;
    }
  }
  return t;
}, ls = function(e, a, t) {
  const n = e.substring(0, t), r = e.substring(n.length);
  let o;
  if (Array.isArray(a)) {
    if (o = new RegExp(a[0], "i"), o.test(r))
      return e = n + r.replace(o, ""), e;
    o = new RegExp(a[1], "i");
  } else
    o = new RegExp(a, "i");
  return o.test(r) ? (e = n + r.replace(o, ""), e) : null;
}, wet = function(e, a, t) {
  const n = e.substring(0, t), r = e.substring(n.length), o = new RegExp(a.externalStemmer.regexPerfectiveEndings, "i");
  return (n === "по" && !r.startsWith("д") || n === "про") && o.test(r) && (e = r), e;
}, vet = function(e, a, t) {
  const n = ls(e, a.externalStemmer.regexDerivationalNounSuffix, t);
  if (n)
    return n;
  const r = ls(e, [a.externalStemmer.regexPerfectiveGerunds1, a.externalStemmer.regexPerfectiveGerunds2], t);
  if (r)
    e = r;
  else {
    const o = ls(e, a.externalStemmer.regexReflexives, t);
    o && (e = o);
    const l = a.externalStemmer.regexAdjective, u = ls(e, a.externalStemmer.regexParticiple + l, t), c = ls(e, l, t);
    if (u)
      e = u;
    else if (c)
      e = c;
    else {
      const f = ls(e, [a.externalStemmer.regexVerb1, a.externalStemmer.regexVerb2], t);
      if (f)
        e = f;
      else {
        const y = ls(e, a.externalStemmer.regexNoun, t);
        y && (e = y);
      }
    }
  }
  return e;
}, ket = function(e, a) {
  for (const t of a)
    if (t[1].includes(e))
      return t[0];
  return null;
}, _et = function(e, a) {
  const t = a.find((n) => n.includes(e));
  if (t)
    return t[0];
};
function Eet(e, a) {
  if (a.doNotStemSuffix.includes(e))
    return e;
  const t = ket(e, a.exceptionStemsWithFullForms);
  if (t)
    return t;
  const n = bet(e, a);
  e = wet(e, a, n), e = vet(e, a, n);
  const r = ls(e, a.externalStemmer.regexI, n);
  r && (e = r), e.endsWith(a.externalStemmer.doubleN) && (e = e.substring(0, e.length - 1));
  const o = ls(e, a.externalStemmer.regexSuperlative, n);
  o && (e = o);
  const l = ls(e, a.externalStemmer.regexSoftSign, n);
  l && (e = l);
  const u = _et(e, a.stemsThatBelongToOneWord);
  return u || e;
}
Object.defineProperty(_j, "__esModule", {
  value: !0
});
_j.default = Oet;
var Aet = K, Tet = ee, $et = jet(Ej);
function jet(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: xet
} = Tet.languageProcessing;
function Oet(e) {
  const a = (0, Aet.get)(e.getData("morphology"), "ru", !1);
  return a ? (t) => (0, $et.default)(t, a) : xet;
}
var Aj = {}, zd = {};
Object.defineProperty(zd, "__esModule", {
  value: !0
});
zd.default = zd.all = void 0;
const Iet = ["абсолютизирован", "абсолютизирована", "абсолютизировано", "абсолютизированы", "абстрагирован", "абстрагирована", "абстрагировано", "абстрагированы", "автоматизирован", "автоматизирована", "автоматизировано", "автоматизированы", "адаптирован", "адаптирована", "адаптировано", "адаптированы", "адресован", "адресована", "адресовано", "адресованы", "адсорбирован", "адсорбирована", "адсорбировано", "адсорбированы", "аккредитован", "аккредитована", "аккредитовано", "аккредитованы", "аккумулирован", "аккумулирована", "аккумулировано", "аккумулированы", "активизирован", "активизирована", "активизировано", "активизированы", "активирован", "активирована", "активировано", "активированы", "актуализирован", "актуализирована", "актуализировано", "актуализированы", "акцентирован", "акцентирована", "акцентировано", "акцентированы", "амнистирован", "амнистирована", "амнистировано", "амнистированы", "амортизирован", "амортизирована", "амортизировано", "амортизированы", "ампутирован", "ампутирована", "ампутировано", "ампутированы", "ангажирован", "ангажирована", "ангажировано", "ангажированы", "аннулирован", "аннулирована", "аннулировано", "аннулированы", "анонсирован", "анонсирована", "анонсировано", "анонсированы", "апробирован", "апробирована", "апробировано", "апробированы", "аранжирован", "аранжирована", "аранжировано", "аранжированы", "аргументирован", "аргументирована", "аргументировано", "аргументированы", "арендован", "арендована", "арендовано", "арендованы", "арестован", "арестована", "арестовано", "арестованы", "ассигнован", "ассигнована", "ассигновано", "ассигнованы", "ассимилирован", "ассимилирована", "ассимилировано", "ассимилированы", "ассоциирован", "ассоциирована", "ассоциировано", "ассоциированы", "атакован", "атакована", "атаковано", "атакованы", "аттестован", "аттестована", "аттестовано", "аттестованы", "благословлен", "благословлена", "благословлено", "благословлены", "благоустроен", "благоустроена", "благоустроено", "благоустроены", "блокирован", "блокирована", "блокировано", "блокированы", "бойкотирован", "бойкотирована", "бойкотировано", "бойкотированы", "бронирован", "бронирована", "бронировано", "бронированы", "брошен", "брошена", "брошено", "брошены", "вакцинирован", "вакцинирована", "вакцинировано", "вакцинированы", "вбит", "вбита", "вбито", "вбиты", "вброшен", "вброшена", "вброшено", "вброшены", "вбухан", "вбухана", "вбухано", "вбуханы", "введен", "введена", "введено", "введены", "ввезен", "ввезена", "ввезено", "ввезены", "ввергнут", "ввергнута", "ввергнуто", "ввергнуты", "вверен", "вверена", "вверено", "вверены", "ввернут", "ввернута", "ввернуто", "ввернуты", "ввинчен", "ввинчена", "ввинчено", "ввинчены", "вдавлен", "вдавлена", "вдавлено", "вдавлены", "вдарен", "вдарена", "вдарено", "вдарены", "вдвинут", "вдвинута", "вдвинуто", "вдвинуты", "вделан", "вделана", "вделано", "вделаны", "вдет", "вдета", "вдето", "вдеты", "вдолблен", "вдолблена", "вдолблено", "вдолблены", "вдохновлен", "вдохновлена", "вдохновлено", "вдохновлены", "венчан", "венчана", "венчано", "венчаны", "вжат", "вжата", "вжато", "вжаты", "вживлен", "вживлена", "вживлено", "вживлены", "взбаламучен", "взбаламучена", "взбаламучено", "взбаламучены", "взбешен", "взбешена", "взбешено", "взбешены", "взбит", "взбита", "взбито", "взбиты", "взбодрен", "взбодрена", "взбодрено", "взбодрены", "взболтан", "взболтана", "взболтано", "взболтаны", "взбудоражена", "взбудоражено", "взбудоражены", "взведен", "взведена", "взведено", "взведены", "взвешен", "взвешена", "взвешено", "взвешены", "взвинчен", "взвинчена", "взвинчено", "взвинчены", "взвихрен", "взвихрена", "взвихрено", "взвихрены", "взволнована", "взволновано", "взволнованы", "взгромозжден", "взгромозждена", "взгромозждено", "взгромозждены", "вздернут", "вздернута", "вздернуто", "вздернуты", "вздет", "вздета", "вздето", "вздеты", "вздут", "вздута", "вздуто", "вздуты", "вздыблен", "вздыблена", "вздыблено", "вздыблены", "взлелеян", "взлелеяна", "взлелеяно", "взлелеяны", "взломан", "взломана", "взломано", "взломаны", "взлохмачен", "взлохмачена", "взлохмачено", "взлохмачены", "взметнут", "взметнута", "взметнуто", "взметнуты", "взмылен", "взмылена", "взмылено", "взмылены", "взнуздан", "взнуздана", "взнуздано", "взнузданы", "взорван", "взорвана", "взорвано", "взорваны", "взращен", "взращена", "взращено", "взращены", "взрезан", "взрезана", "взрезано", "взрезаны", "взрыхлен", "взрыхлена", "взрыхлено", "взрыхлены", "взъерошен", "взъерошена", "взъерошено", "взъерошены", "взыскан", "взыскана", "взыскано", "взысканы", "взят", "взята", "взято", "взяты", "видоизменен", "видоизменена", "видоизменено", "видоизменены", "визирован", "визирована", "визировано", "визированы", "вкачен", "вкачена", "вкачено", "вкачены", "вклеен", "вклеена", "вклеено", "вклеены", "включен", "включена", "включено", "включены", "вколот", "вколота", "вколото", "вколоты", "вколочен", "вколочена", "вколочено", "вколочены", "вкопан", "вкопана", "вкопано", "вкопаны", "вкраплен", "вкраплена", "вкраплено", "вкраплены", "вкушен", "вкушена", "вкушено", "вкушены", "влеплен", "влеплена", "влеплено", "влеплены", "влит", "влита", "влито", "влиты", "вложен", "вложена", "вложено", "вложены", "вмазан", "вмазана", "вмазано", "вмазаны", "вменен", "вменена", "вменено", "вменены", "вмещен", "вмещена", "вмещено", "вмещены", "вмонтирован", "вмонтирована", "вмонтировано", "вмонтированы", "вмурован", "вмурована", "вмуровано", "вмурованы", "вмят", "вмята", "вмято", "вмяты", "внедрен", "внедрена", "внедрено", "внедрены", "внесен", "внесена", "внесено", "внесены", "внушен", "внушена", "внушено", "внушены", "вобран", "вобрана", "вобрано", "вобраны", "вовлечен", "вовлечена", "вовлечено", "вовлечены", "вогнан", "вогнана", "вогнано", "вогнаны", "водворен", "водворена", "водворено", "водворены", "водружен", "водружена", "водружено", "водружены", "возбуждена", "возбуждено", "возбуждены", "возведен", "возведена", "возведено", "возведены", "возвеличен", "возвеличена", "возвеличено", "возвеличены", "возвещен", "возвещена", "возвещено", "возвещены", "возвращен", "возвращена", "возвращено", "возвращены", "возвышен", "возвышена", "возвышено", "возвышены", "возглавлен", "возглавлена", "возглавлено", "возглавлены", "возглашен", "возглашена", "возглашено", "возглашены", "воздвигнут", "воздвигнута", "воздвигнуто", "воздвигнуты", "возделан", "возделана", "возделано", "возделаны", "возложен", "возложена", "возложено", "возложены", "возмещен", "возмещена", "возмещено", "возмещены", "возмущена", "возмущено", "возмущены", "вознагражден", "вознаграждена", "вознаграждено", "вознаграждены", "вознесен", "вознесена", "вознесено", "вознесены", "возобновлен", "возобновлена", "возобновлено", "возобновлены", "возрожден", "возрождена", "возрождено", "возрождены", "воображен", "воображена", "воображено", "воображены", "воодушевлен", "воодушевлена", "воодушевлено", "воодушевлены", "вооружен", "вооружена", "вооружено", "вооружены", "воплощен", "воплощена", "воплощено", "воплощены", "вопрошен", "вопрошена", "вопрошено", "вопрошены", "воскрешен", "воскрешена", "воскрешено", "воскрешены", "воспет", "воспета", "воспето", "воспеты", "воспитана", "воспитано", "воспитаны", "воспламенен", "воспламенена", "воспламенено", "воспламенены", "восполнен", "восполнена", "восполнено", "восполнены", "воспрещен", "воспрещена", "воспрещено", "воспрещены", "воспринят", "воспринята", "воспринято", "восприняты", "воспроизведен", "воспроизведена", "воспроизведено", "воспроизведены", "восславлен", "восславлена", "восславлено", "восславлены", "восстановлен", "восстановлена", "восстановлено", "восстановлены", "востребована", "востребовано", "востребованы", "восхищен", "восхищена", "восхищено", "восхищены", "воткнут", "воткнута", "воткнуто", "воткнуты", "впаян", "впаяна", "впаяно", "впаяны", "впечатлен", "впечатлена", "впечатлено", "впечатлены", "вписан", "вписана", "вписано", "вписаны", "впитан", "впитана", "впитано", "впитаны", "впихнут", "впихнута", "впихнуто", "впихнуты", "вплетен", "вплетена", "вплетено", "вплетены", "вправлен", "вправлена", "вправлено", "вправлены", "впрыснут", "впрыснута", "впрыснуто", "впрыснуты", "впряжен", "впряжена", "впряжено", "впряжены", "впущен", "впущена", "впущено", "впущены", "вразумлен", "вразумлена", "вразумлено", "вразумлены", "врезан", "врезана", "врезано", "врезаны", "врублен", "врублена", "врублено", "врублены", "вручен", "вручена", "вручено", "вручены", "врыт", "врыта", "врыто", "врыты", "всажен", "всажена", "всажено", "всажены", "вселен", "вселена", "вселено", "вселены", "вскинут", "вскинута", "вскинуто", "вскинуты", "вскипячен", "вскипячена", "вскипячено", "вскипячены", "всколыхнут", "всколыхнута", "всколыхнуто", "всколыхнуты", "вскопан", "вскопана", "вскопано", "вскопаны", "вскормлен", "вскормлена", "вскормлено", "вскормлены", "вскружен", "вскружена", "вскружено", "вскружены", "вскрыт", "вскрыта", "вскрыто", "вскрыты", "всосан", "всосана", "всосано", "всосаны", "вспахан", "вспахана", "вспахано", "вспаханы", "вспенен", "вспенена", "вспенено", "вспенены", "всплеснут", "всплеснута", "всплеснуто", "всплеснуты", "всполошен", "всполошена", "всполошено", "всполошены", "вспорот", "вспорота", "вспорото", "вспороты", "вставлен", "вставлена", "вставлено", "вставлены", "встревожен", "встревожена", "встревожено", "встревожены", "встречен", "встречена", "встречено", "встречены", "встроен", "встроена", "встроено", "встроены", "встряхнут", "встряхнута", "встряхнуто", "встряхнуты", "всунут", "всунута", "всунуто", "всунуты", "всучен", "всучена", "всучено", "всучены", "втащен", "втащена", "втащено", "втащены", "втерт", "втерта", "втерто", "втерты", "втиснут", "втиснута", "втиснуто", "втиснуты", "втолкнут", "втолкнута", "втолкнуто", "втолкнуты", "втолкован", "втолкована", "втолковано", "втолкованы", "втоптан", "втоптана", "втоптано", "втоптаны", "втравлен", "втравлена", "втравлено", "втравлены", "втянут", "втянута", "втянуто", "втянуты", "вшит", "вшита", "вшито", "вшиты", "выбелен", "выбелена", "выбелено", "выбелены", "выбит", "выбита", "выбито", "выбиты", "выболтан", "выболтана", "выболтано", "выболтаны", "выбран", "выбрана", "выбрано", "выбраны", "выбрит", "выбрита", "выбрито", "выбриты", "выброшен", "выброшена", "выброшено", "выброшены", "вывален", "вывалена", "вывалено", "вывалены", "вывалян", "вываляна", "вываляно", "вываляны", "выварен", "выварена", "выварено", "выварены", "выведан", "выведана", "выведано", "выведаны", "выведен", "выведена", "выведено", "выведены", "вывезен", "вывезена", "вывезено", "вывезены", "выверен", "выверена", "выверено", "выверены", "вывернут", "вывернута", "вывернуто", "вывернуты", "выветрен", "выветрена", "выветрено", "выветрены", "вывешен", "вывешена", "вывешено", "вывешены", "вывихнут", "вывихнута", "вывихнуто", "вывихнуты", "вывожен", "вывожена", "вывожено", "вывожены", "выворочен", "выворочена", "выворочено", "выворочены", "выгадан", "выгадана", "выгадано", "выгаданы", "выглажен", "выглажена", "выглажено", "выглажены", "выгнан", "выгнана", "выгнано", "выгнаны", "выгнут", "выгнута", "выгнуто", "выгнуты", "выговорен", "выговорена", "выговорено", "выговорены", "выгорожен", "выгорожена", "выгорожено", "выгорожены", "выгравирован", "выгравирована", "выгравировано", "выгравированы", "выгребен", "выгребена", "выгребено", "выгребены", "выгружен", "выгружена", "выгружено", "выгружены", "выдавлен", "выдавлена", "выдавлено", "выдавлены", "выдвинут", "выдвинута", "выдвинуто", "выдвинуты", "выдворен", "выдворена", "выдворено", "выдворены", "выделан", "выделана", "выделано", "выделаны", "выделен", "выделена", "выделено", "выделены", "выдержан", "выдержана", "выдержано", "выдержаны", "выдернут", "выдернута", "выдернуто", "выдернуты", "выдолблен", "выдолблена", "выдолблено", "выдолблены", "выдохнут", "выдохнута", "выдохнуто", "выдохнуты", "выдран", "выдрана", "выдрано", "выдраны", "выдрессирована", "выдрессировано", "выдрессированы", "выдуман", "выдумана", "выдумано", "выдуманы", "выдут", "выдута", "выдуто", "выдуты", "выжат", "выжата", "выжато", "выжаты", "выждан", "выждана", "выждано", "выжданы", "выжит", "выжита", "выжито", "выжиты", "выжран", "выжрана", "выжрано", "выжраны", "вызван", "вызвана", "вызвано", "вызваны", "вызволен", "вызволена", "вызволено", "вызволены", "вызнан", "вызнана", "вызнано", "вызнаны", "вызубрен", "вызубрена", "вызубрено", "вызубрены", "выигран", "выиграна", "выиграно", "выиграны", "выискан", "выискана", "выискано", "выисканы", "выказан", "выказана", "выказано", "выказаны", "выкачан", "выкачана", "выкачано", "выкачаны", "выкачен", "выкачена", "выкачено", "выкачены", "выкинут", "выкинута", "выкинуто", "выкинуты", "выклеван", "выклевана", "выклевано", "выклеваны", "выкликнут", "выкликнута", "выкликнуто", "выкликнуты", "выключен", "выключена", "выключено", "выключены", "выклянчен", "выклянчена", "выклянчено", "выклянчены", "выкован", "выкована", "выковано", "выкованы", "выковырян", "выковыряна", "выковыряно", "выковыряны", "выколот", "выколота", "выколото", "выколоты", "выколочен", "выколочена", "выколочено", "выколочены", "выкопан", "выкопана", "выкопано", "выкопаны", "выкормлен", "выкормлена", "выкормлено", "выкормлены", "выкорчеван", "выкорчевана", "выкорчевано", "выкорчеваны", "выкошен", "выкошена", "выкошено", "выкошены", "выкраден", "выкрадена", "выкрадено", "выкрадены", "выкрашен", "выкрашена", "выкрашено", "выкрашены", "выкрикнут", "выкрикнута", "выкрикнуто", "выкрикнуты", "выкроен", "выкроена", "выкроено", "выкроены", "выкручен", "выкручена", "выкручено", "выкручены", "выкупан", "выкупана", "выкупано", "выкупаны", "выкуплен", "выкуплена", "выкуплено", "выкуплены", "выкурен", "выкурена", "выкурено", "выкурены", "выкушен", "выкушена", "выкушено", "выкушены", "вылакан", "вылакана", "вылакано", "вылаканы", "вылеплен", "вылеплена", "вылеплено", "вылеплены", "вылечен", "вылечена", "вылечено", "вылечены", "вылизан", "вылизана", "вылизано", "вылизаны", "вылит", "вылита", "вылито", "вылиты", "выловлен", "выловлена", "выловлено", "выловлены", "выложен", "выложена", "выложено", "выложены", "выломан", "выломана", "выломано", "выломаны", "вылуплен", "вылуплена", "вылуплено", "вылуплены", "вымазан", "вымазана", "вымазано", "вымазаны", "выманен", "выманена", "выманено", "выманены", "вымаран", "вымарана", "вымарано", "вымараны", "вымахан", "вымахана", "вымахано", "вымаханы", "выменян", "выменяна", "выменяно", "выменяны", "выметен", "выметена", "выметено", "выметены", "вымолвлен", "вымолвлена", "вымолвлено", "вымолвлены", "вымолен", "вымолена", "вымолено", "вымолены", "вымотан", "вымотана", "вымотано", "вымотаны", "вымочен", "вымочена", "вымочено", "вымочены", "вымощен", "вымощена", "вымощено", "вымощены", "вымучен", "вымучена", "вымучено", "вымучены", "вымуштрован", "вымуштрована", "вымуштровано", "вымуштрованы", "вымыт", "вымыта", "вымыто", "вымыты", "вымышлен", "вымышлена", "вымышлено", "вымышлены", "вынесен", "вынесена", "вынесено", "вынесены", "выношен", "выношена", "выношено", "выношены", "вынужден", "вынуждена", "вынуждено", "вынуждены", "вынут", "вынута", "вынуто", "вынуты", "выпачкан", "выпачкана", "выпачкано", "выпачканы", "выпестован", "выпестована", "выпестовано", "выпестованы", "выпечен", "выпечена", "выпечено", "выпечены", "выпилен", "выпилена", "выпилено", "выпилены", "выписан", "выписана", "выписано", "выписаны", "выпит", "выпита", "выпито", "выпиты", "выпихнут", "выпихнута", "выпихнуто", "выпихнуты", "выплавлен", "выплавлена", "выплавлено", "выплавлены", "выплакан", "выплакана", "выплакано", "выплаканы", "выплачен", "выплачена", "выплачено", "выплачены", "выплеснут", "выплеснута", "выплеснуто", "выплеснуты", "выплюнут", "выплюнута", "выплюнуто", "выплюнуты", "выполнен", "выполнена", "выполнено", "выполнены", "выпорот", "выпорота", "выпорото", "выпороты", "выпотрошен", "выпотрошена", "выпотрошено", "выпотрошены", "выправлен", "выправлена", "выправлено", "выправлены", "выпровожен", "выпровожена", "выпровожено", "выпровожены", "выпростан", "выпростана", "выпростано", "выпростаны", "выпрошен", "выпрошена", "выпрошено", "выпрошены", "выпрямлен", "выпрямлена", "выпрямлено", "выпрямлены", "выпучен", "выпучена", "выпучено", "выпучены", "выпущен", "выпущена", "выпущено", "выпущены", "выпытан", "выпытана", "выпытано", "выпытаны", "выпячен", "выпячена", "выпячено", "выпячены", "выработан", "выработана", "выработано", "выработаны", "выражен", "выражена", "выражено", "выражены", "выращен", "выращена", "выращено", "выращены", "вырван", "вырвана", "вырвано", "вырваны", "вырезан", "вырезана", "вырезано", "вырезаны", "выровнян", "выровняна", "выровняно", "выровняны", "выронен", "выронена", "выронено", "выронены", "вырублен", "вырублена", "вырублено", "вырублены", "выруган", "выругана", "выругано", "выруганы", "выручен", "выручена", "выручено", "выручены", "вырыт", "вырыта", "вырыто", "вырыты", "высажен", "высажена", "высажено", "высажены", "высвечен", "высвечена", "высвечено", "высвечены", "высвобожден", "высвобождена", "высвобождено", "высвобождены", "выселен", "выселена", "выселено", "выселены", "высечен", "высечена", "высечено", "высечены", "высеян", "высеяна", "высеяно", "высеяны", "высижен", "высижена", "высижено", "высижены", "высказан", "высказана", "высказано", "высказаны", "выскоблен", "выскоблена", "выскоблено", "выскоблены", "выскребен", "выскребена", "выскребено", "выскребены", "выслан", "выслана", "выслано", "высланы", "выслежен", "выслежена", "выслежено", "выслежены", "выслужен", "выслужена", "выслужено", "выслужены", "выслушан", "выслушана", "выслушано", "выслушаны", "высмеян", "высмеяна", "высмеяно", "высмеяны", "высмотрен", "высмотрена", "высмотрено", "высмотрены", "высосан", "высосана", "высосано", "высосаны", "выспрошен", "выспрошена", "выспрошено", "выспрошены", "выставлен", "выставлена", "выставлено", "выставлены", "выстиран", "выстирана", "выстирано", "выстираны", "выстлан", "выстлана", "выстлано", "выстланы", "выстоян", "выстояна", "выстояно", "выстояны", "выстрадан", "выстрадана", "выстрадано", "выстраданы", "выстрелен", "выстрелена", "выстрелено", "выстрелены", "выстрижен", "выстрижена", "выстрижено", "выстрижены", "выстроен", "выстроена", "выстроено", "выстроены", "выструган", "выстругана", "выстругано", "выструганы", "выстужен", "выстужена", "выстужено", "выстужены", "высунут", "высунута", "высунуто", "высунуты", "высушен", "высушена", "высушено", "высушены", "высчитан", "высчитана", "высчитано", "высчитаны", "вытаращен", "вытаращена", "вытаращено", "вытаращены", "вытащен", "вытащена", "вытащено", "вытащены", "вытерплен", "вытерплена", "вытерплено", "вытерплены", "вытерт", "вытерта", "вытерто", "вытерты", "вытесан", "вытесана", "вытесано", "вытесаны", "вытеснен", "вытеснена", "вытеснено", "вытеснены", "выткан", "выткана", "выткано", "вытканы", "вытолкнут", "вытолкнута", "вытолкнуто", "вытолкнуты", "вытоптан", "вытоптана", "вытоптано", "вытоптаны", "выторгован", "выторгована", "выторговано", "выторгованы", "выточен", "выточена", "выточено", "выточены", "вытравлен", "вытравлена", "вытравлено", "вытравлены", "вытребован", "вытребована", "вытребовано", "вытребованы", "вытрясен", "вытрясена", "вытрясено", "вытрясены", "вытряхнут", "вытряхнута", "вытряхнуто", "вытряхнуты", "вытурен", "вытурена", "вытурено", "вытурены", "вытянут", "вытянута", "вытянуто", "вытянуты", "выужен", "выужена", "выужено", "выужены", "выучен", "выучена", "выучено", "выучены", "выхвачен", "выхвачена", "выхвачено", "выхвачены", "выхлебан", "выхлебана", "выхлебано", "выхлебаны", "выхлопотан", "выхлопотана", "выхлопотано", "выхлопотаны", "выхожен", "выхожена", "выхожено", "выхожены", "выхолощен", "выхолощена", "выхолощено", "выхолощены", "выцарапан", "выцарапана", "выцарапано", "выцарапаны", "вычеркнут", "вычеркнута", "вычеркнуто", "вычеркнуты", "вычерпан", "вычерпана", "вычерпано", "вычерпаны", "вычерчен", "вычерчена", "вычерчено", "вычерчены", "вычислен", "вычислена", "вычислено", "вычислены", "вычитан", "вычитана", "вычитано", "вычитаны", "вычищен", "вычищена", "вычищено", "вычищены", "вычленен", "вычленена", "вычленено", "вычленены", "вычтен", "вычтена", "вычтено", "вычтены", "вышвырнут", "вышвырнута", "вышвырнуто", "вышвырнуты", "вышит", "вышита", "вышито", "вышиты", "вышколен", "вышколена", "вышколено", "вышколены", "выщерблен", "выщерблена", "выщерблено", "выщерблены", "выщипан", "выщипана", "выщипано", "выщипаны", "выявлен", "выявлена", "выявлено", "выявлены", "выяснен", "выяснена", "выяснено", "выяснены", "газирована", "газировано", "газированы", "гарантирован", "гарантирована", "гарантировано", "гарантированы", "гаркнут", "гаркнута", "гаркнуто", "гаркнуты", "гармонизирован", "гармонизирована", "гармонизировано", "гармонизированы", "герметизирован", "герметизирована", "герметизировано", "герметизированы", "глазирован", "глазирована", "глазировано", "глазированы", "госпитализирован", "госпитализирована", "госпитализировано", "госпитализированы", "грохнут", "грохнута", "грохнуто", "грохнуты", "дарован", "дарована", "даровано", "дарованы", "датирован", "датирована", "датировано", "датированы", "двинут", "двинута", "двинуто", "двинуты", "девальвирован", "девальвирована", "девальвировано", "девальвированы", "дегустирован", "дегустирована", "дегустировано", "дегустированы", "дезавуирован", "дезавуирована", "дезавуировано", "дезавуированы", "дезинфицирован", "дезинфицирована", "дезинфицировано", "дезинфицированы", "дезинформирован", "дезинформирована", "дезинформировано", "дезинформированы", "дезорганизован", "дезорганизована", "дезорганизовано", "дезорганизованы", "дезориентирован", "дезориентирована", "дезориентировано", "дезориентированы", "декларирован", "декларирована", "декларировано", "декларированы", "декорирован", "декорирована", "декорировано", "декорированы", "делегирован", "делегирована", "делегировано", "делегированы", "демаскирован", "демаскирована", "демаскировано", "демаскированы", "демобилизован", "демобилизована", "демобилизовано", "демобилизованы", "демонтирован", "демонтирована", "демонтировано", "демонтированы", "деморализован", "деморализована", "деморализовано", "деморализованы", "депонирован", "депонирована", "депонировано", "депонированы", "детализирован", "детализирована", "детализировано", "детализированы", "детерминирован", "детерминирована", "детерминировано", "детерминированы", "деформирован", "деформирована", "деформировано", "деформированы", "диагностирован", "диагностирована", "диагностировано", "диагностированы", "дисквалифицирован", "дисквалифицирована", "дисквалифицировано", "дисквалифицированы", "дискредитирован", "дискредитирована", "дискредитировано", "дискредитированы", "дискриминирован", "дискриминирована", "дискриминировано", "дискриминированы", "дислоцирован", "дислоцирована", "дислоцировано", "дислоцированы", "дисциплинирован", "дисциплинирована", "дисциплинировано", "дисциплинированы", "дифференцирован", "дифференцирована", "дифференцировано", "дифференцированы", "добавлен", "добавлена", "добавлено", "добавлены", "добит", "добита", "добито", "добиты", "доведен", "доведена", "доведено", "доведены", "довезен", "довезена", "довезено", "довезены", "доверен", "доверена", "доверено", "доверены", "довершен", "довершена", "довершено", "довершены", "довожен", "довожена", "довожено", "довожены", "догляжен", "догляжена", "догляжено", "догляжены", "догнан", "догнана", "догнано", "догнаны", "договорен", "договорена", "договорено", "договорены", "догонян", "догоняна", "догоняно", "догоняны", "доделан", "доделана", "доделано", "доделаны", "додуман", "додумана", "додумано", "додуманы", "дожат", "дожата", "дожато", "дожаты", "дожеван", "дожевана", "дожевано", "дожеваны", "дожит", "дожита", "дожито", "дожиты", "дозволен", "дозволена", "дозволено", "дозволены", "дозирован", "дозирована", "дозировано", "дозированы", "доигран", "доиграна", "доиграно", "доиграны", "доказан", "доказана", "доказано", "доказаны", "докончен", "докончена", "докончено", "докончены", "документирован", "документирована", "документировано", "документированы", "докурен", "докурена", "докурено", "докурены", "долбанут", "долбанута", "долбануто", "долбануты", "долит", "долита", "долито", "долиты", "доложен", "доложена", "доложено", "доложены", "домчан", "домчана", "домчано", "домчаны", "домыслен", "домыслена", "домыслено", "домыслены", "донесен", "донесена", "донесено", "донесены", "доношена", "доношено", "доношены", "допет", "допета", "допето", "допеты", "допечен", "допечена", "допечено", "допечены", "дописан", "дописана", "дописано", "дописаны", "допит", "допита", "допито", "допиты", "доплачен", "доплачена", "доплачено", "доплачены", "дополнен", "дополнена", "дополнено", "дополнены", "допрошен", "допрошена", "допрошено", "допрошены", "допущен", "допущена", "допущено", "допущены", "доработан", "доработана", "доработано", "доработаны", "дорисован", "дорисована", "дорисовано", "дорисованы", "досажен", "досажена", "досажено", "досажены", "досказан", "досказана", "досказано", "досказаны", "дослушан", "дослушана", "дослушано", "дослушаны", "досмотрен", "досмотрена", "досмотрено", "досмотрены", "доставлен", "доставлена", "доставлено", "доставлены", "достроен", "достроена", "достроено", "достроены", "досчитан", "досчитана", "досчитано", "досчитаны", "дотащен", "дотащена", "дотащено", "дотащены", "дотянут", "дотянута", "дотянуто", "дотянуты", "дочитан", "дочитана", "дочитано", "дочитаны", "драматизирован", "драматизирована", "драматизировано", "драматизированы", "дренирован", "дренирована", "дренировано", "дренированы", "дублирован", "дублирована", "дублировано", "дублированы", "жахнут", "жахнута", "жахнуто", "жахнуты", "заасфальтирован", "заасфальтирована", "заасфальтировано", "заасфальтированы", "забаррикадирован", "забаррикадирована", "забаррикадировано", "забаррикадированы", "забинтован", "забинтована", "забинтовано", "забинтованы", "забит", "забита", "забито", "забиты", "заблеван", "заблевана", "заблевано", "заблеваны", "заблокирован", "заблокирована", "заблокировано", "заблокированы", "заболочена", "заболочено", "заболочены", "заболтан", "заболтана", "заболтано", "заболтаны", "забракован", "забракована", "забраковано", "забракованы", "забран", "забрана", "забрано", "забраны", "забронирован", "забронирована", "забронировано", "забронированы", "забросан", "забросана", "забросано", "забросаны", "заброшен", "заброшена", "заброшено", "заброшены", "забрызган", "забрызгана", "забрызгано", "забрызганы", "завален", "завалена", "завалено", "завалены", "заварен", "заварена", "заварено", "заварены", "заведен", "заведена", "заведено", "заведены", "завезен", "завезена", "завезено", "завезены", "завербован", "завербована", "завербовано", "завербованы", "заверен", "заверена", "заверено", "заверены", "завернут", "завернута", "завернуто", "завернуты", "заверчен", "заверчена", "заверчено", "заверчены", "завершен", "завершена", "завершено", "завершены", "завешан", "завешана", "завешано", "завешаны", "завещан", "завещана", "завещано", "завещаны", "завиден", "завидена", "завидено", "завидены", "завизирован", "завизирована", "завизировано", "завизированы", "завинчен", "завинчена", "завинчено", "завинчены", "завит", "завита", "завито", "завиты", "завлечен", "завлечена", "завлечено", "завлечены", "завоеван", "завоевана", "завоевано", "завоеваны", "заворожен", "заворожена", "заворожено", "заворожены", "завуалирован", "завуалирована", "завуалировано", "завуалированы", "завышен", "завышена", "завышено", "завышены", "завязан", "завязана", "завязано", "завязаны", "загадан", "загадана", "загадано", "загаданы", "загажен", "загажена", "загажено", "загажены", "загашен", "загашена", "загашено", "загашены", "загипнотизирован", "загипнотизирована", "загипнотизировано", "загипнотизированы", "загипсован", "загипсована", "загипсовано", "загипсованы", "заглажен", "заглажена", "заглажено", "заглажены", "заглушен", "заглушена", "заглушено", "заглушены", "загнан", "загнана", "загнано", "загнаны", "загнут", "загнута", "загнуто", "загнуты", "заговорен", "заговорена", "заговорено", "заговорены", "загорожен", "загорожена", "загорожено", "загорожены", "заготовлен", "заготовлена", "заготовлено", "заготовлены", "заграбастан", "заграбастана", "заграбастано", "заграбастаны", "загребен", "загребена", "загребено", "загребены", "загримирован", "загримирована", "загримировано", "загримированы", "загромозжден", "загромозждена", "загромозждено", "загромозждены", "загружен", "загружена", "загружено", "загружены", "загрызен", "загрызена", "загрызено", "загрызены", "загрязнен", "загрязнена", "загрязнено", "загрязнены", "загублен", "загублена", "загублено", "загублены", "задавлен", "задавлена", "задавлено", "задавлены", "задвинут", "задвинута", "задвинуто", "задвинуты", "задействован", "задействована", "задействовано", "задействованы", "заделан", "заделана", "заделано", "заделаны", "задерган", "задергана", "задергано", "задерганы", "задержан", "задержана", "задержано", "задержаны", "задернут", "задернута", "задернуто", "задернуты", "задет", "задета", "задето", "задеты", "задобрен", "задобрена", "задобрено", "задобрены", "задолбан", "задолбана", "задолбано", "задолбаны", "задраен", "задраена", "задраено", "задраены", "задран", "задрана", "задрано", "задраны", "задрапирован", "задрапирована", "задрапировано", "задрапированы", "задуман", "задумана", "задумано", "задуманы", "задурен", "задурена", "задурено", "задурены", "задут", "задута", "задуто", "задуты", "задушен", "задушена", "задушено", "задушены", "задымлен", "задымлена", "задымлено", "задымлены", "заезжен", "заезжена", "заезжено", "заезжены", "зажарен", "зажарена", "зажарено", "зажарены", "зажат", "зажата", "зажато", "зажаты", "зажеван", "зажевана", "зажевано", "зажеваны", "зажит", "зажита", "зажито", "зажиты", "зажмурен", "зажмурена", "зажмурено", "зажмурены", "зазван", "зазвана", "зазвано", "зазваны", "заземлен", "заземлена", "заземлено", "заземлены", "зазубрен", "зазубрена", "зазубрено", "зазубрены", "заигран", "заиграна", "заиграно", "заиграны", "заимствован", "заимствована", "заимствовано", "заимствованы", "заинтересована", "заинтересовано", "заинтересованы", "заинтригована", "заинтриговано", "заинтригованы", "заказан", "заказана", "заказано", "заказаны", "закалена", "закалено", "закалены", "закамуфлирован", "закамуфлирована", "закамуфлировано", "закамуфлированы", "закапан", "закапана", "закапано", "закапаны", "закатан", "закатана", "закатано", "закатаны", "закачан", "закачана", "закачано", "закачаны", "закачен", "закачена", "закачено", "закачены", "закидан", "закидана", "закидано", "закиданы", "закинут", "закинута", "закинуто", "закинуты", "заклеван", "заклевана", "заклевано", "заклеваны", "заклеен", "заклеена", "заклеено", "заклеены", "заклеймен", "заклеймена", "заклеймено", "заклеймены", "заклинен", "заклинена", "заклинено", "заклинены", "заключен", "заключена", "заключено", "заключены", "закован", "закована", "заковано", "закованы", "закодирован", "закодирована", "закодировано", "закодированы", "заколдован", "заколдована", "заколдовано", "заколдованы", "заколот", "заколота", "заколото", "заколоты", "заколочен", "заколочена", "заколочено", "заколочены", "закольцеван", "закольцевана", "закольцевано", "закольцеваны", "законсервирован", "законсервирована", "законсервировано", "законсервированы", "законспирирован", "законспирирована", "законспирировано", "законспирированы", "закончен", "закончена", "закончено", "закончены", "закопан", "закопана", "закопано", "закопаны", "закопчен", "закопчена", "закопчено", "закопчены", "закошен", "закошена", "закошено", "закошены", "закрашен", "закрашена", "закрашено", "закрашены", "закреплен", "закреплена", "закреплено", "закреплены", "закроен", "закроена", "закроено", "закроены", "закруглен", "закруглена", "закруглено", "закруглены", "закручен", "закручена", "закручено", "закручены", "закрыт", "закрыта", "закрыто", "закрыты", "закуплен", "закуплена", "закуплено", "закуплены", "закупорен", "закупорена", "закупорено", "закупорены", "закурен", "закурена", "закурено", "закурены", "закутан", "закутана", "закутано", "закутаны", "залажен", "залажена", "залажено", "залажены", "залатан", "залатана", "залатано", "залатаны", "залеплен", "залеплена", "залеплено", "залеплены", "залечен", "залечена", "залечено", "залечены", "зализан", "зализана", "зализано", "зализаны", "залит", "залита", "залито", "залиты", "заложен", "заложена", "заложено", "заложены", "заломлен", "заломлена", "заломлено", "заломлены", "заляпан", "заляпана", "заляпано", "заляпаны", "замазан", "замазана", "замазано", "замазаны", "заманен", "заманена", "заманено", "заманены", "замаран", "замарана", "замарано", "замараны", "замаскирован", "замаскирована", "замаскировано", "замаскированы", "замаслен", "замаслена", "замаслено", "замаслены", "замедлен", "замедлена", "замедлено", "замедлены", "заменен", "заменена", "заменено", "заменены", "замерен", "замерена", "замерено", "замерены", "замерян", "замеряна", "замеряно", "замеряны", "заметан", "заметана", "заметано", "заметаны", "заметен", "заметена", "заметено", "заметены", "замечен", "замечена", "замечено", "замечены", "замешан", "замешана", "замешано", "замешаны", "замешен", "замешена", "замешено", "замешены", "замещен", "замещена", "замещено", "замещены", "заминирован", "заминирована", "заминировано", "заминированы", "замкнут", "замкнута", "замкнуто", "замкнуты", "замолвлен", "замолвлена", "замолвлено", "замолвлены", "замолчан", "замолчана", "замолчано", "замолчаны", "замордован", "замордована", "замордовано", "замордованы", "заморен", "заморена", "заморено", "заморены", "заморожен", "заморожена", "заморожено", "заморожены", "заморочен", "заморочена", "заморочено", "заморочены", "замотан", "замотана", "замотано", "замотаны", "замочен", "замочена", "замочено", "замочены", "замурован", "замурована", "замуровано", "замурованы", "замусолен", "замусолена", "замусолено", "замусолены", "замутнен", "замутнена", "замутнено", "замутнены", "замучан", "замучана", "замучано", "замучаны", "замучен", "замучена", "замучено", "замучены", "замыкан", "замыкана", "замыкано", "замыканы", "замыт", "замыта", "замыто", "замыты", "замыщлен", "замыщлена", "замыщлено", "замыщлены", "замят", "замята", "замято", "замяты", "занавешен", "занавешена", "занавешено", "занавешены", "занесен", "занесена", "занесено", "занесены", "занижен", "занижена", "занижено", "занижены", "заношен", "заношена", "заношено", "заношены", "занят", "занята", "занято", "заняты", "заострен", "заострена", "заострено", "заострены", "запакован", "запакована", "запаковано", "запакованы", "запален", "запалена", "запалено", "запалены", "запасен", "запасена", "запасено", "запасены", "запатентован", "запатентована", "запатентовано", "запатентованы", "запахнут", "запахнута", "запахнуто", "запахнуты", "запачкан", "запачкана", "запачкано", "запачканы", "запаян", "запаяна", "запаяно", "запаяны", "запеленан", "запеленана", "запеленано", "запеленаны", "запеленгован", "запеленгована", "запеленговано", "запеленгованы", "заперт", "заперта", "заперто", "заперты", "запечатан", "запечатана", "запечатано", "запечатаны", "запечатлен", "запечатлена", "запечатлено", "запечатлены", "запечен", "запечена", "запечено", "запечены", "записан", "записана", "записано", "записаны", "запит", "запита", "запито", "запиты", "запихан", "запихана", "запихано", "запиханы", "запихнут", "запихнута", "запихнуто", "запихнуты", "запланирован", "запланирована", "запланировано", "запланированы", "заплатан", "заплатана", "заплатано", "заплатаны", "заплачен", "заплачена", "заплачено", "заплачены", "заплеван", "заплевана", "заплевано", "заплеваны", "заплетен", "заплетена", "заплетено", "заплетены", "запломбирован", "запломбирована", "запломбировано", "запломбированы", "заподозрен", "заподозрена", "заподозрено", "заподозрены", "заполнен", "заполнена", "заполнено", "заполнены", "заполонен", "заполонена", "заполонено", "заполонены", "заполучен", "заполучена", "заполучено", "заполучены", "запомнен", "запомнена", "запомнено", "запомнены", "запорот", "запорота", "запорото", "запороты", "запорошен", "запорошена", "запорошено", "запорошены", "заправлен", "заправлена", "заправлено", "заправлены", "запрещен", "запрещена", "запрещено", "запрещены", "запримечен", "запримечена", "запримечено", "запримечены", "запрограммирован", "запрограммирована", "запрограммировано", "запрограммированы", "запроектирован", "запроектирована", "запроектировано", "запроектированы", "запрокинут", "запрокинута", "запрокинуто", "запрокинуты", "запротоколирован", "запротоколирована", "запротоколировано", "запротоколированы", "запрошен", "запрошена", "запрошено", "запрошены", "запружен", "запружена", "запружено", "запружены", "запряжен", "запряжена", "запряжено", "запряжены", "запрятан", "запрятана", "запрятано", "запрятаны", "запуган", "запугана", "запугано", "запуганы", "запудрен", "запудрена", "запудрено", "запудрены", "запутан", "запутана", "запутано", "запутаны", "запущен", "запущена", "запущено", "запущены", "запылен", "запылена", "запылено", "запылены", "запятнан", "запятнана", "запятнано", "запятнаны", "заработан", "заработана", "заработано", "заработаны", "заражен", "заражена", "заражено", "заражены", "зарегистрирован", "зарегистрирована", "зарегистрировано", "зарегистрированы", "зарезан", "зарезана", "зарезано", "зарезаны", "зарезервирован", "зарезервирована", "зарезервировано", "зарезервированы", "зарекомендован", "зарекомендована", "зарекомендовано", "зарекомендованы", "зарешечен", "зарешечена", "зарешечено", "зарешечены", "зарисован", "зарисована", "зарисовано", "зарисованы", "зарифмован", "зарифмована", "зарифмовано", "зарифмованы", "зарублен", "зарублена", "зарублено", "зарублены", "зарыт", "зарыта", "зарыто", "зарыты", "заряжен", "заряжена", "заряжено", "заряжены", "засажен", "засажена", "засажено", "засажены", "засахарен", "засахарена", "засахарено", "засахарены", "засвечен", "засвечена", "засвечено", "засвечены", "засвидетельствован", "засвидетельствована", "засвидетельствовано", "засвидетельствованы", "засекречен", "засекречена", "засекречено", "засекречены", "заселен", "заселена", "заселено", "заселены", "засечен", "засечена", "засечено", "засечены", "засеян", "засеяна", "засеяно", "засеяны", "засижен", "засижена", "засижено", "засижены", "заскребен", "заскребена", "заскребено", "заскребены", "заслан", "заслана", "заслано", "засланы", "заслонен", "заслонена", "заслонено", "заслонены", "заслужен", "заслужена", "заслужено", "заслужены", "заслушан", "заслушана", "заслушано", "заслушаны", "заслышан", "заслышана", "заслышано", "заслышаны", "засмеян", "засмеяна", "засмеяно", "засмеяны", "заснят", "заснята", "заснято", "засняты", "засолен", "засолена", "засолено", "засолены", "засорен", "засорена", "засорено", "засорены", "засосан", "засосана", "засосано", "засосаны", "заспиртован", "заспиртована", "заспиртовано", "заспиртованы", "заставлен", "заставлена", "заставлено", "заставлены", "застазастат", "застазастата", "застазастато", "застазастаты", "застегнут", "застегнута", "застегнуто", "застегнуты", "застелен", "застелена", "застелено", "застелены", "застигнут", "застигнута", "застигнуто", "застигнуты", "застиран", "застирана", "застирано", "застираны", "застолблен", "застолблена", "застолблено", "застолблены", "застопорен", "застопорена", "застопорено", "застопорены", "застрахован", "застрахована", "застраховано", "застрахованы", "застрелен", "застрелена", "застрелено", "застрелены", "застроен", "застроена", "застроено", "застроены", "застрочен", "застрочена", "застрочено", "застрочены", "застужен", "застужена", "застужено", "застужены", "застукан", "застукана", "застукано", "застуканы", "заступлен", "заступлена", "заступлено", "заступлены", "засужен", "засужена", "засужено", "засужены", "засунут", "засунута", "засунуто", "засунуты", "засучен", "засучена", "засучено", "засучены", "засушен", "засушена", "засушено", "засушены", "засчитан", "засчитана", "засчитано", "засчитаны", "затаен", "затаена", "затаено", "затаены", "затаскан", "затаскана", "затаскано", "затасканы", "затащен", "затащена", "затащено", "затащены", "затворен", "затворена", "затворено", "затворены", "затемнен", "затемнена", "затемнено", "затемнены", "затенен", "затенена", "затенено", "затенены", "затерт", "затерта", "затерто", "затерты", "затерян", "затеряна", "затеряно", "затеряны", "затеян", "затеяна", "затеяно", "затеяны", "заткнут", "заткнута", "заткнуто", "заткнуты", "затмлен", "затмлена", "затмлено", "затмлены", "затолкан", "затолкана", "затолкано", "затолканы", "затоплен", "затоплена", "затоплено", "затоплены", "затоптан", "затоптана", "затоптано", "затоптаны", "заторможен", "заторможена", "заторможено", "заторможены", "затороплен", "затороплена", "затороплено", "затороплены", "заточен", "заточена", "заточено", "заточены", "затошнен", "затошнена", "затошнено", "затошнены", "затравлен", "затравлена", "затравлено", "затравлены", "затрачен", "затрачена", "затрачено", "затрачены", "затребован", "затребована", "затребовано", "затребованы", "затронут", "затронута", "затронуто", "затронуты", "затруднен", "затруднена", "затруднено", "затруднены", "затуманен", "затуманена", "затуманено", "затуманены", "затушеван", "затушевана", "затушевано", "затушеваны", "затушен", "затушена", "затушено", "затушены", "затыкан", "затыкана", "затыкано", "затыканы", "затянут", "затянута", "затянуто", "затянуты", "заужен", "заужена", "заужено", "заужены", "заучен", "заучена", "заучено", "заучены", "зафиксирован", "зафиксирована", "зафиксировано", "зафиксированы", "зафрахтован", "зафрахтована", "зафрахтовано", "зафрахтованы", "захвачен", "захвачена", "захвачено", "захвачены", "захламлен", "захламлена", "захламлено", "захламлены", "захлестнут", "захлестнута", "захлестнуто", "захлестнуты", "захлопнут", "захлопнута", "захлопнуто", "захлопнуты", "захожен", "захожена", "захожено", "захожены", "захоронен", "захоронена", "захоронено", "захоронены", "зацеплен", "зацеплена", "зацеплено", "зацеплены", "зачарована", "зачаровано", "зачарованы", "зачат", "зачата", "зачато", "зачаты", "зачеркнут", "зачеркнута", "зачеркнуто", "зачеркнуты", "зачерпнут", "зачерпнута", "зачерпнуто", "зачерпнуты", "зачесан", "зачесана", "зачесано", "зачесаны", "зачехлен", "зачехлена", "зачехлено", "зачехлены", "зачислен", "зачислена", "зачислено", "зачислены", "зачитан", "зачитана", "зачитано", "зачитаны", "зачищен", "зачищена", "зачищено", "зачищены", "зачтен", "зачтена", "зачтено", "зачтены", "зашаркан", "зашаркана", "зашаркано", "зашарканы", "зашвырнут", "зашвырнута", "зашвырнуто", "зашвырнуты", "зашевелен", "зашевелена", "зашевелено", "зашевелены", "зашептан", "зашептана", "зашептано", "зашептаны", "зашит", "зашита", "зашито", "зашиты", "зашифрована", "зашифровано", "зашифрованы", "зашнурован", "зашнурована", "зашнуровано", "зашнурованы", "заштопан", "заштопана", "заштопано", "заштопаны", "зашторен", "зашторена", "зашторено", "зашторены", "заштрихован", "заштрихована", "заштриховано", "заштрихованы", "защелкнут", "защелкнута", "защелкнуто", "защелкнуты", "защемлен", "защемлена", "защемлено", "защемлены", "защипан", "защипана", "защипано", "защипаны", "защищен", "защищена", "защищено", "защищены", "заявлен", "заявлена", "заявлено", "заявлены", "звезданут", "звезданута", "звездануто", "звездануты", "идеализирован", "идеализирована", "идеализировано", "идеализированы", "идентифицирован", "идентифицирована", "идентифицировано", "идентифицированы", "избавлен", "избавлена", "избавлено", "избавлены", "избалован", "избалована", "избаловано", "избалованы", "избит", "избита", "избито", "избиты", "изборозжден", "изборозждена", "изборозждено", "изборозждены", "избран", "избрана", "избрано", "избраны", "изваян", "изваяна", "изваяно", "изваяны", "изведан", "изведана", "изведано", "изведаны", "извергнут", "извергнута", "извергнуто", "извергнуты", "извещен", "извещена", "извещено", "извещены", "извинен", "извинена", "извинено", "извинены", "извлечен", "извлечена", "извлечено", "извлечены", "извращен", "извращена", "извращено", "извращены", "изгажен", "изгажена", "изгажено", "изгажены", "изгнан", "изгнана", "изгнано", "изгнаны", "изготовлен", "изготовлена", "изготовлено", "изготовлены", "изгрызен", "изгрызена", "изгрызено", "изгрызены", "издерган", "издергана", "издергано", "издерганы", "изжарен", "изжарена", "изжарено", "изжарены", "изжит", "изжита", "изжито", "изжиты", "излажен", "излажена", "излажено", "излажены", "излечен", "излечена", "излечено", "излечены", "излит", "излита", "излито", "излиты", "изловлен", "изловлена", "изловлено", "изловлены", "изложен", "изложена", "изложено", "изложены", "изломан", "изломана", "изломано", "изломаны", "измазан", "измазана", "измазано", "измазаны", "измельчен", "измельчена", "измельчено", "измельчены", "изменен", "изменена", "изменено", "изменены", "измерен", "измерена", "измерено", "измерены", "измерян", "измеряна", "измеряно", "измеряны", "измотан", "измотана", "измотано", "измотаны", "измочален", "измочалена", "измочалено", "измочалены", "измучен", "измучена", "измучено", "измучены", "измышлен", "измышлена", "измышлено", "измышлены", "измят", "измята", "измято", "измяты", "изнасилован", "изнасилована", "изнасиловано", "изнасилованы", "изничтожен", "изничтожена", "изничтожено", "изничтожены", "изношен", "изношена", "изношено", "изношены", "изнурен", "изнурена", "изнурено", "изнурены", "изобличен", "изобличена", "изобличено", "изобличены", "изображен", "изображена", "изображено", "изображены", "изобретен", "изобретена", "изобретено", "изобретены", "изодран", "изодрана", "изодрано", "изодраны", "изолирован", "изолирована", "изолировано", "изолированы", "изорван", "изорвана", "изорвано", "изорваны", "изранен", "изранена", "изранено", "изранены", "израсходован", "израсходована", "израсходовано", "израсходованы", "изрезан", "изрезана", "изрезано", "изрезаны", "изречен", "изречена", "изречено", "изречены", "изрешечен", "изрешечена", "изрешечено", "изрешечены", "изрисован", "изрисована", "изрисовано", "изрисованы", "изрублен", "изрублена", "изрублено", "изрублены", "изрыт", "изрыта", "изрыто", "изрыты", "изувечен", "изувечена", "изувечено", "изувечены", "изукрашен", "изукрашена", "изукрашено", "изукрашены", "изумлен", "изумлена", "изумлено", "изумлены", "изуродован", "изуродована", "изуродовано", "изуродованы", "изучен", "изучена", "изучено", "изучены", "изъезжен", "изъезжена", "изъезжено", "изъезжены", "изъявлен", "изъявлена", "изъявлено", "изъявлены", "изъят", "изъята", "изъято", "изъяты", "изыскан", "изыскана", "изыскано", "изысканы", "иллюстрирован", "иллюстрирована", "иллюстрировано", "иллюстрированы", "иммобилизован", "иммобилизована", "иммобилизовано", "иммобилизованы", "иммунизирован", "иммунизирована", "иммунизировано", "иммунизированы", "импортирован", "импортирована", "импортировано", "импортированы", "инвестирован", "инвестирована", "инвестировано", "инвестированы", "индивидуализирован", "индивидуализирована", "индивидуализировано", "индивидуализированы", "индуцирован", "индуцирована", "индуцировано", "индуцированы", "инкорпорирован", "инкорпорирована", "инкорпорировано", "инкорпорированы", "инкриминирован", "инкриминирована", "инкриминировано", "инкриминированы", "инкрустирован", "инкрустирована", "инкрустировано", "инкрустированы", "инкубирован", "инкубирована", "инкубировано", "инкубированы", "инспирирован", "инспирирована", "инспирировано", "инспирированы", "инсценирован", "инсценирована", "инсценировано", "инсценированы", "интегрирован", "интегрирована", "интегрировано", "интегрированы", "интенсифицирован", "интенсифицирована", "интенсифицировано", "интенсифицированы", "интервьюирован", "интервьюирована", "интервьюировано", "интервьюированы", "интернирован", "интернирована", "интернировано", "интернированы", "интерпретирован", "интерпретирована", "интерпретировано", "интерпретированы", "интонирован", "интонирована", "интонировано", "интонированы", "инфицирован", "инфицирована", "инфицировано", "инфицированы", "информирован", "информирована", "информировано", "информированы", "искажен", "искажена", "искажено", "искажены", "искалечен", "искалечена", "искалечено", "искалечены", "исключен", "исключена", "исключено", "исключены", "исковеркан", "исковеркана", "исковеркано", "исковерканы", "исколот", "исколота", "исколото", "исколоты", "искорежен", "искорежена", "искорежено", "искорежены", "искоренен", "искоренена", "искоренено", "искоренены", "искривлен", "искривлена", "искривлено", "искривлены", "искромсан", "искромсана", "искромсано", "искромсаны", "искрошен", "искрошена", "искрошено", "искрошены", "искупан", "искупана", "искупано", "искупаны", "искуплен", "искуплена", "искуплено", "искуплены", "искусан", "искусана", "искусано", "искусаны", "искушен", "искушена", "искушено", "искушены", "испачкан", "испачкана", "испачкано", "испачканы", "испепелен", "испепелена", "испепелено", "испепелены", "испечен", "испечена", "испечено", "испечены", "испещрен", "испещрена", "испещрено", "испещрены", "исписан", "исписана", "исписано", "исписаны", "испит", "испита", "испито", "испиты", "исповедан", "исповедана", "исповедано", "исповеданы", "исповедован", "исповедована", "исповедовано", "исповедованы", "испоганен", "испоганена", "испоганено", "испоганены", "исполнен", "исполнена", "исполнено", "исполнены", "исполосован", "исполосована", "исполосовано", "исполосованы", "использован", "использована", "использовано", "использованы", "испорчен", "испорчена", "испорчено", "испорчены", "исправлен", "исправлена", "исправлено", "исправлены", "испробован", "испробована", "испробовано", "испробованы", "испрошен", "испрошена", "испрошено", "испрошены", "испуган", "испугана", "испугано", "испуганы", "испущен", "испущена", "испущено", "испущены", "испытан", "испытана", "испытано", "испытаны", "иссечен", "иссечена", "иссечено", "иссечены", "исследован", "исследована", "исследовано", "исследованы", "иссушен", "иссушена", "иссушено", "иссушены", "истерзан", "истерзана", "истерзано", "истерзаны", "истерт", "истерта", "истерто", "истерты", "истолкован", "истолкована", "истолковано", "истолкованы", "истончен", "истончена", "истончено", "истончены", "истоплен", "истоплена", "истоплено", "истоплены", "истоптан", "истоптана", "истоптано", "истоптаны", "исторгнут", "исторгнута", "исторгнуто", "исторгнуты", "источен", "источена", "источено", "источены", "истощен", "истощена", "истощено", "истощены", "истрачен", "истрачена", "истрачено", "истрачены", "истреблен", "истреблена", "истреблено", "истреблены", "истребован", "истребована", "истребовано", "истребованы", "истрепан", "истрепана", "истрепано", "истрепаны", "исхожен", "исхожена", "исхожено", "исхожены", "исцарапан", "исцарапана", "исцарапано", "исцарапаны", "исцелен", "исцелена", "исцелено", "исцелены", "исчеркан", "исчеркана", "исчеркано", "исчерканы", "исчерпан", "исчерпана", "исчерпано", "исчерпаны", "исчислен", "исчислена", "исчислено", "исчислены", "казнен", "казнена", "казнено", "казнены", "канонизирован", "канонизирована", "канонизировано", "канонизированы", "капитализирован", "капитализирована", "капитализировано", "капитализированы", "кастрирован", "кастрирована", "кастрировано", "кастрированы", "катализирован", "катализирована", "катализировано", "катализированы", "катапультирован", "катапультирована", "катапультировано", "катапультированы", "квалифицирован", "квалифицирована", "квалифицировано", "квалифицированы", "кинут", "кинута", "кинуто", "кинуты", "классифицирован", "классифицирована", "классифицировано", "классифицированы", "кликнут", "кликнута", "кликнуто", "кликнуты", "клюнут", "клюнута", "клюнуто", "клюнуты", "ковырнут", "ковырнута", "ковырнуто", "ковырнуты", "кодирован", "кодирована", "кодировано", "кодированы", "кокнут", "кокнута", "кокнуто", "кокнуты", "командирован", "командирована", "командировано", "командированы", "комиссован", "комиссована", "комиссовано", "комиссованы", "компенсирован", "компенсирована", "компенсировано", "компенсированы", "конвертирован", "конвертирована", "конвертировано", "конвертированы", "конденсирован", "конденсирована", "конденсировано", "конденсированы", "кондиционирован", "кондиционирована", "кондиционировано", "кондиционированы", "конкретизирован", "конкретизирована", "конкретизировано", "конкретизированы", "консолидирован", "консолидирована", "консолидировано", "консолидированы", "констатирован", "констатирована", "констатировано", "констатированы", "конституирован", "конституирована", "конституировано", "конституированы", "контратакован", "контратакована", "контратаковано", "контратакованы", "контужен", "контужена", "контужено", "контужены", "конфискован", "конфискована", "конфисковано", "конфискованы", "кончен", "кончена", "кончено", "кончены", "координирован", "координирована", "координировано", "координированы", "коронован", "коронована", "короновано", "коронованы", "коррумпирована", "коррумпировано", "коррумпированы", "кредитован", "кредитована", "кредитовано", "кредитованы", "кремирован", "кремирована", "кремировано", "кремированы", "крещен", "крещена", "крещено", "крещены", "куплен", "куплена", "куплено", "куплены", "курнут", "курнута", "курнуто", "курнуты", "куснут", "куснута", "куснуто", "куснуты", "легализован", "легализована", "легализовано", "легализованы", "легирован", "легирована", "легировано", "легированы", "ликвидирован", "ликвидирована", "ликвидировано", "ликвидированы", "лимитирован", "лимитирована", "лимитировано", "лимитированы", "лишен", "лишена", "лишено", "лишены", "лоббирован", "лоббирована", "лоббировано", "лоббированы", "локализован", "локализована", "локализовано", "локализованы", "лягнут", "лягнута", "лягнуто", "лягнуты", "маркирован", "маркирована", "маркировано", "маркированы", "массирован", "массирована", "массировано", "массированы", "материализован", "материализована", "материализовано", "материализованы", "механизирован", "механизирована", "механизировано", "механизированы", "минимизирован", "минимизирована", "минимизировано", "минимизированы", "минирован", "минирована", "минировано", "минированы", "минован", "минована", "миновано", "минованы", "мистифицирован", "мистифицирована", "мистифицировано", "мистифицированы", "мобилизован", "мобилизована", "мобилизовано", "мобилизованы", "моделирован", "моделирована", "моделировано", "моделированы", "модернизирован", "модернизирована", "модернизировано", "модернизированы", "модифицирован", "модифицирована", "модифицировано", "модифицированы", "монополизирован", "монополизирована", "монополизировано", "монополизированы", "мотивирована", "мотивировано", "мотивированы", "мотнут", "мотнута", "мотнуто", "мотнуты", "набеган", "набегана", "набегано", "набеганы", "набит", "набита", "набито", "набиты", "наболтан", "наболтана", "наболтано", "наболтаны", "набран", "набрана", "набрано", "набраны", "набросан", "набросана", "набросано", "набросаны", "наброшен", "наброшена", "наброшено", "наброшены", "навален", "навалена", "навалено", "навалены", "наварен", "наварена", "наварено", "наварены", "наведен", "наведена", "наведено", "наведены", "навезен", "навезена", "навезено", "навезены", "навернут", "навернута", "навернуто", "навернуты", "наверстан", "наверстана", "наверстано", "наверстаны", "навешан", "навешана", "навешано", "навешаны", "навешен", "навешена", "навешено", "навешены", "навещен", "навещена", "навещено", "навещены", "навеян", "навеяна", "навеяно", "навеяны", "навлечен", "навлечена", "навлечено", "навлечены", "наводнен", "наводнена", "наводнено", "наводнены", "наворован", "наворована", "наворовано", "наворованы", "наворочен", "наворочена", "наворочено", "наворочены", "навострен", "навострена", "навострено", "навострены", "навьючен", "навьючена", "навьючено", "навьючены", "навязан", "навязана", "навязано", "навязаны", "нагадан", "нагадана", "нагадано", "нагаданы", "нагажен", "нагажена", "нагажено", "нагажены", "нагнан", "нагнана", "нагнано", "нагнаны", "нагнут", "нагнута", "нагнуто", "нагнуты", "наговорен", "наговорена", "наговорено", "наговорены", "нагонян", "нагоняна", "нагоняно", "нагоняны", "наготовлен", "наготовлена", "наготовлено", "наготовлены", "награблен", "награблена", "награблено", "награблены", "награжден", "награждена", "награждено", "награждены", "нагрет", "нагрета", "нагрето", "нагреты", "нагромозжден", "нагромозждена", "нагромозждено", "нагромозждены", "нагружен", "нагружена", "нагружено", "нагружены", "нагулян", "нагуляна", "нагуляно", "нагуляны", "надавлен", "надавлена", "надавлено", "надавлены", "надвинут", "надвинута", "надвинуто", "надвинуты", "наделан", "наделана", "наделано", "наделаны", "надерган", "надергана", "надергано", "надерганы", "надет", "надета", "надето", "надеты", "надкушен", "надкушена", "надкушено", "надкушены", "надломлен", "надломлена", "надломлено", "надломлены", "надоен", "надоена", "надоено", "надоены", "надорван", "надорвана", "надорвано", "надорваны", "надоумлен", "надоумлена", "надоумлено", "надоумлены", "надписан", "надписана", "надписано", "надписаны", "надраен", "надраена", "надраено", "надраены", "надран", "надрана", "надрано", "надраны", "надрезан", "надрезана", "надрезано", "надрезаны", "надстроен", "надстроена", "надстроено", "надстроены", "надуман", "надумана", "надумано", "надуманы", "надут", "надута", "надуто", "надуты", "надушен", "надушена", "надушено", "надушены", "нажарен", "нажарена", "нажарено", "нажарены", "нажат", "нажата", "нажато", "нажаты", "нажит", "нажита", "нажито", "нажиты", "назван", "названа", "названо", "названы", "назначен", "назначена", "назначено", "назначены", "наигран", "наиграна", "наиграно", "наиграны", "наказан", "наказана", "наказано", "наказаны", "накален", "накалена", "накалено", "накалены", "накапан", "накапана", "накапано", "накапаны", "накаркан", "накаркана", "накаркано", "накарканы", "накатан", "накатана", "накатано", "накатаны", "накачан", "накачана", "накачано", "накачаны", "накачен", "накачена", "накачено", "накачены", "накидан", "накидана", "накидано", "накиданы", "накинут", "накинута", "накинуто", "накинуты", "наклеен", "наклеена", "наклеено", "наклеены", "накликан", "накликана", "накликано", "накликаны", "наклонен", "наклонена", "наклонено", "наклонены", "наковырян", "наковыряна", "наковыряно", "наковыряны", "наколот", "наколота", "наколото", "наколоты", "накопан", "накопана", "накопано", "накопаны", "накоплен", "накоплена", "накоплено", "накоплены", "накормлен", "накормлена", "накормлено", "накормлены", "накостылян", "накостыляна", "накостыляно", "накостыляны", "накошен", "накошена", "накошено", "накошены", "накрахмален", "накрахмалена", "накрахмалено", "накрахмалены", "накрашен", "накрашена", "накрашено", "накрашены", "накрошен", "накрошена", "накрошено", "накрошены", "накручен", "накручена", "накручено", "накручены", "накрыт", "накрыта", "накрыто", "накрыты", "накуплен", "накуплена", "накуплено", "накуплены", "накурен", "накурена", "накурено", "накурены", "налажен", "налажена", "налажено", "налажены", "налеплен", "налеплена", "налеплено", "налеплены", "налетан", "налетана", "налетано", "налетаны", "налит", "налита", "налито", "налиты", "наловлен", "наловлена", "наловлено", "наловлены", "наложен", "наложена", "наложено", "наложены", "наломан", "наломана", "наломано", "наломаны", "намагничен", "намагничена", "намагничено", "намагничены", "намазан", "намазана", "намазано", "намазаны", "намалеван", "намалевана", "намалевано", "намалеваны", "наметан", "наметана", "наметано", "наметаны", "наметен", "наметена", "наметено", "наметены", "намечен", "намечена", "намечено", "намечены", "намешан", "намешана", "намешано", "намешаны", "намозолен", "намозолена", "намозолено", "намозолены", "наморщен", "наморщена", "наморщено", "наморщены", "намотан", "намотана", "намотано", "намотаны", "намочен", "намочена", "намочено", "намочены", "намылен", "намылена", "намылено", "намылены", "намыт", "намыта", "намыто", "намыты", "намят", "намята", "намято", "намяты", "нанесен", "нанесена", "нанесено", "нанесены", "нанизан", "нанизана", "нанизано", "нанизаны", "наношен", "наношена", "наношено", "наношены", "нанят", "нанята", "нанято", "наняты", "напет", "напета", "напето", "напеты", "напечатан", "напечатана", "напечатано", "напечатаны", "напечен", "напечена", "напечено", "напечены", "напилен", "напилена", "напилено", "напилены", "написан", "написана", "написано", "написаны", "напитан", "напитана", "напитано", "напитаны", "напихан", "напихана", "напихано", "напиханы", "напичкан", "напичкана", "напичкано", "напичканы", "наплакан", "наплакана", "наплакано", "наплаканы", "наплеван", "наплевана", "наплевано", "наплеваны", "наплетен", "наплетена", "наплетено", "наплетены", "напложен", "напложена", "напложено", "напложены", "напоен", "напоена", "напоено", "напоены", "наползан", "наползана", "наползано", "наползаны", "наполнен", "наполнена", "наполнено", "наполнены", "напомажен", "напомажена", "напомажено", "напомажены", "напомнен", "напомнена", "напомнено", "напомнены", "напорчен", "напорчена", "напорчено", "напорчены", "направлен", "направлена", "направлено", "направлены", "напророчен", "напророчена", "напророчено", "напророчены", "напряжен", "напряжена", "напряжено", "напряжены", "напуган", "напугана", "напугано", "напуганы", "напудрен", "напудрена", "напудрено", "напудрены", "напутан", "напутана", "напутано", "напутаны", "напутствован", "напутствована", "напутствовано", "напутствованы", "напущен", "напущена", "напущено", "напущены", "напялен", "напялена", "напялено", "напялены", "наработан", "наработана", "наработано", "наработаны", "наращен", "наращена", "наращено", "наращены", "нарезан", "нарезана", "нарезано", "нарезаны", "наречен", "наречена", "наречено", "наречены", "нарисован", "нарисована", "нарисовано", "нарисованы", "нарожден", "нарождена", "нарождено", "нарождены", "нарублен", "нарублена", "нарублено", "нарублены", "нарушен", "нарушена", "нарушено", "нарушены", "нарыт", "нарыта", "нарыто", "нарыты", "наряжен", "наряжена", "наряжено", "наряжены", "насажден", "насаждена", "насаждено", "насаждены", "насажен", "насажена", "насажено", "насажены", "населен", "населена", "населено", "населены", "насижен", "насижена", "насижено", "насижены", "наскребен", "наскребена", "наскребено", "наскребены", "наслан", "наслана", "наслано", "насланы", "наследован", "наследована", "наследовано", "наследованы", "насмешен", "насмешена", "насмешено", "насмешены", "насобиран", "насобирана", "насобирано", "насобираны", "насован", "насована", "насовано", "насованы", "насолен", "насолена", "насолено", "насолены", "наставлен", "наставлена", "наставлено", "наставлены", "настелен", "настелена", "настелено", "настелены", "настигнут", "настигнута", "настигнуто", "настигнуты", "настоян", "настояна", "настояно", "настояны", "настроен", "настроена", "настроено", "настроены", "настрочен", "настрочена", "настрочено", "настрочены", "насуплен", "насуплена", "насуплено", "насуплены", "насчитан", "насчитана", "насчитано", "насчитаны", "насыщен", "насыщена", "насыщено", "насыщены", "натаскан", "натаскана", "натаскано", "натасканы", "натерт", "натерта", "натерто", "натерты", "натолкнут", "натолкнута", "натолкнуто", "натолкнуты", "натоплен", "натоплена", "натоплено", "натоплены", "натоптан", "натоптана", "натоптано", "натоптаны", "наточен", "наточена", "наточено", "наточены", "натравлен", "натравлена", "натравлено", "натравлены", "натренирован", "натренирована", "натренировано", "натренированы", "натружен", "натружена", "натружено", "натружены", "натыкан", "натыкана", "натыкано", "натыканы", "натянут", "натянута", "натянуто", "натянуты", "научен", "научена", "научено", "научены", "нафарширован", "нафарширована", "нафаршировано", "нафаршированы", "нахлобучен", "нахлобучена", "нахлобучено", "нахлобучены", "нахмурен", "нахмурена", "нахмурено", "нахмурены", "нахожен", "нахожена", "нахожено", "нахожены", "нахохлен", "нахохлена", "нахохлено", "нахохлены", "нацарапан", "нацарапана", "нацарапано", "нацарапаны", "нацежен", "нацежена", "нацежено", "нацежены", "нацелен", "нацелена", "нацелено", "нацелены", "нацеплен", "нацеплена", "нацеплено", "нацеплены", "национализирован", "национализирована", "национализировано", "национализированы", "начат", "начата", "начато", "начаты", "начертан", "начертана", "начертано", "начертаны", "начерчен", "начерчена", "начерчено", "начерчены", "начинен", "начинена", "начинено", "начинены", "начислен", "начислена", "начислено", "начислены", "начищен", "начищена", "начищено", "начищены", "нашарен", "нашарена", "нашарено", "нашарены", "нашептан", "нашептана", "нашептано", "нашептаны", "нашинкован", "нашинкована", "нашинковано", "нашинкованы", "нашит", "нашита", "нашито", "нашиты", "нашпигован", "нашпигована", "нашпиговано", "нашпигованы", "нащупан", "нащупана", "нащупано", "нащупаны", "наэлектризован", "наэлектризована", "наэлектризовано", "наэлектризованы", "невзлюблен", "невзлюблена", "невзлюблено", "невзлюблены", "недогляжен", "недогляжена", "недогляжено", "недогляжены", "недоговорен", "недоговорена", "недоговорено", "недоговорены", "недоделан", "недоделана", "недоделано", "недоделаны", "недооценен", "недооценена", "недооценено", "недооценены", "недопит", "недопита", "недопито", "недопиты", "недоплачен", "недоплачена", "недоплачено", "недоплачены", "недополучен", "недополучена", "недополучено", "недополучены", "недопонят", "недопонята", "недопонято", "недопоняты", "недосказан", "недосказана", "недосказано", "недосказаны", "недослышан", "недослышана", "недослышано", "недослышаны", "недосмотрен", "недосмотрена", "недосмотрено", "недосмотрены", "опосредован", "опосредована", "опосредовано", "опосредованы", "оптимизирован", "оптимизирована", "оптимизировано", "оптимизированы", "отслежен", "отслежена", "отслежено", "отслежены", "перечеркнут", "перечеркнута", "перечеркнуто", "перечеркнуты", "перечислен", "перечислена", "перечислено", "перечислены", "перечитан", "перечитана", "перечитано", "перечитаны", "перечтен", "перечтена", "перечтено", "перечтены", "перешит", "перешита", "перешито", "перешиты", "персонифицирован", "персонифицирована", "персонифицировано", "персонифицированы", "пикирован", "пикирована", "пикировано", "пикированы", "пленен", "пленена", "пленено", "пленены", "плеснут", "плеснута", "плеснуто", "плеснуты", "пнут", "пнута", "пнуто", "пнуты", "побалован", "побалована", "побаловано", "побалованы", "побежден", "побеждена", "побеждено", "побеждены", "побелен", "побелена", "побелено", "побелены", "побережен", "побережена", "побережено", "побережены", "побеспокоен", "побеспокоена", "побеспокоено", "побеспокоены", "побит", "побита", "побито", "побиты", "поблагодарен", "поблагодарена", "поблагодарено", "поблагодарены", "побрит", "побрита", "побрито", "побриты", "побросан", "побросана", "побросано", "побросаны", "побужден", "побуждена", "побуждено", "побуждены", "побужен", "побужена", "побужено", "побужены", "повален", "повалена", "повалено", "повалены", "поведан", "поведана", "поведано", "поведаны", "поведен", "поведена", "поведено", "поведены", "повезен", "повезена", "повезено", "повезены", "повенчан", "повенчана", "повенчано", "повенчаны", "повергнут", "повергнута", "повергнуто", "повергнуты", "поверен", "поверена", "поверено", "поверены", "повернут", "повернута", "повернуто", "повернуты", "поверчен", "поверчена", "поверчено", "поверчены", "повешен", "повешена", "повешено", "повешены", "повеян", "повеяна", "повеяно", "повеяны", "повидан", "повидана", "повидано", "повиданы", "поврежден", "повреждена", "повреждено", "повреждены", "повторен", "повторена", "повторено", "повторены", "повышен", "повышена", "повышено", "повышены", "повязан", "повязана", "повязано", "повязаны", "погашен", "погашена", "погашено", "погашены", "поглажен", "поглажена", "поглажено", "поглажены", "поглощен", "поглощена", "поглощено", "поглощены", "погнут", "погнута", "погнуто", "погнуты", "пограблен", "пограблена", "пограблено", "пограблены", "погребен", "погребена", "погребено", "погребены", "погрет", "погрета", "погрето", "погреты", "погружен", "погружена", "погружено", "погружены", "погрызен", "погрызена", "погрызено", "погрызены", "погублен", "погублена", "погублено", "погублены", "подавлен", "подавлена", "подавлено", "подавлены", "подарен", "подарена", "подарено", "подарены", "подбит", "подбита", "подбито", "подбиты", "подбодрен", "подбодрена", "подбодрено", "подбодрены", "подброшен", "подброшена", "подброшено", "подброшены", "подвален", "подвалена", "подвалено", "подвалены", "подведен", "подведена", "подведено", "подведены", "подвезен", "подвезена", "подвезено", "подвезены", "подвергнут", "подвергнута", "подвергнуто", "подвергнуты", "подвернут", "подвернута", "подвернуто", "подвернуты", "подвешен", "подвешена", "подвешено", "подвешены", "подвигнут", "подвигнута", "подвигнуто", "подвигнуты", "подвинут", "подвинута", "подвинуто", "подвинуты", "подвязан", "подвязана", "подвязано", "подвязаны", "подгляжен", "подгляжена", "подгляжено", "подгляжены", "подговорен", "подговорена", "подговорено", "подговорены", "подготовлен", "подготовлена", "подготовлено", "подготовлены", "подделан", "подделана", "подделано", "подделаны", "поддержан", "поддержана", "поддержано", "поддержаны", "поддернут", "поддернута", "поддернуто", "поддернуты", "поддет", "поддета", "поддето", "поддеты", "поделен", "поделена", "поделено", "поделены", "подерган", "подергана", "подергано", "подерганы", "подержан", "подержана", "подержано", "подержаны", "подернут", "подернута", "подернуто", "подернуты", "поджарен", "поджарена", "поджарено", "поджарены", "поджат", "поджата", "поджато", "поджаты", "подзаработан", "подзаработана", "подзаработано", "подзаработаны", "подкараулен", "подкараулена", "подкараулено", "подкараулены", "подкачан", "подкачана", "подкачано", "подкачаны", "подкачен", "подкачена", "подкачено", "подкачены", "подкинут", "подкинута", "подкинуто", "подкинуты", "подклеен", "подклеена", "подклеено", "подклеены", "подключен", "подключена", "подключено", "подключены", "подкован", "подкована", "подковано", "подкованы", "подколот", "подколота", "подколото", "подколоты", "подкоплен", "подкоплена", "подкоплено", "подкоплены", "подкормлен", "подкормлена", "подкормлено", "подкормлены", "подкошен", "подкошена", "подкошено", "подкошены", "подкрашен", "подкрашена", "подкрашено", "подкрашены", "подкреплен", "подкреплена", "подкреплено", "подкреплены", "подкручен", "подкручена", "подкручено", "подкручены", "подкуплен", "подкуплена", "подкуплено", "подкуплены", "подлатан", "подлатана", "подлатано", "подлатаны", "подлечен", "подлечена", "подлечено", "подлечены", "подлит", "подлита", "подлито", "подлиты", "подловлен", "подловлена", "подловлено", "подловлены", "подложен", "подложена", "подложено", "подложены", "подмазан", "подмазана", "подмазано", "подмазаны", "подменен", "подменена", "подменено", "подменены", "подметан", "подметана", "подметано", "подметаны", "подметен", "подметена", "подметено", "подметены", "подмечен", "подмечена", "подмечено", "подмечены", "подмешан", "подмешана", "подмешано", "подмешаны", "подморожен", "подморожена", "подморожено", "подморожены", "подмочен", "подмочена", "подмочено", "подмочены", "подмыт", "подмыта", "подмыто", "подмыты", "подмят", "подмята", "подмято", "подмяты", "поднажат", "поднажата", "поднажато", "поднажаты", "поднесен", "поднесена", "поднесено", "поднесены", "подновлен", "подновлена", "подновлено", "подновлены", "подношен", "подношена", "подношено", "подношены", "поднят", "поднята", "поднято", "подняты", "подобран", "подобрана", "подобрано", "подобраны", "подогнан", "подогнана", "подогнано", "подогнаны", "подогнут", "подогнута", "подогнуто", "подогнуты", "подогрет", "подогрета", "подогрето", "подогреты", "пододвинут", "пододвинута", "пододвинуто", "пододвинуты", "подоен", "подоена", "подоено", "подоены", "подожжен", "подожжена", "подожжено", "подожжены", "подозван", "подозвана", "подозвано", "подозваны", "подорван", "подорвана", "подорвано", "подорваны", "подослан", "подослана", "подослано", "подосланы", "подоткнут", "подоткнута", "подоткнуто", "подоткнуты", "подпален", "подпалена", "подпалено", "подпалены", "подперт", "подперта", "подперто", "подперты", "подпилен", "подпилена", "подпилено", "подпилены", "подписан", "подписана", "подписано", "подписаны", "подпорчен", "подпорчена", "подпорчено", "подпорчены", "подпоясан", "подпоясана", "подпоясано", "подпоясаны", "подправлен", "подправлена", "подправлено", "подправлены", "подпущен", "подпущена", "подпущено", "подпущены", "подразделен", "подразделена", "подразделено", "подразделены", "подран", "подрана", "подрано", "подраны", "подрезан", "подрезана", "подрезано", "подрезаны", "подровнян", "подровняна", "подровняно", "подровняны", "подрублен", "подрублена", "подрублено", "подрублены", "подрулен", "подрулена", "подрулено", "подрулены", "подрумянен", "подрумянена", "подрумянено", "подрумянены", "подсажен", "подсажена", "подсажено", "подсажены", "подсвечен", "подсвечена", "подсвечено", "подсвечены", "подселен", "подселена", "подселено", "подселены", "подсечен", "подсечена", "подсечено", "подсечены", "подсказан", "подсказана", "подсказано", "подсказаны", "подслащен", "подслащена", "подслащено", "подслащены", "подслушан", "подслушана", "подслушано", "подслушаны", "подсмотрен", "подсмотрена", "подсмотрено", "подсмотрены", "подсоединен", "подсоединена", "подсоединено", "подсоединены", "подсолен", "подсолена", "подсолено", "подсолены", "подставлен", "подставлена", "подставлено", "подставлены", "подстегнут", "подстегнута", "подстегнуто", "подстегнуты", "подстелен", "подстелена", "подстелено", "подстелены", "подстережен", "подстережена", "подстережено", "подстережены", "подстрелен", "подстрелена", "подстрелено", "подстрелены", "подстрижен", "подстрижена", "подстрижено", "подстрижены", "подстроен", "подстроена", "подстроено", "подстроены", "подсунут", "подсунута", "подсунуто", "подсунуты", "подсушен", "подсушена", "подсушено", "подсушены", "подсчитан", "подсчитана", "подсчитано", "подсчитаны", "подтащен", "подтащена", "подтащено", "подтащены", "подтвержден", "подтверждена", "подтверждено", "подтверждены", "подтолкнут", "подтолкнута", "подтолкнуто", "подтолкнуты", "подточен", "подточена", "подточено", "подточены", "подтыкан", "подтыкана", "подтыкано", "подтыканы", "подтянут", "подтянута", "подтянуто", "подтянуты", "подучен", "подучена", "подучено", "подучены", "подхвачен", "подхвачена", "подхвачено", "подхвачены", "подцеплен", "подцеплена", "подцеплено", "подцеплены", "подчеркнут", "подчеркнута", "подчеркнуто", "подчеркнуты", "подчинен", "подчинена", "подчинено", "подчинены", "подчищен", "подчищена", "подчищено", "подчищены", "подшит", "подшита", "подшито", "подшиты", "подыгран", "подыграна", "подыграно", "подыграны", "подытожен", "подытожена", "подытожено", "подытожены", "пожалован", "пожалована", "пожаловано", "пожалованы", "пожарен", "пожарена", "пожарено", "пожарены", "пожат", "пожата", "пожато", "пожаты", "пожеван", "пожевана", "пожевано", "пожеваны", "пожертвован", "пожертвована", "пожертвовано", "пожертвованы", "пожран", "пожрана", "пожрано", "пожраны", "пожурен", "пожурена", "пожурено", "пожурены", "позабавлен", "позабавлена", "позабавлено", "позабавлены", "позаимствован", "позаимствована", "позаимствовано", "позаимствованы", "позван", "позвана", "позвано", "позваны", "позволен", "позволена", "позволено", "позволены", "поздравлен", "поздравлена", "поздравлено", "поздравлены", "позиционирован", "позиционирована", "позиционировано", "позиционированы", "познакомлен", "познакомлена", "познакомлено", "познакомлены", "познан", "познана", "познано", "познаны", "позолочен", "позолочена", "позолочено", "позолочены", "поигран", "поиграна", "поиграно", "поиграны", "поименован", "поименована", "поименовано", "поименованы", "пойман", "поймана", "поймано", "пойманы", "показан", "показана", "показано", "показаны", "покалечен", "покалечена", "покалечено", "покалечены", "покатан", "покатана", "покатано", "покатаны", "покачан", "покачана", "покачано", "покачаны", "покачен", "покачена", "покачено", "покачены", "покидан", "покидана", "покидано", "покиданы", "покинут", "покинута", "покинуто", "покинуты", "поклеван", "поклевана", "поклевано", "поклеваны", "поколебан", "поколебана", "поколебано", "поколебаны", "поколочен", "поколочена", "поколочено", "поколочены", "покончен", "покончена", "покончено", "покончены", "покорежен", "покорежена", "покорежено", "покорежены", "покорен", "покорена", "покорено", "покорены", "покормлен", "покормлена", "покормлено", "покормлены", "покороблен", "покороблена", "покороблено", "покороблены", "покошен", "покошена", "покошено", "покошены", "покрашен", "покрашена", "покрашено", "покрашены", "покривлен", "покривлена", "покривлено", "покривлены", "покритикован", "покритикована", "покритиковано", "покритикованы", "покрошен", "покрошена", "покрошено", "покрошены", "покружен", "покружена", "покружено", "покружены", "покручен", "покручена", "покручено", "покручены", "покрыт", "покрыта", "покрыто", "покрыты", "покупан", "покупана", "покупано", "покупаны", "покурен", "покурена", "покурено", "покурены", "покусан", "покусана", "покусано", "покусаны", "покушан", "покушана", "покушано", "покушаны", "полажен", "полажена", "полажено", "полажены", "полечен", "полечена", "полечено", "полечены", "полит", "полита", "полито", "политы", "половлен", "половлена", "половлено", "половлены", "положен", "положена", "положено", "положены", "поломан", "поломана", "поломано", "поломаны", "полоснут", "полоснута", "полоснуто", "полоснуты", "получен", "получена", "получено", "получены", "поляризован", "поляризована", "поляризовано", "поляризованы", "помазан", "помазана", "помазано", "помазаны", "помассирован", "помассирована", "помассировано", "помассированы", "поменян", "поменяна", "поменяно", "поменяны", "померен", "померена", "померено", "померены", "помечен", "помечена", "помечено", "помечены", "помешан", "помешана", "помешано", "помешаны", "помещен", "помещена", "помещено", "помещены", "помилован", "помилована", "помиловано", "помилованы", "помножен", "помножена", "помножено", "помножены", "помолвлен", "помолвлена", "помолвлено", "помолвлены", "помотан", "помотана", "помотано", "помотаны", "помрачен", "помрачена", "помрачено", "помрачены", "помыт", "помыта", "помыто", "помыты", "помянут", "помянута", "помянуто", "помянуты", "понаделан", "понаделана", "понаделано", "понаделаны", "понастроен", "понастроена", "понастроено", "понастроены", "понесен", "понесена", "понесено", "понесены", "понижен", "понижена", "понижено", "понижены", "поношена", "поношено", "поношены", "понят", "понята", "понято", "поняты", "пообещан", "пообещана", "пообещано", "пообещаны", "поощрен", "поощрена", "поощрено", "поощрены", "поперчен", "поперчена", "поперчено", "поперчены", "попет", "попета", "попето", "попеты", "пописан", "пописана", "пописано", "пописаны", "попит", "попита", "попито", "попиты", "пополнен", "пополнена", "пополнено", "пополнены", "попорчен", "попорчена", "попорчено", "попорчены", "поправлен", "поправлена", "поправлено", "поправлены", "попран", "попрана", "попрано", "попраны", "попрекнут", "попрекнута", "попрекнуто", "попрекнуты", "поприветствован", "поприветствована", "поприветствовано", "поприветствованы", "попробован", "попробована", "попробовано", "попробованы", "попрошен", "попрошена", "попрошено", "попрошены", "попуган", "попугана", "попугано", "попуганы", "популяризирован", "популяризирована", "популяризировано", "популяризированы", "попутан", "попутана", "попутано", "попутаны", "порабощен", "порабощена", "порабощено", "порабощены", "порадован", "порадована", "порадовано", "порадованы", "поражен", "поражена", "поражено", "поражены", "поранен", "поранена", "поранено", "поранены", "пораскинут", "пораскинута", "пораскинуто", "пораскинуты", "порассказан", "порассказана", "порассказано", "порассказаны", "порасспрошен", "порасспрошена", "порасспрошено", "порасспрошены", "порван", "порвана", "порвано", "порваны", "порезан", "порезана", "порезано", "порезаны", "порекомендован", "порекомендована", "порекомендовано", "порекомендованы", "порешен", "порешена", "порешено", "порешены", "порожден", "порождена", "порождено", "порождены", "порубан", "порубана", "порубано", "порубаны", "порублен", "порублена", "порублено", "порублены", "поруган", "поругана", "поругано", "поруганы", "поручен", "поручена", "поручено", "поручены", "порушен", "порушена", "порушено", "порушены", "посажен", "посажена", "посажено", "посажены", "посвящен", "посвящена", "посвящено", "посвящены", "поселен", "поселена", "поселено", "поселены", "посеребрен", "посеребрена", "посеребрено", "посеребрены", "посещен", "посещена", "посещено", "посещены", "посеян", "посеяна", "посеяно", "посеяны", "поскребен", "поскребена", "поскребено", "поскребены", "послан", "послана", "послано", "посланы", "послушан", "послушана", "послушано", "послушаны", "посмотрен", "посмотрена", "посмотрено", "посмотрены", "посниман", "поснимана", "поснимано", "посниманы", "посолен", "посолена", "посолено", "посолены", "пососан", "пососана", "пососано", "пососаны", "посрамлен", "посрамлена", "посрамлено", "посрамлены", "поставлен", "поставлена", "поставлено", "поставлены", "постановлен", "постановлена", "постановлено", "постановлены", "постелен", "постелена", "постелено", "постелены", "постигнут", "постигнута", "постигнуто", "постигнуты", "постиран", "постирана", "постирано", "постираны", "пострелян", "постреляна", "постреляно", "постреляны", "пострижен", "пострижена", "пострижено", "пострижены", "построен", "построена", "построено", "построены", "постулирован", "постулирована", "постулировано", "постулированы", "посчитан", "посчитана", "посчитано", "посчитаны", "потереблен", "потереблена", "потереблено", "потереблены", "потерплен", "потерплена", "потерплено", "потерплены", "потерт", "потерта", "потерто", "потерты", "потерян", "потеряна", "потеряно", "потеряны", "потеснен", "потеснена", "потеснено", "потеснены", "потешен", "потешена", "потешено", "потешены", "потискан", "потискана", "потискано", "потисканы", "потоплен", "потоплена", "потоплено", "потоплены", "потоптан", "потоптана", "потоптано", "потоптаны", "потороплен", "потороплена", "потороплено", "потороплены", "потравлен", "потравлена", "потравлено", "потравлены", "потрачен", "потрачена", "потрачено", "потрачены", "потреблен", "потреблена", "потреблено", "потреблены", "потребован", "потребована", "потребовано", "потребованы", "потревожен", "потревожена", "потревожено", "потревожены", "потрепан", "потрепана", "потрепано", "потрепаны", "потроган", "потрогана", "потрогано", "потроганы", "потрушен", "потрушена", "потрушено", "потрушены", "потрясен", "потрясена", "потрясено", "потрясены", "потуплен", "потуплена", "потуплено", "потуплены", "потушен", "потушена", "потушено", "потушены", "потыкан", "потыкана", "потыкано", "потыканы", "потянут", "потянута", "потянуто", "потянуты", "поубавлен", "поубавлена", "поубавлено", "поубавлены", "поучен", "поучена", "поучено", "поучены", "похвален", "похвалена", "похвалено", "похвалены", "похерен", "похерена", "похерено", "похерены", "похищен", "похищена", "похищено", "похищены", "похлебан", "похлебана", "похлебано", "похлебаны", "похлопан", "похлопана", "похлопано", "похлопаны", "похоронен", "похоронена", "похоронено", "похоронены", "поцарапан", "поцарапана", "поцарапано", "поцарапаны", "поцелован", "поцелована", "поцеловано", "поцелованы", "почат", "почата", "почато", "початы", "почерпнут", "почерпнута", "почерпнуто", "почерпнуты", "почесан", "почесана", "почесано", "почесаны", "починен", "починена", "починено", "починены", "почитан", "почитана", "почитано", "почитаны", "почищен", "почищена", "почищено", "почищены", "почтен", "почтена", "почтено", "почтены", "почувствован", "почувствована", "почувствовано", "почувствованы", "пошатнут", "пошатнута", "пошатнуто", "пошатнуты", "пошевелен", "пошевелена", "пошевелено", "пошевелены", "пошит", "пошита", "пошито", "пошиты", "пощелкан", "пощелкана", "пощелкано", "пощелканы", "пощипан", "пощипана", "пощипано", "пощипаны", "пощупан", "пощупана", "пощупано", "пощупаны", "пояснен", "пояснена", "пояснено", "пояснены", "превозможен", "превозможена", "превозможено", "превозможены", "превращен", "превращена", "превращено", "превращены", "превышен", "превышена", "превышено", "превышены", "прегражен", "прегражена", "прегражено", "прегражены", "предварен", "предварена", "предварено", "предварены", "предвосхищен", "предвосхищена", "предвосхищено", "предвосхищены", "предложен", "предложена", "предложено", "предложены", "предназначен", "предназначена", "предназначено", "предназначены", "предначертан", "предначертана", "предначертано", "предначертаны", "предопределен", "предопределена", "предопределено", "предопределены", "предоставлен", "предоставлена", "предоставлено", "предоставлены", "предостережен", "предостережена", "предостережено", "предостережены", "предотвращен", "предотвращена", "предотвращено", "предотвращены", "предохранен", "предохранена", "предохранено", "предохранены", "предписан", "предписана", "предписано", "предписаны", "предположен", "предположена", "предположено", "предположены", "предпослан", "предпослана", "предпослано", "предпосланы", "предпочтен", "предпочтена", "предпочтено", "предпочтены", "предпринят", "предпринята", "предпринято", "предприняты", "предрасположен", "предрасположена", "предрасположено", "предрасположены", "предречен", "предречена", "предречено", "предречены", "предрешен", "предрешена", "предрешено", "предрешены", "предсказан", "предсказана", "предсказано", "предсказаны", "представлен", "представлена", "представлено", "представлены", "предугадан", "предугадана", "предугадано", "предугаданы", "предубежден", "предубеждена", "предубеждено", "предубеждены", "предусмотрен", "предусмотрена", "предусмотрено", "предусмотрены", "предъявлен", "предъявлена", "предъявлено", "предъявлены", "презентован", "презентована", "презентовано", "презентованы", "преисполнен", "преисполнена", "преисполнено", "преисполнены", "преклонен", "преклонена", "преклонено", "преклонены", "прекращен", "прекращена", "прекращено", "прекращены", "преломлен", "преломлена", "преломлено", "преломлены", "прельщен", "прельщена", "прельщено", "прельщены", "премирован", "премирована", "премировано", "премированы", "преображен", "преображена", "преображено", "преображены", "преодолен", "преодолена", "преодолено", "преодолены", "препарирован", "препарирована", "препарировано", "препарированы", "преподнесен", "преподнесена", "преподнесено", "преподнесены", "препровожен", "препровожена", "препровожено", "препровожены", "прерван", "прервана", "прервано", "прерваны", "пресечен", "пресечена", "пресечено", "пресечены", "преступлен", "преступлена", "преступлено", "преступлены", "претворен", "претворена", "претворено", "претворены", "претерплен", "претерплена", "претерплено", "претерплены", "преувеличен", "преувеличена", "преувеличено", "преувеличены", "прибавлен", "прибавлена", "прибавлено", "прибавлены", "прибережен", "прибережена", "прибережено", "прибережены", "прибит", "прибита", "прибито", "прибиты", "приближен", "приближена", "приближено", "приближены", "прибран", "прибрана", "прибрано", "прибраны", "привален", "привалена", "привалено", "привалены", "приварен", "приварена", "приварено", "приварены", "приведен", "приведена", "приведено", "приведены", "привезен", "привезена", "привезено", "привезены", "привешен", "привешена", "привешено", "привешены", "привинчен", "привинчена", "привинчено", "привинчены", "привит", "привита", "привито", "привиты", "привлечен", "привлечена", "привлечено", "привлечены", "привнесен", "привнесена", "привнесено", "привнесены", "приворожен", "приворожена", "приворожено", "приворожены", "привязан", "привязана", "привязано", "привязаны", "пригвозжен", "пригвозжена", "пригвозжено", "пригвозжены", "приглажен", "приглажена", "приглажено", "приглажены", "приглашен", "приглашена", "приглашено", "приглашены", "приглушен", "приглушена", "приглушено", "приглушены", "пригнан", "пригнана", "пригнано", "пригнаны", "пригнут", "пригнута", "пригнуто", "пригнуты", "приговорен", "приговорена", "приговорено", "приговорены", "приголублен", "приголублена", "приголублено", "приголублены", "приготовлен", "приготовлена", "приготовлено", "приготовлены", "пригрет", "пригрета", "пригрето", "пригреты", "пригублен", "пригублена", "пригублено", "пригублены", "придавлен", "придавлена", "придавлено", "придавлены", "придвинут", "придвинута", "придвинуто", "придвинуты", "приделан", "приделана", "приделано", "приделаны", "придержан", "придержана", "придержано", "придержаны", "придуман", "придумана", "придумано", "придуманы", "придушен", "придушена", "придушено", "придушены", "прижат", "прижата", "прижато", "прижаты", "прижит", "прижита", "прижито", "прижиты", "призван", "призвана", "призвано", "призваны", "приземлен", "приземлена", "приземлено", "приземлены", "признан", "признана", "признано", "признаны", "приказан", "приказана", "приказано", "приказаны", "прикарманен", "прикарманена", "прикарманено", "прикарманены", "прикачен", "прикачена", "прикачено", "прикачены", "прикинут", "прикинута", "прикинуто", "прикинуты", "приклеен", "приклеена", "приклеено", "приклеены", "приклонен", "приклонена", "приклонено", "приклонены", "прикован", "прикована", "приковано", "прикованы", "приколот", "приколота", "приколото", "приколоты", "приколочен", "приколочена", "приколочено", "приколочены", "прикомандирован", "прикомандирована", "прикомандировано", "прикомандированы", "прикончен", "прикончена", "прикончено", "прикончены", "прикормлен", "прикормлена", "прикормлено", "прикормлены", "прикреплен", "прикреплена", "прикреплено", "прикреплены", "прикручен", "прикручена", "прикручено", "прикручены", "прикрыт", "прикрыта", "прикрыто", "прикрыты", "прикуплен", "прикуплена", "прикуплено", "прикуплены", "прикушен", "прикушена", "прикушено", "прикушены", "прилажен", "прилажена", "прилажено", "прилажены", "приласкан", "приласкана", "приласкано", "приласканы", "прилеплен", "прилеплена", "прилеплено", "прилеплены", "прилит", "прилита", "прилито", "прилиты", "приложен", "приложена", "приложено", "приложены", "приманен", "приманена", "приманено", "приманены", "применен", "применена", "применено", "применены", "примерен", "примерена", "примерено", "примерены", "примерян", "примеряна", "примеряно", "примеряны", "примечен", "примечена", "примечено", "примечены", "примирен", "примирена", "примирено", "примирены", "приморожен", "приморожена", "приморожено", "приморожены", "примотан", "примотана", "примотано", "примотаны", "примят", "примята", "примято", "примяты", "принаряжен", "принаряжена", "принаряжено", "принаряжены", "принесен", "принесена", "принесено", "принесены", "принижен", "принижена", "принижено", "принижены", "принужден", "принуждена", "принуждено", "принуждены", "принят", "принята", "принято", "приняты", "приободрен", "приободрена", "приободрено", "приободрены", "приобретен", "приобретена", "приобретено", "приобретены", "приобщен", "приобщена", "приобщено", "приобщены", "приодет", "приодета", "приодето", "приодеты", "приостановлен", "приостановлена", "приостановлено", "приостановлены", "приотворен", "приотворена", "приотворено", "приотворены", "приоткрыт", "приоткрыта", "приоткрыто", "приоткрыты", "припаркован", "припаркована", "припарковано", "припаркованы", "припасен", "припасена", "припасено", "припасены", "припаян", "припаяна", "припаяно", "припаяны", "приперт", "приперта", "приперто", "приперты", "припечатан", "припечатана", "припечатано", "припечатаны", "припечен", "припечена", "припечено", "припечены", "приписан", "приписана", "приписано", "приписаны", "приплетен", "приплетена", "приплетено", "приплетены", "приплюснут", "приплюснута", "приплюснуто", "приплюснуты", "приплюсован", "приплюсована", "приплюсовано", "приплюсованы", "приподнят", "приподнята", "приподнято", "приподняты", "припомнен", "припомнена", "припомнено", "припомнены", "припорошен", "припорошена", "припорошено", "припорошены", "приправлен", "приправлена", "приправлено", "приправлены", "припрятан", "припрятана", "припрятано", "припрятаны", "припудрен", "припудрена", "припудрено", "припудрены", "припущен", "припущена", "припущено", "припущены", "приравнян", "приравняна", "приравняно", "приравняны", "приревнован", "приревнована", "приревновано", "приревнованы", "прирезан", "прирезана", "прирезано", "прирезаны", "пририсован", "пририсована", "пририсовано", "пририсованы", "приручен", "приручена", "приручено", "приручены", "присвоен", "присвоена", "присвоено", "присвоены", "прислан", "прислана", "прислано", "присланы", "прислонен", "прислонена", "прислонено", "прислонены", "присмотрен", "присмотрена", "присмотрено", "присмотрены", "присобачен", "присобачена", "присобачено", "присобачены", "присовокуплен", "присовокуплена", "присовокуплено", "присовокуплены", "присоединен", "присоединена", "присоединено", "присоединены", "присочинен", "присочинена", "присочинено", "присочинены", "приспособлен", "приспособлена", "приспособлено", "приспособлены", "приспущен", "приспущена", "приспущено", "приспущены", "приставлен", "приставлена", "приставлено", "приставлены", "пристегнут", "пристегнута", "пристегнуто", "пристегнуты", "пристрелен", "пристрелена", "пристрелено", "пристрелены", "пристрелян", "пристреляна", "пристреляно", "пристреляны", "пристроен", "пристроена", "пристроено", "пристроены", "приструнен", "приструнена", "приструнено", "приструнены", "пристукнут", "пристукнута", "пристукнуто", "пристукнуты", "пристыжен", "пристыжена", "пристыжено", "пристыжены", "присужден", "присуждена", "присуждено", "присуждены", "притащен", "притащена", "притащено", "притащены", "притворен", "притворена", "притворено", "притворены", "притерт", "притерта", "притерто", "притерты", "притиснут", "притиснута", "притиснуто", "притиснуты", "приткнут", "приткнута", "приткнуто", "приткнуты", "притоптан", "притоптана", "притоптано", "притоптаны", "приторможен", "приторможена", "приторможено", "приторможены", "притуплен", "притуплена", "притуплено", "притуплены", "притянут", "притянута", "притянуто", "притянуты", "приукрашен", "приукрашена", "приукрашено", "приукрашены", "приумножен", "приумножена", "приумножено", "приумножены", "приурочен", "приурочена", "приурочено", "приурочены", "приучен", "приучена", "приучено", "приучены", "прихвастнут", "прихвастнута", "прихвастнуто", "прихвастнуты", "прихвачен", "прихвачена", "прихвачено", "прихвачены", "прихлопнут", "прихлопнута", "прихлопнуто", "прихлопнуты", "прицеплен", "прицеплена", "прицеплено", "прицеплены", "причален", "причалена", "причалено", "причалены", "причащен", "причащена", "причащено", "причащены", "причесан", "причесана", "причесано", "причесаны", "причинен", "причинена", "причинено", "причинены", "причислен", "причислена", "причислено", "причислены", "пришит", "пришита", "пришито", "пришиты", "пришпилен", "пришпилена", "пришпилено", "пришпилены", "пришпорен", "пришпорена", "пришпорено", "пришпорены", "прищелкнут", "прищелкнута", "прищелкнуто", "прищелкнуты", "прищемлен", "прищемлена", "прищемлено", "прищемлены", "прищурен", "прищурена", "прищурено", "прищурены", "прищучен", "прищучена", "прищучено", "прищучены", "проанализирован", "проанализирована", "проанализировано", "проанализированы", "пробит", "пробита", "пробито", "пробиты", "проварен", "проварена", "проварено", "проварены", "проведан", "проведана", "проведано", "проведаны", "проведен", "проведена", "проведено", "проведены", "провезен", "провезена", "провезено", "провезены", "проверен", "проверена", "проверено", "проверены", "провернут", "провернута", "провернуто", "провернуты", "проветрен", "проветрена", "проветрено", "проветрены", "провозглашен", "провозглашена", "провозглашено", "провозглашены", "проглочен", "проглочена", "проглочено", "проглочены", "прогнан", "прогнана", "прогнано", "прогнаны", "прогнусавлен", "прогнусавлена", "прогнусавлено", "прогнусавлены", "проговорен", "проговорена", "проговорено", "проговорены", "прогрет", "прогрета", "прогрето", "прогреты", "прогрызен", "прогрызена", "прогрызено", "прогрызены", "прогулян", "прогуляна", "прогуляно", "прогуляны", "продавлен", "продавлена", "продавлено", "продавлены", "продвинут", "продвинута", "продвинуто", "продвинуты", "продезинфицирован", "продезинфицирована", "продезинфицировано", "продезинфицированы", "продекламирован", "продекламирована", "продекламировано", "продекламированы", "проделан", "проделана", "проделано", "проделаны", "продемонстрирован", "продемонстрирована", "продемонстрировано", "продемонстрированы", "продержан", "продержана", "продержано", "продержаны", "продернут", "продернута", "продернуто", "продернуты", "продет", "продета", "продето", "продеты", "продешевлен", "продешевлена", "продешевлено", "продешевлены", "продиктован", "продиктована", "продиктовано", "продиктованы", "продлен", "продлена", "продлено", "продлены", "продолжен", "продолжена", "продолжено", "продолжены", "продран", "продрана", "продрано", "продраны", "продублирован", "продублирована", "продублировано", "продублированы", "продуман", "продумана", "продумано", "продуманы", "продут", "продута", "продуто", "продуты", "продырявлен", "продырявлена", "продырявлено", "продырявлены", "прожарен", "прожарена", "прожарено", "прожарены", "прожеван", "прожевана", "прожевано", "прожеваны", "прожит", "прожита", "прожито", "прожиты", "прозван", "прозвана", "прозвано", "прозваны", "прозвонен", "прозвонена", "прозвонено", "прозвонены", "прознан", "прознана", "прознано", "прознаны", "проигран", "проиграна", "проиграно", "проиграны", "произведен", "произведена", "произведено", "произведены", "произнесен", "произнесена", "произнесено", "произнесены", "проиллюстрирован", "проиллюстрирована", "проиллюстрировано", "проиллюстрированы", "проинструктирован", "проинструктирована", "проинструктировано", "проинструктированы", "проинформирован", "проинформирована", "проинформировано", "проинформированы", "прокален", "прокалена", "прокалено", "прокалены", "прокатан", "прокатана", "прокатано", "прокатаны", "прокачан", "прокачана", "прокачано", "прокачаны", "прокачен", "прокачена", "прокачено", "прокачены", "прокипячен", "прокипячена", "прокипячено", "прокипячены", "проколот", "проколота", "проколото", "проколоты", "прокомментирован", "прокомментирована", "прокомментировано", "прокомментированы", "проконсультирован", "проконсультирована", "проконсультировано", "проконсультированы", "проконтролирован", "проконтролирована", "проконтролировано", "проконтролированы", "прокопан", "прокопана", "прокопано", "прокопаны", "прокопчен", "прокопчена", "прокопчено", "прокопчены", "прокручен", "прокручена", "прокручено", "прокручены", "прокурен", "прокурена", "прокурено", "прокурены", "прокушен", "прокушена", "прокушено", "прокушены", "пролечен", "пролечена", "пролечено", "пролечены", "пролистан", "пролистана", "пролистано", "пролистаны", "пролит", "пролита", "пролито", "пролиты", "проложен", "проложена", "проложено", "проложены", "проломлен", "проломлена", "проломлено", "проломлены", "пролонгирован", "пролонгирована", "пролонгировано", "пролонгированы", "промазан", "промазана", "промазано", "промазаны", "променян", "променяна", "променяно", "променяны", "промокнут", "промокнута", "промокнуто", "промокнуты", "промолвлен", "промолвлена", "промолвлено", "промолвлены", "проморожен", "проморожена", "проморожено", "проморожены", "промотан", "промотана", "промотано", "промотаны", "промочен", "промочена", "промочено", "промочены", "промыт", "промыта", "промыто", "промыты", "промямлен", "промямлена", "промямлено", "промямлены", "пронесен", "пронесена", "пронесено", "пронесены", "пронзен", "пронзена", "пронзено", "пронзены", "пронизан", "пронизана", "пронизано", "пронизаны", "проношен", "проношена", "проношено", "проношены", "пронумерован", "пронумерована", "пронумеровано", "пронумерованы", "пронюхан", "пронюхана", "пронюхано", "пронюханы", "пропахан", "пропахана", "пропахано", "пропаханы", "пропет", "пропета", "пропето", "пропеты", "пропечатан", "пропечатана", "пропечатано", "пропечатаны", "прописан", "прописана", "прописано", "прописаны", "пропит", "пропита", "пропито", "пропиты", "пропитан", "пропитана", "пропитано", "пропитаны", "пропихнут", "пропихнута", "пропихнуто", "пропихнуты", "проплакан", "проплакана", "проплакано", "проплаканы", "проплыт", "проплыта", "проплыто", "проплыты", "прополоскан", "прополоскана", "прополоскано", "прополосканы", "прополот", "прополота", "прополото", "прополоты", "пропорот", "пропорота", "пропорото", "пропороты", "пропущен", "пропущена", "пропущено", "пропущены", "пропылен", "пропылена", "пропылено", "пропылены", "проработан", "проработана", "проработано", "проработаны", "прорван", "прорвана", "прорвано", "прорваны", "прорежен", "прорежена", "прорежено", "прорежены", "прорезан", "прорезана", "прорезано", "прорезаны", "прорисован", "прорисована", "прорисовано", "прорисованы", "проронен", "проронена", "проронено", "проронены", "прорублен", "прорублена", "прорублено", "прорублены", "прорыт", "прорыта", "прорыто", "прорыты", "просажен", "просажена", "просажено", "просажены", "просверлен", "просверлена", "просверлено", "просверлены", "просветлен", "просветлена", "просветлено", "просветлены", "просвечен", "просвечена", "просвечено", "просвечены", "просвещен", "просвещена", "просвещено", "просвещены", "просвищен", "просвищена", "просвищено", "просвищены", "просечен", "просечена", "просечено", "просечены", "просеян", "просеяна", "просеяно", "просеяны", "просигнален", "просигналена", "просигналено", "просигналены", "просижен", "просижена", "просижено", "просижены", "просиплен", "просиплена", "просиплено", "просиплены", "прославлен", "прославлена", "прославлено", "прославлены", "прослежен", "прослежена", "прослежено", "прослежены", "прослушан", "прослушана", "прослушано", "прослушаны", "прослышан", "прослышана", "прослышано", "прослышаны", "просмолен", "просмолена", "просмолено", "просмолены", "просмотрен", "просмотрена", "просмотрено", "просмотрены", "просолен", "просолена", "просолено", "просолены", "просрочен", "просрочена", "просрочено", "просрочены", "проставлен", "проставлена", "проставлено", "проставлены", "простерт", "простерта", "простерто", "простерты", "простиран", "простирана", "простирано", "простираны", "прострелен", "прострелена", "прострелено", "прострелены", "прострочен", "прострочена", "прострочено", "прострочены", "простужен", "простужена", "простужено", "простужены", "простучан", "простучана", "простучано", "простучаны", "просунут", "просунута", "просунуто", "просунуты", "просушен", "просушена", "просушено", "просушены", "просчитан", "просчитана", "просчитано", "просчитаны", "протаранен", "протаранена", "протаранено", "протаранены", "протащен", "протащена", "протащено", "протащены", "протерт", "протерта", "протерто", "протерты", "противопоставлен", "противопоставлена", "противопоставлено", "противопоставлены", "проткнут", "проткнута", "проткнуто", "проткнуты", "протолкнут", "протолкнута", "протолкнуто", "протолкнуты", "протоплен", "протоплена", "протоплено", "протоплены", "протоптан", "протоптана", "протоптано", "протоптаны", "проторен", "проторена", "проторено", "проторены", "протыкан", "протыкана", "протыкано", "протыканы", "протянут", "протянута", "протянуто", "протянуты", "проучен", "проучена", "проучено", "проучены", "профильтрован", "профильтрована", "профильтровано", "профильтрованы", "профинансирован", "профинансирована", "профинансировано", "профинансированы", "профукан", "профукана", "профукано", "профуканы", "прохвачен", "прохвачена", "прохвачено", "прохвачены", "прохриплен", "прохриплена", "прохриплено", "прохриплены", "процарапан", "процарапана", "процарапано", "процарапаны", "процежен", "процежена", "процежено", "процежены", "процитирован", "процитирована", "процитировано", "процитированы", "прочерчен", "прочерчена", "прочерчено", "прочерчены", "прочесан", "прочесана", "прочесано", "прочесаны", "прочитан", "прочитана", "прочитано", "прочитаны", "прочищен", "прочищена", "прочищено", "прочищены", "прочтен", "прочтена", "прочтено", "прочтены", "прочувствован", "прочувствована", "прочувствовано", "прочувствованы", "прошаган", "прошагана", "прошагано", "прошаганы", "прошамкан", "прошамкана", "прошамкано", "прошамканы", "прошептан", "прошептана", "прошептано", "прошептаны", "прошиплен", "прошиплена", "прошиплено", "прошиплены", "прошит", "прошита", "прошито", "прошиты", "прошляплен", "прошляплена", "прошляплено", "прошляплены", "проштудирован", "проштудирована", "проштудировано", "проштудированы", "прощен", "прощена", "прощено", "прощены", "прощупан", "прощупана", "прощупано", "прощупаны", "проявлен", "проявлена", "проявлено", "проявлены", "прояснен", "прояснена", "прояснено", "прояснены", "пущен", "пущена", "пущено", "пущены", "пырнут", "пырнута", "пырнуто", "пырнуты", "радирован", "радирована", "радировано", "радированы", "разбавлен", "разбавлена", "разбавлено", "разбавлены", "разбазарен", "разбазарена", "разбазарено", "разбазарены", "разбережен", "разбережена", "разбережено", "разбережены", "разбит", "разбита", "разбито", "разбиты", "разболтан", "разболтана", "разболтано", "разболтаны", "разбомблен", "разбомблена", "разбомблено", "разбомблены", "разбросан", "разбросана", "разбросано", "разбросаны", "разбужен", "разбужена", "разбужено", "разбужены", "развален", "развалена", "развалено", "развалены", "разварен", "разварена", "разварено", "разварены", "разведан", "разведана", "разведано", "разведаны", "разведен", "разведена", "разведено", "разведены", "развезен", "развезена", "развезено", "развезены", "развенчан", "развенчана", "развенчано", "развенчаны", "развернут", "развернута", "развернуто", "развернуты", "развеселен", "развеселена", "развеселено", "развеселены", "развешан", "развешана", "развешано", "развешаны", "развешен", "развешена", "развешено", "развешены", "развеян", "развеяна", "развеяно", "развеяны", "развинчен", "развинчена", "развинчено", "развинчены", "развит", "развита", "развито", "развиты", "развлечен", "развлечена", "развлечено", "развлечены", "разворован", "разворована", "разворовано", "разворованы", "разворочен", "разворочена", "разворочено", "разворочены", "разворошен", "разворошена", "разворошено", "разворошены", "развращен", "развращена", "развращено", "развращены", "развязан", "развязана", "развязано", "развязаны", "разгадан", "разгадана", "разгадано", "разгаданы", "разглажен", "разглажена", "разглажено", "разглажены", "разглашен", "разглашена", "разглашено", "разглашены", "разгневан", "разгневана", "разгневано", "разгневаны", "разговорен", "разговорена", "разговорено", "разговорены", "разгорожен", "разгорожена", "разгорожено", "разгорожены", "разгорячен", "разгорячена", "разгорячено", "разгорячены", "разграблен", "разграблена", "разграблено", "разграблены", "разграничен", "разграничена", "разграничено", "разграничены", "разграфлен", "разграфлена", "разграфлено", "разграфлены", "разгребен", "разгребена", "разгребено", "разгребены", "разгромлен", "разгромлена", "разгромлено", "разгромлены", "разгружен", "разгружена", "разгружено", "разгружены", "разгрызен", "разгрызена", "разгрызено", "разгрызены", "раздавлен", "раздавлена", "раздавлено", "раздавлены", "раздарен", "раздарена", "раздарено", "раздарены", "раздвинут", "раздвинута", "раздвинуто", "раздвинуты", "раздвоен", "раздвоена", "раздвоено", "раздвоены", "разделан", "разделана", "разделано", "разделаны", "разделен", "разделена", "разделено", "разделены", "раздернут", "раздернута", "раздернуто", "раздернуты", "раздет", "раздета", "раздето", "раздеты", "раздолбан", "раздолбана", "раздолбано", "раздолбаны", "раздосадован", "раздосадована", "раздосадовано", "раздосадованы", "раздражен", "раздражена", "раздражено", "раздражены", "раздроблен", "раздроблена", "раздроблено", "раздроблены", "раздут", "раздута", "раздуто", "раздуты", "разжалоблен", "разжалоблена", "разжалоблено", "разжалоблены", "разжалован", "разжалована", "разжаловано", "разжалованы", "разжат", "разжата", "разжато", "разжаты", "разжеван", "разжевана", "разжевано", "разжеваны", "раззадорен", "раззадорена", "раззадорено", "раззадорены", "раззявлен", "раззявлена", "раззявлено", "раззявлены", "разинут", "разинута", "разинуто", "разинуты", "разлеплен", "разлеплена", "разлеплено", "разлеплены", "разлинован", "разлинована", "разлиновано", "разлинованы", "разлит", "разлита", "разлито", "разлиты", "различен", "различена", "различено", "различены", "разложен", "разложена", "разложено", "разложены", "разломан", "разломана", "разломано", "разломаны", "разломлен", "разломлена", "разломлено", "разломлены", "разлохмачен", "разлохмачена", "разлохмачено", "разлохмачены", "разлучен", "разлучена", "разлучено", "разлучены", "размазан", "размазана", "размазано", "размазаны", "размалеван", "размалевана", "размалевано", "размалеваны", "разменян", "разменяна", "разменяно", "разменяны", "разметан", "разметана", "разметано", "разметаны", "размечен", "размечена", "размечено", "размечены", "размешан", "размешана", "размешано", "размешаны", "размещен", "размещена", "размещено", "размещены", "разминирован", "разминирована", "разминировано", "разминированы", "размножен", "размножена", "размножено", "размножены", "размозжен", "размозжена", "размозжено", "размозжены", "размолот", "размолота", "размолото", "размолоты", "разморожен", "разморожена", "разморожено", "разморожены", "размотан", "размотана", "размотано", "размотаны", "размочен", "размочена", "размочено", "размочены", "размыкан", "размыкана", "размыкано", "размыканы", "размыт", "размыта", "размыто", "размыты", "размягчен", "размягчена", "размягчено", "размягчены", "размят", "размята", "размято", "размяты", "разнесен", "разнесена", "разнесено", "разнесены", "разношен", "разношена", "разношено", "разношены", "разнюхан", "разнюхана", "разнюхано", "разнюханы", "разнят", "разнята", "разнято", "разняты", "разоблачен", "разоблачена", "разоблачено", "разоблачены", "разобран", "разобрана", "разобрано", "разобраны", "разобщен", "разобщена", "разобщено", "разобщены", "разогнан", "разогнана", "разогнано", "разогнаны", "разогнут", "разогнута", "разогнуто", "разогнуты", "разогрет", "разогрета", "разогрето", "разогреты", "разодет", "разодета", "разодето", "разодеты", "разодран", "разодрана", "разодрано", "разодраны", "разожжен", "разожжена", "разожжено", "разожжены", "разозлен", "разозлена", "разозлено", "разозлены", "разомкнут", "разомкнута", "разомкнуто", "разомкнуты", "разорван", "разорвана", "разорвано", "разорваны", "разорен", "разорена", "разорено", "разорены", "разоружен", "разоружена", "разоружено", "разоружены", "разослан", "разослана", "разослано", "разосланы", "разостлан", "разостлана", "разостлано", "разостланы", "разочарован", "разочарована", "разочаровано", "разочарованы", "разработан", "разработана", "разработано", "разработаны", "разрежен", "разрежена", "разрежено", "разрежены", "разрезан", "разрезана", "разрезано", "разрезаны", "разрекламирован", "разрекламирована", "разрекламировано", "разрекламированы", "разрешен", "разрешена", "разрешено", "разрешены", "разрисован", "разрисована", "разрисовано", "разрисованы", "разрознен", "разрознена", "разрознено", "разрознены", "разрублен", "разрублена", "разрублено", "разрублены", "разрушен", "разрушена", "разрушено", "разрушены", "разрыт", "разрыта", "разрыто", "разрыты", "разряжен", "разряжена", "разряжено", "разряжены", "разубежден", "разубеждена", "разубеждено", "разубеждены", "разузнан", "разузнана", "разузнано", "разузнаны", "разукрашен", "разукрашена", "разукрашено", "разукрашены", "разут", "разута", "разуто", "разуты", "разучен", "разучена", "разучено", "разучены", "разъединен", "разъединена", "разъединено", "разъединены", "разъярен", "разъярена", "разъярено", "разъярены", "разъяснен", "разъяснена", "разъяснено", "разъяснены", "разъят", "разъята", "разъято", "разъяты", "разыгран", "разыграна", "разыграно", "разыграны", "разыскан", "разыскана", "разыскано", "разысканы", "ранен", "ранена", "ранено", "ранены", "ранжирован", "ранжирована", "ранжировано", "ранжированы", "раскален", "раскалена", "раскалено", "раскалены", "раскатан", "раскатана", "раскатано", "раскатаны", "раскачан", "раскачана", "раскачано", "раскачаны", "расквартирован", "расквартирована", "расквартировано", "расквартированы", "расквашен", "расквашена", "расквашено", "расквашены", "раскидан", "раскидана", "раскидано", "раскиданы", "раскинут", "раскинута", "раскинуто", "раскинуты", "расклеван", "расклевана", "расклевано", "расклеваны", "расклеен", "расклеена", "расклеено", "расклеены", "раскован", "раскована", "расковано", "раскованы", "расковырян", "расковыряна", "расковыряно", "расковыряны", "расколдован", "расколдована", "расколдовано", "расколдованы", "расколот", "расколота", "расколото", "расколоты", "расколочен", "расколочена", "расколочено", "расколочены", "раскопан", "раскопана", "раскопано", "раскопаны", "раскрашен", "раскрашена", "раскрашено", "раскрашены", "раскрепощен", "раскрепощена", "раскрепощено", "раскрепощены", "раскритикован", "раскритикована", "раскритиковано", "раскритикованы", "раскроен", "раскроена", "раскроено", "раскроены", "раскрошен", "раскрошена", "раскрошено", "раскрошены", "раскручен", "раскручена", "раскручено", "раскручены", "раскрыт", "раскрыта", "раскрыто", "раскрыты", "раскулачен", "раскулачена", "раскулачено", "раскулачены", "раскуплен", "раскуплена", "раскуплено", "раскуплены", "раскупорен", "раскупорена", "раскупорено", "раскупорены", "раскурен", "раскурена", "раскурено", "раскурены", "раскушен", "раскушена", "раскушено", "раскушены", "распакован", "распакована", "распаковано", "распакованы", "распален", "распалена", "распалено", "распалены", "распарен", "распарена", "распарено", "распарены", "распахан", "распахана", "распахано", "распаханы", "распахнут", "распахнута", "распахнуто", "распахнуты", "распечатан", "распечатана", "распечатано", "распечатаны", "распилен", "распилена", "распилено", "распилены", "расписан", "расписана", "расписано", "расписаны", "распит", "распита", "распито", "распиты", "расплавлен", "расплавлена", "расплавлено", "расплавлены", "распланирован", "распланирована", "распланировано", "распланированы", "распластан", "распластана", "распластано", "распластаны", "расплескан", "расплескана", "расплескано", "расплесканы", "расплющен", "расплющена", "расплющено", "расплющены", "распознан", "распознана", "распознано", "распознаны", "расположен", "расположена", "расположено", "расположены", "располосован", "располосована", "располосовано", "располосованы", "распорот", "распорота", "распорото", "распороты", "распотрошен", "распотрошена", "распотрошено", "распотрошены", "расправлен", "расправлена", "расправлено", "расправлены", "распределен", "распределена", "распределено", "распределены", "распробован", "распробована", "распробовано", "распробованы", "распростерт", "распростерта", "распростерто", "распростерты", "распространен", "распространена", "распространено", "распространены", "распряжен", "распряжена", "распряжено", "распряжены", "распрямлен", "распрямлена", "распрямлено", "распрямлены", "распуган", "распугана", "распугано", "распуганы", "распушен", "распушена", "распушено", "распушены", "распущен", "распущена", "распущено", "распущены", "распылен", "распылена", "распылено", "распылены", "распялен", "распялена", "распялено", "распялены", "распят", "распята", "распято", "распяты", "рассажен", "рассажена", "рассажено", "рассажены", "рассекречен", "рассекречена", "рассекречено", "рассекречены", "расселен", "расселена", "расселено", "расселены", "рассержен", "рассержена", "рассержено", "рассержены", "рассечен", "рассечена", "рассечено", "рассечены", "рассеян", "рассеяна", "рассеяно", "рассеяны", "рассказан", "рассказана", "рассказано", "рассказаны", "расследован", "расследована", "расследовано", "расследованы", "расслышан", "расслышана", "расслышано", "расслышаны", "рассмешен", "рассмешена", "рассмешено", "рассмешены", "рассмотрен", "рассмотрена", "рассмотрено", "рассмотрены", "рассортирован", "рассортирована", "рассортировано", "рассортированы", "расспрошен", "расспрошена", "расспрошено", "расспрошены", "рассредоточен", "рассредоточена", "рассредоточено", "рассредоточены", "расставлен", "расставлена", "расставлено", "расставлены", "расстегнут", "расстегнута", "расстегнуто", "расстегнуты", "расстелен", "расстелена", "расстелено", "расстелены", "расстрелян", "расстреляна", "расстреляно", "расстреляны", "расстроен", "расстроена", "расстроено", "расстроены", "рассчитан", "рассчитана", "рассчитано", "рассчитаны", "растащен", "растащена", "растащено", "растащены", "растворен", "растворена", "растворено", "растворены", "растерзан", "растерзана", "растерзано", "растерзаны", "растерт", "растерта", "растерто", "растерты", "растерян", "растеряна", "растеряно", "растеряны", "растлен", "растлена", "растлено", "растлены", "растолкан", "растолкана", "растолкано", "растолканы", "растолкован", "растолкована", "растолковано", "растолкованы", "растоплен", "растоплена", "растоплено", "растоплены", "растоптан", "растоптана", "растоптано", "растоптаны", "растопырен", "растопырена", "растопырено", "растопырены", "расторгнут", "расторгнута", "расторгнуто", "расторгнуты", "растормошен", "растормошена", "растормошено", "растормошены", "растравлен", "растравлена", "растравлено", "растравлены", "растрачен", "растрачена", "растрачено", "растрачены", "растревожен", "растревожена", "растревожено", "растревожены", "растрепан", "растрепана", "растрепано", "растрепаны", "растроган", "растрогана", "растрогано", "растроганы", "растрясен", "растрясена", "растрясено", "растрясены", "растянут", "растянута", "растянуто", "растянуты", "расфасован", "расфасована", "расфасовано", "расфасованы", "расформирован", "расформирована", "расформировано", "расформированы", "расхвален", "расхвалена", "расхвалено", "расхвалены", "расхлебан", "расхлебана", "расхлебано", "расхлебаны", "расцарапан", "расцарапана", "расцарапано", "расцарапаны", "расцвечен", "расцвечена", "расцвечено", "расцвечены", "расцелован", "расцелована", "расцеловано", "расцелованы", "расценен", "расценена", "расценено", "расценены", "расцеплен", "расцеплена", "расцеплено", "расцеплены", "расчерчен", "расчерчена", "расчерчено", "расчерчены", "расчесан", "расчесана", "расчесано", "расчесаны", "расчищен", "расчищена", "расчищено", "расчищены", "расчленен", "расчленена", "расчленено", "расчленены", "расшатан", "расшатана", "расшатано", "расшатаны", "расшвырян", "расшвыряна", "расшвыряно", "расшвыряны", "расшевелен", "расшевелена", "расшевелено", "расшевелены", "расширен", "расширена", "расширено", "расширены", "расшит", "расшита", "расшито", "расшиты", "расшифрован", "расшифрована", "расшифровано", "расшифрованы", "расщеплен", "расщеплена", "расщеплено", "расщеплены", "ратифицирован", "ратифицирована", "ратифицировано", "ратифицированы", "рационализирован", "рационализирована", "рационализировано", "рационализированы", "реабилитирован", "реабилитирована", "реабилитировано", "реабилитированы", "реализован", "реализована", "реализовано", "реализованы", "ревизован", "ревизована", "ревизовано", "ревизованы", "регенерирован", "регенерирована", "регенерировано", "регенерированы", "регламентирован", "регламентирована", "регламентировано", "регламентированы", "редуцирован", "редуцирована", "редуцировано", "редуцированы", "резервирован", "резервирована", "резервировано", "резервированы", "резюмирован", "резюмирована", "резюмировано", "резюмированы", "реквизирован", "реквизирована", "реквизировано", "реквизированы", "рекомендован", "рекомендована", "рекомендовано", "рекомендованы", "реконструирован", "реконструирована", "реконструировано", "реконструированы", "рекрутирован", "рекрутирована", "рекрутировано", "рекрутированы", "ремонтирован", "ремонтирована", "ремонтировано", "ремонтированы", "репрессирован", "репрессирована", "репрессировано", "репрессированы", "реставрирован", "реставрирована", "реставрировано", "реставрированы", "реформирован", "реформирована", "реформировано", "реформированы", "решен", "решена", "решено", "решены", "рожден", "рождена", "рождено", "рождены", "романтизирован", "романтизирована", "романтизировано", "романтизированы", "рукоположен", "рукоположена", "рукоположено", "рукоположены", "русифицирован", "русифицирована", "русифицировано", "русифицированы", "саботирован", "саботирована", "саботировано", "саботированы", "сагитирован", "сагитирована", "сагитировано", "сагитированы", "санкционирован", "санкционирована", "санкционировано", "санкционированы", "сбалансирован", "сбалансирована", "сбалансировано", "сбалансированы", "сбережен", "сбережена", "сбережено", "сбережены", "сбит", "сбита", "сбито", "сбиты", "сближен", "сближена", "сближено", "сближены", "сбрит", "сбрита", "сбрито", "сбриты", "сброшен", "сброшена", "сброшено", "сброшены", "сбрызнут", "сбрызнута", "сбрызнуто", "сбрызнуты", "свален", "свалена", "свалено", "свалены", "сварганен", "сварганена", "сварганено", "сварганены", "сварен", "сварена", "сварено", "сварены", "сведен", "сведена", "сведено", "сведены", "свезен", "свезена", "свезено", "свезены", "свергнут", "свергнута", "свергнуто", "свергнуты", "сверен", "сверена", "сверено", "сверены", "свернут", "свернута", "свернуто", "свернуты", "сверстан", "сверстана", "сверстано", "сверстаны", "свершен", "свершена", "свершено", "свершены", "свешен", "свешена", "свешено", "свешены", "свинчен", "свинчена", "свинчено", "свинчены", "свистнут", "свистнута", "свистнуто", "свистнуты", "свит", "свита", "свито", "свиты", "сворован", "сворована", "своровано", "сворованы", "сворочен", "сворочена", "сворочено", "сворочены", "связан", "связана", "связано", "связаны", "сглажен", "сглажена", "сглажено", "сглажены", "сгноен", "сгноена", "сгноено", "сгноены", "сгорблена", "сгорблено", "сгорблены", "сготовлен", "сготовлена", "сготовлено", "сготовлены", "сгруппирован", "сгруппирована", "сгруппировано", "сгруппированы", "сгрызен", "сгрызена", "сгрызено", "сгрызены", "сгублен", "сгублена", "сгублено", "сгублены", "сгущен", "сгущена", "сгущено", "сгущены", "сдавлен", "сдавлена", "сдавлено", "сдавлены", "сдвинут", "сдвинута", "сдвинуто", "сдвинуты", "сдвоен", "сдвоена", "сдвоено", "сдвоены", "сделан", "сделана", "сделано", "сделаны", "сдержан", "сдержана", "сдержано", "сдержаны", "сдернут", "сдернута", "сдернуто", "сдернуты", "сдобрен", "сдобрена", "сдобрено", "сдобрены", "сдут", "сдута", "сдуто", "сдуты", "секуляризован", "секуляризована", "секуляризовано", "секуляризованы", "сенсибилизирован", "сенсибилизирована", "сенсибилизировано", "сенсибилизированы", "сервирован", "сервирована", "сервировано", "сервированы", "сжат", "сжата", "сжато", "сжаты", "сжеван", "сжевана", "сжевано", "сжеваны", "сжит", "сжита", "сжито", "сжиты", "сигнализирован", "сигнализирована", "сигнализировано", "сигнализированы", "симулирован", "симулирована", "симулировано", "симулированы", "синдицирован", "синдицирована", "синдицировано", "синдицированы", "синтезирован", "синтезирована", "синтезировано", "синтезированы", "синхронизирован", "синхронизирована", "синхронизировано", "синхронизированы", "систематизирован", "систематизирована", "систематизировано", "систематизированы", "сказан", "сказана", "сказано", "сказаны", "сказанут", "сказанута", "сказануто", "сказануты", "скачан", "скачана", "скачано", "скачаны", "скинут", "скинута", "скинуто", "скинуты", "складирован", "складирована", "складировано", "складированы", "склеван", "склевана", "склевано", "склеваны", "склеен", "склеена", "склеено", "склеены", "склонен", "склонена", "склонено", "склонены", "скован", "скована", "сковано", "скованы", "сколот", "сколота", "сколото", "сколоты", "сколочен", "сколочена", "сколочено", "сколочены", "скомандован", "скомандована", "скомандовано", "скомандованы", "скомкан", "скомкана", "скомкано", "скомканы", "скомпенсирован", "скомпенсирована", "скомпенсировано", "скомпенсированы", "скомпонован", "скомпонована", "скомпоновано", "скомпонованы", "скомпрометирован", "скомпрометирована", "скомпрометировано", "скомпрометированы", "сконструирован", "сконструирована", "сконструировано", "сконструированы", "сконцентрирован", "сконцентрирована", "сконцентрировано", "сконцентрированы", "скоординирован", "скоординирована", "скоординировано", "скоординированы", "скопирован", "скопирована", "скопировано", "скопированы", "скормлен", "скормлена", "скормлено", "скормлены", "скорректирован", "скорректирована", "скорректировано", "скорректированы", "скособочен", "скособочена", "скособочено", "скособочены", "скошен", "скошена", "скошено", "скошены", "скрашен", "скрашена", "скрашено", "скрашены", "скреплен", "скреплена", "скреплено", "скреплены", "скрещен", "скрещена", "скрещено", "скрещены", "скривлен", "скривлена", "скривлено", "скривлены", "скроен", "скроена", "скроено", "скроены", "скручен", "скручена", "скручено", "скручены", "скрыт", "скрыта", "скрыто", "скрыты", "скрючен", "скрючена", "скрючено", "скрючены", "скуплен", "скуплена", "скуплено", "скуплены", "скушан", "скушана", "скушано", "скушаны", "слажен", "слажена", "слажено", "слажены", "слеплен", "слеплена", "слеплено", "слеплены", "слизан", "слизана", "слизано", "слизаны", "слизнут", "слизнута", "слизнуто", "слизнуты", "слит", "слита", "слито", "слиты", "сличен", "сличена", "сличено", "сличены", "словлен", "словлена", "словлено", "словлены", "сложен", "сложена", "сложено", "сложены", "сломан", "сломана", "сломано", "сломаны", "сломлен", "сломлена", "сломлено", "сломлены", "слопан", "слопана", "слопано", "слопаны", "слуплен", "слуплена", "слуплено", "слуплены", "смазана", "смазано", "смазаны", "смастерен", "смастерена", "смастерено", "смастерены", "сменен", "сменена", "сменено", "сменены", "сменян", "сменяна", "сменяно", "сменяны", "смерен", "смерена", "смерено", "смерены", "сметен", "сметена", "сметено", "сметены", "смешан", "смешана", "смешано", "смешаны", "смещен", "смещена", "смещено", "смещены", "смирен", "смирена", "смирено", "смирены", "смоделирован", "смоделирована", "смоделировано", "смоделированы", "смонтирован", "смонтирована", "смонтировано", "смонтированы", "сморен", "сморена", "сморено", "сморены", "сморожен", "сморожена", "сморожено", "сморожены", "сморщен", "сморщена", "сморщено", "сморщены", "смотан", "смотана", "смотано", "смотаны", "смочен", "смочена", "смочено", "смочены", "смыт", "смыта", "смыто", "смыты", "смягчен", "смягчена", "смягчено", "смягчены", "смят", "смята", "смято", "смяты", "снабжен", "снабжена", "снабжено", "снабжены", "снаряжен", "снаряжена", "снаряжено", "снаряжены", "снесен", "снесена", "снесено", "снесены", "снижен", "снижена", "снижено", "снижены", "снискан", "снискана", "снискано", "снисканы", "сношен", "сношена", "сношено", "сношены", "снят", "снята", "снято", "сняты", "соблазнен", "соблазнена", "соблазнено", "соблазнены", "соблюден", "соблюдена", "соблюдено", "соблюдены", "собран", "собрана", "собрано", "собраны", "совершен", "совершена", "совершено", "совершены", "совмещен", "совмещена", "совмещено", "совмещены", "совращен", "совращена", "совращено", "совращены", "согласован", "согласована", "согласовано", "согласованы", "согнан", "согнана", "согнано", "согнаны", "согнут", "согнута", "согнуто", "согнуты", "согрет", "согрета", "согрето", "согреты", "содеян", "содеяна", "содеяно", "содеяны", "содран", "содрана", "содрано", "содраны", "соединен", "соединена", "соединено", "соединены", "сожжен", "сожжена", "сожжено", "сожжены", "сожран", "сожрана", "сожрано", "сожраны", "созван", "созвана", "созвано", "созваны", "сокращен", "сокращена", "сокращено", "сокращены", "сокрушен", "сокрушена", "сокрушено", "сокрушены", "сокрыт", "сокрыта", "сокрыто", "сокрыты", "соображен", "соображена", "соображено", "соображены", "сообщен", "сообщена", "сообщено", "сообщены", "сооружен", "сооружена", "сооружено", "сооружены", "соотнесен", "соотнесена", "соотнесено", "соотнесены", "сопоставлен", "сопоставлена", "сопоставлено", "сопоставлены", "сопровожден", "сопровождена", "сопровождено", "сопровождены", "сопряжен", "сопряжена", "сопряжено", "сопряжены", "сорван", "сорвана", "сорвано", "сорваны", "сориентирован", "сориентирована", "сориентировано", "сориентированы", "сосватан", "сосватана", "сосватано", "сосватаны", "соскребен", "соскребена", "соскребено", "соскребены", "сослан", "сослана", "сослано", "сосланы", "сослужен", "сослужена", "сослужено", "сослужены", "сосредоточен", "сосредоточена", "сосредоточено", "сосредоточены", "составлен", "составлена", "составлено", "составлены", "состарен", "состарена", "состарено", "состарены", "сострижен", "сострижена", "сострижено", "сострижены", "состроен", "состроена", "состроено", "состроены", "состряпан", "состряпана", "состряпано", "состряпаны", "состыкован", "состыкована", "состыковано", "состыкованы", "сосчитан", "сосчитана", "сосчитано", "сосчитаны", "сотворен", "сотворена", "сотворено", "сотворены", "соткан", "соткана", "соткано", "сотканы", "сотрясен", "сотрясена", "сотрясено", "сотрясены", "сохранен", "сохранена", "сохранено", "сохранены", "сочинен", "сочинена", "сочинено", "сочинены", "сочтен", "сочтена", "сочтено", "сочтены", "спалена", "спалено", "спалены", "спасен", "спасена", "спасено", "спасены", "спаян", "спаяна", "спаяно", "спаяны", "спеленан", "спеленана", "спеленано", "спеленаны", "сперт", "сперта", "сперто", "сперты", "спет", "спета", "спето", "спеты", "специализирован", "специализирована", "специализировано", "специализированы", "спешен", "спешена", "спешено", "спешены", "спилен", "спилена", "спилено", "спилены", "списан", "списана", "списано", "списаны", "спихнут", "спихнута", "спихнуто", "спихнуты", "сплавлен", "сплавлена", "сплавлено", "сплавлены", "спланирован", "спланирована", "спланировано", "спланированы", "сплетен", "сплетена", "сплетено", "сплетены", "сплочен", "сплочена", "сплочено", "сплочены", "сплюнут", "сплюнута", "сплюнуто", "сплюнуты", "сплющен", "сплющена", "сплющено", "сплющены", "сподоблен", "сподоблена", "сподоблено", "сподоблены", "сполоснут", "сполоснута", "сполоснуто", "сполоснуты", "спорот", "спорота", "спорото", "спороты", "справлен", "справлена", "справлено", "справлены", "спрессован", "спрессована", "спрессовано", "спрессованы", "спроважен", "спроважена", "спроважено", "спроважены", "спровоцирован", "спровоцирована", "спровоцировано", "спровоцированы", "спроектирован", "спроектирована", "спроектировано", "спроектированы", "спроецирован", "спроецирована", "спроецировано", "спроецированы", "спрошен", "спрошена", "спрошено", "спрошены", "спрятан", "спрятана", "спрятано", "спрятаны", "спущен", "спущена", "спущено", "спущены", "сработан", "сработана", "сработано", "сработаны", "сравнен", "сравнена", "сравнено", "сравнены", "сражен", "сражена", "сражено", "сражены", "сращен", "сращена", "сращено", "сращены", "срезан", "срезана", "срезано", "срезаны", "срисован", "срисована", "срисовано", "срисованы", "сровнян", "сровняна", "сровняно", "сровняны", "срубан", "срубана", "срубано", "срубаны", "срублен", "срублена", "срублено", "срублены", "ссажен", "ссажена", "ссажено", "ссажены", "ссужен", "ссужена", "ссужено", "ссужены", "стабилизирован", "стабилизирована", "стабилизировано", "стабилизированы", "станцеван", "станцевана", "станцевано", "станцеваны", "стащен", "стащена", "стащено", "стащены", "стерилизован", "стерилизована", "стерилизовано", "стерилизованы", "стерт", "стерта", "стерто", "стерты", "стесан", "стесана", "стесано", "стесаны", "стеснен", "стеснена", "стеснено", "стеснены", "стилизован", "стилизована", "стилизовано", "стилизованы", "стимулирован", "стимулирована", "стимулировано", "стимулированы", "стиснут", "стиснута", "стиснуто", "стиснуты", "столкнут", "столкнута", "столкнуто", "столкнуты", "стоптан", "стоптана", "стоптано", "стоптаны", "сточен", "сточена", "сточено", "сточены", "стравлен", "стравлена", "стравлено", "стравлены", "стрельнут", "стрельнута", "стрельнуто", "стрельнуты", "стреножен", "стреножена", "стреножено", "стреножены", "структурирован", "структурирована", "структурировано", "структурированы", "стряхнут", "стряхнута", "стряхнуто", "стряхнуты", "стукнут", "стукнута", "стукнуто", "стукнуты", "стырен", "стырена", "стырено", "стырены", "стянут", "стянута", "стянуто", "стянуты", "сублимирован", "сублимирована", "сублимировано", "сублимированы", "субсидирован", "субсидирована", "субсидировано", "субсидированы", "суммирован", "суммирована", "суммировано", "суммированы", "сунут", "сунута", "сунуто", "сунуты", "сфабрикован", "сфабрикована", "сфабриковано", "сфабрикованы", "сфокусирован", "сфокусирована", "сфокусировано", "сфокусированы", "сформирован", "сформирована", "сформировано", "сформированы", "сформулирован", "сформулирована", "сформулировано", "сформулированы", "сфотографирован", "сфотографирована", "сфотографировано", "сфотографированы", "схвачен", "схвачена", "схвачено", "схвачены", "схлопотан", "схлопотана", "схлопотано", "схлопотаны", "схоронен", "схоронена", "схоронено", "схоронены", "сцапан", "сцапана", "сцапано", "сцапаны", "сцементирован", "сцементирована", "сцементировано", "сцементированы", "сцеплен", "сцеплена", "сцеплено", "сцеплены", "сшит", "сшита", "сшито", "сшиты", "сыгран", "сыграна", "сыграно", "сыграны", "сэкономлен", "сэкономлена", "сэкономлено", "сэкономлены", "таранен", "таранена", "таранено", "таранены", "татуирован", "татуирована", "татуировано", "татуированы", "телеграфирован", "телеграфирована", "телеграфировано", "телеграфированы", "терроризирован", "терроризирована", "терроризировано", "терроризированы", "тиражирован", "тиражирована", "тиражировано", "тиражированы", "титулована", "титуловано", "титулованы", "ткнут", "ткнута", "ткнуто", "ткнуты", "толкнут", "толкнута", "толкнуто", "толкнуты", "тонизирован", "тонизирована", "тонизировано", "тонизированы", "тонирован", "тонирована", "тонировано", "тонированы", "торпедирован", "торпедирована", "торпедировано", "торпедированы", "травмирован", "травмирована", "травмировано", "травмированы", "транслирован", "транслирована", "транслировано", "транслированы", "транспортирован", "транспортирована", "транспортировано", "транспортированы", "трансформирован", "трансформирована", "трансформировано", "трансформированы", "трассирован", "трассирована", "трассировано", "трассированы", "трахнут", "трахнута", "трахнуто", "трахнуты", "треснут", "треснута", "треснуто", "треснуты", "тронут", "тронута", "тронуто", "тронуты", "трудоустроен", "трудоустроена", "трудоустроено", "трудоустроены", "турнут", "турнута", "турнуто", "турнуты", "тюкнут", "тюкнута", "тюкнуто", "тюкнуты", "тяпнут", "тяпнута", "тяпнуто", "тяпнуты", "убавлен", "убавлена", "убавлено", "убавлены", "убаюкан", "убаюкана", "убаюкано", "убаюканы", "убежден", "убеждена", "убеждено", "убеждены", "убелен", "убелена", "убелено", "убелены", "убережен", "убережена", "убережено", "убережены", "убит", "убита", "убито", "убиты", "ублажен", "ублажена", "ублажено", "ублажены", "убран", "убрана", "убрано", "убраны", "убыстрен", "убыстрена", "убыстрено", "убыстрены", "уважен", "уважена", "уважено", "уважены", "уварен", "уварена", "уварено", "уварены", "уведен", "уведена", "уведено", "уведены", "уведомлен", "уведомлена", "уведомлено", "уведомлены", "увезен", "увезена", "увезено", "увезены", "увековечен", "увековечена", "увековечено", "увековечены", "увеличен", "увеличена", "увеличено", "увеличены", "увенчан", "увенчана", "увенчано", "увенчаны", "уверен", "уверена", "уверено", "уверены", "увешан", "увешана", "увешано", "увешаны", "увешен", "увешена", "увешено", "увешены", "увидан", "увидана", "увидано", "увиданы", "увиден", "увидена", "увидено", "увидены", "увит", "увита", "увито", "увиты", "увлажнен", "увлажнена", "увлажнено", "увлажнены", "увлечен", "увлечена", "увлечено", "увлечены", "увожен", "увожена", "увожено", "увожены", "уволен", "уволена", "уволено", "уволены", "уворован", "уворована", "уворовано", "уворованы", "увязан", "увязана", "увязано", "увязаны", "угадан", "угадана", "угадано", "угаданы", "углублен", "углублена", "углублено", "углублены", "угляжен", "угляжена", "угляжено", "угляжены", "угнан", "угнана", "угнано", "угнаны", "угнетен", "угнетена", "угнетено", "угнетены", "уговорен", "уговорена", "уговорено", "уговорены", "угомонен", "угомонена", "угомонено", "угомонены", "угонян", "угоняна", "угоняно", "угоняны", "угоразжен", "угоразжена", "угоразжено", "угоразжены", "уготован", "уготована", "уготовано", "уготованы", "уготовлен", "уготовлена", "уготовлено", "уготовлены", "угощен", "угощена", "угощено", "угощены", "угроблен", "угроблена", "угроблено", "угроблены", "угрохан", "угрохана", "угрохано", "угроханы", "удавлен", "удавлена", "удавлено", "удавлены", "удален", "удалена", "удалено", "удалены", "ударен", "ударена", "ударено", "ударены", "удвоен", "удвоена", "удвоено", "удвоены", "уделан", "уделана", "уделано", "уделаны", "уделен", "уделена", "уделено", "уделены", "удержан", "удержана", "удержано", "удержаны", "удесятерен", "удесятерена", "удесятерено", "удесятерены", "удешевлен", "удешевлена", "удешевлено", "удешевлены", "удивлен", "удивлена", "удивлено", "удивлены", "удлинен", "удлинена", "удлинено", "удлинены", "удобрен", "удобрена", "удобрено", "удобрены", "удовлетворен", "удовлетворена", "удовлетворено", "удовлетворены", "удостоверен", "удостоверена", "удостоверено", "удостоверены", "удостоен", "удостоена", "удостоено", "удостоены", "удочерен", "удочерена", "удочерено", "удочерены", "удружен", "удружена", "удружено", "удружены", "удручен", "удручена", "удручено", "удручены", "удуман", "удумана", "удумано", "удуманы", "удушен", "удушена", "удушено", "удушены", "ужален", "ужалена", "ужалено", "ужалены", "ужаснут", "ужаснута", "ужаснуто", "ужаснуты", "ужат", "ужата", "ужато", "ужаты", "узаконен", "узаконена", "узаконено", "узаконены", "узнан", "узнана", "узнано", "узнаны", "узурпирован", "узурпирована", "узурпировано", "узурпированы", "указан", "указана", "указано", "указаны", "укатан", "укатана", "укатано", "укатаны", "укачан", "укачана", "укачано", "укачаны", "укачен", "укачена", "укачено", "укачены", "укокошен", "укокошена", "укокошено", "укокошены", "уколот", "уколота", "уколото", "уколоты", "укомплектован", "укомплектована", "укомплектовано", "укомплектованы", "укорен", "укорена", "укорено", "укорены", "укоренен", "укоренена", "укоренено", "укоренены", "укорочен", "укорочена", "укорочено", "укорочены", "украден", "украдена", "украдено", "украдены", "украшен", "украшена", "украшено", "украшены", "укреплен", "укреплена", "укреплено", "укреплены", "укрощен", "укрощена", "укрощено", "укрощены", "укрупнен", "укрупнена", "укрупнено", "укрупнены", "укрыт", "укрыта", "укрыто", "укрыты", "укупорен", "укупорена", "укупорено", "укупорены", "укутан", "укутана", "укутано", "укутаны", "укушен", "укушена", "укушено", "укушены", "улажен", "улажена", "улажено", "улажены", "уличен", "уличена", "уличено", "уличены", "уловлен", "уловлена", "уловлено", "уловлены", "уложен", "уложена", "уложено", "уложены", "уломан", "уломана", "уломано", "уломаны", "улучен", "улучена", "улучено", "улучены", "улучшен", "улучшена", "улучшено", "улучшены", "умален", "умалена", "умалено", "умалены", "уменьшен", "уменьшена", "уменьшено", "уменьшены", "умерен", "умерена", "умерено", "умерены", "умерщвлен", "умерщвлена", "умерщвлено", "умерщвлены", "умещен", "умещена", "умещено", "умещены", "умилен", "умилена", "умилено", "умилены", "умиротворен", "умиротворена", "умиротворено", "умиротворены", "умножен", "умножена", "умножено", "умножены", "умолен", "умолена", "умолено", "умолены", "уморен", "уморена", "уморено", "уморены", "умотан", "умотана", "умотано", "умотаны", "умудрен", "умудрена", "умудрено", "умудрены", "умыкнут", "умыкнута", "умыкнуто", "умыкнуты", "умыт", "умыта", "умыто", "умыты", "умят", "умята", "умято", "умяты", "унаследован", "унаследована", "унаследовано", "унаследованы", "унесен", "унесена", "унесено", "унесены", "унижен", "унижена", "унижено", "унижены", "унизан", "унизана", "унизано", "унизаны", "унифицирован", "унифицирована", "унифицировано", "унифицированы", "уничтожен", "уничтожена", "уничтожено", "уничтожены", "унюхан", "унюхана", "унюхано", "унюханы", "унят", "унята", "унято", "уняты", "упакован", "упакована", "упаковано", "упакованы", "упасен", "упасена", "упасено", "упасены", "упечен", "упечена", "упечено", "упечены", "уплачен", "уплачена", "уплачено", "уплачены", "уплотнен", "уплотнена", "уплотнено", "уплотнены", "уподоблен", "уподоблена", "уподоблено", "уподоблены", "упоен", "упоена", "упоено", "упоены", "упокоен", "упокоена", "упокоено", "упокоены", "уполномочен", "уполномочена", "уполномочено", "уполномочены", "упомнен", "упомнена", "упомнено", "упомнены", "упомянут", "упомянута", "упомянуто", "упомянуты", "упорядочен", "упорядочена", "упорядочено", "упорядочены", "употреблен", "употреблена", "употреблено", "употреблены", "упразднен", "упразднена", "упразднено", "упразднены", "упрежден", "упреждена", "упреждено", "упреждены", "упрекнут", "упрекнута", "упрекнуто", "упрекнуты", "упрочен", "упрочена", "упрочено", "упрочены", "упрошен", "упрошена", "упрошено", "упрошены", "упрощен", "упрощена", "упрощено", "упрощены", "упрятан", "упрятана", "упрятано", "упрятаны", "упущен", "упущена", "упущено", "упущены", "уравновешен", "уравновешена", "уравновешено", "уравновешены", "уравнян", "уравняна", "уравняно", "уравняны", "урегулирован", "урегулирована", "урегулировано", "урегулированы", "урезан", "урезана", "урезано", "урезаны", "урезонен", "урезонена", "урезонено", "урезонены", "уронен", "уронена", "уронено", "уронены", "усажен", "усажена", "усажено", "усажены", "усвоен", "усвоена", "усвоено", "усвоены", "усечен", "усечена", "усечено", "усечены", "усеян", "усеяна", "усеяно", "усеяны", "усижен", "усижена", "усижено", "усижены", "усилен", "усилена", "усилено", "усилены", "ускорен", "ускорена", "ускорено", "ускорены", "услан", "услана", "услано", "усланы", "усложнен", "усложнена", "усложнено", "усложнены", "услыхан", "услыхана", "услыхано", "услыханы", "услышан", "услышана", "услышано", "услышаны", "усмирен", "усмирена", "усмирено", "усмирены", "усмотрен", "усмотрена", "усмотрено", "усмотрены", "усовершенствован", "усовершенствована", "усовершенствовано", "усовершенствованы", "успокоен", "успокоена", "успокоено", "успокоены", "усреднен", "усреднена", "усреднено", "усреднены", "уставлен", "уставлена", "уставлено", "уставлены", "установлен", "установлена", "установлено", "установлены", "устлан", "устлана", "устлано", "устланы", "устранен", "устранена", "устранено", "устранены", "устрашен", "устрашена", "устрашено", "устрашены", "устремлен", "устремлена", "устремлено", "устремлены", "устроен", "устроена", "устроено", "устроены", "уступлен", "уступлена", "уступлено", "уступлены", "усугублен", "усугублена", "усугублено", "усугублены", "усыновлен", "усыновлена", "усыновлено", "усыновлены", "усыплен", "усыплена", "усыплено", "усыплены", "утаен", "утаена", "утаено", "утаены", "утащен", "утащена", "утащено", "утащены", "утвержден", "утверждена", "утверждено", "утверждены", "утеплен", "утеплена", "утеплено", "утеплены", "утерт", "утерта", "утерто", "утерты", "утерян", "утеряна", "утеряно", "утеряны", "утешен", "утешена", "утешено", "утешены", "утилизирован", "утилизирована", "утилизировано", "утилизированы", "утихомирен", "утихомирена", "утихомирено", "утихомирены", "утолен", "утолена", "утолено", "утолены", "утопан", "утопана", "утопано", "утопаны", "утоплен", "утоплена", "утоплено", "утоплены", "утоптан", "утоптана", "утоптано", "утоптаны", "уточнен", "уточнена", "уточнено", "уточнены", "утрамбован", "утрамбована", "утрамбовано", "утрамбованы", "утрачен", "утрачена", "утрачено", "утрачены", "утрирован", "утрирована", "утрировано", "утрированы", "утроен", "утроена", "утроено", "утроены", "утрясен", "утрясена", "утрясено", "утрясены", "утыкан", "утыкана", "утыкано", "утыканы", "утяжелен", "утяжелена", "утяжелено", "утяжелены", "утянут", "утянута", "утянуто", "утянуты", "ухвачен", "ухвачена", "ухвачено", "ухвачены", "ухлопан", "ухлопана", "ухлопано", "ухлопаны", "ухожен", "ухожена", "ухожено", "ухожены", "ухудшен", "ухудшена", "ухудшено", "ухудшены", "уценен", "уценена", "уценено", "уценены", "учинен", "учинена", "учинено", "учинены", "учрежден", "учреждена", "учреждено", "учреждены", "учтен", "учтена", "учтено", "учтены", "учуян", "учуяна", "учуяно", "учуяны", "ушит", "ушита", "ушито", "ушиты", "ущемлен", "ущемлена", "ущемлено", "ущемлены", "ущипнут", "ущипнута", "ущипнуто", "ущипнуты", "уязвлен", "уязвлена", "уязвлено", "уязвлены", "уяснен", "уяснена", "уяснено", "уяснены", "фальсифицирован", "фальсифицирована", "фальсифицировано", "фальсифицированы", "фиксирован", "фиксирована", "фиксировано", "фиксированы", "финансирован", "финансирована", "финансировано", "финансированы", "фланкирован", "фланкирована", "фланкировано", "фланкированы", "форсирован", "форсирована", "форсировано", "форсированы", "характеризован", "характеризована", "характеризовано", "характеризованы", "хлестнут", "хлестнута", "хлестнуто", "хлестнуты", "хлопнут", "хлопнута", "хлопнуто", "хлопнуты", "цапнут", "цапнута", "цапнуто", "цапнуты", "царапнут", "царапнута", "царапнуто", "царапнуты", "централизован", "централизована", "централизовано", "централизованы", "центрифугирован", "центрифугирована", "центрифугировано", "центрифугированы", "цивилизован", "цивилизована", "цивилизовано", "цивилизованы", "черкнут", "черкнута", "черкнуто", "черкнуты", "четвертован", "четвертована", "четвертовано", "четвертованы", "чмокнут", "чмокнута", "чмокнуто", "чмокнуты", "шарахнут", "шарахнута", "шарахнуто", "шарахнуты", "швырнут", "швырнута", "швырнуто", "швырнуты", "шлепнут", "шлепнута", "шлепнуто", "шлепнуты", "шмякнут", "шмякнута", "шмякнуто", "шмякнуты", "шокирован", "шокирована", "шокировано", "шокированы", "щелкнут", "щелкнута", "щелкнуто", "щелкнуты", "эвакуирован", "эвакуирована", "эвакуировано", "эвакуированы", "экипирован", "экипирована", "экипировано", "экипированы", "экранизирован", "экранизирована", "экранизировано", "экранизированы", "экранирован", "экранирована", "экранировано", "экранированы", "экспонирован", "экспонирована", "экспонировано", "экспонированы", "экспортирован", "экспортирована", "экспортировано", "экспортированы", "экспроприирован", "экспроприирована", "экспроприировано", "экспроприированы", "экстрагирован", "экстрагирована", "экстрагировано", "экстрагированы", "экстраполирован", "экстраполирована", "экстраполировано", "экстраполированы", "эмитирован", "эмитирована", "эмитировано", "эмитированы", "эпатирован", "эпатирована", "эпатировано", "эпатированы", "этапирован", "этапирована", "этапировано", "этапированы", "эшелонирован", "эшелонирована", "эшелонировано", "эшелонированы", "явлен", "явлена", "явлено", "явлены"], Cet = ["благословлён", "введён", "ввезён", "вдохновлён", "вживлён", "взбешён", "взбодрён", "взведён", "взвихрён", "взгромозждён", "взращён", "взрыхлён", "видоизменён", "включён", "вколочён", "вкраплён", "вкушён", "вменён", "вмещён", "внедрён", "внесён", "внушён", "вовлечён", "водворён", "водружён", "возблагодарён", "возбуждён", "возведён", "возвещён", "возвращён", "возглашён", "возлюблён", "возмещён", "возмущён", "вознаграждён", "вознесён", "возобновлён", "возомнён", "возрождён", "вонждён", "воображён", "воодушевлён", "вооружён", "воплощён", "вопрошён", "ворочён", "воскрешён", "воспалён", "воспламенён", "воспрещён", "воспроизведён", "восстановлён", "восхищён", "вперён", "впечатлён", "вплетён", "впряжён", "вразумлён", "врублён", "вручён", "вселён", "вскипячён", "вскормлён", "вскружён", "всполошён", "выведён", "доведён", "довезён", "довершён", "догляжён", "договорён", "дозволён", "донесён", "допечён", "дотерплён", "завезён", "завершён", "завлечён", "завожён", "заворожён", "загашён", "заглублён", "заглушён", "заговорён", "загорожён", "загромозждён", "загружён", "загрязнён", "задурён", "задушён", "задымлён", "заземлён", "зазубрён", "закалён", "заклеймён", "заключён", "закопчё", "закреплён", "закруглён", "замедлён", "заменён", "заметён", "замещён", "заморён", "занесён", "заострён", "запалён", "запасён", "запечатлён", "запечён", "заплетён", "заполонён", "запорошён", "запрещён", "запримечён", "запрошён", "запряжён", "запылён", "заражён", "заряжён", "заселён", "заслонён", "засолён", "застолблён", "застопорён", "затаён", "затворён", "затемнён", "затенён", "затмлён", "затруднён", "захламлён", "зацеплён", "зачехлён", "зачищён", "зачтён", "зашевелён", "защемлён", "защищён", "избавлён", "изборозждён", "изведён", "извещён", "извинён", "извлечён", "извращён", "измельчён", "изменён", "измышлён", "изнурён", "изобличён", "изображён", "изобретён", "изречён", "изумлён", "изъявлён", "искажён", "исключён", "искоренён", "искривлён", "искуплён", "испепелён", "испечён", "испещрён", "иссечён", "иссушён", "истончён", "истощён", "истреблён", "казнён", "крещён", "лишён", "наводнён", "навострён", "наговорён", "награждён", "нагромозждён", "наделён", "накалён", "наклонён", "наметён", "нанесён", "напечён", "наплетён", "напоён", "напряжён", "наречён", "нарождён", "насаждён", "населён", "насмешён", "насторожён", "натравлён", "невзлюблён", "недогляжён", "недоговорён", "недооценён", "перечтён", "пленён", "побеждён", "побелён", "побережён", "погашён", "поглощён", "погребён", "погружён", "подведён", "подвезён", "подговорён", "подгребён", "подключён", "подкреплён", "подкручён", "подменён", "поднесён", "подожжён", "подпалён", "подразделён", "подрублён", "подрулён", "подселён", "подсечён", "подслащён", "подсоединён", "подстелён", "подстережён", "подтверждён", "подцеплён", "подчинён", "подчищён", "поздравлён", "позолочён", "покорён", "покривлён", "помещён", "понесён", "поощрён", "порабощён", "поражён", "порешён", "порождён", "посвящён", "посеребрён", "посмотрён", "посрамлён", "постановлён", "потереблён", "похоронён", "почтён", "пошевелён", "пощажён", "пояснён", "превращён", "прегражён", "предварён", "предвосхищён", "предопределён", "предостережён", "предотвращён", "предохранён", "предпочтён", "предречён", "предрешён", "предупреждён", "презрён", "преклонён", "прекращён", "преломлён", "прельщён", "преображён", "преодолён", "преподнесён", "пресечён", "преступлён", "претворён", "претерплён", "прибережён", "приближён", "приведён", "привезён", "привлечён", "привнесён", "приворожён", "пригвозжён", "приглашён", "приглушён", "приговорён", "приголублён", "приземлён", "приклонён", "прикреплён", "применён", "принаряжён", "принесён", "принуждён", "приободрён", "приобретён", "приобщён", "приостановлён", "приотворён", "припасён", "припечён", "приплетён", "приручён", "прислонён", "присмотрён", "присовокуплён", "присоединён", "присочинён", "приспособлён", "приструнён", "присуждён", "притворён", "провезён", "проговорён", "продешевлён", "продлён", "прозвонён", "произведён", "произнесён", "прокалён", "прокипячён", "прокопчён", "пронзён", "пропылён", "просверлён", "просветлён", "просвещён", "просечён", "просквожён", "проторён", "прочтён", "прощён", "проявлён", "прояснён", "разбережён", "разбомблён", "разведён", "развезён", "развеселён", "разворошён", "развращён", "разглашён", "разговорён", "разгорожён", "разгорячён", "разграфлён", "разгребён", "разгромлён", "разделён", "раздражён", "раздразнён", "раздроблён", "разлеплён", "разлучён", "размещён", "размозжён", "разморён", "размягчён", "разнесён", "разоблачён", "разобщён", "разожжён", "разозлён", "разорён", "разоружён", "разрежён", "разрешён", "разубеждён", "разъединён", "разъярён", "разъяснён", "раскалён", "расклешён", "раскрепощён", "раскроён", "распалён", "распотрошён", "распределён", "распространён", "распряжён", "распрямлён", "рассмешён", "растворён", "растлён", "растормошён", "растрясён", "расценён", "расцеплён", "расчленён", "расшевелён", "расщеплён", "сбережён", "свершён", "сгноён", "сгущён", "сожжён", "склонён", "скреплён", "скрещён", "скривлён", "скручён", "сличён", "словлён", "сметён", "смещён", "смущён", "смягчён", "снабжён", "снаряжён", "снесён", "соблазнён", "соблюдён", "совершён", "совмещён", "совращён", "соединён", "сокращён", "сокрушён", "соображён", "сообщён", "сооружён", "соотнесён", "сопоставлён", "сопровождён", "сопряжён", "сотворён", "сотрясён", "сохранён", "сочинён", "сочтён", "спалён", "сплетён", "сравнён", "сражён", "стеснён", "съязвлён", "убеждён", "убелён", "убережён", "ублажён", "убыстрён", "уведён", "увезён", "увлажнён", "увлечён", "углублён", "угнетён", "уговорён", "угомонён", "угощён", "удесятерён", "удешевлён", "удлинён", "удобрён", "удовлетворён", "удочерён", "удручён", "укоренён", "укреплён", "укрощён", "укрупнён", "уличён", "улучён", "умалён", "умерщвлён", "умещён", "умилён", "умиротворён", "умолён", "уморён", "умудрён", "унесён", "упасён", "упечён", "уплотнён", "упоён", "употреблён", "упразднён", "упреждён", "упрощён", "усечён", "усложнён", "усреднён", "устранён", "устрашён", "устремлён", "усыновлён", "усыплён", "утаён", "утверждён", "утеплён", "утолён", "утомлён", "уточнён", "утрясён", "утяжелён", "учреждён", "учтён", "ущемлён", "уязвлён", "уяснён", "явлён"], Pet = ["ввёрнут", "ввёрнута", "ввёрнуто", "ввёрнуты", "вздёрнут", "вздёрнута", "вздёрнуто", "вздёрнуты", "втёрт", "втёрта", "втёрто", "втёрты", "завёрнут", "завёрнута", "завёрнуто", "завёрнуты", "задёрнут", "задёрнута", "задёрнуто", "задёрнуты", "замётан", "замётана", "замётано", "замётаны", "запелёнан", "запелёнана", "запелёнано", "запелёнаны", "заплёван", "заплёвана", "заплёвано", "заплёваны", "затёрт", "затёрта", "затёрто", "затёрты", "зачёркнут", "зачёркнута", "зачёркнуто", "зачёркнуты", "зачёрпнут", "зачёрпнута", "зачёрпнуто", "зачёрпнуты", "зачёсан", "зачёсана", "зачёсано", "зачёсаны", "зашёптан", "зашёптана", "зашёптано", "зашёптаны", "защёлкнут", "защёлкнута", "защёлкнуто", "защёлкнуты", "искорёжен", "искорёжена", "искорёжено", "искорёжены", "истёрт", "истёрта", "истёрто", "истёрты", "исчёркан", "исчёркана", "исчёркано", "исчёрканы", "исчёрпан", "исчёрпана", "исчёрпано", "исчёрпаны", "навёрнут", "навёрнута", "навёрнуто", "навёрнуты", "намётан", "намётана", "намётано", "намётаны", "наплёван", "наплёвана", "наплёвано", "наплёваны", "натёрт", "натёрта", "натёрто", "натёрты", "начёртан", "начёртана", "начёртано", "начёртаны", "начёрчен", "начёрчена", "начёрчено", "начёрчены", "нашёптан", "нашёптана", "нашёптано", "нашёптаны", "перечёркнут", "перечёркнута", "перечёркнуто", "перечёркнуты", "повёрнут", "повёрнута", "повёрнуто", "повёрнуты", "подвёрнут", "подвёрнута", "подвёрнуто", "подвёрнуты", "подёрнут", "подёрнута", "подёрнуто", "подёрнуты", "поддёрнут", "поддёрнута", "поддёрнуто", "поддёрнуты", "подмётан", "подмётана", "подмётано", "подмётаны", "подпёрт", "подпёрта", "подпёрто", "подпёрты", "подчёркнут", "подчёркнута", "подчёркнуто", "подчёркнуты", "пожёван", "пожёвана", "пожёвано", "пожёваны", "покорёжен", "покорёжена", "покорёжено", "покорёжены", "потёрт", "потёрта", "потёрто", "потёрты", "пощёлкан", "пощёлкана", "пощёлкано", "пощёлканы", "почёрпнут", "почёрпнута", "почёрпнуто", "почёрпнуты", "почёсан", "почёсана", "почёсано", "почёсаны", "притёрт", "притёрта", "притёрто", "притёрты", "причёсан", "причёсана", "причёсано", "причёсаны", "прищёлкнут", "прищёлкнута", "прищёлкнуто", "прищёлкнуты", "провёрнут", "провёрнута", "провёрнуто", "провёрнуты", "продёрнут", "продёрнута", "продёрнуто", "продёрнуты", "прожёван", "прожёвана", "прожёвано", "прожёваны", "простёрт", "простёрта", "простёрто", "простёрты", "протёрт", "протёрта", "протёрто", "протёрты", "прочёсан", "прочёсана", "прочёсано", "прочёсаны", "прошёптан", "прошёптана", "прошёптано", "прошёптаны", "развёрнут", "развёрнута", "развёрнуто", "развёрнуты", "раздёрнут", "раздёрнута", "раздёрнуто", "раздёрнуты", "разжёван", "разжёвана", "разжёвано", "разжёваны", "размётан", "размётана", "размётано", "размётаны", "распростёрт", "распростёрта", "распростёрто", "распростёрты", "растёрт", "растёрта", "растёрто", "растёрты", "расчёсан", "расчёсана", "расчёсано", "расчёсаны", "свёрнут", "свёрнута", "свёрнуто", "свёрнуты", "свёрстан", "свёрстана", "свёрстано", "свёрстаны", "сдёрнут", "сдёрнута", "сдёрнуто", "сдёрнуты", "сжёван", "сжёвана", "сжёвано", "сжёваны", "склёван", "склёвана", "склёвано", "склёваны", "спелёнан", "спелёнана", "спелёнано", "спелёнаны", "стёрт", "стёрта", "стёрто", "стёрты", "стёсан", "стёсана", "стёсано", "стёсаны", "утёрт", "утёрта", "утёрто", "утёрты", "утомлён", "утомлёна", "утомлёно", "утомлёны", "чёркнут", "чёркнута", "чёркнуто", "чёркнуты", "щёлкнут", "щёлкнута", "щёлкнуто", "щёлкнуты"], Ret = ["взбудоражен", "взволнован", "возбужден", "возмущен", "воспитан", "востребован", "выдрессирован", "газирован", "доношен", "заболочен", "заинтересован", "заинтригован", "закален", "зачарован", "зашифрован", "изогнут", "изогнута", "изогнуто", "изогнуты", "коррумпирован", "мотивирован", "помят", "помята", "помято", "помяты", "поношен", "потаскан", "потаскана", "потаскано", "потасканы", "сгорблен", "сконфужен", "сконфужена", "сконфужено", "сконфужены", "смазан", "титулован", "утомлен", "утомлена", "утомлено", "утомлены"], Det = zd.all = Iet.concat(Cet, Pet, Ret);
zd.default = Det;
Object.defineProperty(Aj, "__esModule", {
  value: !0
});
Aj.default = Fet;
var Net = ee, Let = Met(zd);
function Met(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  areWordsInSentence: qet
} = Net.languageProcessing;
function Fet(e) {
  return qet(Let.default, e);
}
var Tj = {};
Object.defineProperty(Tj, "__esModule", {
  value: !0
});
Tj.default = Uet;
var Bet = ee;
const {
  formatNumber: Wet
} = Bet.helpers;
function Uet(e) {
  const a = 206.835 - 1.3 * e.numberOfWords / e.numberOfSentences - 60.1 * e.numberOfSyllables / e.numberOfWords;
  return Wet(a);
}
Object.defineProperty(kj, "__esModule", {
  value: !0
});
var Z8 = kj.default = void 0, Het = ee, Get = mi(fb), Vet = Jn, Ket = mi(Rr), Yet = mi(yb), Qet = mi(zet), Xet = mi(zb), Zet = mi(bb), Jet = mi(_j), eat = mi(Aj), aat = mi(Tj);
function mi(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: tat
} = Het.languageProcessing;
let nat = class extends tat {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), Object.assign(this.config, {
      language: "ru",
      passiveConstructionType: "morphological",
      firstWordExceptions: Get.default,
      functionWords: Vet.all,
      transitionWords: Ket.default,
      twoPartTransitionWords: Yet.default,
      syllables: Qet.default,
      fleschReadingEaseScores: Xet.default,
      sentenceLength: Zet.default
    }), Object.assign(this.helpers, {
      getStemmer: Jet.default,
      isPassiveSentence: eat.default,
      fleschReadingScore: aat.default
    });
  }
};
Z8 = kj.default = nat;
var $j = {}, Cp = {};
Object.defineProperty(Cp, "__esModule", {
  value: !0
});
Cp.default = void 0;
Cp.default = ["ktorí", "ktorých", "ktorými", "ktorá", "ktorého", "ktorému", "ktorom", "ktorým", "ktorý", "ktoré", "ktorej", "ktorou", "ktorú", "lebo", "keby", "že", "aby", "alebo", "keďže", "kedže", "lenže", "ale", "nakoľko", "pretože", "či", "ak", "kedy"];
var Gi = {}, Dr = {};
Object.defineProperty(Dr, "__esModule", {
  value: !0
});
Dr.singleWords = Dr.multipleWords = Dr.default = Dr.allWords = void 0;
const rat = Dr.singleWords = ["kvôli", "miesto", "pre", "oproti", "aj", "i", "ani", "ale", "avšak", "však", "preto", "tak", "teda", "hoci", "aby", "ako", "keď", "keďže", "kým", "pokiaľ", "ohľadne", "takto", "tiež ", "potom", "takže", "odtiaľ", "odteraz", "lebo", "akonáhle", "lenže", "okrem", "nakoľko", "pokým", "pretože", "čiže", "jednako", "doteraz", "dosiaľ", "najmä", "napríklad", "napr.", "napokon", "predsa", "určite", "dodatočne", "ďalej", "následne", "napriek", "hlavne", "nakoniec", "medzitým", "inak ", "ináč", "obdobne", "podobne", "predovšetkým", "naozaj", "spočiatku ", "najprv", "najskôr", "stručne", "všeobecne", "samozrejme", "pravdaže", "doposiaľ", "nielen", "než", "síce", "pričom", "až", "jednak", "zato", "nielenže", "ibaže", "skôr", "prv", "hoc", "namiesto", "buďto", "inakšie", "hneď", "kedykoľvek"], sat = Dr.multipleWords = ["ako aj", "ako i", "a tak ďalej", "a tak", "aj tak", "a jednako", "a naopak", "a predsa", "ale jednako", "ale predsa", "a tým", "a to", "i to", "jednako však", "predsa však", "to jest", "a preto", "i keby", "i keď", "čo aj", "keby aj", "pretor, aby", "odvtedy čo", "zatiar čo", "vzhľadom na to, že", "berúc do úvahy, že", "napriek tomu, že", "preto, aby", "za účelom", "za týmto účelom", "skôr či neskôr ", "hneď ako", "len čo", "pokiaľ ide o", "pokiaľ nie", "pokiaľ viem", "po prvé", "čo sa týka", "až do", "až na", "až po", "z tohto dôvodu", "z toho dôvodu", "no predsa", "iba ak", "ak nie", "keď nie", "tobôž nie", "pravdu povediac", "ako napríklad", "okrem toho ", "v podstate", "ako je uvedené ", "v každom prípade", "na rozdiel od", "v porovnaní s", "v oboch prípadoch", "stručne povedané", "inými slovami", "na jednej strane", "na druhej strane", "s týmto cieľom"], iat = Dr.allWords = rat.concat(sat);
Dr.default = iat;
Object.defineProperty(Gi, "__esModule", {
  value: !0
});
Gi.functionWords = Gi.default = Gi.all = void 0;
var oat = Dr, lat = dat(Ba);
function dat(e) {
  return e && e.__esModule ? e : { default: e };
}
const uat = Gi.functionWords = ["to", "sa", "je", "si", "som", "a", "na", "že", "čo", "nie", "v", "ako", "tak", "ale", "by", "s", "mi", "o", "tu", "do", "ja", "sme", "ste", "áno", "z", "len", "ma", "už", "aby", "dobre", "ho", "keď", "ak", "ty", "ti", "za", "ťa", "bol", "pre", "sú", "tam", "prečo", "niečo", "toto", "no", "teraz", "aj", "hej", "mám", "byť", "ich", "bude", "ju", "takže", "ten", "všetko", "tom", "nič", "vás", "kde", "kto", "k", "po", "bolo", "bola", "ešte", "vám", "toho", "alebo", "jej", "má", "môj", "jeho", "máš", "viem", "vieš", "mňa", "tým", "veľmi", "mal", "prosím", "potom", "nikdy", "možno", "od", "nás", "ani", "so", "povedal", "chcem", "neviem", "mu", "ďakujem", "ísť", "vy", "naozaj", "stále", "teba", "pretože", "viac", "chceš", "oh", "nám", "ahoj", "on", "pred", "máme", "moja", "musím", "tie", "vo", "sem", "môžem", "dnes", "budem", "ktorý", "niekto", "práve", "pane", "mali", "pán", "poďme", "všetci", "pozri", "myslíš", "či", "mať", "nemôžem", "asi", "ktoré", "keby", "veľa", "vždy", "tiež", "moje", "poď", "mala", "stalo", "trochu", "my", "ľudia", "tomu", "pri", "deň", "máte", "tú", "musíme", "iba", "tvoj", "tento", "tá", "jeden", "bez", "chcel", "mohol", "veci", "zo", "robiť", "ide", "dobrý", "budeš", "ok", "mnou", "môže", "viete", "kým", "mne", "až", "presne", "môžeš", "dosť", "vážne", "preto", "dobré", "späť", "všetky", "tebou", "urobiť", "deje", "robíš", "vedieť", "prepáč", "vďaka", "však", "musíš", "povedala", "ona", "budeme", "nikto", "kvôli", "lebo", "teda", "vec", "nech", "hneď", "im", "každý", "svoje", "než", "kedy", "tvoja", "prepáčte", "nechcem", "rokov", "choď", "povedz", "potrebujem", "daj", "nemám", "svoju", "samozrejme", "raz", "chce", "takto", "také", "mohli", "preč", "ním", "nejaké", "idem", "spolu", "vlastne", "problém", "musí", "žiadne", "chcete", "vôbec", "lepšie", "vidieť", "môžeme", "urobil", "tvoje", "tebe", "dostať", "prišiel", "hovoriť", "vyzerá", "ktorá", "dlho", "kam", "niekedy", "von", "príliš", "nich", "sám", "celý", "úplne", "tej", "určite", "nuž", "môžete", "pod", "fajn", "váš", "seba", "aký", "nebude", "cez", "niekoho", "u", "všetkých", "aké", "majú", "mojej", "tých", "rýchlo", "taký", "istý", "znamená", "môjho", "tieto", "koľko", "predtým", "medzi", "dať", "tejto", "čom", "chcela", "neho", "ideme", "budú", "dva", "tri", "nebol", "nejaký", "svoj", "podľa", "mohla", "nájsť", "pani", "vaše", "budete", "ľúto", "pozrite", "zajtra", "moju", "hovorí", "ktorú", "túto", "hore", "dostal", "super", "ďalej", "naše", "vedel", "tomto", "náš", "chvíľu", "dal", "proste", "vie", "okej", "jedno", "pohode", "dole", "aspoň", "vaša", "nej", "táto", "jedna", "i", "oni", "robí", "poviem", "nemôžeš", "dve", "ku", "skôr", "ktorí", "radšej", "zlé", "páči", "nami", "dúfam", "skoro", "čože", "ňou", "nemá", "proti", "nemal", "neskôr", "jednu", "iné", "odtiaľto", "nad", "hovoril", "prvý", "vami", "svojho", "musíte", "zdá", "skvelé", "dobrá", "znova", "koho", "och", "minút", "sebe", "nebolo", "musieť", "nebudem", "okolo", "dvaja", "príde", "nemôže", "veľký", "vidíš", "prišli", "tohto", "ideš", "tvoju", "uvidíme", "celé", "sama", "haló", "čokoľvek", "nemáš", "musel", "jedného", "vrátiť", "buď", "potrebujeme", "taká", "nebola", "vonku", "spraviť", "prišla", "moc", "pokiaľ", "skutočne", "žiadny", "svojej", "dám", "malý", "pekne", "co", "ňu", "odísť", "nechať", "inak", "prísť", "zatiaľ", "vtedy", "najlepšie", "sebou", "celú", "možné", "povedali", "iste", "znovu", "dajte", "páni", "predsa", "dobrú", "čím", "istá", "ach", "dokonca", "videli", "žiť", "poďte", "niekde", "ďalší", "iný", "spôsob", "nemáme", "toľko", "ňom", "nemôžeme", "nový", "spravil", "robíte", "zle", "tvojej", "naša", "akoby", "robím", "pekné", "pôjdem", "cestu", "zase", "hodín", "nimi", "oci", "oči", "dá", "okrem", "chápem", "pripravený", "chceli", "konečne", "aká", "ano", "mojom", "mojich", "veľké", "priamo", "počas", "nechceš", "jediný", "týchto", "rozumiem", "zdravím", "môžu", "urobila", "mohlo", "nové", "robil", "chcú", "jednoducho", "choďte", "prípad", "mimo", "nepovedal", "isté", "neskoro", "povedzte", "tvojho", "dostali", "pravdepodobne", "vašu", "vecí", "svojich", "nechcel", "ďalšie", "ze", "nejakú", "týmto", "vziať", "dni", "jo", "päť", "nevieš", "odkiaľ", "malé", "mrzí", "našej", "ďaleko", "úžasné", "nemohol", "nevidel", "okay", "obaja", "všetkým", "dvoch", "nemali", "žiadna", "dní", "dr.", "nemala", "potrebovať", "zostať", "ktorého", "sam", "rovnako", "rokmi", "malo", "vyzeráš", "potrebuješ", "strane", "dňa", "jediná", "oveľa", "urobím", "ó", "zastaviť", "vašej", "nikoho", "najprv", "nevedel", "najlepší", "našich", "takmer", "čau", "dostala", "ktorých", "začal", "nemusíš", "opäť", "urobili", "ktorej", "aha", "stačí", "išiel", "zlý", "čase", "chceme", "začať", "moji", "niekoľko", "nevie", "povieš", "našu", "nemôžete", "naspäť", "pôjdeme", "štyri", "poznáš", "sveta", "robia", "chlape", "rozprávať", "spať", "pekný", "veľká", "nemáte", "nechce", "nakoniec", "ono", "mysli", "všade", "vzal", "blízko", "chcieť", "nášho", "akú", "vášho", "naposledy", "vidíte", "šiel", "odkedy", "neboli", "vedeli", "možnosť", "ah", "stať", "každého", "vnútri", "hodinu", "prvé", "vrátim", "menej", "nehovor", "nebudeš", "čakať", "urob", "žiaden", "um", "odtiaľ", "malá", "musela", "nejako", "okamžite", "mojou", "poslal", "prvá", "záleží", "iného", "ne", "ha", "skvelý", "čoho", "š", "new", "šťastie", "jedlo", "zmysel", "čoskoro", "snažím", "nechajte", "you", "treba", "hodiny", "ocko", "dala", "yeah", "nechal", "zomrel", "pracovať", "madam", "priatelia", "časť", "ruku", "počuť", "telefón", "krv", "zem", "chyba", "mesta", "správy", "práci", "charlie", "láska", "mesto", "jack", "strach", "volám", "školy", "kamoš", "našla", "neboj", "tvár", "počula", "syna", "zavolať", "zemi", "rodinu", "pamätáš", "polícia", "roku", "odišiel", "párty", "verím", "nerob", "skutočnosti", "meste", "zbrane", "dali", "auta", "cesty", "uveriť", "zistiť", "chlapče", "dcéra", "pána", "tou", "zavolám", "dievčatá", "volal", "vypadni", "myslieť", "šťastný", "radi", "chlapík", "hovorila", "tím", "hlavy", "nejde", "cesta", "jasne", "peňazí", "muži", "vrátil", "škole", "pol", "hovoríte", "večeru", "sex", "miesta", "druhý", "odo", "snažil", "michael", "sľubujem", "hovoria", "šéf", "žije", "zachrániť", "šesť", "nikomu", "rovno", "dostane", "dolu", "musia", "výborne", "posledný", "vezmi", "posledné", "jediné", "náhodou", "každú", "dávno", "začína", "jednej", "nevadí", "napríklad", "svojom", "mesiac", "dostanem", "zobrať", "tvojom", "zabudol", "môcť", "často", "existuje", "dostaneme", "povie", "celá", "druhej", "mimochodom", "žiadnu", "pôjde", "nejaká", "snáď", "nechcela", "mesiacov", "ostatní", "navždy", "desať", "museli", "urobíme", "horšie", "keďže", "sami", "najskôr", "robíme", "všetkom", "pozrime", "hovorili", "tvojich", "vezmem", "zober", "nedá", "trošku", "chvíľku", "ktorým", "nemu", "mojím", "lepší", "dáš", "sto", "dvadsať", "devätnásť", "osemnásť", "sedemnásť", "šestnásť", "dvakrát", "pätnásť", "štrnásť", "trinásty", "trinásť", "dvanásty", "dvanásť", "jedenásty", "jedenásť", "desiaty", "deviaty", "deväť", "ôsmy", "osem", "siedmy", "sedem", "šiesty", "piaty", "štvrtý", "tretí", "tí", "tými", "mojim", "môjmu", "mojimi", "nim", "ony", "akonáhle", "kedže", "hoci", "lenže", "nakoľko", "pokým", "tobôž", "čiže", "vedľa", "napriek", "nadol", "oproti", "plus", "nahor", "dvojslovné", "namiesto", "trojslovné", "navyše", "tamto", "včera", "nedávno", "ihneď", "kdekoľvek", "nikde", "celkom", "tvrdo", "pomaly", "opatrne", "ťažko", "sotva", "väčšinou", "absolútne", "spoločne", "osamote", "zvyčajne", "príležitostne", "zriedka", "tisíc", "milión"], cat = Gi.all = (0, lat.default)(uat.concat(oat.singleWords));
Gi.default = cat;
var wb = {};
Object.defineProperty(wb, "__esModule", {
  value: !0
});
wb.default = void 0;
wb.default = [["buď, buď"], ["buď, alebo"], ["ani, ani"], ["aj, aj"], ["tak, ako"], ["nielenže, lež aj"], ["nielen, lež aj"], ["nielen, lež i"], ["nielenže, lež ai"], ["či, alebo"], ["i, i"], ["nielen, ale i"], ["síce, ale"]];
var vb = {};
Object.defineProperty(vb, "__esModule", {
  value: !0
});
vb.default = void 0;
vb.default = [
  // Indefinite pronouns:
  "nejaký",
  "nejaká",
  "nejaké",
  // Numbers 0-10, 100, 1000:
  "jeden",
  "jedna",
  "jediný",
  "dva",
  "dvaja",
  "dve",
  "tri",
  "trojka",
  "traja",
  "štyri ",
  "štvoro",
  "štyria",
  "päť",
  "pät",
  "šesť",
  "sedem",
  "osem",
  "deväť",
  "desať",
  "sto",
  "tisíc",
  // Demonstrative pronouns:
  "ten",
  "tá",
  "to",
  "tento",
  "táto",
  "toto",
  "tamten",
  "tamtá",
  "tamto",
  "tí",
  "tie",
  "tieto",
  "toho",
  "tej",
  "tomu",
  "tú",
  "tom",
  "tým",
  "tou",
  "tých",
  "tými",
  "títo",
  "tamtí",
  "tamtie",
  "tamtoho",
  "tomuto",
  "tohto"
];
var jj = {}, kb = {}, xj = {};
Object.defineProperty(xj, "__esModule", {
  value: !0
});
xj.default = mat;
var pat = ee;
const {
  getWords: gat
} = pat.languageProcessing;
function mat(e) {
  const a = gat(e), t = new RegExp("(ný|ní|tý|ná|tá|né|té)$");
  return a.filter((n) => t.test(n));
}
var _b = {};
Object.defineProperty(_b, "__esModule", {
  value: !0
});
_b.default = void 0;
_b.default = ["letá", "skriptá", "dvojitá", "autá", "kráľovná", "princezná", "príbuzná", "premenná", "trstená", "zelená", "ošípaná", "lesná", "vyvolená", "dobšiná", "hádzaná", "gazdiná", "šrotovná", "švagriná", "výborná", "záverečná", "recepčná", "konečná", "dotyčná", "černá", "jediný", "posledný", "ostatný", "neposledný", "predposledný", "štvrtý", "dvojitý", "postihnutý", "svätý", "zlotý", "dôležitý", "istý", "určitý", "svätý", "bohatý", "čistý", "zlatý", "častý", "postihnutý", "zložitý", "okolitý", "žltý", "dohodnutý", "skrytý", "hustý", "okamžitý", "zvyknutý", "krutý", "zahrnutý", "vzniknutý", "vyvinutý", "dotknutý", "rozhodnutý", "rozmanitý", "rozvinutý", "pokrytý", "krytý", "opitý", "tekutý", "spätý", "neistý", "prostý", "nepretržitý", "osobitý", "prevzatý", "jedovatý", "zapnutý", "ukradnutý", "mletý", "ženatý", "sprostý", "trávnatý", "uhličitý", "maloletý", "nevyužitý", "prežitý", "skalnatý", "ponúknutý", "rozbehnutý", "vydatý", "náležitý", "napätý", "pustý", "prenajatý", "zvládnutý", "vypnutý", "pracovitý", "zasiahnutý", "neurčitý", "piesočnatý", "šitý", "šťavnatý", "zamrznutý", "posadnutý", "posunutý", "urcitý", "listnatý", "guľatý", "nečistý", "dutý", "ihličnatý", "chlpatý", "nápaditý", "zaujatý", "nedotknutý", "členitý", "presunutý", "menovitý", "hranatý", "odobratý", "zamknutý", "zdvihnutý", "natiahnutý", "rovinatý", "zabehnutý", "novovzniknutý", "potiahnutý", "odtrhnutý", "hornatý", "zamietnutý", "vyzretý", "opretý", "kamenistý", "kľukatý", "svalnatý", "zarytý", "prehratý", "zajatý", "rozpačitý", "pohnutý", "rozkvitnutý", "stojatý", "húževnatý", "zlatistý", "opuchnutý", "hmlistý", "prekrytý", "vychudnutý", "napnutý", "plnoletý", "odumretý", "očitý", "dojatý", "strapatý", "korenistý", "stuhnutý", "ostnatý", "neplnoletý", "odetý", "zákonitý", "vyňatý", "vyschnutý", "obutý", "ohnutý", "vlnitý", "nafúknutý", "zapadnutý", "vystretý", "mäsitý", "svedomitý", "spadnutý", "vytiahnutý", "špicatý", "znamenitý", "nepoužitý", "ostražitý", "tretý", "nekrytý", "uzamknutý", "tienistý", "zovretý", "nultý", "tlstý", "rázovitý", "ľudnatý", "pospolitý", "hlasitý", "vychladnutý", "rozpadnutý", "odňatý", "pritiahnutý", "nedožitý", "klenutý", "pretiahnutý", "podlhovastý", "dvojitý", "zaťatý", "podnapitý", "prasknutý", "prikrytý", "padnutý", "vypätý", "podčiarknutý", "roztiahnutý", "svatý", "mrzutý", "kopcovitý", "svahovitý", "guľovitý", "zásaditý", "bradatý", "zmrznutý", "zubatý", "pomletý", "zaniknutý", "zažitý", "piesčitý", "zahnutý", "nasiaknutý", "zhnitý", "iný", "posledný", "jediný", "vlastný", "hlavný", "pekný", "povinný", "určený", "vhodný", "schopný", "plný", "samotný", "silný", "pripravený", "voľný", "podobný", "spokojný", "pracovný", "súčasný", "presvedčený", "uvedený", "medzinárodný", "osobný", "spoločný", "daný", "národný", "základný", "úspešný", "potrebný", "neregistrovaný", "rodinný", "kvalitný", "finančný", "zodpovedný", "šťastný", "skutočný", "pôvodný", "dnešný", "otvorený", "zameraný", "príjemný", "ročný", "bežný", "životný", "výborný", "možný", "stavebný", "ochotný", "významný", "zdravotný", "vnútorný", "obyčajný", "hudobný", "duchovný", "presný", "jasný", "verejný", "vybavený", "príslušný", "priemerný", "červený", "výrazný", "samostatný", "spojený", "odborný", "výkonný", "trestný", "umiestnený", "moderný", "schválený", "obchodný", "cestovný", "informačný", "spomínaný", "vytvorený", "nádherný", "dostatočný", "oprávnený", "mobilný", "zelený", "náročný", "úžasný", "obľúbený", "jedinečný", "prirodzený", "prítomný", "obecný", "slušný", "kompletný", "prekvapený", "dostupný", "operačný", "pevný", "večný", "dolný", "zvýšený", "výnimočný", "krvný", "stanovený", "súkromný", "konečný", "vianočný", "vážený", "ústavný", "úplný", "obmedzený", "považovaný", "skúsený", "platný", "slobodný", "vyrobený", "tradičný", "nebezpečný", "verný", "vodný", "všeobecný", "smutný", "dopravný", "letný", "mesačný", "prírodný", "drevený", "osobitný", "komplexný", "nočný", "vzdialený", "denný", "farebný", "okresný", "študijný", "účinný", "volebný", "policajný", "používaný", "jemný", "záverečný", "sklamaný", "unavený", "menovaný", "pokojný", "zaradený", "rozšírený", "poškodený", "odlišný", "pravidelný", "poverený", "rozdelený", "bezpečný", "územný", "zahraničný", "slnečný", "nepríjemný", "horný", "jednotný", "zásadný", "inteligentný", "opačný", "zimný", "dotyčný", "vďačný", "víťazný", "stručný", "každodenný", "slávnostný", "podrobný", "imunitný", "stredný", "značný", "akčný", "šikovný", "prístupný", "výsledný", "funkčný", "tohtoročný", "nevyhnutný", "orientovaný", "ostatný", "nadšený", "bezpečnostný", "studený", "štandardný", "zverejnený", "situovaný", "plánovaný", "ochranný", "podstatný", "dlhoročný", "perfektný", "cirkevný", "takzvaný", "zložený", "nevhodný", "úprimný", "stolný", "stabilný", "požadovaný", "čestný", "anonymný", "lacný", "reklamný", "úvodný", "kontrolný", "nasledovný", "výrobný", "zábavný", "viditeľný", "divadelný", "písomný", "predpokladaný", "medziročný", "lesný", "odolný", "registrovaný", "prípadný", "nešťastný", "jednoznačný", "spôsobený", "chudobný", "udržateľný", "luxusný", "zadný", "rozumný", "tanečný", "organizačný", "drobný", "zranený", "zasvätený", "rovný", "užitočný", "investičný", "milovaný", "hodný", "hladný", "bezplatný", "pripojený", "nekonečný", "zemný", "elegantný", "pomocný", "zbytočný", "priemyselný", "pohodlný", "obvodný", "mocný", "pitný", "oblečený", "neobmedzený", "strávený", "plnohodnotný", "rodný", "vzájomný", "prípravný", "zaznamenaný", "kamenný", "kompaktný", "vstupný", "zabudovaný", "peňažný", "skromný", "mohutný", "externý", "výskumný", "ohrozený", "predný", "reprezentačný", "primeraný", "herný", "výhodný", "strašný", "ný", "polovičný", "nezabudnuteľný", "invalidný", "narodený", "cenný", "následný", "opatrný", "ocenený", "ústredný", "sprievodný", "svadobný", "prepracovaný", "neuveriteľný", "zákonný", "variabilný", "využívaný", "zariadený", "napojený", "strieborný", "nazvaný", "tajný", "komunikačný", "novotný", "západný", "zachovaný", "nenávratný", "vzdelaný", "kladný", "poistený", "dobrovoľný", "ucelený", "označovaný", "komerčný", "vydarený", "dočasný", "prihlásený", "hrozný", "vtipný", "chladný", "kontaktný", "komplikovaný", "znížený", "záväzný", "jarný", "večerný", "odvodený", "pohlavný", "obklopený", "zamestnaný", "dôstojný", "odkázaný", "liečebný", "netradičný", "celodenný", "naivný", "riadený", "severný", "falošný", "náhodný", "južný", "prechodný", "talentovaný", "závažný", "dvojnásobný", "jubilejný", "nominovaný", "nedostatočný", "telekomunikačný", "nainštalovaný", "použiteľný", "dodávaný", "súťažný", "prispôsobený", "pripravovaný", "nespokojný", "získaný", "tajomný", "financovaný", "ponúkaný", "výtvarný", "svetelný", "zmenený", "položený", "vykonaný", "zmluvný", "vyvážený", "vysvätený", "potvrdený", "sprevádzaný", "limitovaný", "služobný", "postupný", "podporený", "registračný", "vrchný", "nezamestnaný", "obytný", "zostavený", "vyplnený", "príbuzný", "prezentovaný", "duševný", "podaný", "nevinný", "tepelný", "priestranný", "ľahostajný", "pridelený", "náučný", "zaručený", "pozoruhodný", "rekordný", "zaslaný", "nahnevaný", "platený", "ľubovoľný", "platobný", "navrhovaný", "volený", "ozajstný", "podporovaný", "úradný", "pozorný", "záručný", "predčasný", "týždenný", "prepojený", "nutný", "popredný", "vymenovaný", "pilotný", "požehnaný", "kombinovaný", "redakčný", "zubný", "telesný", "minuloročný", "ranný", "temný", "realitný", "vyriešený", "neschopný", "zázračný", "revolučný", "interný", "parný", "bočný", "zbavený", "cestný", "čudný", "urobený", "šialený", "animovaný", "veľkonočný", "nudný", "predbežný", "oslobodený", "divný", "hraničný", "prenosný", "kvalifikovaný", "prvotný", "motivačný", "obžalovaný", "záhradný", "odovzdaný", "podmienený", "východný", "dominantný", "spätný", "nákladný", "nenápadný", "jesenný", "výchovný", "predmetný", "detailný", "drsný", "špecializovaný", "obranný", "prehľadný", "vyhradený", "pyšný", "spustený", "podpivničený", "osadený", "nečakaný", "porovnateľný", "prepustený", "nadriadený", "povolaný", "ovocný", "výmenný", "vyčerpaný", "obnovený", "písaný", "overený", "konkurenčný", "kompatibilný", "neúspešný", "starobný", "konverzný", "záchranný", "totožný", "zastúpený", "kompetentný", "spodný", "obohatený", "chutný", "firemný", "relevantný", "navigačný", "uvoľnený", "nasadený", "vyjadrený", "čiastočný", "pamätný", "posvätný", "uznaný", "pomenovaný", "očný", "kontroverzný", "flexibilný", "všestranný", "neskutočný", "zapojený", "kladený", "spotrebný", "oddelený", "nákupný", "prijateľný", "vyvolený", "vinný", "vyrábaný", "nájdený", "rekreačný", "chybný", "nemenovaný", "tučný", "neviditeľný", "poradný", "skalný", "celovečerný", "naladený", "zateplený", "hmotný", "colný", "zamilovaný", "polyfunkčný", "knižný", "podriadený", "hraný", "vymedzený", "nastaviteľný", "nedeľný", "priložený", "odstránený", "uzatvorený", "renesančný", "pružný", "regulačný", "poháňaný", "vstavaný", "hodnotný", "splnený", "vzdušný", "putovný", "zatvorený", "porazený", "vytúžený", "skrátený", "stíhaný", "knižničný", "realizačný", "zmiešaný", "pokrstený", "aplikovaný", "motivovaný", "testovaný", "vnímaný", "milosrdný", "úsporný", "vítaný", "čarovný", "zaslúžený", "nezvyčajný", "pokorný", "neopakovateľný", "protimonopolný", "učebný", "odhodlaný", "nádejný", "povestný", "železničný", "podporný", "obsadený", "zmätený", "výstižný", "oboznámený", "skúšobný", "nadmerný", "ozbrojený", "rodený", "čitateľný", "opozičný", "železný", "orientačný", "zavraždený", "zhodný", "kvalifikačný", "ukrižovaný", "autorizovaný", "ladený", "odporúčaný", "oddaný", "ohromný", "znechutený", "šokovaný", "predajný", "nenáročný", "smrteľný", "činný", "uväznený", "objavený", "sledovaný", "nosný", "vecný", "arogantný", "hradný", "zdatný", "vymyslený", "ohraničený", "počiatočný", "zanedbateľný", "radostný", "zrozumiteľný", "hybridný", "usporiadaný", "multifunkčný", "univerzitný", "palubný", "naklonený", "zadaný", "predposledný", "narušený", "naozajstný", "spasený", "udržiavaný", "zabalený", "komorný", "spáchaný", "stabilizačný", "záhadný", "osamotený", "stavaný", "dobrodružný", "nakrútený", "izolovaný", "zaťažený", "žiadaný", "reklamačný", "sviatočný", "premyslený", "vyhotovený", "bezprostredný", "údajný", "korektný", "dvojročný", "krstný", "obdobný", "vyvolaný", "nezmenený", "koncipovaný", "dodatočný", "opísaný", "žitný", "odoslaný", "zachytený", "všedný", "evidovaný", "jazdný", "černý", "vylepšený", "zaplatený", "porušený", "nevšedný", "odporný", "prospešný", "opakovaný", "trojročný", "prenesený", "slovný", "prerobený", "charakterizovaný", "začarovaný", "sobotný", "oplotený", "transparentný", "uskutočnený", "certifikovaný", "nekompromisný", "hromadný", "murovaný", "toaletný", "varovný", "diaľničný", "zavesený", "neplatný", "hnusný", "zlomený", "pokazený", "opravný", "kúpeľný", "nejasný", "zaľúbený", "akceptovaný", "servisný", "sústredený", "kožený", "výstavný", "nápomocný", "bezmocný", "mravný", "zaskočený", "kľudný", "enormný", "predaný", "rastlinný", "nepatrný", "odhalený", "spisovný", "preplnený", "oslabený", "žalovaný", "útočný", "nadaný", "smädný", "voliteľný", "satelitný", "účtovný", "záložný", "brušný", "predvolebný", "pravdepodobný", "benefičný", "relaxačný", "nižný", "diskusný", "vyslaný", "komfortný", "povýšený", "zaužívaný", "renomovaný", "zaistený", "vzkriesený", "výstupný", "poslušný", "nežný", "osobnostný", "hľadaný", "predurčený", "nezmyselný", "predvedený", "poistný", "upozornený", "poľný", "úložný", "referenčný", "robustný", "nenahraditeľný", "zhubný", "bezchybný", "dvojpodlažný", "vyšný", "nájomný", "predkladaný", "neškodný", "celoročný", "stabilizovaný", "nefunkčný", "záporný", "súhrnný", "opätovný", "vznešený", "zasadený", "celoživotný", "tolerantný", "statočný", "zmysluplný", "sprístupnený", "odmenený", "textilný", "zhotovený", "strešný", "konštantný", "priznaný", "vyradený", "bojovný", "vyvíjaný", "zakopaný", "permanentný", "nevídaný", "koaličný", "odložený", "teplotný", "priebežný", "rovnocenný", "pripútaný", "uvádzaný", "obrátený", "zreteľný", "adresovaný", "vymastený", "kultivovaný", "dlžný", "vytlačený", "blahoslavený", "zverený", "umožnený", "percentný", "prenasledovaný", "zjavný", "pozáručný", "zaneprázdnený", "chápaný", "ubytovaný", "nerozhodný", "neautorizovaný", "prerokovaný", "vypredaný", "vyzvaný", "približný", "nemožný", "operný", "zjednodušený", "prezývaný", "vyznačený", "zvyšný", "recyklačný", "komunitný", "trojnásobný", "excelentný", "zablokovaný", "koncentrovaný", "stlačený", "jednosmerný", "posilnený", "jednostranný", "neobyčajný", "vymenený", "totalitný", "kúpený", "garantovaný", "zadržaný", "neprijateľný", "zrealizovaný", "želaný", "dôsledný", "rýchlostný", "robený", "ručný", "využiteľný", "zachránený", "nerušený", "parlamentný", "dedičný", "predávaný", "vysnívaný", "vysielaný", "rekonštruovaný", "útulný", "doživotný", "ropný", "propagačný", "poučený", "mastný", "koncertný", "aktivovaný", "zberný", "prerušený", "otočený", "civilný", "šetrný"];
Object.defineProperty(kb, "__esModule", {
  value: !0
});
kb.default = void 0;
var fat = ee, hat = J8(xj), yat = J8(_b);
function J8(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  values: zat
} = fat.languageProcessing, {
  Clause: bat
} = zat;
class wat extends bat {
  /**
   * Constructor.
   *
   * @param {string} clauseText   The text of the clause.
   * @param {Array} auxiliaries   The auxiliaries.
   *
   * @constructor
   */
  constructor(a, t) {
    super(a, t), this._participles = (0, hat.default)(this.getClauseText()), this.checkParticiples();
  }
  /**
   * Checks if any exceptions are applicable to this participle that would result in the clause not being passive.
   * If no exceptions are found, the clause is passive.
   *
   * @returns {void}
   */
  checkParticiples() {
    const a = this.getParticiples().filter((t) => !yat.default.includes(t));
    this.setPassive(a.length > 0);
  }
}
kb.default = wat;
var bd = {};
Object.defineProperty(bd, "__esModule", {
  value: !0
});
bd.filteredAuxiliaries = bd.default = void 0;
const vat = bd.filteredAuxiliaries = ["byť", "som", "si", "je", "sme", "ste", "sú", "bol", "bola", "boli", "bolo", "budem", "budeš", "bude", "budeme", "budete", "budú"];
bd.default = vat;
Object.defineProperty(jj, "__esModule", {
  value: !0
});
jj.default = jat;
var kat = ee, _at = Sj(kb), Eat = Sj(bd), Aat = Sj(Cp);
function Sj(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getClausesSplitOnStopWords: Tat,
  createRegexFromArray: xR
} = kat.languageProcessing, $at = {
  Clause: _at.default,
  regexes: {
    auxiliaryRegex: xR(Eat.default),
    stopCharacterRegex: /([:,])(?=[ \n\r\t'"+\-»«‹›<>])/ig,
    stopwordRegex: xR(Aat.default)
  }
};
function jat(e) {
  return Tat(e, $at);
}
var Oj = {}, Ij = {};
Object.defineProperty(Ij, "__esModule", {
  value: !0
});
Ij.default = Nat;
function It(e, a) {
  const n = a.externalStemmer.palatalEndingsRegexes.find((r) => new RegExp(r[0]).test(e));
  return n ? e.replace(new RegExp(n[0]), n[1]) : e.slice(0, -1);
}
function xat(e, a) {
  const t = a.externalStemmer.caseSuffixes, n = a.externalStemmer.caseRegexes;
  if (e.length > 7 && e.endsWith(t.caseSuffix1))
    return e.slice(0, -5);
  if (e.length > 6 && e.endsWith(t.caseSuffix2))
    return It(e.slice(0, -3), a);
  if (e.length > 5) {
    if (t.caseSuffixes3.includes(e.slice(-3)))
      return It(e.slice(0, -2), a);
    if (t.caseSuffixes4.includes(e.slice(-3)))
      return e.slice(0, -3);
  }
  if (e.length > 4) {
    if (e.endsWith(t.caseSuffix5))
      return It(e.slice(0, -1), a);
    if (t.caseSuffixes6.includes(e.slice(-2)))
      return It(e.slice(0, -2), a);
    if (t.caseSuffixes7.includes(e.slice(-2)))
      return e.slice(0, -2);
  }
  if (e.length > 3) {
    if (new RegExp(n.caseRegex1).test(e))
      return It(e, a);
    if (new RegExp(n.caseRegex2).test(e))
      return e.slice(0, -1);
  }
  return e;
}
function Sat(e, a) {
  const t = a.externalStemmer.possessiveSuffixes;
  if (e.length > 5) {
    if (e.endsWith(t.posSuffixOv))
      return e.slice(0, -2);
    if (e.endsWith(t.posSuffixIn))
      return It(e.slice(0, -1), a);
  }
  return e;
}
function Oat(e, a) {
  const t = a.externalStemmer.superlativePrefix;
  return e.length > 6 && e.startsWith(t) && (e = e.slice(3, e.length)), e.length > 5 && a.externalStemmer.comparativeSuffixes.includes(e.slice(-3)) && (e = It(e.slice(0, -2), a)), e;
}
function Iat(e, a) {
  const t = a.externalStemmer.diminutiveSuffixes;
  if (e.length > 7 && e.endsWith(t.diminutiveSuffix1))
    return e.slice(0, -5);
  if (e.length > 6) {
    if (t.diminutiveSuffixes2.includes(e.slice(-4)))
      return It(e.slice(0, -3), a);
    if (t.diminutiveSuffixes3.includes(e.slice(-4)))
      return It(e.slice(0, -4), a);
  }
  if (e.length > 5) {
    if (t.diminutiveSuffixes4.includes(e.slice(-3)))
      return It(e.slice(0, -3), a);
    if (t.diminutiveSuffixes5.includes(e.slice(-3)))
      return e.slice(0, -3);
  }
  if (e.length > 4) {
    if (t.diminutiveSuffixes6.includes(e.slice(-2)))
      return It(e.slice(0, -1), a);
    if (t.diminutiveSuffixes7.includes(e.slice(-2)))
      return e.slice(0, -1);
  }
  return e.length > 3 && e.endsWith("k") && !e.endsWith("isk") ? e.slice(0, -1) : e;
}
function Cat(e, a) {
  const t = a.externalStemmer.augmentativeSuffixes;
  return e.length > 6 && e.endsWith(t.augmentativeSuffix1) ? e.slice(0, -4) : e.length > 5 && t.augmentativeSuffixes2.includes(e.slice(-3)) ? It(e.slice(0, -2), a) : e;
}
function Pat(e, a) {
  const t = a.externalStemmer.derivationalSuffixes;
  if (e.length > 8 && e.endsWith(t.derivationalSuffix1))
    return e.slice(0, -6);
  if (e.length > 7) {
    if (e.endsWith(t.derivationalSuffix2))
      return It(e.slice(0, -4), a);
    if (t.derivationalSuffixes3.includes(e.slice(-5)))
      return e.slice(0, -5);
  }
  if (e.length > 6) {
    if (t.derivationalSuffixes4.includes(e.slice(-4)))
      return e.slice(0, -4);
    if (t.derivationalSuffixes5.includes(e.slice(-4)))
      return It(e.slice(0, -3), a);
  }
  if (e.length > 5) {
    if (e.endsWith(t.derivationalSuffix6))
      return e.slice(0, -3);
    if (t.derivationalSuffixes7.includes(e.slice(-3)))
      return It(e.slice(0, -2), a);
    if (t.derivationalSuffixes8.includes(e.slice(-3)))
      return e.slice(0, -3);
  }
  if (e.length > 4) {
    if (t.derivationalSuffixes9.includes(e.slice(-2)))
      return e.slice(0, -2);
    if (t.derivationalSuffixes10.includes(e.slice(-2)))
      return It(e.slice(0, -1), a);
  }
  const n = new RegExp(a.externalStemmer.derivationalRegex);
  return e.length > 3 && n.test(e) ? e.slice(0, -1) : e;
}
const Rat = function(e, a) {
  for (const t of a)
    if (t[1].includes(e))
      return t[0];
  return null;
}, Dat = function(e, a) {
  for (const t of a)
    if (t.includes(e))
      return t[0];
  return null;
};
function Nat(e, a) {
  const t = Rat(e, a.exceptionLists.exceptionStemsWithFullForms);
  if (t)
    return t;
  e = xat(e, a), e = Sat(e, a), e = Oat(e, a), e = Iat(e, a), e = Cat(e, a), e = Pat(e, a);
  const n = Dat(e, a.exceptionLists.stemsThatBelongToOneWord);
  return n || e;
}
Object.defineProperty(Oj, "__esModule", {
  value: !0
});
Oj.default = Wat;
var Lat = K, Mat = ee, qat = Fat(Ij);
function Fat(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: Bat
} = Mat.languageProcessing;
function Wat(e) {
  const a = (0, Lat.get)(e.getData("morphology"), "sk", !1);
  return a ? (t) => (0, qat.default)(t, a) : Bat;
}
Object.defineProperty($j, "__esModule", {
  value: !0
});
var e5 = $j.default = void 0, Uat = ee, Hat = ou(Cp), Gat = ou(Gi), Vat = Dr, Kat = ou(wb), Yat = ou(vb), Qat = ou(jj), Xat = ou(Oj);
function ou(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: Zat
} = Uat.languageProcessing;
let Jat = class extends Zat {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "sk",
      passiveConstructionType: "periphrastic",
      stopWords: Hat.default,
      functionWords: Gat.default,
      transitionWords: Vat.allWords,
      twoPartTransitionWords: Kat.default,
      firstWordExceptions: Yat.default
    }), Object.assign(this.helpers, {
      getClauses: Qat.default,
      getStemmer: Xat.default
    });
  }
};
e5 = $j.default = Jat;
var Cj = {}, Eb = {};
Object.defineProperty(Eb, "__esModule", {
  value: !0
});
Eb.default = void 0;
Eb.default = [
  // Indefinite articles:
  "ett",
  // Definite articles:
  "det",
  "den",
  "de",
  // Numbers 1-10:
  "en",
  "två",
  "tre",
  "fyra",
  "fem",
  "sex",
  "sju",
  "åtta",
  "nio",
  "tio",
  // Demonstrative pronouns:
  "denne",
  "denna",
  "detta",
  "dessa"
];
var er = {}, Nr = {};
Object.defineProperty(Nr, "__esModule", {
  value: !0
});
Nr.singleWords = Nr.multipleWords = Nr.default = Nr.allWords = void 0;
const ett = Nr.singleWords = ["alltså", "ändå", "annars", "ännu", "även", "avslutningsvis", "bl.a.", "d.v.s.", "då", "därav", "därefter", "däremot", "därför", "därmed", "därpå", "dessutom", "dock", "efteråt", "eftersom", "emellertid", "enligt", "exempelvis", "fastän", "följaktligen", "förrän", "först", "förutom", "huvudsakligen", "ifall", "inledningsvis", "innan", "jämförelsevis", "likadant", "likaså", "liksom", "medan", "men", "nämligen", "när", "oavsett", "också", "omvänt", "säkerligen", "således", "sålunda", "sammanfattningsvis", "sammantaget", "samt", "samtidigt", "särskilt", "såsom", "sist", "slutligen", "speciellt", "t.ex.", "tidigare", "tillika", "tills", "trots", "tvärtemot", "tvärtom", "tydligen", "varpå", "vidare", "uppenbarligen", "ytterligare"], att = Nr.multipleWords = ["å andra sidan", "å ena sidan", "allt som allt", "anledningen är", "anledningen blir", "annorlunda än", "av den orsaken", "av detta skäl", "beroende på", "bland annat", "därtill kommer", "det beror på att", "det vill säga", "det visar", "detta beror på", "detta går ut på att", "detta innebär att", "detta leder till", "detta medför att", "effekten blir", "efter ett tag", "ej heller", "en effekt av detta", "en förklaring till detta", "ett exempel på detta", "ett liknande exempel", "exakt som", "följden blir", "för att avrunda", "för all del", "för att förklara", "för att inte säga", "för att inte tala om", "för att klargöra", "för att poängtera", "för att säga det på ett annat sätt", "för att sammanfatta", "för att understryka", "för att visa", "för det andra", "för det första", "för det tredje", "förr eller senare", "för närvarande", "framför allt", "fram till nu", "har att göra med", "härav följer", "i båda fallen", "i det fallet", "i det hela", "i det här fallet", "i det långa loppet", "i enlighet med", "i förhållande till", "i fråga om", "i jämförelse med", "i kontrast till", "i likhet med", "i ljuset av", "i motsats till", "i och med", "i relation till", "i samband med", "i sin tur", "i själva verket", "i slutändan", "i stället för", "i syfte att", "i synnerhet", "i verkligheten", "icke desto mindre", "ihop med", "inte desto mindre", "jämfört med", "kan sammanfattas", "kort sagt", "konsekvensen av detta", "lika viktigt är", "målet är att", "med andra ord", "med anledning av", "med det i åtanke", "med det i tankarna", "med ett ord", "med hänsyn till", "med härledning av", "mot bakgrund av", "mot den bakgrunden", "när allt kommer omkring", "när det gäller", "närmare bestämt", "nu när", "orsaken är", "på det sättet", "på grund av", "på liknande sätt", "på så sätt", "på samma sätt", "resultatet blir", "så länge som", "så småningom", "så snart som", "sist men inte minst", "slutsatsen blir", "som antytt", "som en följd av", "som en konsekvens av", "som ett exempel på", "som ett resultat", "som jag tidigare antytt", "som konklusion kan", "som man kan se", "som nämnt", "som tidigare nämnts", "summa summarum", "tack vare", "till att börja med", "till dess", "till exempel", "till en början", "till följd av", "till sist", "till skillnad från", "till slut", "till största delen", "tillsammans med", "tvärt om", "under de omständigheterna", "under omständigheterna", "under tiden", "vad mera är", "viktigt att inse", "vilket innebär"], ttt = Nr.allWords = ett.concat(att);
Nr.default = ttt;
Object.defineProperty(er, "__esModule", {
  value: !0
});
er.filteredAtEnding = er.filteredAtBeginningAndEnding = er.filteredAnywhere = er.default = er.all = void 0;
var ntt = Nr, Ab = rtt(Ba);
function rtt(e) {
  return e && e.__esModule ? e : { default: e };
}
const a5 = ["en", "ett", "det", "den", "de"], t5 = ["två", "tre", "fyra", "fem", "sex", "sju", "åtta", "nio", "tio", "tiotals", "elva", "tolv", "tretton", "fjorton", "femton", "sexton", "sjutton", "arton", "aderton", "nitton", "tjugo", "hundra", "hundratals", "tusen", "tusentals", "miljon", "miljoner", "miljontals", "miljard", "miljarder"], n5 = ["första", "andra", "tredje", "fjärde", "femte", "sjätte", "sjunde", "åttonde", "nionde", "tionde", "elfte", "tolfte", "trettonde", "fjortonde", "femtonde", "sextonde", "sjuttonde", "artonde", "nittonde", "tjugonde"], r5 = ["jag", "du", "han", "hon", "hen", "vi", "ni"], s5 = ["mig", "dig", "honom", "henne", "oss", "er", "dem", "henom", "eder"], i5 = ["sig", "sin", "sitt", "sina"], o5 = ["min", "mitt", "mina", "din", "ditt", "dina", "hans", "hennes", "dess", "ens", "vår", "vårt", "våra", "er", "ert", "era", "ers", "deras", "hens"], l5 = ["denne", "denna", "detta", "dessa", "här", "där", "varifrån", "därav", "hit", "dit", "vart", "hädan", "dädan", "vadan", "hän", "sen"], d5 = ["som", "vilken", "vilket", "vilka", "vars", "då"], u5 = ["vem", "vems", "vad"], c5 = ["hur", "varför"], p5 = ["någon", "något", "några", "nån", "nåt", "ingen", "inget", "inga", "annan", "annat", "andra", "någonstans", "ingenstans", "annastans", "överallt", "någonstädes", "ingenstädes", "annorstädes", "allestädes", "någorlunda", "ingalunda", "annorlunda", "någonting", "ingenting", "allting", "all", "allt", "alla", "somlig", "somligt", "somliga", "mången", "månget", "man", "en", "ens"], g5 = ["varandra", "varsin", "varsitt", "envar", "varannan", "vartannat"], m5 = ["andra", "åtskilliga", "bådadera", "både", "få", "fårre", "fåtalig", "fåtaliga", "flera", "flesta", "föga", "ganska", "icke", "inte", "lite", "litet", "många", "mer", "mera", "mest", "mindre", "minst", "mycket", "nog", "ollika", "tillräckligt", "vardera", "varje", "viss", "visst", "vissa", "visse"], f5 = ["bakåt", "bakifrån", "bortifrån", "däråt", "därav", "därhän", "däri", "därifrån", "därom", "därpå", "därtill", "däruti", "därvid", "ditåt", "dithän", "dittills", "efteråt", "förrut", "framåt", "hädenefter", "häråt", "härav", "härefter", "häremot", "häri", "härifrån", "härmed", "härom", "härpå", "härtill", "häruti", "härvid", "hitåt", "hittills", "ini", "inifrån", "intill", "inuti", "nedanför", "nedåt", "nedför", "nedtill", "uppåt", "uppför", "upptill", "varav", "varefter", "varemot", "varför", "varfrån", "vari", "varifrån", "varmed", "varom", "varpå", "varthän", "vartill", "varur", "varvid"], h5 = ["behövande", "behöver", "behövt", "behövde", "bör", "börande", "borde", "bort", "brukade", "brukande", "brukar", "brukat", "fående", "får", "fått", "fick", "hade", "haft", "har", "hava", "havande", "kan", "kunde", "kunnande", "kunnat", "mådde", "mående", "mår", "måste", "mått", "måtte", "skall", "skulle", "varande", "velat", "viljande", "vill", "ville"], y5 = ["behöva", "böra", "bruka", "få", "ha", "kunna", "må", "ska", "vilja"], z5 = ["är", "var", "varit", "vore", "blivit", "blivande", "blir", "bliver", "blev", "blitt", "funnits", "finnande", "finns", "fanns", "befunnit", "befinnande", "befinner", "befann", "tyckts", "tyckande", "tycks", "tycktes"], b5 = ["vara", "bli", "finnas", "befinna", "tyckas"], w5 = ["gående", "gällande", "gällde", "gäller", "gällt", "går", "gått", "gav", "ger", "gett", "gick", "givande", "giver", "gjorde", "gjort", "gör", "görande", "kom", "kommande", "kommer", "kommit", "ligger", "ligges", "lå", "ligget", "liggande", "ställer", "ställde", "ställt", "ställ", "ställande", "ställd", "ställas", "ställs", "ställes", "ställdes", "ställts", "tagande", "tager", "tagit", "tar", "tog", "utgör", "utgjorde", "utgjort", "utgörande", "utgjord", "utgöras", "utgörs", "utgöres", "utgjordes", "utgjorts"], v5 = ["gå", "gälla", "ge", "göra", "komma", "ligga", "ställa", "ta", "utgöra"], k5 = ["angav", "anger", "angett", "angiver", "angivit", "berättade", "berättar", "berättat", "föreslagit", "föreslår", "föreslått", "föreslog", "förklarade", "förklarar", "förklarat", "förstår", "förstått", "förstod", "frågade", "frågar", "frågat", "påstår", "påstått", "påstod", "sa", "sade", "säger", "sagt", "svarade", "svarar", "svarat", "talade", "talar", "talat", "tänker", "tänkt", "tänkte"], _5 = ["ange", "berätta", "föreslå", "förklara", "förstå", "fråga", "påstå", "säga", "svara", "tala", "tänka"], E5 = ["äldre", "äldst", "äldsta", "äldste", "bäst", "bättre", "dålig", "dåliga", "dålige", "dåligt", "egen", "eget", "egna", "egne", "enkel", "enkelt", "enkla", "enklare", "enklast", "enklaste", "enkle", "fel", "gamla", "gamle", "gammal", "gammalt", "god", "goda", "godare", "godast", "godaste", "gode", "gott", "grundläggande", "hel", "hela", "helare", "helast", "helaste", "hele", "helt", "kort", "korta", "kortare", "kortast", "kortaste", "korte", "lång", "långa", "långe", "längre", "långsam", "långsamma", "långsammare", "långsammast", "långsammaste", "långsamme", "långsamt", "längst", "längsta", "längste", "långt", "liknande", "lilla", "lille", "liten", "litet", "mindre", "minst", "minsta", "minste", "möjlig", "möjliga", "möjligare", "möjligast", "möjligaste", "möjlige", "möjligt", "nödvändig", "nödvändiga", "nödvändigare", "nödvändigast", "nödvändigaste", "nödvändige", "nödvändigt", "normal", "normala", "normalare", "normalast", "normalaste", "normale", "normalt", "ny", "nya", "nyare", "nyast", "nyaste", "nye", "nytt", "olikt", "olika", "olike", "samma", "sämre", "sämst", "sämsta", "sämste", "särskild", "särskilda", "särskilde", "särskilt", "sen", "sena", "senare", "senast", "senaste", "sene", "sent", "små", "snabb", "snabba", "snabbare", "snabbast", "snabbaste", "snabbe", "snabbt", "stor", "stora", "store", "större", "störst", "största", "störste", "stort", "svår", "svåra", "svårare", "svårast", "svåraste", "svåre", "svårt", "tidig", "tidiga", "tidigare", "tidigast", "tidigaste", "tidige", "tidigt", "trevlig", "trevliga", "trevligare", "trevligast", "trevligaste", "trevlige", "trevligt", "ung", "unga", "unge", "ungt", "uppenbar", "uppenbara", "uppenbare", "uppenbart", "värre", "värst", "värsta", "värste", "verklig", "viktig", "viktiga", "viktigare", "viktigast", "viktigaste", "viktige", "viktigt", "yngre", "yngst", "yngsta", "yngste"], A5 = ["aldrig", "allmänt", "alltid", "delvis", "direkt", "huvudsakligen", "ibland", "långsamt", "mestadels", "nästan", "ofta", "relativt", "riktigt", "riktigare", "riktigast", "sällan", "snabbt", "ständigt", "väl", "vanligt"], T5 = ["antal", "antalet", "antals", "antalets", "antalen", "antalens", "bit", "bitar", "bitarna", "bitarnas", "bitars", "biten", "bitens", "bits", "del", "delar", "delarna", "delarnas", "delars", "delen", "delens", "dels", "detalj", "detaljen", "detaljens", "detaljer", "detaljerna", "detaljernas", "detaljers", "detaljs", "exempel", "exempels", "exemplet", "exemplets", "exemplen", "exemplens", "person", "personen", "personens", "personer", "personerna", "personernas", "personers", "persons", "procent", "punkt", "punkten", "punktens", "punkter", "punkterna", "punkternas", "punkters", "sak", "saken", "sakens", "saker", "sakerna", "sakernas", "sakers", "saks", "sätt", "sätten", "sättens", "sättet", "sättets", "sätts", "skillnad", "skillnaden", "skillnadens", "skillnader", "skillnaderna", "skillnadernas", "skillnaders", "skillnads", "sort", "sorten", "sortens", "sorter", "sorterna", "sorternas", "sorters", "sorts", "tema", "teman", "temanas", "temans", "temas", "temat", "temats", "tid", "tiden", "tidens", "tider", "tiderna", "tidernas", "tiders", "tids", "ting", "tingen", "tingens", "tinget", "tingets", "tings"], $5 = ["åt", "av", "bakom", "bland", "bortom", "bredvid", "cirka", "efter", "emellan", "emot", "enligt", "för", "före", "förutom", "framför", "från", "genom", "hos", "i", "igenom", "inom", "inuti", "längs", "med", "mellan", "mittemot", "mot", "nära", "nästa", "nedan", "ner", "olik", "om", "omkring", "ovanför", "ovanpå", "över", "på", "runt", "sedan", "som", "till", "tvärs", "tvärsöver", "under", "upp", "ur", "ut", "utan", "utanför", "utom", "via", "vid"], j5 = ["absolut", "alldeles", "allra", "bra", "fullständigt", "fullt", "ganska", "helt", "illa", "jätte", "rysligt", "så", "storligen", "totalt", "väldigt", "ytterst"], x5 = ["eller", "och"], S5 = ["att"], O5 = ["år", "årens", "året", "årets", "års", "årtal", "årtalen", "årtalens", "årtaconst", "årtaconsts", "årtals", "dag", "dagar", "dagarna", "dagarnas", "dagars", "dagen", "dagens", "dags", "går", "idag", "månad", "månaden", "månadens", "månader", "månaderna", "månadernas", "månaders", "månads", "minut", "minuten", "minutens", "minuter", "minuterna", "minuternas", "minuters", "minuts", "morgon", "sekund", "sekunden", "sekundens", "sekunder", "sekunderna", "sekundernas", "sekunders", "sekunds", "timmar", "timmarna", "timmarnas", "timmars", "timme", "timmen", "timmens", "timmes", "vecka", "veckan", "veckans", "veckas", "veckor", "veckorna", "veckornas", "veckors"], I5 = ["prof", "doc", "dr"], C5 = ["å", "aj", "aja", "fy", "grattis", "hej", "hu", "jaså", "javisst", "o", "oj", "ojdå", "prosit", "puh", "skål", "usch"], P5 = ["c", "cl", "cm", "dl", "g", "kg", "km", "krm", "l", "m", "mg", "ml", "mm", "msk", "pkt", "st", "tsk"], R5 = ["förlåt", "ja", "jo", "ju", "m.m", "nej", "ok", "okej", "tack"], stt = er.filteredAtEnding = (0, Ab.default)([].concat(n5, E5, A5, y5, v5, b5, _5)), itt = er.filteredAtBeginningAndEnding = (0, Ab.default)([].concat(a5, $5, x5, l5, j5, m5, o5)), ott = er.filteredAnywhere = (0, Ab.default)([].concat(ntt.singleWords, r5, s5, i5, d5, C5, t5, z5, h5, k5, w5, p5, g5, S5, u5, c5, R5, f5, P5, O5, I5, T5)), ltt = er.all = (0, Ab.default)([].concat(a5, t5, n5, r5, s5, i5, o5, l5, d5, u5, c5, p5, g5, m5, f5, h5, y5, z5, b5, w5, v5, k5, _5, E5, A5, T5, $5, j5, x5, S5, O5, I5, C5, P5, R5));
er.default = {
  filteredAtEnding: stt,
  filteredAtBeginningAndEnding: itt,
  filteredAnywhere: ott,
  all: ltt
};
var Tb = {};
Object.defineProperty(Tb, "__esModule", {
  value: !0
});
Tb.default = void 0;
Tb.default = [["antingen", "eller"], ["icke blott", "utan afven"], ["ju", "desto"]];
var $b = {};
Object.defineProperty($b, "__esModule", {
  value: !0
});
$b.default = void 0;
$b.default = {
  productPages: {
    parameters: {
      recommendedMinimum: 3,
      recommendedMaximum: 6,
      acceptableMaximum: 7,
      acceptableMinimum: 1
    }
  }
};
var Pj = {}, Rj = {};
Object.defineProperty(Rj, "__esModule", {
  value: !0
});
Rj.default = gtt;
const jk = function(e, a) {
  const t = e.match(new RegExp(a.externalStemmer.regexR1region));
  let n = "";
  return t && t[1] && (n = t[1], t.index + 2 < 3 && (n = e.slice(3))), {
    r1: n,
    rest: e.slice(0, e.length - n.length)
  };
}, dtt = function(e, a, t) {
  const n = a.r1;
  if (!n)
    return e;
  const r = new RegExp(t.externalStemmer.regexSuffixes1a), o = n.match(r);
  return o ? a.rest + n.slice(0, o.index) : e;
}, utt = function(e, a, t) {
  return a.r1 && e.match(new RegExp(t.externalStemmer.regexSuffixes1b)) ? e.slice(0, -1) : e;
}, ctt = function(e, a, t) {
  const n = a.r1;
  return n && n.match(new RegExp(t.externalStemmer.regexSuffixes2)) ? e.slice(0, -1) : e;
}, ptt = function(e, a, t) {
  const n = a.r1;
  if (n) {
    if (n.match(new RegExp(t.externalStemmer.regexSuffixes3a)))
      return e.slice(0, -1);
    const r = n.match(new RegExp(t.externalStemmer.regexSuffixes3b));
    return r ? a.rest + n.slice(0, r.index) : e;
  }
  return e;
};
function gtt(e, a) {
  let t = jk(e, a);
  const n = dtt(e, t, a), r = utt(e, t, a);
  return e = n.length < r.length ? n : r, t = jk(e, a), e = ctt(e, t, a), t = jk(e, a), e = ptt(e, t, a), e;
}
Object.defineProperty(Pj, "__esModule", {
  value: !0
});
Pj.default = btt;
var mtt = K, ftt = ee, htt = ytt(Rj);
function ytt(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: ztt
} = ftt.languageProcessing;
function btt(e) {
  const a = (0, mtt.get)(e.getData("morphology"), "sv", !1);
  return a ? (t) => (0, htt.default)(t, a) : ztt;
}
var Dj = {}, jb = {};
Object.defineProperty(jb, "__esModule", {
  value: !0
});
jb.default = void 0;
jb.default = ["åberopades", "åberopas", "åberopats", "aborterades", "aborteras", "absorberades", "absorberas", "abstraherats", "acceleras", "accelereras", "accentuerades", "accentueras", "accentuerats", "accepeteras", "accepterades", "accepteras", "accepterats", "äcklades", "äcklas", "äcklats", "ackompagnerades", "ackompanjerades", "ackompanjeras", "ackompanjerats", "ackumuleras", "ackumulerats", "ådagalades", "ådagaläggs", "adderades", "adderas", "adderats", "adelspalats", "åderlåtas", "åderlåtits", "adidas", "adlades", "adlas", "adlats", "administrerades", "administreras", "ådömas", "ådömdes", "ådömes", "ådöms", "ådömts", "adopterades", "adopteras", "adopterats", "adresserades", "adresseras", "adresserats", "adventures", "affaires", "affischeras", "aflägsnas", "agades", "agas", "ägas", "ägdes", "ageras", "ägnades", "agnas", "ägnas", "ägnats", "ägs", "ägts", "åhördes", "aidstestas", "ajournerades", "ajourneras", "åkallades", "åkallas", "åkas", "aklagas", "åks", "aktades", "aktas", "akterseglas", "åktes", "äkthetsförklarades", "aktietips", "aktiverades", "aktiveras", "aktiverats", "aktivierats", "aktualiserades", "aktualiseras", "aktualiserats", "ålades", "åläggas", "åläggs", "ålagts", "alarmerades", "åldersbestämmas", "algas", "alienerades", "alldeldes", "alldelses", "alleles", "allendes", "allergiskadades", "allierades", "allokeras", "almsicks", "alouettes", "älskas", "älskats", "alstrades", "alstras", "alstrats", "ältades", "ältas", "ältats", "amatöriserades", "amerikaniseras", "ammades", "ammas", "ammats", "amores", "amorteras", "amorterats", "amputerades", "amputeras", "amputerats", "anades", "analyserades", "analyseras", "analyserats", "anammades", "anammas", "anammats", "anas", "anats", "anbefalldes", "anbefalles", "anbefalls", "anbringas", "anbringats", "anbudsupphandlas", "ändhållplats", "ändrades", "andras", "ändras", "ändrats", "anfäktades", "anfäktas", "anfäktats", "anfallas", "anfallits", "anfalls", "anfölls", "anföras", "anfördes", "anföres", "anförs", "anförtroddes", "anförtros", "anförtrotts", "anförts", "anfrätas", "ångades", "ångas", "ångats", "angavs", "anges", "angetts", "angives", "angivits", "angivs", "angjordes", "ångkokas", "angöras", "angörs", "ångras", "ångrats", "angreps", "angripas", "angripits", "angrips", "ängslades", "ängslas", "ängslats", "anhållas", "anhålles", "anhållits", "anhålls", "anhölls", "anhopas", "animeras", "ankalagas", "anklagades", "anklagas", "anklagats", "anklagts", "anknyts", "ankrades", "anlades", "anläggas", "anläggs", "anlagts", "anlitades", "anlitas", "anlitats", "anmälas", "anmäldes", "anmäles", "anmäls", "anmälts", "anmanas", "anmärkas", "anmärks", "anmärkts", "anmodades", "anmodas", "anmodats", "annekterades", "annekteras", "annekterats", "annonserades", "annonseras", "annonserats", "annuleras", "annullerades", "annulleras", "annvänds", "anordnades", "anordnas", "anordnats", "anpassades", "anpassas", "anpassats", "anrås", "anrättas", "anrättats", "anrikas", "anropas", "ansades", "ansågs", "ansamlades", "ansamlas", "ansamlats", "ansas", "ansättas", "ansattes", "ansatts", "ansätts", "anses", "ansetts", "anskaffades", "anskaffas", "anskaffats", "anslagits", "anslagsfinansierats", "anslås", "anslogs", "anslöts", "anslutas", "anslutits", "ansluts", "ansökas", "ansökes", "ansöktes", "ansökts", "anspelas", "anställas", "anställdes", "anställes", "anställs", "anställts", "ansträngas", "ansträngdes", "ansträngs", "ansträngts", "ansvisas", "antagas", "antages", "antagits", "antändas", "antändes", "antänds", "antänts", "antas", "antastas", "antastats", "anteciperas", "antecknades", "antecknas", "antecknats", "anteras", "antogs", "antologiserats", "anträddes", "anträffas", "anträffats", "äntras", "antydas", "antyddes", "antydes", "antyds", "antytts", "anvämdas", "användas", "användes", "används", "använts", "anvisades", "anvisas", "anvisats", "apéritifdags", "apostroferades", "applåderades", "applåderas", "applåderats", "applicerades", "appliceras", "applicerats", "apprecieras", "aprilskämtas", "apterades", "apteras", "apterats", "ärades", "åräknas", "äras", "ärats", "arbetades", "arbetas", "arbetats", "argumenterades", "argumenteras", "arielvas", "aristokratpalats", "arkebuserades", "arkebuseras", "arkebuserats", "arkiverades", "arkiveras", "arkiverats", "armbågas", "armeras", "armerats", "ärnas", "arrangerades", "arrangeras", "arrangerats", "arrenderades", "arrenderas", "arrenderats", "arresterades", "arresteras", "arresterats", "årsundas", "artbestäms", "artbestämts", "artikulerades", "artikuleras", "ärvas", "arvoderades", "arvoderas", "ärvs", "ärvts", "åsågs", "åsamkades", "åsamkas", "åsamkats", "åsättas", "åsatts", "åsätts", "åsetts", "asfalteras", "asfalterats", "åsidosättas", "åsidosattes", "åsidosättes", "åsidosatts", "åsidosätts", "åsiktsnäts", "åskades", "åskådliggjorts", "åskådliggöras", "åskådliggörs", "åskådligörs", "äskas", "assimilerades", "assimileras", "assimilerats", "assisterades", "assisteras", "associationeras", "associerades", "associeras", "åstadkommas", "åstadkommes", "åstadkommits", "åstadkoms", "åstakommas", "åstakoms", "asturias", "åsyftades", "åsyftas", "åtalades", "åtalas", "åtalats", "åtaldes", "ätas", "åteförenas", "ateljéplats", "återanpassas", "återanställdes", "återanställs", "återanställts", "återantändas", "återanvändas", "återanvändes", "återanvänds", "återbefolkades", "återbefolkas", "återberättades", "återberättas", "återbesättas", "återbesätts", "återbetalades", "återbetalas", "återbetalats", "återbildas", "återbildats", "återbördades", "återbördas", "återbördats", "återbrukas", "återerövras", "återerövrats", "återexploateras", "återfångas", "återfanns", "återfås", "återfinnas", "återfinnes", "återfinns", "återfödas", "återföddes", "återföds", "återföras", "återfördes", "återförenades", "återförenas", "återförenats", "återförs", "återförts", "återförvildas", "återförvisades", "återförvisas", "återfunnits", "återgavs", "återges", "återgetts", "återgives", "återgivits", "återhämtades", "återhämtats", "återiföras", "återimporteras", "återinföras", "återinfördes", "återinförs", "återinförts", "återinrättades", "återinrättas", "återinsättas", "återinsattes", "återinstallerades", "återintegreras", "återinvesterades", "återinvesteras", "återinvigas", "återinvigdes", "återinvigs", "återkallades", "återkallas", "återkallats", "återkastades", "återkastas", "återkatoliceras", "återknutits", "återknytas", "återköpas", "återkopplas", "återköptes", "återkrävas", "återladdas", "återlämnades", "återlämnas", "återlämnats", "återlevererats", "återlöses", "återmatas", "åternationaliseras", "åternoterades", "återönskas", "återöppnas", "återöppnats", "återplanteras", "återreglerades", "återregleras", "återremitterades", "återremitteras", "återremitterats", "återropades", "återsågs", "återsamlades", "återsamlas", "återsändas", "återsändes", "återsänds", "återses", "återskapades", "återskapas", "återskapats", "återskolas", "återspeglades", "återspeglas", "återspeglats", "återställas", "återställdes", "återställes", "återställs", "återställts", "återstartas", "återtagas", "återtas", "återtogs", "återuppbyggas", "återuppbyggdes", "återuppbyggts", "återuppföras", "återuppfördes", "återuppförts", "återupplevs", "återupplivades", "återupplivas", "återupplivats", "återuppnås", "återupprättades", "återupprättas", "återupprättats", "återupprepades", "återupprepas", "återuppsattes", "återupptäckas", "återupptäcktes", "återupptäckts", "återupptagits", "återupptas", "återupptogs", "återuppväckas", "återuppväcks", "återuppväcktes", "återuppväckts", "återutges", "återutgetts", "återutgivits", "återutnämnas", "återutnämnts", "återväcktes", "återvaldes", "återväljs", "återvändas", "återvanns", "återvinnas", "återvinns", "återvisades", "återvisas", "återvunnits", "ätes", "åtföljas", "åtföljdes", "åtföljs", "åtföljts", "åtgärdades", "åtgärdas", "åtgärdats", "åthutas", "ätits", "åtlydas", "åtlyddes", "åtlyds", "åtnjuts", "åtrås", "åts", "äts", "åtsadkommas", "åtskildes", "åtskiljas", "åtskiljs", "attackerades", "attackeras", "attackerats", "attackutrustas", "attesterades", "attesterats", "attraherades", "attraheras", "attraherats", "auktionerades", "auktioneras", "auktoriserades", "auktoriseras", "automatiserades", "automatiseras", "automatiserats", "avanmälas", "avanmäls", "avåts", "avbalkats", "avbeställdes", "avbeställts", "avbetades", "avbetalas", "avbildades", "avbildas", "avbildats", "avblåsas", "avblåses", "avblåstes", "avblåsts", "avblockerades", "avböjas", "avböjdes", "avbokas", "avbördas", "avbröts", "avbrutits", "avbrytas", "avbryts", "avdelas", "avdelats", "avdemokratiserades", "avdömas", "avdömdes", "avdramatiseras", "avdramatiserats", "äventyras", "äventyrats", "averages", "averotiseras", "avfärdades", "avfärdas", "avfärdats", "avfattades", "avfattas", "avfestas", "avfiras", "avfolkades", "avfolkas", "avfolkats", "avföras", "avfördes", "avföres", "avförs", "avförts", "avfotograferades", "avfyrades", "avfyras", "avfyrats", "avges", "avgiftades", "avgiftas", "avgiftsbelades", "avgiftsbeskattas", "avgivits", "avgjordes", "avgjorts", "avgöras", "avgöres", "avgörs", "avgränsades", "avgränsas", "avhållas", "avhålles", "avhållits", "avhålls", "avhånades", "avhånas", "avhändes", "avhandlades", "avhandlas", "avhandlats", "avhänds", "avhästades", "avhjälpas", "avhjälps", "avhjälptes", "avhjälpts", "avhölls", "avhöras", "avhördes", "avhörts", "avhysas", "avhyses", "avidentifieras", "avideologiseras", "avindividualiserats", "avisades", "avisas", "aviserades", "aviseras", "aviserats", "avjapaniseras", "avjoniserats", "avklädas", "avkläddes", "avklarades", "avklaras", "avklassificerades", "avknoppades", "avknoppas", "avknoppats", "avkodas", "avkrävas", "avkrävdes", "avkrävs", "avkrävts", "avkriminaliseras", "avkunnades", "avkunnas", "avkunnats", "avkyls", "avlades", "avläggas", "avlägges", "avlägsnades", "avlägsnas", "avlägsnats", "avlämnades", "avlämnas", "avlämnats", "avlas", "avläs", "avläsas", "avläses", "avlastades", "avlastas", "avlästes", "avlats", "avledas", "avleds", "avlevereras", "avlivades", "avlivas", "avlivats", "avlockas", "avlockats", "avlöjas", "avlönades", "avlönas", "avlönats", "avlösas", "avlöses", "avlossades", "avlossas", "avlossats", "avlöstes", "avlösts", "avlövas", "avlutas", "avlyssnades", "avlyssnas", "avlystes", "avmagnetiseras", "avmattas", "avmobiliserades", "avmumiefieras", "avmystifieras", "avnavlades", "avnjöts", "avnjutas", "avnjutes", "avnjuts", "avnoterades", "avnoteras", "avpassas", "avpatrulleras", "avpolitiseras", "avpolleterades", "avpolleteras", "avpolletterades", "avpolletteras", "avporträtterades", "avporträtteras", "avprogrammeras", "avprogrammerats", "avprutades", "avrådas", "avråddes", "avråds", "avräknas", "avrapporteras", "avrapporterats", "avrättades", "avrättas", "avrättats", "avråtts", "avregistrerades", "avregistreras", "avregistrerats", "avreglerades", "avregleras", "avreglerats", "avritas", "avrundades", "avrundas", "avrustades", "avrustas", "avs", "avsågs", "avsändas", "avsändes", "avsänds", "avsänts", "avsättas", "avsattes", "avsatts", "avsätts", "avses", "avsetts", "avskaffades", "avskaffas", "avskaffats", "avskäras", "avskärmas", "avskedades", "avskedas", "avskedats", "avskedshyllades", "avskildes", "avskiljas", "avskiljes", "avskiljs", "avskilts", "avskjutas", "avskjutits", "avskräckas", "avskräcks", "avskräcktes", "avskräckts", "avskrevs", "avskrivas", "avskrivits", "avskrivs", "avskurits", "avskys", "avslagits", "avslås", "avslogs", "avslöjades", "avslöjas", "avslöjats", "avslöjtas", "avslutades", "avslutas", "avslutats", "avsmakades", "avsökas", "avsöndras", "avspänningsglödgas", "avspärrades", "avspärrats", "avspeglades", "avspeglas", "avspeglats", "avspelas", "avspisades", "avspisas", "avstängas", "avstängdes", "avstängs", "avstängts", "avstyras", "avstyrks", "avstyrktes", "avstyrkts", "avsynas", "avsyras", "avtackades", "avtackas", "avtäckas", "avtackats", "avtäcks", "avtäcktes", "avtäckts", "avtagas", "avtalades", "avtalas", "avtalats", "avtecknas", "avtjänas", "avtjänats", "avträdas", "avträddes", "avtrappas", "avtrubbas", "avtrubbats", "avtvås", "avtvingades", "avtvingas", "avundades", "avundats", "avvägas", "avvaktas", "avväpnades", "avväpnas", "avväpnats", "avvaras", "avvärjas", "avvärjdes", "avvärjs", "avvärjts", "avvattnas", "avvecklades", "avvecklas", "avvecklats", "avverkades", "avverkas", "avverkats", "avvinnas", "avvisades", "avvisas", "avvisats", "avyttrades", "avyttras", "avyttrats", "axlades", "axlas", "axlats", "babblades", "babettes", "backades", "backas", "backats", "badades", "badas", "bäddades", "baddas", "bäddas", "bäddats", "bads", "bagatelliserades", "bagatelliseras", "bagatelliserats", "bagoas", "bakades", "bakas", "bakats", "bakbands", "bakbinds", "baksits", "baktalas", "baktalats", "balanserades", "balanseras", "balanserats", "balas", "balsamerades", "balsameras", "banaliseras", "bananas", "banats", "bandades", "bandas", "bandats", "banderas", "bändes", "bands", "bänds", "bänkades", "bankas", "bankats", "bannas", "bannlysas", "bannlyses", "bannlystes", "bantades", "bantas", "bantats", "barabbas", "bäras", "bäres", "bärgades", "bärgas", "bärgats", "barings", "barnablods", "barnes", "barrantes", "bars", "bärs", "barthes", "baserades", "baseras", "baserats", "basunerades", "basuneras", "basunerats", "bättrades", "bättras", "bättrats", "baxades", "baxas", "baxats", "beaktades", "beaktas", "beaktats", "bearbetades", "bearbetas", "bearbetats", "beättas", "bebådas", "beblandas", "beboddes", "bebos", "bebotts", "bebyggas", "bebyggdes", "bebyggs", "bedårades", "bedåras", "bedjas", "bedömas", "bedömdes", "bedömms", "bedöms", "bedömts", "bedövades", "bedövas", "bedragas", "bedras", "bedrevs", "bedrivas", "bedrives", "bedrivits", "bedrivs", "beds", "bedyras", "bedyrats", "beers", "befalldes", "befallts", "befanns", "befarades", "befaras", "befarats", "befästas", "befästes", "befästs", "befinnas", "befinnes", "befinns", "befläckats", "befodrats", "befolkades", "befolkas", "befolkats", "befordrades", "befordras", "befordrats", "befrämjades", "befrämjas", "befriades", "befrias", "befriats", "befruktades", "befruktas", "befruktats", "befunnits", "begagnas", "begapas", "begäras", "begärdes", "begärs", "begärts", "begås", "begåtts", "begåvades", "begåvas", "begåvats", "begicks", "begöts", "begränas", "begränsades", "begränsas", "begränsats", "begravas", "begravdes", "begravs", "begravts", "begreps", "begripas", "begrips", "begrovs", "begrundades", "begrundas", "behäftas", "behagas", "behållas", "behållits", "behålls", "behandlades", "behandlas", "behandlats", "behängts", "behärskades", "behärskas", "behölls", "behövas", "behövdes", "behöves", "behövs", "behovsprövas", "behövts", "beivras", "beivrats", "bejakas", "bejakats", "bejublades", "bejublas", "bejublats", "bekämpades", "bekämpas", "bekämpats", "bekändes", "bekännas", "bekänns", "bekantas", "bekantgjorts", "békas", "bekikas", "bekläddes", "beklagades", "beklagas", "beklagats", "beklas", "beklätts", "bekommas", "bekostades", "bekostas", "bekostats", "beköts", "bekräftades", "bekräftas", "bekräftats", "bekymras", "belades", "beläggas", "beläggs", "belägrades", "belägras", "belägrats", "belagts", "belamrades", "belamras", "belastades", "belastas", "belastats", "beledsagades", "beledsagas", "beles", "belönades", "belönas", "belönats", "belys", "belysas", "belyses", "belystes", "belysts", "bemålats", "bemannades", "bemannas", "bemannats", "bemästras", "bemästrats", "bemötas", "bemöts", "bemöttes", "bemötts", "bemyndigades", "bemyndigas", "benådades", "benådas", "benådats", "benaissas", "benämnas", "benämndes", "benämnes", "benämns", "benämnts", "benas", "benedikts", "bennetts", "benskadats", "beöms", "beordrades", "beordras", "beordrats", "bepudrades", "beräknades", "beräknas", "beräknats", "berättades", "berättas", "berättats", "berättigades", "berättigas", "berättigats", "beredas", "bereddes", "beredes", "bereds", "beretts", "berikades", "berikas", "berikats", "berishas", "bermudas", "berömdes", "berömmas", "beröms", "beröras", "berördes", "berörs", "berörts", "berövades", "berövas", "berövats", "berusades", "berusats", "bes", "besåddes", "besågs", "besannades", "besannas", "besannats", "besås", "besättas", "besattes", "besatts", "besätts", "besegarades", "besegerades", "beseglades", "beseglas", "besegrades", "besegras", "besegrats", "beses", "besiktas", "besiktigas", "besiktigats", "besittes", "besitts", "besjälas", "besjöngs", "besjungas", "besjungits", "besjungs", "beskådades", "beskådas", "beskälls", "beskäras", "beskars", "beskärs", "beskattades", "beskattas", "beskattats", "beskedas", "beskevs", "beskjutas", "beskjutits", "beskjuts", "beskogats", "besköts", "beskrevs", "beskrivas", "beskrives", "beskrivits", "beskrivs", "beskurits", "beskyddades", "beskyddas", "beskyllas", "beskylldes", "beskylls", "beskyllts", "beslagits", "beslagtagits", "beslagtas", "beslagtogs", "beslås", "beslogs", "beslöjades", "beslöjas", "beslöts", "beslutades", "beslutas", "beslutats", "besmittats", "besökas", "besöks", "besöktes", "besökts", "besparades", "besparas", "besparats", "bespisas", "bespottas", "bespottats", "besprutades", "besprutas", "besprutats", "beställas", "beställdes", "beställes", "beställs", "beställts", "bestals", "bestämdes", "bestämmas", "bestämmes", "bestäms", "bestämts", "bestänktes", "bestås", "bestigas", "bestigits", "bestjäls", "bestods", "bestormas", "bestraffades", "bestraffas", "bestraffats", "bestrålas", "bestrålats", "bestreds", "bestridas", "bestriddes", "bestrids", "beströddes", "bestulits", "bestyckas", "bestyckats", "bestyras", "bestyrkas", "bestyrkes", "bestyrks", "besudlas", "besudlats", "besvarades", "besvärades", "besvaras", "besväras", "besvarats", "besvärats", "besvärjas", "betäckas", "betäcktes", "betäckts", "betades", "betalades", "betalas", "betalats", "betalts", "betänkas", "betas", "betats", "betcknas", "betecknades", "betecknas", "betecknats", "betingades", "betingas", "betitlades", "betjänas", "betonades", "betonas", "betonats", "beträdas", "beträddes", "betrakats", "betraktades", "betraktas", "betraktats", "betroddes", "betrotts", "bets", "betsas", "betslas", "betts", "betvingas", "betvingats", "betvivlas", "betvivlats", "betygas", "betygsättas", "betygsattes", "betygsatts", "betygsätts", "betygssättas", "beundrades", "beundras", "beundrats", "bevakades", "bevakas", "bevakats", "beväpnades", "beväpnats", "bevarades", "bevaras", "bevarats", "bevärdigades", "bevärdigats", "bevattnades", "bevattnas", "bevekas", "beviljades", "beviljas", "beviljats", "bevisades", "bevisas", "bevisats", "bevistas", "bevittnades", "bevittnas", "bevittnats", "bhopas", "bibehållas", "bibehålles", "bibehållits", "bibehålls", "bibehölls", "bibliograferas", "bibringades", "bibringas", "bibringats", "bidrags", "biesmes", "bifallas", "bifalles", "bifallits", "bifalls", "bifogades", "bifogas", "bifogats", "bifölls", "bilades", "biläggas", "biläggs", "bilagts", "bildades", "bildas", "bildats", "bildsättas", "bildsätts", "bilfraktas", "billhälls", "bilskjuts", "bindas", "bindes", "binds", "bisättas", "bisattes", "biscuits", "bitas", "bitits", "biträdas", "biträddes", "biträdes", "biträds", "bits", "bjöds", "bjudas", "bjudes", "bjudits", "bjuds", "bläddrades", "bläddras", "blades", "blåfärgats", "blåmärkas", "blandades", "bländades", "blandas", "bländas", "blandats", "bländats", "blandfärs", "blankslipades", "blankslitits", "blås", "blåsas", "blåses", "blåstes", "blästrades", "blästras", "blästrats", "blåsts", "blekas", "blekläggas", "bleks", "blekts", "blidkades", "blidkas", "blindmes", "blindtarmsopererats", "blindtestas", "blinkas", "blixtinkallades", "blixtinkallas", "blixtinkallats", "blixtutredas", "blockerades", "blockeras", "blockerats", "blodfylls", "blodfyllts", "blomsterhyllas", "blossas", "blötas", "blötläggas", "blötläggs", "blöts", "blottades", "blottas", "blottats", "blöttes", "blottlades", "blottläggas", "blottläggs", "blottlagts", "blötts", "blottställas", "bluddrats", "bluffas", "blygas", "blygdes", "blygs", "blylastas", "bockas", "bogserades", "bogseras", "bogserats", "böjas", "böjdes", "bojkottades", "bojkottas", "böjs", "böjts", "bokades", "bokas", "bokats", "bokföras", "bokfördes", "bokförs", "bokförts", "bolagiserades", "bolagiseras", "bolagiserats", "bolas", "bolivares", "bollades", "bollas", "bollats", "bombades", "bombarderades", "bombarderas", "bombarderats", "bombas", "bombats", "bombhotades", "bombhotas", "bombhotats", "bommades", "bommats", "bonades", "bonas", "bönhördes", "bordades", "bordlades", "bordläggas", "bordläggs", "bordlagts", "börgades", "börjades", "börjas", "borrades", "borras", "borrats", "börsintroducerades", "börsintroduceras", "börsnoterades", "börsnoteras", "börsnoterats", "börsstoppades", "borstas", "bortauktioneras", "bortdribblas", "bortfördes", "bortförklaras", "bortförklarats", "bortförlovades", "bortförts", "bortopereras", "borträknats", "bortrationaliserades", "bortrationaliseras", "bortses", "borttages", "bortträngts", "bortväljes", "botades", "botas", "botats", "bötfällas", "bötfälldes", "bötfälls", "bötfällts", "bothas", "bötläggas", "böts", "bottenskrapades", "bottenskrapats", "bottnas", "bräckas", "brackets", "bräcks", "bräcktes", "brädas", "bräddas", "bråddes", "brädfodras", "bragtes", "bragts", "bråkades", "bråkas", "bråkats", "brandmärkts", "brandskattas", "brännmärkas", "brännmärks", "brännmärktes", "branns", "brännskadades", "bräserats", "brassades", "breakas", "bredas", "breddades", "breddas", "breddats", "breddes", "brehmers", "bres", "bretts", "bricoles", "bringas", "bringats", "broddas", "broderades", "broderas", "broderats", "brölas", "bromsades", "bromsas", "bromsats", "bröts", "brudås", "brugueras", "brukades", "brukas", "brukats", "brunsminkades", "brutaliseras", "brutaliserats", "brutits", "bryggas", "brynas", "bryns", "bryssellörs", "brytas", "brytes", "bryts", "buades", "buas", "buats", "budades", "budgeterades", "budgeteras", "budgeterats", "buffas", "bugas", "buggas", "bullerbegränsas", "bullerisoleras", "bultas", "bundes", "bundits", "buntas", "buntats", "buras", "burits", "burrades", "busats", "bussades", "bussas", "bussats", "buteljeras", "buteljerats", "bygdes", "byggas", "byggdes", "bygges", "byggnadsminnesförklarades", "byggnadsminnesförklaras", "byggnadsminnesmärks", "byggs", "byggstartas", "byggts", "bykas", "bytas", "bytits", "byts", "byttes", "bytts", "caceres", "cajs", "cambrils", "camoufleras", "capras", "carlshamns", "catenas", "celebrerades", "celebreras", "cementas", "cementerades", "cementeras", "cementerats", "censurerades", "censureras", "censurerats", "centimes", "centraldirigeras", "centraliserades", "centraliseras", "centraliserats", "centralregleras", "centralstyrs", "centras", "centrats", "centrifugerats", "centrsimes", "ceres", "certifierats", "charmades", "charmas", "charmats", "chartras", "chartrats", "checkas", "chiapas", "chikanerats", "chines", "chivas", "chockades", "chockas", "chockats", "chockerades", "chockeras", "chockhöjs", "chockskadades", "chockskadas", "christmas", "cirkuleras", "citerades", "citeras", "citerats", "civiliseras", "coachas", "components", "comviqs", "contras", "cripps", "crosscheckades", "cruises", "cuplottades", "cyberfrogs", "cyklas", "däckades", "däckas", "däckats", "dagits", "daglidags", "dalaras", "dalas", "daltades", "daltas", "dämdes", "dammades", "dammas", "dämmas", "dammats", "dammsögs", "dammsugits", "dammsugs", "dammtorkas", "dämpades", "dämpas", "dämpats", "däms", "dämts", "danades", "danas", "danats", "danidas", "daniells", "dansades", "dansas", "dansats", "darras", "das", "databaseras", "databehandlas", "daterades", "dateras", "daterats", "datoriseras", "dealas", "debatterades", "debatteras", "debatterats", "debiteras", "debiterats", "decentraliserades", "decentraliseras", "dechiffreras", "decimaliseras", "decimerades", "decimeras", "decimerats", "dedicerades", "defineras", "definierades", "definieras", "definierats", "deformeras", "deformerats", "degas", "degenererats", "degraderades", "degraderas", "degraderats", "degradras", "deklamerades", "deklameras", "deklarerades", "deklareras", "deklarerats", "dekonstruerades", "dekonstrueras", "dekonstruerats", "dekorerades", "dekoreras", "dekorerats", "dekrypteras", "delades", "delas", "delats", "delegerades", "delegeras", "delegerats", "delexpedieras", "delfinansierades", "delfinansieras", "delgavs", "delges", "delgetts", "delgivits", "deltas", "delvalveras", "demaskerades", "demaskeras", "dematerialiseras", "dementerades", "dementeras", "dementerats", "demilitariserats", "demobiliserades", "demobiliseras", "demokratiserades", "demokratiseras", "demokratiserats", "demolerades", "demoleras", "demolerats", "demoniseras", "demonstrerades", "demonstreras", "demonstrerats", "demonterades", "demonteras", "demystifieras", "deponeras", "deponerats", "deporterades", "deporteras", "deporterats", "deppas", "desarmerades", "desarmerats", "deserves", "designas", "designats", "desillusioneras", "desinficeras", "desinficerats", "desorienteras", "destabiliserades", "destilleras", "destillerats", "destineras", "destrueras", "detaljgranskas", "detaljregleras", "detaljstuderas", "detaljstyrs", "detekteras", "detroniserades", "detroniseras", "detroniserats", "dettalas", "devalverades", "devalveras", "devalverats", "diagnosticerades", "diagnosticeras", "diagnosticerats", "diagnostiserades", "diagnostiseras", "diagnostiserats", "diagosticeras", "diarieföras", "diarieförs", "diarieförts", "dias", "differentieras", "differentierats", "diggats", "digitaliseras", "digitaliserats", "dikats", "diktats", "dikterades", "dikteras", "dikterats", "dikvalificerats", "dimensionerades", "dimensioneras", "dimensionerats", "diminueras", "dineras", "diplomerades", "directes", "direktavskrivas", "direktavvisas", "direktkonfronterades", "direktnoterades", "direktsändas", "direktsändes", "direktsänds", "direktsänts", "direktteleviserades", "direktväljas", "dirigerades", "dirigeras", "dirigerats", "disciplineras", "diskades", "diskas", "diskats", "diskonterades", "diskonteras", "diskonterats", "diskrediterades", "diskrediterats", "diskriminerades", "diskrimineras", "diskriminerats", "diskuterades", "diskuteras", "diskuterats", "diskvalificerades", "diskvalificeras", "diskvalificerats", "disponerades", "disponeras", "disponerats", "disputerades", "dissekerades", "dissekeras", "dissekerats", "dissikerades", "distanserades", "distanseras", "distraheras", "distribuerades", "distribueras", "distribuerats", "distribureras", "dites", "dittransporterats", "diversifieras", "divideras", "dividerats", "djäklas", "djärvas", "djärvdes", "djärves", "djävlades", "djävlas", "djilas", "djupdykas", "djupfrysas", "djupfryses", "djupintervjuas", "djupintervjuats", "dödades", "dödas", "dödats", "dödförklarades", "dödförklaras", "dödförklarats", "dödskallemärkas", "dogs", "dokes", "dokumenterades", "dokumenteras", "dokumenterats", "doldes", "döljas", "döljs", "döljts", "dollarras", "dolts", "domarbedömas", "dömas", "domderas", "dömdes", "dömes", "domesticeras", "domesticerats", "dominerades", "domineras", "dominerats", "dompteras", "döms", "dömts", "donerades", "doneras", "donerats", "döpas", "dopingtestades", "dopingtestas", "doppades", "doppas", "doppats", "döps", "döptes", "döpts", "doserades", "doseras", "douradores", "dövades", "dövas", "dövats", "dövtolkas", "drabbades", "drabbas", "drabbats", "drabbbades", "dracks", "draftades", "draftas", "dragas", "dragits", "dramatiseras", "dramatiserats", "drämdes", "dränerades", "dräneras", "dränerats", "dränkas", "dränkes", "dränks", "dränktes", "dränkts", "dräpas", "draperades", "draperas", "draperats", "dräps", "dräptes", "dras", "dreams", "drejades", "drejats", "dressas", "dresseras", "dresserats", "dressyrbas", "drevades", "drevs", "dribblades", "dribblas", "dribblats", "drickas", "drickes", "drillades", "drillas", "drillats", "drivas", "drives", "drivgas", "drivits", "drivs", "drogades", "drogas", "drogats", "drogs", "drogtestats", "drömdes", "drömmas", "droppades", "druckits", "drukpas", "dryftades", "dryftas", "dryftats", "drygades", "dubbas", "dubbats", "dubbelexponeras", "dubbelriktas", "dubblades", "dubblas", "dubblats", "dubblerades", "dubbleras", "dubblerats", "dukades", "dukas", "dukats", "dumpades", "dumpas", "dumpats", "dunas", "dundrades", "dundras", "dunkades", "dunkas", "duperades", "duperas", "duperats", "duplicerades", "durres", "duschades", "duschas", "dvaldes", "dväljs", "dvalts", "dyrkades", "dyrkas", "ebbas", "effektiverades", "effektiveras", "effektiviserades", "effektiviseras", "effektiviserats", "effektueras", "effektureras", "efteranmäldes", "efterbildas", "efterföljas", "efterföljdes", "efterföljs", "efterfrågades", "efterfrågas", "efterfrågats", "efterhördes", "efterkomposteras", "efterlämnades", "efterlämnas", "efterlevas", "efterlevdes", "efterlevs", "efterliknats", "efterlysas", "efterlyses", "efterlystes", "efterlysts", "eftersänds", "eftersänts", "eftersättas", "eftersattes", "eftersatts", "eftersätts", "efterskänkas", "eftersökas", "eftersöks", "eftersöktes", "efterspanas", "eftersträvades", "eftersträvas", "eftersynkroniseras", "eftertaxerades", "efterträdas", "efterträddes", "efterträdes", "efterträds", "efterträtts", "eggades", "eggas", "eggers", "ekas", "ekiperats", "eklärerades", "eklaterades", "eklateras", "eklaterats", "eldades", "eldas", "eldats", "eldhärjades", "eldhärjas", "eldhärjats", "elektras", "elektrifierades", "elektrifieras", "eliminerades", "elimineras", "eliminerats", "elitiseras", "ellerströms", "emballerades", "emitterades", "emitteras", "emotsågs", "emotses", "emottagas", "emottas", "emtungas", "enades", "enas", "enats", "engagerades", "engageras", "engagerats", "engagererats", "engells", "enhetliggöras", "enkelriktades", "enkelriktas", "enkelriktats", "enleverades", "enleveras", "enrollerades", "enrolleras", "enrollerats", "enskommits", "entledigades", "entledigas", "entledigats", "entusiasmeras", "envisades", "envisats", "erades", "erbjöds", "erbjudas", "erbjudes", "erbjudits", "erbjuds", "erfaras", "erfodras", "erfordrades", "erfordras", "erfors", "erhållas", "erhålles", "erhållits", "erhålls", "erhölls", "erinrades", "erinras", "erkändes", "erkännas", "erkännes", "erkännnas", "erkänns", "erkänts", "erlades", "erläggas", "erlägges", "erläggs", "erlagts", "eroderas", "erotiseras", "erövrades", "erövras", "erövrats", "ersättas", "ersattes", "ersättes", "ersatts", "ersätts", "ertappades", "ertappas", "ertappats", "esbjörs", "eskaleras", "eskorterades", "eskorteras", "eskorterats", "esseltes", "estetiseras", "etablerades", "etableras", "etablerats", "etappindelas", "etiketterades", "etiketteras", "etnifieras", "etnifierats", "etsades", "etsas", "eudokias", "europeiseras", "europes", "evakuerades", "evakueras", "evakuerats", "evalueras", "everglades", "evkuerats", "examinerades", "examineras", "examinerats", "exekverades", "exekveras", "exemplifieras", "exkluderas", "exkluderats", "exkommuniceras", "expanderas", "expedierades", "expedieras", "experimenterades", "experimenteras", "experimenterats", "explicitgjorts", "exploaterades", "exploateras", "exploaterats", "exponerades", "exponeras", "exponerats", "exporterades", "exporteras", "exporterats", "expropieras", "exproprierades", "exproprieras", "extrainkallas", "extraskjuts", "fackbas", "fägnats", "fajtades", "fajtas", "fajtats", "fäktades", "fäktas", "fakturerades", "faktureras", "fakturerats", "fållas", "fällas", "fälldes", "falles", "falls", "fälls", "fällts", "falsifieras", "fältprovas", "famnas", "fångades", "fångas", "fångats", "fängslades", "fängslas", "fängslats", "fanzines", "fårades", "färas", "fårats", "färdigbehandlas", "färdigförhandlades", "färdigrepareras", "färdigspelades", "färdigspelas", "färdigspelats", "färdigställas", "färdigställdes", "färdigställs", "färdigställts", "färdigutrustas", "fares", "färgades", "färgas", "färgats", "färgläggas", "färgläggs", "färgsättas", "färgsattes", "färgsätts", "färjades", "färjas", "farpas", "fås", "fasadputsas", "fasas", "fascinerades", "fascineras", "fascinerats", "fassetts", "fästas", "fästes", "fastlades", "fastläggas", "fastlagts", "fastnades", "fästs", "fastslagits", "fastslås", "fastslogs", "fastställas", "fastställdes", "fastställs", "fastställts", "fattades", "fattats", "fattiggjorts", "fåtts", "favoriserades", "favoriseras", "favoriserats", "favoritspelas", "faxades", "faxats", "fejas", "felbalanserades", "felbedöms", "felbetonades", "felciteras", "felkopplas", "felsökas", "feltolkades", "feltolkas", "feltolkats", "femdubblades", "femdubblas", "femdubblats", "femfaldigades", "femfaldigats", "feminiseras", "femmes", "fermentas", "fernissas", "fes", "festades", "festas", "festes", "festplats", "fickparkeras", "fifflas", "fightades", "fightas", "fightats", "figueras", "figureras", "fikas", "fiktionaliserats", "filas", "filmades", "filmas", "filmatiserades", "filmatiseras", "filmatiserats", "filmats", "filmtricks", "filotas", "filtreras", "filtrerats", "fimpas", "fimpats", "finalbesegrades", "finalbrottas", "finaniseras", "finanseras", "finanserats", "finanserias", "finansierades", "finansieras", "finansierats", "finansierieras", "finfördelats", "fingeras", "fingranskas", "fininställas", "fininställs", "finjusteras", "finkammades", "finkammas", "finkammats", "finkrattats", "finnes", "finnns", "finputsas", "finputsats", "finslipas", "finslipats", "fintades", "fintas", "firades", "firas", "firats", "fiskades", "fiskas", "fiskats", "fixades", "fixas", "fixats", "fixerades", "fixeras", "fixerats", "fjärmas", "fjärrstyras", "fjärrstyrs", "fjärtas", "fjäskas", "fjättrades", "fjättrats", "fläckades", "fläckas", "fläckats", "flåddes", "flaggades", "flaggas", "flaggats", "fläkas", "flakes", "flamberats", "flankerades", "flankeras", "flätades", "flätas", "flätats", "flerdubblades", "flerdubblas", "flerdubblats", "flerfaldigas", "flerfaldigats", "flintstones", "flirtas", "flögs", "flörtas", "flottades", "flugits", "flyers", "flygas", "flygbesprutas", "flygbombades", "flygbombas", "flygbombats", "flygfotograferades", "flygpats", "flygs", "flyttades", "flyttas", "flyttats", "fnissas", "fnissats", "fnös", "fnystes", "födas", "födddes", "föddes", "föds", "fogades", "fogas", "fogats", "fögelkes", "föjdes", "fokuserades", "fokuseras", "fokuserats", "föläggs", "följas", "följdes", "följs", "följts", "folkas", "fonderades", "fonderas", "fonderats", "fönsterspröjs", "förädlades", "förädlas", "förädlats", "föraktades", "föraktas", "föraktats", "föräldrarsomdeklasserats", "förändats", "förändrades", "förändrarts", "forandras", "förändras", "forändrats", "förändrats", "förångades", "förångas", "förångats", "förankrades", "förankras", "förankrats", "föranledas", "föranleddes", "föranleds", "föranletts", "föranmälts", "förannonserats", "föranstaltades", "förärades", "föräras", "förärats", "förargas", "förargats", "föras", "förbands", "förbannades", "förbannas", "förbannats", "förbättrades", "förbättras", "förbättrats", "förbegicks", "förbehållas", "förbehållits", "förbehålls", "förbehandlas", "förbehölls", "förberdas", "förberedas", "förbereddes", "förberedes", "förbereds", "förberetts", "förbeställas", "förbeställts", "förbigås", "förbigåtts", "förbigicks", "förbindas", "förbinds", "förbisågs", "förbises", "förbisetts", "förbittrades", "förbjöds", "förbjudas", "förbjudes", "förbjudits", "förbjuds", "förblandades", "förblandas", "förblindades", "förblindas", "förblindats", "förbluffades", "förbluffas", "förborgerligades", "förborgerligas", "förborgerligats", "förbrändes", "förbrännas", "förbränns", "förbränts", "förbrödrades", "förbrödras", "förbrukades", "förbrukas", "förbrukats", "förbryllades", "förbryllas", "förbryllats", "förbuskats", "förbyggts", "förbytas", "förbyts", "förbyttes", "förbytts", "forcerades", "forceras", "forcerats", "fördärvades", "fördärvas", "fördärvats", "fördelades", "fördelas", "fördelats", "fördeltas", "fördes", "fördjupades", "fördjupas", "fördjupats", "fördömas", "fördömdes", "fördöms", "fördömts", "fordrades", "fördragas", "fördrages", "fordras", "fördras", "fordrats", "fördrevs", "fördrivas", "fördrivits", "fördrivs", "fördröjas", "fördröjdes", "fördröjes", "fördröjs", "fördröjts", "fördubblades", "fördubblas", "fördubblats", "fördummas", "fördunklades", "fördunklas", "fördunklats", "fördyrades", "fördyras", "fördyrats", "fördystrades", "förebådades", "förebådas", "förebådats", "föreberedas", "förebragts", "förebrås", "förebyggas", "förebyggs", "föredömdes", "föredrages", "föredras", "föredrogs", "föregås", "föregåtts", "föregicks", "föregreps", "föregripits", "föregrips", "föreknippas", "förekommas", "förekommits", "förelades", "föreläggas", "föreläggs", "förelagts", "förelås", "förelästes", "förenades", "förenas", "förenats", "förenhetligas", "förenklades", "förenklas", "förenklats", "föres", "föreskrevs", "föreskrivas", "föreskrivs", "föreslagits", "föreslås", "föreslogs", "förespås", "förespeglades", "förespeglas", "förespeglats", "förespråkades", "förespråkas", "förespråkats", "föreställas", "föreställdes", "föreställs", "förestås", "förestods", "forests", "företagas", "företagits", "företas", "företeddes", "företogs", "företrädas", "företräddes", "företräds", "förevigades", "förevigas", "förevigats", "förevisades", "förevisas", "förevisats", "förfäktas", "förfalskades", "förfalskas", "förfalskats", "förfärades", "förfäras", "förfärats", "förfärdigades", "förfärdigats", "förfares", "förfasades", "förfasas", "författades", "författas", "författats", "förfelades", "förfelas", "förfinades", "förfinas", "förfinats", "förfinskas", "förflackas", "förflackats", "förflyktats", "förflyktigades", "förflyktigas", "förflyktigats", "förflyttades", "förflyttas", "förflyttats", "förföljas", "förföljdes", "förföljs", "förföljts", "förföras", "förfördelas", "förfördes", "förförs", "förförts", "förfranskas", "förfrös", "förfulas", "förfulats", "förfuskades", "förfuskas", "förfuskats", "förgasades", "förgasas", "förgasats", "förgiftades", "förgiftas", "förgiftats", "förglömmas", "förgöras", "förgrovades", "förgrovas", "förgrovats", "förgrymmas", "förgubbas", "förgudas", "förgylldes", "förgylls", "förgyllts", "förhalades", "förhalas", "förhalats", "förhållas", "förhånades", "förhånas", "förhånats", "förhandlades", "förhandlas", "förhandlats", "förhandscensureras", "förhandsetiketteras", "förhandsgranskas", "förhandsnomineras", "förhandsvisades", "förhärdas", "förhärligades", "förhärligas", "förhäxas", "förhindrades", "förhindras", "förhindrats", "förhöjas", "förhöjs", "förhöras", "förhördes", "förhörs", "förhörts", "förintades", "förintas", "förintats", "förjagas", "förkalkas", "förkapslats", "förkastades", "förkastas", "förkastats", "förkläds", "förklarades", "förklarars", "förklaras", "förklarats", "förknippades", "förknippas", "förknippats", "förkortades", "förkortas", "förkortats", "förkroppsligas", "förkrossas", "förkunnades", "förkunnas", "förkunnats", "förkvävas", "förkvävs", "förlades", "förläggas", "förläggs", "förlagts", "förlamades", "förlamas", "förlamats", "förlänades", "förlänas", "förlänats", "förlängas", "förlängdes", "förlängs", "förlängts", "förlåtas", "förlåts", "förläts", "förledas", "förledes", "förleds", "förletts", "förlikades", "förlikas", "förlikats", "förliknas", "förliks", "förliktes", "förlikts", "förljuvades", "förlöjligades", "förlöjligas", "förlöjligats", "förlorades", "förloras", "förlorats", "förlösas", "förlöses", "förlöstes", "förlustanmälas", "förmåddes", "formades", "formaliserades", "formaliseras", "förmanades", "förmanas", "förmånsbeskattades", "förmånsbeskattas", "förmänskligades", "förmänskligas", "förmärkas", "förmärks", "förmärktes", "förmärkts", "formas", "förmås", "formats", "förmåtts", "förmedlades", "förmedlas", "förmedlats", "förmenades", "förmenas", "förmenats", "formerades", "formeras", "förmeras", "formerats", "förmerats", "formges", "formgetts", "formgivits", "förminskades", "förminskas", "förminskats", "förmodades", "förmodas", "förmögenhetsbeskattas", "förmörkades", "förmörkas", "förmörkats", "formsprutas", "formulerades", "formuleras", "formulerats", "förnams", "förnedrades", "förnedras", "förnedrats", "förnekades", "förnekas", "förnekats", "förnimmas", "förnims", "förnöjts", "förnyades", "förnyas", "förnyats", "förödas", "föröddes", "förödes", "förodlas", "förödmjukades", "förödmjukas", "förödmjukats", "föröds", "förökas", "förökats", "förolämpas", "förolämpats", "förolyckades", "förolyckas", "förolyckats", "förolycklades", "förorättats", "förordades", "förordas", "förordats", "förordnades", "förordnas", "förordnats", "förorenas", "förorenats", "förorsakades", "förorsakas", "förorsakats", "förövades", "förövas", "förövats", "förpackades", "förpackas", "förpackats", "förpassades", "förpassas", "förpassats", "förpasssades", "förpestades", "förpestas", "förpliktades", "förpliktas", "förpuppades", "förpuppas", "förråats", "förrådas", "förråddes", "förräntas", "förrättades", "förrättas", "förrättats", "förringades", "förringas", "förringats", "förrycks", "förrycktes", "fors", "förs", "försågs", "försakas", "försäkrades", "försäkras", "försäkrats", "försåldes", "försäljas", "försäljes", "församhälleligats", "församlades", "försämrades", "försämras", "försämrats", "försänkas", "försättas", "försattes", "försatts", "försätts", "förseglades", "förseglats", "forselles", "försenades", "försenas", "försenats", "förses", "försetts", "försinkas", "forskades", "forskas", "forskats", "förskingrades", "förskingras", "förskingrats", "förskjöts", "förskjutas", "förskjutits", "förskjuts", "förskonades", "förskonas", "förskönas", "förskonats", "förskönats", "försköts", "förskräckas", "förskräckes", "förskräcks", "förskrivas", "förskrivits", "förskrivs", "forslades", "förslagits", "förslappats", "forslas", "förslås", "forslats", "förslavas", "förslavats", "förslits", "förslöats", "förslogs", "förslösades", "förslösas", "förslösats", "förslummades", "förslummas", "förslutits", "försmåddes", "försnävas", "försnillas", "försökas", "försöktes", "försonades", "försonas", "försonats", "försörjas", "försörjdes", "försörjs", "försörjts", "förspillas", "förspilldes", "förspills", "förspordes", "försports", "försprödas", "förstärkas", "förstärks", "förstärktes", "förstärkts", "förstås", "förståss", "förstatligades", "förstatligas", "förstatligats", "förståtts", "förstenades", "förstenas", "förstods", "förstoppas", "förstorades", "förstoras", "förstöras", "förstorats", "förstördes", "förstörs", "förstörts", "förströddes", "förströs", "förstuckits", "förstummades", "förstummas", "förstummats", "försummades", "försummas", "försummats", "försumpats", "försuras", "försvagades", "försvagas", "försvagats", "försvarades", "försvårades", "försvaras", "försvåras", "försvarats", "försvårats", "försvenskas", "försvenskats", "försvunnes", "förtages", "förtalas", "förtalats", "förtäljas", "förtamats", "förtäras", "förtärdes", "förtärs", "förtärts", "förtas", "förtås", "förtätades", "förtätas", "förtätats", "fortbildas", "förtecknas", "förtecknats", "förtegs", "förtidsinlösas", "förtidspensionerades", "förtidspensioneras", "förtidspensionerats", "förtigas", "förtiges", "förtigits", "förtigs", "förtingligas", "förtjänas", "förtjänats", "förtjusas", "förtjustes", "förtöjas", "förtöjdes", "förtöjs", "förtorkats", "fortplantades", "fortplantas", "förtrampades", "förträngas", "förträngs", "förtrollades", "förtrollas", "förtröttades", "förtröttas", "förtröttats", "förtryckas", "förtrycks", "förtrycktes", "förtryckts", "förts", "fortsättas", "fortsattes", "förtullades", "förtullas", "förtunnades", "förtunnas", "förtydligades", "förtydligas", "förundrades", "förundradts", "förundras", "förundrats", "förunnades", "förunnas", "förunnats", "förustspås", "förutbestäms", "förutsades", "förutsägas", "förutsågs", "förutsägs", "förutsagts", "förutsättas", "förutsattes", "förutsättes", "förutsatts", "förutsätts", "förutses", "förutsetts", "förutskickades", "förutskickas", "förutspåddes", "förutspås", "förutspåtts", "förvägrades", "förvägras", "förvägrats", "förvälls", "förvaltades", "förvaltas", "förvaltats", "förvånades", "förvånas", "förvånats", "förvandlades", "förvandlas", "förvandlats", "förvänds", "förvanskades", "förvanskas", "förvanskats", "förväntades", "förväntas", "förväntats", "förvarades", "förvaras", "förvarats", "förvärms", "förvarnas", "förvarnats", "förvärrades", "förvärras", "förvärrats", "förvärvades", "förvärvas", "förvärvats", "förväxlades", "förväxlas", "förväxlats", "förvedas", "förvekligades", "förvekligas", "förverkas", "förverkats", "förverkligades", "förverkligas", "förverkligats", "förvillas", "förvirrades", "förvirras", "förvisades", "förvisas", "förvisats", "förvissades", "förvrängas", "förvrängdes", "förvrängs", "förvrängts", "förvreds", "förvridas", "förvridits", "förvrids", "föryngrades", "föryngras", "föryngrats", "fös", "fösas", "föses", "fosforyleras", "föstes", "fostrades", "fostras", "fostrats", "fösts", "fotats", "fotodokumenterades", "fotograferades", "fotograferas", "fotograferats", "fotokopieras", "fötts", "frågades", "frågasättas", "frågats", "fragmenteras", "fragmentiserades", "fraktades", "fraktas", "fraktats", "fräls", "frälsas", "framarbetats", "frambäras", "frambäres", "frambesvärjas", "frambesvärjs", "frambringats", "framdrivits", "framflyttats", "framföras", "framfördes", "framföres", "framförhandlades", "framförhandlats", "framförs", "framförts", "framfötts", "framhållas", "framhålles", "framhållits", "framhålls", "framhävas", "framhävdes", "framhävs", "framhölls", "främjades", "främjas", "främjats", "framkallades", "framkallas", "framkallats", "framkastades", "framkastas", "framlades", "framläggas", "framlagts", "framledes", "frammanas", "framräknas", "framräknats", "framställas", "framställdes", "framställs", "framställts", "framtagits", "framtvingas", "framtvingats", "frångås", "frånhändas", "frånkännas", "frankeras", "frankerats", "frånräknas", "fransats", "fråntagits", "fråntas", "fråntogs", "frapperades", "frapperas", "frapperats", "fräs", "fräschades", "fräschats", "fräses", "frästs", "fräts", "frättes", "frätts", "fredades", "fredas", "freddes", "fredells", "fredrikornas", "frekvensplaneras", "frekventerades", "frekventeras", "freongas", "frestades", "frestas", "frestats", "friades", "frias", "friats", "friderikas", "fridlysas", "fridlyses", "fridlystes", "frigavs", "friges", "frigetts", "frigivits", "frigjordes", "frigjorts", "frigöras", "frigöres", "frigörs", "frihetsberövades", "frikändes", "frikännas", "frikänns", "frikänts", "friklassas", "frikopplades", "frikopplas", "frikopplats", "friköptes", "frilades", "friläggas", "friläggs", "frisätts", "friserades", "friseras", "friserats", "friskförklarats", "frisläppas", "frisläpps", "frisläpptes", "frisläppts", "frisöranställdas", "frispelades", "friställas", "friställdes", "friställs", "friställts", "fritagits", "fritällts", "fritas", "friteras", "friterats", "fritidshemsplats", "fritogs", "frodades", "frodas", "frodats", "fröjdades", "fröjdas", "frölundagrabbarnas", "frontalpressades", "frös", "frossas", "frössvettades", "frostats", "frotterades", "frotteras", "frotterats", "frubjudas", "fruktades", "fruktas", "fruktats", "fruktmos", "frusits", "frustrerades", "frustreras", "frys", "frysas", "fryses", "frystes", "frysts", "fudgsicles", "fuentes", "fuktades", "fuktats", "fulländades", "fulländas", "fullbordades", "fullbordas", "fullbordats", "fullföljas", "fullföljdes", "fullföljs", "fullföljts", "fullförts", "fullgjorts", "fullgöras", "fullgörs", "fullkomnas", "fullkomnats", "funderades", "funderas", "funderats", "funnes", "fusionerades", "fusioneras", "fusionerats", "fuskades", "fuskas", "fuskats", "fylkades", "fylkas", "fylkats", "fyllas", "fylldes", "fylles", "fylls", "fyllts", "fyndas", "fyrdubblades", "fyrdubblas", "fyrdubblats", "fyrfaldigades", "gäckades", "gäckas", "gäckats", "gafflas", "gagnades", "gagnas", "gagnats", "galas", "gäldas", "gäldats", "gales", "gallottas", "gallras", "gallrats", "galopperades", "gals", "gammeldags", "gängas", "gapas", "garanterades", "garanteras", "garanterats", "garderas", "garnerades", "garneras", "garrotterades", "garvats", "gås", "gasades", "gasas", "gäspas", "gastades", "gästades", "gästas", "gästats", "gastkramades", "gastkramats", "gåtts", "gaulles", "gauloises", "gavs", "geddes", "geels", "gefundenes", "gekås", "genas", "generades", "generaliseras", "generas", "genererades", "genereras", "genererats", "geniförklarades", "geniförklarats", "genmanipuleras", "genmanipulerats", "genmföras", "gennes", "genomblåsts", "genomborrades", "genomborras", "genomborrats", "genombröts", "genombrutits", "genomdrevs", "genomdrivas", "genomfares", "genomfars", "genomföras", "genomfördes", "genomfors", "genomförs", "genomförts", "genomgås", "genomgörs", "genomkorsades", "genomkorsas", "genomläsas", "genomleds", "genomlidas", "genomlidits", "genomlids", "genomlysas", "genomskådades", "genomskådas", "genomskådats", "genomskärs", "genomsköljdes", "genomsökas", "genomsöks", "genomsöktes", "genomsökts", "genomströmmades", "genomströmmas", "genomsyrades", "genomsyras", "genrebestämmas", "gensköts", "geomfördes", "ges", "gestaltades", "gestaltas", "gestaltats", "getts", "gicks", "giftas", "giftes", "giftmördas", "gifts", "gillades", "gillas", "gillrades", "gillras", "gills", "giltigförklarats", "gipsas", "gipsats", "gissas", "gisslas", "givas", "gives", "givits", "givs", "gjirokastras", "gjordes", "gjöres", "gjors", "gjorts", "gjöts", "gjutas", "gjutits", "gjuts", "gladdes", "glädjas", "glädjs", "gläds", "glammas", "glamourdags", "gläns", "gläntades", "glasas", "glaseras", "glatts", "glesades", "glesas", "globaliseras", "glömmas", "glömmes", "glöms", "glorifierades", "glorifieras", "glunkas", "gnabbades", "gnabbandes", "gnagdes", "gnags", "gnällts", "gneds", "gnetas", "gnidas", "gnidits", "gnids", "gnisslas", "gnolas", "gnolats", "gnuggades", "gnuggas", "gnuggats", "gödas", "godkändes", "godkännas", "godkännes", "godkänns", "godkänts", "gödslades", "gödslas", "gödslats", "godspelas", "godtagas", "godtagits", "godtas", "godtogs", "golas", "golvades", "golvats", "gömdes", "gömmas", "göms", "gömts", "göras", "göres", "görs", "gosas", "götas", "götes", "göts", "gottgöras", "gottgörs", "gräddades", "gräddas", "gräddsås", "graderas", "graderats", "grälas", "grälats", "grämas", "grammisbelönats", "grändes", "granquists", "granskades", "granskas", "granskats", "gränsöverskrids", "gråtas", "gratineras", "gratinerats", "gråts", "gräts", "grattas", "gratulerades", "gratuleras", "grävas", "grävdes", "graveras", "graverats", "grävs", "gravsättas", "gravsattes", "gravsatts", "gravsätts", "grävts", "grejades", "greps", "grigorjevs", "grillas", "grillats", "grimaseras", "gripas", "gripes", "gripits", "grips", "groggys", "gröps", "gröpts", "gros", "grovhackas", "grovindelas", "grubblas", "grumlades", "grumlas", "grummes", "grundades", "grundas", "grundats", "grundförstärkas", "grundlades", "grundläggas", "grundlägges", "grundläggs", "grundlagsfästas", "grundlagts", "grundlurades", "grundlurats", "grundutbildas", "grundutbildats", "grupperades", "grupperas", "grupperats", "gruppvåldtas", "grusades", "grusas", "grusats", "guidades", "guidas", "guidats", "gullades", "gungades", "gynnades", "gynnas", "gynnats", "gyttras", "habermas", "hackades", "hackas", "hackats", "häcklades", "häcklas", "häcklats", "hades", "haemoplas", "haffades", "haffas", "hafsas", "hägnas", "hägnats", "hagsätras", "hajas", "hakades", "hakas", "hakats", "hakkas", "häktades", "häktas", "häktats", "halades", "halas", "halats", "hållas", "hällas", "hälldes", "hålles", "hälles", "hållits", "hålls", "hälls", "hållts", "hällts", "hälsades", "halsas", "hälsas", "hälsats", "halshöggs", "halshuggas", "halshuggits", "halshuggs", "hälsningstalas", "halstrades", "halstras", "halvägs", "halverades", "halveras", "halverats", "halvglas", "halvpensioneras", "hamas", "hämmades", "hämmas", "hämmats", "hamnas", "hamrades", "hamras", "hamrats", "hämtades", "hämtas", "hämtats", "hånades", "hånas", "hånats", "handelsstoppades", "handhas", "handikappades", "handikappanpassas", "handikappas", "handlades", "handläggas", "handläggs", "handlagts", "handlas", "handlats", "handlingsförlamas", "handplockades", "handplockas", "handplockats", "handskadades", "handskades", "handskas", "handskats", "handvevas", "hänföras", "hänfördes", "hänförs", "hänförts", "hängas", "hängdes", "hänges", "hängs", "hängts", "hanhals", "hanns", "hänryckas", "hanses", "hänskjutas", "hänskjutits", "hänskjuts", "hänsköts", "hånskrattas", "hanterades", "hanteras", "hanterats", "hänvisades", "hänvisas", "hänvisats", "harangerades", "harangeras", "härbärgerades", "härbärgeras", "härbärgerats", "härdades", "härdas", "härdats", "hårdbantas", "hårdbevakas", "hårddrillas", "hårdexploaterats", "hårdgranskas", "hårdlanserades", "hårdlanseras", "hårdpumpats", "härjades", "härjas", "härjats", "härledas", "härleds", "härletts", "harmades", "harmas", "harmonieras", "harmonierats", "harmoniseras", "härröras", "härrydas", "harvas", "has", "hasades", "hässjades", "hässles", "hastas", "hastats", "hatades", "hatas", "haussades", "haussas", "håvas", "hävas", "hävdades", "hävdas", "hävdats", "hävdes", "häves", "hävs", "hävts", "hedrades", "hedras", "hedrats", "hejas", "hejdades", "hejdas", "hejdats", "helas", "helgades", "helgarderas", "helgas", "helgonförklarades", "hellacopters", "hells", "helrenoverades", "helrenoverats", "helsingfors", "heltidsanställs", "helvittes", "hemfördes", "hemförlovades", "hemförlovas", "hemkallas", "hemlighållas", "hemlighållits", "hemlighålls", "hemlighölls", "hemligstämplades", "hemligstämplas", "hemligstämplats", "hemskjuts", "hemsökas", "hemsöks", "hemsöktes", "hemsökts", "hetsades", "hetsas", "hetsats", "hettades", "hettas", "hilaritas", "himbas", "himlalots", "hindrades", "hindras", "hindrats", "hinnas", "hinns", "hispaniseras", "hissades", "hissas", "hissats", "hitleriseras", "hittades", "hittas", "hittats", "hivades", "hivas", "hivinfekterades", "hjälpas", "hjälps", "hjälpsåtts", "hjälptes", "hjälpts", "hjärntvättats", "hjärtopereras", "hjärtopererats", "hoas", "höegs", "höggs", "högindustrialiseras", "högpromiskuösas", "högtalarförmedlas", "högtidlighållas", "högtidlighålls", "höjas", "höjdes", "höjs", "hojtas", "höjts", "höljas", "höljdes", "höljes", "holkades", "holkas", "holkats", "hölls", "hollywoodiserades", "homogeniserades", "homogeniseras", "honaratiores", "honkas", "honoreras", "honorerats", "hopfogades", "hoppasts", "horas", "höras", "hördes", "höres", "horisontaliseras", "hormonstimulerats", "hormontestas", "hörs", "hörsammades", "hörsammas", "hörsammats", "hortas", "hörts", "hotades", "hotas", "hotats", "hottas", "hottats", "höves", "hudflängas", "hudflängs", "hudflängts", "hudstrykas", "huggas", "huggits", "huggs", "hukandes", "humaniserades", "humaniseras", "humaniserats", "hummades", "hundradubblats", "hundratas", "hunnits", "hunsades", "hunsas", "hunsats", "hurrades", "hurras", "hutades", "hutas", "huttlas", "huttrades", "huttras", "hutus", "huvudstas", "hycklas", "hyfsats", "hygieniseras", "hyllades", "hyllas", "hyllats", "hypas", "hypats", "hyras", "hyrdes", "hyressättas", "hyrs", "hyrts", "hys", "hysas", "hystes", "hysts", "hyvlades", "hyvlas", "iaktas", "iaktatagas", "iakttagas", "iakttages", "iakttagits", "iakttas", "iakttogs", "idénförverkligades", "identifierades", "identifieras", "identifieratas", "identifierats", "ideologiserats", "idkades", "idkas", "idoliseras", "idrottas", "idrottsskadas", "idylliseras", "ifrågasättas", "ifrågasattes", "ifrågasättes", "ifrågasatts", "ifrågasätts", "ifrågsattes", "igångsättas", "igångsattes", "igångsatts", "igångsätts", "igenkännes", "igenkänns", "ignorerades", "ignoreras", "ignorerats", "ihågkommas", "ihågkommes", "ihågkommits", "ihågkoms", "iklädas", "ikläddes", "ikläds", "ikläs", "iklätts", "ilijas", "illfänas", "illuminerades", "illumineras", "illusteras", "illustrerades", "illustreras", "illustrerats", "illustrererades", "illustrereras", "imiterades", "implementeras", "imponerades", "imponeras", "imponerats", "importerades", "importeras", "importerats", "impregneras", "impregnerats", "improviserades", "improviseras", "improviserats", "impulsas", "inackorderades", "inaktiveras", "inandades", "inandandes", "inandas", "inandats", "inarbetades", "inbegripas", "inbegrips", "inberäknas", "inbesparas", "inbetalas", "inbillas", "inbjöds", "inbjudas", "inbjudes", "inbjudits", "inbjuds", "inblandades", "inblandas", "inböjds", "indefinieras", "indelades", "indelas", "indelats", "indelsas", "indentifierats", "independentfilmernas", "indikeras", "individanpassas", "individualiseras", "individualiserats", "indoktrineras", "indoktrinerats", "indragas", "indunstas", "industrialiserades", "industrialiseras", "industrialiserats", "infångades", "infångas", "infasas", "infattades", "infattas", "infekteras", "infekterats", "infiltrerades", "infiltreras", "inflammeras", "inflammerats", "inflationsskyddas", "inflikas", "influerades", "influeras", "influerats", "infogades", "infogas", "infogats", "införas", "infördes", "infordrades", "infordras", "infordrats", "införes", "införlivades", "införlivas", "införlivats", "informerades", "informeras", "informerats", "införs", "införskaffades", "införskaffas", "införskaffats", "införts", "infriades", "infrias", "infriats", "ingås", "ingåtts", "ingavs", "inges", "ingicks", "ingjutits", "ingjuts", "inhägnas", "inhägnats", "inhämtades", "inhämtas", "inhämtats", "inhandlades", "inhandlas", "inhandlats", "inhängnas", "inhiberades", "inhiberas", "inhöstats", "inhysas", "inhystes", "inhysts", "initierades", "initieras", "initierats", "injicerades", "injiceras", "injicerats", "inkallades", "inkallas", "inkallats", "inkarnerades", "inkarneras", "inkasserades", "inkluderades", "inkluderas", "inkluderats", "inkoms", "inkomstprövas", "inköpas", "inköptes", "inköpts", "inkorpererades", "inkorporerades", "inkorporeras", "inkorporerats", "inkrävas", "inkvarterades", "inkvarteras", "inkvarterats", "inlades", "inlämnades", "inlämnas", "inlämnats", "inlånades", "inläras", "inledas", "inledddes", "inleddes", "inledes", "inleds", "inlemmades", "inlemmas", "inlemmats", "inletts", "inlevereras", "inlevererats", "inlines", "inlösas", "inlöses", "inlöstes", "inmonteras", "inmundigades", "inmundigas", "innebrändes", "innefattades", "innefattas", "innehades", "innehafts", "innehållas", "innehållsdeklareras", "innehas", "inneslutas", "innesluts", "inordnades", "inordnas", "inordnats", "inplaneras", "inplanterades", "inplanteras", "inplanterats", "inpräglas", "inpräglats", "inpräntades", "inpräntas", "inpräntats", "inprogrammerats", "inräknades", "inräknas", "inräknats", "inramades", "inramas", "inramats", "inrangeras", "inrangerats", "inrapporterades", "inrapporteras", "inrapporterats", "inrättades", "inrättas", "inrättats", "inredas", "inreddes", "inreds", "inregistrerades", "inregistreras", "inregistrerats", "inretts", "inriktades", "inriktas", "inriktats", "inringas", "inristats", "inrymdes", "inrymmas", "inryms", "inrymts", "insågs", "insamlades", "insamlas", "insamlats", "insänts", "insättas", "insattes", "insatts", "inseminerades", "insemineras", "inses", "insinueras", "insinuerats", "insisteras", "inskaffades", "inskärpas", "inskärptes", "inskeppades", "inskjutas", "inskolas", "inskränkas", "inskränks", "inskränktes", "inskränkts", "inskrevs", "inskrivas", "insöndras", "insorteras", "inspärras", "inspekterades", "inspekteras", "inspekterats", "inspelats", "inspirationsgivs", "inspirerades", "inspireras", "inspirerats", "inställas", "inställdes", "installerades", "installeras", "installerats", "inställs", "inställts", "instängas", "instiftades", "instiftas", "instiftats", "institutionaliserades", "institutionaliseras", "instruerades", "instrueras", "instruerats", "instrumentaliseras", "insvepas", "insveps", "insveptes", "insvepts", "intagas", "intagits", "intalleras", "intas", "intecknades", "intecknas", "intecknats", "integrerades", "integreras", "integrerats", "intellektualiseras", "intellektualiserats", "intensifierades", "intensifieras", "intensifierats", "interfolierades", "interfolieras", "interfolierats", "internationales", "internationaliserades", "internationaliseras", "internationaliserats", "internerades", "interneras", "internerats", "internrekryterats", "internutbildas", "interpelleras", "interpunkterades", "intervjuades", "intervjuas", "intervjuats", "intevjuas", "intimiseras", "intimiserats", "intjänas", "intogs", "intressestyras", "intrigeras", "introducerades", "introduceras", "introducerats", "intvingas", "intygades", "intygas", "invaderades", "invaderas", "invaderats", "invaggades", "invaggas", "invaggats", "invaldes", "invalidiserades", "invalidiseras", "invalidiserats", "inväljas", "inväljs", "invalts", "invändas", "invandrades", "inväntades", "inväntas", "invecklas", "inventeras", "inventerats", "investerades", "investeras", "investerats", "invigas", "invigdes", "invigs", "inviskas", "inviteras", "inviterats", "invlades", "involverades", "involveras", "involverats", "inympas", "inympats", "iordningsställts", "iordningställas", "iordningställdes", "iordningställs", "iordningställts", "irriterades", "irriteras", "irriterats", "isades", "isas", "iscensättas", "iscensattes", "iscensatts", "iscensätts", "isolerades", "isoleras", "isolerats", "iståndsätts", "ives", "jagades", "jagas", "jagats", "jäktas", "jamas", "jämföras", "jämfördes", "jämförs", "jämförts", "jämkades", "jämkas", "jämnades", "jämnas", "jämnats", "jämnsides", "jämnställs", "jämställas", "jämställdes", "jämställes", "jämställs", "jämställts", "järfällas", "järnberikats", "järnvägsgods", "järvas", "jäs", "jäses", "jävas", "jävats", "jävlas", "jävlats", "jayhawkes", "jenufas", "jesses", "jippofieras", "jobbades", "jobbas", "jobbats", "jonglerades", "jonhälls", "joniseras", "joniserats", "jordbegravas", "jordfästas", "jordfästes", "jordgas", "journalföras", "journalistbas", "jublades", "jublas", "jublats", "juckas", "julas", "justerades", "justeras", "justerats", "kabilas", "kablades", "kablas", "kablats", "kacklades", "kåges", "käkopererats", "kalätas", "kalfatras", "kalhöggs", "kalkades", "kalkas", "kalkats", "kalkylerades", "kalkyleras", "kalkylerats", "kallades", "kallas", "kallats", "kallistenes", "kallpressas", "kallrökas", "kallrökts", "källsorteras", "kallsvettades", "kallsvettas", "kambodjas", "kammades", "kammas", "kammats", "kamouflagemålats", "kamoufleras", "kämpas", "kanaliserades", "kanaliseras", "kanaliserats", "kånkades", "kånkas", "kånkats", "känndes", "kännetecknades", "kännetecknas", "kännetecknats", "kännts", "kanoniserades", "kanoniseras", "käns", "kantades", "kantas", "kantats", "kantfållas", "kantställas", "kapades", "kapas", "kapats", "kapitaliseras", "kappades", "kappseglas", "kapslades", "kapslas", "kapslats", "karaktäriserades", "karaktäriseras", "karaktäriserats", "karakteriserades", "karakteriseras", "karakteriserats", "karikeras", "kärnades", "kärnats", "kartlades", "kartläggas", "kartläggs", "kartlagts", "karvas", "kasserades", "kasseras", "kasserats", "kastades", "kastas", "kastats", "kastreras", "kastrerats", "katalas", "katalogiseras", "katalogiserats", "kategoriseras", "kategoriserats", "kattas", "kavlades", "kavlas", "keats", "kedjades", "kedjats", "keldereks", "kemtvättas", "keynes", "kickades", "kickats", "kidnappades", "kidnappas", "kidnappats", "kikås", "kilades", "kilas", "killas", "kindpussas", "kinshasas", "kissas", "kittades", "kittlades", "kittlas", "klaas", "kläckas", "kläckningsplats", "kläcks", "kläcktes", "kläckts", "klädas", "kladdades", "kladdas", "kladdats", "kläddes", "kläds", "klagades", "klagas", "klagats", "klämdes", "klämmas", "kläms", "klämtas", "klämts", "klandrades", "klandras", "klandrats", "klankas", "klappades", "klappas", "klarades", "klaras", "klarats", "klargjordes", "klargjorts", "klargöras", "klargörs", "klarlades", "klarläggas", "klarläggs", "klarlagts", "kläs", "klassades", "klassas", "klassats", "klassificerades", "klassificeras", "klassificerats", "klättrades", "klättras", "klätts", "klemas", "kletas", "kletats", "klias", "klickas", "klimpades", "klippas", "klipps", "klipptes", "klippts", "klipsades", "klistrades", "klistras", "klistrats", "klockades", "klockas", "klockats", "klonas", "klonats", "kloreras", "klorgas", "klös", "klösts", "klottras", "klottrats", "klövs", "klubbades", "klubbas", "klubbats", "klubbhus", "kluddats", "klumpades", "klumpas", "kluvits", "klyftas", "klyvas", "klyvs", "klyvts", "knackades", "knäckas", "knackats", "knäcks", "knäcktes", "knäckts", "knådas", "knådats", "knallas", "knäopereras", "knåpades", "knåpas", "knäppas", "knäpps", "knäpptes", "knarkas", "knas", "knäsattes", "knäsatts", "kneps", "knipas", "knips", "knivdödades", "knivdödas", "knivhöggs", "knivhotas", "knivhuggits", "knivhuggs", "knivmördades", "knivskars", "knivskärs", "knockades", "knockas", "knockats", "knölades", "knopas", "knorrades", "knorras", "knöts", "knottrades", "knuckles", "knuffades", "knuffas", "knuffats", "knusslades", "knutits", "knycklas", "knycktes", "knypplats", "knystas", "knytas", "knyts", "köas", "kodas", "kodats", "kodifieras", "kodifierats", "kokades", "kokas", "kokats", "kolgrillas", "kollades", "kollas", "kollats", "kollektivansluts", "kolles", "kolonialiseras", "koloniserades", "koloniseras", "koloniserats", "koloreras", "kombinerades", "kombineras", "kombinerats", "kommenderades", "kommenderas", "kommenderats", "kommenterades", "kommenteras", "kommenterats", "kommersialiseras", "kommersialiserats", "kommits", "kommunaliserades", "kommunaliseras", "kommuniceras", "kommunplacerades", "kompades", "kompas", "kompenserades", "kompenseras", "kompenserats", "kompetensutvecklas", "komplettaras", "kompletterades", "kompletteras", "kompletterats", "komplicerades", "kompliceras", "komplicerats", "komponerades", "komponeras", "komponerats", "komposterades", "komposteras", "komposterats", "komprimeras", "komprimissas", "komprometterats", "kompromissas", "kompromissats", "könas", "koncenteras", "koncenterats", "koncentreades", "koncentrerades", "koncentreras", "koncentrerats", "koncipierades", "koncipieras", "koncipierats", "kondenserades", "kondenseras", "konditionstestas", "konfektioneras", "konfirmerades", "konfirmeras", "konfirmerats", "konfiskerades", "konfiskeras", "konfiskerats", "konfronterades", "konfronteras", "konfronterats", "kongeliges", "konkretiserades", "konkretiseras", "konkretiserats", "konkurrensutsättas", "konkurrensutsattes", "konkurrensutsatts", "konkurrerades", "konkurreras", "konkurrerats", "konserverades", "konserveras", "konserverats", "könskvoteras", "könskvoterats", "konsoliderades", "konsolideras", "konsoliderats", "konspirerades", "konstaterades", "konstateras", "konstaterats", "konstgods", "konstigtueras", "konstituerades", "konstitueras", "konstmanifesteras", "konstruerades", "konstrueras", "konstruerats", "konsulterades", "konsulteras", "konsulterats", "konsumerades", "konsumeras", "konsumerats", "kontaktades", "kontaktas", "kontaktats", "konterfejas", "kontinentaliserats", "kontollerats", "kontrakteras", "kontrakterats", "kontras", "kontrasterades", "kontrasteras", "kontrollerades", "kontrolleras", "kontrollerats", "kontrollvägdes", "kontrollvägts", "konverteras", "koordinerades", "koordineras", "köpas", "kopierades", "kopieras", "kopierats", "köplats", "kopplades", "kopplas", "kopplats", "köprekommenderades", "köps", "köptes", "köpts", "kopuleras", "korades", "koras", "köras", "korats", "kördes", "koreograferats", "köres", "korkades", "korkas", "korngolds", "korporativiserats", "korrekturläses", "korreleras", "korrigerades", "korrigeras", "korrigerats", "korrumperas", "korrumperats", "körs", "korsades", "korsas", "korsats", "korsfästas", "korsfästes", "korsfästs", "kortades", "kortas", "kortats", "körts", "kortslöts", "kortsluts", "korvas", "kosroes", "kostas", "kostaterades", "kostnadsberäknades", "kostnadsberäknas", "kostnadsberäknats", "kostnadsföras", "kotrollvägdes", "kovacs", "krackeleras", "kramades", "kramas", "kramats", "kramkalas", "krängdes", "krånglats", "krängts", "kränkas", "kränks", "kränktes", "kränkts", "kransats", "krattas", "krävas", "krävdes", "kräves", "krävs", "krävts", "kreerades", "kremerades", "kremeras", "kretsloppsanpassas", "krigsplaceras", "kriminaliserades", "kriminaliseras", "kringgärdades", "kringgärdas", "kringgås", "kringgåtts", "kringgicks", "kringgjutits", "kringränts", "kringskäras", "kringskars", "kringvärvs", "kristalliserades", "kristalliseras", "kristnades", "kritas", "kritiserades", "kritiseras", "kritiserats", "krockades", "krockprovas", "krokades", "krökas", "krokats", "kröks", "kröktes", "krönas", "krönes", "kröns", "kröntes", "krönts", "kroppsvisiterades", "kroppsvisiteras", "krossades", "krossas", "krossats", "krusades", "krusas", "kryddades", "kryddas", "kryddats", "krympas", "krymps", "krymptes", "krympts", "krypteras", "krypterats", "krypts", "kryssas", "kryssats", "kryssgarderas", "kubbas", "kuggades", "kuggas", "kullas", "kullkastas", "kultiveras", "kultiverats", "kulturminnesmärkas", "kulturminnesskyddats", "kulturprofileras", "kulverteras", "kulverterats", "kumquats", "kundanpassas", "kundbas", "kundes", "kungjordes", "kungjorts", "kungörs", "kunnas", "kupades", "kuperas", "kuppats", "kureras", "kursas", "kursras", "kuvas", "kuvats", "kvackas", "kvaddades", "kvaddats", "kvalificeras", "kvalitetsäkras", "kvalitetsprövats", "kvalitetssäkras", "kvalitetssäkrats", "kvalitetsutbildats", "kväljdes", "kvällades", "kvalplats", "kvantifieras", "kvarhållas", "kvarhållits", "kvarhålls", "kvarhölls", "kväsas", "kvästes", "kvävas", "kvävdes", "kvävs", "kvinnoplats", "kvittas", "kvittats", "kvitterades", "kvitteras", "kvotbelades", "kvoteras", "kvoterats", "kylas", "kyldes", "kyls", "kylts", "kyssas", "kysstes", "laborades", "laboreras", "lackeras", "lackerats", "läcks", "läckts", "laddades", "laddas", "laddats", "lades", "lafis", "lagades", "lagas", "lagats", "lagerhållas", "lagfästes", "lagfästs", "lagföras", "lagfördes", "läggas", "lägges", "lägggas", "läggs", "lagrades", "lagrådsremitteras", "lagras", "lagrats", "lagregleras", "lagstadgades", "lagstiftas", "lagtrots", "lågtrycksgjuts", "lagts", "läkarundersökas", "läkarundersöktes", "lakas", "läkas", "lakats", "läks", "läktes", "läktrats", "läkts", "lambrecks", "lamineras", "lämnades", "lämnas", "lämnats", "lämpades", "lämpas", "lämpats", "lamslagits", "lamslås", "lamslogs", "lånades", "lånas", "lånats", "lanceras", "landades", "landsattes", "landsatts", "landsförvisades", "landsförvisas", "landsförvisats", "lånefinansieras", "langades", "langas", "långås", "långsits", "långtidslagras", "långtidsparkerades", "långtidsskolats", "längts", "languages", "länkades", "länkas", "länkats", "länsades", "länsas", "länsats", "lanserades", "lanseras", "lanserats", "lansertas", "länspumpas", "lapas", "lappades", "lappas", "lappats", "läras", "lärdes", "larmades", "larmas", "larmats", "lärs", "larses", "lårskadades", "lärts", "las", "lås", "läs", "låsas", "läsas", "laserats", "låses", "läses", "lassades", "lassas", "låssas", "lassats", "låssats", "lastades", "lastas", "lastats", "låstes", "lästes", "låsts", "lästs", "låtits", "lättades", "lättas", "lättats", "läxats", "leasades", "leasas", "leasats", "ledas", "leddes", "ledes", "ledigförklarades", "ledigförklaras", "ledigförklarats", "leds", "ledsagades", "ledsagas", "legalförskrevs", "legaliserades", "legaliseras", "legaliserats", "legeras", "legitimerades", "legitimeras", "legitimerats", "lekas", "leks", "lektes", "lemlästades", "lemlästas", "lemlästats", "lemströms", "lenas", "letades", "letas", "letats", "letts", "levandegörs", "levas", "levdes", "leverades", "leveraras", "levererades", "levereras", "levererats", "levertransplanteras", "leves", "levs", "levts", "lfinns", "liberaliseras", "liberaliserats", "licensbryggs", "licenserats", "licenstillverkats", "lidas", "lidits", "likformas", "liknades", "liknas", "liknats", "likställas", "likställdes", "likställs", "likviderades", "likvideras", "limmades", "limmas", "limmats", "lindades", "lindas", "lindats", "lindrades", "lindras", "lindrats", "linjeras", "linoljebränns", "lipas", "lirades", "liras", "lirkas", "lirkats", "listades", "listas", "listats", "livades", "livas", "lives", "livnärs", "livstidsförlängdes", "ljögs", "ljudas", "ljudisoleras", "ljugas", "ljugs", "ljummades", "ljummas", "ljumskskadades", "ljussatts", "lockades", "lockas", "lockats", "lockoutas", "lodas", "lödas", "löds", "loggas", "logothetis", "logrones", "lokaliserades", "lokaliseras", "lokaliserats", "lomas", "lönades", "lönas", "lönediskrimineras", "lönediskriminerats", "löneras", "lönesättas", "longeras", "lönnbrännes", "loopas", "loopats", "loosegoats", "löpas", "löps", "lösas", "löses", "lösgivas", "lösgjordes", "lösgjorts", "lösgöras", "lösgöres", "lösgörs", "lossades", "lossas", "lossats", "löstes", "lösts", "lotsades", "lotsas", "lotsats", "lottades", "lottas", "lottats", "lovades", "lövades", "lovas", "lövas", "lovats", "lövats", "lovordades", "lovordas", "lovordats", "lovprisades", "lovprisas", "lovsjungits", "lovsjungs", "luckrades", "luckras", "luckrats", "luftades", "luftas", "luftats", "luftlandsattes", "lugnades", "lugnas", "lukkes", "lurades", "luras", "lurats", "lusläses", "luslästes", "lussas", "lutades", "lutas", "luttras", "luttrats", "lyckes", "lyckets", "lyckönskas", "lycksönskades", "lycktas", "lydas", "lyddes", "lyftas", "lyftes", "lyfts", "lynchades", "lynchats", "lys", "lysas", "lyses", "lyss", "lyssnas", "lystes", "lysts", "lyxrenoveras", "lyxsanerades", "lyxsaneras", "lyxsanerats", "macoutes", "måddes", "mades", "magallanes", "magasinerades", "magasineras", "magasinerats", "magpumpas", "magpumpats", "magras", "majos", "mäklades", "makulerades", "makuleras", "målades", "malas", "målas", "målats", "malbas", "målbestäms", "maldes", "mals", "malts", "mammograferats", "manades", "manas", "månas", "manats", "mångdubblades", "mångdubblas", "mångdubblats", "mångfaldigades", "mångfaldigas", "mångfaldigats", "manglades", "manglas", "manglats", "månglats", "manifesterades", "manifesteras", "manifesterats", "manipulerades", "manipuleras", "manipulerats", "manövrerades", "manövreras", "manövrerats", "mantalskrivas", "mantalsskrivas", "marantas", "marginaliserades", "marginaliseras", "marginaliserats", "marineras", "marinerats", "märkas", "markerades", "markeras", "markerats", "märkes", "markets", "markledes", "marknadsanpassas", "marknadsföras", "marknadsfördes", "marknadsförs", "marknadsförts", "marknadsintroducerades", "märks", "märktes", "märkts", "markurells", "marples", "marterades", "martikas", "mås", "maskas", "maskerades", "maskeras", "maskerats", "maskintvättas", "maskinveks", "massakrerades", "massakreras", "mässas", "masserades", "masseras", "massproduceras", "masstillverkas", "mastas", "mästras", "matades", "matas", "mätas", "matats", "matchades", "matchas", "matchats", "matchinsats", "materialiserades", "materialiseras", "materialiserats", "mätes", "matplats", "mäts", "mattades", "mattas", "måttas", "mättas", "mattats", "mättats", "mättes", "mätts", "matutes", "maximeras", "medagerandes", "medaljeras", "medaljhyllades", "meddelades", "meddelas", "meddelats", "medfinansieras", "medföras", "medfördes", "medföres", "medförs", "medgavs", "medges", "medgivits", "medhavas", "medialiserats", "medicineras", "medicinerats", "medikaliserades", "medlas", "medräknas", "medtagas", "medtages", "medtas", "medtogs", "medvetandegöras", "mefistofeles", "mejades", "mejas", "mejats", "mejslades", "mekaniserats", "memoreras", "menades", "menas", "mennas", "meritvärderas", "mestadelas", "metroiseras", "midas", "mikrats", "mikrofilmades", "mikrofilmas", "mildrades", "mildras", "mildrats", "miles", "militariserades", "militariseras", "militariserats", "miljöanpassas", "miljöcertifierats", "miljödeklareras", "miljögranskats", "miljöklassas", "miljömärkas", "miljömärkts", "miljöprövas", "miljöskyddas", "mills", "mimades", "mimas", "mineraliseras", "mineras", "minerats", "minglats", "minimerades", "minimeras", "minimerats", "minnns", "minskades", "minskas", "minskats", "minsprängdes", "minutes", "misbruges", "missades", "missas", "missats", "missbrukades", "missbrukas", "missbrukats", "missfärgas", "missförstås", "missförståtts", "missförstods", "missgynnades", "missgynnas", "missgynnats", "misshandlades", "misshandlas", "misshandlats", "misshushållas", "missköts", "misskötts", "misskrediterades", "missledas", "missletts", "misssgynnas", "misssköts", "misstänkas", "misstänkliggjordes", "misstänkliggöras", "misstänkliggörs", "misstänks", "misstänktes", "misstänkts", "misstas", "misstolkas", "misstolkats", "misstroddes", "misstros", "misstydas", "missunnnas", "missupfattas", "missuppattades", "missuppfattades", "missuppfattas", "missuppfattats", "mixas", "mjölkades", "mjölkas", "mjukades", "mjukas", "mjukats", "mjukpressats", "mobbades", "mobbas", "mobbats", "mobiliserades", "mobiliseras", "mobiliserats", "möblerades", "möbleras", "möblerats", "mockades", "modeinitierades", "moderninserats", "moderniserades", "moderniseras", "moderniserats", "modifierades", "modifieras", "modifierats", "mognadslagras", "mogulrikets", "möjas", "möjliggjordes", "möjliggjorts", "möjliggöras", "möjliggörs", "möjligjorts", "momsbefrias", "momsbeläggas", "momsbeläggs", "momsbelagts", "mondes", "monkees", "monograferats", "monopoliseras", "monopoliserats", "monsterras", "mönsterskyddats", "mönstrades", "mönstras", "mönstrats", "monterades", "monteras", "monterats", "monumentaliseras", "moraliseras", "mörbultats", "mördades", "mördas", "mördats", "mordhotades", "mordhotats", "mörkas", "mörklades", "mörkläggas", "mörkläggs", "mörklagts", "morrades", "morras", "mortuis", "mosades", "mosas", "motades", "motarbetades", "motarbetas", "motarbetats", "motas", "motats", "motbevisas", "motionerades", "motioneras", "motiverades", "motiveras", "motiverats", "motoriseras", "motsades", "motsägas", "motsäges", "motsägs", "motsagts", "motstås", "motsvarades", "motsvaras", "motsvarats", "mottagas", "mottages", "mottagits", "mottas", "mottogs", "motverkades", "motverkas", "motverkats", "muddras", "multipliceras", "mulugetas", "mumifieras", "mumifierats", "mumlades", "mumlas", "mumlats", "mungnabbas", "munhöggs", "munhuggas", "munhuggs", "murades", "muras", "murats", "musicerades", "musiceras", "mutades", "mutas", "mutats", "muttrades", "muttras", "muttrats", "mutts", "muzungos", "myers", "myglades", "myndigförklaras", "myndighetsförklarats", "myntades", "myntas", "myntats", "mysas", "mystifieras", "mystifierats", "mytifieras", "nackas", "nádas", "nåddes", "nådes", "nafsades", "nagelfaras", "nagelfarits", "nagelfars", "nagelfors", "naggades", "naggas", "naggats", "naglades", "naglas", "nålas", "nålats", "namnades", "nämnas", "nämndes", "nämnes", "namngavs", "namnges", "namngetts", "namngivits", "nämns", "namnskyddas", "nämnts", "näms", "nämts", "nändes", "nännas", "nänns", "näns", "nänts", "näpsas", "näras", "närdes", "näres", "närmas", "narracotts", "narrades", "narras", "narrats", "närs", "närts", "nas", "nås", "nasas", "nästas", "nationaliserades", "nationaliseras", "nationaliserats", "natoanpassas", "natofieras", "nattas", "nåtts", "nattstädas", "nattstängs", "naturaliseras", "naturligtivs", "navotas", "nedbringas", "nedbringats", "nedbrytas", "nedflyttningsplats", "nedgjordes", "nedgraderas", "nedkämpas", "nedkämpats", "nedlades", "nedläggas", "nedlagts", "nedmonterades", "nedmonteras", "nedrangeras", "nedreviderades", "nedreviderats", "nedrustas", "nedsättas", "nedsätts", "nedsköljes", "nedskrivas", "nedslås", "nedtecknades", "nedtecknats", "nedtynges", "nedtystas", "nedvärderas", "nedvärderats", "negeras", "negligeras", "negligerats", "nekades", "nekas", "nekats", "nerslås", "nettoamorteras", "nettoexporterades", "nettoköptes", "nettoköpts", "nettosåldes", "nettosålts", "neurosedynskadades", "neutraliserades", "neutraliseras", "neutraliserats", "nickades", "nickas", "nitas", "nivågrupperas", "njutas", "njutes", "njuts", "nobbades", "nobbas", "nobbats", "nobelprisförbigåtts", "nödbromsas", "nödgades", "nödgats", "nödsakats", "nödslaktades", "nödslaktas", "nödslaktats", "nödstoppades", "nödvändiggjordes", "nollades", "nollställas", "nollställs", "nollställts", "nolltaxeras", "nominerades", "nomineras", "nominerats", "noms", "nonchalerades", "nonchaleras", "nonchalerats", "nordstedts", "normalförklaras", "normaliserades", "normaliseras", "normaliserats", "nös", "nötas", "noterades", "noteras", "noterats", "noteringsstoppades", "nöts", "nöttes", "nötts", "nuddas", "numererats", "numreras", "numrerats", "nuvärdeberäknas", "nuvärdeberäknats", "nuvärdesberäknas", "nyanlagts", "nyanmäldes", "nyanserades", "nyanseras", "nyanserats", "nyanställas", "nyanställdes", "nyanställs", "nyanställts", "nybeställas", "nybyggas", "nydanades", "nyemitteras", "nyetableras", "nygestaltades", "nyindustrialiseras", "nyinvandrades", "nyinvigts", "nykryddats", "nynnades", "nynnas", "nyordnas", "nyorienteras", "nyöversattes", "nyöversatts", "nyplanterades", "nyprövas", "nyps", "nyrekryteras", "nyritades", "nyskapas", "nystades", "nystas", "nystats", "nytillverkas", "nytolkas", "nytrycktes", "nyttjades", "nyttjas", "nyttjats", "nyutexamineras", "nyutgavs", "nyvaldes", "nyväljs", "oakes", "oates", "obducerades", "obduceras", "obducerats", "obligationsras", "obs", "observerades", "observeras", "observerats", "ocksåses", "ocksåstärkts", "ocksåtas", "ockuperades", "ockuperas", "ockuperats", "ödas", "ödelades", "ödeläggas", "ödeläggs", "ödelagts", "odlades", "odlas", "odlats", "odödligförklarats", "odödliggjordes", "ödslas", "ödslats", "odugligförklarats", "odyssevs", "offentliggjordes", "offentliggjorts", "offentliggöras", "offentliggörs", "offereras", "offererats", "offetliggjordes", "offrades", "offras", "offrats", "ofredas", "ogilitigförklaras", "ogillades", "ogillas", "ogillats", "ogiltigförklarades", "ogiltigförklaras", "ogiltigförklarats", "öis", "ojades", "ojas", "ökades", "ökas", "ökats", "olagligförklaras", "olagligförklarats", "olas", "olåtandes", "oliktänkades", "oljas", "oljats", "olövanes", "olyckas", "olycksfallsförsäkras", "omarbetades", "omarbetas", "omarbetats", "ombads", "ombedas", "ombedes", "ombeds", "ombes", "ombesörjas", "ombesörjdes", "ombesörjs", "ombesörjts", "ombetts", "ombildades", "ombildas", "ombildats", "omdanades", "omdanas", "omdanats", "omdaterats", "omdefinieras", "omdirigerades", "omdirigeras", "omdirigerats", "omdisponeras", "omdöpas", "omdöps", "omfamnades", "omfamnas", "omfatas", "omfattades", "omfattas", "omfattats", "omfatttas", "omflytes", "omfördelades", "omfördelas", "omfördelats", "omförhandlades", "omförhandlas", "omförhandlats", "omformades", "omformas", "omformulerades", "omformuleras", "omgärdades", "omgärdas", "omgärdats", "omgavs", "omges", "omgestaltades", "omgestaltas", "omgestaltats", "omgetts", "omgivits", "omgrupperas", "omhäktades", "omhändertagas", "omhändertagits", "omhändertas", "omhändertogs", "omhuldades", "omhuldas", "omhuldats", "omintetgjordes", "omintetgjorts", "omintetgöras", "omintetgörs", "omisoleras", "ömkas", "omlokaliseras", "ommöbleras", "omnamnades", "omnämnas", "omnämndes", "omnämns", "omnämnts", "omöjliggjordes", "omöjliggjorts", "omöjliggöras", "omöjliggöres", "omöjliggörs", "omorganiserades", "omorganiseras", "omorganiserats", "omorienteras", "omplacerades", "omplaceras", "omplacerats", "omplanteras", "omprioriteras", "omprogrammeras", "omprövades", "omprövas", "omräknas", "omramades", "omregistreras", "omringades", "omringas", "omritades", "omröres", "omsättas", "omsattes", "omsatts", "omsätts", "omskapades", "omskapas", "omskäras", "omskolas", "omskolats", "omskrivas", "omskrivits", "omskrivs", "omslingrades", "omslöts", "omslutas", "omslutes", "omsluts", "omställas", "omstöpas", "omstöps", "omstöpts", "omstrukturerades", "omstruktureras", "omstrukturerats", "omsusas", "omsvärmades", "omsvärmas", "omtalades", "omtalas", "omtalats", "omtöcknas", "omtolkas", "omvaldes", "omväljas", "omväljs", "omvalts", "omvändas", "omvändes", "omvandlades", "omvandlas", "omvandlats", "omvänds", "omvänts", "omvärderades", "omvärderas", "omvärderats", "omvittnades", "omvittnas", "omvittnats", "omyndigförklaras", "omyndigförklarats", "onderwijs", "onödiggöras", "önskades", "önskas", "operades", "opererades", "opereras", "opererats", "öppnades", "öppnas", "öppnats", "optimeras", "ordas", "ordats", "ordinerades", "ordineras", "ordinerats", "ordnades", "ordnas", "ordnats", "oreras", "orerats", "organiserades", "organiseras", "organiserats", "orienteras", "orienterats", "oroades", "oroas", "oroats", "öronklippas", "öronmärkas", "öronmärks", "öronmärktes", "öronmärkts", "örontisslas", "orsakades", "orsakas", "orsakats", "orsaksförklaras", "ortelgas", "ös", "osäkras", "ösas", "oscarnominerades", "oskadliggjordes", "oskadliggöras", "oskadliggörs", "oskarsnominerats", "östbergas", "östes", "ostgratinerats", "östrogenbehandlas", "östs", "osynliggjorts", "osynliggöras", "osynliggörs", "övades", "övas", "övats", "öveföres", "överanvänds", "överarbetas", "överås", "överbefolkas", "överbejakas", "överbelastades", "överbelastas", "överbeskattas", "överbetonades", "överbetonats", "överbevisades", "överbevisas", "överbevisats", "överblickas", "överbryggas", "överdäckas", "överdebiterats", "överdimensionerats", "överdoseras", "överdramatiseras", "överdrevs", "överdrivas", "överdrivits", "överdrivs", "överdrogs", "överenskommits", "överenskoms", "överexponeras", "överexponerats", "överfallas", "överfallits", "överfalls", "överflödades", "överflyglades", "överflyglas", "överflyttades", "överflyttas", "överfölls", "överföras", "överfördes", "överförs", "överförts", "överfyllas", "övergavs", "överges", "övergetts", "övergivas", "övergivits", "överglänses", "överglänstes", "övergöts", "överhettades", "överhettas", "överinskrivas", "överklagades", "överklagas", "överklagats", "överklistras", "överkompenseras", "överlagras", "överlämnades", "överlämnas", "överlämnats", "överlappas", "överlåtas", "överlåtits", "överlåts", "överläts", "överlevas", "överlistas", "övermannades", "övermannas", "övermannats", "övermättas", "överordnas", "överös", "överösas", "överöses", "överöstes", "överösts", "överprocuderas", "överprövas", "överprövats", "överpudras", "överräcks", "överräcktes", "överraskades", "överraskas", "överraskats", "överröstades", "överröstas", "överrumplades", "överrumplas", "överrumplats", "översändas", "översändes", "översänts", "översättas", "översattes", "översatts", "översätts", "överskattades", "överskattas", "överskattats", "översköljas", "översköljs", "översköljts", "överskreds", "överskridas", "överskridits", "överskrids", "överskuggades", "överskuggas", "överskuggats", "överspolas", "överstigas", "överstigs", "överstimuleras", "översvämmades", "översvämmas", "översvämmats", "övertäckas", "övertäcks", "övertäcktes", "övertages", "övertagits", "övertalades", "övertalas", "övertalats", "övertas", "övertecknades", "övertecknas", "övertecknats", "övertogs", "övertolkas", "övertolkats", "överträdas", "överträdes", "överträffades", "överträffas", "överträffats", "övertrasserades", "övertrasseras", "övertrumfas", "övertygades", "övertygas", "övertygats", "överutnyttjades", "överutnyttjas", "övervägas", "övervägdes", "övervägs", "övervägts", "övervakades", "övervakas", "övervakats", "överväldigades", "överväldigas", "överväldigats", "övervältras", "övervämmas", "övervärderas", "övervärderats", "övervinnas", "övervinns", "övervintras", "övervunnits", "oxideras", "påannonserades", "påannonseras", "påbjöds", "påbjudes", "påbjudits", "påbjuds", "påbörjades", "påbörjas", "påbörjats", "pacificeras", "packades", "packas", "packats", "pådyvlades", "pådyvlas", "påfodras", "påföras", "påförs", "påförts", "påfrestas", "påhejas", "påkallas", "påkallats", "paketeras", "paketerats", "påkördes", "påläggas", "påläggs", "pålagts", "pålas", "pålats", "pallas", "pallats", "palmas", "påmindes", "påminnas", "påminns", "påmints", "paneras", "pangas", "pantas", "pantsattes", "pånyttfödas", "påområdes", "påpekades", "påpekas", "påpekats", "påprackas", "parades", "paraferades", "påräknas", "parallellkopplades", "parallellkopplas", "paralyseras", "paralyserats", "paras", "parats", "pareras", "parkerades", "parkeras", "parkerats", "parodieras", "parras", "parsas", "påskrivs", "påskyndades", "påskyndas", "påskyndats", "passades", "passas", "passats", "passerades", "passeras", "passerats", "passglas", "passiviseras", "påstås", "påståtts", "pasteuriserades", "pastischeras", "påstods", "pastöriseras", "pastöriserats", "påtalades", "påtalas", "påtalats", "patentbeläggs", "patenteras", "patenterats", "påträffades", "påträffas", "påträffats", "patrokles", "patrullerades", "patrulleras", "patrullerats", "pats", "påtvingades", "påtvingas", "påtvingats", "påverkades", "påverkanmotarbetades", "påverkas", "påverkats", "påvisades", "påvisas", "påvisats", "payrolls", "pejlas", "pekades", "pekas", "pekats", "pelleas", "pendlades", "penetrerades", "penetreras", "penetrerats", "pensionerades", "pensioneras", "pensionerats", "penslas", "peppades", "peppas", "peppras", "peps", "perforerades", "perforeras", "permanentades", "permanentas", "permanentats", "permitteras", "permitterats", "perriéres", "persenteras", "personalförsörjs", "personifierades", "personifieras", "personkontrolleras", "personröstas", "perverteras", "pessoas", "pestas", "pestsmittades", "petades", "petas", "petats", "pharmacias", "philos", "piffades", "piffas", "piggats", "pihelgas", "pilats", "pillas", "pillras", "pinades", "pinas", "pinats", "pints", "pips", "piskades", "piskas", "piskats", "pizzasås", "pjoskades", "placerades", "placeras", "placerats", "pladdrats", "plågades", "plågas", "plågats", "plagieras", "plagierats", "plånades", "planas", "plånas", "planats", "plånats", "planerades", "planeras", "planerats", "plankades", "plankas", "planlades", "planläggs", "planlagts", "planterades", "planteras", "planterats", "plastades", "plastas", "plåstras", "plåstrats", "plåtas", "platsbyggdes", "plattades", "plattats", "plockades", "plockas", "plockats", "plogades", "plogas", "plogats", "plöjas", "plöjdes", "plöjs", "plöjts", "plomberades", "plomberas", "plomberats", "plottats", "plottras", "plottrats", "pluggas", "plundrades", "plundras", "plundrats", "plussades", "plussas", "plussats", "plutades", "poängbedöms", "poängsättas", "poängsattes", "poängsatts", "poängsätts", "poängterades", "poängteras", "poängterats", "poängvärderas", "pocahontas", "pocheras", "pockas", "pokuleras", "polariserades", "polariseras", "polariserats", "polerades", "poleras", "polerats", "polinas", "polisanmälas", "polisanmäldes", "polisanmäls", "polisanmälts", "politiserades", "politiseras", "politiserats", "polydamas", "polymeras", "poneras", "populariserats", "portades", "portas", "portförbjudas", "portförbjudits", "portionerades", "portioneras", "porträtteras", "porträtterats", "porträttrades", "portugaliseras", "positioneras", "postades", "postas", "postats", "posterades", "poststämplades", "postuleras", "prackats", "präglades", "präglas", "präglats", "praktiserades", "praktiseras", "praktiserats", "prånglades", "prånglats", "präntades", "präntas", "prasslas", "prästvigas", "prästvigdes", "prästvigs", "prästvigts", "pratades", "pratas", "pratats", "preciserades", "preciseras", "preciserats", "precisionsstyras", "predestineras", "predikades", "predikas", "predikats", "prefabriceras", "prejas", "premiärprövades", "premiärsändes", "premiäruppförs", "premiärutdelas", "premiärvisades", "premiärvisas", "premiärvisats", "premierades", "premieras", "premierats", "prepareras", "preparerats", "presenterades", "presenteras", "presenterats", "presenteres", "preskriberas", "preskriberats", "pressades", "pressas", "pressats", "prestenteras", "presterades", "presteras", "presterats", "prices", "prickades", "prickas", "prickats", "pricktestades", "primärnoterats", "printas", "prioriterades", "prioriteras", "prioriterats", "pripps", "prisades", "prisas", "prisats", "prisbelönades", "prisbelönas", "prisbelönats", "prissättas", "prissätts", "privatimporterades", "privatimporterats", "privatiserades", "privatiseras", "privatiserats", "problematiseras", "problematiserats", "proceedings", "processas", "processats", "prodotes", "producerades", "produceras", "producerats", "profaneras", "professionaliserades", "professionaliseras", "profeterats", "proffsförklarades", "profilerades", "profileras", "prognosticerades", "prognostiseras", "programmerades", "programmeras", "projekterades", "projekteras", "projicerades", "projiceras", "projicerats", "pröjts", "proklamerades", "proklameras", "proklamerats", "proletariseras", "prolongerades", "prolongeras", "promenerades", "promeneras", "promoverades", "promoveras", "promoverats", "propagerades", "propageras", "propangas", "proportioneras", "proppades", "proppas", "prosperas", "prostituerades", "protokollfördes", "provades", "prövades", "provas", "prövas", "provats", "prövats", "provbyggs", "provflugits", "provfotograferas", "provköras", "provkördes", "provkörs", "provmålats", "provmäts", "provocerades", "provoceras", "provocerats", "provsås", "provsittas", "provsmakades", "provsmakas", "provtagas", "prsenterats", "prutades", "prutas", "prutats", "pryddes", "pryds", "pryglas", "prytts", "pseudomonas", "publicerades", "publiceras", "publicerats", "publiserades", "pudrats", "puffas", "pulvriserades", "pulvriserats", "pumpades", "pumpas", "pumpats", "pundits", "punktades", "punkterades", "punkteras", "punkterats", "punktmarkerats", "purprades", "pussades", "pussas", "pussats", "pusslades", "pusslas", "pustas", "putsades", "putsas", "putsats", "puttades", "puttas", "puttats", "puttrades", "pyntas", "pyntats", "pysslades", "pysslas", "pytsas", "pytsats", "rabatteras", "rabblas", "räckes", "räcktes", "räckts", "radades", "radas", "rådas", "radats", "räddades", "räddas", "räddats", "råddes", "raderades", "raderas", "raderats", "rädes", "rådfrågats", "radiaksmittades", "radikaliserades", "radikaliseras", "radikaliserats", "radonsanerats", "råds", "raffineras", "raffinerats", "rafsas", "raggades", "raggats", "raggefanns", "rakades", "rakas", "rakats", "råknas", "raljerades", "raljeras", "ramades", "ramas", "ramats", "rammades", "rammas", "rånades", "rånas", "rånats", "rändes", "rangeras", "rangordnades", "rangordnas", "rankades", "rankas", "rankats", "rankingras", "rannsakades", "rannsakas", "rannsakats", "ransonerades", "ransoneras", "rapporterades", "rapporteras", "rapporterats", "rasas", "raserades", "raseras", "raserats", "rasslades", "rastas", "ratades", "rätades", "ratas", "rätas", "ratatas", "ratats", "rätats", "ratificerades", "ratificeras", "ratificerats", "ratifieras", "rationaliseras", "rationaliserats", "rattades", "rättades", "rättas", "rättats", "ravennas", "reades", "readymades", "reageras", "reaktiveras", "realiserades", "realiseras", "realiserats", "reas", "reavinstbeskattas", "rebbes", "recenserades", "recenseras", "recenserats", "reciteras", "redas", "redbergslids", "reddes", "redigerades", "redigeras", "redigerats", "redogjordes", "redogjorts", "redogörs", "redovisades", "redovisas", "redovisats", "reds", "reducerades", "reduceras", "reducerats", "refererades", "refereras", "refererats", "reflekterades", "reflekteras", "reflexräddades", "reformerades", "reformeras", "reformerats", "refuserades", "refuseras", "refuserats", "regelsattes", "regenereras", "regerades", "regeras", "regerats", "regeringsbehandlas", "regisserades", "regisseras", "regisserats", "registeras", "registerkontrolleras", "registrerades", "registreras", "registrerats", "registreringsbesiktigas", "reglats", "reglerades", "regleras", "reglerats", "regummeras", "rehabiliterades", "rehabiliteras", "rehabiliterats", "reintegreras", "reinvesteras", "rekapituleras", "rekatolicerades", "reklamas", "reklamerades", "reklameras", "reklamfinansieras", "reklamplats", "reklamspots", "rekommederas", "rekommenderades", "rekommenderas", "rekommenderats", "rekommeneras", "rekonstruerades", "rekonstrueras", "rekonstruerats", "rekontextualiseras", "rekryterades", "rekryteras", "rekryterats", "rekryteringsbas", "rekvierades", "rekvirerades", "rekvireras", "rekvirerats", "relanserades", "relaterades", "relateras", "relaterats", "relativiserades", "relativiseras", "relegerades", "relegeras", "relegerats", "remissbehandlades", "remissbehandlas", "remissbehandlats", "remitterades", "remitteras", "remitterats", "remixas", "renas", "renats", "rengjordes", "rengjorts", "rengöras", "rengörs", "rennes", "renodlades", "renodlas", "renodlats", "renoverades", "renoveras", "renoverats", "renrakats", "rensades", "rensas", "rensats", "renskrapas", "renskrivas", "rentvås", "reopererades", "reparerades", "repareras", "reparerats", "repas", "repatrierades", "repatrieras", "repats", "repererades", "repeterades", "repeteras", "repeterats", "reppas", "reprenteras", "representerades", "representeras", "representerats", "repriserades", "repriseras", "reprisvisas", "reproduceras", "reproducerats", "res", "resas", "reservades", "reserverades", "reserveras", "reserverats", "reserves", "reses", "resonerades", "resoneras", "respekterades", "respekteras", "respekterats", "restaurerades", "restaureras", "restaurerats", "restes", "rests", "resulterades", "results", "retts", "returnerades", "returneras", "returnerats", "retuscherades", "retuscheras", "retuscherats", "revalveras", "revbensopereras", "reviderades", "revideras", "reviderats", "revolutioneras", "revolutionerats", "revs", "rhodes", "rias", "ridas", "rids", "riggades", "riggas", "riksdagsbehandlas", "riktades", "riktas", "riktats", "rimmas", "ringades", "ringaktas", "ringas", "ringats", "ringbarkas", "ringdes", "ringmärks", "ringmärktes", "rings", "ringts", "risades", "risas", "risats", "riseras", "riskerades", "riskeras", "riskerats", "rispades", "rispats", "ristades", "ristas", "ristats", "ritades", "ritas", "ritats", "ritualiserades", "ritualiseras", "rivas", "rives", "rivits", "rivs", "roades", "roas", "roats", "robotbesköts", "robotiseras", "rockas", "roddes", "rohmers", "rojas", "röjas", "röjdes", "röjs", "röjts", "rökas", "rökfylldes", "roks", "röks", "rökskadas", "röktes", "rökts", "rollas", "rollbesatts", "rollerblades", "romanes", "romantiserades", "romantiseras", "rommas", "röntes", "röntgades", "röntgas", "röntgats", "rönts", "ropades", "ropas", "ropats", "röras", "rördes", "röres", "rörs", "rörts", "ros", "rös", "rosades", "rosafärgas", "rosas", "rosats", "rosenqvists", "rostades", "röstades", "rostas", "röstas", "rostats", "röstats", "rostkyddsbehandlas", "rostskyddsbehandlas", "rotades", "rotas", "rötas", "rotats", "rövades", "rövas", "rövats", "rovdjursdödas", "rubbades", "rubbas", "rubbats", "rubricerades", "rubriceras", "rubricerats", "ruckades", "ruckas", "ruckats", "rufsats", "ruggats", "ruinerades", "ruineras", "ruinerats", "rules", "rullades", "rullas", "rullats", "rumlades", "rundades", "rundas", "rundats", "rusades", "ruskades", "ruskas", "rustades", "rustas", "rustats", "ryckas", "rycks", "rycktes", "ryckts", "ryggskadas", "ryktades", "ryktas", "ryktats", "rymms", "rynkades", "rynkas", "rynkats", "sabbats", "sablades", "sablas", "sablats", "saboterades", "saboteras", "saboterats", "såddes", "sades", "saftades", "saftas", "sågades", "sågas", "sägas", "sågats", "säges", "sägs", "sagts", "säjs", "sakades", "sakas", "sakbehandlas", "säkerhetsklassas", "säkerhetsklassats", "säkerhetskontrollerats", "säkerhetslås", "säkerhetsprövas", "säkerställas", "säkerställs", "säkerställts", "saknades", "saknas", "saknats", "säkrades", "säkras", "säkrats", "saktades", "saktas", "såldes", "salinas", "säljas", "säljes", "säljs", "sållades", "sållas", "sållats", "saltades", "saltas", "saltats", "sålts", "saluföras", "salufördes", "saluförs", "samägas", "samägs", "sambos", "samhälls", "samköras", "samlades", "samlas", "samlats", "samlokaliserats", "sammanbindas", "sammanblandas", "sammanblandats", "sammanbringats", "sammanbyggts", "sammandragits", "sammandrogs", "sammanfattades", "sammanfattas", "sammanfattats", "sammanflätades", "sammanflätas", "sammanfogades", "sammanfogas", "sammanfogats", "sammanföras", "sammanfördes", "sammanförs", "sammanförts", "sammanhålles", "sammanhålls", "sammanjämkas", "sammankallades", "sammankallas", "sammankallats", "sammanknippades", "sammanknippas", "sammankopplas", "sammanlänkas", "sammanlyses", "sammansatts", "sammanslås", "sammansmälts", "sammanställas", "sammanställdes", "sammanställs", "sammanställts", "sammansvetsas", "sammanvägas", "sammanvägs", "sammanvävas", "sammanvigs", "samordnades", "samordnas", "samordnats", "samövas", "sampas", "samplades", "sams", "samtalas", "samverkas", "sandas", "sändas", "sandblästrats", "sändes", "sänds", "sanerades", "saneras", "sanerats", "sängplats", "sänkas", "sänkes", "sänks", "sänktes", "sanktioneras", "sanktionerats", "sänkts", "sänts", "saperas", "sårades", "såras", "säras", "sårats", "särbehandlades", "särbehandlas", "särbehandlats", "särbeskattas", "sargades", "sargas", "sargats", "särmärkas", "särnoteras", "sarrautes", "särredovisas", "särskildes", "särskiljas", "sas", "sås", "satanas", "satsades", "satsas", "satsats", "sättas", "sattes", "sättes", "satts", "såtts", "sätts", "scarletts", "schabblas", "schablonberäknas", "schabloniserats", "schackras", "schackrats", "schaktades", "schaktas", "schasas", "schemalades", "schemaläggas", "schemaläggs", "schnapps", "schweppes", "scorseses", "scoutades", "scoutats", "seedades", "seedas", "seglades", "seglarskolas", "seglas", "seglats", "segregerats", "sehlstedts", "sehnsuchts", "sekretessbeläggs", "sekretessbelagts", "sekretessläggs", "sekretesstämplas", "sekulariserades", "sekulariseras", "sekunderades", "sekunderas", "sekvenseras", "selekteras", "senarelades", "senareläggas", "senareläggs", "senarelagts", "sentimentaliserades", "separerades", "separeras", "separerats", "seriekopplas", "serieproducerades", "serietillverkas", "serietillverkats", "servas", "serverades", "serveras", "serverats", "setts", "severas", "sexdubblades", "sexfaldigats", "sextrakasseras", "sfinnas", "shardiks", "shinglas", "shonas", "sias", "sicas", "sidenförsätts", "sidoackrediteras", "sidoordnas", "sidsteppades", "sifferbestämmas", "signalerades", "signaleras", "signaliserades", "signerades", "signeras", "signerats", "siktades", "siktas", "siktats", "silades", "silas", "simmas", "simuleras", "simulerats", "sindings", "sinkades", "sinkas", "sinkats", "sintras", "sirpas", "sittas", "sivas", "sjabblades", "sjabblas", "självfinansieras", "självregleras", "sjanghajas", "sjasas", "sjöds", "sjöngs", "sjösättas", "sjösattes", "sjösatts", "sjösätts", "sjufaldigats", "sjukdomsförklarats", "sjukskrivas", "sjukskrivits", "sjukskrivs", "sjungas", "sjunges", "sjungits", "sjungs", "skadades", "skadas", "skådas", "skadats", "skådats", "skades", "skaffades", "skaffas", "skaffats", "skakades", "skakas", "skakats", "skäktas", "skalades", "skålades", "skalas", "skålas", "skalats", "skalkeas", "skallades", "skållas", "skällas", "skälldes", "skälls", "skålslipas", "skambeläggs", "skämdes", "skamfilats", "skämmas", "skäms", "skämtades", "skämtas", "skämts", "skändades", "skandaliserades", "skändas", "skändats", "skanderades", "skanderas", "skänkas", "skänkes", "skänks", "skänktes", "skänkts", "skapades", "skåpades", "skapas", "skåpas", "skapats", "skåras", "skäras", "skäres", "skärhöras", "skärmades", "skärmas", "skärpas", "skarpnäcks", "skärps", "skärptes", "skärpts", "skars", "skärs", "skärscannrats", "skärskådades", "skärskådas", "skarvades", "skarvas", "skattades", "skattas", "skattebefrias", "skattefinansieras", "skatteprivilegieras", "skattesubventineras", "skattesubventioneras", "skattlades", "skavas", "skavdes", "skavts", "skenbeskattas", "skeppades", "skeppas", "skeppats", "skickades", "skickas", "skickats", "skickliggjordes", "skiftades", "skiftas", "skiftats", "skiktas", "skildes", "skildrades", "skildras", "skildrats", "skiljas", "skiljdes", "skiljs", "skiljts", "skilldes", "skils", "skilts", "skingrades", "skingras", "skingrats", "skinnades", "skinnas", "skinnheads", "skins", "skipades", "skipas", "skipats", "skippades", "skissades", "skissas", "skissats", "skisserades", "skisseras", "skisserats", "skivas", "skivats", "skivinspelas", "skjöts", "skjutas", "skjutits", "skjuts", "skjutsades", "skjutsas", "skockades", "skockas", "skockats", "skogas", "skogås", "skojades", "skojas", "skojats", "skolades", "skolas", "skolats", "sköljas", "sköljdes", "sköljs", "sköljts", "skolmognadstestas", "skonades", "skonas", "skonats", "skönjas", "skönjdes", "skönjes", "skönjs", "sköntaxeras", "sköras", "skördades", "skördas", "skördats", "skörtats", "skotas", "skötas", "sköts", "skottas", "skottats", "sköttes", "skötts", "skottskadades", "skottskadas", "skottskadats", "skovlades", "skövlades", "skovlas", "skövlas", "skövlats", "skräddarsyddes", "skräddarsys", "skräddarsytts", "skräddas", "skrålades", "skrålas", "skrämdes", "skrämmas", "skräms", "skränas", "skrapades", "skrapas", "skrapats", "skrattades", "skrattas", "skrattats", "skrävlas", "skreds", "skreks", "skrevs", "skrikas", "skriks", "skringrats", "skrinlades", "skrinläggas", "skrinläggs", "skrinlagts", "skrivas", "skrives", "skrivits", "skrivs", "skrotades", "skrotas", "skrotats", "skröts", "skrubbades", "skrubbas", "skrubbats", "skrudas", "skruvades", "skruvas", "skruvats", "skrynklades", "skuffades", "skuffas", "skuffats", "skuggades", "skuggas", "skuggats", "skuggboxades", "skuggboxas", "skuldbeläggs", "skulpterades", "skulpteras", "skulpterats", "skummas", "skummats", "skurades", "skuras", "skurats", "skurits", "skvallrades", "skvallras", "skvalpas", "skvätts", "skyddades", "skyddas", "skyddats", "skyddes", "skyfflades", "skyfflas", "skyfflats", "skylas", "skyles", "skyllas", "skylldes", "skylls", "skyllts", "skyls", "skyltades", "skyltas", "skyltats", "skymdes", "skymfas", "skymfats", "skymmas", "skyms", "skymtades", "skymtas", "skymts", "skyndas", "skyttegilles", "släckas", "släcks", "släcktes", "släckts", "slaktades", "slaktas", "slaktats", "slammades", "slammas", "slamras", "slamsas", "slängas", "slängdes", "slänges", "slängs", "slängts", "släpades", "släpas", "släpats", "slappades", "släppas", "släppptes", "släpps", "släpptes", "släppts", "slarvades", "slarvas", "slarvats", "slås", "slätades", "slätas", "slätats", "slåttrades", "slåttras", "slavas", "slets", "slickades", "slickas", "slickats", "slipades", "slipas", "slipats", "slitas", "slites", "slitits", "slits", "slopades", "slopas", "slopats", "slösas", "slösats", "slöts", "slukades", "slukas", "slukats", "slumpades", "slumpas", "slumsaneras", "slungades", "slungas", "slungats", "slussades", "slussas", "slussats", "slutades", "slutas", "slutavverkades", "slutbearbetas", "slutbehandlas", "slutbetalades", "slutbetalas", "slutes", "slutföras", "slutfördes", "slutförhandlades", "slutförhandlas", "slutförhandlats", "slutförs", "slutförts", "slutförvaras", "slutits", "slutlevereras", "slutmonteras", "slutnoterades", "slutrepeteras", "sluts", "slutspelas", "sluttestas", "småbråkas", "smädas", "småfräs", "småfrös", "småjävlas", "smakas", "smaksättas", "smaksättes", "smaksatts", "smaksätts", "smakvarieras", "smälldes", "smalls", "smälls", "smällts", "smalnas", "smältas", "smältes", "smälts", "småretades", "smekas", "smeks", "smektes", "smetades", "smetas", "smetats", "smets", "smidas", "smiddes", "smides", "smidits", "smids", "sminkades", "sminkas", "smiskas", "smittades", "smittas", "smittats", "smitts", "smögs", "smordes", "smörjas", "smörjs", "smorts", "smugglades", "smugglas", "smugglats", "smugits", "smulades", "smulas", "smulats", "smusslades", "smusslas", "smusslats", "smutsades", "smutsas", "smutsats", "smutskastas", "smuttas", "smyckades", "smyckas", "smyckats", "smygas", "smygavlyssnades", "smygfilmades", "smygits", "smygs", "snabbbehandlas", "snabbehandlas", "snabbfrysas", "snabbinkallades", "snabbinkallas", "snabbkäftades", "snabbkopieras", "snabbladdas", "snabbredigeras", "snabbreparerats", "snabbstoppades", "snabbstoppas", "snabbtolkas", "snabbutbildas", "snabbutredas", "snabbutreds", "snackades", "snackas", "snackats", "snålas", "snålkodas", "snappades", "snappas", "snarats", "snärjas", "snärjdes", "snärjs", "snärjts", "snattas", "snävas", "snävats", "snedgås", "snedvridas", "snedvridits", "snedvrids", "sneglas", "snickrades", "snickrats", "sniffas", "snittas", "snöpas", "snördes", "snörptes", "snörs", "snörts", "snörvlades", "snos", "snotts", "snubblas", "snuddades", "snurrades", "snurras", "snuttas", "snuvades", "snuvas", "snuvats", "snyftades", "snyggas", "snyggats", "snyltas", "soares", "socialdelegerades", "socialiseras", "socialiserats", "socialistes", "sockras", "sockrats", "södras", "sögs", "sökas", "sökes", "söks", "söktes", "sökts", "sölades", "solas", "solkas", "solkats", "solochvåras", "sonas", "soncks", "sönderdelas", "sönderskakas", "sönderslets", "sönderslitas", "sönderstyckades", "sondmatades", "söndras", "songs", "sopades", "sopas", "sopats", "söps", "sörjdes", "sörjes", "sörjs", "sorlades", "sorlas", "sörplas", "sorterades", "sorteras", "sorterats", "sotades", "sötades", "sotas", "sötas", "sötats", "sovas", "sövas", "sövdes", "sovelbitarnas", "sovras", "sovs", "sövs", "sövts", "späckas", "spacklas", "spädas", "spåddes", "späddes", "späds", "spaghettisås", "spaltades", "spaltas", "spanas", "spändes", "spångas", "spännas", "spanns", "spänns", "spänts", "sparades", "spårades", "sparas", "spåras", "sparats", "spårats", "sparkades", "sparkas", "sparkats", "spärrades", "spärras", "spärrats", "spärrförklarats", "spås", "späs", "spåtts", "spätts", "specialbeställas", "specialbeställdes", "specialbeställts", "specialbevakas", "specialbyggdes", "specialbyggts", "specialdesignats", "specialdestineras", "specialdrillas", "specialgranskades", "specialgranskats", "specialinretts", "specialiseras", "specialistutbildades", "specialkonstruerades", "speciallottats", "specialpreparerats", "specialrekryterats", "specialriktats", "specialskrevs", "specialskrivs", "specialstuderades", "specialtillverkas", "specialutbildas", "specialutbildats", "specificerades", "specificeras", "specificerats", "speedas", "speglades", "speglas", "speglats", "spejas", "spekulerades", "spekuleras", "spekulerats", "spelades", "spelas", "spelats", "spenderades", "spenderas", "spenderats", "spetsades", "spetsas", "spetsats", "spikades", "spikas", "spikats", "spillas", "spilldes", "spills", "spillts", "spinnas", "spinns", "spioneras", "spionmisstänktes", "spiras", "spisas", "spjälkades", "spjälkas", "splitsas", "splitterskadades", "splittrades", "splittras", "splittrats", "spolades", "spolas", "spolats", "spolierades", "spolieras", "spolierats", "sponsrades", "sponsras", "sponsrats", "spörjs", "sporrades", "sporras", "spörs", "sports", "spottades", "spottas", "spräckas", "spräcks", "spräcktes", "spräckts", "språktestas", "sprängas", "sprangs", "sprängs", "sprängts", "sprättades", "sprättas", "sprätts", "sprayas", "sprayats", "spreds", "sprejas", "sprejats", "spridas", "spriddes", "sprides", "spridits", "sprids", "springas", "springs", "spritas", "spritsas", "spritsats", "spritts", "sprödvärmts", "sprungits", "sprutades", "sprutas", "spunnits", "spurtades", "stabiliserades", "stabiliseras", "stabiliserats", "stäckas", "stacks", "stäcktes", "städades", "städas", "städats", "städes", "stadfästas", "stadfästes", "stadfästs", "stadgas", "stadgats", "städslades", "städslas", "städslats", "stagades", "stagas", "stajlas", "stakades", "stakas", "stakats", "stålas", "stallas", "ställas", "ställdes", "ställes", "ställs", "ställts", "stals", "stämdes", "stammas", "stämmas", "stampades", "stampas", "stämplades", "stämplas", "stämplats", "stäms", "stämts", "ständigtmåstegöras", "stångades", "stångas", "stängas", "stångats", "stängdes", "stängs", "stängts", "stånkas", "stänkas", "stänkts", "stannades", "stansas", "stansats", "staplades", "staplas", "staplats", "starkars", "stärkas", "stärks", "stärktes", "stärkts", "startades", "startas", "startats", "startgas", "stås", "stationerades", "stationeras", "stationerats", "statuerades", "statueras", "stavades", "stavas", "stavats", "stävjas", "stegas", "steglas", "stegrades", "stegras", "stegrats", "stekas", "steks", "stektes", "stekts", "stenades", "stenas", "stencilerats", "stenungsundshems", "steriliseras", "stickas", "stickats", "sticks", "stiftades", "stiftas", "stiftats", "stigmatiserades", "stigmatiseras", "stiliserats", "stillas", "stillats", "stills", "stimmades", "stimulerades", "stimuleras", "stimulerats", "stipendierats", "stipulerades", "stipuleras", "stjälas", "stjälpas", "stjälps", "stjälptes", "stjäls", "stockas", "stockholmsanpassats", "stockholmutsätts", "stöddes", "stödjas", "stöds", "stöldanmäldes", "stöldanmälts", "stöldresas", "stomiopererades", "stomiopereras", "stöpas", "stoppades", "stoppas", "stoppats", "stopppades", "stöps", "stöptes", "stöpts", "störas", "stördes", "storklas", "stormades", "stormas", "stormats", "stormfälldes", "stormtrivas", "stormtrivs", "störs", "storstädas", "storstädats", "störtades", "störtas", "störtats", "stortrivas", "stortrivdes", "stortrivs", "stortrutades", "störts", "stötas", "stötes", "stöts", "stöttades", "stöttas", "stöttats", "stöttes", "stötts", "sträckas", "sträcks", "sträcktes", "sträckts", "straffades", "straffas", "straffats", "straffbeläggas", "straffbeskattas", "straffsanktioneras", "strålas", "strålbehandlas", "strålbehandlats", "strålningstestas", "strålskadades", "stramades", "stramas", "stramats", "strandades", "strandats", "strandsattes", "strävas", "streckas", "strejkas", "strejkats", "stressades", "stressas", "stretchats", "strids", "strilas", "strimlas", "strimlats", "strimmades", "ströddes", "ströks", "strömlinjeformas", "ströps", "strös", "strötts", "strukits", "strukturerades", "struktureras", "strukturerats", "strukturrationaliserades", "strykas", "strykes", "stryks", "strypas", "strypes", "stryps", "stryptes", "strypts", "stuckits", "studerades", "studeras", "studerats", "stuffas", "stukades", "stukas", "stukats", "stulits", "stunts", "stuvades", "stuvas", "stuvats", "styckades", "styckas", "styckats", "stylades", "stylas", "stylats", "stympades", "stympas", "stympats", "styras", "styrdes", "styrkas", "styrks", "styrktes", "styrkts", "styrs", "styrts", "sublimeras", "subtraheras", "subventionerades", "subventioneras", "subventionerats", "suckas", "suddades", "suddas", "suddats", "sufflerats", "sugas", "suges", "sugits", "sugs", "summerades", "summeras", "summerats", "supes", "supits", "sups", "surkörs", "surrades", "surras", "susades", "suspenderades", "suspenderas", "suspenderats", "svagbegåvades", "svaldes", "sväljas", "sväljs", "svalkas", "svälldes", "svältas", "svälts", "svämmas", "svämmats", "svängdes", "svängs", "svängts", "svanskuperas", "svarades", "svaras", "sväras", "svärs", "svärtades", "svärtas", "svärtats", "svartlistades", "svartlistas", "svartlistats", "svartmålades", "svartmålas", "svartmålats", "svedas", "svekivs", "sveks", "svennevads", "svepas", "svepes", "sveps", "sveptes", "svepts", "svetlas", "svetsades", "svetsas", "svikas", "svikits", "sviks", "svinas", "svingades", "svingas", "svors", "svurits", "swandes", "syddes", "sydgas", "syds", "syftas", "sykes", "syltades", "syltas", "symboliserades", "symboliseras", "sympatilockoutas", "sympatiseras", "synades", "synats", "syndats", "synkroniseras", "synliggjordes", "synliggjorts", "synliggöras", "synliggörs", "syntetiserats", "syresättas", "syresätts", "syrsätts", "sys", "sysselsättas", "sysselsattes", "sysselsätts", "sytts", "tackades", "tackas", "täckas", "tacklades", "tacklas", "täcks", "täcktes", "täckts", "tagas", "tages", "tagits", "tags", "talades", "talas", "tålas", "talats", "tåldes", "tallas", "tallriksserveras", "tåls", "talts", "tämjas", "tämjs", "tämjts", "tändas", "tändes", "tänds", "tångas", "tangerades", "tangeras", "tangerats", "tangiers", "tångonduleras", "tänjas", "tänjdes", "tänjes", "tänjs", "tänjts", "tankas", "tänkas", "tänkes", "tänks", "tänkts", "tänts", "tapetserades", "tapetserats", "tappades", "tappas", "tappats", "täpps", "tårades", "tareras", "tärnas", "tärts", "tarvas", "tas", "tasslades", "tasslas", "tätades", "tätas", "tävlades", "tävlas", "tävlats", "taxeras", "taxerats", "technologies", "tecknades", "tecknas", "tecknats", "tegs", "teiresias", "tejakulas", "tejpades", "tejpas", "tejpats", "teknologiseras", "telefaxbekräftas", "telefonavlyssnas", "telefonerades", "telefonintervjuades", "telefonterroriseras", "telegraferats", "televiserades", "televiseras", "telias", "telomeras", "tematiserades", "tematiseras", "tempereras", "terminerats", "terminssäkras", "terroriserades", "terroriseras", "terroriserats", "terroriststämplas", "terroriststämplats", "testades", "testamenterats", "testas", "testats", "testkörs", "textas", "thorgils", "tidigarelades", "tidigareläggas", "tidigareläggs", "tidigarelagts", "tidsbegränsas", "tidsbegränsats", "tidsbestämdes", "tidsbestämmas", "tidsbestäms", "tidsbestämts", "tidsflödes", "tidsordnats", "tietotehdas", "tigits", "tigs", "tillades", "tillagas", "tillägas", "tilläggas", "tilläggs", "tilläggsdebiteras", "tillägnades", "tillägnas", "tillägnats", "tillämmpas", "tillämpades", "tillämpas", "tillämpats", "tillåtas", "tillåtes", "tillåtits", "tillåts", "tilläts", "tillbads", "tillbakabildas", "tillbakabildats", "tillbakavisades", "tillbakavisas", "tillbakavisats", "tillbakes", "tillbes", "tillbetts", "tillbringades", "tillbringas", "tillbyggts", "tillbytas", "tilldelades", "tilldelas", "tilldelats", "tilldömas", "tilldömdes", "tilldöms", "tilldömts", "tillerkändes", "tillerkännas", "tillerkänns", "tillerkänts", "tillfångatagits", "tillfångatas", "tillfångatogs", "tillfogades", "tillfogas", "tillfogats", "tillföras", "tillfördes", "tillförs", "tillförsäkras", "tillförsäkrats", "tillförts", "tillfrågades", "tillfrågas", "tillfrågats", "tillfredsställas", "tillfredsställdes", "tillfredsställs", "tillgivits", "tillgodoräknas", "tillgodosågs", "tillgodoses", "tillgodosetts", "tillgreps", "tillgripas", "tillgripes", "tillgripits", "tillgrips", "tillhållas", "tillhålls", "tillhandahållas", "tillhandahålles", "tillhandahålls", "tillhandahölls", "tillhandhölls", "tillhölls", "tillintetgjorts", "tillintetgörs", "tillkallades", "tillkallas", "tillkallats", "tillkännagavs", "tillkännages", "tillkännagetts", "tillkännagivits", "tillläggas", "tilllämpas", "tilllämpats", "tilllåtas", "tilllåtits", "tilllåts", "tillläts", "tillmätas", "tillmätits", "tillmäts", "tillmättes", "tillmätts", "tillmötesgås", "tillönskas", "tillordnas", "tillråddes", "tillrådes", "tillråds", "tillrättaläggs", "tillrättavisas", "tillredas", "tillreds", "tillretts", "tillryggalades", "tillsägs", "tillsagts", "tillsamamns", "tillsammamns", "tillsammas", "tillsammns", "tillsändas", "tillsas", "tillsättas", "tillsattes", "tillsatts", "tillsätts", "tillses", "tillskapas", "tillskapats", "tillskjuts", "tillskrevs", "tillskrivas", "tillskrives", "tillskrivits", "tillskrivs", "tillspetsades", "tillspetsas", "tillspetsats", "tillställas", "tillställdes", "tillställs", "tillställts", "tillstås", "tillstyrks", "tillstyrktes", "tillstyrkts", "tilltalades", "tilltalas", "tilltalats", "tillträdas", "tilltros", "tillvaratagas", "tillvaratagits", "tillvaratas", "tillvaratogs", "tillverkades", "tillverkas", "tillverkats", "tillvitades", "tillvitas", "tillvitats", "tillyxas", "tinas", "tinats", "tingades", "tingas", "tingats", "tiodubblades", "tiodubblas", "tiodubblats", "tiofaldigades", "tiofaldigas", "tiofaldigats", "tippades", "tippas", "tippats", "tipsades", "tipsas", "tipsats", "tisslades", "tisslas", "tittas", "titulerades", "tituleras", "tivs", "tjafsas", "tjågas", "tjänades", "tjänas", "tjänats", "tjatades", "tjatas", "tjatats", "tjoas", "tjubajs", "tjudras", "tjusades", "tjusas", "tjusats", "tjuvkopplas", "tjuvlästes", "tjyvröktes", "togs", "töjdes", "töjs", "tolererades", "tolereras", "tolererats", "tolkades", "tolkas", "tolkats", "tolvdubblats", "tolvfaldigats", "tömdes", "tömmas", "tommingas", "töms", "tömts", "tonades", "tonas", "tonats", "toppades", "toppas", "toppats", "topplaceras", "topprenoverats", "toppseedats", "toppstyras", "tordas", "torgföras", "torgfördes", "torgförs", "torkades", "torkas", "torkats", "tornbas", "torpederades", "torpederas", "torpederats", "torrkokas", "torrlades", "torrläggas", "torrläggs", "torrlagts", "torrmarineras", "torrsättas", "torrsätts", "torterades", "torteras", "torterats", "torts", "totalassimilerats", "totalavvekas", "totalbojkottats", "totaldemolerats", "totalfinansieras", "totalförbjöds", "totalförbjudas", "totalförbjudits", "totalförbjuds", "totalförlamades", "totalförlamas", "totalförstöras", "totalförstördes", "totalförstörs", "totalförstörts", "totalförsvarspliktigas", "totalfredades", "totalintegrerats", "totalredovisas", "totalrenoverades", "totalrenoveras", "totalsaneras", "totalstoppas", "tråcklas", "tradades", "tråddes", "träddes", "traderas", "traderats", "trades", "trådhäftades", "trådhäftas", "träds", "träffades", "träffats", "trafikerades", "trafikeras", "trafikerats", "tragglas", "trakasserades", "trakasseras", "trakasserats", "trakterades", "trakteras", "trakterats", "trampades", "trampats", "tramsas", "tränades", "tränas", "tränats", "trängas", "trängdes", "trängs", "trängts", "transformerades", "transformeras", "transformerats", "transkriberas", "transplanterades", "transplanteras", "transplanterats", "transponeras", "transporterades", "transporteras", "transporterats", "transportvigas", "trappades", "trappas", "trappats", "träs", "trasades", "trasas", "trasats", "trasslas", "trätas", "trätts", "traumatiserats", "travades", "travas", "travats", "travintresserades", "tredskades", "tredskas", "tredubblades", "tredubblas", "tredubblats", "trefaldigades", "trefaldigas", "trefaldigats", "triffids", "trimmades", "trimmas", "trimmats", "trissades", "trissats", "trivialiserats", "trixas", "troddes", "trollades", "trollas", "trollats", "trollbands", "trollbindas", "trollbinds", "trollbundits", "tros", "tröskas", "tröskats", "tröstades", "tröstas", "tröstats", "tröttas", "trotts", "trotzigs", "trubbades", "trubbas", "trubbats", "trumfades", "trumfas", "trummas", "trummats", "trumpetades", "tryckas", "tryckes", "trycks", "trycktes", "tryckts", "tryfferades", "tryfferas", "tryfferats", "tryggas", "trygghetsavtalets", "tryzas", "tsokas", "tsvetajevas", "tubbades", "tubbas", "tudelades", "tudelas", "tuggades", "tuggas", "tuggats", "tugindas", "tuktades", "tuktas", "tuktats", "tullas", "tullbehandlas", "tullinges", "tullvisiteras", "tummas", "tunnades", "tunnas", "tunnats", "turades", "turas", "turats", "turistifierats", "turneras", "tusendubblats", "tussas", "tutades", "tutas", "tvåddes", "tvålades", "tvangs", "tvångsanslutas", "tvångsavverkades", "tvångsevakuerats", "tvångsförflyttades", "tvångsförflyttas", "tvångsförflyttats", "tvångsförvaltas", "tvångsinlösas", "tvångsintagits", "tvångskommenderades", "tvångskommenderas", "tvångsmatades", "tvångsmatas", "tvångsmatats", "tvångsnedflyttades", "tvångsomhändertagits", "tvångsomhändertas", "tvångsomhändertogs", "tvångspensionerats", "tvångsplaceras", "tvångsrekryterades", "tvångsrekryteras", "tvångstömdes", "tvångsvårdas", "tvångsvårdats", "tvångsvärvas", "tvås", "tvättades", "tvättas", "tvättats", "tvingades", "tvingas", "tvingats", "tvinnades", "tvinnas", "tvistades", "tvistas", "tvistats", "tyas", "tydas", "tyddes", "tydliggjordes", "tydliggjorts", "tydliggöras", "tydliggörs", "tyds", "tyglades", "tyglas", "tyngas", "tyngdes", "tyngs", "tyngts", "typiseras", "tyranniserats", "tyrolersås", "tystades", "tystas", "tystats", "uefas", "ugnsbakas", "undandras", "undanhållas", "undanhållits", "undanhålls", "undanhölls", "undanröjas", "undanröjdes", "undanröjs", "undanröjts", "undantagits", "undantas", "undantogs", "undanträngas", "undanträngs", "underbalanseras", "underblåses", "underblåstes", "underbyggs", "underdånas", "underförstås", "undergrävas", "undergrävdes", "undergrävs", "undergrävts", "underhållas", "underhållits", "underhålls", "underhölls", "underkändes", "underkännas", "underkänns", "underkänts", "underkastades", "underkastas", "underkastats", "underkuvas", "underkuvats", "underlåtas", "underlättades", "underlättas", "underlättats", "underminerades", "undermineras", "underminerats", "underordnades", "underordnas", "underordnats", "underrättades", "underrättas", "underrättats", "underskattades", "underskattas", "underskattats", "underskreds", "underskridas", "underskridits", "underskrids", "undersökas", "undersöks", "undersöktes", "undersökts", "underställas", "underställs", "understöddes", "understödjas", "understöds", "understötts", "underströks", "understrukits", "understrykas", "understryks", "undertecknades", "undertecknas", "undertecknats", "underträffades", "undertryckas", "undertrycks", "undertryckts", "undervärderas", "undervärderats", "undervisades", "undervisas", "undervisats", "undfägnades", "undfägnas", "undfägnats", "undrades", "undras", "undrats", "undsättas", "undsattes", "undvaras", "undveks", "undvikas", "undvikes", "undvikits", "undviks", "unitas", "unlimiteds", "unnades", "unnas", "unnras", "uoppskattas", "upgavs", "upmanades", "uppammas", "uppammats", "upparbetas", "upparbetats", "uppättades", "uppbådades", "uppbådas", "uppbäras", "uppbars", "uppblandas", "uppbrännas", "uppbringades", "uppbringas", "uppbringats", "uppbyggas", "uppbyggnadsfas", "uppdagades", "uppdagas", "uppdagats", "uppdateras", "uppdaterats", "uppdelades", "uppdelas", "uppdragits", "uppdras", "uppdrogs", "uppehållas", "uppehölls", "uppenbarades", "uppenbaras", "uppenbarats", "uppfångades", "uppfångas", "uppfångats", "uppfanns", "uppfattades", "uppfattas", "uppfattats", "uppfinnas", "uppfinns", "uppfödas", "uppföddes", "uppföds", "uppföras", "uppfördes", "uppförs", "uppförstorades", "uppförstoras", "uppförts", "uppfostrades", "uppfostras", "uppfostrats", "uppfunnits", "uppfyllas", "uppfylles", "uppfylls", "uppgavs", "uppges", "uppgetts", "uppgives", "uppgivits", "uppgraderades", "uppgraderas", "uppgraderats", "upphandlades", "upphandlas", "upphandlats", "upphävas", "upphävdes", "upphävs", "upphävts", "upphettades", "upphettas", "upphöjas", "upphöjdes", "upphöjs", "upphöjts", "uppjusteras", "uppjusterats", "uppkallades", "uppkallas", "uppkallats", "upplageras", "uppläsas", "uppläses", "upplästes", "upplästs", "upplåtas", "upplåtes", "upplåtits", "upplåts", "uppläts", "uppletas", "upplevas", "upplevdes", "upplevs", "upplevts", "upplivades", "upplös", "upplösas", "upplöses", "upplöstes", "upplösts", "upplysas", "upplyses", "upplystes", "upplysts", "uppmäksammats", "uppmålas", "uppmanades", "uppmanas", "uppmanats", "uppmandes", "uppmärksammades", "uppmärksammas", "uppmärksammats", "uppmätas", "uppmäts", "uppmättes", "uppmätts", "uppmuntrades", "uppmuntras", "uppmuntrats", "uppnåddes", "uppnås", "uppnåtts", "uppövats", "upppdagas", "uppräknades", "upprätas", "upprättades", "upprättas", "upprättats", "upprätthållas", "upprätthålles", "upprätthållits", "upprätthålls", "upprätthölls", "upprepades", "upprepas", "upprepats", "uppresas", "uppreses", "upprestes", "uppröras", "upprördes", "upprörs", "upprörts", "upprustas", "uppsamlades", "uppsändas", "uppsättas", "uppsattes", "uppsatts", "uppskalas", "uppskattades", "uppskattas", "uppskattats", "uppskjutas", "uppskjutits", "uppskjuts", "uppsköts", "uppslukades", "uppslukas", "uppslukats", "uppsnappas", "uppsökas", "uppsöks", "uppsöktes", "uppsökts", "uppställas", "uppställs", "uppställts", "upptäckas", "upptäcks", "upptäcktes", "upptäckts", "upptagas", "upptages", "upptagits", "upptändes", "upptänds", "upptänts", "upptas", "upptaxeras", "upptecknades", "upptecknats", "upptogs", "uppväckas", "uppväcktes", "uppvägas", "uppvägdes", "uppvägs", "uppvägts", "uppvaktades", "uppvaktas", "uppvaktats", "uppvärderades", "uppvärderas", "uppvärmdes", "uppvisades", "uppvisas", "uppvisningflygas", "urbaniserats", "urgröps", "urholkades", "urholkas", "urholkats", "urkalkas", "urladdas", "urlakats", "ursäktas", "ursäktats", "urskiljas", "urskiljs", "urskuldas", "uruppföras", "uruppfördes", "uruppförs", "uruppförts", "urvattnas", "usurperats", "utandades", "utandas", "utandats", "utannonserades", "utannonseras", "utannonserats", "utanordnats", "utarbetades", "utarbetas", "utarbetats", "utarmades", "utarmas", "utarmats", "utarrenderas", "utbasunerades", "utbasuneras", "utbetalades", "utbetalas", "utbetalats", "utbildades", "utbildas", "utbildats", "utbjöds", "utbjudas", "utbjuds", "utbringades", "utbringas", "utbroderas", "utbyts", "utbyttes", "utbytts", "utdefinieras", "utdelades", "utdelas", "utdelats", "utdikades", "utdömas", "utdömdes", "utdöms", "utdömts", "utdrivas", "utelämnas", "utelämnats", "uteslöts", "uteslutas", "uteslutits", "utesluts", "utestängas", "utestängdes", "utestängs", "utestängts", "utexaminerades", "utexamineras", "utexaminerats", "utfalls", "utfärdades", "utfärdas", "utfärdats", "utfästas", "utfästs", "utflyttas", "utfodras", "utföras", "utfördelas", "utfördes", "utfordras", "utfordrats", "utföres", "utformades", "utformas", "utformats", "utförs", "utförsäkras", "utförsäljas", "utforskades", "utforskas", "utförts", "utfösas", "utfrågades", "utfrågas", "utfrågats", "utgavs", "utges", "utgetts", "utgivits", "utgjordes", "utgjorts", "utgjutits", "utglesas", "utgöras", "utgöres", "utgörs", "uthärdas", "uthyrdes", "utjämnades", "utjämnas", "utjämnats", "utkämpades", "utkämpas", "utkämpats", "utklassats", "utkommenderades", "utkonkurrerades", "utkonkurreras", "utkoras", "utkorats", "utkrävas", "utkrävdes", "utkräves", "utkrävts", "utkrisalliseras", "utkristalliserades", "utkristalliseras", "utkristalliserats", "utkvitteras", "utlades", "utläggas", "utläggs", "utlämnades", "utlämnas", "utlämnats", "utlandsstationerades", "utlandstationerades", "utläs", "utläsas", "utläses", "utlokaliserades", "utlokaliseras", "utlokaliserats", "utlösas", "utlöses", "utlöstes", "utlösts", "utlottades", "utlottas", "utlovades", "utlovas", "utlovats", "utlys", "utlysas", "utlyses", "utlystes", "utlysts", "utmålades", "utmålas", "utmålats", "utmanades", "utmanas", "utmanats", "utmanövrerades", "utmanövreras", "utmärkas", "utmärks", "utmärktes", "utmärkts", "utmätas", "utmäts", "utmattas", "utmättes", "utmätts", "utmejslades", "utminuterades", "utmönstrades", "utmönstras", "utnämnas", "utnämndes", "utnämns", "utnämnts", "utnyttjades", "utnyttjas", "utnyttjats", "utoands", "utökades", "utökas", "utökats", "utövades", "utövas", "utövats", "utpekades", "utpekas", "utpekats", "utplacerades", "utplaceras", "utplacerats", "utplånades", "utplånas", "utplånats", "utplanteras", "utposteras", "utpressas", "utpressats", "utprovades", "utprovas", "utprovats", "utraderades", "utraderas", "utraderats", "utrangeras", "utrangerats", "uträttades", "uträttas", "uträttats", "utredas", "utreddes", "utredningshäktades", "utreds", "utrensades", "utretts", "utropades", "utropas", "utropats", "utrotades", "utrotas", "utrotats", "utrustades", "utrustas", "utrustats", "utrycks", "utrymdes", "utrymmas", "utryms", "utrymts", "utsades", "utsägas", "utsågs", "utsägs", "utsagts", "utsändas", "utsändes", "utsänds", "utsänts", "utsättas", "utsattes", "utsättes", "utsatts", "utsätts", "utses", "utsetts", "utsiras", "utskeppas", "utskiljas", "utslungas", "utslungats", "utsmyckas", "utsöndras", "utspanns", "utspelades", "utspelas", "utspelats", "utspionerades", "utspisades", "utspisas", "utspisats", "utstakades", "utstakats", "utställas", "utställdes", "utställs", "utstöttes", "utsträckas", "utsträcks", "utsträcktes", "utstrålas", "utströs", "uttages", "uttagits", "uttalades", "uttalas", "uttalats", "uttänkas", "uttas", "uttnyttjas", "uttogs", "uttolkas", "uttöms", "utträttats", "uttröttas", "uttryckas", "uttrycks", "uttrycktes", "uttryckts", "utttrycks", "uttunnades", "uttunnas", "uttydas", "uttydes", "uttyds", "utuppfördes", "utvaldes", "utväljas", "utvalts", "utvanns", "utvärderades", "utvärderas", "utvärderats", "utvattnas", "utväxlades", "utväxlas", "utväxlats", "utveckas", "utvecklades", "utvecklas", "utvecklats", "utveklas", "utverkats", "utvidgades", "utvidgas", "utvidgats", "utvinnas", "utvinns", "utvisades", "utvisas", "utvisats", "utvunnits", "uvecklas", "uvecklats", "vaccinerades", "vaccineras", "vaccinerats", "vachettes", "väckas", "väcks", "väcktes", "väckts", "vådaskjuts", "vådasköts", "vades", "vädrades", "vädras", "vädrats", "vågas", "vägas", "vägdes", "väges", "vaggades", "vaggas", "vaggats", "vägledas", "vägleddes", "vägleds", "vägletts", "vägrades", "vägras", "vägrats", "vägs", "vägts", "vakantsätts", "vaktades", "vaktas", "vakuummöras", "valderas", "valdes", "våldtagits", "våldtas", "våldtogs", "valenciennes", "väljas", "väljes", "väljs", "välkomnades", "välkomnas", "välkomnats", "vallades", "vållades", "vallas", "vallås", "vållas", "vållats", "vallfärdas", "valsas", "välsignades", "välsignas", "välsignats", "vältas", "vältes", "vältrades", "vältras", "vältrats", "valts", "välts", "välvdes", "välvs", "vämjdes", "vanäras", "våndades", "vandaliserades", "vandaliseras", "vandaliserats", "våndas", "vändas", "våndats", "vandes", "vändes", "vandkunsts", "vandrades", "vandras", "vänds", "vändsteks", "vanhedrats", "vanhelgas", "vanhelgats", "vänjas", "vankades", "vankats", "vanns", "vanprydas", "vanskötas", "vansköts", "vansköttes", "vansläktades", "vansläktas", "vansläktats", "vanställs", "vanstyrs", "väntades", "väntas", "väntats", "vantolkas", "vantolkats", "vänts", "vanvårdas", "vanvårdats", "våransas", "varas", "vårdades", "vårdas", "vårdats", "värdebas", "värderades", "värderas", "värderats", "värdes", "värdesättas", "värdesattes", "värdesatts", "värdesätts", "värdigades", "värdigas", "vares", "vargas", "varieras", "varierats", "värks", "värmas", "värmdes", "varmhållas", "varmkörs", "varmmanglades", "varmrökas", "värms", "värmts", "varnades", "värnades", "varnas", "värnas", "varnats", "värnats", "vårseglats", "varslades", "varslas", "varslats", "varsnas", "varvades", "värvades", "varvas", "värvas", "varvats", "värvats", "väs", "vaskades", "vaskas", "vaskats", "vässas", "västallierades", "västs", "vattenfyllas", "vattenfylls", "vattengjutits", "vattnades", "vattnas", "vattnats", "vattrades", "vattras", "vävas", "vävdes", "vävs", "vävts", "växlades", "växlas", "växlats", "växtfärgats", "veckats", "vecklades", "vecklas", "vederfaras", "vederfares", "vederfarits", "vederfars", "vederfors", "vederlades", "vederläggas", "vederläggs", "vederlagts", "veks", "veldes", "venables", "vendanges", "veninivas", "venstres", "ventilerades", "ventileras", "ventilerats", "verbaliseras", "verderfarits", "verdes", "verifieras", "verifierats", "verkställas", "verkställdes", "verkställs", "verkställts", "vetas", "veterinärundersökas", "vetetortillas", "vevades", "vevas", "vevats", "vickas", "vidarebefodrades", "vidarebefordrades", "vidarebefordras", "vidarebefordrats", "vidarebehandlas", "vidareexporteras", "vidareexporterats", "vidareförsäljas", "vidareförsäljs", "vidaresändas", "vidaresänts", "vidareutbildas", "vidareutvecklades", "vidareutvecklas", "vidareutvecklats", "videodokumenteras", "videofilmades", "videofilmas", "videofilmats", "videoinspelats", "vidgades", "vidgas", "vidgats", "vidgåtts", "vidhållas", "vidimerades", "vidimeras", "vidkännas", "vidmakthållas", "vidmakthålles", "vidmakthålls", "vidmakthölls", "vidröras", "vidrörs", "vidrörts", "vidtagas", "vidtages", "vidtagits", "vidtalades", "vidtalas", "vidtas", "vidtogs", "viftades", "viftas", "viftats", "vigas", "vigdes", "vigs", "vigts", "vikas", "vikits", "viks", "viktas", "vikts", "vilas", "villfaras", "villkoras", "villkorats", "villkorsändrades", "vilseförts", "vilseledas", "vilseleddes", "vilseleds", "vilseletts", "vimlades", "vimlats", "vindas", "vindfälldes", "vindtorkas", "vineras", "vingklippas", "vinglas", "vinifieras", "vinkades", "vinkas", "vinklades", "vinklas", "vinnas", "vinnes", "vinns", "vinschas", "vinterförvarats", "vinterkonserverats", "vintersportades", "vippas", "virades", "viras", "virats", "virkats", "virvlades", "virvlas", "visades", "visas", "visats", "visiones", "visiterades", "visiteras", "viskades", "viskas", "viskats", "vispades", "vispas", "vispats", "visslades", "visslas", "visslats", "visstes", "visualiseras", "vitaliserades", "vitaliseras", "vitaliserats", "vitesföreläggas", "vitesförelagts", "vitlimmas", "vitsordas", "vittjas", "vittjats", "vittnas", "vittras", "vogts", "voltas", "vördades", "vördas", "voterades", "vrakades", "vräkas", "vräks", "vräktes", "vräkts", "vrålas", "vrängas", "vrängs", "vranjes", "vredgades", "vredgas", "vredgats", "vreds", "vrenskades", "vrenskas", "vridas", "vrides", "vridits", "vrids", "vunnits", "walesas", "walkabouts", "wannadies", "wästfelts", "waves", "williams", "wokas", "yeats", "ylikangas", "ympades", "ympas", "ympats", "yorkbörs", "yppades", "yppas", "yrkades", "yrkas", "ystades", "ytbehandlas", "yttrades", "yttras", "yttrats", "zappas", "zonindelades", "zoomas"];
Object.defineProperty(Dj, "__esModule", {
  value: !0
});
Dj.default = Ett;
var wtt = ee, vtt = ktt(jb);
function ktt(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  areWordsInSentence: _tt
} = wtt.languageProcessing;
function Ett(e) {
  return _tt(vtt.default, e);
}
Object.defineProperty(Cj, "__esModule", {
  value: !0
});
var D5 = Cj.default = void 0, Att = ee, Ttt = lu(Eb), $tt = er, jtt = lu(Nr), xtt = lu(Tb), Stt = lu($b), Ott = lu(Pj), Itt = lu(Dj);
function lu(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: Ctt
} = Att.languageProcessing;
let Ptt = class extends Ctt {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "sv",
      passiveConstructionType: "morphological",
      firstWordExceptions: Ttt.default,
      functionWords: $tt.all,
      transitionWords: jtt.default,
      twoPartTransitionWords: xtt.default,
      keyphraseLength: Stt.default
    }), Object.assign(this.helpers, {
      getStemmer: Ott.default,
      isPassiveSentence: Itt.default
    });
  }
};
D5 = Cj.default = Ptt;
var Nj = {}, xb = {};
Object.defineProperty(xb, "__esModule", {
  value: !0
});
xb.default = void 0;
xb.default = [
  // Demonstrative pronouns:
  "bunlar",
  "şunlar",
  "onlar”, “burası",
  "orası",
  "şurası",
  "burayı",
  "orayı",
  "şurayı”, “buraya",
  "oraya",
  "şuraya”, “burada",
  "orada",
  "şurada”, “buradan",
  "oradan",
  "şuradan",
  // Demonstrative adjectives:
  "bu",
  "şu",
  "o",
  // Numbers:
  "bir",
  "íki",
  "üç",
  "dört",
  "beş",
  "altı",
  "yedi",
  "sekiz",
  "dokuz",
  "on"
];
var wd = {}, Lr = {};
Object.defineProperty(Lr, "__esModule", {
  value: !0
});
Lr.singleWords = Lr.multipleWords = Lr.default = Lr.allWords = void 0;
const Rtt = Lr.singleWords = ["fakat", "halbuki", "hatta", "üstelik", "ancak", "oysa", "sonuçta", "yalnız", "çünkü", "oysaki", "kısacası", "özetle", "böylelikle", "ama", "lakin", "ayrıca", "açıkcası", "yani", "sonucunda", "böylece", "kısaca", "veya", "veyahut", "zira", "öyleyse", "sonrasında", "ardından", "vakıa", "gerçi", "karşın", "tümüyle", "bütünüyle", "tamamıyla", "genelde", "diğer", "başka", "önce", "öncesinde", "sonra", "yanısıra", "ama", "muhakkak", "kesinlikle", "şüphesiz", "elbet", "elbette", "kuşkusuz", "başlıca", "bilakis", "aksine", "tersine", "devamında", "özellikle", "bilhassa", "nihayet", "nihayetinde", "neticede", "ayrıyeten", "dahası", "çoğunlukla", "genellikle", "genelde", "dolayısıyla", "gelgelelim", "aslında", "doğrusu", "mamafih", "binaenaleyh", "evvelce", "önceden", "şöylelikle", "örneğin", "mesela", "nitekim", "mademki", "şimdi", "halihazırda", "i̇laveten", "aynen", "nazaran", "nedeniyle", "yüzünden", "umumiyetle", "ekseriye", "amacıyla", "gayesiyle", "velhasıl", "ezcümle", "özetlersek", "etraflıca", "tafsilatlı", "genişçe", "bilfiil", "filhakika", "evvela", "i̇lkin", "en önce", "birincisi", "i̇kincisi", "üçüncüsü", "sonuncusu", "tıpkı", "topyekun", "hem", "kah", "ister", "ya", "gerekse", "sayesinde", "sebebiyle", "üzere", "göre", "uyarınca", "halen", "gerçekten", "madem", "yoksa"], Dtt = Lr.multipleWords = ["o halde", "bundan böyle", "demek ki", "ne yazık ki", "görüldüğü gibi", "i̇lk olarak", "son olarak", "ne var ki", "buna rağmen", "yine de", "başka bir deyişle", "açıklamak gerekirse", "özetlemek gerekirse", "kısaca söylemek gerekirse", "görüldüğü gibi", "ve bunun gibi", "halbu ki", "buna göre", "ona göre", "ek olarak", "her ne kadar", "velev ki", "olmakla beraber", "bile olsa", "i̇le beaber", "i̇le birlikte", "her şeye rağmen", "bütün yanlarıyla", "bütün yönleriyle", "ele alacak olursak", "baştan sona", "diğer bir", "başka bir", "daha önce", "daha sonra", "bundan başka", "bunun yanında", "bunun yanı sıra", "bununla birlikte", "buna ilaveten", "bunun dışında", "elbette ki", "muhakkak ki", "belli başlı", "karşılaştırmak gerekirse", "karşılaştırmalı olarak", "aynı zamanda", "sonuç olarak", "diğer taraftan", "diğer bir taraftan", "buna karşılık", "tam tersine", "buna bağlı olarak", "buna parelel olarak", "i̇kinci olarak", "üçüncü olarak", "aynı derecede", "eşit olarak", "başta olmak üzere", "en sonunda", "açık bir şekilde", "ana hatlarıyla", "genel itibariyle", "genel anlamda", "genel olarak", "bunun için", "bu nedenle", "bundan dolayı", "bu sebeple", "dolayısı ile", "her halükarda", "aynı biçimde", "aynı şekilde", "bu esnada", "bu arada", "hal böyleyken", "bağlı kalmaksızın", "açık olarak", "belli ki", "ayrıntılı olarak", "bundan önce", "sözün kısası", "az ve öz bir şekilde", "tüm ayrıntılarıyla", "bu şekilde", "o yüzden", "bu sayede", "buradan hareketle", "buna mukabil", "en önemlisi", "her şeyden önce", "esas olarak", "hepsinden önce", "hepsinden öte", "hepsinden ötesi", "her şeyin üzerinde", "her şeyin ötesinde", "hepsinden önemlisi", "asıl önemlisi", "her şeyi hesaba katarak", "bütün olarak", "her şey göz önüne alındığında", "pararel olarak", "diğer bir nokta", "diğer açıdan", "öyle ya da böyle", "doğrusunu söylemek gerekirse", "i̇şin doğrusu", "aslına bakılırsa", "gerçek şu ki", "hattı zatında", "aslına bakıldığında", "aslına bakarsak", "i̇şin aslı", "sonuç itibariyle", "örnek olarak", "örneleyecek olursak", "görülebileceği gibi", "görülebileceği üzere", "görüldüğü üzere", "söylendiği gibi", "söylenildiği gibi", "söylediği gibi", "söylediğim gibi", "olduğu kadar", "önceden belirtildiği gibi", "önceden söylendiği gibi", "yukarıda gösterildiği gibi", "eninde sonunda", "önünde sonunda", "şu anda", "bu sırada", "bununla beraber", "bu noktada", "bunun ışığında", "bunların ışığında", "aşikar olarak", "aynı sebeple", "bir de", "doğru da olsa", "doğru bile olsa", "öyle bile olsa", "öyle de olsa", "i̇le ilgili", "olsa bile", "eğer ki", "olsa dahi", "ondan dolayı", "o sebepten dolayı", "bu yüzden", "onun için", "esas itibarıyla", "aynı sebepten dolayı", "bu amaçla", "zaman zaman", "arada sırada", "dönem dönem", "arada bir", "diyelim ki", "farz edelim ki", "farz edersek", "kısaca söylecek olursak", "tek kelimeyle", "birkaç kelimeyle", "sözün özü", "en nihayetinde", "uzun uzadıya", "her iki durumda da", "özü itibariyle", "amacı ile", "olması için", "başka bir ifadeyle", "diğer bir deyişle", "i̇lk önce", "bir yandan", "bir taraftan", "hatırlatmak gerekirse", "bu bağlamda", "gel gelelim", "her şey hesaba katılırsa", "bütüne bakıldığında", "belirtildiği gibi", "bir başka ifadeyle", "lafı toparlamak gerekirse", "bu düşünceyle", "bu maksatla", "bu doğrultuda", "bu niyetle", "ne de", "ya da", "aksi durumda", "bu durum", "olup olmadığı", "diğer yandan", "öte yandan", "ne olursa olsun"], Ntt = Lr.allWords = Rtt.concat(Dtt);
Lr.default = Ntt;
Object.defineProperty(wd, "__esModule", {
  value: !0
});
wd.default = wd.all = void 0;
var Ltt = Lr, Mtt = qtt(Ba);
function qtt(e) {
  return e && e.__esModule ? e : { default: e };
}
const Ftt = ["bir"], Btt = ["i̇ki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz", "on", "on bir", "on i̇ki", "on üç", "on dört", "on beş", "on altı", "on yedi", "on sekiz", "on dokuz", "yirmi", "yirmi bir", "yirmi i̇ki", "yirmi üç", "yirmi dört", "yirmi beş", "yirmi altı", "yirmi yedi", "yirmi sekiz", "yirmi dokuz", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan", "yüz", "bin", "milyon", "milyar"], Wtt = ["birinci", "i̇kinci", "üçüncü", "dördüncü", "beşinci", "altıncı", "yedinci", "sekizinci", "dokuzuncu", "onuncu"], Utt = ["tam", "yarım", "çeyrek", "üçte biri", "üçte ikisi", "tamamı", "yarısı", "çeyreği", "üçte biri", "üçte ikisi"], Htt = [
  // Personal pronouns.
  "ben",
  "sen",
  "o",
  "biz",
  "siz",
  "onlar",
  "beni",
  "seni",
  "onu",
  "bizi",
  "sizi",
  "onları",
  "bizleri",
  "sizleri",
  "bana",
  "sana",
  "ona",
  "bize",
  "size",
  "onlara",
  "bizlere",
  "sizlere",
  "bende",
  "sende",
  "onda",
  "bizde",
  "sizde",
  "onlarda",
  "bizlerde",
  "sizlerde",
  "benden",
  "senden",
  "ondan",
  "bizden",
  "sizden",
  "onlardan",
  "bizlerden",
  "sizlerden",
  // Possessive pronouns.
  "benim",
  "senin",
  "onun",
  "bizim",
  "sizin",
  "onların",
  "bizlerin",
  "sizlerin",
  // Demonstrative pronouns.
  "bu",
  "şu",
  "o",
  "öteki",
  "beriki",
  "bura",
  "şura",
  "ora",
  "burası",
  "şurası",
  "orası",
  "böylesi",
  "şöylesi",
  "öylesi",
  "bunlar",
  "şunlar",
  "onlar",
  "ötekiler",
  "berikiler",
  "buralar",
  "şuralar",
  "oralar",
  // Reciprocal pronouns.
  "birbiri",
  "birbirimiz",
  "birbiriniz",
  "birbirleri",
  "birbirimizi",
  "birbirinizi",
  "birbirlerini",
  "birbirimize",
  "birbirinize",
  "birbirlerine",
  "birbirimizde",
  "birbirinizde",
  "birbirlerinde",
  "birbirimizden",
  "birbirinizden",
  "birbirlerinden",
  "birbirimizle",
  "birbirinizle",
  "birbirleriyle"
], Gtt = ["kim", "kimi", "kime", "kimde", "kimden", "kimin", "kiminle", "ne", "neyi", "neyde", "neyden", "neyle", "ne için", "niçin", "niye", "ne diye", "nere", "nereyi", "nereye", "nerede", "nereden", "neresi", "neden", "hangi", "hangisi", "kaç", "kaçı", "kaçıncı", "kaçta", "nasıl", "ne kadar", "ne zaman", "mı", "hangi", "hangisi", "kimler", "kimleri", "kimlere", "kimlerde", "kimlerden", "neler", "neleri", "nelere", "nelerde", "nelerden", "hangiler", "hangileri", "hangilere"], Vtt = ["hepsi", "bazısı", "çoğu", "birçoğu", "birazı", "hepsi", "bütünü", "yeteri kadarı", "birkaçı", "biri", "her ikisi", "i̇kisinden biri", "hiç biri", "diğeri", "tümü", "bir kısmı", "pek çoğu", "her biri", "bazı", "çok", "çoğu", "birçok", "biraz", "bütün", "yeteri kadar", "birkaç", "bir", "her iki", "hiç bir", "diğer", "tüm", "bir kısım", "pek çok", "her bir"], Ktt = ["kendi", "kendim", "kendimi", "kendime", "kendimde", "kendimden", "kendin", "kendini", "kendine", "kendinde", "kendinden", "kendisi", "kendiyle", "kendileri", "kendilerine", "kendilerinde", "kendilerinden", "kendileriyle"], Ytt = ["kimi", "kimse", "biri", "birisi", "başkası", "bazısı", "bir çoğu", "bir takımı", "birkaçı", "birazı", "herkes", "hepsi", "hepimiz", "hiçbiri", "herhangi biri", "her biri", "şey", "falan", "filan", "falanca", "öteberi", "tümü", "bütünü", "kimileri", "kimseler", "birileri", "başkaları", "bazıları", "bir çokları", "herkesler"], Qtt = ["i̇çin", "gibi", "kadar", "ancak", "yalnız", "i̇le", "sadece", "sanki", "değil", "üzere", "dair", "karşın", "rağmen", "özgü", "doğru", "dek", "değin", "ait", "beri", "başka", "itibaren", "dolayı", "ötürü", "adeta", "sırf", "diye", "tek", "karşı"], Xtt = ["ve", "i̇le", "veya", "ya da", "yahut", "veyahut", "ama", "fakat", "lakin", "yalnız", "ancak", "oysa", "oysaki", "halbu ki", "ne var ki", "çünkü", "zira", "de", "da", "ki", "meğer", "madem", "mademki", "demek", "demek ki", "üstelik", "hatta", "yani", "hem...hem", "hem de", "ne", "kah", "i̇ster", "ister", "açıkcası", "bile", "ya", "da", "ise", "öyleyse", "kim bilir", "gerek", "gerekse de", "ta ki", "zati"], Ztt = ["demek", "dedim", "dedin", "dedi", "dedik", "dediniz", "dediler", "der", "söylemek", "söyledim", "söyledin", "söyledi", "söyledik", "söylediniz", "söylediler", "söyler", "söylerler", "sormak", "sordum", "sordun", "sordu", "sorduk", "sordunuz", "sordular", "sorar", "sorarlar", "belirtmek", "belirttim", "belirttin", "belirtti", "belirttik", "belirttiniz", "belirttiler", "belirtir", "belirtirler", "açıklamak", "açıkladım", "açıkladın", "açıkladı", "açıkladık", "açıkladınız", "açıkladılar", "açıklar", "açıklarlar", "düşünmek", "düşündüm", "düşündün", "düşündü", "düşündük", "düşündünüz", "düşündüler", "düşünür", "düşünürler", "konuşmak", "konuşdum", "konuştun", "konuştu", "konuştuk", "konuştunuz", "konuştular", "konuşur", "konuşurlar", "bildirmek", "bildirdim", "bildirdin", "bildirdi", "bildirdik", "bildirdiniz", "bildirdiler", "birdirir", "bildirirler", "ele", "almak", "aldım", "aldın", "aldı", "aldık", "aldınız", "aldılar", "önermek", "önerdim", "önerdin", "önerdi", "önerdik", "önerdiniz", "önerdiler", "önerir", "önerirler", "anlamak", "anladım", "anladın", "anladı", "anladık", "anladınız", "anladılar", "anlar", "anlarlar"], Jtt = ["en", "daha", "pek çok", "en çok", "fazla", "epey", "epeyce", "bayağı", "oldukça", "pek", "gayet", "fazlaca", "fevkalede", "tamamen", "fena halde", "fena şekilde", "gerçekten", "zerre kadar", "biraz", "son derece", "deli gibi", "en", "çok", "azıcık"], ent = ["etmek", "olmak", "yapmak", "kalmak", "gelmek", "kalmak", "bulunmak", "demek", "dilemek", "söylemek", "durmak", "eylemek", "yazmak", "durmak", "vermek", "kabul", "teşekkür", "memnun", "seyir", "zan", "bilmek"], ant = [
  // General adjective.
  "yeni",
  "eski",
  "önceki",
  "i̇yi",
  "büyük",
  "küçük",
  "kolay",
  "zor",
  "hızlı",
  "yavaş",
  "yüksek",
  "alçak",
  "kısa",
  "uzun",
  "i̇nce",
  "kalın",
  "gerçek",
  "yalan",
  "yanlış",
  "basit",
  "zor",
  "aynı",
  "farklı",
  "belli",
  "belirsiz",
  "modern",
  "geleneksel",
  "muhtemel",
  "yaygın",
  "genç",
  "yaşlı",
  "zamansız",
  "acı",
  "tatlı",
  "tuzlu",
  "sıcak",
  "soğuk",
  "kalabalık",
  "sakin",
  "yalnız",
  "dar",
  "geniş",
  "siyah",
  "beyaz",
  "mavi",
  "kırmızı",
  "sarı",
  "temiz",
  "kirli",
  "muhteşem",
  "nazik",
  "kibar",
  "akıllı",
  "zeki",
  "gizli",
  "açık",
  "kapalı",
  "dikkatli",
  "gürültülü",
  "sevinçli",
  // General adverbs.
  "eski",
  "önce",
  "i̇yi",
  "büyük",
  "küçük",
  "kolay",
  "zor",
  "hızlı",
  "yavaş",
  "yüksek",
  "alçak",
  "kısa",
  "uzun",
  "i̇nce",
  "kalın",
  "gerçek",
  "yanlış",
  "basit",
  "zor",
  "aynı",
  "farklı",
  "belli",
  "belirsiz",
  "modern",
  "geleneksel",
  "muhtemel",
  "yaygın",
  "nadir",
  "genç",
  "yaşlı",
  "zamansız",
  "acı",
  "tatlı",
  "tuzlu",
  "sıcak",
  "soğuk",
  "kalabalık",
  "sakin",
  "yalnız",
  "dar",
  "geniş",
  "siyah",
  "beyaz",
  "mavi",
  "kırmızı",
  "sarı",
  "temiz",
  "kirli",
  "muhteşem",
  "nazik",
  "kibar",
  "akıllı",
  "zeki",
  "gizli",
  "açık",
  "kapalı",
  "dikkatle",
  "gürültülü",
  "uzun",
  "sevinçle",
  "aşağı",
  "yukarı",
  "sağa",
  "sola",
  "i̇çeri dışarı",
  "bugün",
  "yarın",
  "haftaya",
  "seneye",
  "ne zaman",
  "nereye",
  "neden",
  "niye",
  "ne kadar",
  "nasıl",
  "ne"
], tnt = ["ey", "hey", "bre", "hişt", "şşt", "ah", "ahh", "ee", "vay", "i̇mdat", "hah", "ay", "aa", "aaa", "hay allah", "aman", "aman dikkat", "vah", "ya", "yaa", "ooo", "of", "tüh", "peh", "aman", "haydi", "sakın", "yuh"], nnt = ["çay kaşığı", "çay k.", "yemek kaşığı", "yemek k.", "tatlı kaşığı", "tatlı k.", "çay bardağı", "çay b.", "su bardağı", "su b.", "kahve fincanı", "kahve f.", "tepeleme", "tepeleme kaşık", "tepeleme bardak", "gr", "ml", "kg", "mg", "cl", "oz", "çeyrek", "tam", "yarım", "üçte biri", "üçte ikisi", "parmak"], rnt = ["saniye", "saniyeler", "dakika", "dakikalar", "saat", "saatler", "gün", "günler", "hafta", "haftalar", "ay", "aylar", "yıl", "yıllar", "bugün", "yarın", "dün", "sabah", "öğlen", "akşam", "gece", "gündüz"], snt = ["şey", "şeyler", "olasılık", "çeşit", "kişi"], int = ["hapşu", "hapşırık", "hapşurmak", "horr", "horultu", "horlamak", "şırıl", "şırıltı", "şırıldamak", "hışır", "hışırtı", "hışırdamak", "gıcır", "gıcırtı", "gıcırdamak", "çatır", "çatırtı", "çatırdamak", "pat", "patlamak", "vın", "vınlamak", "zırr", "zırıltı", "zırlamak", "tık", "tıkırtı", "tıkırdamak", "çıt", "çıtırtı", "çıtırdamak", "fokur", "fokurtu", "fokurdamak", "kıt", "kıtırtı", "kıtırdamak", "patırtı"], ont = ["bayan", "bay", "hanımefendi", "hanfendi", "hanım", "beyefendi", "beyfendi", "bey", "sayın", "profesör", "prof.", "doktor", "dr."], lnt = wd.all = (0, Mtt.default)([].concat(Ftt, Btt, Wtt, Utt, Htt, Gtt, Vtt, Ktt, Ytt, Qtt, Xtt, Ztt, Jtt, ent, ant, tnt, nnt, rnt, snt, int, ont, Ltt.singleWords));
wd.default = lnt;
var Sb = {};
Object.defineProperty(Sb, "__esModule", {
  value: !0
});
Sb.default = void 0;
Sb.default = [["ne", "ne"], ["gerek", "gerek"], ["olsun", "olmasın"]];
var Ob = {};
Object.defineProperty(Ob, "__esModule", {
  value: !0
});
Ob.default = void 0;
Ob.default = {
  recommendedLength: 15,
  percentages: {
    slightlyTooMany: 20,
    farTooMany: 25
  }
};
var Lj = {}, Mj = {};
class SR {
  get b() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$b") ? this._$esjava$b : this._$esjava$b = "";
  }
  set b(a) {
    this._$esjava$b = a;
  }
  length$esjava$0() {
    return this.b.length;
  }
  replace$esjava$3(a, t, n) {
    if (a === 0 && t === this.b.length)
      this.b = n;
    else {
      const r = this.b.substring(0, a), o = this.b.substring(t);
      this.b = r + n + o;
    }
  }
  substring$esjava$2(a, t) {
    return this.b.substring(a, t);
  }
  charAt$esjava$1(a) {
    return this.b.charCodeAt(a);
  }
  subSequence$esjava$2(a, t) {
    throw new Error("NotImpl: CharSequence::subSequence");
  }
  toString$esjava$0() {
    return this.b;
  }
  length(...a) {
    switch (a.length) {
      case 0:
        return this.length$esjava$0(...a);
    }
    return super.length(...a);
  }
  replace(...a) {
    switch (a.length) {
      case 3:
        return this.replace$esjava$3(...a);
    }
    return super.replace(...a);
  }
  substring(...a) {
    switch (a.length) {
      case 2:
        return this.substring$esjava$2(...a);
    }
    return super.substring(...a);
  }
  charAt(...a) {
    switch (a.length) {
      case 1:
        return this.charAt$esjava$1(...a);
    }
    return super.charAt(...a);
  }
  subSequence(...a) {
    switch (a.length) {
      case 2:
        return this.subSequence$esjava$2(...a);
    }
    return super.subSequence(...a);
  }
  toString(...a) {
    switch (a.length) {
      case 0:
        return this.toString$esjava$0(...a);
    }
    return super.toString(...a);
  }
}
class ne {
  static toCharArray$esjava$1(a) {
    const t = a.length, n = new Array(t);
    for (let r = 0; r < t; r++)
      n[r] = a.charCodeAt(r);
    return n;
  }
  constructor(a, t, n, r, o) {
    this.s_size = a.length, this.s = ne.toCharArray$esjava$1(a), this.substring_i = t, this.result = n, this.methodobject = o, this.method = r ? o[r] : null;
  }
  get s_size() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$s_size") ? this._$esjava$s_size : this._$esjava$s_size = 0;
  }
  set s_size(a) {
    this._$esjava$s_size = a;
  }
  get s() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$s") ? this._$esjava$s : this._$esjava$s = null;
  }
  set s(a) {
    this._$esjava$s = a;
  }
  get substring_i() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$substring_i") ? this._$esjava$substring_i : this._$esjava$substring_i = 0;
  }
  set substring_i(a) {
    this._$esjava$substring_i = a;
  }
  get result() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$result") ? this._$esjava$result : this._$esjava$result = 0;
  }
  set result(a) {
    this._$esjava$result = a;
  }
  get method() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$method") ? this._$esjava$method : this._$esjava$method = null;
  }
  set method(a) {
    this._$esjava$method = a;
  }
  get methodobject() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$methodobject") ? this._$esjava$methodobject : this._$esjava$methodobject = null;
  }
  set methodobject(a) {
    this._$esjava$methodobject = a;
  }
}
class dnt {
  constructor() {
    this.current = new SR(), this.setCurrent$esjava$1("");
  }
  setCurrent$esjava$1(a) {
    this.current.replace(0, this.current.length(), a), this.cursor = 0, this.limit = this.current.length(), this.limit_backward = 0, this.bra = this.cursor, this.ket = this.limit;
  }
  getCurrent$esjava$0() {
    const a = this.current.toString();
    return this.current = new SR(), a;
  }
  get current() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$current") ? this._$esjava$current : this._$esjava$current = null;
  }
  set current(a) {
    this._$esjava$current = a;
  }
  get cursor() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$cursor") ? this._$esjava$cursor : this._$esjava$cursor = 0;
  }
  set cursor(a) {
    this._$esjava$cursor = a;
  }
  get limit() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$limit") ? this._$esjava$limit : this._$esjava$limit = 0;
  }
  set limit(a) {
    this._$esjava$limit = a;
  }
  get limit_backward() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$limit_backward") ? this._$esjava$limit_backward : this._$esjava$limit_backward = 0;
  }
  set limit_backward(a) {
    this._$esjava$limit_backward = a;
  }
  get bra() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$bra") ? this._$esjava$bra : this._$esjava$bra = 0;
  }
  set bra(a) {
    this._$esjava$bra = a;
  }
  get ket() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$ket") ? this._$esjava$ket : this._$esjava$ket = 0;
  }
  set ket(a) {
    this._$esjava$ket = a;
  }
  copy_from$esjava$1(a) {
    this.current = a.current, this.cursor = a.cursor, this.limit = a.limit, this.limit_backward = a.limit_backward, this.bra = a.bra, this.ket = a.ket;
  }
  in_grouping$esjava$3(a, t, n) {
    if (this.cursor >= this.limit)
      return !1;
    let r = this.current.charAt(this.cursor);
    return r > n || r < t || (r -= t, !(a[r >> 3] & 1 << (r & 7))) ? !1 : (this.cursor++, !0);
  }
  in_grouping_b$esjava$3(a, t, n) {
    if (this.cursor <= this.limit_backward)
      return !1;
    let r = this.current.charAt(this.cursor - 1);
    return r > n || r < t || (r -= t, !(a[r >> 3] & 1 << (r & 7))) ? !1 : (this.cursor--, !0);
  }
  out_grouping$esjava$3(a, t, n) {
    if (this.cursor >= this.limit)
      return !1;
    let r = this.current.charAt(this.cursor);
    return r > n || r < t ? (this.cursor++, !0) : (r -= t, a[r >> 3] & 1 << (r & 7) ? !1 : (this.cursor++, !0));
  }
  out_grouping_b$esjava$3(a, t, n) {
    if (this.cursor <= this.limit_backward)
      return !1;
    let r = this.current.charAt(this.cursor - 1);
    return r > n || r < t ? (this.cursor--, !0) : (r -= t, a[r >> 3] & 1 << (r & 7) ? !1 : (this.cursor--, !0));
  }
  in_range$esjava$2(a, t) {
    if (this.cursor >= this.limit)
      return !1;
    const n = this.current.charAt(this.cursor);
    return n > t || n < a ? !1 : (this.cursor++, !0);
  }
  in_range_b$esjava$2(a, t) {
    if (this.cursor <= this.limit_backward)
      return !1;
    const n = this.current.charAt(this.cursor - 1);
    return n > t || n < a ? !1 : (this.cursor--, !0);
  }
  out_range$esjava$2(a, t) {
    if (this.cursor >= this.limit)
      return !1;
    const n = this.current.charAt(this.cursor);
    return n > t || n < a ? (this.cursor++, !0) : !1;
  }
  out_range_b$esjava$2(a, t) {
    if (this.cursor <= this.limit_backward)
      return !1;
    const n = this.current.charAt(this.cursor - 1);
    return n > t || n < a ? (this.cursor--, !0) : !1;
  }
  eq_s$esjava$2(a, t) {
    if (this.limit - this.cursor < a)
      return !1;
    let n;
    for (n = 0; n !== a; n++)
      if (this.current.charAt(this.cursor + n) !== t.charCodeAt(n))
        return !1;
    return this.cursor += a, !0;
  }
  eq_s_b$esjava$2(a, t) {
    if (this.cursor - this.limit_backward < a)
      return !1;
    let n;
    for (n = 0; n !== a; n++)
      if (this.current.charAt(this.cursor - a + n) !== t.charCodeAt(n))
        return !1;
    return this.cursor -= a, !0;
  }
  eq_v$esjava$1(a) {
    return this.eq_s$esjava$2(a.length(), a.toString());
  }
  eq_v_b$esjava$1(a) {
    return this.eq_s_b$esjava$2(a.length(), a.toString());
  }
  find_among$esjava$2(a, t) {
    let n = 0, r = t;
    const o = this.cursor, l = this.limit;
    let u = 0, c = 0, f = !1;
    for (; ; ) {
      const y = n + (r - n >> 1);
      let z = 0, v = u < c ? u : c;
      const O = a[y];
      let I;
      for (I = v; I < O.s_size; I++) {
        if (o + v === l) {
          z = -1;
          break;
        }
        if (z = this.current.charAt(o + v) - O.s[I], z !== 0)
          break;
        v++;
      }
      if (z < 0 ? (r = y, c = v) : (n = y, u = v), r - n <= 1) {
        if (n > 0 || r === n || f)
          break;
        f = !0;
      }
    }
    for (; ; ) {
      const y = a[n];
      if (u >= y.s_size) {
        if (this.cursor = o + y.s_size, y.method === null)
          return y.result;
        let z;
        if (z = y.method.call(y.methodobject), this.cursor = o + y.s_size, z)
          return y.result;
      }
      if (n = y.substring_i, n < 0)
        return 0;
    }
  }
  find_among_b$esjava$2(a, t) {
    let n = 0, r = t;
    const o = this.cursor, l = this.limit_backward;
    let u = 0, c = 0, f = !1;
    for (; ; ) {
      const y = n + (r - n >> 1);
      let z = 0, v = u < c ? u : c;
      const O = a[y];
      let I;
      for (I = O.s_size - 1 - v; I >= 0; I--) {
        if (o - v === l) {
          z = -1;
          break;
        }
        if (z = this.current.charAt(o - 1 - v) - O.s[I], z !== 0)
          break;
        v++;
      }
      if (z < 0 ? (r = y, c = v) : (n = y, u = v), r - n <= 1) {
        if (n > 0 || r === n || f)
          break;
        f = !0;
      }
    }
    for (; ; ) {
      const y = a[n];
      if (u >= y.s_size) {
        if (this.cursor = o - y.s_size, y.method === null)
          return y.result;
        let z;
        if (z = y.method.call(y.methodobject), this.cursor = o - y.s_size, z)
          return y.result;
      }
      if (n = y.substring_i, n < 0)
        return 0;
    }
  }
  replace_s$esjava$3(a, t, n) {
    const r = n.length - (t - a);
    return this.current.replace(a, t, n), this.limit += r, this.cursor >= t ? this.cursor += r : this.cursor > a && (this.cursor = a), r;
  }
  slice_check$esjava$0() {
    if (this.bra < 0 || this.bra > this.ket || this.ket > this.limit || this.limit > this.current.length())
      throw new Error("Snowball: faulty slice operation");
  }
  slice_from$esjava$1(a) {
    this.slice_check$esjava$0(), this.replace_s$esjava$3(this.bra, this.ket, a);
  }
  slice_del$esjava$0() {
    this.slice_from$esjava$1("");
  }
  insert$esjava$3(a, t, n) {
    const r = this.replace_s$esjava$3(a, t, n);
    a <= this.bra && (this.bra += r), a <= this.ket && (this.ket += r);
  }
  slice_to$esjava$1(a) {
    return this.slice_check$esjava$0(), a.replace(0, a.length(), this.current.substring(this.bra, this.ket)), a;
  }
  setCurrent(...a) {
    switch (a.length) {
      case 1:
        return this.setCurrent$esjava$1(...a);
    }
    return super.setCurrent(...a);
  }
  getCurrent(...a) {
    switch (a.length) {
      case 0:
        return this.getCurrent$esjava$0(...a);
    }
    return super.getCurrent(...a);
  }
  copy_from(...a) {
    switch (a.length) {
      case 1:
        return this.copy_from$esjava$1(...a);
    }
    return super.copy_from(...a);
  }
  in_grouping(...a) {
    switch (a.length) {
      case 3:
        return this.in_grouping$esjava$3(...a);
    }
    return super.in_grouping(...a);
  }
  in_grouping_b(...a) {
    switch (a.length) {
      case 3:
        return this.in_grouping_b$esjava$3(...a);
    }
    return super.in_grouping_b(...a);
  }
  out_grouping(...a) {
    switch (a.length) {
      case 3:
        return this.out_grouping$esjava$3(...a);
    }
    return super.out_grouping(...a);
  }
  out_grouping_b(...a) {
    switch (a.length) {
      case 3:
        return this.out_grouping_b$esjava$3(...a);
    }
    return super.out_grouping_b(...a);
  }
  in_range(...a) {
    switch (a.length) {
      case 2:
        return this.in_range$esjava$2(...a);
    }
    return super.in_range(...a);
  }
  in_range_b(...a) {
    switch (a.length) {
      case 2:
        return this.in_range_b$esjava$2(...a);
    }
    return super.in_range_b(...a);
  }
  out_range(...a) {
    switch (a.length) {
      case 2:
        return this.out_range$esjava$2(...a);
    }
    return super.out_range(...a);
  }
  out_range_b(...a) {
    switch (a.length) {
      case 2:
        return this.out_range_b$esjava$2(...a);
    }
    return super.out_range_b(...a);
  }
  eq_s(...a) {
    switch (a.length) {
      case 2:
        return this.eq_s$esjava$2(...a);
    }
    return super.eq_s(...a);
  }
  eq_s_b(...a) {
    switch (a.length) {
      case 2:
        return this.eq_s_b$esjava$2(...a);
    }
    return super.eq_s_b(...a);
  }
  eq_v(...a) {
    switch (a.length) {
      case 1:
        return this.eq_v$esjava$1(...a);
    }
    return super.eq_v(...a);
  }
  eq_v_b(...a) {
    switch (a.length) {
      case 1:
        return this.eq_v_b$esjava$1(...a);
    }
    return super.eq_v_b(...a);
  }
  find_among(...a) {
    switch (a.length) {
      case 2:
        return this.find_among$esjava$2(...a);
    }
    return super.find_among(...a);
  }
  find_among_b(...a) {
    switch (a.length) {
      case 2:
        return this.find_among_b$esjava$2(...a);
    }
    return super.find_among_b(...a);
  }
  replace_s(...a) {
    switch (a.length) {
      case 3:
        return this.replace_s$esjava$3(...a);
    }
    return super.replace_s(...a);
  }
  slice_check(...a) {
    switch (a.length) {
      case 0:
        return this.slice_check$esjava$0(...a);
    }
    return super.slice_check(...a);
  }
  slice_from(...a) {
    switch (a.length) {
      case 1:
        return this.slice_from$esjava$1(...a);
    }
    return super.slice_from(...a);
  }
  slice_del(...a) {
    switch (a.length) {
      case 0:
        return this.slice_del$esjava$0(...a);
    }
    return super.slice_del(...a);
  }
  insert(...a) {
    switch (a.length) {
      case 3:
        return this.insert$esjava$3(...a);
    }
    return super.insert(...a);
  }
  slice_to(...a) {
    switch (a.length) {
      case 1:
        return this.slice_to$esjava$1(...a);
    }
    return super.slice_to(...a);
  }
}
class unt extends dnt {
  stem$esjava$0() {
    throw "NotImpl < stem$esjava$0 >";
  }
  stem(...a) {
    switch (a.length) {
      case 0:
        return this.stem$esjava$0(...a);
    }
    return super.stem(...a);
  }
}
class k extends unt {
  constructor(a) {
    super(), k.morphologyData = a.externalStemmer;
  }
  static get methodObject() {
    return delete k.methodObject, k.methodObject = null;
  }
  static get a_0() {
    return delete k.a_0, k.a_0 = [
      new ne(k.morphologyData.a_0.SuffixM, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_0.SuffixN, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_0.SuffixMiz, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_0.SuffixNiz, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_0.SuffixMuz, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_0.SuffixNuz, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_0.SuffixMuzDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_0.SuffixNuzDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_0.SuffixMizUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_0.SuffixNizUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_1() {
    return delete k.a_1, k.a_1 = [
      new ne(k.morphologyData.a_1.SuffixLeri, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_1.SuffixLariUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_2() {
    return delete k.a_2, k.a_2 = [
      new ne(k.morphologyData.a_2.SuffixNi, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_2.SuffixNu, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_2.SuffixNuDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_2.SuffixNiUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_3() {
    return delete k.a_3, k.a_3 = [
      new ne(k.morphologyData.a_3.SuffixInDotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_3.SuffixUn, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_3.SuffixUnDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_3.SuffixInUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_4() {
    return delete k.a_4, k.a_4 = [
      new ne(k.morphologyData.a_4.SuffixA, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_4.SuffixE, -1, -1, "", k.methodObject)
    ];
  }
  static get a_5() {
    return delete k.a_5, k.a_5 = [
      new ne(k.morphologyData.a_5.SuffixNa, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_5.SuffixNe, -1, -1, "", k.methodObject)
    ];
  }
  static get a_6() {
    return delete k.a_6, k.a_6 = [
      new ne(k.morphologyData.a_6.SuffixDa, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_6.SuffixTa, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_6.SuffixDe, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_6.SuffixTe, -1, -1, "", k.methodObject)
    ];
  }
  static get a_7() {
    return delete k.a_7, k.a_7 = [
      new ne(k.morphologyData.a_7.SuffixNda, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_7.SuffixNde, -1, -1, "", k.methodObject)
    ];
  }
  static get a_8() {
    return delete k.a_8, k.a_8 = [
      new ne(k.morphologyData.a_8.SuffixDan, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_8.SuffixTan, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_8.SuffixDen, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_8.SuffixTen, -1, -1, "", k.methodObject)
    ];
  }
  static get a_9() {
    return delete k.a_9, k.a_9 = [
      new ne(k.morphologyData.a_9.SuffixNdan, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_9.SuffixNden, -1, -1, "", k.methodObject)
    ];
  }
  static get a_10() {
    return delete k.a_10, k.a_10 = [
      new ne(k.morphologyData.a_10.SuffixLa, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_10.SuffixLe, -1, -1, "", k.methodObject)
    ];
  }
  static get a_11() {
    return delete k.a_11, k.a_11 = [
      new ne(k.morphologyData.a_11.SuffixCa, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_11.SuffixCe, -1, -1, "", k.methodObject)
    ];
  }
  static get a_12() {
    return delete k.a_12, k.a_12 = [
      new ne(k.morphologyData.a_12.SuffixImDotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_12.SuffixUm, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_12.SuffixUmDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_12.SuffixImUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_13() {
    return delete k.a_13, k.a_13 = [
      new ne(k.morphologyData.a_13.SuffixSin, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_13.SuffixSun, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_13.SuffixSunDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_13.SuffixSinUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_14() {
    return delete k.a_14, k.a_14 = [
      new ne(k.morphologyData.a_14.SuffixIzDotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_14.SuffixUz, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_14.SuffixUzDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_14.SuffixIzUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_15() {
    return delete k.a_15, k.a_15 = [
      new ne(k.morphologyData.a_15.SuffixSiniz, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_15.SuffixSunuz, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_15.SuffixSunuzDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_15.SuffixSinizUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_16() {
    return delete k.a_16, k.a_16 = [
      new ne(k.morphologyData.a_16.SuffixLar, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_16.SuffixLer, -1, -1, "", k.methodObject)
    ];
  }
  static get a_17() {
    return delete k.a_17, k.a_17 = [
      new ne(k.morphologyData.a_17.SuffixNiz, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_17.SuffixNuz, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_17.SuffixNuzDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_17.SuffixNizUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_18() {
    return delete k.a_18, k.a_18 = [
      new ne(k.morphologyData.a_18.SuffixDir, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_18.SuffixTir, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_18.SuffixDur, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_18.SuffixTur, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_18.SuffixDurDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_18.SuffixTurDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_18.SuffixDirUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_18.SuffixTirUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_19() {
    return delete k.a_19, k.a_19 = [
      new ne(k.morphologyData.a_19.SuffixCasinaUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_19.SuffixCesine, -1, -1, "", k.methodObject)
    ];
  }
  static get a_20() {
    return delete k.a_20, k.a_20 = [
      new ne(k.morphologyData.a_20.SuffixDi, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTi, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDik, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTik, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDuk, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTuk, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDukDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTukDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDikUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTikUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDim, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTim, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDum, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTum, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDumDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTumDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDimUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTimUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDin, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTin, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDun, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTun, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDunDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTunDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDinUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTinUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDu, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTu, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDuDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTuDieresis, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixDiUndotted, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_20.SuffixTiUndotted, -1, -1, "", k.methodObject)
    ];
  }
  static get a_21() {
    return delete k.a_21, k.a_21 = [
      new ne(k.morphologyData.a_21.SuffixSa, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_21.SuffixSe, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_21.SuffixSak, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_21.SuffixSek, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_21.SuffixSam, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_21.SuffixSem, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_21.SuffixSan, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_21.SuffixSen, -1, -1, "", k.methodObject)
    ];
  }
  static get a_22() {
    return delete k.a_22, k.a_22 = [
      new ne(k.morphologyData.a_22.SuffixMisCedilla, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_22.SuffixMusCedilla, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_22.SuffixMusDieresisCedilla, -1, -1, "", k.methodObject),
      new ne(k.morphologyData.a_22.SuffixMisUndottedCedilla, -1, -1, "", k.methodObject)
    ];
  }
  static get a_23() {
    return delete k.a_23, k.a_23 = [
      new ne(k.morphologyData.a_23.SuffixB, -1, 1, "", k.methodObject),
      new ne(k.morphologyData.a_23.SuffixC, -1, 2, "", k.methodObject),
      new ne(k.morphologyData.a_23.SuffixD, -1, 3, "", k.methodObject),
      new ne(k.morphologyData.a_23.SuffixGSoft, -1, 4, "", k.methodObject)
    ];
  }
  static get g_vowel() {
    return delete k.g_vowel, k.g_vowel = [
      17,
      65,
      16,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      32,
      8,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ];
  }
  static get g_U() {
    return delete k.g_U, k.g_U = [
      1,
      16,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      8,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ];
  }
  static get g_vowel1() {
    return delete k.g_vowel1, k.g_vowel1 = [
      1,
      64,
      16,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ];
  }
  static get g_vowel2() {
    return delete k.g_vowel2, k.g_vowel2 = [
      17,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      130
    ];
  }
  static get g_vowel3() {
    return delete k.g_vowel3, k.g_vowel3 = [
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1
    ];
  }
  static get g_vowel4() {
    return delete k.g_vowel4, k.g_vowel4 = [17];
  }
  static get g_vowel5() {
    return delete k.g_vowel5, k.g_vowel5 = [65];
  }
  static get g_vowel6() {
    return delete k.g_vowel6, k.g_vowel6 = [65];
  }
  get B_continue_stemming_noun_suffixes() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$B_continue_stemming_noun_suffixes") ? this._$esjava$B_continue_stemming_noun_suffixes : this._$esjava$B_continue_stemming_noun_suffixes = !1;
  }
  set B_continue_stemming_noun_suffixes(a) {
    this._$esjava$B_continue_stemming_noun_suffixes = a;
  }
  get I_strlen() {
    return Object.prototype.hasOwnProperty.call(this, "_$esjava$I_strlen") ? this._$esjava$I_strlen : this._$esjava$I_strlen = 0;
  }
  set I_strlen(a) {
    this._$esjava$I_strlen = a;
  }
  r_check_vowel_harmony$esjava$0() {
    let a, t, n, r, o, l, u, c, f, y, z;
    a = this.limit - this.cursor;
    n:
      for (; ; ) {
        t = this.limit - this.cursor;
        e:
          do {
            if (!this.in_grouping_b$esjava$3(k.g_vowel, 97, 305))
              break e;
            this.cursor = this.limit - t;
            break n;
          } while (!1);
        if (this.cursor = this.limit - t, this.cursor <= this.limit_backward)
          return !1;
        this.cursor--;
      }
    n:
      do {
        n = this.limit - this.cursor;
        e:
          do {
            if (!this.eq_s_b$esjava$2(1, "a"))
              break e;
            a:
              for (; ; ) {
                r = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel1, 97, 305))
                      break t;
                    this.cursor = this.limit - r;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - r, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            break n;
          } while (!1);
        this.cursor = this.limit - n;
        e:
          do {
            if (!this.eq_s_b$esjava$2(1, "e"))
              break e;
            a:
              for (; ; ) {
                o = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel2, 101, 252))
                      break t;
                    this.cursor = this.limit - o;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - o, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            break n;
          } while (!1);
        this.cursor = this.limit - n;
        e:
          do {
            if (!this.eq_s_b$esjava$2(1, "ı"))
              break e;
            a:
              for (; ; ) {
                l = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel3, 97, 305))
                      break t;
                    this.cursor = this.limit - l;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - l, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            break n;
          } while (!1);
        this.cursor = this.limit - n;
        e:
          do {
            if (!this.eq_s_b$esjava$2(1, "i"))
              break e;
            a:
              for (; ; ) {
                u = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel4, 101, 105))
                      break t;
                    this.cursor = this.limit - u;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - u, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            break n;
          } while (!1);
        this.cursor = this.limit - n;
        e:
          do {
            if (!this.eq_s_b$esjava$2(1, "o"))
              break e;
            a:
              for (; ; ) {
                c = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel5, 111, 117))
                      break t;
                    this.cursor = this.limit - c;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - c, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            break n;
          } while (!1);
        this.cursor = this.limit - n;
        e:
          do {
            if (!this.eq_s_b$esjava$2(1, "ö"))
              break e;
            a:
              for (; ; ) {
                f = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel6, 246, 252))
                      break t;
                    this.cursor = this.limit - f;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - f, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            break n;
          } while (!1);
        this.cursor = this.limit - n;
        e:
          do {
            if (!this.eq_s_b$esjava$2(1, "u"))
              break e;
            a:
              for (; ; ) {
                y = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel5, 111, 117))
                      break t;
                    this.cursor = this.limit - y;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - y, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            break n;
          } while (!1);
        if (this.cursor = this.limit - n, !this.eq_s_b$esjava$2(1, "ü"))
          return !1;
        e:
          for (; ; ) {
            z = this.limit - this.cursor;
            a:
              do {
                if (!this.in_grouping_b$esjava$3(k.g_vowel6, 246, 252))
                  break a;
                this.cursor = this.limit - z;
                break e;
              } while (!1);
            if (this.cursor = this.limit - z, this.cursor <= this.limit_backward)
              return !1;
            this.cursor--;
          }
      } while (!1);
    return this.cursor = this.limit - a, !0;
  }
  r_mark_suffix_with_optional_n_consonant$esjava$0() {
    let a, t, n, r, o, l, u;
    n:
      do {
        a = this.limit - this.cursor;
        e:
          do {
            if (t = this.limit - this.cursor, !this.eq_s_b$esjava$2(1, "n") || (this.cursor = this.limit - t, this.cursor <= this.limit_backward) || (this.cursor--, n = this.limit - this.cursor, !this.in_grouping_b$esjava$3(k.g_vowel, 97, 305)))
              break e;
            this.cursor = this.limit - n;
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        {
          r = this.limit - this.cursor;
          e:
            do {
              if (o = this.limit - this.cursor, !this.eq_s_b$esjava$2(1, "n"))
                break e;
              return this.cursor = this.limit - o, !1;
            } while (!1);
          this.cursor = this.limit - r;
        }
        if (l = this.limit - this.cursor, this.cursor <= this.limit_backward || (this.cursor--, u = this.limit - this.cursor, !this.in_grouping_b$esjava$3(k.g_vowel, 97, 305)))
          return !1;
        this.cursor = this.limit - u, this.cursor = this.limit - l;
      } while (!1);
    return !0;
  }
  r_mark_suffix_with_optional_s_consonant$esjava$0() {
    let a, t, n, r, o, l, u;
    n:
      do {
        a = this.limit - this.cursor;
        e:
          do {
            if (t = this.limit - this.cursor, !this.eq_s_b$esjava$2(1, "s") || (this.cursor = this.limit - t, this.cursor <= this.limit_backward) || (this.cursor--, n = this.limit - this.cursor, !this.in_grouping_b$esjava$3(k.g_vowel, 97, 305)))
              break e;
            this.cursor = this.limit - n;
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        {
          r = this.limit - this.cursor;
          e:
            do {
              if (o = this.limit - this.cursor, !this.eq_s_b$esjava$2(1, "s"))
                break e;
              return this.cursor = this.limit - o, !1;
            } while (!1);
          this.cursor = this.limit - r;
        }
        if (l = this.limit - this.cursor, this.cursor <= this.limit_backward || (this.cursor--, u = this.limit - this.cursor, !this.in_grouping_b$esjava$3(k.g_vowel, 97, 305)))
          return !1;
        this.cursor = this.limit - u, this.cursor = this.limit - l;
      } while (!1);
    return !0;
  }
  r_mark_suffix_with_optional_y_consonant$esjava$0() {
    let a, t, n, r, o, l, u;
    n:
      do {
        a = this.limit - this.cursor;
        e:
          do {
            if (t = this.limit - this.cursor, !this.eq_s_b$esjava$2(1, "y") || (this.cursor = this.limit - t, this.cursor <= this.limit_backward) || (this.cursor--, n = this.limit - this.cursor, !this.in_grouping_b$esjava$3(k.g_vowel, 97, 305)))
              break e;
            this.cursor = this.limit - n;
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        {
          r = this.limit - this.cursor;
          e:
            do {
              if (o = this.limit - this.cursor, !this.eq_s_b$esjava$2(1, "y"))
                break e;
              return this.cursor = this.limit - o, !1;
            } while (!1);
          this.cursor = this.limit - r;
        }
        if (l = this.limit - this.cursor, this.cursor <= this.limit_backward || (this.cursor--, u = this.limit - this.cursor, !this.in_grouping_b$esjava$3(k.g_vowel, 97, 305)))
          return !1;
        this.cursor = this.limit - u, this.cursor = this.limit - l;
      } while (!1);
    return !0;
  }
  r_mark_suffix_with_optional_U_vowel$esjava$0() {
    let a, t, n, r, o, l, u;
    n:
      do {
        a = this.limit - this.cursor;
        e:
          do {
            if (t = this.limit - this.cursor, !this.in_grouping_b$esjava$3(k.g_U, 105, 305) || (this.cursor = this.limit - t, this.cursor <= this.limit_backward) || (this.cursor--, n = this.limit - this.cursor, !this.out_grouping_b$esjava$3(k.g_vowel, 97, 305)))
              break e;
            this.cursor = this.limit - n;
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        {
          r = this.limit - this.cursor;
          e:
            do {
              if (o = this.limit - this.cursor, !this.in_grouping_b$esjava$3(k.g_U, 105, 305))
                break e;
              return this.cursor = this.limit - o, !1;
            } while (!1);
          this.cursor = this.limit - r;
        }
        if (l = this.limit - this.cursor, this.cursor <= this.limit_backward || (this.cursor--, u = this.limit - this.cursor, !this.out_grouping_b$esjava$3(k.g_vowel, 97, 305)))
          return !1;
        this.cursor = this.limit - u, this.cursor = this.limit - l;
      } while (!1);
    return !0;
  }
  r_mark_possessives$esjava$0() {
    return !(this.find_among_b$esjava$2(k.a_0, 10) === 0 || !this.r_mark_suffix_with_optional_U_vowel$esjava$0());
  }
  r_mark_sU$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || !this.in_grouping_b$esjava$3(k.g_U, 105, 305) || !this.r_mark_suffix_with_optional_s_consonant$esjava$0());
  }
  r_mark_lArI$esjava$0() {
    return this.find_among_b$esjava$2(k.a_1, 2) !== 0;
  }
  r_mark_yU$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || !this.in_grouping_b$esjava$3(k.g_U, 105, 305) || !this.r_mark_suffix_with_optional_y_consonant$esjava$0());
  }
  r_mark_nU$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_2, 4) === 0);
  }
  r_mark_nUn$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_3, 4) === 0 || !this.r_mark_suffix_with_optional_n_consonant$esjava$0());
  }
  r_mark_yA$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_4, 2) === 0 || !this.r_mark_suffix_with_optional_y_consonant$esjava$0());
  }
  r_mark_nA$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_5, 2) === 0);
  }
  r_mark_DA$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_6, 4) === 0);
  }
  r_mark_ndA$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_7, 2) === 0);
  }
  r_mark_DAn$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_8, 4) === 0);
  }
  r_mark_ndAn$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_9, 2) === 0);
  }
  r_mark_ylA$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_10, 2) === 0 || !this.r_mark_suffix_with_optional_y_consonant$esjava$0());
  }
  r_mark_ki$esjava$0() {
    return !!this.eq_s_b$esjava$2(2, "ki");
  }
  r_mark_ncA$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_11, 2) === 0 || !this.r_mark_suffix_with_optional_n_consonant$esjava$0());
  }
  r_mark_yUm$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_12, 4) === 0 || !this.r_mark_suffix_with_optional_y_consonant$esjava$0());
  }
  r_mark_sUn$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_13, 4) === 0);
  }
  r_mark_yUz$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_14, 4) === 0 || !this.r_mark_suffix_with_optional_y_consonant$esjava$0());
  }
  r_mark_sUnUz$esjava$0() {
    return this.find_among_b$esjava$2(k.a_15, 4) !== 0;
  }
  r_mark_lAr$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_16, 2) === 0);
  }
  r_mark_nUz$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_17, 4) === 0);
  }
  r_mark_DUr$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_18, 8) === 0);
  }
  r_mark_cAsInA$esjava$0() {
    return this.find_among_b$esjava$2(k.a_19, 2) !== 0;
  }
  r_mark_yDU$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_20, 32) === 0 || !this.r_mark_suffix_with_optional_y_consonant$esjava$0());
  }
  r_mark_ysA$esjava$0() {
    return !(this.find_among_b$esjava$2(k.a_21, 8) === 0 || !this.r_mark_suffix_with_optional_y_consonant$esjava$0());
  }
  r_mark_ymUs_$esjava$0() {
    return !(!this.r_check_vowel_harmony$esjava$0() || this.find_among_b$esjava$2(k.a_22, 4) === 0 || !this.r_mark_suffix_with_optional_y_consonant$esjava$0());
  }
  r_mark_yken$esjava$0() {
    return !(!this.eq_s_b$esjava$2(3, "ken") || !this.r_mark_suffix_with_optional_y_consonant$esjava$0());
  }
  r_stem_nominal_verb_suffixes$esjava$0() {
    let a, t, n, r, o, l, u, c, f, y;
    this.ket = this.cursor, this.B_continue_stemming_noun_suffixes = !0;
    n:
      do {
        a = this.limit - this.cursor;
        e:
          do {
            a:
              do {
                t = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_ymUs_$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - t;
                t:
                  do {
                    if (!this.r_mark_yDU$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - t;
                t:
                  do {
                    if (!this.r_mark_ysA$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - t, !this.r_mark_yken$esjava$0())
                  break e;
              } while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            if (!this.r_mark_cAsInA$esjava$0())
              break e;
            a:
              do {
                n = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_sUnUz$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - n;
                t:
                  do {
                    if (!this.r_mark_lAr$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - n;
                t:
                  do {
                    if (!this.r_mark_yUm$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - n;
                t:
                  do {
                    if (!this.r_mark_sUn$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - n;
                t:
                  do {
                    if (!this.r_mark_yUz$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - n;
              } while (!1);
            if (!this.r_mark_ymUs_$esjava$0())
              break e;
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            if (!this.r_mark_lAr$esjava$0())
              break e;
            this.bra = this.cursor, this.slice_del$esjava$0(), r = this.limit - this.cursor;
            a:
              do {
                this.ket = this.cursor;
                t:
                  do {
                    o = this.limit - this.cursor;
                    r:
                      do {
                        if (!this.r_mark_DUr$esjava$0())
                          break r;
                        break t;
                      } while (!1);
                    this.cursor = this.limit - o;
                    r:
                      do {
                        if (!this.r_mark_yDU$esjava$0())
                          break r;
                        break t;
                      } while (!1);
                    this.cursor = this.limit - o;
                    r:
                      do {
                        if (!this.r_mark_ysA$esjava$0())
                          break r;
                        break t;
                      } while (!1);
                    if (this.cursor = this.limit - o, !this.r_mark_ymUs_$esjava$0()) {
                      this.cursor = this.limit - r;
                      break a;
                    }
                  } while (!1);
              } while (!1);
            this.B_continue_stemming_noun_suffixes = !1;
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            if (!this.r_mark_nUz$esjava$0())
              break e;
            a:
              do {
                l = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_yDU$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - l, !this.r_mark_ysA$esjava$0())
                  break e;
              } while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            a:
              do {
                u = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_sUnUz$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - u;
                t:
                  do {
                    if (!this.r_mark_yUz$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - u;
                t:
                  do {
                    if (!this.r_mark_sUn$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - u, !this.r_mark_yUm$esjava$0())
                  break e;
              } while (!1);
            this.bra = this.cursor, this.slice_del$esjava$0(), c = this.limit - this.cursor;
            a:
              do
                if (this.ket = this.cursor, !this.r_mark_ymUs_$esjava$0()) {
                  this.cursor = this.limit - c;
                  break a;
                }
              while (!1);
            break n;
          } while (!1);
        if (this.cursor = this.limit - a, !this.r_mark_DUr$esjava$0())
          return !1;
        this.bra = this.cursor, this.slice_del$esjava$0(), f = this.limit - this.cursor;
        e:
          do {
            this.ket = this.cursor;
            a:
              do {
                y = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_sUnUz$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - y;
                t:
                  do {
                    if (!this.r_mark_lAr$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - y;
                t:
                  do {
                    if (!this.r_mark_yUm$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - y;
                t:
                  do {
                    if (!this.r_mark_sUn$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - y;
                t:
                  do {
                    if (!this.r_mark_yUz$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - y;
              } while (!1);
            if (!this.r_mark_ymUs_$esjava$0()) {
              this.cursor = this.limit - f;
              break e;
            }
          } while (!1);
      } while (!1);
    return this.bra = this.cursor, this.slice_del$esjava$0(), !0;
  }
  r_stem_suffix_chain_before_ki$esjava$0() {
    let a, t, n, r, o, l, u, c, f, y, z;
    if (this.ket = this.cursor, !this.r_mark_ki$esjava$0())
      return !1;
    n:
      do {
        a = this.limit - this.cursor;
        e:
          do {
            if (!this.r_mark_DA$esjava$0())
              break e;
            this.bra = this.cursor, this.slice_del$esjava$0(), t = this.limit - this.cursor;
            a:
              do {
                this.ket = this.cursor;
                t:
                  do {
                    n = this.limit - this.cursor;
                    r:
                      do {
                        if (!this.r_mark_lAr$esjava$0())
                          break r;
                        this.bra = this.cursor, this.slice_del$esjava$0(), r = this.limit - this.cursor;
                        s:
                          do
                            if (!this.r_stem_suffix_chain_before_ki$esjava$0()) {
                              this.cursor = this.limit - r;
                              break s;
                            }
                          while (!1);
                        break t;
                      } while (!1);
                    if (this.cursor = this.limit - n, !this.r_mark_possessives$esjava$0()) {
                      this.cursor = this.limit - t;
                      break a;
                    }
                    this.bra = this.cursor, this.slice_del$esjava$0(), o = this.limit - this.cursor;
                    r:
                      do {
                        if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                          this.cursor = this.limit - o;
                          break r;
                        }
                        if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                          this.cursor = this.limit - o;
                          break r;
                        }
                      } while (!1);
                  } while (!1);
              } while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            if (!this.r_mark_nUn$esjava$0())
              break e;
            this.bra = this.cursor, this.slice_del$esjava$0(), l = this.limit - this.cursor;
            a:
              do {
                this.ket = this.cursor;
                t:
                  do {
                    u = this.limit - this.cursor;
                    r:
                      do {
                        if (!this.r_mark_lArI$esjava$0())
                          break r;
                        this.bra = this.cursor, this.slice_del$esjava$0();
                        break t;
                      } while (!1);
                    this.cursor = this.limit - u;
                    r:
                      do {
                        this.ket = this.cursor;
                        s:
                          do {
                            c = this.limit - this.cursor;
                            i:
                              do {
                                if (!this.r_mark_possessives$esjava$0())
                                  break i;
                                break s;
                              } while (!1);
                            if (this.cursor = this.limit - c, !this.r_mark_sU$esjava$0())
                              break r;
                          } while (!1);
                        this.bra = this.cursor, this.slice_del$esjava$0(), f = this.limit - this.cursor;
                        s:
                          do {
                            if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                              this.cursor = this.limit - f;
                              break s;
                            }
                            if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                              this.cursor = this.limit - f;
                              break s;
                            }
                          } while (!1);
                        break t;
                      } while (!1);
                    if (this.cursor = this.limit - u, !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                      this.cursor = this.limit - l;
                      break a;
                    }
                  } while (!1);
              } while (!1);
            break n;
          } while (!1);
        if (this.cursor = this.limit - a, !this.r_mark_ndA$esjava$0())
          return !1;
        e:
          do {
            y = this.limit - this.cursor;
            a:
              do {
                if (!this.r_mark_lArI$esjava$0())
                  break a;
                this.bra = this.cursor, this.slice_del$esjava$0();
                break e;
              } while (!1);
            this.cursor = this.limit - y;
            a:
              do {
                if (!this.r_mark_sU$esjava$0())
                  break a;
                this.bra = this.cursor, this.slice_del$esjava$0(), z = this.limit - this.cursor;
                t:
                  do {
                    if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                      this.cursor = this.limit - z;
                      break t;
                    }
                    if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                      this.cursor = this.limit - z;
                      break t;
                    }
                  } while (!1);
                break e;
              } while (!1);
            if (this.cursor = this.limit - y, !this.r_stem_suffix_chain_before_ki$esjava$0())
              return !1;
          } while (!1);
      } while (!1);
    return !0;
  }
  r_stem_noun_suffixes$esjava$0() {
    let a, t, n, r, o, l, u, c, f, y, z, v, O, I, A, x, w, j, S, P, M, G, U, V, F, Y, X;
    n:
      do {
        a = this.limit - this.cursor;
        e:
          do {
            if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0())
              break e;
            this.bra = this.cursor, this.slice_del$esjava$0(), t = this.limit - this.cursor;
            a:
              do
                if (!this.r_stem_suffix_chain_before_ki$esjava$0()) {
                  this.cursor = this.limit - t;
                  break a;
                }
              while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            if (this.ket = this.cursor, !this.r_mark_ncA$esjava$0())
              break e;
            this.bra = this.cursor, this.slice_del$esjava$0(), n = this.limit - this.cursor;
            a:
              do
                t:
                  do {
                    r = this.limit - this.cursor;
                    r:
                      do {
                        if (this.ket = this.cursor, !this.r_mark_lArI$esjava$0())
                          break r;
                        this.bra = this.cursor, this.slice_del$esjava$0();
                        break t;
                      } while (!1);
                    this.cursor = this.limit - r;
                    r:
                      do {
                        this.ket = this.cursor;
                        s:
                          do {
                            o = this.limit - this.cursor;
                            i:
                              do {
                                if (!this.r_mark_possessives$esjava$0())
                                  break i;
                                break s;
                              } while (!1);
                            if (this.cursor = this.limit - o, !this.r_mark_sU$esjava$0())
                              break r;
                          } while (!1);
                        this.bra = this.cursor, this.slice_del$esjava$0(), l = this.limit - this.cursor;
                        s:
                          do {
                            if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                              this.cursor = this.limit - l;
                              break s;
                            }
                            if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                              this.cursor = this.limit - l;
                              break s;
                            }
                          } while (!1);
                        break t;
                      } while (!1);
                    if (this.cursor = this.limit - r, this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                      this.cursor = this.limit - n;
                      break a;
                    }
                    if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                      this.cursor = this.limit - n;
                      break a;
                    }
                  } while (!1);
              while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            this.ket = this.cursor;
            a:
              do {
                u = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_ndA$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - u, !this.r_mark_nA$esjava$0())
                  break e;
              } while (!1);
            a:
              do {
                c = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_lArI$esjava$0())
                      break t;
                    this.bra = this.cursor, this.slice_del$esjava$0();
                    break a;
                  } while (!1);
                this.cursor = this.limit - c;
                t:
                  do {
                    if (!this.r_mark_sU$esjava$0())
                      break t;
                    this.bra = this.cursor, this.slice_del$esjava$0(), f = this.limit - this.cursor;
                    r:
                      do {
                        if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                          this.cursor = this.limit - f;
                          break r;
                        }
                        if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                          this.cursor = this.limit - f;
                          break r;
                        }
                      } while (!1);
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - c, !this.r_stem_suffix_chain_before_ki$esjava$0())
                  break e;
              } while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            this.ket = this.cursor;
            a:
              do {
                y = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_ndAn$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - y, !this.r_mark_nU$esjava$0())
                  break e;
              } while (!1);
            a:
              do {
                z = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_sU$esjava$0())
                      break t;
                    this.bra = this.cursor, this.slice_del$esjava$0(), v = this.limit - this.cursor;
                    r:
                      do {
                        if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                          this.cursor = this.limit - v;
                          break r;
                        }
                        if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                          this.cursor = this.limit - v;
                          break r;
                        }
                      } while (!1);
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - z, !this.r_mark_lArI$esjava$0())
                  break e;
              } while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            if (this.ket = this.cursor, !this.r_mark_DAn$esjava$0())
              break e;
            this.bra = this.cursor, this.slice_del$esjava$0(), O = this.limit - this.cursor;
            a:
              do {
                this.ket = this.cursor;
                t:
                  do {
                    I = this.limit - this.cursor;
                    r:
                      do {
                        if (!this.r_mark_possessives$esjava$0())
                          break r;
                        this.bra = this.cursor, this.slice_del$esjava$0(), A = this.limit - this.cursor;
                        s:
                          do {
                            if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                              this.cursor = this.limit - A;
                              break s;
                            }
                            if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                              this.cursor = this.limit - A;
                              break s;
                            }
                          } while (!1);
                        break t;
                      } while (!1);
                    this.cursor = this.limit - I;
                    r:
                      do {
                        if (!this.r_mark_lAr$esjava$0())
                          break r;
                        this.bra = this.cursor, this.slice_del$esjava$0(), x = this.limit - this.cursor;
                        s:
                          do
                            if (!this.r_stem_suffix_chain_before_ki$esjava$0()) {
                              this.cursor = this.limit - x;
                              break s;
                            }
                          while (!1);
                        break t;
                      } while (!1);
                    if (this.cursor = this.limit - I, !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                      this.cursor = this.limit - O;
                      break a;
                    }
                  } while (!1);
              } while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            this.ket = this.cursor;
            a:
              do {
                w = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_nUn$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - w, !this.r_mark_ylA$esjava$0())
                  break e;
              } while (!1);
            this.bra = this.cursor, this.slice_del$esjava$0(), j = this.limit - this.cursor;
            a:
              do
                t:
                  do {
                    S = this.limit - this.cursor;
                    r:
                      do {
                        if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0() || (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()))
                          break r;
                        break t;
                      } while (!1);
                    this.cursor = this.limit - S;
                    r:
                      do {
                        this.ket = this.cursor;
                        s:
                          do {
                            P = this.limit - this.cursor;
                            i:
                              do {
                                if (!this.r_mark_possessives$esjava$0())
                                  break i;
                                break s;
                              } while (!1);
                            if (this.cursor = this.limit - P, !this.r_mark_sU$esjava$0())
                              break r;
                          } while (!1);
                        this.bra = this.cursor, this.slice_del$esjava$0(), M = this.limit - this.cursor;
                        s:
                          do {
                            if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                              this.cursor = this.limit - M;
                              break s;
                            }
                            if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                              this.cursor = this.limit - M;
                              break s;
                            }
                          } while (!1);
                        break t;
                      } while (!1);
                    if (this.cursor = this.limit - S, !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                      this.cursor = this.limit - j;
                      break a;
                    }
                  } while (!1);
              while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            if (this.ket = this.cursor, !this.r_mark_lArI$esjava$0())
              break e;
            this.bra = this.cursor, this.slice_del$esjava$0();
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            if (!this.r_stem_suffix_chain_before_ki$esjava$0())
              break e;
            break n;
          } while (!1);
        this.cursor = this.limit - a;
        e:
          do {
            this.ket = this.cursor;
            a:
              do {
                G = this.limit - this.cursor;
                t:
                  do {
                    if (!this.r_mark_DA$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                this.cursor = this.limit - G;
                t:
                  do {
                    if (!this.r_mark_yU$esjava$0())
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - G, !this.r_mark_yA$esjava$0())
                  break e;
              } while (!1);
            this.bra = this.cursor, this.slice_del$esjava$0(), U = this.limit - this.cursor;
            a:
              do {
                this.ket = this.cursor;
                t:
                  do {
                    V = this.limit - this.cursor;
                    r:
                      do {
                        if (!this.r_mark_possessives$esjava$0())
                          break r;
                        this.bra = this.cursor, this.slice_del$esjava$0(), F = this.limit - this.cursor;
                        s:
                          do
                            if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
                              this.cursor = this.limit - F;
                              break s;
                            }
                          while (!1);
                        break t;
                      } while (!1);
                    if (this.cursor = this.limit - V, !this.r_mark_lAr$esjava$0()) {
                      this.cursor = this.limit - U;
                      break a;
                    }
                  } while (!1);
                if (this.bra = this.cursor, this.slice_del$esjava$0(), this.ket = this.cursor, !this.r_stem_suffix_chain_before_ki$esjava$0()) {
                  this.cursor = this.limit - U;
                  break a;
                }
              } while (!1);
            break n;
          } while (!1);
        this.cursor = this.limit - a, this.ket = this.cursor;
        e:
          do {
            Y = this.limit - this.cursor;
            a:
              do {
                if (!this.r_mark_possessives$esjava$0())
                  break a;
                break e;
              } while (!1);
            if (this.cursor = this.limit - Y, !this.r_mark_sU$esjava$0())
              return !1;
          } while (!1);
        this.bra = this.cursor, this.slice_del$esjava$0(), X = this.limit - this.cursor;
        e:
          do {
            if (this.ket = this.cursor, !this.r_mark_lAr$esjava$0()) {
              this.cursor = this.limit - X;
              break e;
            }
            if (this.bra = this.cursor, this.slice_del$esjava$0(), !this.r_stem_suffix_chain_before_ki$esjava$0()) {
              this.cursor = this.limit - X;
              break e;
            }
          } while (!1);
      } while (!1);
    return !0;
  }
  r_post_process_last_consonants$esjava$0() {
    let a;
    if (this.ket = this.cursor, a = this.find_among_b$esjava$2(k.a_23, 4), a === 0)
      return !1;
    switch (this.bra = this.cursor, a) {
      case 0:
        return !1;
      case 1:
        this.slice_from$esjava$1("p");
        break;
      case 2:
        this.slice_from$esjava$1("ç");
        break;
      case 3:
        this.slice_from$esjava$1("t");
        break;
      case 4:
        this.slice_from$esjava$1("k");
        break;
    }
    return !0;
  }
  r_append_U_to_stems_ending_with_d_or_g$esjava$0() {
    let a, t, n, r, o, l, u, c, f, y, z, v, O, I, A;
    a = this.limit - this.cursor;
    n:
      do {
        t = this.limit - this.cursor;
        e:
          do {
            if (!this.eq_s_b$esjava$2(1, "d"))
              break e;
            break n;
          } while (!1);
        if (this.cursor = this.limit - t, !this.eq_s_b$esjava$2(1, "g"))
          return !1;
      } while (!1);
    this.cursor = this.limit - a;
    n:
      do {
        n = this.limit - this.cursor;
        e:
          do {
            r = this.limit - this.cursor;
            a:
              for (; ; ) {
                o = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel, 97, 305))
                      break t;
                    this.cursor = this.limit - o;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - o, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            a:
              do {
                l = this.limit - this.cursor;
                t:
                  do {
                    if (!this.eq_s_b$esjava$2(1, "a"))
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - l, !this.eq_s_b$esjava$2(1, "ı"))
                  break e;
              } while (!1);
            this.cursor = this.limit - r;
            {
              const x = this.cursor;
              this.insert$esjava$3(this.cursor, this.cursor, "ı"), this.cursor = x;
            }
            break n;
          } while (!1);
        this.cursor = this.limit - n;
        e:
          do {
            u = this.limit - this.cursor;
            a:
              for (; ; ) {
                c = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel, 97, 305))
                      break t;
                    this.cursor = this.limit - c;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - c, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            a:
              do {
                f = this.limit - this.cursor;
                t:
                  do {
                    if (!this.eq_s_b$esjava$2(1, "e"))
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - f, !this.eq_s_b$esjava$2(1, "i"))
                  break e;
              } while (!1);
            this.cursor = this.limit - u;
            {
              const x = this.cursor;
              this.insert$esjava$3(this.cursor, this.cursor, "i"), this.cursor = x;
            }
            break n;
          } while (!1);
        this.cursor = this.limit - n;
        e:
          do {
            y = this.limit - this.cursor;
            a:
              for (; ; ) {
                z = this.limit - this.cursor;
                t:
                  do {
                    if (!this.in_grouping_b$esjava$3(k.g_vowel, 97, 305))
                      break t;
                    this.cursor = this.limit - z;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - z, this.cursor <= this.limit_backward)
                  break e;
                this.cursor--;
              }
            a:
              do {
                v = this.limit - this.cursor;
                t:
                  do {
                    if (!this.eq_s_b$esjava$2(1, "o"))
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor = this.limit - v, !this.eq_s_b$esjava$2(1, "u"))
                  break e;
              } while (!1);
            this.cursor = this.limit - y;
            {
              const x = this.cursor;
              this.insert$esjava$3(this.cursor, this.cursor, "u"), this.cursor = x;
            }
            break n;
          } while (!1);
        this.cursor = this.limit - n, O = this.limit - this.cursor;
        e:
          for (; ; ) {
            I = this.limit - this.cursor;
            a:
              do {
                if (!this.in_grouping_b$esjava$3(k.g_vowel, 97, 305))
                  break a;
                this.cursor = this.limit - I;
                break e;
              } while (!1);
            if (this.cursor = this.limit - I, this.cursor <= this.limit_backward)
              return !1;
            this.cursor--;
          }
        e:
          do {
            A = this.limit - this.cursor;
            a:
              do {
                if (!this.eq_s_b$esjava$2(1, "ö"))
                  break a;
                break e;
              } while (!1);
            if (this.cursor = this.limit - A, !this.eq_s_b$esjava$2(1, "ü"))
              return !1;
          } while (!1);
        this.cursor = this.limit - O;
        {
          const x = this.cursor;
          this.insert$esjava$3(this.cursor, this.cursor, "ü"), this.cursor = x;
        }
      } while (!1);
    return !0;
  }
  r_more_than_one_syllable_word$esjava$0() {
    let a, t;
    a = this.cursor;
    {
      let n = 2;
      n:
        for (; ; ) {
          t = this.cursor;
          e:
            do {
              a:
                for (; ; ) {
                  t:
                    do {
                      if (!this.in_grouping$esjava$3(k.g_vowel, 97, 305))
                        break t;
                      break a;
                    } while (!1);
                  if (this.cursor >= this.limit)
                    break e;
                  this.cursor++;
                }
              n--;
              continue n;
            } while (!1);
          this.cursor = t;
          break n;
        }
      if (n > 0)
        return !1;
    }
    return this.cursor = a, !0;
  }
  r_is_reserved_word$esjava$0() {
    let a, t, n;
    n:
      do {
        a = this.cursor;
        e:
          do {
            t = this.cursor;
            a:
              for (; ; ) {
                t:
                  do {
                    if (!this.eq_s$esjava$2(2, "ad"))
                      break t;
                    break a;
                  } while (!1);
                if (this.cursor >= this.limit)
                  break e;
                this.cursor++;
              }
            if (this.I_strlen = 2, this.I_strlen !== this.limit)
              break e;
            this.cursor = t;
            break n;
          } while (!1);
        this.cursor = a, n = this.cursor;
        e:
          for (; ; ) {
            a:
              do {
                if (!this.eq_s$esjava$2(5, "soyad"))
                  break a;
                break e;
              } while (!1);
            if (this.cursor >= this.limit)
              return !1;
            this.cursor++;
          }
        if (this.I_strlen = 5, this.I_strlen !== this.limit)
          return !1;
        this.cursor = n;
      } while (!1);
    return !0;
  }
  r_postlude$esjava$0() {
    let a, t, n;
    {
      a = this.cursor;
      n:
        do {
          if (!this.r_is_reserved_word$esjava$0())
            break n;
          return !1;
        } while (!1);
      this.cursor = a;
    }
    this.limit_backward = this.cursor, this.cursor = this.limit, t = this.limit - this.cursor;
    n:
      do
        if (!this.r_append_U_to_stems_ending_with_d_or_g$esjava$0())
          break n;
      while (!1);
    this.cursor = this.limit - t, n = this.limit - this.cursor;
    n:
      do
        if (!this.r_post_process_last_consonants$esjava$0())
          break n;
      while (!1);
    return this.cursor = this.limit - n, this.cursor = this.limit_backward, !0;
  }
  stem$esjava$0() {
    let a, t;
    if (!this.r_more_than_one_syllable_word$esjava$0())
      return !1;
    this.limit_backward = this.cursor, this.cursor = this.limit, a = this.limit - this.cursor;
    n:
      do
        if (!this.r_stem_nominal_verb_suffixes$esjava$0())
          break n;
      while (!1);
    if (this.cursor = this.limit - a, !this.B_continue_stemming_noun_suffixes)
      return !1;
    t = this.limit - this.cursor;
    n:
      do
        if (!this.r_stem_noun_suffixes$esjava$0())
          break n;
      while (!1);
    return this.cursor = this.limit - t, this.cursor = this.limit_backward, !!this.r_postlude$esjava$0();
  }
  stem(...a) {
    switch (a.length) {
      case 0:
        return this.stem$esjava$0(...a);
    }
    return super.stem(...a);
  }
}
const cnt = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: k
}, Symbol.toStringTag, { value: "Module" })), pnt = /* @__PURE__ */ Nm(cnt);
Object.defineProperty(Mj, "__esModule", {
  value: !0
});
Mj.default = fnt;
var gnt = mnt(pnt);
function mnt(e) {
  return e && e.__esModule ? e : { default: e };
}
function fnt(e, a) {
  e = e.toLowerCase(), e = e.replace("'", "");
  const t = new gnt.default(a);
  return t.setCurrent(e), t.stem(), t.getCurrent();
}
Object.defineProperty(Lj, "__esModule", {
  value: !0
});
Lj.default = vnt;
var hnt = K, ynt = ee, znt = bnt(Mj);
function bnt(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  baseStemmer: wnt
} = ynt.languageProcessing;
function vnt(e) {
  const a = (0, hnt.get)(e.getData("morphology"), "tr", !1);
  return a ? (t) => (0, znt.default)(t, a) : wnt;
}
var qj = {}, Ib = {};
Object.defineProperty(Ib, "__esModule", {
  value: !0
});
Ib.default = void 0;
Ib.default = ["nmak", "nmek", "nir", "nır", "nür", "nur", "nıyor", "niyor", "ndı", "ndi", "ndu", "ndü", "nmış", "nmiş", "nmuş", "nmüş", "necek", "nacak", "nmıştı", "nmişti", "nmuştu", "nmüştü", "nıyordu", "niyordu", "nuyordu", "nüyordu", "necekti", "nacaktı", "nsa", "nse", "nmalı", "nmeli", "nmaz", "nmez", "anmak", "enmek", "ınmak", "inmek", "unmak", "ünmek", "anır", "enir", "ınır", "inir", "unur", "ünür", "anıyor", "eniyor", "ınıyor", "iniyor", "unuyor", "ünüyor", "andı", "endi", "ındı", "indi", "undu", "ündü", "anmış", "enmiş", "ınmış", "inmiş", "unmuş", "ünmüş", "anacak", "enecek", "ınacak", "inecek", "unacak", "ünecek", "ınmıştı", "inmişti", "unmuştu", "ünmüştü", "ınıyordu", "iniyordu", "unuyordu", "ünüyordu", "necekti", "nacaktı", "ansa", "ense", "ınsa", "inse", "unsa", "ünse", "anmalı", "enmeli", "ınmalı", "inmeli", "unmalı", "ünmeli", "anmaz", "enmez", "ınmaz", "inmez", "unmaz", "ünmez", "ılmak", "ilmek", "ulmak", "ülmek", "ılır", "ilir", "ulur", "ülür", "ılınıyor", "iliniyor", "ulunuyor", "ülüyor", "ıldı", "ildi", "uldu", "üldü", "ılmış", "ilmiş", "ulmuş", "ülmül", "ılacak", "ilecek", "ulacak", "ülecek", "ılmıştı", "ilmişti", "ulmuştu", "ülmüştü", "ılıyordu", "iliyordu", "uluyordu", "ülüyordu", "necekti", "nacaktı", "ılsa", "ilse", "ulsa", "ülse", "ılmalı", "ilmeli", "ulmalı", "ülmeli", "ılmaz", "ilmez", "ulmaz", "ülmez"];
var vd = {};
Object.defineProperty(vd, "__esModule", {
  value: !0
});
vd.nonPassivesFullForms = vd.nonPassiveStems = void 0;
vd.nonPassivesFullForms = ["kullanmak", "ulanmak", "bağlanmak", "alınmak", "boşanmak", "kaçınmak", "hazırlanmak", "olunmak", "sığınmak", "taşınmak", "arlanmak", "sakınmak", "zanmak", "tırmanmak", "i̇nanmak", "arınmak", "kullanmak", "isınmak", "yıkanmak", "öğrenmek", "öğrenmek", "düşünmek", "renmek", "düşünmek", "ünmek", "dönmek", "değinmek", "eğlenmek", "lenmek", "öğünmek", "deyinmek", "örenmek", "görünmek", "öğrenmek", "güvenmek", "beğenmek", "sünmek", "geçinmek", "tükenmek", "kabullenmek", "öğrenmek", "kabullenmek", "sinir", "peynir", "münir", "alınır", "kazanır", "yorumlanır", "kullanır", "uygulanır", "dayanır", "sağlanır", "i̇nanır", "özenir", "elenir", "öğrenir", "tersinir", "yaşanır", "toplanır", "tanır", "senir", "rastlanır", "renir", "münir", "kaynaklanır", "bağlanır", "hazırlanır", "güvenir", "enir", "söylenir", "başlanır", "davranır", "kapanır", "oynanır", "uzanır", "tanımlanır", "tanınır", "souvenir", "öğrenir", "taşınır", "konteyner", "uyanır", "beğenir", "hesaplanır", "sanır", "saklanır", "yakalanır", "aranır", "algılanır", "hoşlanır", "karşılanır", "tamamlanır", "münir", "yayınlanır", "yıkanır", "tekrarlanır", "atanır", "bir", "karasenir", "i̇ndüklenir", "zorlanır", "avenir", "erdenir", "kas-sinir", "utanır", "üstenir", "katlanır", "beyazpeynir", "şekillenir", "sonuçlanır", "doğranır", "narin", "faydalanır", "kilinir", "hızlanır", "yararlanır", "kutlanır", "saptanır", "nedendir", "kalınır", "ayarlanır", "kıskanır", "hastalanır", "suvenir", "yapılabilinir", "canlanır", "ekillenir", "hacklenir", "haşlanır", "sonuçlanır", "resetlenir", "beğenir", "açıklanır", "programming-sinir", "i̇sindir", "odaklanır", "pionir", "çalınır", "peynir", "tutuklanır", "sınır", "taşımalık", "anır", "kanır", "adanır", "lanır", "ültanır", "rastlanır", "haktanır", "güneysınır", "i̇nanır", "açılır-kapanır", "sağlanır", "tanrı tanır", "bağlanır", "tanır", "yansır", "kullanır", "açıklanır", "dizaynır", "düşünür", "görünür", "siyanür", "dünür", "düşünür", "ünür", "çürür", "ömür", "nür", "öğünür", "onur", "aynur", "i̇lknur", "ayşenur", "öznur", "konur", "binnur", "alinur", "gülnur", "hükmolunur", "atanur", "rıza nur", "yurdanur", "şennur", "fatmanur", "şennur", "zinnur", "adanur", "semanur", "elanur", "düşünür", "baykonur", "edanur", "göknur", "günnur", "beyzanur", "görünür", "nisanur", "saynur", "mecnur", "lunur", "stem", "cemalnur", "i̇lknur", "aynur", "elnur", "addolunur", "ayşenur", "birnur", "sedanur", "alanur", "esmanur", "elifnur", "şahnur", "aydanur", "senanur", "ecenur", "havvanur", "bozunur", "bennur", "en-nur", "tennur", "konur", "reddolunur", "sondur", "olunur", "şeymanur", "şerefnur", "fernur", "stem", "ceynur", "zeynur", "gökçenur", "mervenur", "ernur", "sonunur", "biyobozunur", "şemsinur", "haşrolunur", "incinur", "lanıyor", "kulanıyor", "nıyor", "rastlanıyor", "kullanıyor", "kaynaklanıyor", "kazanıyor", "yaşanıyor", "alınıyor", "i̇nanıyor", "tanıyor", "hazırlanıyor", "dayanıyor", "söyleniyor", "sanıyor", "uygulanıyor", "yanıyor", "eleniyor", "davranıyor", "aranıyor", "öğreniyor", "sağlanıyor", "kapanıyor", "zorlanıyor", "tanınıyor", "kombinleniyor", "yayınlanıyor", "oynanıyor", "beğeniyor", "uyanıyor", "planlanıyor", "toplanıyor", "reniyor", "niyor", "öğreniyor", "bağlanıyor", "uzanıyor", "algılanıyor", "söyleniyor", "tanımlanıyor", "vurgulanıyor", "karşılanıyor", "kınıyor", "saklanıyor", "başlanıyor", "yükleniyor", "sıralanıyor", "alındı", "kendi", "pazubandı", "nındı", "irgandı", "yapsındı", "yarabandı", "açıklandı", "bağlandı", "kendi", "efendi", "beyefendi", "hanımefendi", "i̇kindi", "hocaefendi", "hindi", "bindi", "gandi", "nakşibendi", "selendi", "beyefendi", "bondi", "alindi", "kazandı", "veliefendi", "hanendi", "hacklendi", "burundi", "kullandı", "i̇vrindi", "başlandı", "yasandı", "lendi", "yayınlandı", "andı", "merkezefendi", "demirhindi", "vivendi", "grandi", "ögrendi", "aczmendi", "mundi", "kapandı", "hanendi", "kandil", "i̇nsandı", "çinhindi", "randi", "yandı", "şimdi", "semerkant", "açıklandı", "ravalpindi", "tamamlandı", "kadınefendi", "landi", "brendi", "beğendi", "gecekondu", "hindu", "soundu", "katmandu", "kundu", "olsundu", "poundu", "katmandu", "duşundu", "emrolundu", "vahyolundu", "hindu", "lundu", "candu", "roundu", "göründü", "paundu", "fırdöndü", "düşündü", "fondü", "üründü", "gündöndü", "mumsöndü", "kendü", "i̇nanmış", "ınmış", "i̇spatlanmış", "nınmış", "bağlanmış", "hazırlanmış", "lenmiş", "hacklenmiş", "öğrenmiş", "i̇ndüklenmiş", "sinterlenmiş", "begenmiş", "alinmiş", "kombinlenmiş", "lânetlenmiş", "editlenmiş", "yenmiş", "temperlenmiş", "beyenmiş", "kazanmiş", "olsunmuş", "emrolunmuş", "lunmuş", "yunmuş", "özüdönmüş", "söylenecek", "düşünecek", "öğrenecek", "lenecek", "düşünecek", "düzenlenecek", "öğrenecek", "renecek", "nacak", "alınacak", "lanacak", "kazanmıştı", "lenmişti", "emrolunmuştu", "i̇nanıyordu", "kullanıyordu", "tanıyordu", "dayanıyordu", "görünüyordu", "düşünüyordu", "nuyordu", "düşünüyordu", "ünüyordu", "fransa", "floransa", "lufthansa", "prensa", "yakınsa", "konsa", "hansa", "sansa", "mensa", "türkiye-fransa", "türbülansa", "ofansa", "hiltonsa", "almanya-fransa", "yünsa", "jinsa", "ınsa", "nınsa", "winsa", "hünsa", "extensa", "demansa", "fıransa", "advansa", "tnsa", "ingiltere-fransa", "ambiyansa", "ünsa", "rönesansa", "cheonsa", "malpensa", "densa", "finanse", "ense", "lanse", "adsense", "response", "defense", "sübvanse", "pense", "intense", "expense", "alphonse", "kompanse", "mumkunse", "odense", "fluminense", "ninse", "offense", "intellisense", "nonsense", "anse", "pfsense", "immense", "gorunse", "hernedense", "danse", "mightyadsense", "hisense", "hortense", "adriaanse", "süspanse", "önmeli", "ögrenmeli", "taşınmaz", "kuşkonmaz", "sınmaz", "alınmaz", "taşınmaz", "lanmaz", "osanmaz", "hoşlanmaz", "sönmez", "dönmez", "bölünmez", "ersönmez", "dönmez", "görünmez", "üşenmez", "sönmez", "görünmez", "yinmez", "sönmez", "kullanmak", "bağlanmak", "boşanmak", "hazırlanmak", "öğrenmek", "öğrenmek", "renmek", "eğlenmek", "lenmek", "örenmek", "öğrenmek", "sığınmak", "değinmek", "deyinmek", "düşünmek", "erişilebilir", "güvenilir", "aktarabilecek"];
vd.nonPassiveStems = ["sevi", "giyi", "gezi", "ayrı", "tıka", "ayrı", "sarı", "övü", "boşa", "besle", "kırı", "soyu", "yıka", "süsle", "içle", "besle", "tara", "çeki", "çözü", "hazırla", "üzü", "yıkı", "yıka", "kovu", "sıkı", "söyle", "kaçı", "kapa", "kası", "koru", "sarsı", "sığı", "kurula", "yakı", "yoru", "taşı", "uza", "takı", "yala", "atı", "iyileş", "sinirle", "dövü"];
Object.defineProperty(qj, "__esModule", {
  value: !0
});
qj.default = Tnt;
var knt = ee, N5 = _nt(Ib), L5 = vd;
function _nt(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  getWords: Ent
} = knt.languageProcessing, Ant = function(e) {
  return e.filter((a) => L5.nonPassiveStems.some((t) => N5.default.some(function(n) {
    return !new RegExp("^" + t + n + "$").test(a);
  })));
};
function Tnt(e) {
  let t = Ent(e).filter((n) => n.length > 5);
  return t = t.filter((n) => !L5.nonPassivesFullForms.includes(n)), t = Ant(t), t.some((n) => N5.default.some((r) => n.endsWith(r)));
}
Object.defineProperty(Nj, "__esModule", {
  value: !0
});
var M5 = Nj.default = void 0, $nt = ee, jnt = wl(xb), xnt = wl(wd), Snt = wl(Lr), Ont = wl(Sb), Int = wl(Ob), Cnt = wl(Lj), Pnt = wl(qj);
function wl(e) {
  return e && e.__esModule ? e : { default: e };
}
const {
  AbstractResearcher: Rnt
} = $nt.languageProcessing;
class Dnt extends Rnt {
  /**
   * Constructor
   * @param {Paper} paper The Paper object that is needed within the researches.
   * @constructor
   */
  constructor(a) {
    super(a), delete this.defaultResearches.getFleschReadingScore, Object.assign(this.config, {
      language: "tr",
      passiveConstructionType: "morphological",
      firstWordExceptions: jnt.default,
      functionWords: xnt.default,
      transitionWords: Snt.default,
      twoPartTransitionWords: Ont.default,
      sentenceLength: Int.default
    }), Object.assign(this.helpers, {
      getStemmer: Cnt.default,
      isPassiveSentence: Pnt.default
    });
  }
}
M5 = Nj.default = Dnt;
const Nnt = {
  ar: P4,
  ca: R4,
  cs: D4,
  de: E6,
  el: A6,
  en: R6,
  es: tq,
  fa: nq,
  fr: Tq,
  he: $q,
  hu: xq,
  id: dF,
  it: IF,
  ja: NF,
  nb: FF,
  nl: EB,
  pl: XB,
  pt: k8,
  ru: Z8,
  sk: e5,
  sv: D5,
  tr: M5
}, xk = new Map(Object.entries(Nnt));
self.onmessage = (e) => {
  const a = e.data.language, t = Lnt(a), n = new ee.AnalysisWebWorker(self, new t());
  Mnt(n, a), n.register();
};
function Lnt(e) {
  return xk.has(e) && typeof xk.get(e) == "function" ? xk.get(e) : YM;
}
function Mnt(e, a) {
  const {
    getLanguagesWithWordComplexity: t,
    getWordComplexityConfig: n,
    getWordComplexityHelper: r
  } = ee.helpers, o = ee.assessments.readability.WordComplexityAssessment, l = ee.assessments.seo.KeyphraseDistributionAssessment, u = ee.languageProcessing.researches.wordComplexity, c = ee.languageProcessing.researches.keyphraseDistribution, f = "YoastSEOPremium";
  if (t().includes(a)) {
    const z = n(a), v = r(a), O = new o(), I = new o({
      scores: {
        acceptableAmount: 3
      }
    });
    e.registerResearcherConfig("wordComplexity", z), e.registerHelper("checkIfWordIsComplex", v), e.registerResearch("wordComplexity", u), e.registerAssessment(
      "wordComplexity",
      O,
      f,
      "readability"
    ), e.registerAssessment(
      "wordComplexity",
      I,
      f,
      "cornerstoneReadability"
    );
  }
  const y = new l();
  e.registerResearch("keyphraseDistribution", c), e.registerAssessment(
    "keyphraseDistributionAssessment",
    y,
    f,
    "seo"
  );
}
